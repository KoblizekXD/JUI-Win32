// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct ITypeLib2Vtbl {
 *     HRESULT (*QueryInterface)(ITypeLib2*,const IID*,void**);
 *     ULONG (*AddRef)(ITypeLib2*);
 *     ULONG (*Release)(ITypeLib2*);
 *     UINT (*GetTypeInfoCount)(ITypeLib2*);
 *     HRESULT (*GetTypeInfo)(ITypeLib2*,UINT,ITypeInfo**);
 *     HRESULT (*GetTypeInfoType)(ITypeLib2*,UINT,TYPEKIND*);
 *     HRESULT (*GetTypeInfoOfGuid)(ITypeLib2*,const GUID*,ITypeInfo**);
 *     HRESULT (*GetLibAttr)(ITypeLib2*,TLIBATTR**);
 *     HRESULT (*GetTypeComp)(ITypeLib2*,ITypeComp**);
 *     HRESULT (*GetDocumentation)(ITypeLib2*,INT,BSTR*,BSTR*,DWORD*,BSTR*);
 *     HRESULT (*IsName)(ITypeLib2*,LPOLESTR,ULONG,BOOL*);
 *     HRESULT (*FindName)(ITypeLib2*,LPOLESTR,ULONG,ITypeInfo**,MEMBERID*,USHORT*);
 *     void (*ReleaseTLibAttr)(ITypeLib2*,TLIBATTR*);
 *     HRESULT (*GetCustData)(ITypeLib2*,const GUID*,VARIANT*);
 *     HRESULT (*GetLibStatistics)(ITypeLib2*,ULONG*,ULONG*);
 *     HRESULT (*GetDocumentation2)(ITypeLib2*,INT,LCID,BSTR*,DWORD*,BSTR*);
 *     HRESULT (*GetAllCustData)(ITypeLib2*,CUSTDATA*);
 * };
 * }
 */
public class ITypeLib2Vtbl {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("GetTypeInfoCount"),
        Constants$root.C_POINTER$LAYOUT.withName("GetTypeInfo"),
        Constants$root.C_POINTER$LAYOUT.withName("GetTypeInfoType"),
        Constants$root.C_POINTER$LAYOUT.withName("GetTypeInfoOfGuid"),
        Constants$root.C_POINTER$LAYOUT.withName("GetLibAttr"),
        Constants$root.C_POINTER$LAYOUT.withName("GetTypeComp"),
        Constants$root.C_POINTER$LAYOUT.withName("GetDocumentation"),
        Constants$root.C_POINTER$LAYOUT.withName("IsName"),
        Constants$root.C_POINTER$LAYOUT.withName("FindName"),
        Constants$root.C_POINTER$LAYOUT.withName("ReleaseTLibAttr"),
        Constants$root.C_POINTER$LAYOUT.withName("GetCustData"),
        Constants$root.C_POINTER$LAYOUT.withName("GetLibStatistics"),
        Constants$root.C_POINTER$LAYOUT.withName("GetDocumentation2"),
        Constants$root.C_POINTER$LAYOUT.withName("GetAllCustData")
    ).withName("ITypeLib2Vtbl");
    public static MemoryLayout $LAYOUT() {
        return ITypeLib2Vtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor QueryInterface_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_UP$MH = RuntimeHelper.upcallHandle(QueryInterface.class, "apply", ITypeLib2Vtbl.QueryInterface_UP$FUNC);
    static final FunctionDescriptor QueryInterface_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_DOWN$MH = RuntimeHelper.downcallHandle(
        ITypeLib2Vtbl.QueryInterface_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(ITypeLib2*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ITypeLib2Vtbl.QueryInterface_UP$MH, fi, ITypeLib2Vtbl.QueryInterface$FUNC, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)ITypeLib2Vtbl.QueryInterface_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return ITypeLib2Vtbl.QueryInterface$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(ITypeLib2*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ITypeLib2Vtbl.QueryInterface$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(ITypeLib2*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        ITypeLib2Vtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ITypeLib2Vtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        ITypeLib2Vtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, SegmentScope scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor AddRef_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_UP$MH = RuntimeHelper.upcallHandle(AddRef.class, "apply", ITypeLib2Vtbl.AddRef_UP$FUNC);
    static final FunctionDescriptor AddRef_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_DOWN$MH = RuntimeHelper.downcallHandle(
        ITypeLib2Vtbl.AddRef_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*AddRef)(ITypeLib2*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ITypeLib2Vtbl.AddRef_UP$MH, fi, ITypeLib2Vtbl.AddRef$FUNC, scope);
        }
        static AddRef ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)ITypeLib2Vtbl.AddRef_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return ITypeLib2Vtbl.AddRef$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(ITypeLib2*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ITypeLib2Vtbl.AddRef$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(ITypeLib2*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        ITypeLib2Vtbl.AddRef$VH.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ITypeLib2Vtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        ITypeLib2Vtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, SegmentScope scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Release_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_UP$MH = RuntimeHelper.upcallHandle(Release.class, "apply", ITypeLib2Vtbl.Release_UP$FUNC);
    static final FunctionDescriptor Release_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_DOWN$MH = RuntimeHelper.downcallHandle(
        ITypeLib2Vtbl.Release_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*Release)(ITypeLib2*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ITypeLib2Vtbl.Release_UP$MH, fi, ITypeLib2Vtbl.Release$FUNC, scope);
        }
        static Release ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)ITypeLib2Vtbl.Release_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return ITypeLib2Vtbl.Release$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(ITypeLib2*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ITypeLib2Vtbl.Release$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(ITypeLib2*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        ITypeLib2Vtbl.Release$VH.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ITypeLib2Vtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        ITypeLib2Vtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, SegmentScope scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    static final FunctionDescriptor GetTypeInfoCount$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetTypeInfoCount_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetTypeInfoCount_UP$MH = RuntimeHelper.upcallHandle(GetTypeInfoCount.class, "apply", ITypeLib2Vtbl.GetTypeInfoCount_UP$FUNC);
    static final FunctionDescriptor GetTypeInfoCount_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetTypeInfoCount_DOWN$MH = RuntimeHelper.downcallHandle(
        ITypeLib2Vtbl.GetTypeInfoCount_DOWN$FUNC
    );
    /**
     * {@snippet :
 * UINT (*GetTypeInfoCount)(ITypeLib2*);
     * }
     */
    public interface GetTypeInfoCount {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(GetTypeInfoCount fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ITypeLib2Vtbl.GetTypeInfoCount_UP$MH, fi, ITypeLib2Vtbl.GetTypeInfoCount$FUNC, scope);
        }
        static GetTypeInfoCount ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)ITypeLib2Vtbl.GetTypeInfoCount_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetTypeInfoCount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetTypeInfoCount"));
    public static VarHandle GetTypeInfoCount$VH() {
        return ITypeLib2Vtbl.GetTypeInfoCount$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * UINT (*GetTypeInfoCount)(ITypeLib2*);
     * }
     */
    public static MemorySegment GetTypeInfoCount$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ITypeLib2Vtbl.GetTypeInfoCount$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * UINT (*GetTypeInfoCount)(ITypeLib2*);
     * }
     */
    public static void GetTypeInfoCount$set(MemorySegment seg, MemorySegment x) {
        ITypeLib2Vtbl.GetTypeInfoCount$VH.set(seg, x);
    }
    public static MemorySegment GetTypeInfoCount$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ITypeLib2Vtbl.GetTypeInfoCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTypeInfoCount$set(MemorySegment seg, long index, MemorySegment x) {
        ITypeLib2Vtbl.GetTypeInfoCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTypeInfoCount GetTypeInfoCount(MemorySegment segment, SegmentScope scope) {
        return GetTypeInfoCount.ofAddress(GetTypeInfoCount$get(segment), scope);
    }
    static final FunctionDescriptor GetTypeInfo$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetTypeInfo_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetTypeInfo_UP$MH = RuntimeHelper.upcallHandle(GetTypeInfo.class, "apply", ITypeLib2Vtbl.GetTypeInfo_UP$FUNC);
    static final FunctionDescriptor GetTypeInfo_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetTypeInfo_DOWN$MH = RuntimeHelper.downcallHandle(
        ITypeLib2Vtbl.GetTypeInfo_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetTypeInfo)(ITypeLib2*,UINT,ITypeInfo**);
     * }
     */
    public interface GetTypeInfo {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetTypeInfo fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ITypeLib2Vtbl.GetTypeInfo_UP$MH, fi, ITypeLib2Vtbl.GetTypeInfo$FUNC, scope);
        }
        static GetTypeInfo ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)ITypeLib2Vtbl.GetTypeInfo_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetTypeInfo$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetTypeInfo"));
    public static VarHandle GetTypeInfo$VH() {
        return ITypeLib2Vtbl.GetTypeInfo$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetTypeInfo)(ITypeLib2*,UINT,ITypeInfo**);
     * }
     */
    public static MemorySegment GetTypeInfo$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ITypeLib2Vtbl.GetTypeInfo$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetTypeInfo)(ITypeLib2*,UINT,ITypeInfo**);
     * }
     */
    public static void GetTypeInfo$set(MemorySegment seg, MemorySegment x) {
        ITypeLib2Vtbl.GetTypeInfo$VH.set(seg, x);
    }
    public static MemorySegment GetTypeInfo$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ITypeLib2Vtbl.GetTypeInfo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTypeInfo$set(MemorySegment seg, long index, MemorySegment x) {
        ITypeLib2Vtbl.GetTypeInfo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTypeInfo GetTypeInfo(MemorySegment segment, SegmentScope scope) {
        return GetTypeInfo.ofAddress(GetTypeInfo$get(segment), scope);
    }
    static final FunctionDescriptor GetTypeInfoType$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetTypeInfoType_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetTypeInfoType_UP$MH = RuntimeHelper.upcallHandle(GetTypeInfoType.class, "apply", ITypeLib2Vtbl.GetTypeInfoType_UP$FUNC);
    static final FunctionDescriptor GetTypeInfoType_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetTypeInfoType_DOWN$MH = RuntimeHelper.downcallHandle(
        ITypeLib2Vtbl.GetTypeInfoType_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetTypeInfoType)(ITypeLib2*,UINT,TYPEKIND*);
     * }
     */
    public interface GetTypeInfoType {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetTypeInfoType fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ITypeLib2Vtbl.GetTypeInfoType_UP$MH, fi, ITypeLib2Vtbl.GetTypeInfoType$FUNC, scope);
        }
        static GetTypeInfoType ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)ITypeLib2Vtbl.GetTypeInfoType_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetTypeInfoType$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetTypeInfoType"));
    public static VarHandle GetTypeInfoType$VH() {
        return ITypeLib2Vtbl.GetTypeInfoType$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetTypeInfoType)(ITypeLib2*,UINT,TYPEKIND*);
     * }
     */
    public static MemorySegment GetTypeInfoType$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ITypeLib2Vtbl.GetTypeInfoType$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetTypeInfoType)(ITypeLib2*,UINT,TYPEKIND*);
     * }
     */
    public static void GetTypeInfoType$set(MemorySegment seg, MemorySegment x) {
        ITypeLib2Vtbl.GetTypeInfoType$VH.set(seg, x);
    }
    public static MemorySegment GetTypeInfoType$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ITypeLib2Vtbl.GetTypeInfoType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTypeInfoType$set(MemorySegment seg, long index, MemorySegment x) {
        ITypeLib2Vtbl.GetTypeInfoType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTypeInfoType GetTypeInfoType(MemorySegment segment, SegmentScope scope) {
        return GetTypeInfoType.ofAddress(GetTypeInfoType$get(segment), scope);
    }
    static final FunctionDescriptor GetTypeInfoOfGuid$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetTypeInfoOfGuid_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetTypeInfoOfGuid_UP$MH = RuntimeHelper.upcallHandle(GetTypeInfoOfGuid.class, "apply", ITypeLib2Vtbl.GetTypeInfoOfGuid_UP$FUNC);
    static final FunctionDescriptor GetTypeInfoOfGuid_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetTypeInfoOfGuid_DOWN$MH = RuntimeHelper.downcallHandle(
        ITypeLib2Vtbl.GetTypeInfoOfGuid_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetTypeInfoOfGuid)(ITypeLib2*,const GUID*,ITypeInfo**);
     * }
     */
    public interface GetTypeInfoOfGuid {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetTypeInfoOfGuid fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ITypeLib2Vtbl.GetTypeInfoOfGuid_UP$MH, fi, ITypeLib2Vtbl.GetTypeInfoOfGuid$FUNC, scope);
        }
        static GetTypeInfoOfGuid ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)ITypeLib2Vtbl.GetTypeInfoOfGuid_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetTypeInfoOfGuid$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetTypeInfoOfGuid"));
    public static VarHandle GetTypeInfoOfGuid$VH() {
        return ITypeLib2Vtbl.GetTypeInfoOfGuid$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetTypeInfoOfGuid)(ITypeLib2*,const GUID*,ITypeInfo**);
     * }
     */
    public static MemorySegment GetTypeInfoOfGuid$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ITypeLib2Vtbl.GetTypeInfoOfGuid$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetTypeInfoOfGuid)(ITypeLib2*,const GUID*,ITypeInfo**);
     * }
     */
    public static void GetTypeInfoOfGuid$set(MemorySegment seg, MemorySegment x) {
        ITypeLib2Vtbl.GetTypeInfoOfGuid$VH.set(seg, x);
    }
    public static MemorySegment GetTypeInfoOfGuid$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ITypeLib2Vtbl.GetTypeInfoOfGuid$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTypeInfoOfGuid$set(MemorySegment seg, long index, MemorySegment x) {
        ITypeLib2Vtbl.GetTypeInfoOfGuid$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTypeInfoOfGuid GetTypeInfoOfGuid(MemorySegment segment, SegmentScope scope) {
        return GetTypeInfoOfGuid.ofAddress(GetTypeInfoOfGuid$get(segment), scope);
    }
    static final FunctionDescriptor GetLibAttr$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetLibAttr_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetLibAttr_UP$MH = RuntimeHelper.upcallHandle(GetLibAttr.class, "apply", ITypeLib2Vtbl.GetLibAttr_UP$FUNC);
    static final FunctionDescriptor GetLibAttr_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetLibAttr_DOWN$MH = RuntimeHelper.downcallHandle(
        ITypeLib2Vtbl.GetLibAttr_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetLibAttr)(ITypeLib2*,TLIBATTR**);
     * }
     */
    public interface GetLibAttr {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetLibAttr fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ITypeLib2Vtbl.GetLibAttr_UP$MH, fi, ITypeLib2Vtbl.GetLibAttr$FUNC, scope);
        }
        static GetLibAttr ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)ITypeLib2Vtbl.GetLibAttr_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetLibAttr$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetLibAttr"));
    public static VarHandle GetLibAttr$VH() {
        return ITypeLib2Vtbl.GetLibAttr$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetLibAttr)(ITypeLib2*,TLIBATTR**);
     * }
     */
    public static MemorySegment GetLibAttr$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ITypeLib2Vtbl.GetLibAttr$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetLibAttr)(ITypeLib2*,TLIBATTR**);
     * }
     */
    public static void GetLibAttr$set(MemorySegment seg, MemorySegment x) {
        ITypeLib2Vtbl.GetLibAttr$VH.set(seg, x);
    }
    public static MemorySegment GetLibAttr$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ITypeLib2Vtbl.GetLibAttr$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetLibAttr$set(MemorySegment seg, long index, MemorySegment x) {
        ITypeLib2Vtbl.GetLibAttr$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetLibAttr GetLibAttr(MemorySegment segment, SegmentScope scope) {
        return GetLibAttr.ofAddress(GetLibAttr$get(segment), scope);
    }
    static final FunctionDescriptor GetTypeComp$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetTypeComp_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetTypeComp_UP$MH = RuntimeHelper.upcallHandle(GetTypeComp.class, "apply", ITypeLib2Vtbl.GetTypeComp_UP$FUNC);
    static final FunctionDescriptor GetTypeComp_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetTypeComp_DOWN$MH = RuntimeHelper.downcallHandle(
        ITypeLib2Vtbl.GetTypeComp_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetTypeComp)(ITypeLib2*,ITypeComp**);
     * }
     */
    public interface GetTypeComp {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetTypeComp fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ITypeLib2Vtbl.GetTypeComp_UP$MH, fi, ITypeLib2Vtbl.GetTypeComp$FUNC, scope);
        }
        static GetTypeComp ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)ITypeLib2Vtbl.GetTypeComp_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetTypeComp$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetTypeComp"));
    public static VarHandle GetTypeComp$VH() {
        return ITypeLib2Vtbl.GetTypeComp$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetTypeComp)(ITypeLib2*,ITypeComp**);
     * }
     */
    public static MemorySegment GetTypeComp$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ITypeLib2Vtbl.GetTypeComp$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetTypeComp)(ITypeLib2*,ITypeComp**);
     * }
     */
    public static void GetTypeComp$set(MemorySegment seg, MemorySegment x) {
        ITypeLib2Vtbl.GetTypeComp$VH.set(seg, x);
    }
    public static MemorySegment GetTypeComp$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ITypeLib2Vtbl.GetTypeComp$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTypeComp$set(MemorySegment seg, long index, MemorySegment x) {
        ITypeLib2Vtbl.GetTypeComp$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTypeComp GetTypeComp(MemorySegment segment, SegmentScope scope) {
        return GetTypeComp.ofAddress(GetTypeComp$get(segment), scope);
    }
    static final FunctionDescriptor GetDocumentation$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetDocumentation_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetDocumentation_UP$MH = RuntimeHelper.upcallHandle(GetDocumentation.class, "apply", ITypeLib2Vtbl.GetDocumentation_UP$FUNC);
    static final FunctionDescriptor GetDocumentation_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetDocumentation_DOWN$MH = RuntimeHelper.downcallHandle(
        ITypeLib2Vtbl.GetDocumentation_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetDocumentation)(ITypeLib2*,INT,BSTR*,BSTR*,DWORD*,BSTR*);
     * }
     */
    public interface GetDocumentation {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5);
        static MemorySegment allocate(GetDocumentation fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ITypeLib2Vtbl.GetDocumentation_UP$MH, fi, ITypeLib2Vtbl.GetDocumentation$FUNC, scope);
        }
        static GetDocumentation ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5) -> {
                try {
                    return (int)ITypeLib2Vtbl.GetDocumentation_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetDocumentation$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetDocumentation"));
    public static VarHandle GetDocumentation$VH() {
        return ITypeLib2Vtbl.GetDocumentation$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetDocumentation)(ITypeLib2*,INT,BSTR*,BSTR*,DWORD*,BSTR*);
     * }
     */
    public static MemorySegment GetDocumentation$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ITypeLib2Vtbl.GetDocumentation$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetDocumentation)(ITypeLib2*,INT,BSTR*,BSTR*,DWORD*,BSTR*);
     * }
     */
    public static void GetDocumentation$set(MemorySegment seg, MemorySegment x) {
        ITypeLib2Vtbl.GetDocumentation$VH.set(seg, x);
    }
    public static MemorySegment GetDocumentation$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ITypeLib2Vtbl.GetDocumentation$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDocumentation$set(MemorySegment seg, long index, MemorySegment x) {
        ITypeLib2Vtbl.GetDocumentation$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDocumentation GetDocumentation(MemorySegment segment, SegmentScope scope) {
        return GetDocumentation.ofAddress(GetDocumentation$get(segment), scope);
    }
    static final FunctionDescriptor IsName$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor IsName_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle IsName_UP$MH = RuntimeHelper.upcallHandle(IsName.class, "apply", ITypeLib2Vtbl.IsName_UP$FUNC);
    static final FunctionDescriptor IsName_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle IsName_DOWN$MH = RuntimeHelper.downcallHandle(
        ITypeLib2Vtbl.IsName_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*IsName)(ITypeLib2*,LPOLESTR,ULONG,BOOL*);
     * }
     */
    public interface IsName {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(IsName fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ITypeLib2Vtbl.IsName_UP$MH, fi, ITypeLib2Vtbl.IsName$FUNC, scope);
        }
        static IsName ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)ITypeLib2Vtbl.IsName_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle IsName$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("IsName"));
    public static VarHandle IsName$VH() {
        return ITypeLib2Vtbl.IsName$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*IsName)(ITypeLib2*,LPOLESTR,ULONG,BOOL*);
     * }
     */
    public static MemorySegment IsName$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ITypeLib2Vtbl.IsName$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*IsName)(ITypeLib2*,LPOLESTR,ULONG,BOOL*);
     * }
     */
    public static void IsName$set(MemorySegment seg, MemorySegment x) {
        ITypeLib2Vtbl.IsName$VH.set(seg, x);
    }
    public static MemorySegment IsName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ITypeLib2Vtbl.IsName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void IsName$set(MemorySegment seg, long index, MemorySegment x) {
        ITypeLib2Vtbl.IsName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static IsName IsName(MemorySegment segment, SegmentScope scope) {
        return IsName.ofAddress(IsName$get(segment), scope);
    }
    static final FunctionDescriptor FindName$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor FindName_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle FindName_UP$MH = RuntimeHelper.upcallHandle(FindName.class, "apply", ITypeLib2Vtbl.FindName_UP$FUNC);
    static final FunctionDescriptor FindName_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle FindName_DOWN$MH = RuntimeHelper.downcallHandle(
        ITypeLib2Vtbl.FindName_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*FindName)(ITypeLib2*,LPOLESTR,ULONG,ITypeInfo**,MEMBERID*,USHORT*);
     * }
     */
    public interface FindName {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5);
        static MemorySegment allocate(FindName fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ITypeLib2Vtbl.FindName_UP$MH, fi, ITypeLib2Vtbl.FindName$FUNC, scope);
        }
        static FindName ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5) -> {
                try {
                    return (int)ITypeLib2Vtbl.FindName_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle FindName$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("FindName"));
    public static VarHandle FindName$VH() {
        return ITypeLib2Vtbl.FindName$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*FindName)(ITypeLib2*,LPOLESTR,ULONG,ITypeInfo**,MEMBERID*,USHORT*);
     * }
     */
    public static MemorySegment FindName$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ITypeLib2Vtbl.FindName$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*FindName)(ITypeLib2*,LPOLESTR,ULONG,ITypeInfo**,MEMBERID*,USHORT*);
     * }
     */
    public static void FindName$set(MemorySegment seg, MemorySegment x) {
        ITypeLib2Vtbl.FindName$VH.set(seg, x);
    }
    public static MemorySegment FindName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ITypeLib2Vtbl.FindName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void FindName$set(MemorySegment seg, long index, MemorySegment x) {
        ITypeLib2Vtbl.FindName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static FindName FindName(MemorySegment segment, SegmentScope scope) {
        return FindName.ofAddress(FindName$get(segment), scope);
    }
    static final FunctionDescriptor ReleaseTLibAttr$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor ReleaseTLibAttr_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ReleaseTLibAttr_UP$MH = RuntimeHelper.upcallHandle(ReleaseTLibAttr.class, "apply", ITypeLib2Vtbl.ReleaseTLibAttr_UP$FUNC);
    static final FunctionDescriptor ReleaseTLibAttr_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ReleaseTLibAttr_DOWN$MH = RuntimeHelper.downcallHandle(
        ITypeLib2Vtbl.ReleaseTLibAttr_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*ReleaseTLibAttr)(ITypeLib2*,TLIBATTR*);
     * }
     */
    public interface ReleaseTLibAttr {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(ReleaseTLibAttr fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ITypeLib2Vtbl.ReleaseTLibAttr_UP$MH, fi, ITypeLib2Vtbl.ReleaseTLibAttr$FUNC, scope);
        }
        static ReleaseTLibAttr ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    ITypeLib2Vtbl.ReleaseTLibAttr_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ReleaseTLibAttr$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ReleaseTLibAttr"));
    public static VarHandle ReleaseTLibAttr$VH() {
        return ITypeLib2Vtbl.ReleaseTLibAttr$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*ReleaseTLibAttr)(ITypeLib2*,TLIBATTR*);
     * }
     */
    public static MemorySegment ReleaseTLibAttr$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ITypeLib2Vtbl.ReleaseTLibAttr$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*ReleaseTLibAttr)(ITypeLib2*,TLIBATTR*);
     * }
     */
    public static void ReleaseTLibAttr$set(MemorySegment seg, MemorySegment x) {
        ITypeLib2Vtbl.ReleaseTLibAttr$VH.set(seg, x);
    }
    public static MemorySegment ReleaseTLibAttr$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ITypeLib2Vtbl.ReleaseTLibAttr$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ReleaseTLibAttr$set(MemorySegment seg, long index, MemorySegment x) {
        ITypeLib2Vtbl.ReleaseTLibAttr$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ReleaseTLibAttr ReleaseTLibAttr(MemorySegment segment, SegmentScope scope) {
        return ReleaseTLibAttr.ofAddress(ReleaseTLibAttr$get(segment), scope);
    }
    static final FunctionDescriptor GetCustData$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetCustData_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetCustData_UP$MH = RuntimeHelper.upcallHandle(GetCustData.class, "apply", ITypeLib2Vtbl.GetCustData_UP$FUNC);
    static final FunctionDescriptor GetCustData_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetCustData_DOWN$MH = RuntimeHelper.downcallHandle(
        ITypeLib2Vtbl.GetCustData_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetCustData)(ITypeLib2*,const GUID*,VARIANT*);
     * }
     */
    public interface GetCustData {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetCustData fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ITypeLib2Vtbl.GetCustData_UP$MH, fi, ITypeLib2Vtbl.GetCustData$FUNC, scope);
        }
        static GetCustData ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)ITypeLib2Vtbl.GetCustData_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetCustData$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetCustData"));
    public static VarHandle GetCustData$VH() {
        return ITypeLib2Vtbl.GetCustData$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetCustData)(ITypeLib2*,const GUID*,VARIANT*);
     * }
     */
    public static MemorySegment GetCustData$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ITypeLib2Vtbl.GetCustData$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetCustData)(ITypeLib2*,const GUID*,VARIANT*);
     * }
     */
    public static void GetCustData$set(MemorySegment seg, MemorySegment x) {
        ITypeLib2Vtbl.GetCustData$VH.set(seg, x);
    }
    public static MemorySegment GetCustData$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ITypeLib2Vtbl.GetCustData$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetCustData$set(MemorySegment seg, long index, MemorySegment x) {
        ITypeLib2Vtbl.GetCustData$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetCustData GetCustData(MemorySegment segment, SegmentScope scope) {
        return GetCustData.ofAddress(GetCustData$get(segment), scope);
    }
    static final FunctionDescriptor GetLibStatistics$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetLibStatistics_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetLibStatistics_UP$MH = RuntimeHelper.upcallHandle(GetLibStatistics.class, "apply", ITypeLib2Vtbl.GetLibStatistics_UP$FUNC);
    static final FunctionDescriptor GetLibStatistics_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetLibStatistics_DOWN$MH = RuntimeHelper.downcallHandle(
        ITypeLib2Vtbl.GetLibStatistics_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetLibStatistics)(ITypeLib2*,ULONG*,ULONG*);
     * }
     */
    public interface GetLibStatistics {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetLibStatistics fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ITypeLib2Vtbl.GetLibStatistics_UP$MH, fi, ITypeLib2Vtbl.GetLibStatistics$FUNC, scope);
        }
        static GetLibStatistics ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)ITypeLib2Vtbl.GetLibStatistics_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetLibStatistics$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetLibStatistics"));
    public static VarHandle GetLibStatistics$VH() {
        return ITypeLib2Vtbl.GetLibStatistics$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetLibStatistics)(ITypeLib2*,ULONG*,ULONG*);
     * }
     */
    public static MemorySegment GetLibStatistics$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ITypeLib2Vtbl.GetLibStatistics$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetLibStatistics)(ITypeLib2*,ULONG*,ULONG*);
     * }
     */
    public static void GetLibStatistics$set(MemorySegment seg, MemorySegment x) {
        ITypeLib2Vtbl.GetLibStatistics$VH.set(seg, x);
    }
    public static MemorySegment GetLibStatistics$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ITypeLib2Vtbl.GetLibStatistics$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetLibStatistics$set(MemorySegment seg, long index, MemorySegment x) {
        ITypeLib2Vtbl.GetLibStatistics$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetLibStatistics GetLibStatistics(MemorySegment segment, SegmentScope scope) {
        return GetLibStatistics.ofAddress(GetLibStatistics$get(segment), scope);
    }
    static final FunctionDescriptor GetDocumentation2$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetDocumentation2_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetDocumentation2_UP$MH = RuntimeHelper.upcallHandle(GetDocumentation2.class, "apply", ITypeLib2Vtbl.GetDocumentation2_UP$FUNC);
    static final FunctionDescriptor GetDocumentation2_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetDocumentation2_DOWN$MH = RuntimeHelper.downcallHandle(
        ITypeLib2Vtbl.GetDocumentation2_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetDocumentation2)(ITypeLib2*,INT,LCID,BSTR*,DWORD*,BSTR*);
     * }
     */
    public interface GetDocumentation2 {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5);
        static MemorySegment allocate(GetDocumentation2 fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ITypeLib2Vtbl.GetDocumentation2_UP$MH, fi, ITypeLib2Vtbl.GetDocumentation2$FUNC, scope);
        }
        static GetDocumentation2 ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5) -> {
                try {
                    return (int)ITypeLib2Vtbl.GetDocumentation2_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetDocumentation2$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetDocumentation2"));
    public static VarHandle GetDocumentation2$VH() {
        return ITypeLib2Vtbl.GetDocumentation2$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetDocumentation2)(ITypeLib2*,INT,LCID,BSTR*,DWORD*,BSTR*);
     * }
     */
    public static MemorySegment GetDocumentation2$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ITypeLib2Vtbl.GetDocumentation2$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetDocumentation2)(ITypeLib2*,INT,LCID,BSTR*,DWORD*,BSTR*);
     * }
     */
    public static void GetDocumentation2$set(MemorySegment seg, MemorySegment x) {
        ITypeLib2Vtbl.GetDocumentation2$VH.set(seg, x);
    }
    public static MemorySegment GetDocumentation2$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ITypeLib2Vtbl.GetDocumentation2$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDocumentation2$set(MemorySegment seg, long index, MemorySegment x) {
        ITypeLib2Vtbl.GetDocumentation2$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDocumentation2 GetDocumentation2(MemorySegment segment, SegmentScope scope) {
        return GetDocumentation2.ofAddress(GetDocumentation2$get(segment), scope);
    }
    static final FunctionDescriptor GetAllCustData$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetAllCustData_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetAllCustData_UP$MH = RuntimeHelper.upcallHandle(GetAllCustData.class, "apply", ITypeLib2Vtbl.GetAllCustData_UP$FUNC);
    static final FunctionDescriptor GetAllCustData_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetAllCustData_DOWN$MH = RuntimeHelper.downcallHandle(
        ITypeLib2Vtbl.GetAllCustData_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetAllCustData)(ITypeLib2*,CUSTDATA*);
     * }
     */
    public interface GetAllCustData {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetAllCustData fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ITypeLib2Vtbl.GetAllCustData_UP$MH, fi, ITypeLib2Vtbl.GetAllCustData$FUNC, scope);
        }
        static GetAllCustData ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)ITypeLib2Vtbl.GetAllCustData_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetAllCustData$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetAllCustData"));
    public static VarHandle GetAllCustData$VH() {
        return ITypeLib2Vtbl.GetAllCustData$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetAllCustData)(ITypeLib2*,CUSTDATA*);
     * }
     */
    public static MemorySegment GetAllCustData$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ITypeLib2Vtbl.GetAllCustData$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetAllCustData)(ITypeLib2*,CUSTDATA*);
     * }
     */
    public static void GetAllCustData$set(MemorySegment seg, MemorySegment x) {
        ITypeLib2Vtbl.GetAllCustData$VH.set(seg, x);
    }
    public static MemorySegment GetAllCustData$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ITypeLib2Vtbl.GetAllCustData$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetAllCustData$set(MemorySegment seg, long index, MemorySegment x) {
        ITypeLib2Vtbl.GetAllCustData$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetAllCustData GetAllCustData(MemorySegment segment, SegmentScope scope) {
        return GetAllCustData.ofAddress(GetAllCustData$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


