// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct AsyncIAdviseSink2Vtbl {
 *     HRESULT (*QueryInterface)(AsyncIAdviseSink2*,const IID*,void**);
 *     ULONG (*AddRef)(AsyncIAdviseSink2*);
 *     ULONG (*Release)(AsyncIAdviseSink2*);
 *     void (*Begin_OnDataChange)(AsyncIAdviseSink2*,FORMATETC*,STGMEDIUM*);
 *     void (*Finish_OnDataChange)(AsyncIAdviseSink2*);
 *     void (*Begin_OnViewChange)(AsyncIAdviseSink2*,DWORD,LONG);
 *     void (*Finish_OnViewChange)(AsyncIAdviseSink2*);
 *     void (*Begin_OnRename)(AsyncIAdviseSink2*,IMoniker*);
 *     void (*Finish_OnRename)(AsyncIAdviseSink2*);
 *     void (*Begin_OnSave)(AsyncIAdviseSink2*);
 *     void (*Finish_OnSave)(AsyncIAdviseSink2*);
 *     void (*Begin_OnClose)(AsyncIAdviseSink2*);
 *     void (*Finish_OnClose)(AsyncIAdviseSink2*);
 *     void (*Begin_OnLinkSrcChange)(AsyncIAdviseSink2*,IMoniker*);
 *     void (*Finish_OnLinkSrcChange)(AsyncIAdviseSink2*);
 * };
 * }
 */
public class AsyncIAdviseSink2Vtbl {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("Begin_OnDataChange"),
        Constants$root.C_POINTER$LAYOUT.withName("Finish_OnDataChange"),
        Constants$root.C_POINTER$LAYOUT.withName("Begin_OnViewChange"),
        Constants$root.C_POINTER$LAYOUT.withName("Finish_OnViewChange"),
        Constants$root.C_POINTER$LAYOUT.withName("Begin_OnRename"),
        Constants$root.C_POINTER$LAYOUT.withName("Finish_OnRename"),
        Constants$root.C_POINTER$LAYOUT.withName("Begin_OnSave"),
        Constants$root.C_POINTER$LAYOUT.withName("Finish_OnSave"),
        Constants$root.C_POINTER$LAYOUT.withName("Begin_OnClose"),
        Constants$root.C_POINTER$LAYOUT.withName("Finish_OnClose"),
        Constants$root.C_POINTER$LAYOUT.withName("Begin_OnLinkSrcChange"),
        Constants$root.C_POINTER$LAYOUT.withName("Finish_OnLinkSrcChange")
    ).withName("AsyncIAdviseSink2Vtbl");
    public static MemoryLayout $LAYOUT() {
        return AsyncIAdviseSink2Vtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor QueryInterface_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_UP$MH = RuntimeHelper.upcallHandle(QueryInterface.class, "apply", AsyncIAdviseSink2Vtbl.QueryInterface_UP$FUNC);
    static final FunctionDescriptor QueryInterface_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_DOWN$MH = RuntimeHelper.downcallHandle(
        AsyncIAdviseSink2Vtbl.QueryInterface_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(AsyncIAdviseSink2*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(AsyncIAdviseSink2Vtbl.QueryInterface_UP$MH, fi, AsyncIAdviseSink2Vtbl.QueryInterface$FUNC, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)AsyncIAdviseSink2Vtbl.QueryInterface_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return AsyncIAdviseSink2Vtbl.QueryInterface$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(AsyncIAdviseSink2*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AsyncIAdviseSink2Vtbl.QueryInterface$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(AsyncIAdviseSink2*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        AsyncIAdviseSink2Vtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AsyncIAdviseSink2Vtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        AsyncIAdviseSink2Vtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, SegmentScope scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor AddRef_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_UP$MH = RuntimeHelper.upcallHandle(AddRef.class, "apply", AsyncIAdviseSink2Vtbl.AddRef_UP$FUNC);
    static final FunctionDescriptor AddRef_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_DOWN$MH = RuntimeHelper.downcallHandle(
        AsyncIAdviseSink2Vtbl.AddRef_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*AddRef)(AsyncIAdviseSink2*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(AsyncIAdviseSink2Vtbl.AddRef_UP$MH, fi, AsyncIAdviseSink2Vtbl.AddRef$FUNC, scope);
        }
        static AddRef ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)AsyncIAdviseSink2Vtbl.AddRef_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return AsyncIAdviseSink2Vtbl.AddRef$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(AsyncIAdviseSink2*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AsyncIAdviseSink2Vtbl.AddRef$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(AsyncIAdviseSink2*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        AsyncIAdviseSink2Vtbl.AddRef$VH.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AsyncIAdviseSink2Vtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        AsyncIAdviseSink2Vtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, SegmentScope scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Release_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_UP$MH = RuntimeHelper.upcallHandle(Release.class, "apply", AsyncIAdviseSink2Vtbl.Release_UP$FUNC);
    static final FunctionDescriptor Release_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_DOWN$MH = RuntimeHelper.downcallHandle(
        AsyncIAdviseSink2Vtbl.Release_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*Release)(AsyncIAdviseSink2*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(AsyncIAdviseSink2Vtbl.Release_UP$MH, fi, AsyncIAdviseSink2Vtbl.Release$FUNC, scope);
        }
        static Release ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)AsyncIAdviseSink2Vtbl.Release_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return AsyncIAdviseSink2Vtbl.Release$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(AsyncIAdviseSink2*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AsyncIAdviseSink2Vtbl.Release$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(AsyncIAdviseSink2*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        AsyncIAdviseSink2Vtbl.Release$VH.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AsyncIAdviseSink2Vtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        AsyncIAdviseSink2Vtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, SegmentScope scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    static final FunctionDescriptor Begin_OnDataChange$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Begin_OnDataChange_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Begin_OnDataChange_UP$MH = RuntimeHelper.upcallHandle(Begin_OnDataChange.class, "apply", AsyncIAdviseSink2Vtbl.Begin_OnDataChange_UP$FUNC);
    static final FunctionDescriptor Begin_OnDataChange_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Begin_OnDataChange_DOWN$MH = RuntimeHelper.downcallHandle(
        AsyncIAdviseSink2Vtbl.Begin_OnDataChange_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*Begin_OnDataChange)(AsyncIAdviseSink2*,FORMATETC*,STGMEDIUM*);
     * }
     */
    public interface Begin_OnDataChange {

        void apply(java.lang.foreign.MemorySegment pszObjectOid, java.lang.foreign.MemorySegment pObject, java.lang.foreign.MemorySegment pvFreeContext);
        static MemorySegment allocate(Begin_OnDataChange fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(AsyncIAdviseSink2Vtbl.Begin_OnDataChange_UP$MH, fi, AsyncIAdviseSink2Vtbl.Begin_OnDataChange$FUNC, scope);
        }
        static Begin_OnDataChange ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _pszObjectOid, java.lang.foreign.MemorySegment _pObject, java.lang.foreign.MemorySegment _pvFreeContext) -> {
                try {
                    AsyncIAdviseSink2Vtbl.Begin_OnDataChange_DOWN$MH.invokeExact(symbol, _pszObjectOid, _pObject, _pvFreeContext);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Begin_OnDataChange$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Begin_OnDataChange"));
    public static VarHandle Begin_OnDataChange$VH() {
        return AsyncIAdviseSink2Vtbl.Begin_OnDataChange$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*Begin_OnDataChange)(AsyncIAdviseSink2*,FORMATETC*,STGMEDIUM*);
     * }
     */
    public static MemorySegment Begin_OnDataChange$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AsyncIAdviseSink2Vtbl.Begin_OnDataChange$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*Begin_OnDataChange)(AsyncIAdviseSink2*,FORMATETC*,STGMEDIUM*);
     * }
     */
    public static void Begin_OnDataChange$set(MemorySegment seg, MemorySegment x) {
        AsyncIAdviseSink2Vtbl.Begin_OnDataChange$VH.set(seg, x);
    }
    public static MemorySegment Begin_OnDataChange$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AsyncIAdviseSink2Vtbl.Begin_OnDataChange$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Begin_OnDataChange$set(MemorySegment seg, long index, MemorySegment x) {
        AsyncIAdviseSink2Vtbl.Begin_OnDataChange$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Begin_OnDataChange Begin_OnDataChange(MemorySegment segment, SegmentScope scope) {
        return Begin_OnDataChange.ofAddress(Begin_OnDataChange$get(segment), scope);
    }
    static final FunctionDescriptor Finish_OnDataChange$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Finish_OnDataChange_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Finish_OnDataChange_UP$MH = RuntimeHelper.upcallHandle(Finish_OnDataChange.class, "apply", AsyncIAdviseSink2Vtbl.Finish_OnDataChange_UP$FUNC);
    static final FunctionDescriptor Finish_OnDataChange_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Finish_OnDataChange_DOWN$MH = RuntimeHelper.downcallHandle(
        AsyncIAdviseSink2Vtbl.Finish_OnDataChange_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*Finish_OnDataChange)(AsyncIAdviseSink2*);
     * }
     */
    public interface Finish_OnDataChange {

        void apply(java.lang.foreign.MemorySegment pParameter);
        static MemorySegment allocate(Finish_OnDataChange fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(AsyncIAdviseSink2Vtbl.Finish_OnDataChange_UP$MH, fi, AsyncIAdviseSink2Vtbl.Finish_OnDataChange$FUNC, scope);
        }
        static Finish_OnDataChange ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _pParameter) -> {
                try {
                    AsyncIAdviseSink2Vtbl.Finish_OnDataChange_DOWN$MH.invokeExact(symbol, _pParameter);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Finish_OnDataChange$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Finish_OnDataChange"));
    public static VarHandle Finish_OnDataChange$VH() {
        return AsyncIAdviseSink2Vtbl.Finish_OnDataChange$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*Finish_OnDataChange)(AsyncIAdviseSink2*);
     * }
     */
    public static MemorySegment Finish_OnDataChange$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AsyncIAdviseSink2Vtbl.Finish_OnDataChange$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*Finish_OnDataChange)(AsyncIAdviseSink2*);
     * }
     */
    public static void Finish_OnDataChange$set(MemorySegment seg, MemorySegment x) {
        AsyncIAdviseSink2Vtbl.Finish_OnDataChange$VH.set(seg, x);
    }
    public static MemorySegment Finish_OnDataChange$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AsyncIAdviseSink2Vtbl.Finish_OnDataChange$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Finish_OnDataChange$set(MemorySegment seg, long index, MemorySegment x) {
        AsyncIAdviseSink2Vtbl.Finish_OnDataChange$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Finish_OnDataChange Finish_OnDataChange(MemorySegment segment, SegmentScope scope) {
        return Finish_OnDataChange.ofAddress(Finish_OnDataChange$get(segment), scope);
    }
    static final FunctionDescriptor Begin_OnViewChange$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor Begin_OnViewChange_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle Begin_OnViewChange_UP$MH = RuntimeHelper.upcallHandle(Begin_OnViewChange.class, "apply", AsyncIAdviseSink2Vtbl.Begin_OnViewChange_UP$FUNC);
    static final FunctionDescriptor Begin_OnViewChange_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle Begin_OnViewChange_DOWN$MH = RuntimeHelper.downcallHandle(
        AsyncIAdviseSink2Vtbl.Begin_OnViewChange_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*Begin_OnViewChange)(AsyncIAdviseSink2*,DWORD,LONG);
     * }
     */
    public interface Begin_OnViewChange {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2);
        static MemorySegment allocate(Begin_OnViewChange fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(AsyncIAdviseSink2Vtbl.Begin_OnViewChange_UP$MH, fi, AsyncIAdviseSink2Vtbl.Begin_OnViewChange$FUNC, scope);
        }
        static Begin_OnViewChange ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2) -> {
                try {
                    AsyncIAdviseSink2Vtbl.Begin_OnViewChange_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Begin_OnViewChange$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Begin_OnViewChange"));
    public static VarHandle Begin_OnViewChange$VH() {
        return AsyncIAdviseSink2Vtbl.Begin_OnViewChange$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*Begin_OnViewChange)(AsyncIAdviseSink2*,DWORD,LONG);
     * }
     */
    public static MemorySegment Begin_OnViewChange$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AsyncIAdviseSink2Vtbl.Begin_OnViewChange$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*Begin_OnViewChange)(AsyncIAdviseSink2*,DWORD,LONG);
     * }
     */
    public static void Begin_OnViewChange$set(MemorySegment seg, MemorySegment x) {
        AsyncIAdviseSink2Vtbl.Begin_OnViewChange$VH.set(seg, x);
    }
    public static MemorySegment Begin_OnViewChange$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AsyncIAdviseSink2Vtbl.Begin_OnViewChange$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Begin_OnViewChange$set(MemorySegment seg, long index, MemorySegment x) {
        AsyncIAdviseSink2Vtbl.Begin_OnViewChange$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Begin_OnViewChange Begin_OnViewChange(MemorySegment segment, SegmentScope scope) {
        return Begin_OnViewChange.ofAddress(Begin_OnViewChange$get(segment), scope);
    }
    static final FunctionDescriptor Finish_OnViewChange$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Finish_OnViewChange_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Finish_OnViewChange_UP$MH = RuntimeHelper.upcallHandle(Finish_OnViewChange.class, "apply", AsyncIAdviseSink2Vtbl.Finish_OnViewChange_UP$FUNC);
    static final FunctionDescriptor Finish_OnViewChange_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Finish_OnViewChange_DOWN$MH = RuntimeHelper.downcallHandle(
        AsyncIAdviseSink2Vtbl.Finish_OnViewChange_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*Finish_OnViewChange)(AsyncIAdviseSink2*);
     * }
     */
    public interface Finish_OnViewChange {

        void apply(java.lang.foreign.MemorySegment pParameter);
        static MemorySegment allocate(Finish_OnViewChange fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(AsyncIAdviseSink2Vtbl.Finish_OnViewChange_UP$MH, fi, AsyncIAdviseSink2Vtbl.Finish_OnViewChange$FUNC, scope);
        }
        static Finish_OnViewChange ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _pParameter) -> {
                try {
                    AsyncIAdviseSink2Vtbl.Finish_OnViewChange_DOWN$MH.invokeExact(symbol, _pParameter);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Finish_OnViewChange$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Finish_OnViewChange"));
    public static VarHandle Finish_OnViewChange$VH() {
        return AsyncIAdviseSink2Vtbl.Finish_OnViewChange$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*Finish_OnViewChange)(AsyncIAdviseSink2*);
     * }
     */
    public static MemorySegment Finish_OnViewChange$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AsyncIAdviseSink2Vtbl.Finish_OnViewChange$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*Finish_OnViewChange)(AsyncIAdviseSink2*);
     * }
     */
    public static void Finish_OnViewChange$set(MemorySegment seg, MemorySegment x) {
        AsyncIAdviseSink2Vtbl.Finish_OnViewChange$VH.set(seg, x);
    }
    public static MemorySegment Finish_OnViewChange$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AsyncIAdviseSink2Vtbl.Finish_OnViewChange$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Finish_OnViewChange$set(MemorySegment seg, long index, MemorySegment x) {
        AsyncIAdviseSink2Vtbl.Finish_OnViewChange$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Finish_OnViewChange Finish_OnViewChange(MemorySegment segment, SegmentScope scope) {
        return Finish_OnViewChange.ofAddress(Finish_OnViewChange$get(segment), scope);
    }
    static final FunctionDescriptor Begin_OnRename$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Begin_OnRename_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Begin_OnRename_UP$MH = RuntimeHelper.upcallHandle(Begin_OnRename.class, "apply", AsyncIAdviseSink2Vtbl.Begin_OnRename_UP$FUNC);
    static final FunctionDescriptor Begin_OnRename_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Begin_OnRename_DOWN$MH = RuntimeHelper.downcallHandle(
        AsyncIAdviseSink2Vtbl.Begin_OnRename_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*Begin_OnRename)(AsyncIAdviseSink2*,IMoniker*);
     * }
     */
    public interface Begin_OnRename {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(Begin_OnRename fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(AsyncIAdviseSink2Vtbl.Begin_OnRename_UP$MH, fi, AsyncIAdviseSink2Vtbl.Begin_OnRename$FUNC, scope);
        }
        static Begin_OnRename ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    AsyncIAdviseSink2Vtbl.Begin_OnRename_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Begin_OnRename$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Begin_OnRename"));
    public static VarHandle Begin_OnRename$VH() {
        return AsyncIAdviseSink2Vtbl.Begin_OnRename$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*Begin_OnRename)(AsyncIAdviseSink2*,IMoniker*);
     * }
     */
    public static MemorySegment Begin_OnRename$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AsyncIAdviseSink2Vtbl.Begin_OnRename$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*Begin_OnRename)(AsyncIAdviseSink2*,IMoniker*);
     * }
     */
    public static void Begin_OnRename$set(MemorySegment seg, MemorySegment x) {
        AsyncIAdviseSink2Vtbl.Begin_OnRename$VH.set(seg, x);
    }
    public static MemorySegment Begin_OnRename$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AsyncIAdviseSink2Vtbl.Begin_OnRename$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Begin_OnRename$set(MemorySegment seg, long index, MemorySegment x) {
        AsyncIAdviseSink2Vtbl.Begin_OnRename$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Begin_OnRename Begin_OnRename(MemorySegment segment, SegmentScope scope) {
        return Begin_OnRename.ofAddress(Begin_OnRename$get(segment), scope);
    }
    static final FunctionDescriptor Finish_OnRename$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Finish_OnRename_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Finish_OnRename_UP$MH = RuntimeHelper.upcallHandle(Finish_OnRename.class, "apply", AsyncIAdviseSink2Vtbl.Finish_OnRename_UP$FUNC);
    static final FunctionDescriptor Finish_OnRename_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Finish_OnRename_DOWN$MH = RuntimeHelper.downcallHandle(
        AsyncIAdviseSink2Vtbl.Finish_OnRename_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*Finish_OnRename)(AsyncIAdviseSink2*);
     * }
     */
    public interface Finish_OnRename {

        void apply(java.lang.foreign.MemorySegment pParameter);
        static MemorySegment allocate(Finish_OnRename fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(AsyncIAdviseSink2Vtbl.Finish_OnRename_UP$MH, fi, AsyncIAdviseSink2Vtbl.Finish_OnRename$FUNC, scope);
        }
        static Finish_OnRename ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _pParameter) -> {
                try {
                    AsyncIAdviseSink2Vtbl.Finish_OnRename_DOWN$MH.invokeExact(symbol, _pParameter);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Finish_OnRename$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Finish_OnRename"));
    public static VarHandle Finish_OnRename$VH() {
        return AsyncIAdviseSink2Vtbl.Finish_OnRename$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*Finish_OnRename)(AsyncIAdviseSink2*);
     * }
     */
    public static MemorySegment Finish_OnRename$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AsyncIAdviseSink2Vtbl.Finish_OnRename$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*Finish_OnRename)(AsyncIAdviseSink2*);
     * }
     */
    public static void Finish_OnRename$set(MemorySegment seg, MemorySegment x) {
        AsyncIAdviseSink2Vtbl.Finish_OnRename$VH.set(seg, x);
    }
    public static MemorySegment Finish_OnRename$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AsyncIAdviseSink2Vtbl.Finish_OnRename$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Finish_OnRename$set(MemorySegment seg, long index, MemorySegment x) {
        AsyncIAdviseSink2Vtbl.Finish_OnRename$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Finish_OnRename Finish_OnRename(MemorySegment segment, SegmentScope scope) {
        return Finish_OnRename.ofAddress(Finish_OnRename$get(segment), scope);
    }
    static final FunctionDescriptor Begin_OnSave$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Begin_OnSave_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Begin_OnSave_UP$MH = RuntimeHelper.upcallHandle(Begin_OnSave.class, "apply", AsyncIAdviseSink2Vtbl.Begin_OnSave_UP$FUNC);
    static final FunctionDescriptor Begin_OnSave_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Begin_OnSave_DOWN$MH = RuntimeHelper.downcallHandle(
        AsyncIAdviseSink2Vtbl.Begin_OnSave_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*Begin_OnSave)(AsyncIAdviseSink2*);
     * }
     */
    public interface Begin_OnSave {

        void apply(java.lang.foreign.MemorySegment pParameter);
        static MemorySegment allocate(Begin_OnSave fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(AsyncIAdviseSink2Vtbl.Begin_OnSave_UP$MH, fi, AsyncIAdviseSink2Vtbl.Begin_OnSave$FUNC, scope);
        }
        static Begin_OnSave ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _pParameter) -> {
                try {
                    AsyncIAdviseSink2Vtbl.Begin_OnSave_DOWN$MH.invokeExact(symbol, _pParameter);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Begin_OnSave$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Begin_OnSave"));
    public static VarHandle Begin_OnSave$VH() {
        return AsyncIAdviseSink2Vtbl.Begin_OnSave$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*Begin_OnSave)(AsyncIAdviseSink2*);
     * }
     */
    public static MemorySegment Begin_OnSave$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AsyncIAdviseSink2Vtbl.Begin_OnSave$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*Begin_OnSave)(AsyncIAdviseSink2*);
     * }
     */
    public static void Begin_OnSave$set(MemorySegment seg, MemorySegment x) {
        AsyncIAdviseSink2Vtbl.Begin_OnSave$VH.set(seg, x);
    }
    public static MemorySegment Begin_OnSave$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AsyncIAdviseSink2Vtbl.Begin_OnSave$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Begin_OnSave$set(MemorySegment seg, long index, MemorySegment x) {
        AsyncIAdviseSink2Vtbl.Begin_OnSave$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Begin_OnSave Begin_OnSave(MemorySegment segment, SegmentScope scope) {
        return Begin_OnSave.ofAddress(Begin_OnSave$get(segment), scope);
    }
    static final FunctionDescriptor Finish_OnSave$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Finish_OnSave_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Finish_OnSave_UP$MH = RuntimeHelper.upcallHandle(Finish_OnSave.class, "apply", AsyncIAdviseSink2Vtbl.Finish_OnSave_UP$FUNC);
    static final FunctionDescriptor Finish_OnSave_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Finish_OnSave_DOWN$MH = RuntimeHelper.downcallHandle(
        AsyncIAdviseSink2Vtbl.Finish_OnSave_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*Finish_OnSave)(AsyncIAdviseSink2*);
     * }
     */
    public interface Finish_OnSave {

        void apply(java.lang.foreign.MemorySegment pParameter);
        static MemorySegment allocate(Finish_OnSave fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(AsyncIAdviseSink2Vtbl.Finish_OnSave_UP$MH, fi, AsyncIAdviseSink2Vtbl.Finish_OnSave$FUNC, scope);
        }
        static Finish_OnSave ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _pParameter) -> {
                try {
                    AsyncIAdviseSink2Vtbl.Finish_OnSave_DOWN$MH.invokeExact(symbol, _pParameter);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Finish_OnSave$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Finish_OnSave"));
    public static VarHandle Finish_OnSave$VH() {
        return AsyncIAdviseSink2Vtbl.Finish_OnSave$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*Finish_OnSave)(AsyncIAdviseSink2*);
     * }
     */
    public static MemorySegment Finish_OnSave$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AsyncIAdviseSink2Vtbl.Finish_OnSave$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*Finish_OnSave)(AsyncIAdviseSink2*);
     * }
     */
    public static void Finish_OnSave$set(MemorySegment seg, MemorySegment x) {
        AsyncIAdviseSink2Vtbl.Finish_OnSave$VH.set(seg, x);
    }
    public static MemorySegment Finish_OnSave$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AsyncIAdviseSink2Vtbl.Finish_OnSave$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Finish_OnSave$set(MemorySegment seg, long index, MemorySegment x) {
        AsyncIAdviseSink2Vtbl.Finish_OnSave$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Finish_OnSave Finish_OnSave(MemorySegment segment, SegmentScope scope) {
        return Finish_OnSave.ofAddress(Finish_OnSave$get(segment), scope);
    }
    static final FunctionDescriptor Begin_OnClose$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Begin_OnClose_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Begin_OnClose_UP$MH = RuntimeHelper.upcallHandle(Begin_OnClose.class, "apply", AsyncIAdviseSink2Vtbl.Begin_OnClose_UP$FUNC);
    static final FunctionDescriptor Begin_OnClose_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Begin_OnClose_DOWN$MH = RuntimeHelper.downcallHandle(
        AsyncIAdviseSink2Vtbl.Begin_OnClose_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*Begin_OnClose)(AsyncIAdviseSink2*);
     * }
     */
    public interface Begin_OnClose {

        void apply(java.lang.foreign.MemorySegment pParameter);
        static MemorySegment allocate(Begin_OnClose fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(AsyncIAdviseSink2Vtbl.Begin_OnClose_UP$MH, fi, AsyncIAdviseSink2Vtbl.Begin_OnClose$FUNC, scope);
        }
        static Begin_OnClose ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _pParameter) -> {
                try {
                    AsyncIAdviseSink2Vtbl.Begin_OnClose_DOWN$MH.invokeExact(symbol, _pParameter);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Begin_OnClose$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Begin_OnClose"));
    public static VarHandle Begin_OnClose$VH() {
        return AsyncIAdviseSink2Vtbl.Begin_OnClose$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*Begin_OnClose)(AsyncIAdviseSink2*);
     * }
     */
    public static MemorySegment Begin_OnClose$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AsyncIAdviseSink2Vtbl.Begin_OnClose$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*Begin_OnClose)(AsyncIAdviseSink2*);
     * }
     */
    public static void Begin_OnClose$set(MemorySegment seg, MemorySegment x) {
        AsyncIAdviseSink2Vtbl.Begin_OnClose$VH.set(seg, x);
    }
    public static MemorySegment Begin_OnClose$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AsyncIAdviseSink2Vtbl.Begin_OnClose$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Begin_OnClose$set(MemorySegment seg, long index, MemorySegment x) {
        AsyncIAdviseSink2Vtbl.Begin_OnClose$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Begin_OnClose Begin_OnClose(MemorySegment segment, SegmentScope scope) {
        return Begin_OnClose.ofAddress(Begin_OnClose$get(segment), scope);
    }
    static final FunctionDescriptor Finish_OnClose$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Finish_OnClose_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Finish_OnClose_UP$MH = RuntimeHelper.upcallHandle(Finish_OnClose.class, "apply", AsyncIAdviseSink2Vtbl.Finish_OnClose_UP$FUNC);
    static final FunctionDescriptor Finish_OnClose_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Finish_OnClose_DOWN$MH = RuntimeHelper.downcallHandle(
        AsyncIAdviseSink2Vtbl.Finish_OnClose_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*Finish_OnClose)(AsyncIAdviseSink2*);
     * }
     */
    public interface Finish_OnClose {

        void apply(java.lang.foreign.MemorySegment pParameter);
        static MemorySegment allocate(Finish_OnClose fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(AsyncIAdviseSink2Vtbl.Finish_OnClose_UP$MH, fi, AsyncIAdviseSink2Vtbl.Finish_OnClose$FUNC, scope);
        }
        static Finish_OnClose ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _pParameter) -> {
                try {
                    AsyncIAdviseSink2Vtbl.Finish_OnClose_DOWN$MH.invokeExact(symbol, _pParameter);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Finish_OnClose$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Finish_OnClose"));
    public static VarHandle Finish_OnClose$VH() {
        return AsyncIAdviseSink2Vtbl.Finish_OnClose$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*Finish_OnClose)(AsyncIAdviseSink2*);
     * }
     */
    public static MemorySegment Finish_OnClose$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AsyncIAdviseSink2Vtbl.Finish_OnClose$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*Finish_OnClose)(AsyncIAdviseSink2*);
     * }
     */
    public static void Finish_OnClose$set(MemorySegment seg, MemorySegment x) {
        AsyncIAdviseSink2Vtbl.Finish_OnClose$VH.set(seg, x);
    }
    public static MemorySegment Finish_OnClose$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AsyncIAdviseSink2Vtbl.Finish_OnClose$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Finish_OnClose$set(MemorySegment seg, long index, MemorySegment x) {
        AsyncIAdviseSink2Vtbl.Finish_OnClose$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Finish_OnClose Finish_OnClose(MemorySegment segment, SegmentScope scope) {
        return Finish_OnClose.ofAddress(Finish_OnClose$get(segment), scope);
    }
    static final FunctionDescriptor Begin_OnLinkSrcChange$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Begin_OnLinkSrcChange_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Begin_OnLinkSrcChange_UP$MH = RuntimeHelper.upcallHandle(Begin_OnLinkSrcChange.class, "apply", AsyncIAdviseSink2Vtbl.Begin_OnLinkSrcChange_UP$FUNC);
    static final FunctionDescriptor Begin_OnLinkSrcChange_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Begin_OnLinkSrcChange_DOWN$MH = RuntimeHelper.downcallHandle(
        AsyncIAdviseSink2Vtbl.Begin_OnLinkSrcChange_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*Begin_OnLinkSrcChange)(AsyncIAdviseSink2*,IMoniker*);
     * }
     */
    public interface Begin_OnLinkSrcChange {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(Begin_OnLinkSrcChange fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(AsyncIAdviseSink2Vtbl.Begin_OnLinkSrcChange_UP$MH, fi, AsyncIAdviseSink2Vtbl.Begin_OnLinkSrcChange$FUNC, scope);
        }
        static Begin_OnLinkSrcChange ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    AsyncIAdviseSink2Vtbl.Begin_OnLinkSrcChange_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Begin_OnLinkSrcChange$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Begin_OnLinkSrcChange"));
    public static VarHandle Begin_OnLinkSrcChange$VH() {
        return AsyncIAdviseSink2Vtbl.Begin_OnLinkSrcChange$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*Begin_OnLinkSrcChange)(AsyncIAdviseSink2*,IMoniker*);
     * }
     */
    public static MemorySegment Begin_OnLinkSrcChange$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AsyncIAdviseSink2Vtbl.Begin_OnLinkSrcChange$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*Begin_OnLinkSrcChange)(AsyncIAdviseSink2*,IMoniker*);
     * }
     */
    public static void Begin_OnLinkSrcChange$set(MemorySegment seg, MemorySegment x) {
        AsyncIAdviseSink2Vtbl.Begin_OnLinkSrcChange$VH.set(seg, x);
    }
    public static MemorySegment Begin_OnLinkSrcChange$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AsyncIAdviseSink2Vtbl.Begin_OnLinkSrcChange$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Begin_OnLinkSrcChange$set(MemorySegment seg, long index, MemorySegment x) {
        AsyncIAdviseSink2Vtbl.Begin_OnLinkSrcChange$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Begin_OnLinkSrcChange Begin_OnLinkSrcChange(MemorySegment segment, SegmentScope scope) {
        return Begin_OnLinkSrcChange.ofAddress(Begin_OnLinkSrcChange$get(segment), scope);
    }
    static final FunctionDescriptor Finish_OnLinkSrcChange$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Finish_OnLinkSrcChange_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Finish_OnLinkSrcChange_UP$MH = RuntimeHelper.upcallHandle(Finish_OnLinkSrcChange.class, "apply", AsyncIAdviseSink2Vtbl.Finish_OnLinkSrcChange_UP$FUNC);
    static final FunctionDescriptor Finish_OnLinkSrcChange_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Finish_OnLinkSrcChange_DOWN$MH = RuntimeHelper.downcallHandle(
        AsyncIAdviseSink2Vtbl.Finish_OnLinkSrcChange_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*Finish_OnLinkSrcChange)(AsyncIAdviseSink2*);
     * }
     */
    public interface Finish_OnLinkSrcChange {

        void apply(java.lang.foreign.MemorySegment pParameter);
        static MemorySegment allocate(Finish_OnLinkSrcChange fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(AsyncIAdviseSink2Vtbl.Finish_OnLinkSrcChange_UP$MH, fi, AsyncIAdviseSink2Vtbl.Finish_OnLinkSrcChange$FUNC, scope);
        }
        static Finish_OnLinkSrcChange ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _pParameter) -> {
                try {
                    AsyncIAdviseSink2Vtbl.Finish_OnLinkSrcChange_DOWN$MH.invokeExact(symbol, _pParameter);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Finish_OnLinkSrcChange$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Finish_OnLinkSrcChange"));
    public static VarHandle Finish_OnLinkSrcChange$VH() {
        return AsyncIAdviseSink2Vtbl.Finish_OnLinkSrcChange$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*Finish_OnLinkSrcChange)(AsyncIAdviseSink2*);
     * }
     */
    public static MemorySegment Finish_OnLinkSrcChange$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)AsyncIAdviseSink2Vtbl.Finish_OnLinkSrcChange$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*Finish_OnLinkSrcChange)(AsyncIAdviseSink2*);
     * }
     */
    public static void Finish_OnLinkSrcChange$set(MemorySegment seg, MemorySegment x) {
        AsyncIAdviseSink2Vtbl.Finish_OnLinkSrcChange$VH.set(seg, x);
    }
    public static MemorySegment Finish_OnLinkSrcChange$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)AsyncIAdviseSink2Vtbl.Finish_OnLinkSrcChange$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Finish_OnLinkSrcChange$set(MemorySegment seg, long index, MemorySegment x) {
        AsyncIAdviseSink2Vtbl.Finish_OnLinkSrcChange$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Finish_OnLinkSrcChange Finish_OnLinkSrcChange(MemorySegment segment, SegmentScope scope) {
        return Finish_OnLinkSrcChange.ofAddress(Finish_OnLinkSrcChange$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


