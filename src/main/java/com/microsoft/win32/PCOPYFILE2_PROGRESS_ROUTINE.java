// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * enum _COPYFILE2_MESSAGE_ACTION (*PCOPYFILE2_PROGRESS_ROUTINE)(struct COPYFILE2_MESSAGE* pMessage,void* pvCallbackContext);
 * }
 */
public interface PCOPYFILE2_PROGRESS_ROUTINE {

    int apply(java.lang.foreign.MemorySegment pMessage, java.lang.foreign.MemorySegment pvCallbackContext);
    static MemorySegment allocate(PCOPYFILE2_PROGRESS_ROUTINE fi, SegmentScope scope) {
        return RuntimeHelper.upcallStub(constants$287.PCOPYFILE2_PROGRESS_ROUTINE_UP$MH, fi, constants$287.PCOPYFILE2_PROGRESS_ROUTINE$FUNC, scope);
    }
    static PCOPYFILE2_PROGRESS_ROUTINE ofAddress(MemorySegment addr, SegmentScope scope) {
        MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
        return (java.lang.foreign.MemorySegment _pMessage, java.lang.foreign.MemorySegment _pvCallbackContext) -> {
            try {
                return (int)constants$287.PCOPYFILE2_PROGRESS_ROUTINE_DOWN$MH.invokeExact(symbol, _pMessage, _pvCallbackContext);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


