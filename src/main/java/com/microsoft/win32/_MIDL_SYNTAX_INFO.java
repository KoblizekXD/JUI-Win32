// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _MIDL_SYNTAX_INFO {
 *     RPC_SYNTAX_IDENTIFIER TransferSyntax;
 *     RPC_DISPATCH_TABLE* DispatchTable;
 *     PFORMAT_STRING ProcString;
 *     unsigned short* FmtStringOffset;
 *     PFORMAT_STRING TypeString;
 *     void* aUserMarshalQuadruple;
 *     const MIDL_INTERFACE_METHOD_PROPERTIES* pMethodProperties;
 *     ULONG_PTR pReserved2;
 * };
 * }
 */
public class _MIDL_SYNTAX_INFO {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("Data1"),
                Constants$root.C_SHORT$LAYOUT.withName("Data2"),
                Constants$root.C_SHORT$LAYOUT.withName("Data3"),
                MemoryLayout.sequenceLayout(8, Constants$root.C_CHAR$LAYOUT).withName("Data4")
            ).withName("SyntaxGUID"),
            MemoryLayout.structLayout(
                Constants$root.C_SHORT$LAYOUT.withName("MajorVersion"),
                Constants$root.C_SHORT$LAYOUT.withName("MinorVersion")
            ).withName("SyntaxVersion")
        ).withName("TransferSyntax"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("DispatchTable"),
        Constants$root.C_POINTER$LAYOUT.withName("ProcString"),
        Constants$root.C_POINTER$LAYOUT.withName("FmtStringOffset"),
        Constants$root.C_POINTER$LAYOUT.withName("TypeString"),
        Constants$root.C_POINTER$LAYOUT.withName("aUserMarshalQuadruple"),
        Constants$root.C_POINTER$LAYOUT.withName("pMethodProperties"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("pReserved2")
    ).withName("_MIDL_SYNTAX_INFO");
    public static MemoryLayout $LAYOUT() {
        return _MIDL_SYNTAX_INFO.$struct$LAYOUT;
    }
    public static MemorySegment TransferSyntax$slice(MemorySegment seg) {
        return seg.asSlice(0, 20);
    }
    static final VarHandle DispatchTable$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("DispatchTable"));
    public static VarHandle DispatchTable$VH() {
        return _MIDL_SYNTAX_INFO.DispatchTable$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * RPC_DISPATCH_TABLE* DispatchTable;
     * }
     */
    public static MemorySegment DispatchTable$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_MIDL_SYNTAX_INFO.DispatchTable$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * RPC_DISPATCH_TABLE* DispatchTable;
     * }
     */
    public static void DispatchTable$set(MemorySegment seg, MemorySegment x) {
        _MIDL_SYNTAX_INFO.DispatchTable$VH.set(seg, x);
    }
    public static MemorySegment DispatchTable$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_MIDL_SYNTAX_INFO.DispatchTable$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DispatchTable$set(MemorySegment seg, long index, MemorySegment x) {
        _MIDL_SYNTAX_INFO.DispatchTable$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ProcString$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ProcString"));
    public static VarHandle ProcString$VH() {
        return _MIDL_SYNTAX_INFO.ProcString$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PFORMAT_STRING ProcString;
     * }
     */
    public static MemorySegment ProcString$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_MIDL_SYNTAX_INFO.ProcString$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PFORMAT_STRING ProcString;
     * }
     */
    public static void ProcString$set(MemorySegment seg, MemorySegment x) {
        _MIDL_SYNTAX_INFO.ProcString$VH.set(seg, x);
    }
    public static MemorySegment ProcString$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_MIDL_SYNTAX_INFO.ProcString$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ProcString$set(MemorySegment seg, long index, MemorySegment x) {
        _MIDL_SYNTAX_INFO.ProcString$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle FmtStringOffset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("FmtStringOffset"));
    public static VarHandle FmtStringOffset$VH() {
        return _MIDL_SYNTAX_INFO.FmtStringOffset$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short* FmtStringOffset;
     * }
     */
    public static MemorySegment FmtStringOffset$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_MIDL_SYNTAX_INFO.FmtStringOffset$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short* FmtStringOffset;
     * }
     */
    public static void FmtStringOffset$set(MemorySegment seg, MemorySegment x) {
        _MIDL_SYNTAX_INFO.FmtStringOffset$VH.set(seg, x);
    }
    public static MemorySegment FmtStringOffset$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_MIDL_SYNTAX_INFO.FmtStringOffset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void FmtStringOffset$set(MemorySegment seg, long index, MemorySegment x) {
        _MIDL_SYNTAX_INFO.FmtStringOffset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle TypeString$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("TypeString"));
    public static VarHandle TypeString$VH() {
        return _MIDL_SYNTAX_INFO.TypeString$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PFORMAT_STRING TypeString;
     * }
     */
    public static MemorySegment TypeString$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_MIDL_SYNTAX_INFO.TypeString$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PFORMAT_STRING TypeString;
     * }
     */
    public static void TypeString$set(MemorySegment seg, MemorySegment x) {
        _MIDL_SYNTAX_INFO.TypeString$VH.set(seg, x);
    }
    public static MemorySegment TypeString$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_MIDL_SYNTAX_INFO.TypeString$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void TypeString$set(MemorySegment seg, long index, MemorySegment x) {
        _MIDL_SYNTAX_INFO.TypeString$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle aUserMarshalQuadruple$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("aUserMarshalQuadruple"));
    public static VarHandle aUserMarshalQuadruple$VH() {
        return _MIDL_SYNTAX_INFO.aUserMarshalQuadruple$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* aUserMarshalQuadruple;
     * }
     */
    public static MemorySegment aUserMarshalQuadruple$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_MIDL_SYNTAX_INFO.aUserMarshalQuadruple$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* aUserMarshalQuadruple;
     * }
     */
    public static void aUserMarshalQuadruple$set(MemorySegment seg, MemorySegment x) {
        _MIDL_SYNTAX_INFO.aUserMarshalQuadruple$VH.set(seg, x);
    }
    public static MemorySegment aUserMarshalQuadruple$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_MIDL_SYNTAX_INFO.aUserMarshalQuadruple$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void aUserMarshalQuadruple$set(MemorySegment seg, long index, MemorySegment x) {
        _MIDL_SYNTAX_INFO.aUserMarshalQuadruple$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pMethodProperties$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pMethodProperties"));
    public static VarHandle pMethodProperties$VH() {
        return _MIDL_SYNTAX_INFO.pMethodProperties$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * const MIDL_INTERFACE_METHOD_PROPERTIES* pMethodProperties;
     * }
     */
    public static MemorySegment pMethodProperties$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_MIDL_SYNTAX_INFO.pMethodProperties$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * const MIDL_INTERFACE_METHOD_PROPERTIES* pMethodProperties;
     * }
     */
    public static void pMethodProperties$set(MemorySegment seg, MemorySegment x) {
        _MIDL_SYNTAX_INFO.pMethodProperties$VH.set(seg, x);
    }
    public static MemorySegment pMethodProperties$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_MIDL_SYNTAX_INFO.pMethodProperties$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pMethodProperties$set(MemorySegment seg, long index, MemorySegment x) {
        _MIDL_SYNTAX_INFO.pMethodProperties$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pReserved2$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pReserved2"));
    public static VarHandle pReserved2$VH() {
        return _MIDL_SYNTAX_INFO.pReserved2$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG_PTR pReserved2;
     * }
     */
    public static long pReserved2$get(MemorySegment seg) {
        return (long)_MIDL_SYNTAX_INFO.pReserved2$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG_PTR pReserved2;
     * }
     */
    public static void pReserved2$set(MemorySegment seg, long x) {
        _MIDL_SYNTAX_INFO.pReserved2$VH.set(seg, x);
    }
    public static long pReserved2$get(MemorySegment seg, long index) {
        return (long)_MIDL_SYNTAX_INFO.pReserved2$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pReserved2$set(MemorySegment seg, long index, long x) {
        _MIDL_SYNTAX_INFO.pReserved2$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


