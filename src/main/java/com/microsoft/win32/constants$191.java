// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
final class constants$191 {

    // Suppresses default constructor, ensuring non-instantiability.
    private constants$191() {}
    static final FunctionDescriptor GetMemoryErrorHandlingCapabilities$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetMemoryErrorHandlingCapabilities$MH = RuntimeHelper.downcallHandle(
        "GetMemoryErrorHandlingCapabilities",
        constants$191.GetMemoryErrorHandlingCapabilities$FUNC
    );
    static final FunctionDescriptor BAD_MEMORY_CALLBACK_ROUTINE$FUNC = FunctionDescriptor.ofVoid();
    static final FunctionDescriptor BAD_MEMORY_CALLBACK_ROUTINE_UP$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle BAD_MEMORY_CALLBACK_ROUTINE_UP$MH = RuntimeHelper.upcallHandle(BAD_MEMORY_CALLBACK_ROUTINE.class, "apply", constants$191.BAD_MEMORY_CALLBACK_ROUTINE_UP$FUNC);
    static final FunctionDescriptor BAD_MEMORY_CALLBACK_ROUTINE_DOWN$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle BAD_MEMORY_CALLBACK_ROUTINE_DOWN$MH = RuntimeHelper.downcallHandle(
        constants$191.BAD_MEMORY_CALLBACK_ROUTINE_DOWN$FUNC
    );
    static final FunctionDescriptor PBAD_MEMORY_CALLBACK_ROUTINE$FUNC = FunctionDescriptor.ofVoid();
    static final FunctionDescriptor PBAD_MEMORY_CALLBACK_ROUTINE_UP$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle PBAD_MEMORY_CALLBACK_ROUTINE_UP$MH = RuntimeHelper.upcallHandle(PBAD_MEMORY_CALLBACK_ROUTINE.class, "apply", constants$191.PBAD_MEMORY_CALLBACK_ROUTINE_UP$FUNC);
    static final FunctionDescriptor PBAD_MEMORY_CALLBACK_ROUTINE_DOWN$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle PBAD_MEMORY_CALLBACK_ROUTINE_DOWN$MH = RuntimeHelper.downcallHandle(
        constants$191.PBAD_MEMORY_CALLBACK_ROUTINE_DOWN$FUNC
    );
    static final FunctionDescriptor RegisterBadMemoryNotification$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle RegisterBadMemoryNotification$MH = RuntimeHelper.downcallHandle(
        "RegisterBadMemoryNotification",
        constants$191.RegisterBadMemoryNotification$FUNC
    );
}


