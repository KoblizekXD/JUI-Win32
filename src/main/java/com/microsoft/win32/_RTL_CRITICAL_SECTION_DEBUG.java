// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _RTL_CRITICAL_SECTION_DEBUG {
 *     WORD Type;
 *     WORD CreatorBackTraceIndex;
 *     struct _RTL_CRITICAL_SECTION* CriticalSection;
 *     LIST_ENTRY ProcessLocksList;
 *     DWORD EntryCount;
 *     DWORD ContentionCount;
 *     DWORD Flags;
 *     WORD CreatorBackTraceIndexHigh;
 *     WORD Identifier;
 * };
 * }
 */
public class _RTL_CRITICAL_SECTION_DEBUG {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_SHORT$LAYOUT.withName("Type"),
        Constants$root.C_SHORT$LAYOUT.withName("CreatorBackTraceIndex"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("CriticalSection"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("Flink"),
            Constants$root.C_POINTER$LAYOUT.withName("Blink")
        ).withName("ProcessLocksList"),
        Constants$root.C_LONG$LAYOUT.withName("EntryCount"),
        Constants$root.C_LONG$LAYOUT.withName("ContentionCount"),
        Constants$root.C_LONG$LAYOUT.withName("Flags"),
        Constants$root.C_SHORT$LAYOUT.withName("CreatorBackTraceIndexHigh"),
        Constants$root.C_SHORT$LAYOUT.withName("Identifier")
    ).withName("_RTL_CRITICAL_SECTION_DEBUG");
    public static MemoryLayout $LAYOUT() {
        return _RTL_CRITICAL_SECTION_DEBUG.$struct$LAYOUT;
    }
    static final VarHandle Type$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Type"));
    public static VarHandle Type$VH() {
        return _RTL_CRITICAL_SECTION_DEBUG.Type$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD Type;
     * }
     */
    public static short Type$get(MemorySegment seg) {
        return (short)_RTL_CRITICAL_SECTION_DEBUG.Type$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD Type;
     * }
     */
    public static void Type$set(MemorySegment seg, short x) {
        _RTL_CRITICAL_SECTION_DEBUG.Type$VH.set(seg, x);
    }
    public static short Type$get(MemorySegment seg, long index) {
        return (short)_RTL_CRITICAL_SECTION_DEBUG.Type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Type$set(MemorySegment seg, long index, short x) {
        _RTL_CRITICAL_SECTION_DEBUG.Type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle CreatorBackTraceIndex$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("CreatorBackTraceIndex"));
    public static VarHandle CreatorBackTraceIndex$VH() {
        return _RTL_CRITICAL_SECTION_DEBUG.CreatorBackTraceIndex$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD CreatorBackTraceIndex;
     * }
     */
    public static short CreatorBackTraceIndex$get(MemorySegment seg) {
        return (short)_RTL_CRITICAL_SECTION_DEBUG.CreatorBackTraceIndex$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD CreatorBackTraceIndex;
     * }
     */
    public static void CreatorBackTraceIndex$set(MemorySegment seg, short x) {
        _RTL_CRITICAL_SECTION_DEBUG.CreatorBackTraceIndex$VH.set(seg, x);
    }
    public static short CreatorBackTraceIndex$get(MemorySegment seg, long index) {
        return (short)_RTL_CRITICAL_SECTION_DEBUG.CreatorBackTraceIndex$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CreatorBackTraceIndex$set(MemorySegment seg, long index, short x) {
        _RTL_CRITICAL_SECTION_DEBUG.CreatorBackTraceIndex$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle CriticalSection$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("CriticalSection"));
    public static VarHandle CriticalSection$VH() {
        return _RTL_CRITICAL_SECTION_DEBUG.CriticalSection$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _RTL_CRITICAL_SECTION* CriticalSection;
     * }
     */
    public static MemorySegment CriticalSection$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_RTL_CRITICAL_SECTION_DEBUG.CriticalSection$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _RTL_CRITICAL_SECTION* CriticalSection;
     * }
     */
    public static void CriticalSection$set(MemorySegment seg, MemorySegment x) {
        _RTL_CRITICAL_SECTION_DEBUG.CriticalSection$VH.set(seg, x);
    }
    public static MemorySegment CriticalSection$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_RTL_CRITICAL_SECTION_DEBUG.CriticalSection$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CriticalSection$set(MemorySegment seg, long index, MemorySegment x) {
        _RTL_CRITICAL_SECTION_DEBUG.CriticalSection$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment ProcessLocksList$slice(MemorySegment seg) {
        return seg.asSlice(16, 16);
    }
    static final VarHandle EntryCount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("EntryCount"));
    public static VarHandle EntryCount$VH() {
        return _RTL_CRITICAL_SECTION_DEBUG.EntryCount$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD EntryCount;
     * }
     */
    public static int EntryCount$get(MemorySegment seg) {
        return (int)_RTL_CRITICAL_SECTION_DEBUG.EntryCount$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD EntryCount;
     * }
     */
    public static void EntryCount$set(MemorySegment seg, int x) {
        _RTL_CRITICAL_SECTION_DEBUG.EntryCount$VH.set(seg, x);
    }
    public static int EntryCount$get(MemorySegment seg, long index) {
        return (int)_RTL_CRITICAL_SECTION_DEBUG.EntryCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void EntryCount$set(MemorySegment seg, long index, int x) {
        _RTL_CRITICAL_SECTION_DEBUG.EntryCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ContentionCount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ContentionCount"));
    public static VarHandle ContentionCount$VH() {
        return _RTL_CRITICAL_SECTION_DEBUG.ContentionCount$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD ContentionCount;
     * }
     */
    public static int ContentionCount$get(MemorySegment seg) {
        return (int)_RTL_CRITICAL_SECTION_DEBUG.ContentionCount$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD ContentionCount;
     * }
     */
    public static void ContentionCount$set(MemorySegment seg, int x) {
        _RTL_CRITICAL_SECTION_DEBUG.ContentionCount$VH.set(seg, x);
    }
    public static int ContentionCount$get(MemorySegment seg, long index) {
        return (int)_RTL_CRITICAL_SECTION_DEBUG.ContentionCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ContentionCount$set(MemorySegment seg, long index, int x) {
        _RTL_CRITICAL_SECTION_DEBUG.ContentionCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Flags"));
    public static VarHandle Flags$VH() {
        return _RTL_CRITICAL_SECTION_DEBUG.Flags$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Flags;
     * }
     */
    public static int Flags$get(MemorySegment seg) {
        return (int)_RTL_CRITICAL_SECTION_DEBUG.Flags$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Flags;
     * }
     */
    public static void Flags$set(MemorySegment seg, int x) {
        _RTL_CRITICAL_SECTION_DEBUG.Flags$VH.set(seg, x);
    }
    public static int Flags$get(MemorySegment seg, long index) {
        return (int)_RTL_CRITICAL_SECTION_DEBUG.Flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Flags$set(MemorySegment seg, long index, int x) {
        _RTL_CRITICAL_SECTION_DEBUG.Flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle CreatorBackTraceIndexHigh$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("CreatorBackTraceIndexHigh"));
    public static VarHandle CreatorBackTraceIndexHigh$VH() {
        return _RTL_CRITICAL_SECTION_DEBUG.CreatorBackTraceIndexHigh$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD CreatorBackTraceIndexHigh;
     * }
     */
    public static short CreatorBackTraceIndexHigh$get(MemorySegment seg) {
        return (short)_RTL_CRITICAL_SECTION_DEBUG.CreatorBackTraceIndexHigh$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD CreatorBackTraceIndexHigh;
     * }
     */
    public static void CreatorBackTraceIndexHigh$set(MemorySegment seg, short x) {
        _RTL_CRITICAL_SECTION_DEBUG.CreatorBackTraceIndexHigh$VH.set(seg, x);
    }
    public static short CreatorBackTraceIndexHigh$get(MemorySegment seg, long index) {
        return (short)_RTL_CRITICAL_SECTION_DEBUG.CreatorBackTraceIndexHigh$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CreatorBackTraceIndexHigh$set(MemorySegment seg, long index, short x) {
        _RTL_CRITICAL_SECTION_DEBUG.CreatorBackTraceIndexHigh$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Identifier$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Identifier"));
    public static VarHandle Identifier$VH() {
        return _RTL_CRITICAL_SECTION_DEBUG.Identifier$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD Identifier;
     * }
     */
    public static short Identifier$get(MemorySegment seg) {
        return (short)_RTL_CRITICAL_SECTION_DEBUG.Identifier$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD Identifier;
     * }
     */
    public static void Identifier$set(MemorySegment seg, short x) {
        _RTL_CRITICAL_SECTION_DEBUG.Identifier$VH.set(seg, x);
    }
    public static short Identifier$get(MemorySegment seg, long index) {
        return (short)_RTL_CRITICAL_SECTION_DEBUG.Identifier$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Identifier$set(MemorySegment seg, long index, short x) {
        _RTL_CRITICAL_SECTION_DEBUG.Identifier$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


