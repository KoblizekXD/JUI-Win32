// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
final class constants$48 {

    // Suppresses default constructor, ensuring non-instantiability.
    private constants$48() {}
    static final FunctionDescriptor _InterlockedXor16$FUNC = FunctionDescriptor.of(Constants$root.C_SHORT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_SHORT$LAYOUT
    );
    static final MethodHandle _InterlockedXor16$MH = RuntimeHelper.downcallHandle(
        "_InterlockedXor16",
        constants$48._InterlockedXor16$FUNC
    );
    static final FunctionDescriptor __cpuidex$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle __cpuidex$MH = RuntimeHelper.downcallHandle(
        "__cpuidex",
        constants$48.__cpuidex$FUNC
    );
    static final FunctionDescriptor _mm_clflush$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle _mm_clflush$MH = RuntimeHelper.downcallHandle(
        "_mm_clflush",
        constants$48._mm_clflush$FUNC
    );
    static final FunctionDescriptor _ReadWriteBarrier$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _ReadWriteBarrier$MH = RuntimeHelper.downcallHandle(
        "_ReadWriteBarrier",
        constants$48._ReadWriteBarrier$FUNC
    );
    static final FunctionDescriptor __faststorefence$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle __faststorefence$MH = RuntimeHelper.downcallHandle(
        "__faststorefence",
        constants$48.__faststorefence$FUNC
    );
    static final FunctionDescriptor _mm_lfence$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _mm_lfence$MH = RuntimeHelper.downcallHandle(
        "_mm_lfence",
        constants$48._mm_lfence$FUNC
    );
}


