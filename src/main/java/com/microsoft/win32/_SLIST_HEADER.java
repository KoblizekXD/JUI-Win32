// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * union _SLIST_HEADER {
 *     struct {
 *         ULONGLONG Alignment;
 *         ULONGLONG Region;
 *     };
 *     struct  HeaderX64;
 * };
 * }
 */
public class _SLIST_HEADER {

    static final UnionLayout $union$LAYOUT = MemoryLayout.unionLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("Alignment"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("Region")
        ).withName("$anon$0"),
        MemoryLayout.structLayout(
            MemoryLayout.paddingLayout(128)
        ).withName("HeaderX64")
    ).withName("_SLIST_HEADER");
    public static MemoryLayout $LAYOUT() {
        return _SLIST_HEADER.$union$LAYOUT;
    }
    static final VarHandle Alignment$VH = $union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("Alignment"));
    public static VarHandle Alignment$VH() {
        return _SLIST_HEADER.Alignment$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONGLONG Alignment;
     * }
     */
    public static long Alignment$get(MemorySegment seg) {
        return (long)_SLIST_HEADER.Alignment$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONGLONG Alignment;
     * }
     */
    public static void Alignment$set(MemorySegment seg, long x) {
        _SLIST_HEADER.Alignment$VH.set(seg, x);
    }
    public static long Alignment$get(MemorySegment seg, long index) {
        return (long)_SLIST_HEADER.Alignment$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Alignment$set(MemorySegment seg, long index, long x) {
        _SLIST_HEADER.Alignment$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Region$VH = $union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("Region"));
    public static VarHandle Region$VH() {
        return _SLIST_HEADER.Region$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONGLONG Region;
     * }
     */
    public static long Region$get(MemorySegment seg) {
        return (long)_SLIST_HEADER.Region$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONGLONG Region;
     * }
     */
    public static void Region$set(MemorySegment seg, long x) {
        _SLIST_HEADER.Region$VH.set(seg, x);
    }
    public static long Region$get(MemorySegment seg, long index) {
        return (long)_SLIST_HEADER.Region$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Region$set(MemorySegment seg, long index, long x) {
        _SLIST_HEADER.Region$VH.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
     * struct {
     *          *     ULONGLONG Depth;
     *     ULONGLONG Sequence;
     *     ULONGLONG Reserved;
     *     ULONGLONG NextEntry;
     * };
     * }
     */
    public static final class HeaderX64 {

        // Suppresses default constructor, ensuring non-instantiability.
        private HeaderX64() {}
        static final StructLayout HeaderX64$struct$LAYOUT = MemoryLayout.structLayout(
            MemoryLayout.paddingLayout(128)
        );
        public static MemoryLayout $LAYOUT() {
            return HeaderX64.HeaderX64$struct$LAYOUT;
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
    }

    public static MemorySegment HeaderX64$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


