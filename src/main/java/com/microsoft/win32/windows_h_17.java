// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class windows_h_17 extends windows_h_16 {

    public static MethodHandle IsCharAlphaNumericA$MH() {
        return RuntimeHelper.requireNonNull(constants$436.IsCharAlphaNumericA$MH,"IsCharAlphaNumericA");
    }
    /**
     * {@snippet :
     * BOOL IsCharAlphaNumericA(CHAR ch);
     * }
     */
    public static int IsCharAlphaNumericA(byte ch) {
        var mh$ = IsCharAlphaNumericA$MH();
        try {
            return (int)mh$.invokeExact(ch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsCharAlphaNumericW$MH() {
        return RuntimeHelper.requireNonNull(constants$436.IsCharAlphaNumericW$MH,"IsCharAlphaNumericW");
    }
    /**
     * {@snippet :
     * BOOL IsCharAlphaNumericW(WCHAR ch);
     * }
     */
    public static int IsCharAlphaNumericW(short ch) {
        var mh$ = IsCharAlphaNumericW$MH();
        try {
            return (int)mh$.invokeExact(ch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsCharUpperA$MH() {
        return RuntimeHelper.requireNonNull(constants$436.IsCharUpperA$MH,"IsCharUpperA");
    }
    /**
     * {@snippet :
     * BOOL IsCharUpperA(CHAR ch);
     * }
     */
    public static int IsCharUpperA(byte ch) {
        var mh$ = IsCharUpperA$MH();
        try {
            return (int)mh$.invokeExact(ch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsCharUpperW$MH() {
        return RuntimeHelper.requireNonNull(constants$436.IsCharUpperW$MH,"IsCharUpperW");
    }
    /**
     * {@snippet :
     * BOOL IsCharUpperW(WCHAR ch);
     * }
     */
    public static int IsCharUpperW(short ch) {
        var mh$ = IsCharUpperW$MH();
        try {
            return (int)mh$.invokeExact(ch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsCharLowerA$MH() {
        return RuntimeHelper.requireNonNull(constants$437.IsCharLowerA$MH,"IsCharLowerA");
    }
    /**
     * {@snippet :
     * BOOL IsCharLowerA(CHAR ch);
     * }
     */
    public static int IsCharLowerA(byte ch) {
        var mh$ = IsCharLowerA$MH();
        try {
            return (int)mh$.invokeExact(ch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsCharLowerW$MH() {
        return RuntimeHelper.requireNonNull(constants$437.IsCharLowerW$MH,"IsCharLowerW");
    }
    /**
     * {@snippet :
     * BOOL IsCharLowerW(WCHAR ch);
     * }
     */
    public static int IsCharLowerW(short ch) {
        var mh$ = IsCharLowerW$MH();
        try {
            return (int)mh$.invokeExact(ch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetFocus$MH() {
        return RuntimeHelper.requireNonNull(constants$437.SetFocus$MH,"SetFocus");
    }
    /**
     * {@snippet :
     * HWND SetFocus(HWND hWnd);
     * }
     */
    public static MemorySegment SetFocus(MemorySegment hWnd) {
        var mh$ = SetFocus$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetActiveWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$437.GetActiveWindow$MH,"GetActiveWindow");
    }
    /**
     * {@snippet :
     * HWND GetActiveWindow();
     * }
     */
    public static MemorySegment GetActiveWindow() {
        var mh$ = GetActiveWindow$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFocus$MH() {
        return RuntimeHelper.requireNonNull(constants$437.GetFocus$MH,"GetFocus");
    }
    /**
     * {@snippet :
     * HWND GetFocus();
     * }
     */
    public static MemorySegment GetFocus() {
        var mh$ = GetFocus$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetKBCodePage$MH() {
        return RuntimeHelper.requireNonNull(constants$437.GetKBCodePage$MH,"GetKBCodePage");
    }
    /**
     * {@snippet :
     * UINT GetKBCodePage();
     * }
     */
    public static int GetKBCodePage() {
        var mh$ = GetKBCodePage$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetKeyState$MH() {
        return RuntimeHelper.requireNonNull(constants$438.GetKeyState$MH,"GetKeyState");
    }
    /**
     * {@snippet :
     * SHORT GetKeyState(int nVirtKey);
     * }
     */
    public static short GetKeyState(int nVirtKey) {
        var mh$ = GetKeyState$MH();
        try {
            return (short)mh$.invokeExact(nVirtKey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetAsyncKeyState$MH() {
        return RuntimeHelper.requireNonNull(constants$438.GetAsyncKeyState$MH,"GetAsyncKeyState");
    }
    /**
     * {@snippet :
     * SHORT GetAsyncKeyState(int vKey);
     * }
     */
    public static short GetAsyncKeyState(int vKey) {
        var mh$ = GetAsyncKeyState$MH();
        try {
            return (short)mh$.invokeExact(vKey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetKeyboardState$MH() {
        return RuntimeHelper.requireNonNull(constants$438.GetKeyboardState$MH,"GetKeyboardState");
    }
    /**
     * {@snippet :
     * BOOL GetKeyboardState(PBYTE lpKeyState);
     * }
     */
    public static int GetKeyboardState(MemorySegment lpKeyState) {
        var mh$ = GetKeyboardState$MH();
        try {
            return (int)mh$.invokeExact(lpKeyState);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetKeyboardState$MH() {
        return RuntimeHelper.requireNonNull(constants$438.SetKeyboardState$MH,"SetKeyboardState");
    }
    /**
     * {@snippet :
     * BOOL SetKeyboardState(LPBYTE lpKeyState);
     * }
     */
    public static int SetKeyboardState(MemorySegment lpKeyState) {
        var mh$ = SetKeyboardState$MH();
        try {
            return (int)mh$.invokeExact(lpKeyState);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetKeyNameTextA$MH() {
        return RuntimeHelper.requireNonNull(constants$438.GetKeyNameTextA$MH,"GetKeyNameTextA");
    }
    /**
     * {@snippet :
     * int GetKeyNameTextA(LONG lParam, LPSTR lpString, int cchSize);
     * }
     */
    public static int GetKeyNameTextA(int lParam, MemorySegment lpString, int cchSize) {
        var mh$ = GetKeyNameTextA$MH();
        try {
            return (int)mh$.invokeExact(lParam, lpString, cchSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetKeyNameTextW$MH() {
        return RuntimeHelper.requireNonNull(constants$438.GetKeyNameTextW$MH,"GetKeyNameTextW");
    }
    /**
     * {@snippet :
     * int GetKeyNameTextW(LONG lParam, LPWSTR lpString, int cchSize);
     * }
     */
    public static int GetKeyNameTextW(int lParam, MemorySegment lpString, int cchSize) {
        var mh$ = GetKeyNameTextW$MH();
        try {
            return (int)mh$.invokeExact(lParam, lpString, cchSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetKeyboardType$MH() {
        return RuntimeHelper.requireNonNull(constants$439.GetKeyboardType$MH,"GetKeyboardType");
    }
    /**
     * {@snippet :
     * int GetKeyboardType(int nTypeFlag);
     * }
     */
    public static int GetKeyboardType(int nTypeFlag) {
        var mh$ = GetKeyboardType$MH();
        try {
            return (int)mh$.invokeExact(nTypeFlag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ToAscii$MH() {
        return RuntimeHelper.requireNonNull(constants$439.ToAscii$MH,"ToAscii");
    }
    /**
     * {@snippet :
     * int ToAscii(UINT uVirtKey, UINT uScanCode, const BYTE* lpKeyState, LPWORD lpChar, UINT uFlags);
     * }
     */
    public static int ToAscii(int uVirtKey, int uScanCode, MemorySegment lpKeyState, MemorySegment lpChar, int uFlags) {
        var mh$ = ToAscii$MH();
        try {
            return (int)mh$.invokeExact(uVirtKey, uScanCode, lpKeyState, lpChar, uFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ToAsciiEx$MH() {
        return RuntimeHelper.requireNonNull(constants$439.ToAsciiEx$MH,"ToAsciiEx");
    }
    /**
     * {@snippet :
     * int ToAsciiEx(UINT uVirtKey, UINT uScanCode, const BYTE* lpKeyState, LPWORD lpChar, UINT uFlags, HKL dwhkl);
     * }
     */
    public static int ToAsciiEx(int uVirtKey, int uScanCode, MemorySegment lpKeyState, MemorySegment lpChar, int uFlags, MemorySegment dwhkl) {
        var mh$ = ToAsciiEx$MH();
        try {
            return (int)mh$.invokeExact(uVirtKey, uScanCode, lpKeyState, lpChar, uFlags, dwhkl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ToUnicode$MH() {
        return RuntimeHelper.requireNonNull(constants$439.ToUnicode$MH,"ToUnicode");
    }
    /**
     * {@snippet :
     * int ToUnicode(UINT wVirtKey, UINT wScanCode, const BYTE* lpKeyState, LPWSTR pwszBuff, int cchBuff, UINT wFlags);
     * }
     */
    public static int ToUnicode(int wVirtKey, int wScanCode, MemorySegment lpKeyState, MemorySegment pwszBuff, int cchBuff, int wFlags) {
        var mh$ = ToUnicode$MH();
        try {
            return (int)mh$.invokeExact(wVirtKey, wScanCode, lpKeyState, pwszBuff, cchBuff, wFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OemKeyScan$MH() {
        return RuntimeHelper.requireNonNull(constants$439.OemKeyScan$MH,"OemKeyScan");
    }
    /**
     * {@snippet :
     * DWORD OemKeyScan(WORD wOemChar);
     * }
     */
    public static int OemKeyScan(short wOemChar) {
        var mh$ = OemKeyScan$MH();
        try {
            return (int)mh$.invokeExact(wOemChar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VkKeyScanA$MH() {
        return RuntimeHelper.requireNonNull(constants$439.VkKeyScanA$MH,"VkKeyScanA");
    }
    /**
     * {@snippet :
     * SHORT VkKeyScanA(CHAR ch);
     * }
     */
    public static short VkKeyScanA(byte ch) {
        var mh$ = VkKeyScanA$MH();
        try {
            return (short)mh$.invokeExact(ch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VkKeyScanW$MH() {
        return RuntimeHelper.requireNonNull(constants$440.VkKeyScanW$MH,"VkKeyScanW");
    }
    /**
     * {@snippet :
     * SHORT VkKeyScanW(WCHAR ch);
     * }
     */
    public static short VkKeyScanW(short ch) {
        var mh$ = VkKeyScanW$MH();
        try {
            return (short)mh$.invokeExact(ch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VkKeyScanExA$MH() {
        return RuntimeHelper.requireNonNull(constants$440.VkKeyScanExA$MH,"VkKeyScanExA");
    }
    /**
     * {@snippet :
     * SHORT VkKeyScanExA(CHAR ch, HKL dwhkl);
     * }
     */
    public static short VkKeyScanExA(byte ch, MemorySegment dwhkl) {
        var mh$ = VkKeyScanExA$MH();
        try {
            return (short)mh$.invokeExact(ch, dwhkl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VkKeyScanExW$MH() {
        return RuntimeHelper.requireNonNull(constants$440.VkKeyScanExW$MH,"VkKeyScanExW");
    }
    /**
     * {@snippet :
     * SHORT VkKeyScanExW(WCHAR ch, HKL dwhkl);
     * }
     */
    public static short VkKeyScanExW(short ch, MemorySegment dwhkl) {
        var mh$ = VkKeyScanExW$MH();
        try {
            return (short)mh$.invokeExact(ch, dwhkl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle keybd_event$MH() {
        return RuntimeHelper.requireNonNull(constants$440.keybd_event$MH,"keybd_event");
    }
    /**
     * {@snippet :
     * void keybd_event(BYTE bVk, BYTE bScan, DWORD dwFlags, ULONG_PTR dwExtraInfo);
     * }
     */
    public static void keybd_event(byte bVk, byte bScan, int dwFlags, long dwExtraInfo) {
        var mh$ = keybd_event$MH();
        try {
            mh$.invokeExact(bVk, bScan, dwFlags, dwExtraInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mouse_event$MH() {
        return RuntimeHelper.requireNonNull(constants$440.mouse_event$MH,"mouse_event");
    }
    /**
     * {@snippet :
     * void mouse_event(DWORD dwFlags, DWORD dx, DWORD dy, DWORD dwData, ULONG_PTR dwExtraInfo);
     * }
     */
    public static void mouse_event(int dwFlags, int dx, int dy, int dwData, long dwExtraInfo) {
        var mh$ = mouse_event$MH();
        try {
            mh$.invokeExact(dwFlags, dx, dy, dwData, dwExtraInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct tagMOUSEINPUT* PMOUSEINPUT;
     * }
     */
    public static final OfAddress PMOUSEINPUT = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagMOUSEINPUT* LPMOUSEINPUT;
     * }
     */
    public static final OfAddress LPMOUSEINPUT = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagKEYBDINPUT* PKEYBDINPUT;
     * }
     */
    public static final OfAddress PKEYBDINPUT = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagKEYBDINPUT* LPKEYBDINPUT;
     * }
     */
    public static final OfAddress LPKEYBDINPUT = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagHARDWAREINPUT* PHARDWAREINPUT;
     * }
     */
    public static final OfAddress PHARDWAREINPUT = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagHARDWAREINPUT* LPHARDWAREINPUT;
     * }
     */
    public static final OfAddress LPHARDWAREINPUT = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagINPUT* PINPUT;
     * }
     */
    public static final OfAddress PINPUT = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagINPUT* LPINPUT;
     * }
     */
    public static final OfAddress LPINPUT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle SendInput$MH() {
        return RuntimeHelper.requireNonNull(constants$440.SendInput$MH,"SendInput");
    }
    /**
     * {@snippet :
     * UINT SendInput(UINT cInputs, LPINPUT pInputs, int cbSize);
     * }
     */
    public static int SendInput(int cInputs, MemorySegment pInputs, int cbSize) {
        var mh$ = SendInput$MH();
        try {
            return (int)mh$.invokeExact(cInputs, pInputs, cbSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct HTOUCHINPUT__* HTOUCHINPUT;
     * }
     */
    public static final OfAddress HTOUCHINPUT = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagTOUCHINPUT* PTOUCHINPUT;
     * }
     */
    public static final OfAddress PTOUCHINPUT = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagTOUCHINPUT* PCTOUCHINPUT;
     * }
     */
    public static final OfAddress PCTOUCHINPUT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetTouchInputInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$441.GetTouchInputInfo$MH,"GetTouchInputInfo");
    }
    /**
     * {@snippet :
     * BOOL GetTouchInputInfo(HTOUCHINPUT hTouchInput, UINT cInputs, PTOUCHINPUT pInputs, int cbSize);
     * }
     */
    public static int GetTouchInputInfo(MemorySegment hTouchInput, int cInputs, MemorySegment pInputs, int cbSize) {
        var mh$ = GetTouchInputInfo$MH();
        try {
            return (int)mh$.invokeExact(hTouchInput, cInputs, pInputs, cbSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CloseTouchInputHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$441.CloseTouchInputHandle$MH,"CloseTouchInputHandle");
    }
    /**
     * {@snippet :
     * BOOL CloseTouchInputHandle(HTOUCHINPUT hTouchInput);
     * }
     */
    public static int CloseTouchInputHandle(MemorySegment hTouchInput) {
        var mh$ = CloseTouchInputHandle$MH();
        try {
            return (int)mh$.invokeExact(hTouchInput);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterTouchWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$441.RegisterTouchWindow$MH,"RegisterTouchWindow");
    }
    /**
     * {@snippet :
     * BOOL RegisterTouchWindow(HWND hwnd, ULONG ulFlags);
     * }
     */
    public static int RegisterTouchWindow(MemorySegment hwnd, int ulFlags) {
        var mh$ = RegisterTouchWindow$MH();
        try {
            return (int)mh$.invokeExact(hwnd, ulFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnregisterTouchWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$441.UnregisterTouchWindow$MH,"UnregisterTouchWindow");
    }
    /**
     * {@snippet :
     * BOOL UnregisterTouchWindow(HWND hwnd);
     * }
     */
    public static int UnregisterTouchWindow(MemorySegment hwnd) {
        var mh$ = UnregisterTouchWindow$MH();
        try {
            return (int)mh$.invokeExact(hwnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsTouchWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$441.IsTouchWindow$MH,"IsTouchWindow");
    }
    /**
     * {@snippet :
     * BOOL IsTouchWindow(HWND hwnd, PULONG pulFlags);
     * }
     */
    public static int IsTouchWindow(MemorySegment hwnd, MemorySegment pulFlags) {
        var mh$ = IsTouchWindow$MH();
        try {
            return (int)mh$.invokeExact(hwnd, pulFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum tagPOINTER_INPUT_TYPE.PT_POINTER = 1;
     * }
     */
    public static int PT_POINTER() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum tagPOINTER_INPUT_TYPE.PT_TOUCH = 2;
     * }
     */
    public static int PT_TOUCH() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum tagPOINTER_INPUT_TYPE.PT_PEN = 3;
     * }
     */
    public static int PT_PEN() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum tagPOINTER_INPUT_TYPE.PT_MOUSE = 4;
     * }
     */
    public static int PT_MOUSE() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum tagPOINTER_INPUT_TYPE.PT_TOUCHPAD = 5;
     * }
     */
    public static int PT_TOUCHPAD() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * typedef unsigned long POINTER_INPUT_TYPE;
     * }
     */
    public static final OfInt POINTER_INPUT_TYPE = Constants$root.C_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int POINTER_FLAGS;
     * }
     */
    public static final OfInt POINTER_FLAGS = Constants$root.C_LONG$LAYOUT;
    /**
     * {@snippet :
     * enum tagPOINTER_BUTTON_CHANGE_TYPE.POINTER_CHANGE_NONE = 0;
     * }
     */
    public static int POINTER_CHANGE_NONE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum tagPOINTER_BUTTON_CHANGE_TYPE.POINTER_CHANGE_FIRSTBUTTON_DOWN = 1;
     * }
     */
    public static int POINTER_CHANGE_FIRSTBUTTON_DOWN() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum tagPOINTER_BUTTON_CHANGE_TYPE.POINTER_CHANGE_FIRSTBUTTON_UP = 2;
     * }
     */
    public static int POINTER_CHANGE_FIRSTBUTTON_UP() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum tagPOINTER_BUTTON_CHANGE_TYPE.POINTER_CHANGE_SECONDBUTTON_DOWN = 3;
     * }
     */
    public static int POINTER_CHANGE_SECONDBUTTON_DOWN() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum tagPOINTER_BUTTON_CHANGE_TYPE.POINTER_CHANGE_SECONDBUTTON_UP = 4;
     * }
     */
    public static int POINTER_CHANGE_SECONDBUTTON_UP() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum tagPOINTER_BUTTON_CHANGE_TYPE.POINTER_CHANGE_THIRDBUTTON_DOWN = 5;
     * }
     */
    public static int POINTER_CHANGE_THIRDBUTTON_DOWN() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum tagPOINTER_BUTTON_CHANGE_TYPE.POINTER_CHANGE_THIRDBUTTON_UP = 6;
     * }
     */
    public static int POINTER_CHANGE_THIRDBUTTON_UP() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum tagPOINTER_BUTTON_CHANGE_TYPE.POINTER_CHANGE_FOURTHBUTTON_DOWN = 7;
     * }
     */
    public static int POINTER_CHANGE_FOURTHBUTTON_DOWN() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum tagPOINTER_BUTTON_CHANGE_TYPE.POINTER_CHANGE_FOURTHBUTTON_UP = 8;
     * }
     */
    public static int POINTER_CHANGE_FOURTHBUTTON_UP() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum tagPOINTER_BUTTON_CHANGE_TYPE.POINTER_CHANGE_FIFTHBUTTON_DOWN = 9;
     * }
     */
    public static int POINTER_CHANGE_FIFTHBUTTON_DOWN() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum tagPOINTER_BUTTON_CHANGE_TYPE.POINTER_CHANGE_FIFTHBUTTON_UP = 10;
     * }
     */
    public static int POINTER_CHANGE_FIFTHBUTTON_UP() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * typedef unsigned int TOUCH_FLAGS;
     * }
     */
    public static final OfInt TOUCH_FLAGS = Constants$root.C_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int TOUCH_MASK;
     * }
     */
    public static final OfInt TOUCH_MASK = Constants$root.C_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int PEN_FLAGS;
     * }
     */
    public static final OfInt PEN_FLAGS = Constants$root.C_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int PEN_MASK;
     * }
     */
    public static final OfInt PEN_MASK = Constants$root.C_LONG$LAYOUT;
    /**
     * {@snippet :
     * enum .POINTER_FEEDBACK_DEFAULT = 1;
     * }
     */
    public static int POINTER_FEEDBACK_DEFAULT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .POINTER_FEEDBACK_INDIRECT = 2;
     * }
     */
    public static int POINTER_FEEDBACK_INDIRECT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .POINTER_FEEDBACK_NONE = 3;
     * }
     */
    public static int POINTER_FEEDBACK_NONE() {
        return (int)3L;
    }
    public static MethodHandle InitializeTouchInjection$MH() {
        return RuntimeHelper.requireNonNull(constants$441.InitializeTouchInjection$MH,"InitializeTouchInjection");
    }
    /**
     * {@snippet :
     * BOOL InitializeTouchInjection(UINT32 maxCount, DWORD dwMode);
     * }
     */
    public static int InitializeTouchInjection(int maxCount, int dwMode) {
        var mh$ = InitializeTouchInjection$MH();
        try {
            return (int)mh$.invokeExact(maxCount, dwMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InjectTouchInput$MH() {
        return RuntimeHelper.requireNonNull(constants$442.InjectTouchInput$MH,"InjectTouchInput");
    }
    /**
     * {@snippet :
     * BOOL InjectTouchInput(UINT32 count, const POINTER_TOUCH_INFO* contacts);
     * }
     */
    public static int InjectTouchInput(int count, MemorySegment contacts) {
        var mh$ = InjectTouchInput$MH();
        try {
            return (int)mh$.invokeExact(count, contacts);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct tagUSAGE_PROPERTIES* PUSAGE_PROPERTIES;
     * }
     */
    public static final OfAddress PUSAGE_PROPERTIES = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagPOINTER_TYPE_INFO* PPOINTER_TYPE_INFO;
     * }
     */
    public static final OfAddress PPOINTER_TYPE_INFO = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagINPUT_INJECTION_VALUE* PINPUT_INJECTION_VALUE;
     * }
     */
    public static final OfAddress PINPUT_INJECTION_VALUE = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetPointerType$MH() {
        return RuntimeHelper.requireNonNull(constants$442.GetPointerType$MH,"GetPointerType");
    }
    /**
     * {@snippet :
     * BOOL GetPointerType(UINT32 pointerId, POINTER_INPUT_TYPE* pointerType);
     * }
     */
    public static int GetPointerType(int pointerId, MemorySegment pointerType) {
        var mh$ = GetPointerType$MH();
        try {
            return (int)mh$.invokeExact(pointerId, pointerType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPointerCursorId$MH() {
        return RuntimeHelper.requireNonNull(constants$442.GetPointerCursorId$MH,"GetPointerCursorId");
    }
    /**
     * {@snippet :
     * BOOL GetPointerCursorId(UINT32 pointerId, UINT32* cursorId);
     * }
     */
    public static int GetPointerCursorId(int pointerId, MemorySegment cursorId) {
        var mh$ = GetPointerCursorId$MH();
        try {
            return (int)mh$.invokeExact(pointerId, cursorId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPointerInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$442.GetPointerInfo$MH,"GetPointerInfo");
    }
    /**
     * {@snippet :
     * BOOL GetPointerInfo(UINT32 pointerId, POINTER_INFO* pointerInfo);
     * }
     */
    public static int GetPointerInfo(int pointerId, MemorySegment pointerInfo) {
        var mh$ = GetPointerInfo$MH();
        try {
            return (int)mh$.invokeExact(pointerId, pointerInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPointerInfoHistory$MH() {
        return RuntimeHelper.requireNonNull(constants$442.GetPointerInfoHistory$MH,"GetPointerInfoHistory");
    }
    /**
     * {@snippet :
     * BOOL GetPointerInfoHistory(UINT32 pointerId, UINT32* entriesCount, POINTER_INFO* pointerInfo);
     * }
     */
    public static int GetPointerInfoHistory(int pointerId, MemorySegment entriesCount, MemorySegment pointerInfo) {
        var mh$ = GetPointerInfoHistory$MH();
        try {
            return (int)mh$.invokeExact(pointerId, entriesCount, pointerInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPointerFrameInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$442.GetPointerFrameInfo$MH,"GetPointerFrameInfo");
    }
    /**
     * {@snippet :
     * BOOL GetPointerFrameInfo(UINT32 pointerId, UINT32* pointerCount, POINTER_INFO* pointerInfo);
     * }
     */
    public static int GetPointerFrameInfo(int pointerId, MemorySegment pointerCount, MemorySegment pointerInfo) {
        var mh$ = GetPointerFrameInfo$MH();
        try {
            return (int)mh$.invokeExact(pointerId, pointerCount, pointerInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPointerFrameInfoHistory$MH() {
        return RuntimeHelper.requireNonNull(constants$443.GetPointerFrameInfoHistory$MH,"GetPointerFrameInfoHistory");
    }
    /**
     * {@snippet :
     * BOOL GetPointerFrameInfoHistory(UINT32 pointerId, UINT32* entriesCount, UINT32* pointerCount, POINTER_INFO* pointerInfo);
     * }
     */
    public static int GetPointerFrameInfoHistory(int pointerId, MemorySegment entriesCount, MemorySegment pointerCount, MemorySegment pointerInfo) {
        var mh$ = GetPointerFrameInfoHistory$MH();
        try {
            return (int)mh$.invokeExact(pointerId, entriesCount, pointerCount, pointerInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPointerTouchInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$443.GetPointerTouchInfo$MH,"GetPointerTouchInfo");
    }
    /**
     * {@snippet :
     * BOOL GetPointerTouchInfo(UINT32 pointerId, POINTER_TOUCH_INFO* touchInfo);
     * }
     */
    public static int GetPointerTouchInfo(int pointerId, MemorySegment touchInfo) {
        var mh$ = GetPointerTouchInfo$MH();
        try {
            return (int)mh$.invokeExact(pointerId, touchInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPointerTouchInfoHistory$MH() {
        return RuntimeHelper.requireNonNull(constants$443.GetPointerTouchInfoHistory$MH,"GetPointerTouchInfoHistory");
    }
    /**
     * {@snippet :
     * BOOL GetPointerTouchInfoHistory(UINT32 pointerId, UINT32* entriesCount, POINTER_TOUCH_INFO* touchInfo);
     * }
     */
    public static int GetPointerTouchInfoHistory(int pointerId, MemorySegment entriesCount, MemorySegment touchInfo) {
        var mh$ = GetPointerTouchInfoHistory$MH();
        try {
            return (int)mh$.invokeExact(pointerId, entriesCount, touchInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPointerFrameTouchInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$443.GetPointerFrameTouchInfo$MH,"GetPointerFrameTouchInfo");
    }
    /**
     * {@snippet :
     * BOOL GetPointerFrameTouchInfo(UINT32 pointerId, UINT32* pointerCount, POINTER_TOUCH_INFO* touchInfo);
     * }
     */
    public static int GetPointerFrameTouchInfo(int pointerId, MemorySegment pointerCount, MemorySegment touchInfo) {
        var mh$ = GetPointerFrameTouchInfo$MH();
        try {
            return (int)mh$.invokeExact(pointerId, pointerCount, touchInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPointerFrameTouchInfoHistory$MH() {
        return RuntimeHelper.requireNonNull(constants$443.GetPointerFrameTouchInfoHistory$MH,"GetPointerFrameTouchInfoHistory");
    }
    /**
     * {@snippet :
     * BOOL GetPointerFrameTouchInfoHistory(UINT32 pointerId, UINT32* entriesCount, UINT32* pointerCount, POINTER_TOUCH_INFO* touchInfo);
     * }
     */
    public static int GetPointerFrameTouchInfoHistory(int pointerId, MemorySegment entriesCount, MemorySegment pointerCount, MemorySegment touchInfo) {
        var mh$ = GetPointerFrameTouchInfoHistory$MH();
        try {
            return (int)mh$.invokeExact(pointerId, entriesCount, pointerCount, touchInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPointerPenInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$443.GetPointerPenInfo$MH,"GetPointerPenInfo");
    }
    /**
     * {@snippet :
     * BOOL GetPointerPenInfo(UINT32 pointerId, POINTER_PEN_INFO* penInfo);
     * }
     */
    public static int GetPointerPenInfo(int pointerId, MemorySegment penInfo) {
        var mh$ = GetPointerPenInfo$MH();
        try {
            return (int)mh$.invokeExact(pointerId, penInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPointerPenInfoHistory$MH() {
        return RuntimeHelper.requireNonNull(constants$444.GetPointerPenInfoHistory$MH,"GetPointerPenInfoHistory");
    }
    /**
     * {@snippet :
     * BOOL GetPointerPenInfoHistory(UINT32 pointerId, UINT32* entriesCount, POINTER_PEN_INFO* penInfo);
     * }
     */
    public static int GetPointerPenInfoHistory(int pointerId, MemorySegment entriesCount, MemorySegment penInfo) {
        var mh$ = GetPointerPenInfoHistory$MH();
        try {
            return (int)mh$.invokeExact(pointerId, entriesCount, penInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPointerFramePenInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$444.GetPointerFramePenInfo$MH,"GetPointerFramePenInfo");
    }
    /**
     * {@snippet :
     * BOOL GetPointerFramePenInfo(UINT32 pointerId, UINT32* pointerCount, POINTER_PEN_INFO* penInfo);
     * }
     */
    public static int GetPointerFramePenInfo(int pointerId, MemorySegment pointerCount, MemorySegment penInfo) {
        var mh$ = GetPointerFramePenInfo$MH();
        try {
            return (int)mh$.invokeExact(pointerId, pointerCount, penInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPointerFramePenInfoHistory$MH() {
        return RuntimeHelper.requireNonNull(constants$444.GetPointerFramePenInfoHistory$MH,"GetPointerFramePenInfoHistory");
    }
    /**
     * {@snippet :
     * BOOL GetPointerFramePenInfoHistory(UINT32 pointerId, UINT32* entriesCount, UINT32* pointerCount, POINTER_PEN_INFO* penInfo);
     * }
     */
    public static int GetPointerFramePenInfoHistory(int pointerId, MemorySegment entriesCount, MemorySegment pointerCount, MemorySegment penInfo) {
        var mh$ = GetPointerFramePenInfoHistory$MH();
        try {
            return (int)mh$.invokeExact(pointerId, entriesCount, pointerCount, penInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkipPointerFrameMessages$MH() {
        return RuntimeHelper.requireNonNull(constants$444.SkipPointerFrameMessages$MH,"SkipPointerFrameMessages");
    }
    /**
     * {@snippet :
     * BOOL SkipPointerFrameMessages(UINT32 pointerId);
     * }
     */
    public static int SkipPointerFrameMessages(int pointerId) {
        var mh$ = SkipPointerFrameMessages$MH();
        try {
            return (int)mh$.invokeExact(pointerId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterPointerInputTarget$MH() {
        return RuntimeHelper.requireNonNull(constants$444.RegisterPointerInputTarget$MH,"RegisterPointerInputTarget");
    }
    /**
     * {@snippet :
     * BOOL RegisterPointerInputTarget(HWND hwnd, POINTER_INPUT_TYPE pointerType);
     * }
     */
    public static int RegisterPointerInputTarget(MemorySegment hwnd, int pointerType) {
        var mh$ = RegisterPointerInputTarget$MH();
        try {
            return (int)mh$.invokeExact(hwnd, pointerType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnregisterPointerInputTarget$MH() {
        return RuntimeHelper.requireNonNull(constants$444.UnregisterPointerInputTarget$MH,"UnregisterPointerInputTarget");
    }
    /**
     * {@snippet :
     * BOOL UnregisterPointerInputTarget(HWND hwnd, POINTER_INPUT_TYPE pointerType);
     * }
     */
    public static int UnregisterPointerInputTarget(MemorySegment hwnd, int pointerType) {
        var mh$ = UnregisterPointerInputTarget$MH();
        try {
            return (int)mh$.invokeExact(hwnd, pointerType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterPointerInputTargetEx$MH() {
        return RuntimeHelper.requireNonNull(constants$445.RegisterPointerInputTargetEx$MH,"RegisterPointerInputTargetEx");
    }
    /**
     * {@snippet :
     * BOOL RegisterPointerInputTargetEx(HWND hwnd, POINTER_INPUT_TYPE pointerType, BOOL fObserve);
     * }
     */
    public static int RegisterPointerInputTargetEx(MemorySegment hwnd, int pointerType, int fObserve) {
        var mh$ = RegisterPointerInputTargetEx$MH();
        try {
            return (int)mh$.invokeExact(hwnd, pointerType, fObserve);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnregisterPointerInputTargetEx$MH() {
        return RuntimeHelper.requireNonNull(constants$445.UnregisterPointerInputTargetEx$MH,"UnregisterPointerInputTargetEx");
    }
    /**
     * {@snippet :
     * BOOL UnregisterPointerInputTargetEx(HWND hwnd, POINTER_INPUT_TYPE pointerType);
     * }
     */
    public static int UnregisterPointerInputTargetEx(MemorySegment hwnd, int pointerType) {
        var mh$ = UnregisterPointerInputTargetEx$MH();
        try {
            return (int)mh$.invokeExact(hwnd, pointerType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct HSYNTHETICPOINTERDEVICE__* HSYNTHETICPOINTERDEVICE;
     * }
     */
    public static final OfAddress HSYNTHETICPOINTERDEVICE = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CreateSyntheticPointerDevice$MH() {
        return RuntimeHelper.requireNonNull(constants$445.CreateSyntheticPointerDevice$MH,"CreateSyntheticPointerDevice");
    }
    /**
     * {@snippet :
     * HSYNTHETICPOINTERDEVICE CreateSyntheticPointerDevice(POINTER_INPUT_TYPE pointerType, ULONG maxCount, POINTER_FEEDBACK_MODE mode);
     * }
     */
    public static MemorySegment CreateSyntheticPointerDevice(int pointerType, int maxCount, int mode) {
        var mh$ = CreateSyntheticPointerDevice$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(pointerType, maxCount, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InjectSyntheticPointerInput$MH() {
        return RuntimeHelper.requireNonNull(constants$445.InjectSyntheticPointerInput$MH,"InjectSyntheticPointerInput");
    }
    /**
     * {@snippet :
     * BOOL InjectSyntheticPointerInput(HSYNTHETICPOINTERDEVICE device, const POINTER_TYPE_INFO* pointerInfo, UINT32 count);
     * }
     */
    public static int InjectSyntheticPointerInput(MemorySegment device, MemorySegment pointerInfo, int count) {
        var mh$ = InjectSyntheticPointerInput$MH();
        try {
            return (int)mh$.invokeExact(device, pointerInfo, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DestroySyntheticPointerDevice$MH() {
        return RuntimeHelper.requireNonNull(constants$445.DestroySyntheticPointerDevice$MH,"DestroySyntheticPointerDevice");
    }
    /**
     * {@snippet :
     * void DestroySyntheticPointerDevice(HSYNTHETICPOINTERDEVICE device);
     * }
     */
    public static void DestroySyntheticPointerDevice(MemorySegment device) {
        var mh$ = DestroySyntheticPointerDevice$MH();
        try {
            mh$.invokeExact(device);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnableMouseInPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$445.EnableMouseInPointer$MH,"EnableMouseInPointer");
    }
    /**
     * {@snippet :
     * BOOL EnableMouseInPointer(BOOL fEnable);
     * }
     */
    public static int EnableMouseInPointer(int fEnable) {
        var mh$ = EnableMouseInPointer$MH();
        try {
            return (int)mh$.invokeExact(fEnable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsMouseInPointerEnabled$MH() {
        return RuntimeHelper.requireNonNull(constants$446.IsMouseInPointerEnabled$MH,"IsMouseInPointerEnabled");
    }
    /**
     * {@snippet :
     * BOOL IsMouseInPointerEnabled();
     * }
     */
    public static int IsMouseInPointerEnabled() {
        var mh$ = IsMouseInPointerEnabled$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnableMouseInPointerForThread$MH() {
        return RuntimeHelper.requireNonNull(constants$446.EnableMouseInPointerForThread$MH,"EnableMouseInPointerForThread");
    }
    /**
     * {@snippet :
     * BOOL EnableMouseInPointerForThread();
     * }
     */
    public static int EnableMouseInPointerForThread() {
        var mh$ = EnableMouseInPointerForThread$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterTouchHitTestingWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$446.RegisterTouchHitTestingWindow$MH,"RegisterTouchHitTestingWindow");
    }
    /**
     * {@snippet :
     * BOOL RegisterTouchHitTestingWindow(HWND hwnd, ULONG value);
     * }
     */
    public static int RegisterTouchHitTestingWindow(MemorySegment hwnd, int value) {
        var mh$ = RegisterTouchHitTestingWindow$MH();
        try {
            return (int)mh$.invokeExact(hwnd, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct tagTOUCH_HIT_TESTING_PROXIMITY_EVALUATION* PTOUCH_HIT_TESTING_PROXIMITY_EVALUATION;
     * }
     */
    public static final OfAddress PTOUCH_HIT_TESTING_PROXIMITY_EVALUATION = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagTOUCH_HIT_TESTING_INPUT* PTOUCH_HIT_TESTING_INPUT;
     * }
     */
    public static final OfAddress PTOUCH_HIT_TESTING_INPUT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle EvaluateProximityToRect$MH() {
        return RuntimeHelper.requireNonNull(constants$446.EvaluateProximityToRect$MH,"EvaluateProximityToRect");
    }
    /**
     * {@snippet :
     * BOOL EvaluateProximityToRect(const RECT* controlBoundingBox, const TOUCH_HIT_TESTING_INPUT* pHitTestingInput, TOUCH_HIT_TESTING_PROXIMITY_EVALUATION* pProximityEval);
     * }
     */
    public static int EvaluateProximityToRect(MemorySegment controlBoundingBox, MemorySegment pHitTestingInput, MemorySegment pProximityEval) {
        var mh$ = EvaluateProximityToRect$MH();
        try {
            return (int)mh$.invokeExact(controlBoundingBox, pHitTestingInput, pProximityEval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EvaluateProximityToPolygon$MH() {
        return RuntimeHelper.requireNonNull(constants$446.EvaluateProximityToPolygon$MH,"EvaluateProximityToPolygon");
    }
    /**
     * {@snippet :
     * BOOL EvaluateProximityToPolygon(UINT32 numVertices, const POINT* controlPolygon, const TOUCH_HIT_TESTING_INPUT* pHitTestingInput, TOUCH_HIT_TESTING_PROXIMITY_EVALUATION* pProximityEval);
     * }
     */
    public static int EvaluateProximityToPolygon(int numVertices, MemorySegment controlPolygon, MemorySegment pHitTestingInput, MemorySegment pProximityEval) {
        var mh$ = EvaluateProximityToPolygon$MH();
        try {
            return (int)mh$.invokeExact(numVertices, controlPolygon, pHitTestingInput, pProximityEval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PackTouchHitTestingProximityEvaluation$MH() {
        return RuntimeHelper.requireNonNull(constants$446.PackTouchHitTestingProximityEvaluation$MH,"PackTouchHitTestingProximityEvaluation");
    }
    /**
     * {@snippet :
     * LRESULT PackTouchHitTestingProximityEvaluation(const TOUCH_HIT_TESTING_INPUT* pHitTestingInput, const TOUCH_HIT_TESTING_PROXIMITY_EVALUATION* pProximityEval);
     * }
     */
    public static long PackTouchHitTestingProximityEvaluation(MemorySegment pHitTestingInput, MemorySegment pProximityEval) {
        var mh$ = PackTouchHitTestingProximityEvaluation$MH();
        try {
            return (long)mh$.invokeExact(pHitTestingInput, pProximityEval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum tagFEEDBACK_TYPE.FEEDBACK_TOUCH_CONTACTVISUALIZATION = 1;
     * }
     */
    public static int FEEDBACK_TOUCH_CONTACTVISUALIZATION() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum tagFEEDBACK_TYPE.FEEDBACK_PEN_BARRELVISUALIZATION = 2;
     * }
     */
    public static int FEEDBACK_PEN_BARRELVISUALIZATION() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum tagFEEDBACK_TYPE.FEEDBACK_PEN_TAP = 3;
     * }
     */
    public static int FEEDBACK_PEN_TAP() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum tagFEEDBACK_TYPE.FEEDBACK_PEN_DOUBLETAP = 4;
     * }
     */
    public static int FEEDBACK_PEN_DOUBLETAP() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum tagFEEDBACK_TYPE.FEEDBACK_PEN_PRESSANDHOLD = 5;
     * }
     */
    public static int FEEDBACK_PEN_PRESSANDHOLD() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum tagFEEDBACK_TYPE.FEEDBACK_PEN_RIGHTTAP = 6;
     * }
     */
    public static int FEEDBACK_PEN_RIGHTTAP() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum tagFEEDBACK_TYPE.FEEDBACK_TOUCH_TAP = 7;
     * }
     */
    public static int FEEDBACK_TOUCH_TAP() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum tagFEEDBACK_TYPE.FEEDBACK_TOUCH_DOUBLETAP = 8;
     * }
     */
    public static int FEEDBACK_TOUCH_DOUBLETAP() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum tagFEEDBACK_TYPE.FEEDBACK_TOUCH_PRESSANDHOLD = 9;
     * }
     */
    public static int FEEDBACK_TOUCH_PRESSANDHOLD() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum tagFEEDBACK_TYPE.FEEDBACK_TOUCH_RIGHTTAP = 10;
     * }
     */
    public static int FEEDBACK_TOUCH_RIGHTTAP() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum tagFEEDBACK_TYPE.FEEDBACK_GESTURE_PRESSANDTAP = 11;
     * }
     */
    public static int FEEDBACK_GESTURE_PRESSANDTAP() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum tagFEEDBACK_TYPE.FEEDBACK_MAX = -1;
     * }
     */
    public static int FEEDBACK_MAX() {
        return (int)-1L;
    }
    public static MethodHandle GetWindowFeedbackSetting$MH() {
        return RuntimeHelper.requireNonNull(constants$447.GetWindowFeedbackSetting$MH,"GetWindowFeedbackSetting");
    }
    /**
     * {@snippet :
     * BOOL GetWindowFeedbackSetting(HWND hwnd, FEEDBACK_TYPE feedback, DWORD dwFlags, UINT32* pSize, void* config);
     * }
     */
    public static int GetWindowFeedbackSetting(MemorySegment hwnd, int feedback, int dwFlags, MemorySegment pSize, MemorySegment config) {
        var mh$ = GetWindowFeedbackSetting$MH();
        try {
            return (int)mh$.invokeExact(hwnd, feedback, dwFlags, pSize, config);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWindowFeedbackSetting$MH() {
        return RuntimeHelper.requireNonNull(constants$447.SetWindowFeedbackSetting$MH,"SetWindowFeedbackSetting");
    }
    /**
     * {@snippet :
     * BOOL SetWindowFeedbackSetting(HWND hwnd, FEEDBACK_TYPE feedback, DWORD dwFlags, UINT32 size, void* configuration);
     * }
     */
    public static int SetWindowFeedbackSetting(MemorySegment hwnd, int feedback, int dwFlags, int size, MemorySegment configuration) {
        var mh$ = SetWindowFeedbackSetting$MH();
        try {
            return (int)mh$.invokeExact(hwnd, feedback, dwFlags, size, configuration);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPointerInputTransform$MH() {
        return RuntimeHelper.requireNonNull(constants$447.GetPointerInputTransform$MH,"GetPointerInputTransform");
    }
    /**
     * {@snippet :
     * BOOL GetPointerInputTransform(UINT32 pointerId, UINT32 historyCount, INPUT_TRANSFORM* inputTransform);
     * }
     */
    public static int GetPointerInputTransform(int pointerId, int historyCount, MemorySegment inputTransform) {
        var mh$ = GetPointerInputTransform$MH();
        try {
            return (int)mh$.invokeExact(pointerId, historyCount, inputTransform);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct tagLASTINPUTINFO* PLASTINPUTINFO;
     * }
     */
    public static final OfAddress PLASTINPUTINFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetLastInputInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$447.GetLastInputInfo$MH,"GetLastInputInfo");
    }
    /**
     * {@snippet :
     * BOOL GetLastInputInfo(PLASTINPUTINFO plii);
     * }
     */
    public static int GetLastInputInfo(MemorySegment plii) {
        var mh$ = GetLastInputInfo$MH();
        try {
            return (int)mh$.invokeExact(plii);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MapVirtualKeyA$MH() {
        return RuntimeHelper.requireNonNull(constants$447.MapVirtualKeyA$MH,"MapVirtualKeyA");
    }
    /**
     * {@snippet :
     * UINT MapVirtualKeyA(UINT uCode, UINT uMapType);
     * }
     */
    public static int MapVirtualKeyA(int uCode, int uMapType) {
        var mh$ = MapVirtualKeyA$MH();
        try {
            return (int)mh$.invokeExact(uCode, uMapType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MapVirtualKeyW$MH() {
        return RuntimeHelper.requireNonNull(constants$447.MapVirtualKeyW$MH,"MapVirtualKeyW");
    }
    /**
     * {@snippet :
     * UINT MapVirtualKeyW(UINT uCode, UINT uMapType);
     * }
     */
    public static int MapVirtualKeyW(int uCode, int uMapType) {
        var mh$ = MapVirtualKeyW$MH();
        try {
            return (int)mh$.invokeExact(uCode, uMapType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MapVirtualKeyExA$MH() {
        return RuntimeHelper.requireNonNull(constants$448.MapVirtualKeyExA$MH,"MapVirtualKeyExA");
    }
    /**
     * {@snippet :
     * UINT MapVirtualKeyExA(UINT uCode, UINT uMapType, HKL dwhkl);
     * }
     */
    public static int MapVirtualKeyExA(int uCode, int uMapType, MemorySegment dwhkl) {
        var mh$ = MapVirtualKeyExA$MH();
        try {
            return (int)mh$.invokeExact(uCode, uMapType, dwhkl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MapVirtualKeyExW$MH() {
        return RuntimeHelper.requireNonNull(constants$448.MapVirtualKeyExW$MH,"MapVirtualKeyExW");
    }
    /**
     * {@snippet :
     * UINT MapVirtualKeyExW(UINT uCode, UINT uMapType, HKL dwhkl);
     * }
     */
    public static int MapVirtualKeyExW(int uCode, int uMapType, MemorySegment dwhkl) {
        var mh$ = MapVirtualKeyExW$MH();
        try {
            return (int)mh$.invokeExact(uCode, uMapType, dwhkl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetInputState$MH() {
        return RuntimeHelper.requireNonNull(constants$448.GetInputState$MH,"GetInputState");
    }
    /**
     * {@snippet :
     * BOOL GetInputState();
     * }
     */
    public static int GetInputState() {
        var mh$ = GetInputState$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetQueueStatus$MH() {
        return RuntimeHelper.requireNonNull(constants$448.GetQueueStatus$MH,"GetQueueStatus");
    }
    /**
     * {@snippet :
     * DWORD GetQueueStatus(UINT flags);
     * }
     */
    public static int GetQueueStatus(int flags) {
        var mh$ = GetQueueStatus$MH();
        try {
            return (int)mh$.invokeExact(flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCapture$MH() {
        return RuntimeHelper.requireNonNull(constants$448.GetCapture$MH,"GetCapture");
    }
    /**
     * {@snippet :
     * HWND GetCapture();
     * }
     */
    public static MemorySegment GetCapture() {
        var mh$ = GetCapture$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetCapture$MH() {
        return RuntimeHelper.requireNonNull(constants$448.SetCapture$MH,"SetCapture");
    }
    /**
     * {@snippet :
     * HWND SetCapture(HWND hWnd);
     * }
     */
    public static MemorySegment SetCapture(MemorySegment hWnd) {
        var mh$ = SetCapture$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReleaseCapture$MH() {
        return RuntimeHelper.requireNonNull(constants$449.ReleaseCapture$MH,"ReleaseCapture");
    }
    /**
     * {@snippet :
     * BOOL ReleaseCapture();
     * }
     */
    public static int ReleaseCapture() {
        var mh$ = ReleaseCapture$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MsgWaitForMultipleObjects$MH() {
        return RuntimeHelper.requireNonNull(constants$449.MsgWaitForMultipleObjects$MH,"MsgWaitForMultipleObjects");
    }
    /**
     * {@snippet :
     * DWORD MsgWaitForMultipleObjects(DWORD nCount, const HANDLE* pHandles, BOOL fWaitAll, DWORD dwMilliseconds, DWORD dwWakeMask);
     * }
     */
    public static int MsgWaitForMultipleObjects(int nCount, MemorySegment pHandles, int fWaitAll, int dwMilliseconds, int dwWakeMask) {
        var mh$ = MsgWaitForMultipleObjects$MH();
        try {
            return (int)mh$.invokeExact(nCount, pHandles, fWaitAll, dwMilliseconds, dwWakeMask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MsgWaitForMultipleObjectsEx$MH() {
        return RuntimeHelper.requireNonNull(constants$449.MsgWaitForMultipleObjectsEx$MH,"MsgWaitForMultipleObjectsEx");
    }
    /**
     * {@snippet :
     * DWORD MsgWaitForMultipleObjectsEx(DWORD nCount, const HANDLE* pHandles, DWORD dwMilliseconds, DWORD dwWakeMask, DWORD dwFlags);
     * }
     */
    public static int MsgWaitForMultipleObjectsEx(int nCount, MemorySegment pHandles, int dwMilliseconds, int dwWakeMask, int dwFlags) {
        var mh$ = MsgWaitForMultipleObjectsEx$MH();
        try {
            return (int)mh$.invokeExact(nCount, pHandles, dwMilliseconds, dwWakeMask, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetTimer$MH() {
        return RuntimeHelper.requireNonNull(constants$449.SetTimer$MH,"SetTimer");
    }
    /**
     * {@snippet :
     * UINT_PTR SetTimer(HWND hWnd, UINT_PTR nIDEvent, UINT uElapse, TIMERPROC lpTimerFunc);
     * }
     */
    public static long SetTimer(MemorySegment hWnd, long nIDEvent, int uElapse, MemorySegment lpTimerFunc) {
        var mh$ = SetTimer$MH();
        try {
            return (long)mh$.invokeExact(hWnd, nIDEvent, uElapse, lpTimerFunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetCoalescableTimer$MH() {
        return RuntimeHelper.requireNonNull(constants$449.SetCoalescableTimer$MH,"SetCoalescableTimer");
    }
    /**
     * {@snippet :
     * UINT_PTR SetCoalescableTimer(HWND hWnd, UINT_PTR nIDEvent, UINT uElapse, TIMERPROC lpTimerFunc, ULONG uToleranceDelay);
     * }
     */
    public static long SetCoalescableTimer(MemorySegment hWnd, long nIDEvent, int uElapse, MemorySegment lpTimerFunc, int uToleranceDelay) {
        var mh$ = SetCoalescableTimer$MH();
        try {
            return (long)mh$.invokeExact(hWnd, nIDEvent, uElapse, lpTimerFunc, uToleranceDelay);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle KillTimer$MH() {
        return RuntimeHelper.requireNonNull(constants$449.KillTimer$MH,"KillTimer");
    }
    /**
     * {@snippet :
     * BOOL KillTimer(HWND hWnd, UINT_PTR uIDEvent);
     * }
     */
    public static int KillTimer(MemorySegment hWnd, long uIDEvent) {
        var mh$ = KillTimer$MH();
        try {
            return (int)mh$.invokeExact(hWnd, uIDEvent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsWindowUnicode$MH() {
        return RuntimeHelper.requireNonNull(constants$450.IsWindowUnicode$MH,"IsWindowUnicode");
    }
    /**
     * {@snippet :
     * BOOL IsWindowUnicode(HWND hWnd);
     * }
     */
    public static int IsWindowUnicode(MemorySegment hWnd) {
        var mh$ = IsWindowUnicode$MH();
        try {
            return (int)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnableWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$450.EnableWindow$MH,"EnableWindow");
    }
    /**
     * {@snippet :
     * BOOL EnableWindow(HWND hWnd, BOOL bEnable);
     * }
     */
    public static int EnableWindow(MemorySegment hWnd, int bEnable) {
        var mh$ = EnableWindow$MH();
        try {
            return (int)mh$.invokeExact(hWnd, bEnable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsWindowEnabled$MH() {
        return RuntimeHelper.requireNonNull(constants$450.IsWindowEnabled$MH,"IsWindowEnabled");
    }
    /**
     * {@snippet :
     * BOOL IsWindowEnabled(HWND hWnd);
     * }
     */
    public static int IsWindowEnabled(MemorySegment hWnd) {
        var mh$ = IsWindowEnabled$MH();
        try {
            return (int)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadAcceleratorsA$MH() {
        return RuntimeHelper.requireNonNull(constants$450.LoadAcceleratorsA$MH,"LoadAcceleratorsA");
    }
    /**
     * {@snippet :
     * HACCEL LoadAcceleratorsA(HINSTANCE hInstance, LPCSTR lpTableName);
     * }
     */
    public static MemorySegment LoadAcceleratorsA(MemorySegment hInstance, MemorySegment lpTableName) {
        var mh$ = LoadAcceleratorsA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hInstance, lpTableName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadAcceleratorsW$MH() {
        return RuntimeHelper.requireNonNull(constants$450.LoadAcceleratorsW$MH,"LoadAcceleratorsW");
    }
    /**
     * {@snippet :
     * HACCEL LoadAcceleratorsW(HINSTANCE hInstance, LPCWSTR lpTableName);
     * }
     */
    public static MemorySegment LoadAcceleratorsW(MemorySegment hInstance, MemorySegment lpTableName) {
        var mh$ = LoadAcceleratorsW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hInstance, lpTableName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateAcceleratorTableA$MH() {
        return RuntimeHelper.requireNonNull(constants$450.CreateAcceleratorTableA$MH,"CreateAcceleratorTableA");
    }
    /**
     * {@snippet :
     * HACCEL CreateAcceleratorTableA(LPACCEL paccel, int cAccel);
     * }
     */
    public static MemorySegment CreateAcceleratorTableA(MemorySegment paccel, int cAccel) {
        var mh$ = CreateAcceleratorTableA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(paccel, cAccel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateAcceleratorTableW$MH() {
        return RuntimeHelper.requireNonNull(constants$451.CreateAcceleratorTableW$MH,"CreateAcceleratorTableW");
    }
    /**
     * {@snippet :
     * HACCEL CreateAcceleratorTableW(LPACCEL paccel, int cAccel);
     * }
     */
    public static MemorySegment CreateAcceleratorTableW(MemorySegment paccel, int cAccel) {
        var mh$ = CreateAcceleratorTableW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(paccel, cAccel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DestroyAcceleratorTable$MH() {
        return RuntimeHelper.requireNonNull(constants$451.DestroyAcceleratorTable$MH,"DestroyAcceleratorTable");
    }
    /**
     * {@snippet :
     * BOOL DestroyAcceleratorTable(HACCEL hAccel);
     * }
     */
    public static int DestroyAcceleratorTable(MemorySegment hAccel) {
        var mh$ = DestroyAcceleratorTable$MH();
        try {
            return (int)mh$.invokeExact(hAccel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CopyAcceleratorTableA$MH() {
        return RuntimeHelper.requireNonNull(constants$451.CopyAcceleratorTableA$MH,"CopyAcceleratorTableA");
    }
    /**
     * {@snippet :
     * int CopyAcceleratorTableA(HACCEL hAccelSrc, LPACCEL lpAccelDst, int cAccelEntries);
     * }
     */
    public static int CopyAcceleratorTableA(MemorySegment hAccelSrc, MemorySegment lpAccelDst, int cAccelEntries) {
        var mh$ = CopyAcceleratorTableA$MH();
        try {
            return (int)mh$.invokeExact(hAccelSrc, lpAccelDst, cAccelEntries);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CopyAcceleratorTableW$MH() {
        return RuntimeHelper.requireNonNull(constants$451.CopyAcceleratorTableW$MH,"CopyAcceleratorTableW");
    }
    /**
     * {@snippet :
     * int CopyAcceleratorTableW(HACCEL hAccelSrc, LPACCEL lpAccelDst, int cAccelEntries);
     * }
     */
    public static int CopyAcceleratorTableW(MemorySegment hAccelSrc, MemorySegment lpAccelDst, int cAccelEntries) {
        var mh$ = CopyAcceleratorTableW$MH();
        try {
            return (int)mh$.invokeExact(hAccelSrc, lpAccelDst, cAccelEntries);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TranslateAcceleratorA$MH() {
        return RuntimeHelper.requireNonNull(constants$451.TranslateAcceleratorA$MH,"TranslateAcceleratorA");
    }
    /**
     * {@snippet :
     * int TranslateAcceleratorA(HWND hWnd, HACCEL hAccTable, LPMSG lpMsg);
     * }
     */
    public static int TranslateAcceleratorA(MemorySegment hWnd, MemorySegment hAccTable, MemorySegment lpMsg) {
        var mh$ = TranslateAcceleratorA$MH();
        try {
            return (int)mh$.invokeExact(hWnd, hAccTable, lpMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TranslateAcceleratorW$MH() {
        return RuntimeHelper.requireNonNull(constants$451.TranslateAcceleratorW$MH,"TranslateAcceleratorW");
    }
    /**
     * {@snippet :
     * int TranslateAcceleratorW(HWND hWnd, HACCEL hAccTable, LPMSG lpMsg);
     * }
     */
    public static int TranslateAcceleratorW(MemorySegment hWnd, MemorySegment hAccTable, MemorySegment lpMsg) {
        var mh$ = TranslateAcceleratorW$MH();
        try {
            return (int)mh$.invokeExact(hWnd, hAccTable, lpMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSystemMetrics$MH() {
        return RuntimeHelper.requireNonNull(constants$452.GetSystemMetrics$MH,"GetSystemMetrics");
    }
    /**
     * {@snippet :
     * int GetSystemMetrics(int nIndex);
     * }
     */
    public static int GetSystemMetrics(int nIndex) {
        var mh$ = GetSystemMetrics$MH();
        try {
            return (int)mh$.invokeExact(nIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSystemMetricsForDpi$MH() {
        return RuntimeHelper.requireNonNull(constants$452.GetSystemMetricsForDpi$MH,"GetSystemMetricsForDpi");
    }
    /**
     * {@snippet :
     * int GetSystemMetricsForDpi(int nIndex, UINT dpi);
     * }
     */
    public static int GetSystemMetricsForDpi(int nIndex, int dpi) {
        var mh$ = GetSystemMetricsForDpi$MH();
        try {
            return (int)mh$.invokeExact(nIndex, dpi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadMenuA$MH() {
        return RuntimeHelper.requireNonNull(constants$452.LoadMenuA$MH,"LoadMenuA");
    }
    /**
     * {@snippet :
     * HMENU LoadMenuA(HINSTANCE hInstance, LPCSTR lpMenuName);
     * }
     */
    public static MemorySegment LoadMenuA(MemorySegment hInstance, MemorySegment lpMenuName) {
        var mh$ = LoadMenuA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hInstance, lpMenuName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadMenuW$MH() {
        return RuntimeHelper.requireNonNull(constants$452.LoadMenuW$MH,"LoadMenuW");
    }
    /**
     * {@snippet :
     * HMENU LoadMenuW(HINSTANCE hInstance, LPCWSTR lpMenuName);
     * }
     */
    public static MemorySegment LoadMenuW(MemorySegment hInstance, MemorySegment lpMenuName) {
        var mh$ = LoadMenuW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hInstance, lpMenuName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadMenuIndirectA$MH() {
        return RuntimeHelper.requireNonNull(constants$452.LoadMenuIndirectA$MH,"LoadMenuIndirectA");
    }
    /**
     * {@snippet :
     * HMENU LoadMenuIndirectA(const MENUTEMPLATEA* lpMenuTemplate);
     * }
     */
    public static MemorySegment LoadMenuIndirectA(MemorySegment lpMenuTemplate) {
        var mh$ = LoadMenuIndirectA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpMenuTemplate);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadMenuIndirectW$MH() {
        return RuntimeHelper.requireNonNull(constants$452.LoadMenuIndirectW$MH,"LoadMenuIndirectW");
    }
    /**
     * {@snippet :
     * HMENU LoadMenuIndirectW(const MENUTEMPLATEW* lpMenuTemplate);
     * }
     */
    public static MemorySegment LoadMenuIndirectW(MemorySegment lpMenuTemplate) {
        var mh$ = LoadMenuIndirectW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpMenuTemplate);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMenu$MH() {
        return RuntimeHelper.requireNonNull(constants$453.GetMenu$MH,"GetMenu");
    }
    /**
     * {@snippet :
     * HMENU GetMenu(HWND hWnd);
     * }
     */
    public static MemorySegment GetMenu(MemorySegment hWnd) {
        var mh$ = GetMenu$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetMenu$MH() {
        return RuntimeHelper.requireNonNull(constants$453.SetMenu$MH,"SetMenu");
    }
    /**
     * {@snippet :
     * BOOL SetMenu(HWND hWnd, HMENU hMenu);
     * }
     */
    public static int SetMenu(MemorySegment hWnd, MemorySegment hMenu) {
        var mh$ = SetMenu$MH();
        try {
            return (int)mh$.invokeExact(hWnd, hMenu);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ChangeMenuA$MH() {
        return RuntimeHelper.requireNonNull(constants$453.ChangeMenuA$MH,"ChangeMenuA");
    }
    /**
     * {@snippet :
     * BOOL ChangeMenuA(HMENU hMenu, UINT cmd, LPCSTR lpszNewItem, UINT cmdInsert, UINT flags);
     * }
     */
    public static int ChangeMenuA(MemorySegment hMenu, int cmd, MemorySegment lpszNewItem, int cmdInsert, int flags) {
        var mh$ = ChangeMenuA$MH();
        try {
            return (int)mh$.invokeExact(hMenu, cmd, lpszNewItem, cmdInsert, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ChangeMenuW$MH() {
        return RuntimeHelper.requireNonNull(constants$453.ChangeMenuW$MH,"ChangeMenuW");
    }
    /**
     * {@snippet :
     * BOOL ChangeMenuW(HMENU hMenu, UINT cmd, LPCWSTR lpszNewItem, UINT cmdInsert, UINT flags);
     * }
     */
    public static int ChangeMenuW(MemorySegment hMenu, int cmd, MemorySegment lpszNewItem, int cmdInsert, int flags) {
        var mh$ = ChangeMenuW$MH();
        try {
            return (int)mh$.invokeExact(hMenu, cmd, lpszNewItem, cmdInsert, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HiliteMenuItem$MH() {
        return RuntimeHelper.requireNonNull(constants$453.HiliteMenuItem$MH,"HiliteMenuItem");
    }
    /**
     * {@snippet :
     * BOOL HiliteMenuItem(HWND hWnd, HMENU hMenu, UINT uIDHiliteItem, UINT uHilite);
     * }
     */
    public static int HiliteMenuItem(MemorySegment hWnd, MemorySegment hMenu, int uIDHiliteItem, int uHilite) {
        var mh$ = HiliteMenuItem$MH();
        try {
            return (int)mh$.invokeExact(hWnd, hMenu, uIDHiliteItem, uHilite);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMenuStringA$MH() {
        return RuntimeHelper.requireNonNull(constants$453.GetMenuStringA$MH,"GetMenuStringA");
    }
    /**
     * {@snippet :
     * int GetMenuStringA(HMENU hMenu, UINT uIDItem, LPSTR lpString, int cchMax, UINT flags);
     * }
     */
    public static int GetMenuStringA(MemorySegment hMenu, int uIDItem, MemorySegment lpString, int cchMax, int flags) {
        var mh$ = GetMenuStringA$MH();
        try {
            return (int)mh$.invokeExact(hMenu, uIDItem, lpString, cchMax, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMenuStringW$MH() {
        return RuntimeHelper.requireNonNull(constants$454.GetMenuStringW$MH,"GetMenuStringW");
    }
    /**
     * {@snippet :
     * int GetMenuStringW(HMENU hMenu, UINT uIDItem, LPWSTR lpString, int cchMax, UINT flags);
     * }
     */
    public static int GetMenuStringW(MemorySegment hMenu, int uIDItem, MemorySegment lpString, int cchMax, int flags) {
        var mh$ = GetMenuStringW$MH();
        try {
            return (int)mh$.invokeExact(hMenu, uIDItem, lpString, cchMax, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMenuState$MH() {
        return RuntimeHelper.requireNonNull(constants$454.GetMenuState$MH,"GetMenuState");
    }
    /**
     * {@snippet :
     * UINT GetMenuState(HMENU hMenu, UINT uId, UINT uFlags);
     * }
     */
    public static int GetMenuState(MemorySegment hMenu, int uId, int uFlags) {
        var mh$ = GetMenuState$MH();
        try {
            return (int)mh$.invokeExact(hMenu, uId, uFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawMenuBar$MH() {
        return RuntimeHelper.requireNonNull(constants$454.DrawMenuBar$MH,"DrawMenuBar");
    }
    /**
     * {@snippet :
     * BOOL DrawMenuBar(HWND hWnd);
     * }
     */
    public static int DrawMenuBar(MemorySegment hWnd) {
        var mh$ = DrawMenuBar$MH();
        try {
            return (int)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSystemMenu$MH() {
        return RuntimeHelper.requireNonNull(constants$454.GetSystemMenu$MH,"GetSystemMenu");
    }
    /**
     * {@snippet :
     * HMENU GetSystemMenu(HWND hWnd, BOOL bRevert);
     * }
     */
    public static MemorySegment GetSystemMenu(MemorySegment hWnd, int bRevert) {
        var mh$ = GetSystemMenu$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hWnd, bRevert);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateMenu$MH() {
        return RuntimeHelper.requireNonNull(constants$454.CreateMenu$MH,"CreateMenu");
    }
    /**
     * {@snippet :
     * HMENU CreateMenu();
     * }
     */
    public static MemorySegment CreateMenu() {
        var mh$ = CreateMenu$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreatePopupMenu$MH() {
        return RuntimeHelper.requireNonNull(constants$454.CreatePopupMenu$MH,"CreatePopupMenu");
    }
    /**
     * {@snippet :
     * HMENU CreatePopupMenu();
     * }
     */
    public static MemorySegment CreatePopupMenu() {
        var mh$ = CreatePopupMenu$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DestroyMenu$MH() {
        return RuntimeHelper.requireNonNull(constants$455.DestroyMenu$MH,"DestroyMenu");
    }
    /**
     * {@snippet :
     * BOOL DestroyMenu(HMENU hMenu);
     * }
     */
    public static int DestroyMenu(MemorySegment hMenu) {
        var mh$ = DestroyMenu$MH();
        try {
            return (int)mh$.invokeExact(hMenu);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CheckMenuItem$MH() {
        return RuntimeHelper.requireNonNull(constants$455.CheckMenuItem$MH,"CheckMenuItem");
    }
    /**
     * {@snippet :
     * DWORD CheckMenuItem(HMENU hMenu, UINT uIDCheckItem, UINT uCheck);
     * }
     */
    public static int CheckMenuItem(MemorySegment hMenu, int uIDCheckItem, int uCheck) {
        var mh$ = CheckMenuItem$MH();
        try {
            return (int)mh$.invokeExact(hMenu, uIDCheckItem, uCheck);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnableMenuItem$MH() {
        return RuntimeHelper.requireNonNull(constants$455.EnableMenuItem$MH,"EnableMenuItem");
    }
    /**
     * {@snippet :
     * BOOL EnableMenuItem(HMENU hMenu, UINT uIDEnableItem, UINT uEnable);
     * }
     */
    public static int EnableMenuItem(MemorySegment hMenu, int uIDEnableItem, int uEnable) {
        var mh$ = EnableMenuItem$MH();
        try {
            return (int)mh$.invokeExact(hMenu, uIDEnableItem, uEnable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSubMenu$MH() {
        return RuntimeHelper.requireNonNull(constants$455.GetSubMenu$MH,"GetSubMenu");
    }
    /**
     * {@snippet :
     * HMENU GetSubMenu(HMENU hMenu, int nPos);
     * }
     */
    public static MemorySegment GetSubMenu(MemorySegment hMenu, int nPos) {
        var mh$ = GetSubMenu$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hMenu, nPos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMenuItemID$MH() {
        return RuntimeHelper.requireNonNull(constants$455.GetMenuItemID$MH,"GetMenuItemID");
    }
    /**
     * {@snippet :
     * UINT GetMenuItemID(HMENU hMenu, int nPos);
     * }
     */
    public static int GetMenuItemID(MemorySegment hMenu, int nPos) {
        var mh$ = GetMenuItemID$MH();
        try {
            return (int)mh$.invokeExact(hMenu, nPos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMenuItemCount$MH() {
        return RuntimeHelper.requireNonNull(constants$455.GetMenuItemCount$MH,"GetMenuItemCount");
    }
    /**
     * {@snippet :
     * int GetMenuItemCount(HMENU hMenu);
     * }
     */
    public static int GetMenuItemCount(MemorySegment hMenu) {
        var mh$ = GetMenuItemCount$MH();
        try {
            return (int)mh$.invokeExact(hMenu);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InsertMenuA$MH() {
        return RuntimeHelper.requireNonNull(constants$456.InsertMenuA$MH,"InsertMenuA");
    }
    /**
     * {@snippet :
     * BOOL InsertMenuA(HMENU hMenu, UINT uPosition, UINT uFlags, UINT_PTR uIDNewItem, LPCSTR lpNewItem);
     * }
     */
    public static int InsertMenuA(MemorySegment hMenu, int uPosition, int uFlags, long uIDNewItem, MemorySegment lpNewItem) {
        var mh$ = InsertMenuA$MH();
        try {
            return (int)mh$.invokeExact(hMenu, uPosition, uFlags, uIDNewItem, lpNewItem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InsertMenuW$MH() {
        return RuntimeHelper.requireNonNull(constants$456.InsertMenuW$MH,"InsertMenuW");
    }
    /**
     * {@snippet :
     * BOOL InsertMenuW(HMENU hMenu, UINT uPosition, UINT uFlags, UINT_PTR uIDNewItem, LPCWSTR lpNewItem);
     * }
     */
    public static int InsertMenuW(MemorySegment hMenu, int uPosition, int uFlags, long uIDNewItem, MemorySegment lpNewItem) {
        var mh$ = InsertMenuW$MH();
        try {
            return (int)mh$.invokeExact(hMenu, uPosition, uFlags, uIDNewItem, lpNewItem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AppendMenuA$MH() {
        return RuntimeHelper.requireNonNull(constants$456.AppendMenuA$MH,"AppendMenuA");
    }
    /**
     * {@snippet :
     * BOOL AppendMenuA(HMENU hMenu, UINT uFlags, UINT_PTR uIDNewItem, LPCSTR lpNewItem);
     * }
     */
    public static int AppendMenuA(MemorySegment hMenu, int uFlags, long uIDNewItem, MemorySegment lpNewItem) {
        var mh$ = AppendMenuA$MH();
        try {
            return (int)mh$.invokeExact(hMenu, uFlags, uIDNewItem, lpNewItem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AppendMenuW$MH() {
        return RuntimeHelper.requireNonNull(constants$456.AppendMenuW$MH,"AppendMenuW");
    }
    /**
     * {@snippet :
     * BOOL AppendMenuW(HMENU hMenu, UINT uFlags, UINT_PTR uIDNewItem, LPCWSTR lpNewItem);
     * }
     */
    public static int AppendMenuW(MemorySegment hMenu, int uFlags, long uIDNewItem, MemorySegment lpNewItem) {
        var mh$ = AppendMenuW$MH();
        try {
            return (int)mh$.invokeExact(hMenu, uFlags, uIDNewItem, lpNewItem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ModifyMenuA$MH() {
        return RuntimeHelper.requireNonNull(constants$456.ModifyMenuA$MH,"ModifyMenuA");
    }
    /**
     * {@snippet :
     * BOOL ModifyMenuA(HMENU hMnu, UINT uPosition, UINT uFlags, UINT_PTR uIDNewItem, LPCSTR lpNewItem);
     * }
     */
    public static int ModifyMenuA(MemorySegment hMnu, int uPosition, int uFlags, long uIDNewItem, MemorySegment lpNewItem) {
        var mh$ = ModifyMenuA$MH();
        try {
            return (int)mh$.invokeExact(hMnu, uPosition, uFlags, uIDNewItem, lpNewItem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ModifyMenuW$MH() {
        return RuntimeHelper.requireNonNull(constants$456.ModifyMenuW$MH,"ModifyMenuW");
    }
    /**
     * {@snippet :
     * BOOL ModifyMenuW(HMENU hMnu, UINT uPosition, UINT uFlags, UINT_PTR uIDNewItem, LPCWSTR lpNewItem);
     * }
     */
    public static int ModifyMenuW(MemorySegment hMnu, int uPosition, int uFlags, long uIDNewItem, MemorySegment lpNewItem) {
        var mh$ = ModifyMenuW$MH();
        try {
            return (int)mh$.invokeExact(hMnu, uPosition, uFlags, uIDNewItem, lpNewItem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RemoveMenu$MH() {
        return RuntimeHelper.requireNonNull(constants$457.RemoveMenu$MH,"RemoveMenu");
    }
    /**
     * {@snippet :
     * BOOL RemoveMenu(HMENU hMenu, UINT uPosition, UINT uFlags);
     * }
     */
    public static int RemoveMenu(MemorySegment hMenu, int uPosition, int uFlags) {
        var mh$ = RemoveMenu$MH();
        try {
            return (int)mh$.invokeExact(hMenu, uPosition, uFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeleteMenu$MH() {
        return RuntimeHelper.requireNonNull(constants$457.DeleteMenu$MH,"DeleteMenu");
    }
    /**
     * {@snippet :
     * BOOL DeleteMenu(HMENU hMenu, UINT uPosition, UINT uFlags);
     * }
     */
    public static int DeleteMenu(MemorySegment hMenu, int uPosition, int uFlags) {
        var mh$ = DeleteMenu$MH();
        try {
            return (int)mh$.invokeExact(hMenu, uPosition, uFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetMenuItemBitmaps$MH() {
        return RuntimeHelper.requireNonNull(constants$457.SetMenuItemBitmaps$MH,"SetMenuItemBitmaps");
    }
    /**
     * {@snippet :
     * BOOL SetMenuItemBitmaps(HMENU hMenu, UINT uPosition, UINT uFlags, HBITMAP hBitmapUnchecked, HBITMAP hBitmapChecked);
     * }
     */
    public static int SetMenuItemBitmaps(MemorySegment hMenu, int uPosition, int uFlags, MemorySegment hBitmapUnchecked, MemorySegment hBitmapChecked) {
        var mh$ = SetMenuItemBitmaps$MH();
        try {
            return (int)mh$.invokeExact(hMenu, uPosition, uFlags, hBitmapUnchecked, hBitmapChecked);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMenuCheckMarkDimensions$MH() {
        return RuntimeHelper.requireNonNull(constants$457.GetMenuCheckMarkDimensions$MH,"GetMenuCheckMarkDimensions");
    }
    /**
     * {@snippet :
     * LONG GetMenuCheckMarkDimensions();
     * }
     */
    public static int GetMenuCheckMarkDimensions() {
        var mh$ = GetMenuCheckMarkDimensions$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TrackPopupMenu$MH() {
        return RuntimeHelper.requireNonNull(constants$457.TrackPopupMenu$MH,"TrackPopupMenu");
    }
    /**
     * {@snippet :
     * BOOL TrackPopupMenu(HMENU hMenu, UINT uFlags, int x, int y, int nReserved, HWND hWnd, const RECT* prcRect);
     * }
     */
    public static int TrackPopupMenu(MemorySegment hMenu, int uFlags, int x, int y, int nReserved, MemorySegment hWnd, MemorySegment prcRect) {
        var mh$ = TrackPopupMenu$MH();
        try {
            return (int)mh$.invokeExact(hMenu, uFlags, x, y, nReserved, hWnd, prcRect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct tagTPMPARAMS* LPTPMPARAMS;
     * }
     */
    public static final OfAddress LPTPMPARAMS = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle TrackPopupMenuEx$MH() {
        return RuntimeHelper.requireNonNull(constants$457.TrackPopupMenuEx$MH,"TrackPopupMenuEx");
    }
    /**
     * {@snippet :
     * BOOL TrackPopupMenuEx(HMENU hMenu, UINT uFlags, int x, int y, HWND hwnd, LPTPMPARAMS lptpm);
     * }
     */
    public static int TrackPopupMenuEx(MemorySegment hMenu, int uFlags, int x, int y, MemorySegment hwnd, MemorySegment lptpm) {
        var mh$ = TrackPopupMenuEx$MH();
        try {
            return (int)mh$.invokeExact(hMenu, uFlags, x, y, hwnd, lptpm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CalculatePopupWindowPosition$MH() {
        return RuntimeHelper.requireNonNull(constants$458.CalculatePopupWindowPosition$MH,"CalculatePopupWindowPosition");
    }
    /**
     * {@snippet :
     * BOOL CalculatePopupWindowPosition(const POINT* anchorPoint, const SIZE* windowSize, UINT flags, RECT* excludeRect, RECT* popupWindowPosition);
     * }
     */
    public static int CalculatePopupWindowPosition(MemorySegment anchorPoint, MemorySegment windowSize, int flags, MemorySegment excludeRect, MemorySegment popupWindowPosition) {
        var mh$ = CalculatePopupWindowPosition$MH();
        try {
            return (int)mh$.invokeExact(anchorPoint, windowSize, flags, excludeRect, popupWindowPosition);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct tagMENUINFO* LPMENUINFO;
     * }
     */
    public static final OfAddress LPMENUINFO = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagMENUINFO* LPCMENUINFO;
     * }
     */
    public static final OfAddress LPCMENUINFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetMenuInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$458.GetMenuInfo$MH,"GetMenuInfo");
    }
    /**
     * {@snippet :
     * BOOL GetMenuInfo(HMENU, LPMENUINFO);
     * }
     */
    public static int GetMenuInfo(MemorySegment x0, MemorySegment x1) {
        var mh$ = GetMenuInfo$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetMenuInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$458.SetMenuInfo$MH,"SetMenuInfo");
    }
    /**
     * {@snippet :
     * BOOL SetMenuInfo(HMENU, LPCMENUINFO);
     * }
     */
    public static int SetMenuInfo(MemorySegment x0, MemorySegment x1) {
        var mh$ = SetMenuInfo$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EndMenu$MH() {
        return RuntimeHelper.requireNonNull(constants$458.EndMenu$MH,"EndMenu");
    }
    /**
     * {@snippet :
     * BOOL EndMenu();
     * }
     */
    public static int EndMenu() {
        var mh$ = EndMenu$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct tagMENUGETOBJECTINFO* PMENUGETOBJECTINFO;
     * }
     */
    public static final OfAddress PMENUGETOBJECTINFO = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagMENUITEMINFOA* LPMENUITEMINFOA;
     * }
     */
    public static final OfAddress LPMENUITEMINFOA = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagMENUITEMINFOW* LPMENUITEMINFOW;
     * }
     */
    public static final OfAddress LPMENUITEMINFOW = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagMENUITEMINFOA* LPMENUITEMINFO;
     * }
     */
    public static final OfAddress LPMENUITEMINFO = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagMENUITEMINFOA* LPCMENUITEMINFOA;
     * }
     */
    public static final OfAddress LPCMENUITEMINFOA = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagMENUITEMINFOW* LPCMENUITEMINFOW;
     * }
     */
    public static final OfAddress LPCMENUITEMINFOW = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagMENUITEMINFOA* LPCMENUITEMINFO;
     * }
     */
    public static final OfAddress LPCMENUITEMINFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle InsertMenuItemA$MH() {
        return RuntimeHelper.requireNonNull(constants$458.InsertMenuItemA$MH,"InsertMenuItemA");
    }
    /**
     * {@snippet :
     * BOOL InsertMenuItemA(HMENU hmenu, UINT item, BOOL fByPosition, LPCMENUITEMINFOA lpmi);
     * }
     */
    public static int InsertMenuItemA(MemorySegment hmenu, int item, int fByPosition, MemorySegment lpmi) {
        var mh$ = InsertMenuItemA$MH();
        try {
            return (int)mh$.invokeExact(hmenu, item, fByPosition, lpmi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InsertMenuItemW$MH() {
        return RuntimeHelper.requireNonNull(constants$458.InsertMenuItemW$MH,"InsertMenuItemW");
    }
    /**
     * {@snippet :
     * BOOL InsertMenuItemW(HMENU hmenu, UINT item, BOOL fByPosition, LPCMENUITEMINFOW lpmi);
     * }
     */
    public static int InsertMenuItemW(MemorySegment hmenu, int item, int fByPosition, MemorySegment lpmi) {
        var mh$ = InsertMenuItemW$MH();
        try {
            return (int)mh$.invokeExact(hmenu, item, fByPosition, lpmi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMenuItemInfoA$MH() {
        return RuntimeHelper.requireNonNull(constants$459.GetMenuItemInfoA$MH,"GetMenuItemInfoA");
    }
    /**
     * {@snippet :
     * BOOL GetMenuItemInfoA(HMENU hmenu, UINT item, BOOL fByPosition, LPMENUITEMINFOA lpmii);
     * }
     */
    public static int GetMenuItemInfoA(MemorySegment hmenu, int item, int fByPosition, MemorySegment lpmii) {
        var mh$ = GetMenuItemInfoA$MH();
        try {
            return (int)mh$.invokeExact(hmenu, item, fByPosition, lpmii);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMenuItemInfoW$MH() {
        return RuntimeHelper.requireNonNull(constants$459.GetMenuItemInfoW$MH,"GetMenuItemInfoW");
    }
    /**
     * {@snippet :
     * BOOL GetMenuItemInfoW(HMENU hmenu, UINT item, BOOL fByPosition, LPMENUITEMINFOW lpmii);
     * }
     */
    public static int GetMenuItemInfoW(MemorySegment hmenu, int item, int fByPosition, MemorySegment lpmii) {
        var mh$ = GetMenuItemInfoW$MH();
        try {
            return (int)mh$.invokeExact(hmenu, item, fByPosition, lpmii);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetMenuItemInfoA$MH() {
        return RuntimeHelper.requireNonNull(constants$459.SetMenuItemInfoA$MH,"SetMenuItemInfoA");
    }
    /**
     * {@snippet :
     * BOOL SetMenuItemInfoA(HMENU hmenu, UINT item, BOOL fByPositon, LPCMENUITEMINFOA lpmii);
     * }
     */
    public static int SetMenuItemInfoA(MemorySegment hmenu, int item, int fByPositon, MemorySegment lpmii) {
        var mh$ = SetMenuItemInfoA$MH();
        try {
            return (int)mh$.invokeExact(hmenu, item, fByPositon, lpmii);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetMenuItemInfoW$MH() {
        return RuntimeHelper.requireNonNull(constants$459.SetMenuItemInfoW$MH,"SetMenuItemInfoW");
    }
    /**
     * {@snippet :
     * BOOL SetMenuItemInfoW(HMENU hmenu, UINT item, BOOL fByPositon, LPCMENUITEMINFOW lpmii);
     * }
     */
    public static int SetMenuItemInfoW(MemorySegment hmenu, int item, int fByPositon, MemorySegment lpmii) {
        var mh$ = SetMenuItemInfoW$MH();
        try {
            return (int)mh$.invokeExact(hmenu, item, fByPositon, lpmii);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMenuDefaultItem$MH() {
        return RuntimeHelper.requireNonNull(constants$459.GetMenuDefaultItem$MH,"GetMenuDefaultItem");
    }
    /**
     * {@snippet :
     * UINT GetMenuDefaultItem(HMENU hMenu, UINT fByPos, UINT gmdiFlags);
     * }
     */
    public static int GetMenuDefaultItem(MemorySegment hMenu, int fByPos, int gmdiFlags) {
        var mh$ = GetMenuDefaultItem$MH();
        try {
            return (int)mh$.invokeExact(hMenu, fByPos, gmdiFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetMenuDefaultItem$MH() {
        return RuntimeHelper.requireNonNull(constants$459.SetMenuDefaultItem$MH,"SetMenuDefaultItem");
    }
    /**
     * {@snippet :
     * BOOL SetMenuDefaultItem(HMENU hMenu, UINT uItem, UINT fByPos);
     * }
     */
    public static int SetMenuDefaultItem(MemorySegment hMenu, int uItem, int fByPos) {
        var mh$ = SetMenuDefaultItem$MH();
        try {
            return (int)mh$.invokeExact(hMenu, uItem, fByPos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMenuItemRect$MH() {
        return RuntimeHelper.requireNonNull(constants$460.GetMenuItemRect$MH,"GetMenuItemRect");
    }
    /**
     * {@snippet :
     * BOOL GetMenuItemRect(HWND hWnd, HMENU hMenu, UINT uItem, LPRECT lprcItem);
     * }
     */
    public static int GetMenuItemRect(MemorySegment hWnd, MemorySegment hMenu, int uItem, MemorySegment lprcItem) {
        var mh$ = GetMenuItemRect$MH();
        try {
            return (int)mh$.invokeExact(hWnd, hMenu, uItem, lprcItem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MenuItemFromPoint$MH() {
        return RuntimeHelper.requireNonNull(constants$460.MenuItemFromPoint$MH,"MenuItemFromPoint");
    }
    /**
     * {@snippet :
     * int MenuItemFromPoint(HWND hWnd, HMENU hMenu, POINT ptScreen);
     * }
     */
    public static int MenuItemFromPoint(MemorySegment hWnd, MemorySegment hMenu, MemorySegment ptScreen) {
        var mh$ = MenuItemFromPoint$MH();
        try {
            return (int)mh$.invokeExact(hWnd, hMenu, ptScreen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct tagDROPSTRUCT* PDROPSTRUCT;
     * }
     */
    public static final OfAddress PDROPSTRUCT = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagDROPSTRUCT* LPDROPSTRUCT;
     * }
     */
    public static final OfAddress LPDROPSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle DragObject$MH() {
        return RuntimeHelper.requireNonNull(constants$460.DragObject$MH,"DragObject");
    }
    /**
     * {@snippet :
     * DWORD DragObject(HWND hwndParent, HWND hwndFrom, UINT fmt, ULONG_PTR data, HCURSOR hcur);
     * }
     */
    public static int DragObject(MemorySegment hwndParent, MemorySegment hwndFrom, int fmt, long data, MemorySegment hcur) {
        var mh$ = DragObject$MH();
        try {
            return (int)mh$.invokeExact(hwndParent, hwndFrom, fmt, data, hcur);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DragDetect$MH() {
        return RuntimeHelper.requireNonNull(constants$460.DragDetect$MH,"DragDetect");
    }
    /**
     * {@snippet :
     * BOOL DragDetect(HWND hwnd, POINT pt);
     * }
     */
    public static int DragDetect(MemorySegment hwnd, MemorySegment pt) {
        var mh$ = DragDetect$MH();
        try {
            return (int)mh$.invokeExact(hwnd, pt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawIcon$MH() {
        return RuntimeHelper.requireNonNull(constants$460.DrawIcon$MH,"DrawIcon");
    }
    /**
     * {@snippet :
     * BOOL DrawIcon(HDC hDC, int X, int Y, HICON hIcon);
     * }
     */
    public static int DrawIcon(MemorySegment hDC, int X, int Y, MemorySegment hIcon) {
        var mh$ = DrawIcon$MH();
        try {
            return (int)mh$.invokeExact(hDC, X, Y, hIcon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct tagDRAWTEXTPARAMS* LPDRAWTEXTPARAMS;
     * }
     */
    public static final OfAddress LPDRAWTEXTPARAMS = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle DrawTextA$MH() {
        return RuntimeHelper.requireNonNull(constants$460.DrawTextA$MH,"DrawTextA");
    }
    /**
     * {@snippet :
     * int DrawTextA(HDC hdc, LPCSTR lpchText, int cchText, LPRECT lprc, UINT format);
     * }
     */
    public static int DrawTextA(MemorySegment hdc, MemorySegment lpchText, int cchText, MemorySegment lprc, int format) {
        var mh$ = DrawTextA$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpchText, cchText, lprc, format);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawTextW$MH() {
        return RuntimeHelper.requireNonNull(constants$461.DrawTextW$MH,"DrawTextW");
    }
    /**
     * {@snippet :
     * int DrawTextW(HDC hdc, LPCWSTR lpchText, int cchText, LPRECT lprc, UINT format);
     * }
     */
    public static int DrawTextW(MemorySegment hdc, MemorySegment lpchText, int cchText, MemorySegment lprc, int format) {
        var mh$ = DrawTextW$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpchText, cchText, lprc, format);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawTextExA$MH() {
        return RuntimeHelper.requireNonNull(constants$461.DrawTextExA$MH,"DrawTextExA");
    }
    /**
     * {@snippet :
     * int DrawTextExA(HDC hdc, LPSTR lpchText, int cchText, LPRECT lprc, UINT format, LPDRAWTEXTPARAMS lpdtp);
     * }
     */
    public static int DrawTextExA(MemorySegment hdc, MemorySegment lpchText, int cchText, MemorySegment lprc, int format, MemorySegment lpdtp) {
        var mh$ = DrawTextExA$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpchText, cchText, lprc, format, lpdtp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawTextExW$MH() {
        return RuntimeHelper.requireNonNull(constants$461.DrawTextExW$MH,"DrawTextExW");
    }
    /**
     * {@snippet :
     * int DrawTextExW(HDC hdc, LPWSTR lpchText, int cchText, LPRECT lprc, UINT format, LPDRAWTEXTPARAMS lpdtp);
     * }
     */
    public static int DrawTextExW(MemorySegment hdc, MemorySegment lpchText, int cchText, MemorySegment lprc, int format, MemorySegment lpdtp) {
        var mh$ = DrawTextExW$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpchText, cchText, lprc, format, lpdtp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GrayStringA$MH() {
        return RuntimeHelper.requireNonNull(constants$461.GrayStringA$MH,"GrayStringA");
    }
    /**
     * {@snippet :
     * BOOL GrayStringA(HDC hDC, HBRUSH hBrush, GRAYSTRINGPROC lpOutputFunc, LPARAM lpData, int nCount, int X, int Y, int nWidth, int nHeight);
     * }
     */
    public static int GrayStringA(MemorySegment hDC, MemorySegment hBrush, MemorySegment lpOutputFunc, long lpData, int nCount, int X, int Y, int nWidth, int nHeight) {
        var mh$ = GrayStringA$MH();
        try {
            return (int)mh$.invokeExact(hDC, hBrush, lpOutputFunc, lpData, nCount, X, Y, nWidth, nHeight);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GrayStringW$MH() {
        return RuntimeHelper.requireNonNull(constants$461.GrayStringW$MH,"GrayStringW");
    }
    /**
     * {@snippet :
     * BOOL GrayStringW(HDC hDC, HBRUSH hBrush, GRAYSTRINGPROC lpOutputFunc, LPARAM lpData, int nCount, int X, int Y, int nWidth, int nHeight);
     * }
     */
    public static int GrayStringW(MemorySegment hDC, MemorySegment hBrush, MemorySegment lpOutputFunc, long lpData, int nCount, int X, int Y, int nWidth, int nHeight) {
        var mh$ = GrayStringW$MH();
        try {
            return (int)mh$.invokeExact(hDC, hBrush, lpOutputFunc, lpData, nCount, X, Y, nWidth, nHeight);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawStateA$MH() {
        return RuntimeHelper.requireNonNull(constants$461.DrawStateA$MH,"DrawStateA");
    }
    /**
     * {@snippet :
     * BOOL DrawStateA(HDC hdc, HBRUSH hbrFore, DRAWSTATEPROC qfnCallBack, LPARAM lData, WPARAM wData, int x, int y, int cx, int cy, UINT uFlags);
     * }
     */
    public static int DrawStateA(MemorySegment hdc, MemorySegment hbrFore, MemorySegment qfnCallBack, long lData, long wData, int x, int y, int cx, int cy, int uFlags) {
        var mh$ = DrawStateA$MH();
        try {
            return (int)mh$.invokeExact(hdc, hbrFore, qfnCallBack, lData, wData, x, y, cx, cy, uFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawStateW$MH() {
        return RuntimeHelper.requireNonNull(constants$462.DrawStateW$MH,"DrawStateW");
    }
    /**
     * {@snippet :
     * BOOL DrawStateW(HDC hdc, HBRUSH hbrFore, DRAWSTATEPROC qfnCallBack, LPARAM lData, WPARAM wData, int x, int y, int cx, int cy, UINT uFlags);
     * }
     */
    public static int DrawStateW(MemorySegment hdc, MemorySegment hbrFore, MemorySegment qfnCallBack, long lData, long wData, int x, int y, int cx, int cy, int uFlags) {
        var mh$ = DrawStateW$MH();
        try {
            return (int)mh$.invokeExact(hdc, hbrFore, qfnCallBack, lData, wData, x, y, cx, cy, uFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TabbedTextOutA$MH() {
        return RuntimeHelper.requireNonNull(constants$462.TabbedTextOutA$MH,"TabbedTextOutA");
    }
    /**
     * {@snippet :
     * LONG TabbedTextOutA(HDC hdc, int x, int y, LPCSTR lpString, int chCount, int nTabPositions, const INT* lpnTabStopPositions, int nTabOrigin);
     * }
     */
    public static int TabbedTextOutA(MemorySegment hdc, int x, int y, MemorySegment lpString, int chCount, int nTabPositions, MemorySegment lpnTabStopPositions, int nTabOrigin) {
        var mh$ = TabbedTextOutA$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, lpString, chCount, nTabPositions, lpnTabStopPositions, nTabOrigin);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TabbedTextOutW$MH() {
        return RuntimeHelper.requireNonNull(constants$462.TabbedTextOutW$MH,"TabbedTextOutW");
    }
    /**
     * {@snippet :
     * LONG TabbedTextOutW(HDC hdc, int x, int y, LPCWSTR lpString, int chCount, int nTabPositions, const INT* lpnTabStopPositions, int nTabOrigin);
     * }
     */
    public static int TabbedTextOutW(MemorySegment hdc, int x, int y, MemorySegment lpString, int chCount, int nTabPositions, MemorySegment lpnTabStopPositions, int nTabOrigin) {
        var mh$ = TabbedTextOutW$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, lpString, chCount, nTabPositions, lpnTabStopPositions, nTabOrigin);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTabbedTextExtentA$MH() {
        return RuntimeHelper.requireNonNull(constants$462.GetTabbedTextExtentA$MH,"GetTabbedTextExtentA");
    }
    /**
     * {@snippet :
     * DWORD GetTabbedTextExtentA(HDC hdc, LPCSTR lpString, int chCount, int nTabPositions, const INT* lpnTabStopPositions);
     * }
     */
    public static int GetTabbedTextExtentA(MemorySegment hdc, MemorySegment lpString, int chCount, int nTabPositions, MemorySegment lpnTabStopPositions) {
        var mh$ = GetTabbedTextExtentA$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpString, chCount, nTabPositions, lpnTabStopPositions);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTabbedTextExtentW$MH() {
        return RuntimeHelper.requireNonNull(constants$462.GetTabbedTextExtentW$MH,"GetTabbedTextExtentW");
    }
    /**
     * {@snippet :
     * DWORD GetTabbedTextExtentW(HDC hdc, LPCWSTR lpString, int chCount, int nTabPositions, const INT* lpnTabStopPositions);
     * }
     */
    public static int GetTabbedTextExtentW(MemorySegment hdc, MemorySegment lpString, int chCount, int nTabPositions, MemorySegment lpnTabStopPositions) {
        var mh$ = GetTabbedTextExtentW$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpString, chCount, nTabPositions, lpnTabStopPositions);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UpdateWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$462.UpdateWindow$MH,"UpdateWindow");
    }
    /**
     * {@snippet :
     * BOOL UpdateWindow(HWND hWnd);
     * }
     */
    public static int UpdateWindow(MemorySegment hWnd) {
        var mh$ = UpdateWindow$MH();
        try {
            return (int)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetActiveWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$463.SetActiveWindow$MH,"SetActiveWindow");
    }
    /**
     * {@snippet :
     * HWND SetActiveWindow(HWND hWnd);
     * }
     */
    public static MemorySegment SetActiveWindow(MemorySegment hWnd) {
        var mh$ = SetActiveWindow$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetForegroundWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$463.GetForegroundWindow$MH,"GetForegroundWindow");
    }
    /**
     * {@snippet :
     * HWND GetForegroundWindow();
     * }
     */
    public static MemorySegment GetForegroundWindow() {
        var mh$ = GetForegroundWindow$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PaintDesktop$MH() {
        return RuntimeHelper.requireNonNull(constants$463.PaintDesktop$MH,"PaintDesktop");
    }
    /**
     * {@snippet :
     * BOOL PaintDesktop(HDC hdc);
     * }
     */
    public static int PaintDesktop(MemorySegment hdc) {
        var mh$ = PaintDesktop$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SwitchToThisWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$463.SwitchToThisWindow$MH,"SwitchToThisWindow");
    }
    /**
     * {@snippet :
     * void SwitchToThisWindow(HWND hwnd, BOOL fUnknown);
     * }
     */
    public static void SwitchToThisWindow(MemorySegment hwnd, int fUnknown) {
        var mh$ = SwitchToThisWindow$MH();
        try {
            mh$.invokeExact(hwnd, fUnknown);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetForegroundWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$463.SetForegroundWindow$MH,"SetForegroundWindow");
    }
    /**
     * {@snippet :
     * BOOL SetForegroundWindow(HWND hWnd);
     * }
     */
    public static int SetForegroundWindow(MemorySegment hWnd) {
        var mh$ = SetForegroundWindow$MH();
        try {
            return (int)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AllowSetForegroundWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$463.AllowSetForegroundWindow$MH,"AllowSetForegroundWindow");
    }
    /**
     * {@snippet :
     * BOOL AllowSetForegroundWindow(DWORD dwProcessId);
     * }
     */
    public static int AllowSetForegroundWindow(int dwProcessId) {
        var mh$ = AllowSetForegroundWindow$MH();
        try {
            return (int)mh$.invokeExact(dwProcessId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LockSetForegroundWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$464.LockSetForegroundWindow$MH,"LockSetForegroundWindow");
    }
    /**
     * {@snippet :
     * BOOL LockSetForegroundWindow(UINT uLockCode);
     * }
     */
    public static int LockSetForegroundWindow(int uLockCode) {
        var mh$ = LockSetForegroundWindow$MH();
        try {
            return (int)mh$.invokeExact(uLockCode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WindowFromDC$MH() {
        return RuntimeHelper.requireNonNull(constants$464.WindowFromDC$MH,"WindowFromDC");
    }
    /**
     * {@snippet :
     * HWND WindowFromDC(HDC hDC);
     * }
     */
    public static MemorySegment WindowFromDC(MemorySegment hDC) {
        var mh$ = WindowFromDC$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hDC);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDC$MH() {
        return RuntimeHelper.requireNonNull(constants$464.GetDC$MH,"GetDC");
    }
    /**
     * {@snippet :
     * HDC GetDC(HWND hWnd);
     * }
     */
    public static MemorySegment GetDC(MemorySegment hWnd) {
        var mh$ = GetDC$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDCEx$MH() {
        return RuntimeHelper.requireNonNull(constants$464.GetDCEx$MH,"GetDCEx");
    }
    /**
     * {@snippet :
     * HDC GetDCEx(HWND hWnd, HRGN hrgnClip, DWORD flags);
     * }
     */
    public static MemorySegment GetDCEx(MemorySegment hWnd, MemorySegment hrgnClip, int flags) {
        var mh$ = GetDCEx$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hWnd, hrgnClip, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWindowDC$MH() {
        return RuntimeHelper.requireNonNull(constants$464.GetWindowDC$MH,"GetWindowDC");
    }
    /**
     * {@snippet :
     * HDC GetWindowDC(HWND hWnd);
     * }
     */
    public static MemorySegment GetWindowDC(MemorySegment hWnd) {
        var mh$ = GetWindowDC$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReleaseDC$MH() {
        return RuntimeHelper.requireNonNull(constants$464.ReleaseDC$MH,"ReleaseDC");
    }
    /**
     * {@snippet :
     * int ReleaseDC(HWND hWnd, HDC hDC);
     * }
     */
    public static int ReleaseDC(MemorySegment hWnd, MemorySegment hDC) {
        var mh$ = ReleaseDC$MH();
        try {
            return (int)mh$.invokeExact(hWnd, hDC);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BeginPaint$MH() {
        return RuntimeHelper.requireNonNull(constants$465.BeginPaint$MH,"BeginPaint");
    }
    /**
     * {@snippet :
     * HDC BeginPaint(HWND hWnd, LPPAINTSTRUCT lpPaint);
     * }
     */
    public static MemorySegment BeginPaint(MemorySegment hWnd, MemorySegment lpPaint) {
        var mh$ = BeginPaint$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hWnd, lpPaint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EndPaint$MH() {
        return RuntimeHelper.requireNonNull(constants$465.EndPaint$MH,"EndPaint");
    }
    /**
     * {@snippet :
     * BOOL EndPaint(HWND hWnd, const PAINTSTRUCT* lpPaint);
     * }
     */
    public static int EndPaint(MemorySegment hWnd, MemorySegment lpPaint) {
        var mh$ = EndPaint$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpPaint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetUpdateRect$MH() {
        return RuntimeHelper.requireNonNull(constants$465.GetUpdateRect$MH,"GetUpdateRect");
    }
    /**
     * {@snippet :
     * BOOL GetUpdateRect(HWND hWnd, LPRECT lpRect, BOOL bErase);
     * }
     */
    public static int GetUpdateRect(MemorySegment hWnd, MemorySegment lpRect, int bErase) {
        var mh$ = GetUpdateRect$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpRect, bErase);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetUpdateRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$465.GetUpdateRgn$MH,"GetUpdateRgn");
    }
    /**
     * {@snippet :
     * int GetUpdateRgn(HWND hWnd, HRGN hRgn, BOOL bErase);
     * }
     */
    public static int GetUpdateRgn(MemorySegment hWnd, MemorySegment hRgn, int bErase) {
        var mh$ = GetUpdateRgn$MH();
        try {
            return (int)mh$.invokeExact(hWnd, hRgn, bErase);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWindowRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$465.SetWindowRgn$MH,"SetWindowRgn");
    }
    /**
     * {@snippet :
     * int SetWindowRgn(HWND hWnd, HRGN hRgn, BOOL bRedraw);
     * }
     */
    public static int SetWindowRgn(MemorySegment hWnd, MemorySegment hRgn, int bRedraw) {
        var mh$ = SetWindowRgn$MH();
        try {
            return (int)mh$.invokeExact(hWnd, hRgn, bRedraw);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWindowRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$465.GetWindowRgn$MH,"GetWindowRgn");
    }
    /**
     * {@snippet :
     * int GetWindowRgn(HWND hWnd, HRGN hRgn);
     * }
     */
    public static int GetWindowRgn(MemorySegment hWnd, MemorySegment hRgn) {
        var mh$ = GetWindowRgn$MH();
        try {
            return (int)mh$.invokeExact(hWnd, hRgn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWindowRgnBox$MH() {
        return RuntimeHelper.requireNonNull(constants$466.GetWindowRgnBox$MH,"GetWindowRgnBox");
    }
    /**
     * {@snippet :
     * int GetWindowRgnBox(HWND hWnd, LPRECT lprc);
     * }
     */
    public static int GetWindowRgnBox(MemorySegment hWnd, MemorySegment lprc) {
        var mh$ = GetWindowRgnBox$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lprc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExcludeUpdateRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$466.ExcludeUpdateRgn$MH,"ExcludeUpdateRgn");
    }
    /**
     * {@snippet :
     * int ExcludeUpdateRgn(HDC hDC, HWND hWnd);
     * }
     */
    public static int ExcludeUpdateRgn(MemorySegment hDC, MemorySegment hWnd) {
        var mh$ = ExcludeUpdateRgn$MH();
        try {
            return (int)mh$.invokeExact(hDC, hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InvalidateRect$MH() {
        return RuntimeHelper.requireNonNull(constants$466.InvalidateRect$MH,"InvalidateRect");
    }
    /**
     * {@snippet :
     * BOOL InvalidateRect(HWND hWnd, const RECT* lpRect, BOOL bErase);
     * }
     */
    public static int InvalidateRect(MemorySegment hWnd, MemorySegment lpRect, int bErase) {
        var mh$ = InvalidateRect$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpRect, bErase);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ValidateRect$MH() {
        return RuntimeHelper.requireNonNull(constants$466.ValidateRect$MH,"ValidateRect");
    }
    /**
     * {@snippet :
     * BOOL ValidateRect(HWND hWnd, const RECT* lpRect);
     * }
     */
    public static int ValidateRect(MemorySegment hWnd, MemorySegment lpRect) {
        var mh$ = ValidateRect$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpRect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InvalidateRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$466.InvalidateRgn$MH,"InvalidateRgn");
    }
    /**
     * {@snippet :
     * BOOL InvalidateRgn(HWND hWnd, HRGN hRgn, BOOL bErase);
     * }
     */
    public static int InvalidateRgn(MemorySegment hWnd, MemorySegment hRgn, int bErase) {
        var mh$ = InvalidateRgn$MH();
        try {
            return (int)mh$.invokeExact(hWnd, hRgn, bErase);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ValidateRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$466.ValidateRgn$MH,"ValidateRgn");
    }
    /**
     * {@snippet :
     * BOOL ValidateRgn(HWND hWnd, HRGN hRgn);
     * }
     */
    public static int ValidateRgn(MemorySegment hWnd, MemorySegment hRgn) {
        var mh$ = ValidateRgn$MH();
        try {
            return (int)mh$.invokeExact(hWnd, hRgn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RedrawWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$467.RedrawWindow$MH,"RedrawWindow");
    }
    /**
     * {@snippet :
     * BOOL RedrawWindow(HWND hWnd, const RECT* lprcUpdate, HRGN hrgnUpdate, UINT flags);
     * }
     */
    public static int RedrawWindow(MemorySegment hWnd, MemorySegment lprcUpdate, MemorySegment hrgnUpdate, int flags) {
        var mh$ = RedrawWindow$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lprcUpdate, hrgnUpdate, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LockWindowUpdate$MH() {
        return RuntimeHelper.requireNonNull(constants$467.LockWindowUpdate$MH,"LockWindowUpdate");
    }
    /**
     * {@snippet :
     * BOOL LockWindowUpdate(HWND hWndLock);
     * }
     */
    public static int LockWindowUpdate(MemorySegment hWndLock) {
        var mh$ = LockWindowUpdate$MH();
        try {
            return (int)mh$.invokeExact(hWndLock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ScrollWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$467.ScrollWindow$MH,"ScrollWindow");
    }
    /**
     * {@snippet :
     * BOOL ScrollWindow(HWND hWnd, int XAmount, int YAmount, const RECT* lpRect, const RECT* lpClipRect);
     * }
     */
    public static int ScrollWindow(MemorySegment hWnd, int XAmount, int YAmount, MemorySegment lpRect, MemorySegment lpClipRect) {
        var mh$ = ScrollWindow$MH();
        try {
            return (int)mh$.invokeExact(hWnd, XAmount, YAmount, lpRect, lpClipRect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ScrollDC$MH() {
        return RuntimeHelper.requireNonNull(constants$467.ScrollDC$MH,"ScrollDC");
    }
    /**
     * {@snippet :
     * BOOL ScrollDC(HDC hDC, int dx, int dy, const RECT* lprcScroll, const RECT* lprcClip, HRGN hrgnUpdate, LPRECT lprcUpdate);
     * }
     */
    public static int ScrollDC(MemorySegment hDC, int dx, int dy, MemorySegment lprcScroll, MemorySegment lprcClip, MemorySegment hrgnUpdate, MemorySegment lprcUpdate) {
        var mh$ = ScrollDC$MH();
        try {
            return (int)mh$.invokeExact(hDC, dx, dy, lprcScroll, lprcClip, hrgnUpdate, lprcUpdate);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ScrollWindowEx$MH() {
        return RuntimeHelper.requireNonNull(constants$467.ScrollWindowEx$MH,"ScrollWindowEx");
    }
    /**
     * {@snippet :
     * int ScrollWindowEx(HWND hWnd, int dx, int dy, const RECT* prcScroll, const RECT* prcClip, HRGN hrgnUpdate, LPRECT prcUpdate, UINT flags);
     * }
     */
    public static int ScrollWindowEx(MemorySegment hWnd, int dx, int dy, MemorySegment prcScroll, MemorySegment prcClip, MemorySegment hrgnUpdate, MemorySegment prcUpdate, int flags) {
        var mh$ = ScrollWindowEx$MH();
        try {
            return (int)mh$.invokeExact(hWnd, dx, dy, prcScroll, prcClip, hrgnUpdate, prcUpdate, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetScrollPos$MH() {
        return RuntimeHelper.requireNonNull(constants$467.SetScrollPos$MH,"SetScrollPos");
    }
    /**
     * {@snippet :
     * int SetScrollPos(HWND hWnd, int nBar, int nPos, BOOL bRedraw);
     * }
     */
    public static int SetScrollPos(MemorySegment hWnd, int nBar, int nPos, int bRedraw) {
        var mh$ = SetScrollPos$MH();
        try {
            return (int)mh$.invokeExact(hWnd, nBar, nPos, bRedraw);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetScrollPos$MH() {
        return RuntimeHelper.requireNonNull(constants$468.GetScrollPos$MH,"GetScrollPos");
    }
    /**
     * {@snippet :
     * int GetScrollPos(HWND hWnd, int nBar);
     * }
     */
    public static int GetScrollPos(MemorySegment hWnd, int nBar) {
        var mh$ = GetScrollPos$MH();
        try {
            return (int)mh$.invokeExact(hWnd, nBar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetScrollRange$MH() {
        return RuntimeHelper.requireNonNull(constants$468.SetScrollRange$MH,"SetScrollRange");
    }
    /**
     * {@snippet :
     * BOOL SetScrollRange(HWND hWnd, int nBar, int nMinPos, int nMaxPos, BOOL bRedraw);
     * }
     */
    public static int SetScrollRange(MemorySegment hWnd, int nBar, int nMinPos, int nMaxPos, int bRedraw) {
        var mh$ = SetScrollRange$MH();
        try {
            return (int)mh$.invokeExact(hWnd, nBar, nMinPos, nMaxPos, bRedraw);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetScrollRange$MH() {
        return RuntimeHelper.requireNonNull(constants$468.GetScrollRange$MH,"GetScrollRange");
    }
    /**
     * {@snippet :
     * BOOL GetScrollRange(HWND hWnd, int nBar, LPINT lpMinPos, LPINT lpMaxPos);
     * }
     */
    public static int GetScrollRange(MemorySegment hWnd, int nBar, MemorySegment lpMinPos, MemorySegment lpMaxPos) {
        var mh$ = GetScrollRange$MH();
        try {
            return (int)mh$.invokeExact(hWnd, nBar, lpMinPos, lpMaxPos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ShowScrollBar$MH() {
        return RuntimeHelper.requireNonNull(constants$468.ShowScrollBar$MH,"ShowScrollBar");
    }
    /**
     * {@snippet :
     * BOOL ShowScrollBar(HWND hWnd, int wBar, BOOL bShow);
     * }
     */
    public static int ShowScrollBar(MemorySegment hWnd, int wBar, int bShow) {
        var mh$ = ShowScrollBar$MH();
        try {
            return (int)mh$.invokeExact(hWnd, wBar, bShow);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnableScrollBar$MH() {
        return RuntimeHelper.requireNonNull(constants$468.EnableScrollBar$MH,"EnableScrollBar");
    }
    /**
     * {@snippet :
     * BOOL EnableScrollBar(HWND hWnd, UINT wSBflags, UINT wArrows);
     * }
     */
    public static int EnableScrollBar(MemorySegment hWnd, int wSBflags, int wArrows) {
        var mh$ = EnableScrollBar$MH();
        try {
            return (int)mh$.invokeExact(hWnd, wSBflags, wArrows);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetPropA$MH() {
        return RuntimeHelper.requireNonNull(constants$468.SetPropA$MH,"SetPropA");
    }
    /**
     * {@snippet :
     * BOOL SetPropA(HWND hWnd, LPCSTR lpString, HANDLE hData);
     * }
     */
    public static int SetPropA(MemorySegment hWnd, MemorySegment lpString, MemorySegment hData) {
        var mh$ = SetPropA$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpString, hData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetPropW$MH() {
        return RuntimeHelper.requireNonNull(constants$469.SetPropW$MH,"SetPropW");
    }
    /**
     * {@snippet :
     * BOOL SetPropW(HWND hWnd, LPCWSTR lpString, HANDLE hData);
     * }
     */
    public static int SetPropW(MemorySegment hWnd, MemorySegment lpString, MemorySegment hData) {
        var mh$ = SetPropW$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpString, hData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPropA$MH() {
        return RuntimeHelper.requireNonNull(constants$469.GetPropA$MH,"GetPropA");
    }
    /**
     * {@snippet :
     * HANDLE GetPropA(HWND hWnd, LPCSTR lpString);
     * }
     */
    public static MemorySegment GetPropA(MemorySegment hWnd, MemorySegment lpString) {
        var mh$ = GetPropA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hWnd, lpString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPropW$MH() {
        return RuntimeHelper.requireNonNull(constants$469.GetPropW$MH,"GetPropW");
    }
    /**
     * {@snippet :
     * HANDLE GetPropW(HWND hWnd, LPCWSTR lpString);
     * }
     */
    public static MemorySegment GetPropW(MemorySegment hWnd, MemorySegment lpString) {
        var mh$ = GetPropW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hWnd, lpString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RemovePropA$MH() {
        return RuntimeHelper.requireNonNull(constants$469.RemovePropA$MH,"RemovePropA");
    }
    /**
     * {@snippet :
     * HANDLE RemovePropA(HWND hWnd, LPCSTR lpString);
     * }
     */
    public static MemorySegment RemovePropA(MemorySegment hWnd, MemorySegment lpString) {
        var mh$ = RemovePropA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hWnd, lpString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RemovePropW$MH() {
        return RuntimeHelper.requireNonNull(constants$469.RemovePropW$MH,"RemovePropW");
    }
    /**
     * {@snippet :
     * HANDLE RemovePropW(HWND hWnd, LPCWSTR lpString);
     * }
     */
    public static MemorySegment RemovePropW(MemorySegment hWnd, MemorySegment lpString) {
        var mh$ = RemovePropW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hWnd, lpString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumPropsExA$MH() {
        return RuntimeHelper.requireNonNull(constants$469.EnumPropsExA$MH,"EnumPropsExA");
    }
    /**
     * {@snippet :
     * int EnumPropsExA(HWND hWnd, PROPENUMPROCEXA lpEnumFunc, LPARAM lParam);
     * }
     */
    public static int EnumPropsExA(MemorySegment hWnd, MemorySegment lpEnumFunc, long lParam) {
        var mh$ = EnumPropsExA$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpEnumFunc, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumPropsExW$MH() {
        return RuntimeHelper.requireNonNull(constants$470.EnumPropsExW$MH,"EnumPropsExW");
    }
    /**
     * {@snippet :
     * int EnumPropsExW(HWND hWnd, PROPENUMPROCEXW lpEnumFunc, LPARAM lParam);
     * }
     */
    public static int EnumPropsExW(MemorySegment hWnd, MemorySegment lpEnumFunc, long lParam) {
        var mh$ = EnumPropsExW$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpEnumFunc, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumPropsA$MH() {
        return RuntimeHelper.requireNonNull(constants$470.EnumPropsA$MH,"EnumPropsA");
    }
    /**
     * {@snippet :
     * int EnumPropsA(HWND hWnd, PROPENUMPROCA lpEnumFunc);
     * }
     */
    public static int EnumPropsA(MemorySegment hWnd, MemorySegment lpEnumFunc) {
        var mh$ = EnumPropsA$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpEnumFunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumPropsW$MH() {
        return RuntimeHelper.requireNonNull(constants$470.EnumPropsW$MH,"EnumPropsW");
    }
    /**
     * {@snippet :
     * int EnumPropsW(HWND hWnd, PROPENUMPROCW lpEnumFunc);
     * }
     */
    public static int EnumPropsW(MemorySegment hWnd, MemorySegment lpEnumFunc) {
        var mh$ = EnumPropsW$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpEnumFunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWindowTextA$MH() {
        return RuntimeHelper.requireNonNull(constants$470.SetWindowTextA$MH,"SetWindowTextA");
    }
    /**
     * {@snippet :
     * BOOL SetWindowTextA(HWND hWnd, LPCSTR lpString);
     * }
     */
    public static int SetWindowTextA(MemorySegment hWnd, MemorySegment lpString) {
        var mh$ = SetWindowTextA$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWindowTextW$MH() {
        return RuntimeHelper.requireNonNull(constants$470.SetWindowTextW$MH,"SetWindowTextW");
    }
    /**
     * {@snippet :
     * BOOL SetWindowTextW(HWND hWnd, LPCWSTR lpString);
     * }
     */
    public static int SetWindowTextW(MemorySegment hWnd, MemorySegment lpString) {
        var mh$ = SetWindowTextW$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWindowTextA$MH() {
        return RuntimeHelper.requireNonNull(constants$470.GetWindowTextA$MH,"GetWindowTextA");
    }
    /**
     * {@snippet :
     * int GetWindowTextA(HWND hWnd, LPSTR lpString, int nMaxCount);
     * }
     */
    public static int GetWindowTextA(MemorySegment hWnd, MemorySegment lpString, int nMaxCount) {
        var mh$ = GetWindowTextA$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpString, nMaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWindowTextW$MH() {
        return RuntimeHelper.requireNonNull(constants$471.GetWindowTextW$MH,"GetWindowTextW");
    }
    /**
     * {@snippet :
     * int GetWindowTextW(HWND hWnd, LPWSTR lpString, int nMaxCount);
     * }
     */
    public static int GetWindowTextW(MemorySegment hWnd, MemorySegment lpString, int nMaxCount) {
        var mh$ = GetWindowTextW$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpString, nMaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWindowTextLengthA$MH() {
        return RuntimeHelper.requireNonNull(constants$471.GetWindowTextLengthA$MH,"GetWindowTextLengthA");
    }
    /**
     * {@snippet :
     * int GetWindowTextLengthA(HWND hWnd);
     * }
     */
    public static int GetWindowTextLengthA(MemorySegment hWnd) {
        var mh$ = GetWindowTextLengthA$MH();
        try {
            return (int)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWindowTextLengthW$MH() {
        return RuntimeHelper.requireNonNull(constants$471.GetWindowTextLengthW$MH,"GetWindowTextLengthW");
    }
    /**
     * {@snippet :
     * int GetWindowTextLengthW(HWND hWnd);
     * }
     */
    public static int GetWindowTextLengthW(MemorySegment hWnd) {
        var mh$ = GetWindowTextLengthW$MH();
        try {
            return (int)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetClientRect$MH() {
        return RuntimeHelper.requireNonNull(constants$471.GetClientRect$MH,"GetClientRect");
    }
    /**
     * {@snippet :
     * BOOL GetClientRect(HWND hWnd, LPRECT lpRect);
     * }
     */
    public static int GetClientRect(MemorySegment hWnd, MemorySegment lpRect) {
        var mh$ = GetClientRect$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpRect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWindowRect$MH() {
        return RuntimeHelper.requireNonNull(constants$471.GetWindowRect$MH,"GetWindowRect");
    }
    /**
     * {@snippet :
     * BOOL GetWindowRect(HWND hWnd, LPRECT lpRect);
     * }
     */
    public static int GetWindowRect(MemorySegment hWnd, MemorySegment lpRect) {
        var mh$ = GetWindowRect$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpRect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AdjustWindowRect$MH() {
        return RuntimeHelper.requireNonNull(constants$471.AdjustWindowRect$MH,"AdjustWindowRect");
    }
    /**
     * {@snippet :
     * BOOL AdjustWindowRect(LPRECT lpRect, DWORD dwStyle, BOOL bMenu);
     * }
     */
    public static int AdjustWindowRect(MemorySegment lpRect, int dwStyle, int bMenu) {
        var mh$ = AdjustWindowRect$MH();
        try {
            return (int)mh$.invokeExact(lpRect, dwStyle, bMenu);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AdjustWindowRectEx$MH() {
        return RuntimeHelper.requireNonNull(constants$472.AdjustWindowRectEx$MH,"AdjustWindowRectEx");
    }
    /**
     * {@snippet :
     * BOOL AdjustWindowRectEx(LPRECT lpRect, DWORD dwStyle, BOOL bMenu, DWORD dwExStyle);
     * }
     */
    public static int AdjustWindowRectEx(MemorySegment lpRect, int dwStyle, int bMenu, int dwExStyle) {
        var mh$ = AdjustWindowRectEx$MH();
        try {
            return (int)mh$.invokeExact(lpRect, dwStyle, bMenu, dwExStyle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AdjustWindowRectExForDpi$MH() {
        return RuntimeHelper.requireNonNull(constants$472.AdjustWindowRectExForDpi$MH,"AdjustWindowRectExForDpi");
    }
    /**
     * {@snippet :
     * BOOL AdjustWindowRectExForDpi(LPRECT lpRect, DWORD dwStyle, BOOL bMenu, DWORD dwExStyle, UINT dpi);
     * }
     */
    public static int AdjustWindowRectExForDpi(MemorySegment lpRect, int dwStyle, int bMenu, int dwExStyle, int dpi) {
        var mh$ = AdjustWindowRectExForDpi$MH();
        try {
            return (int)mh$.invokeExact(lpRect, dwStyle, bMenu, dwExStyle, dpi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct tagHELPINFO* LPHELPINFO;
     * }
     */
    public static final OfAddress LPHELPINFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle SetWindowContextHelpId$MH() {
        return RuntimeHelper.requireNonNull(constants$472.SetWindowContextHelpId$MH,"SetWindowContextHelpId");
    }
    /**
     * {@snippet :
     * BOOL SetWindowContextHelpId(HWND, DWORD);
     * }
     */
    public static int SetWindowContextHelpId(MemorySegment x0, int x1) {
        var mh$ = SetWindowContextHelpId$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWindowContextHelpId$MH() {
        return RuntimeHelper.requireNonNull(constants$472.GetWindowContextHelpId$MH,"GetWindowContextHelpId");
    }
    /**
     * {@snippet :
     * DWORD GetWindowContextHelpId(HWND);
     * }
     */
    public static int GetWindowContextHelpId(MemorySegment x0) {
        var mh$ = GetWindowContextHelpId$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetMenuContextHelpId$MH() {
        return RuntimeHelper.requireNonNull(constants$472.SetMenuContextHelpId$MH,"SetMenuContextHelpId");
    }
    /**
     * {@snippet :
     * BOOL SetMenuContextHelpId(HMENU, DWORD);
     * }
     */
    public static int SetMenuContextHelpId(MemorySegment x0, int x1) {
        var mh$ = SetMenuContextHelpId$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMenuContextHelpId$MH() {
        return RuntimeHelper.requireNonNull(constants$472.GetMenuContextHelpId$MH,"GetMenuContextHelpId");
    }
    /**
     * {@snippet :
     * DWORD GetMenuContextHelpId(HMENU);
     * }
     */
    public static int GetMenuContextHelpId(MemorySegment x0) {
        var mh$ = GetMenuContextHelpId$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MessageBoxA$MH() {
        return RuntimeHelper.requireNonNull(constants$473.MessageBoxA$MH,"MessageBoxA");
    }
    /**
     * {@snippet :
     * int MessageBoxA(HWND hWnd, LPCSTR lpText, LPCSTR lpCaption, UINT uType);
     * }
     */
    public static int MessageBoxA(MemorySegment hWnd, MemorySegment lpText, MemorySegment lpCaption, int uType) {
        var mh$ = MessageBoxA$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpText, lpCaption, uType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MessageBoxW$MH() {
        return RuntimeHelper.requireNonNull(constants$473.MessageBoxW$MH,"MessageBoxW");
    }
    /**
     * {@snippet :
     * int MessageBoxW(HWND hWnd, LPCWSTR lpText, LPCWSTR lpCaption, UINT uType);
     * }
     */
    public static int MessageBoxW(MemorySegment hWnd, MemorySegment lpText, MemorySegment lpCaption, int uType) {
        var mh$ = MessageBoxW$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpText, lpCaption, uType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MessageBoxExA$MH() {
        return RuntimeHelper.requireNonNull(constants$473.MessageBoxExA$MH,"MessageBoxExA");
    }
    /**
     * {@snippet :
     * int MessageBoxExA(HWND hWnd, LPCSTR lpText, LPCSTR lpCaption, UINT uType, WORD wLanguageId);
     * }
     */
    public static int MessageBoxExA(MemorySegment hWnd, MemorySegment lpText, MemorySegment lpCaption, int uType, short wLanguageId) {
        var mh$ = MessageBoxExA$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpText, lpCaption, uType, wLanguageId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MessageBoxExW$MH() {
        return RuntimeHelper.requireNonNull(constants$473.MessageBoxExW$MH,"MessageBoxExW");
    }
    /**
     * {@snippet :
     * int MessageBoxExW(HWND hWnd, LPCWSTR lpText, LPCWSTR lpCaption, UINT uType, WORD wLanguageId);
     * }
     */
    public static int MessageBoxExW(MemorySegment hWnd, MemorySegment lpText, MemorySegment lpCaption, int uType, short wLanguageId) {
        var mh$ = MessageBoxExW$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpText, lpCaption, uType, wLanguageId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct tagMSGBOXPARAMSA* PMSGBOXPARAMSA;
     * }
     */
    public static final OfAddress PMSGBOXPARAMSA = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagMSGBOXPARAMSA* LPMSGBOXPARAMSA;
     * }
     */
    public static final OfAddress LPMSGBOXPARAMSA = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagMSGBOXPARAMSW* PMSGBOXPARAMSW;
     * }
     */
    public static final OfAddress PMSGBOXPARAMSW = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagMSGBOXPARAMSW* LPMSGBOXPARAMSW;
     * }
     */
    public static final OfAddress LPMSGBOXPARAMSW = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagMSGBOXPARAMSA* PMSGBOXPARAMS;
     * }
     */
    public static final OfAddress PMSGBOXPARAMS = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagMSGBOXPARAMSA* LPMSGBOXPARAMS;
     * }
     */
    public static final OfAddress LPMSGBOXPARAMS = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle MessageBoxIndirectA$MH() {
        return RuntimeHelper.requireNonNull(constants$474.MessageBoxIndirectA$MH,"MessageBoxIndirectA");
    }
    /**
     * {@snippet :
     * int MessageBoxIndirectA(const MSGBOXPARAMSA* lpmbp);
     * }
     */
    public static int MessageBoxIndirectA(MemorySegment lpmbp) {
        var mh$ = MessageBoxIndirectA$MH();
        try {
            return (int)mh$.invokeExact(lpmbp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MessageBoxIndirectW$MH() {
        return RuntimeHelper.requireNonNull(constants$474.MessageBoxIndirectW$MH,"MessageBoxIndirectW");
    }
    /**
     * {@snippet :
     * int MessageBoxIndirectW(const MSGBOXPARAMSW* lpmbp);
     * }
     */
    public static int MessageBoxIndirectW(MemorySegment lpmbp) {
        var mh$ = MessageBoxIndirectW$MH();
        try {
            return (int)mh$.invokeExact(lpmbp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MessageBeep$MH() {
        return RuntimeHelper.requireNonNull(constants$474.MessageBeep$MH,"MessageBeep");
    }
    /**
     * {@snippet :
     * BOOL MessageBeep(UINT uType);
     * }
     */
    public static int MessageBeep(int uType) {
        var mh$ = MessageBeep$MH();
        try {
            return (int)mh$.invokeExact(uType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ShowCursor$MH() {
        return RuntimeHelper.requireNonNull(constants$474.ShowCursor$MH,"ShowCursor");
    }
    /**
     * {@snippet :
     * int ShowCursor(BOOL bShow);
     * }
     */
    public static int ShowCursor(int bShow) {
        var mh$ = ShowCursor$MH();
        try {
            return (int)mh$.invokeExact(bShow);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetCursorPos$MH() {
        return RuntimeHelper.requireNonNull(constants$474.SetCursorPos$MH,"SetCursorPos");
    }
    /**
     * {@snippet :
     * BOOL SetCursorPos(int X, int Y);
     * }
     */
    public static int SetCursorPos(int X, int Y) {
        var mh$ = SetCursorPos$MH();
        try {
            return (int)mh$.invokeExact(X, Y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetPhysicalCursorPos$MH() {
        return RuntimeHelper.requireNonNull(constants$474.SetPhysicalCursorPos$MH,"SetPhysicalCursorPos");
    }
    /**
     * {@snippet :
     * BOOL SetPhysicalCursorPos(int X, int Y);
     * }
     */
    public static int SetPhysicalCursorPos(int X, int Y) {
        var mh$ = SetPhysicalCursorPos$MH();
        try {
            return (int)mh$.invokeExact(X, Y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetCursor$MH() {
        return RuntimeHelper.requireNonNull(constants$475.SetCursor$MH,"SetCursor");
    }
    /**
     * {@snippet :
     * HCURSOR SetCursor(HCURSOR hCursor);
     * }
     */
    public static MemorySegment SetCursor(MemorySegment hCursor) {
        var mh$ = SetCursor$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hCursor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCursorPos$MH() {
        return RuntimeHelper.requireNonNull(constants$475.GetCursorPos$MH,"GetCursorPos");
    }
    /**
     * {@snippet :
     * BOOL GetCursorPos(LPPOINT lpPoint);
     * }
     */
    public static int GetCursorPos(MemorySegment lpPoint) {
        var mh$ = GetCursorPos$MH();
        try {
            return (int)mh$.invokeExact(lpPoint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPhysicalCursorPos$MH() {
        return RuntimeHelper.requireNonNull(constants$475.GetPhysicalCursorPos$MH,"GetPhysicalCursorPos");
    }
    /**
     * {@snippet :
     * BOOL GetPhysicalCursorPos(LPPOINT lpPoint);
     * }
     */
    public static int GetPhysicalCursorPos(MemorySegment lpPoint) {
        var mh$ = GetPhysicalCursorPos$MH();
        try {
            return (int)mh$.invokeExact(lpPoint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetClipCursor$MH() {
        return RuntimeHelper.requireNonNull(constants$475.GetClipCursor$MH,"GetClipCursor");
    }
    /**
     * {@snippet :
     * BOOL GetClipCursor(LPRECT lpRect);
     * }
     */
    public static int GetClipCursor(MemorySegment lpRect) {
        var mh$ = GetClipCursor$MH();
        try {
            return (int)mh$.invokeExact(lpRect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCursor$MH() {
        return RuntimeHelper.requireNonNull(constants$475.GetCursor$MH,"GetCursor");
    }
    /**
     * {@snippet :
     * HCURSOR GetCursor();
     * }
     */
    public static MemorySegment GetCursor() {
        var mh$ = GetCursor$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateCaret$MH() {
        return RuntimeHelper.requireNonNull(constants$475.CreateCaret$MH,"CreateCaret");
    }
    /**
     * {@snippet :
     * BOOL CreateCaret(HWND hWnd, HBITMAP hBitmap, int nWidth, int nHeight);
     * }
     */
    public static int CreateCaret(MemorySegment hWnd, MemorySegment hBitmap, int nWidth, int nHeight) {
        var mh$ = CreateCaret$MH();
        try {
            return (int)mh$.invokeExact(hWnd, hBitmap, nWidth, nHeight);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCaretBlinkTime$MH() {
        return RuntimeHelper.requireNonNull(constants$476.GetCaretBlinkTime$MH,"GetCaretBlinkTime");
    }
    /**
     * {@snippet :
     * UINT GetCaretBlinkTime();
     * }
     */
    public static int GetCaretBlinkTime() {
        var mh$ = GetCaretBlinkTime$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetCaretBlinkTime$MH() {
        return RuntimeHelper.requireNonNull(constants$476.SetCaretBlinkTime$MH,"SetCaretBlinkTime");
    }
    /**
     * {@snippet :
     * BOOL SetCaretBlinkTime(UINT uMSeconds);
     * }
     */
    public static int SetCaretBlinkTime(int uMSeconds) {
        var mh$ = SetCaretBlinkTime$MH();
        try {
            return (int)mh$.invokeExact(uMSeconds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DestroyCaret$MH() {
        return RuntimeHelper.requireNonNull(constants$476.DestroyCaret$MH,"DestroyCaret");
    }
    /**
     * {@snippet :
     * BOOL DestroyCaret();
     * }
     */
    public static int DestroyCaret() {
        var mh$ = DestroyCaret$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HideCaret$MH() {
        return RuntimeHelper.requireNonNull(constants$476.HideCaret$MH,"HideCaret");
    }
    /**
     * {@snippet :
     * BOOL HideCaret(HWND hWnd);
     * }
     */
    public static int HideCaret(MemorySegment hWnd) {
        var mh$ = HideCaret$MH();
        try {
            return (int)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ShowCaret$MH() {
        return RuntimeHelper.requireNonNull(constants$476.ShowCaret$MH,"ShowCaret");
    }
    /**
     * {@snippet :
     * BOOL ShowCaret(HWND hWnd);
     * }
     */
    public static int ShowCaret(MemorySegment hWnd) {
        var mh$ = ShowCaret$MH();
        try {
            return (int)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetCaretPos$MH() {
        return RuntimeHelper.requireNonNull(constants$476.SetCaretPos$MH,"SetCaretPos");
    }
    /**
     * {@snippet :
     * BOOL SetCaretPos(int X, int Y);
     * }
     */
    public static int SetCaretPos(int X, int Y) {
        var mh$ = SetCaretPos$MH();
        try {
            return (int)mh$.invokeExact(X, Y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCaretPos$MH() {
        return RuntimeHelper.requireNonNull(constants$477.GetCaretPos$MH,"GetCaretPos");
    }
    /**
     * {@snippet :
     * BOOL GetCaretPos(LPPOINT lpPoint);
     * }
     */
    public static int GetCaretPos(MemorySegment lpPoint) {
        var mh$ = GetCaretPos$MH();
        try {
            return (int)mh$.invokeExact(lpPoint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ClientToScreen$MH() {
        return RuntimeHelper.requireNonNull(constants$477.ClientToScreen$MH,"ClientToScreen");
    }
    /**
     * {@snippet :
     * BOOL ClientToScreen(HWND hWnd, LPPOINT lpPoint);
     * }
     */
    public static int ClientToScreen(MemorySegment hWnd, MemorySegment lpPoint) {
        var mh$ = ClientToScreen$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpPoint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ScreenToClient$MH() {
        return RuntimeHelper.requireNonNull(constants$477.ScreenToClient$MH,"ScreenToClient");
    }
    /**
     * {@snippet :
     * BOOL ScreenToClient(HWND hWnd, LPPOINT lpPoint);
     * }
     */
    public static int ScreenToClient(MemorySegment hWnd, MemorySegment lpPoint) {
        var mh$ = ScreenToClient$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpPoint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LogicalToPhysicalPoint$MH() {
        return RuntimeHelper.requireNonNull(constants$477.LogicalToPhysicalPoint$MH,"LogicalToPhysicalPoint");
    }
    /**
     * {@snippet :
     * BOOL LogicalToPhysicalPoint(HWND hWnd, LPPOINT lpPoint);
     * }
     */
    public static int LogicalToPhysicalPoint(MemorySegment hWnd, MemorySegment lpPoint) {
        var mh$ = LogicalToPhysicalPoint$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpPoint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PhysicalToLogicalPoint$MH() {
        return RuntimeHelper.requireNonNull(constants$477.PhysicalToLogicalPoint$MH,"PhysicalToLogicalPoint");
    }
    /**
     * {@snippet :
     * BOOL PhysicalToLogicalPoint(HWND hWnd, LPPOINT lpPoint);
     * }
     */
    public static int PhysicalToLogicalPoint(MemorySegment hWnd, MemorySegment lpPoint) {
        var mh$ = PhysicalToLogicalPoint$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpPoint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LogicalToPhysicalPointForPerMonitorDPI$MH() {
        return RuntimeHelper.requireNonNull(constants$477.LogicalToPhysicalPointForPerMonitorDPI$MH,"LogicalToPhysicalPointForPerMonitorDPI");
    }
    /**
     * {@snippet :
     * BOOL LogicalToPhysicalPointForPerMonitorDPI(HWND hWnd, LPPOINT lpPoint);
     * }
     */
    public static int LogicalToPhysicalPointForPerMonitorDPI(MemorySegment hWnd, MemorySegment lpPoint) {
        var mh$ = LogicalToPhysicalPointForPerMonitorDPI$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpPoint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PhysicalToLogicalPointForPerMonitorDPI$MH() {
        return RuntimeHelper.requireNonNull(constants$478.PhysicalToLogicalPointForPerMonitorDPI$MH,"PhysicalToLogicalPointForPerMonitorDPI");
    }
    /**
     * {@snippet :
     * BOOL PhysicalToLogicalPointForPerMonitorDPI(HWND hWnd, LPPOINT lpPoint);
     * }
     */
    public static int PhysicalToLogicalPointForPerMonitorDPI(MemorySegment hWnd, MemorySegment lpPoint) {
        var mh$ = PhysicalToLogicalPointForPerMonitorDPI$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpPoint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MapWindowPoints$MH() {
        return RuntimeHelper.requireNonNull(constants$478.MapWindowPoints$MH,"MapWindowPoints");
    }
    /**
     * {@snippet :
     * int MapWindowPoints(HWND hWndFrom, HWND hWndTo, LPPOINT lpPoints, UINT cPoints);
     * }
     */
    public static int MapWindowPoints(MemorySegment hWndFrom, MemorySegment hWndTo, MemorySegment lpPoints, int cPoints) {
        var mh$ = MapWindowPoints$MH();
        try {
            return (int)mh$.invokeExact(hWndFrom, hWndTo, lpPoints, cPoints);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WindowFromPoint$MH() {
        return RuntimeHelper.requireNonNull(constants$478.WindowFromPoint$MH,"WindowFromPoint");
    }
    /**
     * {@snippet :
     * HWND WindowFromPoint(POINT Point);
     * }
     */
    public static MemorySegment WindowFromPoint(MemorySegment Point) {
        var mh$ = WindowFromPoint$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(Point);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WindowFromPhysicalPoint$MH() {
        return RuntimeHelper.requireNonNull(constants$478.WindowFromPhysicalPoint$MH,"WindowFromPhysicalPoint");
    }
    /**
     * {@snippet :
     * HWND WindowFromPhysicalPoint(POINT Point);
     * }
     */
    public static MemorySegment WindowFromPhysicalPoint(MemorySegment Point) {
        var mh$ = WindowFromPhysicalPoint$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(Point);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ChildWindowFromPoint$MH() {
        return RuntimeHelper.requireNonNull(constants$478.ChildWindowFromPoint$MH,"ChildWindowFromPoint");
    }
    /**
     * {@snippet :
     * HWND ChildWindowFromPoint(HWND hWndParent, POINT Point);
     * }
     */
    public static MemorySegment ChildWindowFromPoint(MemorySegment hWndParent, MemorySegment Point) {
        var mh$ = ChildWindowFromPoint$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hWndParent, Point);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ClipCursor$MH() {
        return RuntimeHelper.requireNonNull(constants$478.ClipCursor$MH,"ClipCursor");
    }
    /**
     * {@snippet :
     * BOOL ClipCursor(const RECT* lpRect);
     * }
     */
    public static int ClipCursor(MemorySegment lpRect) {
        var mh$ = ClipCursor$MH();
        try {
            return (int)mh$.invokeExact(lpRect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ChildWindowFromPointEx$MH() {
        return RuntimeHelper.requireNonNull(constants$479.ChildWindowFromPointEx$MH,"ChildWindowFromPointEx");
    }
    /**
     * {@snippet :
     * HWND ChildWindowFromPointEx(HWND hwnd, POINT pt, UINT flags);
     * }
     */
    public static MemorySegment ChildWindowFromPointEx(MemorySegment hwnd, MemorySegment pt, int flags) {
        var mh$ = ChildWindowFromPointEx$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hwnd, pt, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSysColor$MH() {
        return RuntimeHelper.requireNonNull(constants$479.GetSysColor$MH,"GetSysColor");
    }
    /**
     * {@snippet :
     * DWORD GetSysColor(int nIndex);
     * }
     */
    public static int GetSysColor(int nIndex) {
        var mh$ = GetSysColor$MH();
        try {
            return (int)mh$.invokeExact(nIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSysColorBrush$MH() {
        return RuntimeHelper.requireNonNull(constants$479.GetSysColorBrush$MH,"GetSysColorBrush");
    }
    /**
     * {@snippet :
     * HBRUSH GetSysColorBrush(int nIndex);
     * }
     */
    public static MemorySegment GetSysColorBrush(int nIndex) {
        var mh$ = GetSysColorBrush$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(nIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetSysColors$MH() {
        return RuntimeHelper.requireNonNull(constants$479.SetSysColors$MH,"SetSysColors");
    }
    /**
     * {@snippet :
     * BOOL SetSysColors(int cElements, const INT* lpaElements, const COLORREF* lpaRgbValues);
     * }
     */
    public static int SetSysColors(int cElements, MemorySegment lpaElements, MemorySegment lpaRgbValues) {
        var mh$ = SetSysColors$MH();
        try {
            return (int)mh$.invokeExact(cElements, lpaElements, lpaRgbValues);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawFocusRect$MH() {
        return RuntimeHelper.requireNonNull(constants$479.DrawFocusRect$MH,"DrawFocusRect");
    }
    /**
     * {@snippet :
     * BOOL DrawFocusRect(HDC hDC, const RECT* lprc);
     * }
     */
    public static int DrawFocusRect(MemorySegment hDC, MemorySegment lprc) {
        var mh$ = DrawFocusRect$MH();
        try {
            return (int)mh$.invokeExact(hDC, lprc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FillRect$MH() {
        return RuntimeHelper.requireNonNull(constants$479.FillRect$MH,"FillRect");
    }
    /**
     * {@snippet :
     * int FillRect(HDC hDC, const RECT* lprc, HBRUSH hbr);
     * }
     */
    public static int FillRect(MemorySegment hDC, MemorySegment lprc, MemorySegment hbr) {
        var mh$ = FillRect$MH();
        try {
            return (int)mh$.invokeExact(hDC, lprc, hbr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FrameRect$MH() {
        return RuntimeHelper.requireNonNull(constants$480.FrameRect$MH,"FrameRect");
    }
    /**
     * {@snippet :
     * int FrameRect(HDC hDC, const RECT* lprc, HBRUSH hbr);
     * }
     */
    public static int FrameRect(MemorySegment hDC, MemorySegment lprc, MemorySegment hbr) {
        var mh$ = FrameRect$MH();
        try {
            return (int)mh$.invokeExact(hDC, lprc, hbr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InvertRect$MH() {
        return RuntimeHelper.requireNonNull(constants$480.InvertRect$MH,"InvertRect");
    }
    /**
     * {@snippet :
     * BOOL InvertRect(HDC hDC, const RECT* lprc);
     * }
     */
    public static int InvertRect(MemorySegment hDC, MemorySegment lprc) {
        var mh$ = InvertRect$MH();
        try {
            return (int)mh$.invokeExact(hDC, lprc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetRect$MH() {
        return RuntimeHelper.requireNonNull(constants$480.SetRect$MH,"SetRect");
    }
    /**
     * {@snippet :
     * BOOL SetRect(LPRECT lprc, int xLeft, int yTop, int xRight, int yBottom);
     * }
     */
    public static int SetRect(MemorySegment lprc, int xLeft, int yTop, int xRight, int yBottom) {
        var mh$ = SetRect$MH();
        try {
            return (int)mh$.invokeExact(lprc, xLeft, yTop, xRight, yBottom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetRectEmpty$MH() {
        return RuntimeHelper.requireNonNull(constants$480.SetRectEmpty$MH,"SetRectEmpty");
    }
    /**
     * {@snippet :
     * BOOL SetRectEmpty(LPRECT lprc);
     * }
     */
    public static int SetRectEmpty(MemorySegment lprc) {
        var mh$ = SetRectEmpty$MH();
        try {
            return (int)mh$.invokeExact(lprc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CopyRect$MH() {
        return RuntimeHelper.requireNonNull(constants$480.CopyRect$MH,"CopyRect");
    }
    /**
     * {@snippet :
     * BOOL CopyRect(LPRECT lprcDst, const RECT* lprcSrc);
     * }
     */
    public static int CopyRect(MemorySegment lprcDst, MemorySegment lprcSrc) {
        var mh$ = CopyRect$MH();
        try {
            return (int)mh$.invokeExact(lprcDst, lprcSrc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InflateRect$MH() {
        return RuntimeHelper.requireNonNull(constants$480.InflateRect$MH,"InflateRect");
    }
    /**
     * {@snippet :
     * BOOL InflateRect(LPRECT lprc, int dx, int dy);
     * }
     */
    public static int InflateRect(MemorySegment lprc, int dx, int dy) {
        var mh$ = InflateRect$MH();
        try {
            return (int)mh$.invokeExact(lprc, dx, dy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IntersectRect$MH() {
        return RuntimeHelper.requireNonNull(constants$481.IntersectRect$MH,"IntersectRect");
    }
    /**
     * {@snippet :
     * BOOL IntersectRect(LPRECT lprcDst, const RECT* lprcSrc1, const RECT* lprcSrc2);
     * }
     */
    public static int IntersectRect(MemorySegment lprcDst, MemorySegment lprcSrc1, MemorySegment lprcSrc2) {
        var mh$ = IntersectRect$MH();
        try {
            return (int)mh$.invokeExact(lprcDst, lprcSrc1, lprcSrc2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnionRect$MH() {
        return RuntimeHelper.requireNonNull(constants$481.UnionRect$MH,"UnionRect");
    }
    /**
     * {@snippet :
     * BOOL UnionRect(LPRECT lprcDst, const RECT* lprcSrc1, const RECT* lprcSrc2);
     * }
     */
    public static int UnionRect(MemorySegment lprcDst, MemorySegment lprcSrc1, MemorySegment lprcSrc2) {
        var mh$ = UnionRect$MH();
        try {
            return (int)mh$.invokeExact(lprcDst, lprcSrc1, lprcSrc2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SubtractRect$MH() {
        return RuntimeHelper.requireNonNull(constants$481.SubtractRect$MH,"SubtractRect");
    }
    /**
     * {@snippet :
     * BOOL SubtractRect(LPRECT lprcDst, const RECT* lprcSrc1, const RECT* lprcSrc2);
     * }
     */
    public static int SubtractRect(MemorySegment lprcDst, MemorySegment lprcSrc1, MemorySegment lprcSrc2) {
        var mh$ = SubtractRect$MH();
        try {
            return (int)mh$.invokeExact(lprcDst, lprcSrc1, lprcSrc2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OffsetRect$MH() {
        return RuntimeHelper.requireNonNull(constants$481.OffsetRect$MH,"OffsetRect");
    }
    /**
     * {@snippet :
     * BOOL OffsetRect(LPRECT lprc, int dx, int dy);
     * }
     */
    public static int OffsetRect(MemorySegment lprc, int dx, int dy) {
        var mh$ = OffsetRect$MH();
        try {
            return (int)mh$.invokeExact(lprc, dx, dy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsRectEmpty$MH() {
        return RuntimeHelper.requireNonNull(constants$481.IsRectEmpty$MH,"IsRectEmpty");
    }
    /**
     * {@snippet :
     * BOOL IsRectEmpty(const RECT* lprc);
     * }
     */
    public static int IsRectEmpty(MemorySegment lprc) {
        var mh$ = IsRectEmpty$MH();
        try {
            return (int)mh$.invokeExact(lprc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EqualRect$MH() {
        return RuntimeHelper.requireNonNull(constants$481.EqualRect$MH,"EqualRect");
    }
    /**
     * {@snippet :
     * BOOL EqualRect(const RECT* lprc1, const RECT* lprc2);
     * }
     */
    public static int EqualRect(MemorySegment lprc1, MemorySegment lprc2) {
        var mh$ = EqualRect$MH();
        try {
            return (int)mh$.invokeExact(lprc1, lprc2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PtInRect$MH() {
        return RuntimeHelper.requireNonNull(constants$482.PtInRect$MH,"PtInRect");
    }
    /**
     * {@snippet :
     * BOOL PtInRect(const RECT* lprc, POINT pt);
     * }
     */
    public static int PtInRect(MemorySegment lprc, MemorySegment pt) {
        var mh$ = PtInRect$MH();
        try {
            return (int)mh$.invokeExact(lprc, pt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWindowWord$MH() {
        return RuntimeHelper.requireNonNull(constants$482.GetWindowWord$MH,"GetWindowWord");
    }
    /**
     * {@snippet :
     * WORD GetWindowWord(HWND hWnd, int nIndex);
     * }
     */
    public static short GetWindowWord(MemorySegment hWnd, int nIndex) {
        var mh$ = GetWindowWord$MH();
        try {
            return (short)mh$.invokeExact(hWnd, nIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWindowWord$MH() {
        return RuntimeHelper.requireNonNull(constants$482.SetWindowWord$MH,"SetWindowWord");
    }
    /**
     * {@snippet :
     * WORD SetWindowWord(HWND hWnd, int nIndex, WORD wNewWord);
     * }
     */
    public static short SetWindowWord(MemorySegment hWnd, int nIndex, short wNewWord) {
        var mh$ = SetWindowWord$MH();
        try {
            return (short)mh$.invokeExact(hWnd, nIndex, wNewWord);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWindowLongA$MH() {
        return RuntimeHelper.requireNonNull(constants$482.GetWindowLongA$MH,"GetWindowLongA");
    }
    /**
     * {@snippet :
     * LONG GetWindowLongA(HWND hWnd, int nIndex);
     * }
     */
    public static int GetWindowLongA(MemorySegment hWnd, int nIndex) {
        var mh$ = GetWindowLongA$MH();
        try {
            return (int)mh$.invokeExact(hWnd, nIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWindowLongW$MH() {
        return RuntimeHelper.requireNonNull(constants$482.GetWindowLongW$MH,"GetWindowLongW");
    }
    /**
     * {@snippet :
     * LONG GetWindowLongW(HWND hWnd, int nIndex);
     * }
     */
    public static int GetWindowLongW(MemorySegment hWnd, int nIndex) {
        var mh$ = GetWindowLongW$MH();
        try {
            return (int)mh$.invokeExact(hWnd, nIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWindowLongA$MH() {
        return RuntimeHelper.requireNonNull(constants$482.SetWindowLongA$MH,"SetWindowLongA");
    }
    /**
     * {@snippet :
     * LONG SetWindowLongA(HWND hWnd, int nIndex, LONG dwNewLong);
     * }
     */
    public static int SetWindowLongA(MemorySegment hWnd, int nIndex, int dwNewLong) {
        var mh$ = SetWindowLongA$MH();
        try {
            return (int)mh$.invokeExact(hWnd, nIndex, dwNewLong);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWindowLongW$MH() {
        return RuntimeHelper.requireNonNull(constants$483.SetWindowLongW$MH,"SetWindowLongW");
    }
    /**
     * {@snippet :
     * LONG SetWindowLongW(HWND hWnd, int nIndex, LONG dwNewLong);
     * }
     */
    public static int SetWindowLongW(MemorySegment hWnd, int nIndex, int dwNewLong) {
        var mh$ = SetWindowLongW$MH();
        try {
            return (int)mh$.invokeExact(hWnd, nIndex, dwNewLong);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWindowLongPtrA$MH() {
        return RuntimeHelper.requireNonNull(constants$483.GetWindowLongPtrA$MH,"GetWindowLongPtrA");
    }
    /**
     * {@snippet :
     * LONG_PTR GetWindowLongPtrA(HWND hWnd, int nIndex);
     * }
     */
    public static long GetWindowLongPtrA(MemorySegment hWnd, int nIndex) {
        var mh$ = GetWindowLongPtrA$MH();
        try {
            return (long)mh$.invokeExact(hWnd, nIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWindowLongPtrW$MH() {
        return RuntimeHelper.requireNonNull(constants$483.GetWindowLongPtrW$MH,"GetWindowLongPtrW");
    }
    /**
     * {@snippet :
     * LONG_PTR GetWindowLongPtrW(HWND hWnd, int nIndex);
     * }
     */
    public static long GetWindowLongPtrW(MemorySegment hWnd, int nIndex) {
        var mh$ = GetWindowLongPtrW$MH();
        try {
            return (long)mh$.invokeExact(hWnd, nIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWindowLongPtrA$MH() {
        return RuntimeHelper.requireNonNull(constants$483.SetWindowLongPtrA$MH,"SetWindowLongPtrA");
    }
    /**
     * {@snippet :
     * LONG_PTR SetWindowLongPtrA(HWND hWnd, int nIndex, LONG_PTR dwNewLong);
     * }
     */
    public static long SetWindowLongPtrA(MemorySegment hWnd, int nIndex, long dwNewLong) {
        var mh$ = SetWindowLongPtrA$MH();
        try {
            return (long)mh$.invokeExact(hWnd, nIndex, dwNewLong);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWindowLongPtrW$MH() {
        return RuntimeHelper.requireNonNull(constants$483.SetWindowLongPtrW$MH,"SetWindowLongPtrW");
    }
    /**
     * {@snippet :
     * LONG_PTR SetWindowLongPtrW(HWND hWnd, int nIndex, LONG_PTR dwNewLong);
     * }
     */
    public static long SetWindowLongPtrW(MemorySegment hWnd, int nIndex, long dwNewLong) {
        var mh$ = SetWindowLongPtrW$MH();
        try {
            return (long)mh$.invokeExact(hWnd, nIndex, dwNewLong);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetClassWord$MH() {
        return RuntimeHelper.requireNonNull(constants$483.GetClassWord$MH,"GetClassWord");
    }
    /**
     * {@snippet :
     * WORD GetClassWord(HWND hWnd, int nIndex);
     * }
     */
    public static short GetClassWord(MemorySegment hWnd, int nIndex) {
        var mh$ = GetClassWord$MH();
        try {
            return (short)mh$.invokeExact(hWnd, nIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetClassWord$MH() {
        return RuntimeHelper.requireNonNull(constants$484.SetClassWord$MH,"SetClassWord");
    }
    /**
     * {@snippet :
     * WORD SetClassWord(HWND hWnd, int nIndex, WORD wNewWord);
     * }
     */
    public static short SetClassWord(MemorySegment hWnd, int nIndex, short wNewWord) {
        var mh$ = SetClassWord$MH();
        try {
            return (short)mh$.invokeExact(hWnd, nIndex, wNewWord);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetClassLongA$MH() {
        return RuntimeHelper.requireNonNull(constants$484.GetClassLongA$MH,"GetClassLongA");
    }
    /**
     * {@snippet :
     * DWORD GetClassLongA(HWND hWnd, int nIndex);
     * }
     */
    public static int GetClassLongA(MemorySegment hWnd, int nIndex) {
        var mh$ = GetClassLongA$MH();
        try {
            return (int)mh$.invokeExact(hWnd, nIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetClassLongW$MH() {
        return RuntimeHelper.requireNonNull(constants$484.GetClassLongW$MH,"GetClassLongW");
    }
    /**
     * {@snippet :
     * DWORD GetClassLongW(HWND hWnd, int nIndex);
     * }
     */
    public static int GetClassLongW(MemorySegment hWnd, int nIndex) {
        var mh$ = GetClassLongW$MH();
        try {
            return (int)mh$.invokeExact(hWnd, nIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetClassLongA$MH() {
        return RuntimeHelper.requireNonNull(constants$484.SetClassLongA$MH,"SetClassLongA");
    }
    /**
     * {@snippet :
     * DWORD SetClassLongA(HWND hWnd, int nIndex, LONG dwNewLong);
     * }
     */
    public static int SetClassLongA(MemorySegment hWnd, int nIndex, int dwNewLong) {
        var mh$ = SetClassLongA$MH();
        try {
            return (int)mh$.invokeExact(hWnd, nIndex, dwNewLong);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetClassLongW$MH() {
        return RuntimeHelper.requireNonNull(constants$484.SetClassLongW$MH,"SetClassLongW");
    }
    /**
     * {@snippet :
     * DWORD SetClassLongW(HWND hWnd, int nIndex, LONG dwNewLong);
     * }
     */
    public static int SetClassLongW(MemorySegment hWnd, int nIndex, int dwNewLong) {
        var mh$ = SetClassLongW$MH();
        try {
            return (int)mh$.invokeExact(hWnd, nIndex, dwNewLong);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetClassLongPtrA$MH() {
        return RuntimeHelper.requireNonNull(constants$484.GetClassLongPtrA$MH,"GetClassLongPtrA");
    }
    /**
     * {@snippet :
     * ULONG_PTR GetClassLongPtrA(HWND hWnd, int nIndex);
     * }
     */
    public static long GetClassLongPtrA(MemorySegment hWnd, int nIndex) {
        var mh$ = GetClassLongPtrA$MH();
        try {
            return (long)mh$.invokeExact(hWnd, nIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetClassLongPtrW$MH() {
        return RuntimeHelper.requireNonNull(constants$485.GetClassLongPtrW$MH,"GetClassLongPtrW");
    }
    /**
     * {@snippet :
     * ULONG_PTR GetClassLongPtrW(HWND hWnd, int nIndex);
     * }
     */
    public static long GetClassLongPtrW(MemorySegment hWnd, int nIndex) {
        var mh$ = GetClassLongPtrW$MH();
        try {
            return (long)mh$.invokeExact(hWnd, nIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetClassLongPtrA$MH() {
        return RuntimeHelper.requireNonNull(constants$485.SetClassLongPtrA$MH,"SetClassLongPtrA");
    }
    /**
     * {@snippet :
     * ULONG_PTR SetClassLongPtrA(HWND hWnd, int nIndex, LONG_PTR dwNewLong);
     * }
     */
    public static long SetClassLongPtrA(MemorySegment hWnd, int nIndex, long dwNewLong) {
        var mh$ = SetClassLongPtrA$MH();
        try {
            return (long)mh$.invokeExact(hWnd, nIndex, dwNewLong);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetClassLongPtrW$MH() {
        return RuntimeHelper.requireNonNull(constants$485.SetClassLongPtrW$MH,"SetClassLongPtrW");
    }
    /**
     * {@snippet :
     * ULONG_PTR SetClassLongPtrW(HWND hWnd, int nIndex, LONG_PTR dwNewLong);
     * }
     */
    public static long SetClassLongPtrW(MemorySegment hWnd, int nIndex, long dwNewLong) {
        var mh$ = SetClassLongPtrW$MH();
        try {
            return (long)mh$.invokeExact(hWnd, nIndex, dwNewLong);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetProcessDefaultLayout$MH() {
        return RuntimeHelper.requireNonNull(constants$485.GetProcessDefaultLayout$MH,"GetProcessDefaultLayout");
    }
    /**
     * {@snippet :
     * BOOL GetProcessDefaultLayout(DWORD* pdwDefaultLayout);
     * }
     */
    public static int GetProcessDefaultLayout(MemorySegment pdwDefaultLayout) {
        var mh$ = GetProcessDefaultLayout$MH();
        try {
            return (int)mh$.invokeExact(pdwDefaultLayout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetProcessDefaultLayout$MH() {
        return RuntimeHelper.requireNonNull(constants$485.SetProcessDefaultLayout$MH,"SetProcessDefaultLayout");
    }
    /**
     * {@snippet :
     * BOOL SetProcessDefaultLayout(DWORD dwDefaultLayout);
     * }
     */
    public static int SetProcessDefaultLayout(int dwDefaultLayout) {
        var mh$ = SetProcessDefaultLayout$MH();
        try {
            return (int)mh$.invokeExact(dwDefaultLayout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDesktopWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$485.GetDesktopWindow$MH,"GetDesktopWindow");
    }
    /**
     * {@snippet :
     * HWND GetDesktopWindow();
     * }
     */
    public static MemorySegment GetDesktopWindow() {
        var mh$ = GetDesktopWindow$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetParent$MH() {
        return RuntimeHelper.requireNonNull(constants$486.GetParent$MH,"GetParent");
    }
    /**
     * {@snippet :
     * HWND GetParent(HWND hWnd);
     * }
     */
    public static MemorySegment GetParent(MemorySegment hWnd) {
        var mh$ = GetParent$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetParent$MH() {
        return RuntimeHelper.requireNonNull(constants$486.SetParent$MH,"SetParent");
    }
    /**
     * {@snippet :
     * HWND SetParent(HWND hWndChild, HWND hWndNewParent);
     * }
     */
    public static MemorySegment SetParent(MemorySegment hWndChild, MemorySegment hWndNewParent) {
        var mh$ = SetParent$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hWndChild, hWndNewParent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumChildWindows$MH() {
        return RuntimeHelper.requireNonNull(constants$486.EnumChildWindows$MH,"EnumChildWindows");
    }
    /**
     * {@snippet :
     * BOOL EnumChildWindows(HWND hWndParent, WNDENUMPROC lpEnumFunc, LPARAM lParam);
     * }
     */
    public static int EnumChildWindows(MemorySegment hWndParent, MemorySegment lpEnumFunc, long lParam) {
        var mh$ = EnumChildWindows$MH();
        try {
            return (int)mh$.invokeExact(hWndParent, lpEnumFunc, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindWindowA$MH() {
        return RuntimeHelper.requireNonNull(constants$486.FindWindowA$MH,"FindWindowA");
    }
    /**
     * {@snippet :
     * HWND FindWindowA(LPCSTR lpClassName, LPCSTR lpWindowName);
     * }
     */
    public static MemorySegment FindWindowA(MemorySegment lpClassName, MemorySegment lpWindowName) {
        var mh$ = FindWindowA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpClassName, lpWindowName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindWindowW$MH() {
        return RuntimeHelper.requireNonNull(constants$486.FindWindowW$MH,"FindWindowW");
    }
    /**
     * {@snippet :
     * HWND FindWindowW(LPCWSTR lpClassName, LPCWSTR lpWindowName);
     * }
     */
    public static MemorySegment FindWindowW(MemorySegment lpClassName, MemorySegment lpWindowName) {
        var mh$ = FindWindowW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpClassName, lpWindowName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindWindowExA$MH() {
        return RuntimeHelper.requireNonNull(constants$486.FindWindowExA$MH,"FindWindowExA");
    }
    /**
     * {@snippet :
     * HWND FindWindowExA(HWND hWndParent, HWND hWndChildAfter, LPCSTR lpszClass, LPCSTR lpszWindow);
     * }
     */
    public static MemorySegment FindWindowExA(MemorySegment hWndParent, MemorySegment hWndChildAfter, MemorySegment lpszClass, MemorySegment lpszWindow) {
        var mh$ = FindWindowExA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hWndParent, hWndChildAfter, lpszClass, lpszWindow);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindWindowExW$MH() {
        return RuntimeHelper.requireNonNull(constants$487.FindWindowExW$MH,"FindWindowExW");
    }
    /**
     * {@snippet :
     * HWND FindWindowExW(HWND hWndParent, HWND hWndChildAfter, LPCWSTR lpszClass, LPCWSTR lpszWindow);
     * }
     */
    public static MemorySegment FindWindowExW(MemorySegment hWndParent, MemorySegment hWndChildAfter, MemorySegment lpszClass, MemorySegment lpszWindow) {
        var mh$ = FindWindowExW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hWndParent, hWndChildAfter, lpszClass, lpszWindow);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetShellWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$487.GetShellWindow$MH,"GetShellWindow");
    }
    /**
     * {@snippet :
     * HWND GetShellWindow();
     * }
     */
    public static MemorySegment GetShellWindow() {
        var mh$ = GetShellWindow$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterShellHookWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$487.RegisterShellHookWindow$MH,"RegisterShellHookWindow");
    }
    /**
     * {@snippet :
     * BOOL RegisterShellHookWindow(HWND hwnd);
     * }
     */
    public static int RegisterShellHookWindow(MemorySegment hwnd) {
        var mh$ = RegisterShellHookWindow$MH();
        try {
            return (int)mh$.invokeExact(hwnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeregisterShellHookWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$487.DeregisterShellHookWindow$MH,"DeregisterShellHookWindow");
    }
    /**
     * {@snippet :
     * BOOL DeregisterShellHookWindow(HWND hwnd);
     * }
     */
    public static int DeregisterShellHookWindow(MemorySegment hwnd) {
        var mh$ = DeregisterShellHookWindow$MH();
        try {
            return (int)mh$.invokeExact(hwnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumWindows$MH() {
        return RuntimeHelper.requireNonNull(constants$487.EnumWindows$MH,"EnumWindows");
    }
    /**
     * {@snippet :
     * BOOL EnumWindows(WNDENUMPROC lpEnumFunc, LPARAM lParam);
     * }
     */
    public static int EnumWindows(MemorySegment lpEnumFunc, long lParam) {
        var mh$ = EnumWindows$MH();
        try {
            return (int)mh$.invokeExact(lpEnumFunc, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumThreadWindows$MH() {
        return RuntimeHelper.requireNonNull(constants$487.EnumThreadWindows$MH,"EnumThreadWindows");
    }
    /**
     * {@snippet :
     * BOOL EnumThreadWindows(DWORD dwThreadId, WNDENUMPROC lpfn, LPARAM lParam);
     * }
     */
    public static int EnumThreadWindows(int dwThreadId, MemorySegment lpfn, long lParam) {
        var mh$ = EnumThreadWindows$MH();
        try {
            return (int)mh$.invokeExact(dwThreadId, lpfn, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetClassNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$488.GetClassNameA$MH,"GetClassNameA");
    }
    /**
     * {@snippet :
     * int GetClassNameA(HWND hWnd, LPSTR lpClassName, int nMaxCount);
     * }
     */
    public static int GetClassNameA(MemorySegment hWnd, MemorySegment lpClassName, int nMaxCount) {
        var mh$ = GetClassNameA$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpClassName, nMaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetClassNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$488.GetClassNameW$MH,"GetClassNameW");
    }
    /**
     * {@snippet :
     * int GetClassNameW(HWND hWnd, LPWSTR lpClassName, int nMaxCount);
     * }
     */
    public static int GetClassNameW(MemorySegment hWnd, MemorySegment lpClassName, int nMaxCount) {
        var mh$ = GetClassNameW$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpClassName, nMaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTopWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$488.GetTopWindow$MH,"GetTopWindow");
    }
    /**
     * {@snippet :
     * HWND GetTopWindow(HWND hWnd);
     * }
     */
    public static MemorySegment GetTopWindow(MemorySegment hWnd) {
        var mh$ = GetTopWindow$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWindowThreadProcessId$MH() {
        return RuntimeHelper.requireNonNull(constants$488.GetWindowThreadProcessId$MH,"GetWindowThreadProcessId");
    }
    /**
     * {@snippet :
     * DWORD GetWindowThreadProcessId(HWND hWnd, LPDWORD lpdwProcessId);
     * }
     */
    public static int GetWindowThreadProcessId(MemorySegment hWnd, MemorySegment lpdwProcessId) {
        var mh$ = GetWindowThreadProcessId$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpdwProcessId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsGUIThread$MH() {
        return RuntimeHelper.requireNonNull(constants$488.IsGUIThread$MH,"IsGUIThread");
    }
    /**
     * {@snippet :
     * BOOL IsGUIThread(BOOL bConvert);
     * }
     */
    public static int IsGUIThread(int bConvert) {
        var mh$ = IsGUIThread$MH();
        try {
            return (int)mh$.invokeExact(bConvert);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetLastActivePopup$MH() {
        return RuntimeHelper.requireNonNull(constants$488.GetLastActivePopup$MH,"GetLastActivePopup");
    }
    /**
     * {@snippet :
     * HWND GetLastActivePopup(HWND hWnd);
     * }
     */
    public static MemorySegment GetLastActivePopup(MemorySegment hWnd) {
        var mh$ = GetLastActivePopup$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$489.GetWindow$MH,"GetWindow");
    }
    /**
     * {@snippet :
     * HWND GetWindow(HWND hWnd, UINT uCmd);
     * }
     */
    public static MemorySegment GetWindow(MemorySegment hWnd, int uCmd) {
        var mh$ = GetWindow$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hWnd, uCmd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWindowsHookA$MH() {
        return RuntimeHelper.requireNonNull(constants$489.SetWindowsHookA$MH,"SetWindowsHookA");
    }
    /**
     * {@snippet :
     * HHOOK SetWindowsHookA(int nFilterType, HOOKPROC pfnFilterProc);
     * }
     */
    public static MemorySegment SetWindowsHookA(int nFilterType, MemorySegment pfnFilterProc) {
        var mh$ = SetWindowsHookA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(nFilterType, pfnFilterProc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWindowsHookW$MH() {
        return RuntimeHelper.requireNonNull(constants$489.SetWindowsHookW$MH,"SetWindowsHookW");
    }
    /**
     * {@snippet :
     * HHOOK SetWindowsHookW(int nFilterType, HOOKPROC pfnFilterProc);
     * }
     */
    public static MemorySegment SetWindowsHookW(int nFilterType, MemorySegment pfnFilterProc) {
        var mh$ = SetWindowsHookW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(nFilterType, pfnFilterProc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnhookWindowsHook$MH() {
        return RuntimeHelper.requireNonNull(constants$489.UnhookWindowsHook$MH,"UnhookWindowsHook");
    }
    /**
     * {@snippet :
     * BOOL UnhookWindowsHook(int nCode, HOOKPROC pfnFilterProc);
     * }
     */
    public static int UnhookWindowsHook(int nCode, MemorySegment pfnFilterProc) {
        var mh$ = UnhookWindowsHook$MH();
        try {
            return (int)mh$.invokeExact(nCode, pfnFilterProc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWindowsHookExA$MH() {
        return RuntimeHelper.requireNonNull(constants$489.SetWindowsHookExA$MH,"SetWindowsHookExA");
    }
    /**
     * {@snippet :
     * HHOOK SetWindowsHookExA(int idHook, HOOKPROC lpfn, HINSTANCE hmod, DWORD dwThreadId);
     * }
     */
    public static MemorySegment SetWindowsHookExA(int idHook, MemorySegment lpfn, MemorySegment hmod, int dwThreadId) {
        var mh$ = SetWindowsHookExA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(idHook, lpfn, hmod, dwThreadId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWindowsHookExW$MH() {
        return RuntimeHelper.requireNonNull(constants$489.SetWindowsHookExW$MH,"SetWindowsHookExW");
    }
    /**
     * {@snippet :
     * HHOOK SetWindowsHookExW(int idHook, HOOKPROC lpfn, HINSTANCE hmod, DWORD dwThreadId);
     * }
     */
    public static MemorySegment SetWindowsHookExW(int idHook, MemorySegment lpfn, MemorySegment hmod, int dwThreadId) {
        var mh$ = SetWindowsHookExW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(idHook, lpfn, hmod, dwThreadId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnhookWindowsHookEx$MH() {
        return RuntimeHelper.requireNonNull(constants$490.UnhookWindowsHookEx$MH,"UnhookWindowsHookEx");
    }
    /**
     * {@snippet :
     * BOOL UnhookWindowsHookEx(HHOOK hhk);
     * }
     */
    public static int UnhookWindowsHookEx(MemorySegment hhk) {
        var mh$ = UnhookWindowsHookEx$MH();
        try {
            return (int)mh$.invokeExact(hhk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CallNextHookEx$MH() {
        return RuntimeHelper.requireNonNull(constants$490.CallNextHookEx$MH,"CallNextHookEx");
    }
    /**
     * {@snippet :
     * LRESULT CallNextHookEx(HHOOK hhk, int nCode, WPARAM wParam, LPARAM lParam);
     * }
     */
    public static long CallNextHookEx(MemorySegment hhk, int nCode, long wParam, long lParam) {
        var mh$ = CallNextHookEx$MH();
        try {
            return (long)mh$.invokeExact(hhk, nCode, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CheckMenuRadioItem$MH() {
        return RuntimeHelper.requireNonNull(constants$490.CheckMenuRadioItem$MH,"CheckMenuRadioItem");
    }
    /**
     * {@snippet :
     * BOOL CheckMenuRadioItem(HMENU hmenu, UINT first, UINT last, UINT check, UINT flags);
     * }
     */
    public static int CheckMenuRadioItem(MemorySegment hmenu, int first, int last, int check, int flags) {
        var mh$ = CheckMenuRadioItem$MH();
        try {
            return (int)mh$.invokeExact(hmenu, first, last, check, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct * PMENUITEMTEMPLATEHEADER;
     * }
     */
    public static final OfAddress PMENUITEMTEMPLATEHEADER = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct * PMENUITEMTEMPLATE;
     * }
     */
    public static final OfAddress PMENUITEMTEMPLATE = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle LoadBitmapA$MH() {
        return RuntimeHelper.requireNonNull(constants$490.LoadBitmapA$MH,"LoadBitmapA");
    }
    /**
     * {@snippet :
     * HBITMAP LoadBitmapA(HINSTANCE hInstance, LPCSTR lpBitmapName);
     * }
     */
    public static MemorySegment LoadBitmapA(MemorySegment hInstance, MemorySegment lpBitmapName) {
        var mh$ = LoadBitmapA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hInstance, lpBitmapName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadBitmapW$MH() {
        return RuntimeHelper.requireNonNull(constants$490.LoadBitmapW$MH,"LoadBitmapW");
    }
    /**
     * {@snippet :
     * HBITMAP LoadBitmapW(HINSTANCE hInstance, LPCWSTR lpBitmapName);
     * }
     */
    public static MemorySegment LoadBitmapW(MemorySegment hInstance, MemorySegment lpBitmapName) {
        var mh$ = LoadBitmapW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hInstance, lpBitmapName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadCursorA$MH() {
        return RuntimeHelper.requireNonNull(constants$490.LoadCursorA$MH,"LoadCursorA");
    }
    /**
     * {@snippet :
     * HCURSOR LoadCursorA(HINSTANCE hInstance, LPCSTR lpCursorName);
     * }
     */
    public static MemorySegment LoadCursorA(MemorySegment hInstance, MemorySegment lpCursorName) {
        var mh$ = LoadCursorA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hInstance, lpCursorName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadCursorW$MH() {
        return RuntimeHelper.requireNonNull(constants$491.LoadCursorW$MH,"LoadCursorW");
    }
    /**
     * {@snippet :
     * HCURSOR LoadCursorW(HINSTANCE hInstance, LPCWSTR lpCursorName);
     * }
     */
    public static MemorySegment LoadCursorW(MemorySegment hInstance, MemorySegment lpCursorName) {
        var mh$ = LoadCursorW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hInstance, lpCursorName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadCursorFromFileA$MH() {
        return RuntimeHelper.requireNonNull(constants$491.LoadCursorFromFileA$MH,"LoadCursorFromFileA");
    }
    /**
     * {@snippet :
     * HCURSOR LoadCursorFromFileA(LPCSTR lpFileName);
     * }
     */
    public static MemorySegment LoadCursorFromFileA(MemorySegment lpFileName) {
        var mh$ = LoadCursorFromFileA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadCursorFromFileW$MH() {
        return RuntimeHelper.requireNonNull(constants$491.LoadCursorFromFileW$MH,"LoadCursorFromFileW");
    }
    /**
     * {@snippet :
     * HCURSOR LoadCursorFromFileW(LPCWSTR lpFileName);
     * }
     */
    public static MemorySegment LoadCursorFromFileW(MemorySegment lpFileName) {
        var mh$ = LoadCursorFromFileW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateCursor$MH() {
        return RuntimeHelper.requireNonNull(constants$491.CreateCursor$MH,"CreateCursor");
    }
    /**
     * {@snippet :
     * HCURSOR CreateCursor(HINSTANCE hInst, int xHotSpot, int yHotSpot, int nWidth, int nHeight, void* pvANDPlane, void* pvXORPlane);
     * }
     */
    public static MemorySegment CreateCursor(MemorySegment hInst, int xHotSpot, int yHotSpot, int nWidth, int nHeight, MemorySegment pvANDPlane, MemorySegment pvXORPlane) {
        var mh$ = CreateCursor$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hInst, xHotSpot, yHotSpot, nWidth, nHeight, pvANDPlane, pvXORPlane);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DestroyCursor$MH() {
        return RuntimeHelper.requireNonNull(constants$491.DestroyCursor$MH,"DestroyCursor");
    }
    /**
     * {@snippet :
     * BOOL DestroyCursor(HCURSOR hCursor);
     * }
     */
    public static int DestroyCursor(MemorySegment hCursor) {
        var mh$ = DestroyCursor$MH();
        try {
            return (int)mh$.invokeExact(hCursor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetSystemCursor$MH() {
        return RuntimeHelper.requireNonNull(constants$491.SetSystemCursor$MH,"SetSystemCursor");
    }
    /**
     * {@snippet :
     * BOOL SetSystemCursor(HCURSOR hcur, DWORD id);
     * }
     */
    public static int SetSystemCursor(MemorySegment hcur, int id) {
        var mh$ = SetSystemCursor$MH();
        try {
            return (int)mh$.invokeExact(hcur, id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _ICONINFO* PICONINFO;
     * }
     */
    public static final OfAddress PICONINFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle LoadIconA$MH() {
        return RuntimeHelper.requireNonNull(constants$492.LoadIconA$MH,"LoadIconA");
    }
    /**
     * {@snippet :
     * HICON LoadIconA(HINSTANCE hInstance, LPCSTR lpIconName);
     * }
     */
    public static MemorySegment LoadIconA(MemorySegment hInstance, MemorySegment lpIconName) {
        var mh$ = LoadIconA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hInstance, lpIconName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadIconW$MH() {
        return RuntimeHelper.requireNonNull(constants$492.LoadIconW$MH,"LoadIconW");
    }
    /**
     * {@snippet :
     * HICON LoadIconW(HINSTANCE hInstance, LPCWSTR lpIconName);
     * }
     */
    public static MemorySegment LoadIconW(MemorySegment hInstance, MemorySegment lpIconName) {
        var mh$ = LoadIconW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hInstance, lpIconName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PrivateExtractIconsA$MH() {
        return RuntimeHelper.requireNonNull(constants$492.PrivateExtractIconsA$MH,"PrivateExtractIconsA");
    }
    /**
     * {@snippet :
     * UINT PrivateExtractIconsA(LPCSTR szFileName, int nIconIndex, int cxIcon, int cyIcon, HICON* phicon, UINT* piconid, UINT nIcons, UINT flags);
     * }
     */
    public static int PrivateExtractIconsA(MemorySegment szFileName, int nIconIndex, int cxIcon, int cyIcon, MemorySegment phicon, MemorySegment piconid, int nIcons, int flags) {
        var mh$ = PrivateExtractIconsA$MH();
        try {
            return (int)mh$.invokeExact(szFileName, nIconIndex, cxIcon, cyIcon, phicon, piconid, nIcons, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PrivateExtractIconsW$MH() {
        return RuntimeHelper.requireNonNull(constants$492.PrivateExtractIconsW$MH,"PrivateExtractIconsW");
    }
    /**
     * {@snippet :
     * UINT PrivateExtractIconsW(LPCWSTR szFileName, int nIconIndex, int cxIcon, int cyIcon, HICON* phicon, UINT* piconid, UINT nIcons, UINT flags);
     * }
     */
    public static int PrivateExtractIconsW(MemorySegment szFileName, int nIconIndex, int cxIcon, int cyIcon, MemorySegment phicon, MemorySegment piconid, int nIcons, int flags) {
        var mh$ = PrivateExtractIconsW$MH();
        try {
            return (int)mh$.invokeExact(szFileName, nIconIndex, cxIcon, cyIcon, phicon, piconid, nIcons, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateIcon$MH() {
        return RuntimeHelper.requireNonNull(constants$492.CreateIcon$MH,"CreateIcon");
    }
    /**
     * {@snippet :
     * HICON CreateIcon(HINSTANCE hInstance, int nWidth, int nHeight, BYTE cPlanes, BYTE cBitsPixel, const BYTE* lpbANDbits, const BYTE* lpbXORbits);
     * }
     */
    public static MemorySegment CreateIcon(MemorySegment hInstance, int nWidth, int nHeight, byte cPlanes, byte cBitsPixel, MemorySegment lpbANDbits, MemorySegment lpbXORbits) {
        var mh$ = CreateIcon$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hInstance, nWidth, nHeight, cPlanes, cBitsPixel, lpbANDbits, lpbXORbits);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DestroyIcon$MH() {
        return RuntimeHelper.requireNonNull(constants$492.DestroyIcon$MH,"DestroyIcon");
    }
    /**
     * {@snippet :
     * BOOL DestroyIcon(HICON hIcon);
     * }
     */
    public static int DestroyIcon(MemorySegment hIcon) {
        var mh$ = DestroyIcon$MH();
        try {
            return (int)mh$.invokeExact(hIcon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LookupIconIdFromDirectory$MH() {
        return RuntimeHelper.requireNonNull(constants$493.LookupIconIdFromDirectory$MH,"LookupIconIdFromDirectory");
    }
    /**
     * {@snippet :
     * int LookupIconIdFromDirectory(PBYTE presbits, BOOL fIcon);
     * }
     */
    public static int LookupIconIdFromDirectory(MemorySegment presbits, int fIcon) {
        var mh$ = LookupIconIdFromDirectory$MH();
        try {
            return (int)mh$.invokeExact(presbits, fIcon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LookupIconIdFromDirectoryEx$MH() {
        return RuntimeHelper.requireNonNull(constants$493.LookupIconIdFromDirectoryEx$MH,"LookupIconIdFromDirectoryEx");
    }
    /**
     * {@snippet :
     * int LookupIconIdFromDirectoryEx(PBYTE presbits, BOOL fIcon, int cxDesired, int cyDesired, UINT Flags);
     * }
     */
    public static int LookupIconIdFromDirectoryEx(MemorySegment presbits, int fIcon, int cxDesired, int cyDesired, int Flags) {
        var mh$ = LookupIconIdFromDirectoryEx$MH();
        try {
            return (int)mh$.invokeExact(presbits, fIcon, cxDesired, cyDesired, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateIconFromResource$MH() {
        return RuntimeHelper.requireNonNull(constants$493.CreateIconFromResource$MH,"CreateIconFromResource");
    }
    /**
     * {@snippet :
     * HICON CreateIconFromResource(PBYTE presbits, DWORD dwResSize, BOOL fIcon, DWORD dwVer);
     * }
     */
    public static MemorySegment CreateIconFromResource(MemorySegment presbits, int dwResSize, int fIcon, int dwVer) {
        var mh$ = CreateIconFromResource$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(presbits, dwResSize, fIcon, dwVer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateIconFromResourceEx$MH() {
        return RuntimeHelper.requireNonNull(constants$493.CreateIconFromResourceEx$MH,"CreateIconFromResourceEx");
    }
    /**
     * {@snippet :
     * HICON CreateIconFromResourceEx(PBYTE presbits, DWORD dwResSize, BOOL fIcon, DWORD dwVer, int cxDesired, int cyDesired, UINT Flags);
     * }
     */
    public static MemorySegment CreateIconFromResourceEx(MemorySegment presbits, int dwResSize, int fIcon, int dwVer, int cxDesired, int cyDesired, int Flags) {
        var mh$ = CreateIconFromResourceEx$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(presbits, dwResSize, fIcon, dwVer, cxDesired, cyDesired, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct tagCURSORSHAPE* LPCURSORSHAPE;
     * }
     */
    public static final OfAddress LPCURSORSHAPE = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle SetThreadCursorCreationScaling$MH() {
        return RuntimeHelper.requireNonNull(constants$493.SetThreadCursorCreationScaling$MH,"SetThreadCursorCreationScaling");
    }
    /**
     * {@snippet :
     * UINT SetThreadCursorCreationScaling(UINT cursorDpi);
     * }
     */
    public static int SetThreadCursorCreationScaling(int cursorDpi) {
        var mh$ = SetThreadCursorCreationScaling$MH();
        try {
            return (int)mh$.invokeExact(cursorDpi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadImageA$MH() {
        return RuntimeHelper.requireNonNull(constants$493.LoadImageA$MH,"LoadImageA");
    }
    /**
     * {@snippet :
     * HANDLE LoadImageA(HINSTANCE hInst, LPCSTR name, UINT type, int cx, int cy, UINT fuLoad);
     * }
     */
    public static MemorySegment LoadImageA(MemorySegment hInst, MemorySegment name, int type, int cx, int cy, int fuLoad) {
        var mh$ = LoadImageA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hInst, name, type, cx, cy, fuLoad);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadImageW$MH() {
        return RuntimeHelper.requireNonNull(constants$494.LoadImageW$MH,"LoadImageW");
    }
    /**
     * {@snippet :
     * HANDLE LoadImageW(HINSTANCE hInst, LPCWSTR name, UINT type, int cx, int cy, UINT fuLoad);
     * }
     */
    public static MemorySegment LoadImageW(MemorySegment hInst, MemorySegment name, int type, int cx, int cy, int fuLoad) {
        var mh$ = LoadImageW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hInst, name, type, cx, cy, fuLoad);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CopyImage$MH() {
        return RuntimeHelper.requireNonNull(constants$494.CopyImage$MH,"CopyImage");
    }
    /**
     * {@snippet :
     * HANDLE CopyImage(HANDLE h, UINT type, int cx, int cy, UINT flags);
     * }
     */
    public static MemorySegment CopyImage(MemorySegment h, int type, int cx, int cy, int flags) {
        var mh$ = CopyImage$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(h, type, cx, cy, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawIconEx$MH() {
        return RuntimeHelper.requireNonNull(constants$494.DrawIconEx$MH,"DrawIconEx");
    }
    /**
     * {@snippet :
     * BOOL DrawIconEx(HDC hdc, int xLeft, int yTop, HICON hIcon, int cxWidth, int cyWidth, UINT istepIfAniCur, HBRUSH hbrFlickerFreeDraw, UINT diFlags);
     * }
     */
    public static int DrawIconEx(MemorySegment hdc, int xLeft, int yTop, MemorySegment hIcon, int cxWidth, int cyWidth, int istepIfAniCur, MemorySegment hbrFlickerFreeDraw, int diFlags) {
        var mh$ = DrawIconEx$MH();
        try {
            return (int)mh$.invokeExact(hdc, xLeft, yTop, hIcon, cxWidth, cyWidth, istepIfAniCur, hbrFlickerFreeDraw, diFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateIconIndirect$MH() {
        return RuntimeHelper.requireNonNull(constants$494.CreateIconIndirect$MH,"CreateIconIndirect");
    }
    /**
     * {@snippet :
     * HICON CreateIconIndirect(PICONINFO piconinfo);
     * }
     */
    public static MemorySegment CreateIconIndirect(MemorySegment piconinfo) {
        var mh$ = CreateIconIndirect$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(piconinfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CopyIcon$MH() {
        return RuntimeHelper.requireNonNull(constants$494.CopyIcon$MH,"CopyIcon");
    }
    /**
     * {@snippet :
     * HICON CopyIcon(HICON hIcon);
     * }
     */
    public static MemorySegment CopyIcon(MemorySegment hIcon) {
        var mh$ = CopyIcon$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hIcon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetIconInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$494.GetIconInfo$MH,"GetIconInfo");
    }
    /**
     * {@snippet :
     * BOOL GetIconInfo(HICON hIcon, PICONINFO piconinfo);
     * }
     */
    public static int GetIconInfo(MemorySegment hIcon, MemorySegment piconinfo) {
        var mh$ = GetIconInfo$MH();
        try {
            return (int)mh$.invokeExact(hIcon, piconinfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _ICONINFOEXA* PICONINFOEXA;
     * }
     */
    public static final OfAddress PICONINFOEXA = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _ICONINFOEXW* PICONINFOEXW;
     * }
     */
    public static final OfAddress PICONINFOEXW = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _ICONINFOEXA* PICONINFOEX;
     * }
     */
    public static final OfAddress PICONINFOEX = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetIconInfoExA$MH() {
        return RuntimeHelper.requireNonNull(constants$495.GetIconInfoExA$MH,"GetIconInfoExA");
    }
    /**
     * {@snippet :
     * BOOL GetIconInfoExA(HICON hicon, PICONINFOEXA piconinfo);
     * }
     */
    public static int GetIconInfoExA(MemorySegment hicon, MemorySegment piconinfo) {
        var mh$ = GetIconInfoExA$MH();
        try {
            return (int)mh$.invokeExact(hicon, piconinfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetIconInfoExW$MH() {
        return RuntimeHelper.requireNonNull(constants$495.GetIconInfoExW$MH,"GetIconInfoExW");
    }
    /**
     * {@snippet :
     * BOOL GetIconInfoExW(HICON hicon, PICONINFOEXW piconinfo);
     * }
     */
    public static int GetIconInfoExW(MemorySegment hicon, MemorySegment piconinfo) {
        var mh$ = GetIconInfoExW$MH();
        try {
            return (int)mh$.invokeExact(hicon, piconinfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum .EDIT_CONTROL_FEATURE_ENTERPRISE_DATA_PROTECTION_PASTE_SUPPORT = 0;
     * }
     */
    public static int EDIT_CONTROL_FEATURE_ENTERPRISE_DATA_PROTECTION_PASTE_SUPPORT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .EDIT_CONTROL_FEATURE_PASTE_NOTIFICATIONS = 1;
     * }
     */
    public static int EDIT_CONTROL_FEATURE_PASTE_NOTIFICATIONS() {
        return (int)1L;
    }
    public static MethodHandle IsDialogMessageA$MH() {
        return RuntimeHelper.requireNonNull(constants$495.IsDialogMessageA$MH,"IsDialogMessageA");
    }
    /**
     * {@snippet :
     * BOOL IsDialogMessageA(HWND hDlg, LPMSG lpMsg);
     * }
     */
    public static int IsDialogMessageA(MemorySegment hDlg, MemorySegment lpMsg) {
        var mh$ = IsDialogMessageA$MH();
        try {
            return (int)mh$.invokeExact(hDlg, lpMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsDialogMessageW$MH() {
        return RuntimeHelper.requireNonNull(constants$495.IsDialogMessageW$MH,"IsDialogMessageW");
    }
    /**
     * {@snippet :
     * BOOL IsDialogMessageW(HWND hDlg, LPMSG lpMsg);
     * }
     */
    public static int IsDialogMessageW(MemorySegment hDlg, MemorySegment lpMsg) {
        var mh$ = IsDialogMessageW$MH();
        try {
            return (int)mh$.invokeExact(hDlg, lpMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MapDialogRect$MH() {
        return RuntimeHelper.requireNonNull(constants$495.MapDialogRect$MH,"MapDialogRect");
    }
    /**
     * {@snippet :
     * BOOL MapDialogRect(HWND hDlg, LPRECT lpRect);
     * }
     */
    public static int MapDialogRect(MemorySegment hDlg, MemorySegment lpRect) {
        var mh$ = MapDialogRect$MH();
        try {
            return (int)mh$.invokeExact(hDlg, lpRect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DlgDirListA$MH() {
        return RuntimeHelper.requireNonNull(constants$495.DlgDirListA$MH,"DlgDirListA");
    }
    /**
     * {@snippet :
     * int DlgDirListA(HWND hDlg, LPSTR lpPathSpec, int nIDListBox, int nIDStaticPath, UINT uFileType);
     * }
     */
    public static int DlgDirListA(MemorySegment hDlg, MemorySegment lpPathSpec, int nIDListBox, int nIDStaticPath, int uFileType) {
        var mh$ = DlgDirListA$MH();
        try {
            return (int)mh$.invokeExact(hDlg, lpPathSpec, nIDListBox, nIDStaticPath, uFileType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DlgDirListW$MH() {
        return RuntimeHelper.requireNonNull(constants$496.DlgDirListW$MH,"DlgDirListW");
    }
    /**
     * {@snippet :
     * int DlgDirListW(HWND hDlg, LPWSTR lpPathSpec, int nIDListBox, int nIDStaticPath, UINT uFileType);
     * }
     */
    public static int DlgDirListW(MemorySegment hDlg, MemorySegment lpPathSpec, int nIDListBox, int nIDStaticPath, int uFileType) {
        var mh$ = DlgDirListW$MH();
        try {
            return (int)mh$.invokeExact(hDlg, lpPathSpec, nIDListBox, nIDStaticPath, uFileType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DlgDirSelectExA$MH() {
        return RuntimeHelper.requireNonNull(constants$496.DlgDirSelectExA$MH,"DlgDirSelectExA");
    }
    /**
     * {@snippet :
     * BOOL DlgDirSelectExA(HWND hwndDlg, LPSTR lpString, int chCount, int idListBox);
     * }
     */
    public static int DlgDirSelectExA(MemorySegment hwndDlg, MemorySegment lpString, int chCount, int idListBox) {
        var mh$ = DlgDirSelectExA$MH();
        try {
            return (int)mh$.invokeExact(hwndDlg, lpString, chCount, idListBox);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DlgDirSelectExW$MH() {
        return RuntimeHelper.requireNonNull(constants$496.DlgDirSelectExW$MH,"DlgDirSelectExW");
    }
    /**
     * {@snippet :
     * BOOL DlgDirSelectExW(HWND hwndDlg, LPWSTR lpString, int chCount, int idListBox);
     * }
     */
    public static int DlgDirSelectExW(MemorySegment hwndDlg, MemorySegment lpString, int chCount, int idListBox) {
        var mh$ = DlgDirSelectExW$MH();
        try {
            return (int)mh$.invokeExact(hwndDlg, lpString, chCount, idListBox);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DlgDirListComboBoxA$MH() {
        return RuntimeHelper.requireNonNull(constants$496.DlgDirListComboBoxA$MH,"DlgDirListComboBoxA");
    }
    /**
     * {@snippet :
     * int DlgDirListComboBoxA(HWND hDlg, LPSTR lpPathSpec, int nIDComboBox, int nIDStaticPath, UINT uFiletype);
     * }
     */
    public static int DlgDirListComboBoxA(MemorySegment hDlg, MemorySegment lpPathSpec, int nIDComboBox, int nIDStaticPath, int uFiletype) {
        var mh$ = DlgDirListComboBoxA$MH();
        try {
            return (int)mh$.invokeExact(hDlg, lpPathSpec, nIDComboBox, nIDStaticPath, uFiletype);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DlgDirListComboBoxW$MH() {
        return RuntimeHelper.requireNonNull(constants$496.DlgDirListComboBoxW$MH,"DlgDirListComboBoxW");
    }
    /**
     * {@snippet :
     * int DlgDirListComboBoxW(HWND hDlg, LPWSTR lpPathSpec, int nIDComboBox, int nIDStaticPath, UINT uFiletype);
     * }
     */
    public static int DlgDirListComboBoxW(MemorySegment hDlg, MemorySegment lpPathSpec, int nIDComboBox, int nIDStaticPath, int uFiletype) {
        var mh$ = DlgDirListComboBoxW$MH();
        try {
            return (int)mh$.invokeExact(hDlg, lpPathSpec, nIDComboBox, nIDStaticPath, uFiletype);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DlgDirSelectComboBoxExA$MH() {
        return RuntimeHelper.requireNonNull(constants$496.DlgDirSelectComboBoxExA$MH,"DlgDirSelectComboBoxExA");
    }
    /**
     * {@snippet :
     * BOOL DlgDirSelectComboBoxExA(HWND hwndDlg, LPSTR lpString, int cchOut, int idComboBox);
     * }
     */
    public static int DlgDirSelectComboBoxExA(MemorySegment hwndDlg, MemorySegment lpString, int cchOut, int idComboBox) {
        var mh$ = DlgDirSelectComboBoxExA$MH();
        try {
            return (int)mh$.invokeExact(hwndDlg, lpString, cchOut, idComboBox);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DlgDirSelectComboBoxExW$MH() {
        return RuntimeHelper.requireNonNull(constants$497.DlgDirSelectComboBoxExW$MH,"DlgDirSelectComboBoxExW");
    }
    /**
     * {@snippet :
     * BOOL DlgDirSelectComboBoxExW(HWND hwndDlg, LPWSTR lpString, int cchOut, int idComboBox);
     * }
     */
    public static int DlgDirSelectComboBoxExW(MemorySegment hwndDlg, MemorySegment lpString, int cchOut, int idComboBox) {
        var mh$ = DlgDirSelectComboBoxExW$MH();
        try {
            return (int)mh$.invokeExact(hwndDlg, lpString, cchOut, idComboBox);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct tagSCROLLINFO* LPSCROLLINFO;
     * }
     */
    public static final OfAddress LPSCROLLINFO = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagSCROLLINFO* LPCSCROLLINFO;
     * }
     */
    public static final OfAddress LPCSCROLLINFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle SetScrollInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$497.SetScrollInfo$MH,"SetScrollInfo");
    }
    /**
     * {@snippet :
     * int SetScrollInfo(HWND hwnd, int nBar, LPCSCROLLINFO lpsi, BOOL redraw);
     * }
     */
    public static int SetScrollInfo(MemorySegment hwnd, int nBar, MemorySegment lpsi, int redraw) {
        var mh$ = SetScrollInfo$MH();
        try {
            return (int)mh$.invokeExact(hwnd, nBar, lpsi, redraw);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetScrollInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$497.GetScrollInfo$MH,"GetScrollInfo");
    }
    /**
     * {@snippet :
     * BOOL GetScrollInfo(HWND hwnd, int nBar, LPSCROLLINFO lpsi);
     * }
     */
    public static int GetScrollInfo(MemorySegment hwnd, int nBar, MemorySegment lpsi) {
        var mh$ = GetScrollInfo$MH();
        try {
            return (int)mh$.invokeExact(hwnd, nBar, lpsi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct tagMDICREATESTRUCTA* LPMDICREATESTRUCTA;
     * }
     */
    public static final OfAddress LPMDICREATESTRUCTA = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagMDICREATESTRUCTW* LPMDICREATESTRUCTW;
     * }
     */
    public static final OfAddress LPMDICREATESTRUCTW = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagMDICREATESTRUCTA* LPMDICREATESTRUCT;
     * }
     */
    public static final OfAddress LPMDICREATESTRUCT = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagCLIENTCREATESTRUCT* LPCLIENTCREATESTRUCT;
     * }
     */
    public static final OfAddress LPCLIENTCREATESTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle DefFrameProcA$MH() {
        return RuntimeHelper.requireNonNull(constants$497.DefFrameProcA$MH,"DefFrameProcA");
    }
    /**
     * {@snippet :
     * LRESULT DefFrameProcA(HWND hWnd, HWND hWndMDIClient, UINT uMsg, WPARAM wParam, LPARAM lParam);
     * }
     */
    public static long DefFrameProcA(MemorySegment hWnd, MemorySegment hWndMDIClient, int uMsg, long wParam, long lParam) {
        var mh$ = DefFrameProcA$MH();
        try {
            return (long)mh$.invokeExact(hWnd, hWndMDIClient, uMsg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DefFrameProcW$MH() {
        return RuntimeHelper.requireNonNull(constants$497.DefFrameProcW$MH,"DefFrameProcW");
    }
    /**
     * {@snippet :
     * LRESULT DefFrameProcW(HWND hWnd, HWND hWndMDIClient, UINT uMsg, WPARAM wParam, LPARAM lParam);
     * }
     */
    public static long DefFrameProcW(MemorySegment hWnd, MemorySegment hWndMDIClient, int uMsg, long wParam, long lParam) {
        var mh$ = DefFrameProcW$MH();
        try {
            return (long)mh$.invokeExact(hWnd, hWndMDIClient, uMsg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DefMDIChildProcA$MH() {
        return RuntimeHelper.requireNonNull(constants$497.DefMDIChildProcA$MH,"DefMDIChildProcA");
    }
    /**
     * {@snippet :
     * LRESULT DefMDIChildProcA(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam);
     * }
     */
    public static long DefMDIChildProcA(MemorySegment hWnd, int uMsg, long wParam, long lParam) {
        var mh$ = DefMDIChildProcA$MH();
        try {
            return (long)mh$.invokeExact(hWnd, uMsg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DefMDIChildProcW$MH() {
        return RuntimeHelper.requireNonNull(constants$498.DefMDIChildProcW$MH,"DefMDIChildProcW");
    }
    /**
     * {@snippet :
     * LRESULT DefMDIChildProcW(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam);
     * }
     */
    public static long DefMDIChildProcW(MemorySegment hWnd, int uMsg, long wParam, long lParam) {
        var mh$ = DefMDIChildProcW$MH();
        try {
            return (long)mh$.invokeExact(hWnd, uMsg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TranslateMDISysAccel$MH() {
        return RuntimeHelper.requireNonNull(constants$498.TranslateMDISysAccel$MH,"TranslateMDISysAccel");
    }
    /**
     * {@snippet :
     * BOOL TranslateMDISysAccel(HWND hWndClient, LPMSG lpMsg);
     * }
     */
    public static int TranslateMDISysAccel(MemorySegment hWndClient, MemorySegment lpMsg) {
        var mh$ = TranslateMDISysAccel$MH();
        try {
            return (int)mh$.invokeExact(hWndClient, lpMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ArrangeIconicWindows$MH() {
        return RuntimeHelper.requireNonNull(constants$498.ArrangeIconicWindows$MH,"ArrangeIconicWindows");
    }
    /**
     * {@snippet :
     * UINT ArrangeIconicWindows(HWND hWnd);
     * }
     */
    public static int ArrangeIconicWindows(MemorySegment hWnd) {
        var mh$ = ArrangeIconicWindows$MH();
        try {
            return (int)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateMDIWindowA$MH() {
        return RuntimeHelper.requireNonNull(constants$498.CreateMDIWindowA$MH,"CreateMDIWindowA");
    }
    /**
     * {@snippet :
     * HWND CreateMDIWindowA(LPCSTR lpClassName, LPCSTR lpWindowName, DWORD dwStyle, int X, int Y, int nWidth, int nHeight, HWND hWndParent, HINSTANCE hInstance, LPARAM lParam);
     * }
     */
    public static MemorySegment CreateMDIWindowA(MemorySegment lpClassName, MemorySegment lpWindowName, int dwStyle, int X, int Y, int nWidth, int nHeight, MemorySegment hWndParent, MemorySegment hInstance, long lParam) {
        var mh$ = CreateMDIWindowA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpClassName, lpWindowName, dwStyle, X, Y, nWidth, nHeight, hWndParent, hInstance, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateMDIWindowW$MH() {
        return RuntimeHelper.requireNonNull(constants$498.CreateMDIWindowW$MH,"CreateMDIWindowW");
    }
    /**
     * {@snippet :
     * HWND CreateMDIWindowW(LPCWSTR lpClassName, LPCWSTR lpWindowName, DWORD dwStyle, int X, int Y, int nWidth, int nHeight, HWND hWndParent, HINSTANCE hInstance, LPARAM lParam);
     * }
     */
    public static MemorySegment CreateMDIWindowW(MemorySegment lpClassName, MemorySegment lpWindowName, int dwStyle, int X, int Y, int nWidth, int nHeight, MemorySegment hWndParent, MemorySegment hInstance, long lParam) {
        var mh$ = CreateMDIWindowW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpClassName, lpWindowName, dwStyle, X, Y, nWidth, nHeight, hWndParent, hInstance, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TileWindows$MH() {
        return RuntimeHelper.requireNonNull(constants$498.TileWindows$MH,"TileWindows");
    }
    /**
     * {@snippet :
     * WORD TileWindows(HWND hwndParent, UINT wHow, const RECT* lpRect, UINT cKids, const HWND* lpKids);
     * }
     */
    public static short TileWindows(MemorySegment hwndParent, int wHow, MemorySegment lpRect, int cKids, MemorySegment lpKids) {
        var mh$ = TileWindows$MH();
        try {
            return (short)mh$.invokeExact(hwndParent, wHow, lpRect, cKids, lpKids);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CascadeWindows$MH() {
        return RuntimeHelper.requireNonNull(constants$499.CascadeWindows$MH,"CascadeWindows");
    }
    /**
     * {@snippet :
     * WORD CascadeWindows(HWND hwndParent, UINT wHow, const RECT* lpRect, UINT cKids, const HWND* lpKids);
     * }
     */
    public static short CascadeWindows(MemorySegment hwndParent, int wHow, MemorySegment lpRect, int cKids, MemorySegment lpKids) {
        var mh$ = CascadeWindows$MH();
        try {
            return (short)mh$.invokeExact(hwndParent, wHow, lpRect, cKids, lpKids);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned long HELPPOLY;
     * }
     */
    public static final OfInt HELPPOLY = Constants$root.C_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagMULTIKEYHELPA* PMULTIKEYHELPA;
     * }
     */
    public static final OfAddress PMULTIKEYHELPA = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagMULTIKEYHELPA* LPMULTIKEYHELPA;
     * }
     */
    public static final OfAddress LPMULTIKEYHELPA = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagMULTIKEYHELPW* PMULTIKEYHELPW;
     * }
     */
    public static final OfAddress PMULTIKEYHELPW = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagMULTIKEYHELPW* LPMULTIKEYHELPW;
     * }
     */
    public static final OfAddress LPMULTIKEYHELPW = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagMULTIKEYHELPA* PMULTIKEYHELP;
     * }
     */
    public static final OfAddress PMULTIKEYHELP = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagMULTIKEYHELPA* LPMULTIKEYHELP;
     * }
     */
    public static final OfAddress LPMULTIKEYHELP = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagHELPWININFOA* PHELPWININFOA;
     * }
     */
    public static final OfAddress PHELPWININFOA = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagHELPWININFOA* LPHELPWININFOA;
     * }
     */
    public static final OfAddress LPHELPWININFOA = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagHELPWININFOW* PHELPWININFOW;
     * }
     */
    public static final OfAddress PHELPWININFOW = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagHELPWININFOW* LPHELPWININFOW;
     * }
     */
    public static final OfAddress LPHELPWININFOW = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagHELPWININFOA* PHELPWININFO;
     * }
     */
    public static final OfAddress PHELPWININFO = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagHELPWININFOA* LPHELPWININFO;
     * }
     */
    public static final OfAddress LPHELPWININFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle WinHelpA$MH() {
        return RuntimeHelper.requireNonNull(constants$499.WinHelpA$MH,"WinHelpA");
    }
    /**
     * {@snippet :
     * BOOL WinHelpA(HWND hWndMain, LPCSTR lpszHelp, UINT uCommand, ULONG_PTR dwData);
     * }
     */
    public static int WinHelpA(MemorySegment hWndMain, MemorySegment lpszHelp, int uCommand, long dwData) {
        var mh$ = WinHelpA$MH();
        try {
            return (int)mh$.invokeExact(hWndMain, lpszHelp, uCommand, dwData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WinHelpW$MH() {
        return RuntimeHelper.requireNonNull(constants$499.WinHelpW$MH,"WinHelpW");
    }
    /**
     * {@snippet :
     * BOOL WinHelpW(HWND hWndMain, LPCWSTR lpszHelp, UINT uCommand, ULONG_PTR dwData);
     * }
     */
    public static int WinHelpW(MemorySegment hWndMain, MemorySegment lpszHelp, int uCommand, long dwData) {
        var mh$ = WinHelpW$MH();
        try {
            return (int)mh$.invokeExact(hWndMain, lpszHelp, uCommand, dwData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetGuiResources$MH() {
        return RuntimeHelper.requireNonNull(constants$499.GetGuiResources$MH,"GetGuiResources");
    }
    /**
     * {@snippet :
     * DWORD GetGuiResources(HANDLE hProcess, DWORD uiFlags);
     * }
     */
    public static int GetGuiResources(MemorySegment hProcess, int uiFlags) {
        var mh$ = GetGuiResources$MH();
        try {
            return (int)mh$.invokeExact(hProcess, uiFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct tagTouchPredictionParameters* PTOUCHPREDICTIONPARAMETERS;
     * }
     */
    public static final OfAddress PTOUCHPREDICTIONPARAMETERS = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * enum tagHANDEDNESS.HANDEDNESS_LEFT = 0;
     * }
     */
    public static int HANDEDNESS_LEFT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum tagHANDEDNESS.HANDEDNESS_RIGHT = 1;
     * }
     */
    public static int HANDEDNESS_RIGHT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * typedef enum tagHANDEDNESS* PHANDEDNESS;
     * }
     */
    public static final OfAddress PHANDEDNESS = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagNONCLIENTMETRICSA* PNONCLIENTMETRICSA;
     * }
     */
    public static final OfAddress PNONCLIENTMETRICSA = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagNONCLIENTMETRICSA* LPNONCLIENTMETRICSA;
     * }
     */
    public static final OfAddress LPNONCLIENTMETRICSA = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagNONCLIENTMETRICSW* PNONCLIENTMETRICSW;
     * }
     */
    public static final OfAddress PNONCLIENTMETRICSW = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagNONCLIENTMETRICSW* LPNONCLIENTMETRICSW;
     * }
     */
    public static final OfAddress LPNONCLIENTMETRICSW = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagNONCLIENTMETRICSA* PNONCLIENTMETRICS;
     * }
     */
    public static final OfAddress PNONCLIENTMETRICS = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagNONCLIENTMETRICSA* LPNONCLIENTMETRICS;
     * }
     */
    public static final OfAddress LPNONCLIENTMETRICS = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagMINIMIZEDMETRICS* PMINIMIZEDMETRICS;
     * }
     */
    public static final OfAddress PMINIMIZEDMETRICS = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagMINIMIZEDMETRICS* LPMINIMIZEDMETRICS;
     * }
     */
    public static final OfAddress LPMINIMIZEDMETRICS = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagICONMETRICSA* PICONMETRICSA;
     * }
     */
    public static final OfAddress PICONMETRICSA = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagICONMETRICSA* LPICONMETRICSA;
     * }
     */
    public static final OfAddress LPICONMETRICSA = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagICONMETRICSW* PICONMETRICSW;
     * }
     */
    public static final OfAddress PICONMETRICSW = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagICONMETRICSW* LPICONMETRICSW;
     * }
     */
    public static final OfAddress LPICONMETRICSW = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagICONMETRICSA* PICONMETRICS;
     * }
     */
    public static final OfAddress PICONMETRICS = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagICONMETRICSA* LPICONMETRICS;
     * }
     */
    public static final OfAddress LPICONMETRICS = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagANIMATIONINFO* LPANIMATIONINFO;
     * }
     */
    public static final OfAddress LPANIMATIONINFO = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagSERIALKEYSA* LPSERIALKEYSA;
     * }
     */
    public static final OfAddress LPSERIALKEYSA = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagSERIALKEYSW* LPSERIALKEYSW;
     * }
     */
    public static final OfAddress LPSERIALKEYSW = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagSERIALKEYSA* LPSERIALKEYS;
     * }
     */
    public static final OfAddress LPSERIALKEYS = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagHIGHCONTRASTA* LPHIGHCONTRASTA;
     * }
     */
    public static final OfAddress LPHIGHCONTRASTA = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagHIGHCONTRASTW* LPHIGHCONTRASTW;
     * }
     */
    public static final OfAddress LPHIGHCONTRASTW = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagHIGHCONTRASTA* LPHIGHCONTRAST;
     * }
     */
    public static final OfAddress LPHIGHCONTRAST = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _VIDEOPARAMETERS* PVIDEOPARAMETERS;
     * }
     */
    public static final OfAddress PVIDEOPARAMETERS = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _VIDEOPARAMETERS* LPVIDEOPARAMETERS;
     * }
     */
    public static final OfAddress LPVIDEOPARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle ChangeDisplaySettingsA$MH() {
        return RuntimeHelper.requireNonNull(constants$499.ChangeDisplaySettingsA$MH,"ChangeDisplaySettingsA");
    }
    /**
     * {@snippet :
     * LONG ChangeDisplaySettingsA(DEVMODEA* lpDevMode, DWORD dwFlags);
     * }
     */
    public static int ChangeDisplaySettingsA(MemorySegment lpDevMode, int dwFlags) {
        var mh$ = ChangeDisplaySettingsA$MH();
        try {
            return (int)mh$.invokeExact(lpDevMode, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ChangeDisplaySettingsW$MH() {
        return RuntimeHelper.requireNonNull(constants$499.ChangeDisplaySettingsW$MH,"ChangeDisplaySettingsW");
    }
    /**
     * {@snippet :
     * LONG ChangeDisplaySettingsW(DEVMODEW* lpDevMode, DWORD dwFlags);
     * }
     */
    public static int ChangeDisplaySettingsW(MemorySegment lpDevMode, int dwFlags) {
        var mh$ = ChangeDisplaySettingsW$MH();
        try {
            return (int)mh$.invokeExact(lpDevMode, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ChangeDisplaySettingsExA$MH() {
        return RuntimeHelper.requireNonNull(constants$500.ChangeDisplaySettingsExA$MH,"ChangeDisplaySettingsExA");
    }
    /**
     * {@snippet :
     * LONG ChangeDisplaySettingsExA(LPCSTR lpszDeviceName, DEVMODEA* lpDevMode, HWND hwnd, DWORD dwflags, LPVOID lParam);
     * }
     */
    public static int ChangeDisplaySettingsExA(MemorySegment lpszDeviceName, MemorySegment lpDevMode, MemorySegment hwnd, int dwflags, MemorySegment lParam) {
        var mh$ = ChangeDisplaySettingsExA$MH();
        try {
            return (int)mh$.invokeExact(lpszDeviceName, lpDevMode, hwnd, dwflags, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ChangeDisplaySettingsExW$MH() {
        return RuntimeHelper.requireNonNull(constants$500.ChangeDisplaySettingsExW$MH,"ChangeDisplaySettingsExW");
    }
    /**
     * {@snippet :
     * LONG ChangeDisplaySettingsExW(LPCWSTR lpszDeviceName, DEVMODEW* lpDevMode, HWND hwnd, DWORD dwflags, LPVOID lParam);
     * }
     */
    public static int ChangeDisplaySettingsExW(MemorySegment lpszDeviceName, MemorySegment lpDevMode, MemorySegment hwnd, int dwflags, MemorySegment lParam) {
        var mh$ = ChangeDisplaySettingsExW$MH();
        try {
            return (int)mh$.invokeExact(lpszDeviceName, lpDevMode, hwnd, dwflags, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumDisplaySettingsA$MH() {
        return RuntimeHelper.requireNonNull(constants$500.EnumDisplaySettingsA$MH,"EnumDisplaySettingsA");
    }
    /**
     * {@snippet :
     * BOOL EnumDisplaySettingsA(LPCSTR lpszDeviceName, DWORD iModeNum, DEVMODEA* lpDevMode);
     * }
     */
    public static int EnumDisplaySettingsA(MemorySegment lpszDeviceName, int iModeNum, MemorySegment lpDevMode) {
        var mh$ = EnumDisplaySettingsA$MH();
        try {
            return (int)mh$.invokeExact(lpszDeviceName, iModeNum, lpDevMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumDisplaySettingsW$MH() {
        return RuntimeHelper.requireNonNull(constants$500.EnumDisplaySettingsW$MH,"EnumDisplaySettingsW");
    }
    /**
     * {@snippet :
     * BOOL EnumDisplaySettingsW(LPCWSTR lpszDeviceName, DWORD iModeNum, DEVMODEW* lpDevMode);
     * }
     */
    public static int EnumDisplaySettingsW(MemorySegment lpszDeviceName, int iModeNum, MemorySegment lpDevMode) {
        var mh$ = EnumDisplaySettingsW$MH();
        try {
            return (int)mh$.invokeExact(lpszDeviceName, iModeNum, lpDevMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumDisplaySettingsExA$MH() {
        return RuntimeHelper.requireNonNull(constants$500.EnumDisplaySettingsExA$MH,"EnumDisplaySettingsExA");
    }
    /**
     * {@snippet :
     * BOOL EnumDisplaySettingsExA(LPCSTR lpszDeviceName, DWORD iModeNum, DEVMODEA* lpDevMode, DWORD dwFlags);
     * }
     */
    public static int EnumDisplaySettingsExA(MemorySegment lpszDeviceName, int iModeNum, MemorySegment lpDevMode, int dwFlags) {
        var mh$ = EnumDisplaySettingsExA$MH();
        try {
            return (int)mh$.invokeExact(lpszDeviceName, iModeNum, lpDevMode, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumDisplaySettingsExW$MH() {
        return RuntimeHelper.requireNonNull(constants$500.EnumDisplaySettingsExW$MH,"EnumDisplaySettingsExW");
    }
    /**
     * {@snippet :
     * BOOL EnumDisplaySettingsExW(LPCWSTR lpszDeviceName, DWORD iModeNum, DEVMODEW* lpDevMode, DWORD dwFlags);
     * }
     */
    public static int EnumDisplaySettingsExW(MemorySegment lpszDeviceName, int iModeNum, MemorySegment lpDevMode, int dwFlags) {
        var mh$ = EnumDisplaySettingsExW$MH();
        try {
            return (int)mh$.invokeExact(lpszDeviceName, iModeNum, lpDevMode, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumDisplayDevicesA$MH() {
        return RuntimeHelper.requireNonNull(constants$501.EnumDisplayDevicesA$MH,"EnumDisplayDevicesA");
    }
    /**
     * {@snippet :
     * BOOL EnumDisplayDevicesA(LPCSTR lpDevice, DWORD iDevNum, PDISPLAY_DEVICEA lpDisplayDevice, DWORD dwFlags);
     * }
     */
    public static int EnumDisplayDevicesA(MemorySegment lpDevice, int iDevNum, MemorySegment lpDisplayDevice, int dwFlags) {
        var mh$ = EnumDisplayDevicesA$MH();
        try {
            return (int)mh$.invokeExact(lpDevice, iDevNum, lpDisplayDevice, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumDisplayDevicesW$MH() {
        return RuntimeHelper.requireNonNull(constants$501.EnumDisplayDevicesW$MH,"EnumDisplayDevicesW");
    }
    /**
     * {@snippet :
     * BOOL EnumDisplayDevicesW(LPCWSTR lpDevice, DWORD iDevNum, PDISPLAY_DEVICEW lpDisplayDevice, DWORD dwFlags);
     * }
     */
    public static int EnumDisplayDevicesW(MemorySegment lpDevice, int iDevNum, MemorySegment lpDisplayDevice, int dwFlags) {
        var mh$ = EnumDisplayDevicesW$MH();
        try {
            return (int)mh$.invokeExact(lpDevice, iDevNum, lpDisplayDevice, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDisplayConfigBufferSizes$MH() {
        return RuntimeHelper.requireNonNull(constants$501.GetDisplayConfigBufferSizes$MH,"GetDisplayConfigBufferSizes");
    }
    /**
     * {@snippet :
     * LONG GetDisplayConfigBufferSizes(UINT32 flags, UINT32* numPathArrayElements, UINT32* numModeInfoArrayElements);
     * }
     */
    public static int GetDisplayConfigBufferSizes(int flags, MemorySegment numPathArrayElements, MemorySegment numModeInfoArrayElements) {
        var mh$ = GetDisplayConfigBufferSizes$MH();
        try {
            return (int)mh$.invokeExact(flags, numPathArrayElements, numModeInfoArrayElements);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetDisplayConfig$MH() {
        return RuntimeHelper.requireNonNull(constants$501.SetDisplayConfig$MH,"SetDisplayConfig");
    }
    /**
     * {@snippet :
     * LONG SetDisplayConfig(UINT32 numPathArrayElements, DISPLAYCONFIG_PATH_INFO* pathArray, UINT32 numModeInfoArrayElements, DISPLAYCONFIG_MODE_INFO* modeInfoArray, UINT32 flags);
     * }
     */
    public static int SetDisplayConfig(int numPathArrayElements, MemorySegment pathArray, int numModeInfoArrayElements, MemorySegment modeInfoArray, int flags) {
        var mh$ = SetDisplayConfig$MH();
        try {
            return (int)mh$.invokeExact(numPathArrayElements, pathArray, numModeInfoArrayElements, modeInfoArray, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryDisplayConfig$MH() {
        return RuntimeHelper.requireNonNull(constants$501.QueryDisplayConfig$MH,"QueryDisplayConfig");
    }
    /**
     * {@snippet :
     * LONG QueryDisplayConfig(UINT32 flags, UINT32* numPathArrayElements, DISPLAYCONFIG_PATH_INFO* pathArray, UINT32* numModeInfoArrayElements, DISPLAYCONFIG_MODE_INFO* modeInfoArray, DISPLAYCONFIG_TOPOLOGY_ID* currentTopologyId);
     * }
     */
    public static int QueryDisplayConfig(int flags, MemorySegment numPathArrayElements, MemorySegment pathArray, MemorySegment numModeInfoArrayElements, MemorySegment modeInfoArray, MemorySegment currentTopologyId) {
        var mh$ = QueryDisplayConfig$MH();
        try {
            return (int)mh$.invokeExact(flags, numPathArrayElements, pathArray, numModeInfoArrayElements, modeInfoArray, currentTopologyId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DisplayConfigGetDeviceInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$501.DisplayConfigGetDeviceInfo$MH,"DisplayConfigGetDeviceInfo");
    }
    /**
     * {@snippet :
     * LONG DisplayConfigGetDeviceInfo(DISPLAYCONFIG_DEVICE_INFO_HEADER* requestPacket);
     * }
     */
    public static int DisplayConfigGetDeviceInfo(MemorySegment requestPacket) {
        var mh$ = DisplayConfigGetDeviceInfo$MH();
        try {
            return (int)mh$.invokeExact(requestPacket);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DisplayConfigSetDeviceInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$502.DisplayConfigSetDeviceInfo$MH,"DisplayConfigSetDeviceInfo");
    }
    /**
     * {@snippet :
     * LONG DisplayConfigSetDeviceInfo(DISPLAYCONFIG_DEVICE_INFO_HEADER* setPacket);
     * }
     */
    public static int DisplayConfigSetDeviceInfo(MemorySegment setPacket) {
        var mh$ = DisplayConfigSetDeviceInfo$MH();
        try {
            return (int)mh$.invokeExact(setPacket);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SystemParametersInfoA$MH() {
        return RuntimeHelper.requireNonNull(constants$502.SystemParametersInfoA$MH,"SystemParametersInfoA");
    }
    /**
     * {@snippet :
     * BOOL SystemParametersInfoA(UINT uiAction, UINT uiParam, PVOID pvParam, UINT fWinIni);
     * }
     */
    public static int SystemParametersInfoA(int uiAction, int uiParam, MemorySegment pvParam, int fWinIni) {
        var mh$ = SystemParametersInfoA$MH();
        try {
            return (int)mh$.invokeExact(uiAction, uiParam, pvParam, fWinIni);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SystemParametersInfoW$MH() {
        return RuntimeHelper.requireNonNull(constants$502.SystemParametersInfoW$MH,"SystemParametersInfoW");
    }
    /**
     * {@snippet :
     * BOOL SystemParametersInfoW(UINT uiAction, UINT uiParam, PVOID pvParam, UINT fWinIni);
     * }
     */
    public static int SystemParametersInfoW(int uiAction, int uiParam, MemorySegment pvParam, int fWinIni) {
        var mh$ = SystemParametersInfoW$MH();
        try {
            return (int)mh$.invokeExact(uiAction, uiParam, pvParam, fWinIni);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SystemParametersInfoForDpi$MH() {
        return RuntimeHelper.requireNonNull(constants$502.SystemParametersInfoForDpi$MH,"SystemParametersInfoForDpi");
    }
    /**
     * {@snippet :
     * BOOL SystemParametersInfoForDpi(UINT uiAction, UINT uiParam, PVOID pvParam, UINT fWinIni, UINT dpi);
     * }
     */
    public static int SystemParametersInfoForDpi(int uiAction, int uiParam, MemorySegment pvParam, int fWinIni, int dpi) {
        var mh$ = SystemParametersInfoForDpi$MH();
        try {
            return (int)mh$.invokeExact(uiAction, uiParam, pvParam, fWinIni, dpi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct tagFILTERKEYS* LPFILTERKEYS;
     * }
     */
    public static final OfAddress LPFILTERKEYS = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagSTICKYKEYS* LPSTICKYKEYS;
     * }
     */
    public static final OfAddress LPSTICKYKEYS = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagMOUSEKEYS* LPMOUSEKEYS;
     * }
     */
    public static final OfAddress LPMOUSEKEYS = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagACCESSTIMEOUT* LPACCESSTIMEOUT;
     * }
     */
    public static final OfAddress LPACCESSTIMEOUT = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagSOUNDSENTRYA* LPSOUNDSENTRYA;
     * }
     */
    public static final OfAddress LPSOUNDSENTRYA = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagSOUNDSENTRYW* LPSOUNDSENTRYW;
     * }
     */
    public static final OfAddress LPSOUNDSENTRYW = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagSOUNDSENTRYA* LPSOUNDSENTRY;
     * }
     */
    public static final OfAddress LPSOUNDSENTRY = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle SoundSentry$MH() {
        return RuntimeHelper.requireNonNull(constants$502.SoundSentry$MH,"SoundSentry");
    }
    /**
     * {@snippet :
     * BOOL SoundSentry();
     * }
     */
    public static int SoundSentry() {
        var mh$ = SoundSentry$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct tagTOGGLEKEYS* LPTOGGLEKEYS;
     * }
     */
    public static final OfAddress LPTOGGLEKEYS = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagAUDIODESCRIPTION* LPAUDIODESCRIPTION;
     * }
     */
    public static final OfAddress LPAUDIODESCRIPTION = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle SetDebugErrorLevel$MH() {
        return RuntimeHelper.requireNonNull(constants$502.SetDebugErrorLevel$MH,"SetDebugErrorLevel");
    }
    /**
     * {@snippet :
     * void SetDebugErrorLevel(DWORD dwLevel);
     * }
     */
    public static void SetDebugErrorLevel(int dwLevel) {
        var mh$ = SetDebugErrorLevel$MH();
        try {
            mh$.invokeExact(dwLevel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetLastErrorEx$MH() {
        return RuntimeHelper.requireNonNull(constants$503.SetLastErrorEx$MH,"SetLastErrorEx");
    }
    /**
     * {@snippet :
     * void SetLastErrorEx(DWORD dwErrCode, DWORD dwType);
     * }
     */
    public static void SetLastErrorEx(int dwErrCode, int dwType) {
        var mh$ = SetLastErrorEx$MH();
        try {
            mh$.invokeExact(dwErrCode, dwType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InternalGetWindowText$MH() {
        return RuntimeHelper.requireNonNull(constants$503.InternalGetWindowText$MH,"InternalGetWindowText");
    }
    /**
     * {@snippet :
     * int InternalGetWindowText(HWND hWnd, LPWSTR pString, int cchMaxCount);
     * }
     */
    public static int InternalGetWindowText(MemorySegment hWnd, MemorySegment pString, int cchMaxCount) {
        var mh$ = InternalGetWindowText$MH();
        try {
            return (int)mh$.invokeExact(hWnd, pString, cchMaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CancelShutdown$MH() {
        return RuntimeHelper.requireNonNull(constants$503.CancelShutdown$MH,"CancelShutdown");
    }
    /**
     * {@snippet :
     * BOOL CancelShutdown();
     * }
     */
    public static int CancelShutdown() {
        var mh$ = CancelShutdown$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MonitorFromPoint$MH() {
        return RuntimeHelper.requireNonNull(constants$503.MonitorFromPoint$MH,"MonitorFromPoint");
    }
    /**
     * {@snippet :
     * HMONITOR MonitorFromPoint(POINT pt, DWORD dwFlags);
     * }
     */
    public static MemorySegment MonitorFromPoint(MemorySegment pt, int dwFlags) {
        var mh$ = MonitorFromPoint$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(pt, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MonitorFromRect$MH() {
        return RuntimeHelper.requireNonNull(constants$503.MonitorFromRect$MH,"MonitorFromRect");
    }
    /**
     * {@snippet :
     * HMONITOR MonitorFromRect(LPCRECT lprc, DWORD dwFlags);
     * }
     */
    public static MemorySegment MonitorFromRect(MemorySegment lprc, int dwFlags) {
        var mh$ = MonitorFromRect$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lprc, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MonitorFromWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$503.MonitorFromWindow$MH,"MonitorFromWindow");
    }
    /**
     * {@snippet :
     * HMONITOR MonitorFromWindow(HWND hwnd, DWORD dwFlags);
     * }
     */
    public static MemorySegment MonitorFromWindow(MemorySegment hwnd, int dwFlags) {
        var mh$ = MonitorFromWindow$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hwnd, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct tagMONITORINFO* LPMONITORINFO;
     * }
     */
    public static final OfAddress LPMONITORINFO = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagMONITORINFOEXA* LPMONITORINFOEXA;
     * }
     */
    public static final OfAddress LPMONITORINFOEXA = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagMONITORINFOEXW* LPMONITORINFOEXW;
     * }
     */
    public static final OfAddress LPMONITORINFOEXW = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagMONITORINFOEXA* LPMONITORINFOEX;
     * }
     */
    public static final OfAddress LPMONITORINFOEX = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetMonitorInfoA$MH() {
        return RuntimeHelper.requireNonNull(constants$504.GetMonitorInfoA$MH,"GetMonitorInfoA");
    }
    /**
     * {@snippet :
     * BOOL GetMonitorInfoA(HMONITOR hMonitor, LPMONITORINFO lpmi);
     * }
     */
    public static int GetMonitorInfoA(MemorySegment hMonitor, MemorySegment lpmi) {
        var mh$ = GetMonitorInfoA$MH();
        try {
            return (int)mh$.invokeExact(hMonitor, lpmi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMonitorInfoW$MH() {
        return RuntimeHelper.requireNonNull(constants$504.GetMonitorInfoW$MH,"GetMonitorInfoW");
    }
    /**
     * {@snippet :
     * BOOL GetMonitorInfoW(HMONITOR hMonitor, LPMONITORINFO lpmi);
     * }
     */
    public static int GetMonitorInfoW(MemorySegment hMonitor, MemorySegment lpmi) {
        var mh$ = GetMonitorInfoW$MH();
        try {
            return (int)mh$.invokeExact(hMonitor, lpmi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumDisplayMonitors$MH() {
        return RuntimeHelper.requireNonNull(constants$504.EnumDisplayMonitors$MH,"EnumDisplayMonitors");
    }
    /**
     * {@snippet :
     * BOOL EnumDisplayMonitors(HDC hdc, LPCRECT lprcClip, MONITORENUMPROC lpfnEnum, LPARAM dwData);
     * }
     */
    public static int EnumDisplayMonitors(MemorySegment hdc, MemorySegment lprcClip, MemorySegment lpfnEnum, long dwData) {
        var mh$ = EnumDisplayMonitors$MH();
        try {
            return (int)mh$.invokeExact(hdc, lprcClip, lpfnEnum, dwData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NotifyWinEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$504.NotifyWinEvent$MH,"NotifyWinEvent");
    }
    /**
     * {@snippet :
     * void NotifyWinEvent(DWORD event, HWND hwnd, LONG idObject, LONG idChild);
     * }
     */
    public static void NotifyWinEvent(int event, MemorySegment hwnd, int idObject, int idChild) {
        var mh$ = NotifyWinEvent$MH();
        try {
            mh$.invokeExact(event, hwnd, idObject, idChild);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWinEventHook$MH() {
        return RuntimeHelper.requireNonNull(constants$505.SetWinEventHook$MH,"SetWinEventHook");
    }
    /**
     * {@snippet :
     * HWINEVENTHOOK SetWinEventHook(DWORD eventMin, DWORD eventMax, HMODULE hmodWinEventProc, WINEVENTPROC pfnWinEventProc, DWORD idProcess, DWORD idThread, DWORD dwFlags);
     * }
     */
    public static MemorySegment SetWinEventHook(int eventMin, int eventMax, MemorySegment hmodWinEventProc, MemorySegment pfnWinEventProc, int idProcess, int idThread, int dwFlags) {
        var mh$ = SetWinEventHook$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(eventMin, eventMax, hmodWinEventProc, pfnWinEventProc, idProcess, idThread, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsWinEventHookInstalled$MH() {
        return RuntimeHelper.requireNonNull(constants$505.IsWinEventHookInstalled$MH,"IsWinEventHookInstalled");
    }
    /**
     * {@snippet :
     * BOOL IsWinEventHookInstalled(DWORD event);
     * }
     */
    public static int IsWinEventHookInstalled(int event) {
        var mh$ = IsWinEventHookInstalled$MH();
        try {
            return (int)mh$.invokeExact(event);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnhookWinEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$505.UnhookWinEvent$MH,"UnhookWinEvent");
    }
    /**
     * {@snippet :
     * BOOL UnhookWinEvent(HWINEVENTHOOK hWinEventHook);
     * }
     */
    public static int UnhookWinEvent(MemorySegment hWinEventHook) {
        var mh$ = UnhookWinEvent$MH();
        try {
            return (int)mh$.invokeExact(hWinEventHook);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct tagGUITHREADINFO* PGUITHREADINFO;
     * }
     */
    public static final OfAddress PGUITHREADINFO = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagGUITHREADINFO* LPGUITHREADINFO;
     * }
     */
    public static final OfAddress LPGUITHREADINFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetGUIThreadInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$505.GetGUIThreadInfo$MH,"GetGUIThreadInfo");
    }
    /**
     * {@snippet :
     * BOOL GetGUIThreadInfo(DWORD idThread, PGUITHREADINFO pgui);
     * }
     */
    public static int GetGUIThreadInfo(int idThread, MemorySegment pgui) {
        var mh$ = GetGUIThreadInfo$MH();
        try {
            return (int)mh$.invokeExact(idThread, pgui);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BlockInput$MH() {
        return RuntimeHelper.requireNonNull(constants$506.BlockInput$MH,"BlockInput");
    }
    /**
     * {@snippet :
     * BOOL BlockInput(BOOL fBlockIt);
     * }
     */
    public static int BlockInput(int fBlockIt) {
        var mh$ = BlockInput$MH();
        try {
            return (int)mh$.invokeExact(fBlockIt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetProcessDPIAware$MH() {
        return RuntimeHelper.requireNonNull(constants$506.SetProcessDPIAware$MH,"SetProcessDPIAware");
    }
    /**
     * {@snippet :
     * BOOL SetProcessDPIAware();
     * }
     */
    public static int SetProcessDPIAware() {
        var mh$ = SetProcessDPIAware$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsProcessDPIAware$MH() {
        return RuntimeHelper.requireNonNull(constants$506.IsProcessDPIAware$MH,"IsProcessDPIAware");
    }
    /**
     * {@snippet :
     * BOOL IsProcessDPIAware();
     * }
     */
    public static int IsProcessDPIAware() {
        var mh$ = IsProcessDPIAware$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadDpiAwarenessContext$MH() {
        return RuntimeHelper.requireNonNull(constants$506.SetThreadDpiAwarenessContext$MH,"SetThreadDpiAwarenessContext");
    }
    /**
     * {@snippet :
     * DPI_AWARENESS_CONTEXT SetThreadDpiAwarenessContext(DPI_AWARENESS_CONTEXT dpiContext);
     * }
     */
    public static MemorySegment SetThreadDpiAwarenessContext(MemorySegment dpiContext) {
        var mh$ = SetThreadDpiAwarenessContext$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(dpiContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetThreadDpiAwarenessContext$MH() {
        return RuntimeHelper.requireNonNull(constants$506.GetThreadDpiAwarenessContext$MH,"GetThreadDpiAwarenessContext");
    }
    /**
     * {@snippet :
     * DPI_AWARENESS_CONTEXT GetThreadDpiAwarenessContext();
     * }
     */
    public static MemorySegment GetThreadDpiAwarenessContext() {
        var mh$ = GetThreadDpiAwarenessContext$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWindowDpiAwarenessContext$MH() {
        return RuntimeHelper.requireNonNull(constants$506.GetWindowDpiAwarenessContext$MH,"GetWindowDpiAwarenessContext");
    }
    /**
     * {@snippet :
     * DPI_AWARENESS_CONTEXT GetWindowDpiAwarenessContext(HWND hwnd);
     * }
     */
    public static MemorySegment GetWindowDpiAwarenessContext(MemorySegment hwnd) {
        var mh$ = GetWindowDpiAwarenessContext$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hwnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetAwarenessFromDpiAwarenessContext$MH() {
        return RuntimeHelper.requireNonNull(constants$507.GetAwarenessFromDpiAwarenessContext$MH,"GetAwarenessFromDpiAwarenessContext");
    }
    /**
     * {@snippet :
     * DPI_AWARENESS GetAwarenessFromDpiAwarenessContext(DPI_AWARENESS_CONTEXT value);
     * }
     */
    public static int GetAwarenessFromDpiAwarenessContext(MemorySegment value) {
        var mh$ = GetAwarenessFromDpiAwarenessContext$MH();
        try {
            return (int)mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDpiFromDpiAwarenessContext$MH() {
        return RuntimeHelper.requireNonNull(constants$507.GetDpiFromDpiAwarenessContext$MH,"GetDpiFromDpiAwarenessContext");
    }
    /**
     * {@snippet :
     * UINT GetDpiFromDpiAwarenessContext(DPI_AWARENESS_CONTEXT value);
     * }
     */
    public static int GetDpiFromDpiAwarenessContext(MemorySegment value) {
        var mh$ = GetDpiFromDpiAwarenessContext$MH();
        try {
            return (int)mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AreDpiAwarenessContextsEqual$MH() {
        return RuntimeHelper.requireNonNull(constants$507.AreDpiAwarenessContextsEqual$MH,"AreDpiAwarenessContextsEqual");
    }
    /**
     * {@snippet :
     * BOOL AreDpiAwarenessContextsEqual(DPI_AWARENESS_CONTEXT dpiContextA, DPI_AWARENESS_CONTEXT dpiContextB);
     * }
     */
    public static int AreDpiAwarenessContextsEqual(MemorySegment dpiContextA, MemorySegment dpiContextB) {
        var mh$ = AreDpiAwarenessContextsEqual$MH();
        try {
            return (int)mh$.invokeExact(dpiContextA, dpiContextB);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsValidDpiAwarenessContext$MH() {
        return RuntimeHelper.requireNonNull(constants$507.IsValidDpiAwarenessContext$MH,"IsValidDpiAwarenessContext");
    }
    /**
     * {@snippet :
     * BOOL IsValidDpiAwarenessContext(DPI_AWARENESS_CONTEXT value);
     * }
     */
    public static int IsValidDpiAwarenessContext(MemorySegment value) {
        var mh$ = IsValidDpiAwarenessContext$MH();
        try {
            return (int)mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDpiForWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$507.GetDpiForWindow$MH,"GetDpiForWindow");
    }
    /**
     * {@snippet :
     * UINT GetDpiForWindow(HWND hwnd);
     * }
     */
    public static int GetDpiForWindow(MemorySegment hwnd) {
        var mh$ = GetDpiForWindow$MH();
        try {
            return (int)mh$.invokeExact(hwnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDpiForSystem$MH() {
        return RuntimeHelper.requireNonNull(constants$507.GetDpiForSystem$MH,"GetDpiForSystem");
    }
    /**
     * {@snippet :
     * UINT GetDpiForSystem();
     * }
     */
    public static int GetDpiForSystem() {
        var mh$ = GetDpiForSystem$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSystemDpiForProcess$MH() {
        return RuntimeHelper.requireNonNull(constants$508.GetSystemDpiForProcess$MH,"GetSystemDpiForProcess");
    }
    /**
     * {@snippet :
     * UINT GetSystemDpiForProcess(HANDLE hProcess);
     * }
     */
    public static int GetSystemDpiForProcess(MemorySegment hProcess) {
        var mh$ = GetSystemDpiForProcess$MH();
        try {
            return (int)mh$.invokeExact(hProcess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnableNonClientDpiScaling$MH() {
        return RuntimeHelper.requireNonNull(constants$508.EnableNonClientDpiScaling$MH,"EnableNonClientDpiScaling");
    }
    /**
     * {@snippet :
     * BOOL EnableNonClientDpiScaling(HWND hwnd);
     * }
     */
    public static int EnableNonClientDpiScaling(MemorySegment hwnd) {
        var mh$ = EnableNonClientDpiScaling$MH();
        try {
            return (int)mh$.invokeExact(hwnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InheritWindowMonitor$MH() {
        return RuntimeHelper.requireNonNull(constants$508.InheritWindowMonitor$MH,"InheritWindowMonitor");
    }
    /**
     * {@snippet :
     * BOOL InheritWindowMonitor(HWND hwnd, HWND hwndInherit);
     * }
     */
    public static int InheritWindowMonitor(MemorySegment hwnd, MemorySegment hwndInherit) {
        var mh$ = InheritWindowMonitor$MH();
        try {
            return (int)mh$.invokeExact(hwnd, hwndInherit);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetProcessDpiAwarenessContext$MH() {
        return RuntimeHelper.requireNonNull(constants$508.SetProcessDpiAwarenessContext$MH,"SetProcessDpiAwarenessContext");
    }
    /**
     * {@snippet :
     * BOOL SetProcessDpiAwarenessContext(DPI_AWARENESS_CONTEXT value);
     * }
     */
    public static int SetProcessDpiAwarenessContext(MemorySegment value) {
        var mh$ = SetProcessDpiAwarenessContext$MH();
        try {
            return (int)mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDpiAwarenessContextForProcess$MH() {
        return RuntimeHelper.requireNonNull(constants$508.GetDpiAwarenessContextForProcess$MH,"GetDpiAwarenessContextForProcess");
    }
    /**
     * {@snippet :
     * DPI_AWARENESS_CONTEXT GetDpiAwarenessContextForProcess(HANDLE hProcess);
     * }
     */
    public static MemorySegment GetDpiAwarenessContextForProcess(MemorySegment hProcess) {
        var mh$ = GetDpiAwarenessContextForProcess$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hProcess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadDpiHostingBehavior$MH() {
        return RuntimeHelper.requireNonNull(constants$508.SetThreadDpiHostingBehavior$MH,"SetThreadDpiHostingBehavior");
    }
    /**
     * {@snippet :
     * DPI_HOSTING_BEHAVIOR SetThreadDpiHostingBehavior(DPI_HOSTING_BEHAVIOR value);
     * }
     */
    public static int SetThreadDpiHostingBehavior(int value) {
        var mh$ = SetThreadDpiHostingBehavior$MH();
        try {
            return (int)mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetThreadDpiHostingBehavior$MH() {
        return RuntimeHelper.requireNonNull(constants$509.GetThreadDpiHostingBehavior$MH,"GetThreadDpiHostingBehavior");
    }
    /**
     * {@snippet :
     * DPI_HOSTING_BEHAVIOR GetThreadDpiHostingBehavior();
     * }
     */
    public static int GetThreadDpiHostingBehavior() {
        var mh$ = GetThreadDpiHostingBehavior$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWindowDpiHostingBehavior$MH() {
        return RuntimeHelper.requireNonNull(constants$509.GetWindowDpiHostingBehavior$MH,"GetWindowDpiHostingBehavior");
    }
    /**
     * {@snippet :
     * DPI_HOSTING_BEHAVIOR GetWindowDpiHostingBehavior(HWND hwnd);
     * }
     */
    public static int GetWindowDpiHostingBehavior(MemorySegment hwnd) {
        var mh$ = GetWindowDpiHostingBehavior$MH();
        try {
            return (int)mh$.invokeExact(hwnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWindowModuleFileNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$509.GetWindowModuleFileNameA$MH,"GetWindowModuleFileNameA");
    }
    /**
     * {@snippet :
     * UINT GetWindowModuleFileNameA(HWND hwnd, LPSTR pszFileName, UINT cchFileNameMax);
     * }
     */
    public static int GetWindowModuleFileNameA(MemorySegment hwnd, MemorySegment pszFileName, int cchFileNameMax) {
        var mh$ = GetWindowModuleFileNameA$MH();
        try {
            return (int)mh$.invokeExact(hwnd, pszFileName, cchFileNameMax);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWindowModuleFileNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$509.GetWindowModuleFileNameW$MH,"GetWindowModuleFileNameW");
    }
    /**
     * {@snippet :
     * UINT GetWindowModuleFileNameW(HWND hwnd, LPWSTR pszFileName, UINT cchFileNameMax);
     * }
     */
    public static int GetWindowModuleFileNameW(MemorySegment hwnd, MemorySegment pszFileName, int cchFileNameMax) {
        var mh$ = GetWindowModuleFileNameW$MH();
        try {
            return (int)mh$.invokeExact(hwnd, pszFileName, cchFileNameMax);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct tagCURSORINFO* PCURSORINFO;
     * }
     */
    public static final OfAddress PCURSORINFO = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagCURSORINFO* LPCURSORINFO;
     * }
     */
    public static final OfAddress LPCURSORINFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetCursorInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$509.GetCursorInfo$MH,"GetCursorInfo");
    }
    /**
     * {@snippet :
     * BOOL GetCursorInfo(PCURSORINFO pci);
     * }
     */
    public static int GetCursorInfo(MemorySegment pci) {
        var mh$ = GetCursorInfo$MH();
        try {
            return (int)mh$.invokeExact(pci);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct tagWINDOWINFO* PWINDOWINFO;
     * }
     */
    public static final OfAddress PWINDOWINFO = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagWINDOWINFO* LPWINDOWINFO;
     * }
     */
    public static final OfAddress LPWINDOWINFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetWindowInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$509.GetWindowInfo$MH,"GetWindowInfo");
    }
    /**
     * {@snippet :
     * BOOL GetWindowInfo(HWND hwnd, PWINDOWINFO pwi);
     * }
     */
    public static int GetWindowInfo(MemorySegment hwnd, MemorySegment pwi) {
        var mh$ = GetWindowInfo$MH();
        try {
            return (int)mh$.invokeExact(hwnd, pwi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct tagTITLEBARINFO* PTITLEBARINFO;
     * }
     */
    public static final OfAddress PTITLEBARINFO = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagTITLEBARINFO* LPTITLEBARINFO;
     * }
     */
    public static final OfAddress LPTITLEBARINFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetTitleBarInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$510.GetTitleBarInfo$MH,"GetTitleBarInfo");
    }
    /**
     * {@snippet :
     * BOOL GetTitleBarInfo(HWND hwnd, PTITLEBARINFO pti);
     * }
     */
    public static int GetTitleBarInfo(MemorySegment hwnd, MemorySegment pti) {
        var mh$ = GetTitleBarInfo$MH();
        try {
            return (int)mh$.invokeExact(hwnd, pti);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct tagTITLEBARINFOEX* PTITLEBARINFOEX;
     * }
     */
    public static final OfAddress PTITLEBARINFOEX = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagTITLEBARINFOEX* LPTITLEBARINFOEX;
     * }
     */
    public static final OfAddress LPTITLEBARINFOEX = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagMENUBARINFO* PMENUBARINFO;
     * }
     */
    public static final OfAddress PMENUBARINFO = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagMENUBARINFO* LPMENUBARINFO;
     * }
     */
    public static final OfAddress LPMENUBARINFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetMenuBarInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$510.GetMenuBarInfo$MH,"GetMenuBarInfo");
    }
    /**
     * {@snippet :
     * BOOL GetMenuBarInfo(HWND hwnd, LONG idObject, LONG idItem, PMENUBARINFO pmbi);
     * }
     */
    public static int GetMenuBarInfo(MemorySegment hwnd, int idObject, int idItem, MemorySegment pmbi) {
        var mh$ = GetMenuBarInfo$MH();
        try {
            return (int)mh$.invokeExact(hwnd, idObject, idItem, pmbi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct tagSCROLLBARINFO* PSCROLLBARINFO;
     * }
     */
    public static final OfAddress PSCROLLBARINFO = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagSCROLLBARINFO* LPSCROLLBARINFO;
     * }
     */
    public static final OfAddress LPSCROLLBARINFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetScrollBarInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$510.GetScrollBarInfo$MH,"GetScrollBarInfo");
    }
    /**
     * {@snippet :
     * BOOL GetScrollBarInfo(HWND hwnd, LONG idObject, PSCROLLBARINFO psbi);
     * }
     */
    public static int GetScrollBarInfo(MemorySegment hwnd, int idObject, MemorySegment psbi) {
        var mh$ = GetScrollBarInfo$MH();
        try {
            return (int)mh$.invokeExact(hwnd, idObject, psbi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct tagCOMBOBOXINFO* PCOMBOBOXINFO;
     * }
     */
    public static final OfAddress PCOMBOBOXINFO = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagCOMBOBOXINFO* LPCOMBOBOXINFO;
     * }
     */
    public static final OfAddress LPCOMBOBOXINFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetComboBoxInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$510.GetComboBoxInfo$MH,"GetComboBoxInfo");
    }
    /**
     * {@snippet :
     * BOOL GetComboBoxInfo(HWND hwndCombo, PCOMBOBOXINFO pcbi);
     * }
     */
    public static int GetComboBoxInfo(MemorySegment hwndCombo, MemorySegment pcbi) {
        var mh$ = GetComboBoxInfo$MH();
        try {
            return (int)mh$.invokeExact(hwndCombo, pcbi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetAncestor$MH() {
        return RuntimeHelper.requireNonNull(constants$510.GetAncestor$MH,"GetAncestor");
    }
    /**
     * {@snippet :
     * HWND GetAncestor(HWND hwnd, UINT gaFlags);
     * }
     */
    public static MemorySegment GetAncestor(MemorySegment hwnd, int gaFlags) {
        var mh$ = GetAncestor$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hwnd, gaFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RealChildWindowFromPoint$MH() {
        return RuntimeHelper.requireNonNull(constants$510.RealChildWindowFromPoint$MH,"RealChildWindowFromPoint");
    }
    /**
     * {@snippet :
     * HWND RealChildWindowFromPoint(HWND hwndParent, POINT ptParentClientCoords);
     * }
     */
    public static MemorySegment RealChildWindowFromPoint(MemorySegment hwndParent, MemorySegment ptParentClientCoords) {
        var mh$ = RealChildWindowFromPoint$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hwndParent, ptParentClientCoords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RealGetWindowClassA$MH() {
        return RuntimeHelper.requireNonNull(constants$511.RealGetWindowClassA$MH,"RealGetWindowClassA");
    }
    /**
     * {@snippet :
     * UINT RealGetWindowClassA(HWND hwnd, LPSTR ptszClassName, UINT cchClassNameMax);
     * }
     */
    public static int RealGetWindowClassA(MemorySegment hwnd, MemorySegment ptszClassName, int cchClassNameMax) {
        var mh$ = RealGetWindowClassA$MH();
        try {
            return (int)mh$.invokeExact(hwnd, ptszClassName, cchClassNameMax);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RealGetWindowClassW$MH() {
        return RuntimeHelper.requireNonNull(constants$511.RealGetWindowClassW$MH,"RealGetWindowClassW");
    }
    /**
     * {@snippet :
     * UINT RealGetWindowClassW(HWND hwnd, LPWSTR ptszClassName, UINT cchClassNameMax);
     * }
     */
    public static int RealGetWindowClassW(MemorySegment hwnd, MemorySegment ptszClassName, int cchClassNameMax) {
        var mh$ = RealGetWindowClassW$MH();
        try {
            return (int)mh$.invokeExact(hwnd, ptszClassName, cchClassNameMax);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct tagALTTABINFO* PALTTABINFO;
     * }
     */
    public static final OfAddress PALTTABINFO = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagALTTABINFO* LPALTTABINFO;
     * }
     */
    public static final OfAddress LPALTTABINFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetAltTabInfoA$MH() {
        return RuntimeHelper.requireNonNull(constants$511.GetAltTabInfoA$MH,"GetAltTabInfoA");
    }
    /**
     * {@snippet :
     * BOOL GetAltTabInfoA(HWND hwnd, int iItem, PALTTABINFO pati, LPSTR pszItemText, UINT cchItemText);
     * }
     */
    public static int GetAltTabInfoA(MemorySegment hwnd, int iItem, MemorySegment pati, MemorySegment pszItemText, int cchItemText) {
        var mh$ = GetAltTabInfoA$MH();
        try {
            return (int)mh$.invokeExact(hwnd, iItem, pati, pszItemText, cchItemText);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetAltTabInfoW$MH() {
        return RuntimeHelper.requireNonNull(constants$511.GetAltTabInfoW$MH,"GetAltTabInfoW");
    }
    /**
     * {@snippet :
     * BOOL GetAltTabInfoW(HWND hwnd, int iItem, PALTTABINFO pati, LPWSTR pszItemText, UINT cchItemText);
     * }
     */
    public static int GetAltTabInfoW(MemorySegment hwnd, int iItem, MemorySegment pati, MemorySegment pszItemText, int cchItemText) {
        var mh$ = GetAltTabInfoW$MH();
        try {
            return (int)mh$.invokeExact(hwnd, iItem, pati, pszItemText, cchItemText);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetListBoxInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$511.GetListBoxInfo$MH,"GetListBoxInfo");
    }
    /**
     * {@snippet :
     * DWORD GetListBoxInfo(HWND hwnd);
     * }
     */
    public static int GetListBoxInfo(MemorySegment hwnd) {
        var mh$ = GetListBoxInfo$MH();
        try {
            return (int)mh$.invokeExact(hwnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LockWorkStation$MH() {
        return RuntimeHelper.requireNonNull(constants$511.LockWorkStation$MH,"LockWorkStation");
    }
    /**
     * {@snippet :
     * BOOL LockWorkStation();
     * }
     */
    public static int LockWorkStation() {
        var mh$ = LockWorkStation$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UserHandleGrantAccess$MH() {
        return RuntimeHelper.requireNonNull(constants$512.UserHandleGrantAccess$MH,"UserHandleGrantAccess");
    }
    /**
     * {@snippet :
     * BOOL UserHandleGrantAccess(HANDLE hUserHandle, HANDLE hJob, BOOL bGrant);
     * }
     */
    public static int UserHandleGrantAccess(MemorySegment hUserHandle, MemorySegment hJob, int bGrant) {
        var mh$ = UserHandleGrantAccess$MH();
        try {
            return (int)mh$.invokeExact(hUserHandle, hJob, bGrant);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct HRAWINPUT__* HRAWINPUT;
     * }
     */
    public static final OfAddress HRAWINPUT = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagRAWINPUTHEADER* PRAWINPUTHEADER;
     * }
     */
    public static final OfAddress PRAWINPUTHEADER = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagRAWINPUTHEADER* LPRAWINPUTHEADER;
     * }
     */
    public static final OfAddress LPRAWINPUTHEADER = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagRAWMOUSE* PRAWMOUSE;
     * }
     */
    public static final OfAddress PRAWMOUSE = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagRAWMOUSE* LPRAWMOUSE;
     * }
     */
    public static final OfAddress LPRAWMOUSE = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagRAWKEYBOARD* PRAWKEYBOARD;
     * }
     */
    public static final OfAddress PRAWKEYBOARD = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagRAWKEYBOARD* LPRAWKEYBOARD;
     * }
     */
    public static final OfAddress LPRAWKEYBOARD = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagRAWHID* PRAWHID;
     * }
     */
    public static final OfAddress PRAWHID = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagRAWHID* LPRAWHID;
     * }
     */
    public static final OfAddress LPRAWHID = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagRAWINPUT* PRAWINPUT;
     * }
     */
    public static final OfAddress PRAWINPUT = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagRAWINPUT* LPRAWINPUT;
     * }
     */
    public static final OfAddress LPRAWINPUT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetRawInputData$MH() {
        return RuntimeHelper.requireNonNull(constants$512.GetRawInputData$MH,"GetRawInputData");
    }
    /**
     * {@snippet :
     * UINT GetRawInputData(HRAWINPUT hRawInput, UINT uiCommand, LPVOID pData, PUINT pcbSize, UINT cbSizeHeader);
     * }
     */
    public static int GetRawInputData(MemorySegment hRawInput, int uiCommand, MemorySegment pData, MemorySegment pcbSize, int cbSizeHeader) {
        var mh$ = GetRawInputData$MH();
        try {
            return (int)mh$.invokeExact(hRawInput, uiCommand, pData, pcbSize, cbSizeHeader);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct tagRID_DEVICE_INFO_MOUSE* PRID_DEVICE_INFO_MOUSE;
     * }
     */
    public static final OfAddress PRID_DEVICE_INFO_MOUSE = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagRID_DEVICE_INFO_KEYBOARD* PRID_DEVICE_INFO_KEYBOARD;
     * }
     */
    public static final OfAddress PRID_DEVICE_INFO_KEYBOARD = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagRID_DEVICE_INFO_HID* PRID_DEVICE_INFO_HID;
     * }
     */
    public static final OfAddress PRID_DEVICE_INFO_HID = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagRID_DEVICE_INFO* PRID_DEVICE_INFO;
     * }
     */
    public static final OfAddress PRID_DEVICE_INFO = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagRID_DEVICE_INFO* LPRID_DEVICE_INFO;
     * }
     */
    public static final OfAddress LPRID_DEVICE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetRawInputDeviceInfoA$MH() {
        return RuntimeHelper.requireNonNull(constants$512.GetRawInputDeviceInfoA$MH,"GetRawInputDeviceInfoA");
    }
    /**
     * {@snippet :
     * UINT GetRawInputDeviceInfoA(HANDLE hDevice, UINT uiCommand, LPVOID pData, PUINT pcbSize);
     * }
     */
    public static int GetRawInputDeviceInfoA(MemorySegment hDevice, int uiCommand, MemorySegment pData, MemorySegment pcbSize) {
        var mh$ = GetRawInputDeviceInfoA$MH();
        try {
            return (int)mh$.invokeExact(hDevice, uiCommand, pData, pcbSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetRawInputDeviceInfoW$MH() {
        return RuntimeHelper.requireNonNull(constants$512.GetRawInputDeviceInfoW$MH,"GetRawInputDeviceInfoW");
    }
    /**
     * {@snippet :
     * UINT GetRawInputDeviceInfoW(HANDLE hDevice, UINT uiCommand, LPVOID pData, PUINT pcbSize);
     * }
     */
    public static int GetRawInputDeviceInfoW(MemorySegment hDevice, int uiCommand, MemorySegment pData, MemorySegment pcbSize) {
        var mh$ = GetRawInputDeviceInfoW$MH();
        try {
            return (int)mh$.invokeExact(hDevice, uiCommand, pData, pcbSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetRawInputBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$512.GetRawInputBuffer$MH,"GetRawInputBuffer");
    }
    /**
     * {@snippet :
     * UINT GetRawInputBuffer(PRAWINPUT pData, PUINT pcbSize, UINT cbSizeHeader);
     * }
     */
    public static int GetRawInputBuffer(MemorySegment pData, MemorySegment pcbSize, int cbSizeHeader) {
        var mh$ = GetRawInputBuffer$MH();
        try {
            return (int)mh$.invokeExact(pData, pcbSize, cbSizeHeader);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct tagRAWINPUTDEVICE* PRAWINPUTDEVICE;
     * }
     */
    public static final OfAddress PRAWINPUTDEVICE = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagRAWINPUTDEVICE* LPRAWINPUTDEVICE;
     * }
     */
    public static final OfAddress LPRAWINPUTDEVICE = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagRAWINPUTDEVICE* PCRAWINPUTDEVICE;
     * }
     */
    public static final OfAddress PCRAWINPUTDEVICE = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle RegisterRawInputDevices$MH() {
        return RuntimeHelper.requireNonNull(constants$512.RegisterRawInputDevices$MH,"RegisterRawInputDevices");
    }
    /**
     * {@snippet :
     * BOOL RegisterRawInputDevices(PCRAWINPUTDEVICE pRawInputDevices, UINT uiNumDevices, UINT cbSize);
     * }
     */
    public static int RegisterRawInputDevices(MemorySegment pRawInputDevices, int uiNumDevices, int cbSize) {
        var mh$ = RegisterRawInputDevices$MH();
        try {
            return (int)mh$.invokeExact(pRawInputDevices, uiNumDevices, cbSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetRegisteredRawInputDevices$MH() {
        return RuntimeHelper.requireNonNull(constants$513.GetRegisteredRawInputDevices$MH,"GetRegisteredRawInputDevices");
    }
    /**
     * {@snippet :
     * UINT GetRegisteredRawInputDevices(PRAWINPUTDEVICE pRawInputDevices, PUINT puiNumDevices, UINT cbSize);
     * }
     */
    public static int GetRegisteredRawInputDevices(MemorySegment pRawInputDevices, MemorySegment puiNumDevices, int cbSize) {
        var mh$ = GetRegisteredRawInputDevices$MH();
        try {
            return (int)mh$.invokeExact(pRawInputDevices, puiNumDevices, cbSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct tagRAWINPUTDEVICELIST* PRAWINPUTDEVICELIST;
     * }
     */
    public static final OfAddress PRAWINPUTDEVICELIST = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetRawInputDeviceList$MH() {
        return RuntimeHelper.requireNonNull(constants$513.GetRawInputDeviceList$MH,"GetRawInputDeviceList");
    }
    /**
     * {@snippet :
     * UINT GetRawInputDeviceList(PRAWINPUTDEVICELIST pRawInputDeviceList, PUINT puiNumDevices, UINT cbSize);
     * }
     */
    public static int GetRawInputDeviceList(MemorySegment pRawInputDeviceList, MemorySegment puiNumDevices, int cbSize) {
        var mh$ = GetRawInputDeviceList$MH();
        try {
            return (int)mh$.invokeExact(pRawInputDeviceList, puiNumDevices, cbSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DefRawInputProc$MH() {
        return RuntimeHelper.requireNonNull(constants$513.DefRawInputProc$MH,"DefRawInputProc");
    }
    /**
     * {@snippet :
     * LRESULT DefRawInputProc(PRAWINPUT* paRawInput, INT nInput, UINT cbSizeHeader);
     * }
     */
    public static long DefRawInputProc(MemorySegment paRawInput, int nInput, int cbSizeHeader) {
        var mh$ = DefRawInputProc$MH();
        try {
            return (long)mh$.invokeExact(paRawInput, nInput, cbSizeHeader);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum tagPOINTER_DEVICE_TYPE.POINTER_DEVICE_TYPE_INTEGRATED_PEN = 1;
     * }
     */
    public static int POINTER_DEVICE_TYPE_INTEGRATED_PEN() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum tagPOINTER_DEVICE_TYPE.POINTER_DEVICE_TYPE_EXTERNAL_PEN = 2;
     * }
     */
    public static int POINTER_DEVICE_TYPE_EXTERNAL_PEN() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum tagPOINTER_DEVICE_TYPE.POINTER_DEVICE_TYPE_TOUCH = 3;
     * }
     */
    public static int POINTER_DEVICE_TYPE_TOUCH() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum tagPOINTER_DEVICE_TYPE.POINTER_DEVICE_TYPE_TOUCH_PAD = 4;
     * }
     */
    public static int POINTER_DEVICE_TYPE_TOUCH_PAD() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum tagPOINTER_DEVICE_TYPE.POINTER_DEVICE_TYPE_MAX = -1;
     * }
     */
    public static int POINTER_DEVICE_TYPE_MAX() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * enum tagPOINTER_DEVICE_CURSOR_TYPE.POINTER_DEVICE_CURSOR_TYPE_UNKNOWN = 0;
     * }
     */
    public static int POINTER_DEVICE_CURSOR_TYPE_UNKNOWN() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum tagPOINTER_DEVICE_CURSOR_TYPE.POINTER_DEVICE_CURSOR_TYPE_TIP = 1;
     * }
     */
    public static int POINTER_DEVICE_CURSOR_TYPE_TIP() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum tagPOINTER_DEVICE_CURSOR_TYPE.POINTER_DEVICE_CURSOR_TYPE_ERASER = 2;
     * }
     */
    public static int POINTER_DEVICE_CURSOR_TYPE_ERASER() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum tagPOINTER_DEVICE_CURSOR_TYPE.POINTER_DEVICE_CURSOR_TYPE_MAX = -1;
     * }
     */
    public static int POINTER_DEVICE_CURSOR_TYPE_MAX() {
        return (int)-1L;
    }
    public static MethodHandle GetPointerDevices$MH() {
        return RuntimeHelper.requireNonNull(constants$513.GetPointerDevices$MH,"GetPointerDevices");
    }
    /**
     * {@snippet :
     * BOOL GetPointerDevices(UINT32* deviceCount, POINTER_DEVICE_INFO* pointerDevices);
     * }
     */
    public static int GetPointerDevices(MemorySegment deviceCount, MemorySegment pointerDevices) {
        var mh$ = GetPointerDevices$MH();
        try {
            return (int)mh$.invokeExact(deviceCount, pointerDevices);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPointerDevice$MH() {
        return RuntimeHelper.requireNonNull(constants$513.GetPointerDevice$MH,"GetPointerDevice");
    }
    /**
     * {@snippet :
     * BOOL GetPointerDevice(HANDLE device, POINTER_DEVICE_INFO* pointerDevice);
     * }
     */
    public static int GetPointerDevice(MemorySegment device, MemorySegment pointerDevice) {
        var mh$ = GetPointerDevice$MH();
        try {
            return (int)mh$.invokeExact(device, pointerDevice);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPointerDeviceProperties$MH() {
        return RuntimeHelper.requireNonNull(constants$513.GetPointerDeviceProperties$MH,"GetPointerDeviceProperties");
    }
    /**
     * {@snippet :
     * BOOL GetPointerDeviceProperties(HANDLE device, UINT32* propertyCount, POINTER_DEVICE_PROPERTY* pointerProperties);
     * }
     */
    public static int GetPointerDeviceProperties(MemorySegment device, MemorySegment propertyCount, MemorySegment pointerProperties) {
        var mh$ = GetPointerDeviceProperties$MH();
        try {
            return (int)mh$.invokeExact(device, propertyCount, pointerProperties);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterPointerDeviceNotifications$MH() {
        return RuntimeHelper.requireNonNull(constants$514.RegisterPointerDeviceNotifications$MH,"RegisterPointerDeviceNotifications");
    }
    /**
     * {@snippet :
     * BOOL RegisterPointerDeviceNotifications(HWND window, BOOL notifyRange);
     * }
     */
    public static int RegisterPointerDeviceNotifications(MemorySegment window, int notifyRange) {
        var mh$ = RegisterPointerDeviceNotifications$MH();
        try {
            return (int)mh$.invokeExact(window, notifyRange);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPointerDeviceRects$MH() {
        return RuntimeHelper.requireNonNull(constants$514.GetPointerDeviceRects$MH,"GetPointerDeviceRects");
    }
    /**
     * {@snippet :
     * BOOL GetPointerDeviceRects(HANDLE device, RECT* pointerDeviceRect, RECT* displayRect);
     * }
     */
    public static int GetPointerDeviceRects(MemorySegment device, MemorySegment pointerDeviceRect, MemorySegment displayRect) {
        var mh$ = GetPointerDeviceRects$MH();
        try {
            return (int)mh$.invokeExact(device, pointerDeviceRect, displayRect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPointerDeviceCursors$MH() {
        return RuntimeHelper.requireNonNull(constants$514.GetPointerDeviceCursors$MH,"GetPointerDeviceCursors");
    }
    /**
     * {@snippet :
     * BOOL GetPointerDeviceCursors(HANDLE device, UINT32* cursorCount, POINTER_DEVICE_CURSOR_INFO* deviceCursors);
     * }
     */
    public static int GetPointerDeviceCursors(MemorySegment device, MemorySegment cursorCount, MemorySegment deviceCursors) {
        var mh$ = GetPointerDeviceCursors$MH();
        try {
            return (int)mh$.invokeExact(device, cursorCount, deviceCursors);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetRawPointerDeviceData$MH() {
        return RuntimeHelper.requireNonNull(constants$514.GetRawPointerDeviceData$MH,"GetRawPointerDeviceData");
    }
    /**
     * {@snippet :
     * BOOL GetRawPointerDeviceData(UINT32 pointerId, UINT32 historyCount, UINT32 propertiesCount, POINTER_DEVICE_PROPERTY* pProperties, LONG* pValues);
     * }
     */
    public static int GetRawPointerDeviceData(int pointerId, int historyCount, int propertiesCount, MemorySegment pProperties, MemorySegment pValues) {
        var mh$ = GetRawPointerDeviceData$MH();
        try {
            return (int)mh$.invokeExact(pointerId, historyCount, propertiesCount, pProperties, pValues);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ChangeWindowMessageFilter$MH() {
        return RuntimeHelper.requireNonNull(constants$514.ChangeWindowMessageFilter$MH,"ChangeWindowMessageFilter");
    }
    /**
     * {@snippet :
     * BOOL ChangeWindowMessageFilter(UINT message, DWORD dwFlag);
     * }
     */
    public static int ChangeWindowMessageFilter(int message, int dwFlag) {
        var mh$ = ChangeWindowMessageFilter$MH();
        try {
            return (int)mh$.invokeExact(message, dwFlag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct tagCHANGEFILTERSTRUCT* PCHANGEFILTERSTRUCT;
     * }
     */
    public static final OfAddress PCHANGEFILTERSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle ChangeWindowMessageFilterEx$MH() {
        return RuntimeHelper.requireNonNull(constants$514.ChangeWindowMessageFilterEx$MH,"ChangeWindowMessageFilterEx");
    }
    /**
     * {@snippet :
     * BOOL ChangeWindowMessageFilterEx(HWND hwnd, UINT message, DWORD action, PCHANGEFILTERSTRUCT pChangeFilterStruct);
     * }
     */
    public static int ChangeWindowMessageFilterEx(MemorySegment hwnd, int message, int action, MemorySegment pChangeFilterStruct) {
        var mh$ = ChangeWindowMessageFilterEx$MH();
        try {
            return (int)mh$.invokeExact(hwnd, message, action, pChangeFilterStruct);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct HGESTUREINFO__* HGESTUREINFO;
     * }
     */
    public static final OfAddress HGESTUREINFO = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagGESTUREINFO* PGESTUREINFO;
     * }
     */
    public static final OfAddress PGESTUREINFO = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagGESTUREINFO* PCGESTUREINFO;
     * }
     */
    public static final OfAddress PCGESTUREINFO = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagGESTURENOTIFYSTRUCT* PGESTURENOTIFYSTRUCT;
     * }
     */
    public static final OfAddress PGESTURENOTIFYSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetGestureInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$515.GetGestureInfo$MH,"GetGestureInfo");
    }
    /**
     * {@snippet :
     * BOOL GetGestureInfo(HGESTUREINFO hGestureInfo, PGESTUREINFO pGestureInfo);
     * }
     */
    public static int GetGestureInfo(MemorySegment hGestureInfo, MemorySegment pGestureInfo) {
        var mh$ = GetGestureInfo$MH();
        try {
            return (int)mh$.invokeExact(hGestureInfo, pGestureInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetGestureExtraArgs$MH() {
        return RuntimeHelper.requireNonNull(constants$515.GetGestureExtraArgs$MH,"GetGestureExtraArgs");
    }
    /**
     * {@snippet :
     * BOOL GetGestureExtraArgs(HGESTUREINFO hGestureInfo, UINT cbExtraArgs, PBYTE pExtraArgs);
     * }
     */
    public static int GetGestureExtraArgs(MemorySegment hGestureInfo, int cbExtraArgs, MemorySegment pExtraArgs) {
        var mh$ = GetGestureExtraArgs$MH();
        try {
            return (int)mh$.invokeExact(hGestureInfo, cbExtraArgs, pExtraArgs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CloseGestureInfoHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$515.CloseGestureInfoHandle$MH,"CloseGestureInfoHandle");
    }
    /**
     * {@snippet :
     * BOOL CloseGestureInfoHandle(HGESTUREINFO hGestureInfo);
     * }
     */
    public static int CloseGestureInfoHandle(MemorySegment hGestureInfo) {
        var mh$ = CloseGestureInfoHandle$MH();
        try {
            return (int)mh$.invokeExact(hGestureInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct tagGESTURECONFIG* PGESTURECONFIG;
     * }
     */
    public static final OfAddress PGESTURECONFIG = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle SetGestureConfig$MH() {
        return RuntimeHelper.requireNonNull(constants$515.SetGestureConfig$MH,"SetGestureConfig");
    }
    /**
     * {@snippet :
     * BOOL SetGestureConfig(HWND hwnd, DWORD dwReserved, UINT cIDs, PGESTURECONFIG pGestureConfig, UINT cbSize);
     * }
     */
    public static int SetGestureConfig(MemorySegment hwnd, int dwReserved, int cIDs, MemorySegment pGestureConfig, int cbSize) {
        var mh$ = SetGestureConfig$MH();
        try {
            return (int)mh$.invokeExact(hwnd, dwReserved, cIDs, pGestureConfig, cbSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetGestureConfig$MH() {
        return RuntimeHelper.requireNonNull(constants$515.GetGestureConfig$MH,"GetGestureConfig");
    }
    /**
     * {@snippet :
     * BOOL GetGestureConfig(HWND hwnd, DWORD dwReserved, DWORD dwFlags, PUINT pcIDs, PGESTURECONFIG pGestureConfig, UINT cbSize);
     * }
     */
    public static int GetGestureConfig(MemorySegment hwnd, int dwReserved, int dwFlags, MemorySegment pcIDs, MemorySegment pGestureConfig, int cbSize) {
        var mh$ = GetGestureConfig$MH();
        try {
            return (int)mh$.invokeExact(hwnd, dwReserved, dwFlags, pcIDs, pGestureConfig, cbSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ShutdownBlockReasonCreate$MH() {
        return RuntimeHelper.requireNonNull(constants$515.ShutdownBlockReasonCreate$MH,"ShutdownBlockReasonCreate");
    }
    /**
     * {@snippet :
     * BOOL ShutdownBlockReasonCreate(HWND hWnd, LPCWSTR pwszReason);
     * }
     */
    public static int ShutdownBlockReasonCreate(MemorySegment hWnd, MemorySegment pwszReason) {
        var mh$ = ShutdownBlockReasonCreate$MH();
        try {
            return (int)mh$.invokeExact(hWnd, pwszReason);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ShutdownBlockReasonQuery$MH() {
        return RuntimeHelper.requireNonNull(constants$516.ShutdownBlockReasonQuery$MH,"ShutdownBlockReasonQuery");
    }
    /**
     * {@snippet :
     * BOOL ShutdownBlockReasonQuery(HWND hWnd, LPWSTR pwszBuff, DWORD* pcchBuff);
     * }
     */
    public static int ShutdownBlockReasonQuery(MemorySegment hWnd, MemorySegment pwszBuff, MemorySegment pcchBuff) {
        var mh$ = ShutdownBlockReasonQuery$MH();
        try {
            return (int)mh$.invokeExact(hWnd, pwszBuff, pcchBuff);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ShutdownBlockReasonDestroy$MH() {
        return RuntimeHelper.requireNonNull(constants$516.ShutdownBlockReasonDestroy$MH,"ShutdownBlockReasonDestroy");
    }
    /**
     * {@snippet :
     * BOOL ShutdownBlockReasonDestroy(HWND hWnd);
     * }
     */
    public static int ShutdownBlockReasonDestroy(MemorySegment hWnd) {
        var mh$ = ShutdownBlockReasonDestroy$MH();
        try {
            return (int)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum tagINPUT_MESSAGE_DEVICE_TYPE.IMDT_UNAVAILABLE = 0;
     * }
     */
    public static int IMDT_UNAVAILABLE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum tagINPUT_MESSAGE_DEVICE_TYPE.IMDT_KEYBOARD = 1;
     * }
     */
    public static int IMDT_KEYBOARD() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum tagINPUT_MESSAGE_DEVICE_TYPE.IMDT_MOUSE = 2;
     * }
     */
    public static int IMDT_MOUSE() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum tagINPUT_MESSAGE_DEVICE_TYPE.IMDT_TOUCH = 4;
     * }
     */
    public static int IMDT_TOUCH() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum tagINPUT_MESSAGE_DEVICE_TYPE.IMDT_PEN = 8;
     * }
     */
    public static int IMDT_PEN() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum tagINPUT_MESSAGE_DEVICE_TYPE.IMDT_TOUCHPAD = 16;
     * }
     */
    public static int IMDT_TOUCHPAD() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum tagINPUT_MESSAGE_ORIGIN_ID.IMO_UNAVAILABLE = 0;
     * }
     */
    public static int IMO_UNAVAILABLE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum tagINPUT_MESSAGE_ORIGIN_ID.IMO_HARDWARE = 1;
     * }
     */
    public static int IMO_HARDWARE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum tagINPUT_MESSAGE_ORIGIN_ID.IMO_INJECTED = 2;
     * }
     */
    public static int IMO_INJECTED() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum tagINPUT_MESSAGE_ORIGIN_ID.IMO_SYSTEM = 4;
     * }
     */
    public static int IMO_SYSTEM() {
        return (int)4L;
    }
    public static MethodHandle GetCurrentInputMessageSource$MH() {
        return RuntimeHelper.requireNonNull(constants$516.GetCurrentInputMessageSource$MH,"GetCurrentInputMessageSource");
    }
    /**
     * {@snippet :
     * BOOL GetCurrentInputMessageSource(INPUT_MESSAGE_SOURCE* inputMessageSource);
     * }
     */
    public static int GetCurrentInputMessageSource(MemorySegment inputMessageSource) {
        var mh$ = GetCurrentInputMessageSource$MH();
        try {
            return (int)mh$.invokeExact(inputMessageSource);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCIMSSM$MH() {
        return RuntimeHelper.requireNonNull(constants$516.GetCIMSSM$MH,"GetCIMSSM");
    }
    /**
     * {@snippet :
     * BOOL GetCIMSSM(INPUT_MESSAGE_SOURCE* inputMessageSource);
     * }
     */
    public static int GetCIMSSM(MemorySegment inputMessageSource) {
        var mh$ = GetCIMSSM$MH();
        try {
            return (int)mh$.invokeExact(inputMessageSource);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum tagAR_STATE.AR_ENABLED = 0;
     * }
     */
    public static int AR_ENABLED() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum tagAR_STATE.AR_DISABLED = 1;
     * }
     */
    public static int AR_DISABLED() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum tagAR_STATE.AR_SUPPRESSED = 2;
     * }
     */
    public static int AR_SUPPRESSED() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum tagAR_STATE.AR_REMOTESESSION = 4;
     * }
     */
    public static int AR_REMOTESESSION() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum tagAR_STATE.AR_MULTIMON = 8;
     * }
     */
    public static int AR_MULTIMON() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum tagAR_STATE.AR_NOSENSOR = 16;
     * }
     */
    public static int AR_NOSENSOR() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum tagAR_STATE.AR_NOT_SUPPORTED = 32;
     * }
     */
    public static int AR_NOT_SUPPORTED() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * enum tagAR_STATE.AR_DOCKED = 64;
     * }
     */
    public static int AR_DOCKED() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * enum tagAR_STATE.AR_LAPTOP = 128;
     * }
     */
    public static int AR_LAPTOP() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * typedef enum tagAR_STATE* PAR_STATE;
     * }
     */
    public static final OfAddress PAR_STATE = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * enum ORIENTATION_PREFERENCE.ORIENTATION_PREFERENCE_NONE = 0;
     * }
     */
    public static int ORIENTATION_PREFERENCE_NONE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum ORIENTATION_PREFERENCE.ORIENTATION_PREFERENCE_LANDSCAPE = 1;
     * }
     */
    public static int ORIENTATION_PREFERENCE_LANDSCAPE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum ORIENTATION_PREFERENCE.ORIENTATION_PREFERENCE_PORTRAIT = 2;
     * }
     */
    public static int ORIENTATION_PREFERENCE_PORTRAIT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum ORIENTATION_PREFERENCE.ORIENTATION_PREFERENCE_LANDSCAPE_FLIPPED = 4;
     * }
     */
    public static int ORIENTATION_PREFERENCE_LANDSCAPE_FLIPPED() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum ORIENTATION_PREFERENCE.ORIENTATION_PREFERENCE_PORTRAIT_FLIPPED = 8;
     * }
     */
    public static int ORIENTATION_PREFERENCE_PORTRAIT_FLIPPED() {
        return (int)8L;
    }
    public static MethodHandle GetAutoRotationState$MH() {
        return RuntimeHelper.requireNonNull(constants$516.GetAutoRotationState$MH,"GetAutoRotationState");
    }
    /**
     * {@snippet :
     * BOOL GetAutoRotationState(PAR_STATE pState);
     * }
     */
    public static int GetAutoRotationState(MemorySegment pState) {
        var mh$ = GetAutoRotationState$MH();
        try {
            return (int)mh$.invokeExact(pState);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDisplayAutoRotationPreferences$MH() {
        return RuntimeHelper.requireNonNull(constants$516.GetDisplayAutoRotationPreferences$MH,"GetDisplayAutoRotationPreferences");
    }
    /**
     * {@snippet :
     * BOOL GetDisplayAutoRotationPreferences(ORIENTATION_PREFERENCE* pOrientation);
     * }
     */
    public static int GetDisplayAutoRotationPreferences(MemorySegment pOrientation) {
        var mh$ = GetDisplayAutoRotationPreferences$MH();
        try {
            return (int)mh$.invokeExact(pOrientation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDisplayAutoRotationPreferencesByProcessId$MH() {
        return RuntimeHelper.requireNonNull(constants$517.GetDisplayAutoRotationPreferencesByProcessId$MH,"GetDisplayAutoRotationPreferencesByProcessId");
    }
    /**
     * {@snippet :
     * BOOL GetDisplayAutoRotationPreferencesByProcessId(DWORD dwProcessId, ORIENTATION_PREFERENCE* pOrientation, BOOL* fRotateScreen);
     * }
     */
    public static int GetDisplayAutoRotationPreferencesByProcessId(int dwProcessId, MemorySegment pOrientation, MemorySegment fRotateScreen) {
        var mh$ = GetDisplayAutoRotationPreferencesByProcessId$MH();
        try {
            return (int)mh$.invokeExact(dwProcessId, pOrientation, fRotateScreen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetDisplayAutoRotationPreferences$MH() {
        return RuntimeHelper.requireNonNull(constants$517.SetDisplayAutoRotationPreferences$MH,"SetDisplayAutoRotationPreferences");
    }
    /**
     * {@snippet :
     * BOOL SetDisplayAutoRotationPreferences(ORIENTATION_PREFERENCE orientation);
     * }
     */
    public static int SetDisplayAutoRotationPreferences(int orientation) {
        var mh$ = SetDisplayAutoRotationPreferences$MH();
        try {
            return (int)mh$.invokeExact(orientation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsImmersiveProcess$MH() {
        return RuntimeHelper.requireNonNull(constants$517.IsImmersiveProcess$MH,"IsImmersiveProcess");
    }
    /**
     * {@snippet :
     * BOOL IsImmersiveProcess(HANDLE hProcess);
     * }
     */
    public static int IsImmersiveProcess(MemorySegment hProcess) {
        var mh$ = IsImmersiveProcess$MH();
        try {
            return (int)mh$.invokeExact(hProcess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetProcessRestrictionExemption$MH() {
        return RuntimeHelper.requireNonNull(constants$517.SetProcessRestrictionExemption$MH,"SetProcessRestrictionExemption");
    }
    /**
     * {@snippet :
     * BOOL SetProcessRestrictionExemption(BOOL fEnableExemption);
     * }
     */
    public static int SetProcessRestrictionExemption(int fEnableExemption) {
        var mh$ = SetProcessRestrictionExemption$MH();
        try {
            return (int)mh$.invokeExact(fEnableExemption);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetAdditionalForegroundBoostProcesses$MH() {
        return RuntimeHelper.requireNonNull(constants$517.SetAdditionalForegroundBoostProcesses$MH,"SetAdditionalForegroundBoostProcesses");
    }
    /**
     * {@snippet :
     * BOOL SetAdditionalForegroundBoostProcesses(HWND topLevelWindow, DWORD processHandleCount, HANDLE* processHandleArray);
     * }
     */
    public static int SetAdditionalForegroundBoostProcesses(MemorySegment topLevelWindow, int processHandleCount, MemorySegment processHandleArray) {
        var mh$ = SetAdditionalForegroundBoostProcesses$MH();
        try {
            return (int)mh$.invokeExact(topLevelWindow, processHandleCount, processHandleArray);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum .TDF_REGISTER = 1;
     * }
     */
    public static int TDF_REGISTER() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .TDF_UNREGISTER = 2;
     * }
     */
    public static int TDF_UNREGISTER() {
        return (int)2L;
    }
    public static MethodHandle RegisterForTooltipDismissNotification$MH() {
        return RuntimeHelper.requireNonNull(constants$517.RegisterForTooltipDismissNotification$MH,"RegisterForTooltipDismissNotification");
    }
    /**
     * {@snippet :
     * BOOL RegisterForTooltipDismissNotification(HWND hWnd, TOOLTIP_DISMISS_FLAGS tdFlags);
     * }
     */
    public static int RegisterForTooltipDismissNotification(MemorySegment hWnd, int tdFlags) {
        var mh$ = RegisterForTooltipDismissNotification$MH();
        try {
            return (int)mh$.invokeExact(hWnd, tdFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDateFormatA$MH() {
        return RuntimeHelper.requireNonNull(constants$518.GetDateFormatA$MH,"GetDateFormatA");
    }
    /**
     * {@snippet :
     * int GetDateFormatA(LCID Locale, DWORD dwFlags, const SYSTEMTIME* lpDate, LPCSTR lpFormat, LPSTR lpDateStr, int cchDate);
     * }
     */
    public static int GetDateFormatA(int Locale, int dwFlags, MemorySegment lpDate, MemorySegment lpFormat, MemorySegment lpDateStr, int cchDate) {
        var mh$ = GetDateFormatA$MH();
        try {
            return (int)mh$.invokeExact(Locale, dwFlags, lpDate, lpFormat, lpDateStr, cchDate);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDateFormatW$MH() {
        return RuntimeHelper.requireNonNull(constants$518.GetDateFormatW$MH,"GetDateFormatW");
    }
    /**
     * {@snippet :
     * int GetDateFormatW(LCID Locale, DWORD dwFlags, const SYSTEMTIME* lpDate, LPCWSTR lpFormat, LPWSTR lpDateStr, int cchDate);
     * }
     */
    public static int GetDateFormatW(int Locale, int dwFlags, MemorySegment lpDate, MemorySegment lpFormat, MemorySegment lpDateStr, int cchDate) {
        var mh$ = GetDateFormatW$MH();
        try {
            return (int)mh$.invokeExact(Locale, dwFlags, lpDate, lpFormat, lpDateStr, cchDate);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTimeFormatA$MH() {
        return RuntimeHelper.requireNonNull(constants$518.GetTimeFormatA$MH,"GetTimeFormatA");
    }
    /**
     * {@snippet :
     * int GetTimeFormatA(LCID Locale, DWORD dwFlags, const SYSTEMTIME* lpTime, LPCSTR lpFormat, LPSTR lpTimeStr, int cchTime);
     * }
     */
    public static int GetTimeFormatA(int Locale, int dwFlags, MemorySegment lpTime, MemorySegment lpFormat, MemorySegment lpTimeStr, int cchTime) {
        var mh$ = GetTimeFormatA$MH();
        try {
            return (int)mh$.invokeExact(Locale, dwFlags, lpTime, lpFormat, lpTimeStr, cchTime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTimeFormatW$MH() {
        return RuntimeHelper.requireNonNull(constants$518.GetTimeFormatW$MH,"GetTimeFormatW");
    }
    /**
     * {@snippet :
     * int GetTimeFormatW(LCID Locale, DWORD dwFlags, const SYSTEMTIME* lpTime, LPCWSTR lpFormat, LPWSTR lpTimeStr, int cchTime);
     * }
     */
    public static int GetTimeFormatW(int Locale, int dwFlags, MemorySegment lpTime, MemorySegment lpFormat, MemorySegment lpTimeStr, int cchTime) {
        var mh$ = GetTimeFormatW$MH();
        try {
            return (int)mh$.invokeExact(Locale, dwFlags, lpTime, lpFormat, lpTimeStr, cchTime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTimeFormatEx$MH() {
        return RuntimeHelper.requireNonNull(constants$518.GetTimeFormatEx$MH,"GetTimeFormatEx");
    }
    /**
     * {@snippet :
     * int GetTimeFormatEx(LPCWSTR lpLocaleName, DWORD dwFlags, const SYSTEMTIME* lpTime, LPCWSTR lpFormat, LPWSTR lpTimeStr, int cchTime);
     * }
     */
    public static int GetTimeFormatEx(MemorySegment lpLocaleName, int dwFlags, MemorySegment lpTime, MemorySegment lpFormat, MemorySegment lpTimeStr, int cchTime) {
        var mh$ = GetTimeFormatEx$MH();
        try {
            return (int)mh$.invokeExact(lpLocaleName, dwFlags, lpTime, lpFormat, lpTimeStr, cchTime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDateFormatEx$MH() {
        return RuntimeHelper.requireNonNull(constants$518.GetDateFormatEx$MH,"GetDateFormatEx");
    }
    /**
     * {@snippet :
     * int GetDateFormatEx(LPCWSTR lpLocaleName, DWORD dwFlags, const SYSTEMTIME* lpDate, LPCWSTR lpFormat, LPWSTR lpDateStr, int cchDate, LPCWSTR lpCalendar);
     * }
     */
    public static int GetDateFormatEx(MemorySegment lpLocaleName, int dwFlags, MemorySegment lpDate, MemorySegment lpFormat, MemorySegment lpDateStr, int cchDate, MemorySegment lpCalendar) {
        var mh$ = GetDateFormatEx$MH();
        try {
            return (int)mh$.invokeExact(lpLocaleName, dwFlags, lpDate, lpFormat, lpDateStr, cchDate, lpCalendar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDurationFormatEx$MH() {
        return RuntimeHelper.requireNonNull(constants$519.GetDurationFormatEx$MH,"GetDurationFormatEx");
    }
    /**
     * {@snippet :
     * int GetDurationFormatEx(LPCWSTR lpLocaleName, DWORD dwFlags, const SYSTEMTIME* lpDuration, ULONGLONG ullDuration, LPCWSTR lpFormat, LPWSTR lpDurationStr, int cchDuration);
     * }
     */
    public static int GetDurationFormatEx(MemorySegment lpLocaleName, int dwFlags, MemorySegment lpDuration, long ullDuration, MemorySegment lpFormat, MemorySegment lpDurationStr, int cchDuration) {
        var mh$ = GetDurationFormatEx$MH();
        try {
            return (int)mh$.invokeExact(lpLocaleName, dwFlags, lpDuration, ullDuration, lpFormat, lpDurationStr, cchDuration);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned long LGRPID;
     * }
     */
    public static final OfInt LGRPID = Constants$root.C_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long LCTYPE;
     * }
     */
    public static final OfInt LCTYPE = Constants$root.C_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long CALTYPE;
     * }
     */
    public static final OfInt CALTYPE = Constants$root.C_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long CALID;
     * }
     */
    public static final OfInt CALID = Constants$root.C_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _cpinfo* LPCPINFO;
     * }
     */
    public static final OfAddress LPCPINFO = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long GEOTYPE;
     * }
     */
    public static final OfInt GEOTYPE = Constants$root.C_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long GEOCLASS;
     * }
     */
    public static final OfInt GEOCLASS = Constants$root.C_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long GEOID;
     * }
     */
    public static final OfInt GEOID = Constants$root.C_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _cpinfoexA* LPCPINFOEXA;
     * }
     */
    public static final OfAddress LPCPINFOEXA = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _cpinfoexW* LPCPINFOEXW;
     * }
     */
    public static final OfAddress LPCPINFOEXW = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _cpinfoexA* LPCPINFOEX;
     * }
     */
    public static final OfAddress LPCPINFOEX = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _numberfmtA* LPNUMBERFMTA;
     * }
     */
    public static final OfAddress LPNUMBERFMTA = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _numberfmtW* LPNUMBERFMTW;
     * }
     */
    public static final OfAddress LPNUMBERFMTW = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _numberfmtA* LPNUMBERFMT;
     * }
     */
    public static final OfAddress LPNUMBERFMT = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _currencyfmtA* LPCURRENCYFMTA;
     * }
     */
    public static final OfAddress LPCURRENCYFMTA = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _currencyfmtW* LPCURRENCYFMTW;
     * }
     */
    public static final OfAddress LPCURRENCYFMTW = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _currencyfmtA* LPCURRENCYFMT;
     * }
     */
    public static final OfAddress LPCURRENCYFMT = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * enum SYSNLS_FUNCTION.COMPARE_STRING = 1;
     * }
     */
    public static int COMPARE_STRING() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * typedef unsigned long NLS_FUNCTION;
     * }
     */
    public static final OfInt NLS_FUNCTION = Constants$root.C_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _nlsversioninfo* LPNLSVERSIONINFO;
     * }
     */
    public static final OfAddress LPNLSVERSIONINFO = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _nlsversioninfoex* LPNLSVERSIONINFOEX;
     * }
     */
    public static final OfAddress LPNLSVERSIONINFOEX = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * enum SYSGEOTYPE.GEO_NATION = 1;
     * }
     */
    public static int GEO_NATION() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum SYSGEOTYPE.GEO_LATITUDE = 2;
     * }
     */
    public static int GEO_LATITUDE() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum SYSGEOTYPE.GEO_LONGITUDE = 3;
     * }
     */
    public static int GEO_LONGITUDE() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum SYSGEOTYPE.GEO_ISO2 = 4;
     * }
     */
    public static int GEO_ISO2() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum SYSGEOTYPE.GEO_ISO3 = 5;
     * }
     */
    public static int GEO_ISO3() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum SYSGEOTYPE.GEO_RFC1766 = 6;
     * }
     */
    public static int GEO_RFC1766() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum SYSGEOTYPE.GEO_LCID = 7;
     * }
     */
    public static int GEO_LCID() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum SYSGEOTYPE.GEO_FRIENDLYNAME = 8;
     * }
     */
    public static int GEO_FRIENDLYNAME() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum SYSGEOTYPE.GEO_OFFICIALNAME = 9;
     * }
     */
    public static int GEO_OFFICIALNAME() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum SYSGEOTYPE.GEO_TIMEZONES = 10;
     * }
     */
    public static int GEO_TIMEZONES() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum SYSGEOTYPE.GEO_OFFICIALLANGUAGES = 11;
     * }
     */
    public static int GEO_OFFICIALLANGUAGES() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum SYSGEOTYPE.GEO_ISO_UN_NUMBER = 12;
     * }
     */
    public static int GEO_ISO_UN_NUMBER() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * enum SYSGEOTYPE.GEO_PARENT = 13;
     * }
     */
    public static int GEO_PARENT() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * enum SYSGEOTYPE.GEO_DIALINGCODE = 14;
     * }
     */
    public static int GEO_DIALINGCODE() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * enum SYSGEOTYPE.GEO_CURRENCYCODE = 15;
     * }
     */
    public static int GEO_CURRENCYCODE() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * enum SYSGEOTYPE.GEO_CURRENCYSYMBOL = 16;
     * }
     */
    public static int GEO_CURRENCYSYMBOL() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum SYSGEOTYPE.GEO_NAME = 17;
     * }
     */
    public static int GEO_NAME() {
        return (int)17L;
    }
    /**
     * {@snippet :
     * enum SYSGEOTYPE.GEO_ID = 18;
     * }
     */
    public static int GEO_ID() {
        return (int)18L;
    }
    /**
     * {@snippet :
     * enum SYSGEOCLASS.GEOCLASS_NATION = 16;
     * }
     */
    public static int GEOCLASS_NATION() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum SYSGEOCLASS.GEOCLASS_REGION = 14;
     * }
     */
    public static int GEOCLASS_REGION() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * enum SYSGEOCLASS.GEOCLASS_ALL = 0;
     * }
     */
    public static int GEOCLASS_ALL() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum _NORM_FORM.NormalizationOther = 0;
     * }
     */
    public static int NormalizationOther() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum _NORM_FORM.NormalizationC = 1;
     * }
     */
    public static int NormalizationC() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum _NORM_FORM.NormalizationD = 2;
     * }
     */
    public static int NormalizationD() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum _NORM_FORM.NormalizationKC = 5;
     * }
     */
    public static int NormalizationKC() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum _NORM_FORM.NormalizationKD = 6;
     * }
     */
    public static int NormalizationKD() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * typedef struct _FILEMUIINFO* PFILEMUIINFO;
     * }
     */
    public static final OfAddress PFILEMUIINFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CompareStringEx$MH() {
        return RuntimeHelper.requireNonNull(constants$526.CompareStringEx$MH,"CompareStringEx");
    }
    /**
     * {@snippet :
     * int CompareStringEx(LPCWSTR lpLocaleName, DWORD dwCmpFlags, LPCWCH lpString1, int cchCount1, LPCWCH lpString2, int cchCount2, LPNLSVERSIONINFO lpVersionInformation, LPVOID lpReserved, LPARAM lParam);
     * }
     */
    public static int CompareStringEx(MemorySegment lpLocaleName, int dwCmpFlags, MemorySegment lpString1, int cchCount1, MemorySegment lpString2, int cchCount2, MemorySegment lpVersionInformation, MemorySegment lpReserved, long lParam) {
        var mh$ = CompareStringEx$MH();
        try {
            return (int)mh$.invokeExact(lpLocaleName, dwCmpFlags, lpString1, cchCount1, lpString2, cchCount2, lpVersionInformation, lpReserved, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CompareStringOrdinal$MH() {
        return RuntimeHelper.requireNonNull(constants$526.CompareStringOrdinal$MH,"CompareStringOrdinal");
    }
    /**
     * {@snippet :
     * int CompareStringOrdinal(LPCWCH lpString1, int cchCount1, LPCWCH lpString2, int cchCount2, BOOL bIgnoreCase);
     * }
     */
    public static int CompareStringOrdinal(MemorySegment lpString1, int cchCount1, MemorySegment lpString2, int cchCount2, int bIgnoreCase) {
        var mh$ = CompareStringOrdinal$MH();
        try {
            return (int)mh$.invokeExact(lpString1, cchCount1, lpString2, cchCount2, bIgnoreCase);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CompareStringW$MH() {
        return RuntimeHelper.requireNonNull(constants$526.CompareStringW$MH,"CompareStringW");
    }
    /**
     * {@snippet :
     * int CompareStringW(LCID Locale, DWORD dwCmpFlags, PCNZWCH lpString1, int cchCount1, PCNZWCH lpString2, int cchCount2);
     * }
     */
    public static int CompareStringW(int Locale, int dwCmpFlags, MemorySegment lpString1, int cchCount1, MemorySegment lpString2, int cchCount2) {
        var mh$ = CompareStringW$MH();
        try {
            return (int)mh$.invokeExact(Locale, dwCmpFlags, lpString1, cchCount1, lpString2, cchCount2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FoldStringW$MH() {
        return RuntimeHelper.requireNonNull(constants$527.FoldStringW$MH,"FoldStringW");
    }
    /**
     * {@snippet :
     * int FoldStringW(DWORD dwMapFlags, LPCWCH lpSrcStr, int cchSrc, LPWSTR lpDestStr, int cchDest);
     * }
     */
    public static int FoldStringW(int dwMapFlags, MemorySegment lpSrcStr, int cchSrc, MemorySegment lpDestStr, int cchDest) {
        var mh$ = FoldStringW$MH();
        try {
            return (int)mh$.invokeExact(dwMapFlags, lpSrcStr, cchSrc, lpDestStr, cchDest);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetStringTypeExW$MH() {
        return RuntimeHelper.requireNonNull(constants$527.GetStringTypeExW$MH,"GetStringTypeExW");
    }
    /**
     * {@snippet :
     * BOOL GetStringTypeExW(LCID Locale, DWORD dwInfoType, LPCWCH lpSrcStr, int cchSrc, LPWORD lpCharType);
     * }
     */
    public static int GetStringTypeExW(int Locale, int dwInfoType, MemorySegment lpSrcStr, int cchSrc, MemorySegment lpCharType) {
        var mh$ = GetStringTypeExW$MH();
        try {
            return (int)mh$.invokeExact(Locale, dwInfoType, lpSrcStr, cchSrc, lpCharType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetStringTypeW$MH() {
        return RuntimeHelper.requireNonNull(constants$527.GetStringTypeW$MH,"GetStringTypeW");
    }
    /**
     * {@snippet :
     * BOOL GetStringTypeW(DWORD dwInfoType, LPCWCH lpSrcStr, int cchSrc, LPWORD lpCharType);
     * }
     */
    public static int GetStringTypeW(int dwInfoType, MemorySegment lpSrcStr, int cchSrc, MemorySegment lpCharType) {
        var mh$ = GetStringTypeW$MH();
        try {
            return (int)mh$.invokeExact(dwInfoType, lpSrcStr, cchSrc, lpCharType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MultiByteToWideChar$MH() {
        return RuntimeHelper.requireNonNull(constants$527.MultiByteToWideChar$MH,"MultiByteToWideChar");
    }
    /**
     * {@snippet :
     * int MultiByteToWideChar(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar);
     * }
     */
    public static int MultiByteToWideChar(int CodePage, int dwFlags, MemorySegment lpMultiByteStr, int cbMultiByte, MemorySegment lpWideCharStr, int cchWideChar) {
        var mh$ = MultiByteToWideChar$MH();
        try {
            return (int)mh$.invokeExact(CodePage, dwFlags, lpMultiByteStr, cbMultiByte, lpWideCharStr, cchWideChar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WideCharToMultiByte$MH() {
        return RuntimeHelper.requireNonNull(constants$527.WideCharToMultiByte$MH,"WideCharToMultiByte");
    }
    /**
     * {@snippet :
     * int WideCharToMultiByte(UINT CodePage, DWORD dwFlags, LPCWCH lpWideCharStr, int cchWideChar, LPSTR lpMultiByteStr, int cbMultiByte, LPCCH lpDefaultChar, LPBOOL lpUsedDefaultChar);
     * }
     */
    public static int WideCharToMultiByte(int CodePage, int dwFlags, MemorySegment lpWideCharStr, int cchWideChar, MemorySegment lpMultiByteStr, int cbMultiByte, MemorySegment lpDefaultChar, MemorySegment lpUsedDefaultChar) {
        var mh$ = WideCharToMultiByte$MH();
        try {
            return (int)mh$.invokeExact(CodePage, dwFlags, lpWideCharStr, cchWideChar, lpMultiByteStr, cbMultiByte, lpDefaultChar, lpUsedDefaultChar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsValidCodePage$MH() {
        return RuntimeHelper.requireNonNull(constants$527.IsValidCodePage$MH,"IsValidCodePage");
    }
    /**
     * {@snippet :
     * BOOL IsValidCodePage(UINT CodePage);
     * }
     */
    public static int IsValidCodePage(int CodePage) {
        var mh$ = IsValidCodePage$MH();
        try {
            return (int)mh$.invokeExact(CodePage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetACP$MH() {
        return RuntimeHelper.requireNonNull(constants$528.GetACP$MH,"GetACP");
    }
    /**
     * {@snippet :
     * UINT GetACP();
     * }
     */
    public static int GetACP() {
        var mh$ = GetACP$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetOEMCP$MH() {
        return RuntimeHelper.requireNonNull(constants$528.GetOEMCP$MH,"GetOEMCP");
    }
    /**
     * {@snippet :
     * UINT GetOEMCP();
     * }
     */
    public static int GetOEMCP() {
        var mh$ = GetOEMCP$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCPInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$528.GetCPInfo$MH,"GetCPInfo");
    }
    /**
     * {@snippet :
     * BOOL GetCPInfo(UINT CodePage, LPCPINFO lpCPInfo);
     * }
     */
    public static int GetCPInfo(int CodePage, MemorySegment lpCPInfo) {
        var mh$ = GetCPInfo$MH();
        try {
            return (int)mh$.invokeExact(CodePage, lpCPInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCPInfoExA$MH() {
        return RuntimeHelper.requireNonNull(constants$528.GetCPInfoExA$MH,"GetCPInfoExA");
    }
    /**
     * {@snippet :
     * BOOL GetCPInfoExA(UINT CodePage, DWORD dwFlags, LPCPINFOEXA lpCPInfoEx);
     * }
     */
    public static int GetCPInfoExA(int CodePage, int dwFlags, MemorySegment lpCPInfoEx) {
        var mh$ = GetCPInfoExA$MH();
        try {
            return (int)mh$.invokeExact(CodePage, dwFlags, lpCPInfoEx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCPInfoExW$MH() {
        return RuntimeHelper.requireNonNull(constants$528.GetCPInfoExW$MH,"GetCPInfoExW");
    }
    /**
     * {@snippet :
     * BOOL GetCPInfoExW(UINT CodePage, DWORD dwFlags, LPCPINFOEXW lpCPInfoEx);
     * }
     */
    public static int GetCPInfoExW(int CodePage, int dwFlags, MemorySegment lpCPInfoEx) {
        var mh$ = GetCPInfoExW$MH();
        try {
            return (int)mh$.invokeExact(CodePage, dwFlags, lpCPInfoEx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CompareStringA$MH() {
        return RuntimeHelper.requireNonNull(constants$528.CompareStringA$MH,"CompareStringA");
    }
    /**
     * {@snippet :
     * int CompareStringA(LCID Locale, DWORD dwCmpFlags, PCNZCH lpString1, int cchCount1, PCNZCH lpString2, int cchCount2);
     * }
     */
    public static int CompareStringA(int Locale, int dwCmpFlags, MemorySegment lpString1, int cchCount1, MemorySegment lpString2, int cchCount2) {
        var mh$ = CompareStringA$MH();
        try {
            return (int)mh$.invokeExact(Locale, dwCmpFlags, lpString1, cchCount1, lpString2, cchCount2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindNLSString$MH() {
        return RuntimeHelper.requireNonNull(constants$529.FindNLSString$MH,"FindNLSString");
    }
    /**
     * {@snippet :
     * int FindNLSString(LCID Locale, DWORD dwFindNLSStringFlags, LPCWSTR lpStringSource, int cchSource, LPCWSTR lpStringValue, int cchValue, LPINT pcchFound);
     * }
     */
    public static int FindNLSString(int Locale, int dwFindNLSStringFlags, MemorySegment lpStringSource, int cchSource, MemorySegment lpStringValue, int cchValue, MemorySegment pcchFound) {
        var mh$ = FindNLSString$MH();
        try {
            return (int)mh$.invokeExact(Locale, dwFindNLSStringFlags, lpStringSource, cchSource, lpStringValue, cchValue, pcchFound);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LCMapStringW$MH() {
        return RuntimeHelper.requireNonNull(constants$529.LCMapStringW$MH,"LCMapStringW");
    }
    /**
     * {@snippet :
     * int LCMapStringW(LCID Locale, DWORD dwMapFlags, LPCWSTR lpSrcStr, int cchSrc, LPWSTR lpDestStr, int cchDest);
     * }
     */
    public static int LCMapStringW(int Locale, int dwMapFlags, MemorySegment lpSrcStr, int cchSrc, MemorySegment lpDestStr, int cchDest) {
        var mh$ = LCMapStringW$MH();
        try {
            return (int)mh$.invokeExact(Locale, dwMapFlags, lpSrcStr, cchSrc, lpDestStr, cchDest);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LCMapStringA$MH() {
        return RuntimeHelper.requireNonNull(constants$529.LCMapStringA$MH,"LCMapStringA");
    }
    /**
     * {@snippet :
     * int LCMapStringA(LCID Locale, DWORD dwMapFlags, LPCSTR lpSrcStr, int cchSrc, LPSTR lpDestStr, int cchDest);
     * }
     */
    public static int LCMapStringA(int Locale, int dwMapFlags, MemorySegment lpSrcStr, int cchSrc, MemorySegment lpDestStr, int cchDest) {
        var mh$ = LCMapStringA$MH();
        try {
            return (int)mh$.invokeExact(Locale, dwMapFlags, lpSrcStr, cchSrc, lpDestStr, cchDest);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetLocaleInfoW$MH() {
        return RuntimeHelper.requireNonNull(constants$529.GetLocaleInfoW$MH,"GetLocaleInfoW");
    }
    /**
     * {@snippet :
     * int GetLocaleInfoW(LCID Locale, LCTYPE LCType, LPWSTR lpLCData, int cchData);
     * }
     */
    public static int GetLocaleInfoW(int Locale, int LCType, MemorySegment lpLCData, int cchData) {
        var mh$ = GetLocaleInfoW$MH();
        try {
            return (int)mh$.invokeExact(Locale, LCType, lpLCData, cchData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetLocaleInfoA$MH() {
        return RuntimeHelper.requireNonNull(constants$529.GetLocaleInfoA$MH,"GetLocaleInfoA");
    }
    /**
     * {@snippet :
     * int GetLocaleInfoA(LCID Locale, LCTYPE LCType, LPSTR lpLCData, int cchData);
     * }
     */
    public static int GetLocaleInfoA(int Locale, int LCType, MemorySegment lpLCData, int cchData) {
        var mh$ = GetLocaleInfoA$MH();
        try {
            return (int)mh$.invokeExact(Locale, LCType, lpLCData, cchData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetLocaleInfoA$MH() {
        return RuntimeHelper.requireNonNull(constants$529.SetLocaleInfoA$MH,"SetLocaleInfoA");
    }
    /**
     * {@snippet :
     * BOOL SetLocaleInfoA(LCID Locale, LCTYPE LCType, LPCSTR lpLCData);
     * }
     */
    public static int SetLocaleInfoA(int Locale, int LCType, MemorySegment lpLCData) {
        var mh$ = SetLocaleInfoA$MH();
        try {
            return (int)mh$.invokeExact(Locale, LCType, lpLCData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetLocaleInfoW$MH() {
        return RuntimeHelper.requireNonNull(constants$530.SetLocaleInfoW$MH,"SetLocaleInfoW");
    }
    /**
     * {@snippet :
     * BOOL SetLocaleInfoW(LCID Locale, LCTYPE LCType, LPCWSTR lpLCData);
     * }
     */
    public static int SetLocaleInfoW(int Locale, int LCType, MemorySegment lpLCData) {
        var mh$ = SetLocaleInfoW$MH();
        try {
            return (int)mh$.invokeExact(Locale, LCType, lpLCData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCalendarInfoA$MH() {
        return RuntimeHelper.requireNonNull(constants$530.GetCalendarInfoA$MH,"GetCalendarInfoA");
    }
    /**
     * {@snippet :
     * int GetCalendarInfoA(LCID Locale, CALID Calendar, CALTYPE CalType, LPSTR lpCalData, int cchData, LPDWORD lpValue);
     * }
     */
    public static int GetCalendarInfoA(int Locale, int Calendar, int CalType, MemorySegment lpCalData, int cchData, MemorySegment lpValue) {
        var mh$ = GetCalendarInfoA$MH();
        try {
            return (int)mh$.invokeExact(Locale, Calendar, CalType, lpCalData, cchData, lpValue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCalendarInfoW$MH() {
        return RuntimeHelper.requireNonNull(constants$530.GetCalendarInfoW$MH,"GetCalendarInfoW");
    }
    /**
     * {@snippet :
     * int GetCalendarInfoW(LCID Locale, CALID Calendar, CALTYPE CalType, LPWSTR lpCalData, int cchData, LPDWORD lpValue);
     * }
     */
    public static int GetCalendarInfoW(int Locale, int Calendar, int CalType, MemorySegment lpCalData, int cchData, MemorySegment lpValue) {
        var mh$ = GetCalendarInfoW$MH();
        try {
            return (int)mh$.invokeExact(Locale, Calendar, CalType, lpCalData, cchData, lpValue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetCalendarInfoA$MH() {
        return RuntimeHelper.requireNonNull(constants$530.SetCalendarInfoA$MH,"SetCalendarInfoA");
    }
    /**
     * {@snippet :
     * BOOL SetCalendarInfoA(LCID Locale, CALID Calendar, CALTYPE CalType, LPCSTR lpCalData);
     * }
     */
    public static int SetCalendarInfoA(int Locale, int Calendar, int CalType, MemorySegment lpCalData) {
        var mh$ = SetCalendarInfoA$MH();
        try {
            return (int)mh$.invokeExact(Locale, Calendar, CalType, lpCalData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetCalendarInfoW$MH() {
        return RuntimeHelper.requireNonNull(constants$530.SetCalendarInfoW$MH,"SetCalendarInfoW");
    }
    /**
     * {@snippet :
     * BOOL SetCalendarInfoW(LCID Locale, CALID Calendar, CALTYPE CalType, LPCWSTR lpCalData);
     * }
     */
    public static int SetCalendarInfoW(int Locale, int Calendar, int CalType, MemorySegment lpCalData) {
        var mh$ = SetCalendarInfoW$MH();
        try {
            return (int)mh$.invokeExact(Locale, Calendar, CalType, lpCalData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadStringByReference$MH() {
        return RuntimeHelper.requireNonNull(constants$530.LoadStringByReference$MH,"LoadStringByReference");
    }
    /**
     * {@snippet :
     * BOOL LoadStringByReference(DWORD Flags, PCWSTR Language, PCWSTR SourceString, PWSTR Buffer, ULONG cchBuffer, PCWSTR Directory, PULONG pcchBufferOut);
     * }
     */
    public static int LoadStringByReference(int Flags, MemorySegment Language, MemorySegment SourceString, MemorySegment Buffer, int cchBuffer, MemorySegment Directory, MemorySegment pcchBufferOut) {
        var mh$ = LoadStringByReference$MH();
        try {
            return (int)mh$.invokeExact(Flags, Language, SourceString, Buffer, cchBuffer, Directory, pcchBufferOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsDBCSLeadByte$MH() {
        return RuntimeHelper.requireNonNull(constants$531.IsDBCSLeadByte$MH,"IsDBCSLeadByte");
    }
    /**
     * {@snippet :
     * BOOL IsDBCSLeadByte(BYTE TestChar);
     * }
     */
    public static int IsDBCSLeadByte(byte TestChar) {
        var mh$ = IsDBCSLeadByte$MH();
        try {
            return (int)mh$.invokeExact(TestChar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsDBCSLeadByteEx$MH() {
        return RuntimeHelper.requireNonNull(constants$531.IsDBCSLeadByteEx$MH,"IsDBCSLeadByteEx");
    }
    /**
     * {@snippet :
     * BOOL IsDBCSLeadByteEx(UINT CodePage, BYTE TestChar);
     * }
     */
    public static int IsDBCSLeadByteEx(int CodePage, byte TestChar) {
        var mh$ = IsDBCSLeadByteEx$MH();
        try {
            return (int)mh$.invokeExact(CodePage, TestChar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LocaleNameToLCID$MH() {
        return RuntimeHelper.requireNonNull(constants$531.LocaleNameToLCID$MH,"LocaleNameToLCID");
    }
    /**
     * {@snippet :
     * LCID LocaleNameToLCID(LPCWSTR lpName, DWORD dwFlags);
     * }
     */
    public static int LocaleNameToLCID(MemorySegment lpName, int dwFlags) {
        var mh$ = LocaleNameToLCID$MH();
        try {
            return (int)mh$.invokeExact(lpName, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LCIDToLocaleName$MH() {
        return RuntimeHelper.requireNonNull(constants$531.LCIDToLocaleName$MH,"LCIDToLocaleName");
    }
    /**
     * {@snippet :
     * int LCIDToLocaleName(LCID Locale, LPWSTR lpName, int cchName, DWORD dwFlags);
     * }
     */
    public static int LCIDToLocaleName(int Locale, MemorySegment lpName, int cchName, int dwFlags) {
        var mh$ = LCIDToLocaleName$MH();
        try {
            return (int)mh$.invokeExact(Locale, lpName, cchName, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDurationFormat$MH() {
        return RuntimeHelper.requireNonNull(constants$531.GetDurationFormat$MH,"GetDurationFormat");
    }
    /**
     * {@snippet :
     * int GetDurationFormat(LCID Locale, DWORD dwFlags, const SYSTEMTIME* lpDuration, ULONGLONG ullDuration, LPCWSTR lpFormat, LPWSTR lpDurationStr, int cchDuration);
     * }
     */
    public static int GetDurationFormat(int Locale, int dwFlags, MemorySegment lpDuration, long ullDuration, MemorySegment lpFormat, MemorySegment lpDurationStr, int cchDuration) {
        var mh$ = GetDurationFormat$MH();
        try {
            return (int)mh$.invokeExact(Locale, dwFlags, lpDuration, ullDuration, lpFormat, lpDurationStr, cchDuration);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNumberFormatA$MH() {
        return RuntimeHelper.requireNonNull(constants$531.GetNumberFormatA$MH,"GetNumberFormatA");
    }
    /**
     * {@snippet :
     * int GetNumberFormatA(LCID Locale, DWORD dwFlags, LPCSTR lpValue, const NUMBERFMTA* lpFormat, LPSTR lpNumberStr, int cchNumber);
     * }
     */
    public static int GetNumberFormatA(int Locale, int dwFlags, MemorySegment lpValue, MemorySegment lpFormat, MemorySegment lpNumberStr, int cchNumber) {
        var mh$ = GetNumberFormatA$MH();
        try {
            return (int)mh$.invokeExact(Locale, dwFlags, lpValue, lpFormat, lpNumberStr, cchNumber);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNumberFormatW$MH() {
        return RuntimeHelper.requireNonNull(constants$532.GetNumberFormatW$MH,"GetNumberFormatW");
    }
    /**
     * {@snippet :
     * int GetNumberFormatW(LCID Locale, DWORD dwFlags, LPCWSTR lpValue, const NUMBERFMTW* lpFormat, LPWSTR lpNumberStr, int cchNumber);
     * }
     */
    public static int GetNumberFormatW(int Locale, int dwFlags, MemorySegment lpValue, MemorySegment lpFormat, MemorySegment lpNumberStr, int cchNumber) {
        var mh$ = GetNumberFormatW$MH();
        try {
            return (int)mh$.invokeExact(Locale, dwFlags, lpValue, lpFormat, lpNumberStr, cchNumber);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCurrencyFormatA$MH() {
        return RuntimeHelper.requireNonNull(constants$532.GetCurrencyFormatA$MH,"GetCurrencyFormatA");
    }
    /**
     * {@snippet :
     * int GetCurrencyFormatA(LCID Locale, DWORD dwFlags, LPCSTR lpValue, const CURRENCYFMTA* lpFormat, LPSTR lpCurrencyStr, int cchCurrency);
     * }
     */
    public static int GetCurrencyFormatA(int Locale, int dwFlags, MemorySegment lpValue, MemorySegment lpFormat, MemorySegment lpCurrencyStr, int cchCurrency) {
        var mh$ = GetCurrencyFormatA$MH();
        try {
            return (int)mh$.invokeExact(Locale, dwFlags, lpValue, lpFormat, lpCurrencyStr, cchCurrency);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCurrencyFormatW$MH() {
        return RuntimeHelper.requireNonNull(constants$532.GetCurrencyFormatW$MH,"GetCurrencyFormatW");
    }
    /**
     * {@snippet :
     * int GetCurrencyFormatW(LCID Locale, DWORD dwFlags, LPCWSTR lpValue, const CURRENCYFMTW* lpFormat, LPWSTR lpCurrencyStr, int cchCurrency);
     * }
     */
    public static int GetCurrencyFormatW(int Locale, int dwFlags, MemorySegment lpValue, MemorySegment lpFormat, MemorySegment lpCurrencyStr, int cchCurrency) {
        var mh$ = GetCurrencyFormatW$MH();
        try {
            return (int)mh$.invokeExact(Locale, dwFlags, lpValue, lpFormat, lpCurrencyStr, cchCurrency);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumCalendarInfoA$MH() {
        return RuntimeHelper.requireNonNull(constants$532.EnumCalendarInfoA$MH,"EnumCalendarInfoA");
    }
    /**
     * {@snippet :
     * BOOL EnumCalendarInfoA(CALINFO_ENUMPROCA lpCalInfoEnumProc, LCID Locale, CALID Calendar, CALTYPE CalType);
     * }
     */
    public static int EnumCalendarInfoA(MemorySegment lpCalInfoEnumProc, int Locale, int Calendar, int CalType) {
        var mh$ = EnumCalendarInfoA$MH();
        try {
            return (int)mh$.invokeExact(lpCalInfoEnumProc, Locale, Calendar, CalType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumCalendarInfoW$MH() {
        return RuntimeHelper.requireNonNull(constants$532.EnumCalendarInfoW$MH,"EnumCalendarInfoW");
    }
    /**
     * {@snippet :
     * BOOL EnumCalendarInfoW(CALINFO_ENUMPROCW lpCalInfoEnumProc, LCID Locale, CALID Calendar, CALTYPE CalType);
     * }
     */
    public static int EnumCalendarInfoW(MemorySegment lpCalInfoEnumProc, int Locale, int Calendar, int CalType) {
        var mh$ = EnumCalendarInfoW$MH();
        try {
            return (int)mh$.invokeExact(lpCalInfoEnumProc, Locale, Calendar, CalType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumCalendarInfoExA$MH() {
        return RuntimeHelper.requireNonNull(constants$532.EnumCalendarInfoExA$MH,"EnumCalendarInfoExA");
    }
    /**
     * {@snippet :
     * BOOL EnumCalendarInfoExA(CALINFO_ENUMPROCEXA lpCalInfoEnumProcEx, LCID Locale, CALID Calendar, CALTYPE CalType);
     * }
     */
    public static int EnumCalendarInfoExA(MemorySegment lpCalInfoEnumProcEx, int Locale, int Calendar, int CalType) {
        var mh$ = EnumCalendarInfoExA$MH();
        try {
            return (int)mh$.invokeExact(lpCalInfoEnumProcEx, Locale, Calendar, CalType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumCalendarInfoExW$MH() {
        return RuntimeHelper.requireNonNull(constants$533.EnumCalendarInfoExW$MH,"EnumCalendarInfoExW");
    }
    /**
     * {@snippet :
     * BOOL EnumCalendarInfoExW(CALINFO_ENUMPROCEXW lpCalInfoEnumProcEx, LCID Locale, CALID Calendar, CALTYPE CalType);
     * }
     */
    public static int EnumCalendarInfoExW(MemorySegment lpCalInfoEnumProcEx, int Locale, int Calendar, int CalType) {
        var mh$ = EnumCalendarInfoExW$MH();
        try {
            return (int)mh$.invokeExact(lpCalInfoEnumProcEx, Locale, Calendar, CalType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumTimeFormatsA$MH() {
        return RuntimeHelper.requireNonNull(constants$533.EnumTimeFormatsA$MH,"EnumTimeFormatsA");
    }
    /**
     * {@snippet :
     * BOOL EnumTimeFormatsA(TIMEFMT_ENUMPROCA lpTimeFmtEnumProc, LCID Locale, DWORD dwFlags);
     * }
     */
    public static int EnumTimeFormatsA(MemorySegment lpTimeFmtEnumProc, int Locale, int dwFlags) {
        var mh$ = EnumTimeFormatsA$MH();
        try {
            return (int)mh$.invokeExact(lpTimeFmtEnumProc, Locale, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumTimeFormatsW$MH() {
        return RuntimeHelper.requireNonNull(constants$533.EnumTimeFormatsW$MH,"EnumTimeFormatsW");
    }
    /**
     * {@snippet :
     * BOOL EnumTimeFormatsW(TIMEFMT_ENUMPROCW lpTimeFmtEnumProc, LCID Locale, DWORD dwFlags);
     * }
     */
    public static int EnumTimeFormatsW(MemorySegment lpTimeFmtEnumProc, int Locale, int dwFlags) {
        var mh$ = EnumTimeFormatsW$MH();
        try {
            return (int)mh$.invokeExact(lpTimeFmtEnumProc, Locale, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumDateFormatsA$MH() {
        return RuntimeHelper.requireNonNull(constants$533.EnumDateFormatsA$MH,"EnumDateFormatsA");
    }
    /**
     * {@snippet :
     * BOOL EnumDateFormatsA(DATEFMT_ENUMPROCA lpDateFmtEnumProc, LCID Locale, DWORD dwFlags);
     * }
     */
    public static int EnumDateFormatsA(MemorySegment lpDateFmtEnumProc, int Locale, int dwFlags) {
        var mh$ = EnumDateFormatsA$MH();
        try {
            return (int)mh$.invokeExact(lpDateFmtEnumProc, Locale, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumDateFormatsW$MH() {
        return RuntimeHelper.requireNonNull(constants$533.EnumDateFormatsW$MH,"EnumDateFormatsW");
    }
    /**
     * {@snippet :
     * BOOL EnumDateFormatsW(DATEFMT_ENUMPROCW lpDateFmtEnumProc, LCID Locale, DWORD dwFlags);
     * }
     */
    public static int EnumDateFormatsW(MemorySegment lpDateFmtEnumProc, int Locale, int dwFlags) {
        var mh$ = EnumDateFormatsW$MH();
        try {
            return (int)mh$.invokeExact(lpDateFmtEnumProc, Locale, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumDateFormatsExA$MH() {
        return RuntimeHelper.requireNonNull(constants$533.EnumDateFormatsExA$MH,"EnumDateFormatsExA");
    }
    /**
     * {@snippet :
     * BOOL EnumDateFormatsExA(DATEFMT_ENUMPROCEXA lpDateFmtEnumProcEx, LCID Locale, DWORD dwFlags);
     * }
     */
    public static int EnumDateFormatsExA(MemorySegment lpDateFmtEnumProcEx, int Locale, int dwFlags) {
        var mh$ = EnumDateFormatsExA$MH();
        try {
            return (int)mh$.invokeExact(lpDateFmtEnumProcEx, Locale, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumDateFormatsExW$MH() {
        return RuntimeHelper.requireNonNull(constants$534.EnumDateFormatsExW$MH,"EnumDateFormatsExW");
    }
    /**
     * {@snippet :
     * BOOL EnumDateFormatsExW(DATEFMT_ENUMPROCEXW lpDateFmtEnumProcEx, LCID Locale, DWORD dwFlags);
     * }
     */
    public static int EnumDateFormatsExW(MemorySegment lpDateFmtEnumProcEx, int Locale, int dwFlags) {
        var mh$ = EnumDateFormatsExW$MH();
        try {
            return (int)mh$.invokeExact(lpDateFmtEnumProcEx, Locale, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsValidLanguageGroup$MH() {
        return RuntimeHelper.requireNonNull(constants$534.IsValidLanguageGroup$MH,"IsValidLanguageGroup");
    }
    /**
     * {@snippet :
     * BOOL IsValidLanguageGroup(LGRPID LanguageGroup, DWORD dwFlags);
     * }
     */
    public static int IsValidLanguageGroup(int LanguageGroup, int dwFlags) {
        var mh$ = IsValidLanguageGroup$MH();
        try {
            return (int)mh$.invokeExact(LanguageGroup, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNLSVersion$MH() {
        return RuntimeHelper.requireNonNull(constants$534.GetNLSVersion$MH,"GetNLSVersion");
    }
    /**
     * {@snippet :
     * BOOL GetNLSVersion(NLS_FUNCTION Function, LCID Locale, LPNLSVERSIONINFO lpVersionInformation);
     * }
     */
    public static int GetNLSVersion(int Function, int Locale, MemorySegment lpVersionInformation) {
        var mh$ = GetNLSVersion$MH();
        try {
            return (int)mh$.invokeExact(Function, Locale, lpVersionInformation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsValidLocale$MH() {
        return RuntimeHelper.requireNonNull(constants$534.IsValidLocale$MH,"IsValidLocale");
    }
    /**
     * {@snippet :
     * BOOL IsValidLocale(LCID Locale, DWORD dwFlags);
     * }
     */
    public static int IsValidLocale(int Locale, int dwFlags) {
        var mh$ = IsValidLocale$MH();
        try {
            return (int)mh$.invokeExact(Locale, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetGeoInfoA$MH() {
        return RuntimeHelper.requireNonNull(constants$534.GetGeoInfoA$MH,"GetGeoInfoA");
    }
    /**
     * {@snippet :
     * int GetGeoInfoA(GEOID Location, GEOTYPE GeoType, LPSTR lpGeoData, int cchData, LANGID LangId);
     * }
     */
    public static int GetGeoInfoA(int Location, int GeoType, MemorySegment lpGeoData, int cchData, short LangId) {
        var mh$ = GetGeoInfoA$MH();
        try {
            return (int)mh$.invokeExact(Location, GeoType, lpGeoData, cchData, LangId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetGeoInfoW$MH() {
        return RuntimeHelper.requireNonNull(constants$534.GetGeoInfoW$MH,"GetGeoInfoW");
    }
    /**
     * {@snippet :
     * int GetGeoInfoW(GEOID Location, GEOTYPE GeoType, LPWSTR lpGeoData, int cchData, LANGID LangId);
     * }
     */
    public static int GetGeoInfoW(int Location, int GeoType, MemorySegment lpGeoData, int cchData, short LangId) {
        var mh$ = GetGeoInfoW$MH();
        try {
            return (int)mh$.invokeExact(Location, GeoType, lpGeoData, cchData, LangId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetGeoInfoEx$MH() {
        return RuntimeHelper.requireNonNull(constants$535.GetGeoInfoEx$MH,"GetGeoInfoEx");
    }
    /**
     * {@snippet :
     * int GetGeoInfoEx(PWSTR location, GEOTYPE geoType, PWSTR geoData, int geoDataCount);
     * }
     */
    public static int GetGeoInfoEx(MemorySegment location, int geoType, MemorySegment geoData, int geoDataCount) {
        var mh$ = GetGeoInfoEx$MH();
        try {
            return (int)mh$.invokeExact(location, geoType, geoData, geoDataCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumSystemGeoID$MH() {
        return RuntimeHelper.requireNonNull(constants$535.EnumSystemGeoID$MH,"EnumSystemGeoID");
    }
    /**
     * {@snippet :
     * BOOL EnumSystemGeoID(GEOCLASS GeoClass, GEOID ParentGeoId, GEO_ENUMPROC lpGeoEnumProc);
     * }
     */
    public static int EnumSystemGeoID(int GeoClass, int ParentGeoId, MemorySegment lpGeoEnumProc) {
        var mh$ = EnumSystemGeoID$MH();
        try {
            return (int)mh$.invokeExact(GeoClass, ParentGeoId, lpGeoEnumProc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumSystemGeoNames$MH() {
        return RuntimeHelper.requireNonNull(constants$535.EnumSystemGeoNames$MH,"EnumSystemGeoNames");
    }
    /**
     * {@snippet :
     * BOOL EnumSystemGeoNames(GEOCLASS geoClass, GEO_ENUMNAMEPROC geoEnumProc, LPARAM data);
     * }
     */
    public static int EnumSystemGeoNames(int geoClass, MemorySegment geoEnumProc, long data) {
        var mh$ = EnumSystemGeoNames$MH();
        try {
            return (int)mh$.invokeExact(geoClass, geoEnumProc, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetUserGeoID$MH() {
        return RuntimeHelper.requireNonNull(constants$535.GetUserGeoID$MH,"GetUserGeoID");
    }
    /**
     * {@snippet :
     * GEOID GetUserGeoID(GEOCLASS GeoClass);
     * }
     */
    public static int GetUserGeoID(int GeoClass) {
        var mh$ = GetUserGeoID$MH();
        try {
            return (int)mh$.invokeExact(GeoClass);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetUserDefaultGeoName$MH() {
        return RuntimeHelper.requireNonNull(constants$535.GetUserDefaultGeoName$MH,"GetUserDefaultGeoName");
    }
    /**
     * {@snippet :
     * int GetUserDefaultGeoName(LPWSTR geoName, int geoNameCount);
     * }
     */
    public static int GetUserDefaultGeoName(MemorySegment geoName, int geoNameCount) {
        var mh$ = GetUserDefaultGeoName$MH();
        try {
            return (int)mh$.invokeExact(geoName, geoNameCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetUserGeoID$MH() {
        return RuntimeHelper.requireNonNull(constants$535.SetUserGeoID$MH,"SetUserGeoID");
    }
    /**
     * {@snippet :
     * BOOL SetUserGeoID(GEOID GeoId);
     * }
     */
    public static int SetUserGeoID(int GeoId) {
        var mh$ = SetUserGeoID$MH();
        try {
            return (int)mh$.invokeExact(GeoId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetUserGeoName$MH() {
        return RuntimeHelper.requireNonNull(constants$536.SetUserGeoName$MH,"SetUserGeoName");
    }
    /**
     * {@snippet :
     * BOOL SetUserGeoName(PWSTR geoName);
     * }
     */
    public static int SetUserGeoName(MemorySegment geoName) {
        var mh$ = SetUserGeoName$MH();
        try {
            return (int)mh$.invokeExact(geoName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ConvertDefaultLocale$MH() {
        return RuntimeHelper.requireNonNull(constants$536.ConvertDefaultLocale$MH,"ConvertDefaultLocale");
    }
    /**
     * {@snippet :
     * LCID ConvertDefaultLocale(LCID Locale);
     * }
     */
    public static int ConvertDefaultLocale(int Locale) {
        var mh$ = ConvertDefaultLocale$MH();
        try {
            return (int)mh$.invokeExact(Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSystemDefaultUILanguage$MH() {
        return RuntimeHelper.requireNonNull(constants$536.GetSystemDefaultUILanguage$MH,"GetSystemDefaultUILanguage");
    }
    /**
     * {@snippet :
     * LANGID GetSystemDefaultUILanguage();
     * }
     */
    public static short GetSystemDefaultUILanguage() {
        var mh$ = GetSystemDefaultUILanguage$MH();
        try {
            return (short)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetThreadLocale$MH() {
        return RuntimeHelper.requireNonNull(constants$536.GetThreadLocale$MH,"GetThreadLocale");
    }
    /**
     * {@snippet :
     * LCID GetThreadLocale();
     * }
     */
    public static int GetThreadLocale() {
        var mh$ = GetThreadLocale$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadLocale$MH() {
        return RuntimeHelper.requireNonNull(constants$536.SetThreadLocale$MH,"SetThreadLocale");
    }
    /**
     * {@snippet :
     * BOOL SetThreadLocale(LCID Locale);
     * }
     */
    public static int SetThreadLocale(int Locale) {
        var mh$ = SetThreadLocale$MH();
        try {
            return (int)mh$.invokeExact(Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetUserDefaultUILanguage$MH() {
        return RuntimeHelper.requireNonNull(constants$536.GetUserDefaultUILanguage$MH,"GetUserDefaultUILanguage");
    }
    /**
     * {@snippet :
     * LANGID GetUserDefaultUILanguage();
     * }
     */
    public static short GetUserDefaultUILanguage() {
        var mh$ = GetUserDefaultUILanguage$MH();
        try {
            return (short)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetUserDefaultLangID$MH() {
        return RuntimeHelper.requireNonNull(constants$537.GetUserDefaultLangID$MH,"GetUserDefaultLangID");
    }
    /**
     * {@snippet :
     * LANGID GetUserDefaultLangID();
     * }
     */
    public static short GetUserDefaultLangID() {
        var mh$ = GetUserDefaultLangID$MH();
        try {
            return (short)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSystemDefaultLangID$MH() {
        return RuntimeHelper.requireNonNull(constants$537.GetSystemDefaultLangID$MH,"GetSystemDefaultLangID");
    }
    /**
     * {@snippet :
     * LANGID GetSystemDefaultLangID();
     * }
     */
    public static short GetSystemDefaultLangID() {
        var mh$ = GetSystemDefaultLangID$MH();
        try {
            return (short)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSystemDefaultLCID$MH() {
        return RuntimeHelper.requireNonNull(constants$537.GetSystemDefaultLCID$MH,"GetSystemDefaultLCID");
    }
    /**
     * {@snippet :
     * LCID GetSystemDefaultLCID();
     * }
     */
    public static int GetSystemDefaultLCID() {
        var mh$ = GetSystemDefaultLCID$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetUserDefaultLCID$MH() {
        return RuntimeHelper.requireNonNull(constants$537.GetUserDefaultLCID$MH,"GetUserDefaultLCID");
    }
    /**
     * {@snippet :
     * LCID GetUserDefaultLCID();
     * }
     */
    public static int GetUserDefaultLCID() {
        var mh$ = GetUserDefaultLCID$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadUILanguage$MH() {
        return RuntimeHelper.requireNonNull(constants$537.SetThreadUILanguage$MH,"SetThreadUILanguage");
    }
    /**
     * {@snippet :
     * LANGID SetThreadUILanguage(LANGID LangId);
     * }
     */
    public static short SetThreadUILanguage(short LangId) {
        var mh$ = SetThreadUILanguage$MH();
        try {
            return (short)mh$.invokeExact(LangId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetThreadUILanguage$MH() {
        return RuntimeHelper.requireNonNull(constants$537.GetThreadUILanguage$MH,"GetThreadUILanguage");
    }
    /**
     * {@snippet :
     * LANGID GetThreadUILanguage();
     * }
     */
    public static short GetThreadUILanguage() {
        var mh$ = GetThreadUILanguage$MH();
        try {
            return (short)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetProcessPreferredUILanguages$MH() {
        return RuntimeHelper.requireNonNull(constants$538.GetProcessPreferredUILanguages$MH,"GetProcessPreferredUILanguages");
    }
    /**
     * {@snippet :
     * BOOL GetProcessPreferredUILanguages(DWORD dwFlags, PULONG pulNumLanguages, PZZWSTR pwszLanguagesBuffer, PULONG pcchLanguagesBuffer);
     * }
     */
    public static int GetProcessPreferredUILanguages(int dwFlags, MemorySegment pulNumLanguages, MemorySegment pwszLanguagesBuffer, MemorySegment pcchLanguagesBuffer) {
        var mh$ = GetProcessPreferredUILanguages$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, pulNumLanguages, pwszLanguagesBuffer, pcchLanguagesBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetProcessPreferredUILanguages$MH() {
        return RuntimeHelper.requireNonNull(constants$538.SetProcessPreferredUILanguages$MH,"SetProcessPreferredUILanguages");
    }
    /**
     * {@snippet :
     * BOOL SetProcessPreferredUILanguages(DWORD dwFlags, PCZZWSTR pwszLanguagesBuffer, PULONG pulNumLanguages);
     * }
     */
    public static int SetProcessPreferredUILanguages(int dwFlags, MemorySegment pwszLanguagesBuffer, MemorySegment pulNumLanguages) {
        var mh$ = SetProcessPreferredUILanguages$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, pwszLanguagesBuffer, pulNumLanguages);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetUserPreferredUILanguages$MH() {
        return RuntimeHelper.requireNonNull(constants$538.GetUserPreferredUILanguages$MH,"GetUserPreferredUILanguages");
    }
    /**
     * {@snippet :
     * BOOL GetUserPreferredUILanguages(DWORD dwFlags, PULONG pulNumLanguages, PZZWSTR pwszLanguagesBuffer, PULONG pcchLanguagesBuffer);
     * }
     */
    public static int GetUserPreferredUILanguages(int dwFlags, MemorySegment pulNumLanguages, MemorySegment pwszLanguagesBuffer, MemorySegment pcchLanguagesBuffer) {
        var mh$ = GetUserPreferredUILanguages$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, pulNumLanguages, pwszLanguagesBuffer, pcchLanguagesBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSystemPreferredUILanguages$MH() {
        return RuntimeHelper.requireNonNull(constants$538.GetSystemPreferredUILanguages$MH,"GetSystemPreferredUILanguages");
    }
    /**
     * {@snippet :
     * BOOL GetSystemPreferredUILanguages(DWORD dwFlags, PULONG pulNumLanguages, PZZWSTR pwszLanguagesBuffer, PULONG pcchLanguagesBuffer);
     * }
     */
    public static int GetSystemPreferredUILanguages(int dwFlags, MemorySegment pulNumLanguages, MemorySegment pwszLanguagesBuffer, MemorySegment pcchLanguagesBuffer) {
        var mh$ = GetSystemPreferredUILanguages$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, pulNumLanguages, pwszLanguagesBuffer, pcchLanguagesBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetThreadPreferredUILanguages$MH() {
        return RuntimeHelper.requireNonNull(constants$538.GetThreadPreferredUILanguages$MH,"GetThreadPreferredUILanguages");
    }
    /**
     * {@snippet :
     * BOOL GetThreadPreferredUILanguages(DWORD dwFlags, PULONG pulNumLanguages, PZZWSTR pwszLanguagesBuffer, PULONG pcchLanguagesBuffer);
     * }
     */
    public static int GetThreadPreferredUILanguages(int dwFlags, MemorySegment pulNumLanguages, MemorySegment pwszLanguagesBuffer, MemorySegment pcchLanguagesBuffer) {
        var mh$ = GetThreadPreferredUILanguages$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, pulNumLanguages, pwszLanguagesBuffer, pcchLanguagesBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadPreferredUILanguages$MH() {
        return RuntimeHelper.requireNonNull(constants$538.SetThreadPreferredUILanguages$MH,"SetThreadPreferredUILanguages");
    }
    /**
     * {@snippet :
     * BOOL SetThreadPreferredUILanguages(DWORD dwFlags, PCZZWSTR pwszLanguagesBuffer, PULONG pulNumLanguages);
     * }
     */
    public static int SetThreadPreferredUILanguages(int dwFlags, MemorySegment pwszLanguagesBuffer, MemorySegment pulNumLanguages) {
        var mh$ = SetThreadPreferredUILanguages$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, pwszLanguagesBuffer, pulNumLanguages);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileMUIInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$539.GetFileMUIInfo$MH,"GetFileMUIInfo");
    }
    /**
     * {@snippet :
     * BOOL GetFileMUIInfo(DWORD dwFlags, PCWSTR pcwszFilePath, PFILEMUIINFO pFileMUIInfo, DWORD* pcbFileMUIInfo);
     * }
     */
    public static int GetFileMUIInfo(int dwFlags, MemorySegment pcwszFilePath, MemorySegment pFileMUIInfo, MemorySegment pcbFileMUIInfo) {
        var mh$ = GetFileMUIInfo$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, pcwszFilePath, pFileMUIInfo, pcbFileMUIInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileMUIPath$MH() {
        return RuntimeHelper.requireNonNull(constants$539.GetFileMUIPath$MH,"GetFileMUIPath");
    }
    /**
     * {@snippet :
     * BOOL GetFileMUIPath(DWORD dwFlags, PCWSTR pcwszFilePath, PWSTR pwszLanguage, PULONG pcchLanguage, PWSTR pwszFileMUIPath, PULONG pcchFileMUIPath, PULONGLONG pululEnumerator);
     * }
     */
    public static int GetFileMUIPath(int dwFlags, MemorySegment pcwszFilePath, MemorySegment pwszLanguage, MemorySegment pcchLanguage, MemorySegment pwszFileMUIPath, MemorySegment pcchFileMUIPath, MemorySegment pululEnumerator) {
        var mh$ = GetFileMUIPath$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, pcwszFilePath, pwszLanguage, pcchLanguage, pwszFileMUIPath, pcchFileMUIPath, pululEnumerator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetUILanguageInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$539.GetUILanguageInfo$MH,"GetUILanguageInfo");
    }
    /**
     * {@snippet :
     * BOOL GetUILanguageInfo(DWORD dwFlags, PCZZWSTR pwmszLanguage, PZZWSTR pwszFallbackLanguages, PDWORD pcchFallbackLanguages, PDWORD pAttributes);
     * }
     */
    public static int GetUILanguageInfo(int dwFlags, MemorySegment pwmszLanguage, MemorySegment pwszFallbackLanguages, MemorySegment pcchFallbackLanguages, MemorySegment pAttributes) {
        var mh$ = GetUILanguageInfo$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, pwmszLanguage, pwszFallbackLanguages, pcchFallbackLanguages, pAttributes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct HSAVEDUILANGUAGES__* HSAVEDUILANGUAGES;
     * }
     */
    public static final OfAddress HSAVEDUILANGUAGES = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle SetThreadPreferredUILanguages2$MH() {
        return RuntimeHelper.requireNonNull(constants$539.SetThreadPreferredUILanguages2$MH,"SetThreadPreferredUILanguages2");
    }
    /**
     * {@snippet :
     * BOOL SetThreadPreferredUILanguages2(ULONG flags, PCZZWSTR languages, PULONG numLanguagesSet, HSAVEDUILANGUAGES* snapshot);
     * }
     */
    public static int SetThreadPreferredUILanguages2(int flags, MemorySegment languages, MemorySegment numLanguagesSet, MemorySegment snapshot) {
        var mh$ = SetThreadPreferredUILanguages2$MH();
        try {
            return (int)mh$.invokeExact(flags, languages, numLanguagesSet, snapshot);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RestoreThreadPreferredUILanguages$MH() {
        return RuntimeHelper.requireNonNull(constants$539.RestoreThreadPreferredUILanguages$MH,"RestoreThreadPreferredUILanguages");
    }
    /**
     * {@snippet :
     * void RestoreThreadPreferredUILanguages(const HSAVEDUILANGUAGES snapshot);
     * }
     */
    public static void RestoreThreadPreferredUILanguages(MemorySegment snapshot) {
        var mh$ = RestoreThreadPreferredUILanguages$MH();
        try {
            mh$.invokeExact(snapshot);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NotifyUILanguageChange$MH() {
        return RuntimeHelper.requireNonNull(constants$539.NotifyUILanguageChange$MH,"NotifyUILanguageChange");
    }
    /**
     * {@snippet :
     * BOOL NotifyUILanguageChange(DWORD dwFlags, PCWSTR pcwstrNewLanguage, PCWSTR pcwstrPreviousLanguage, DWORD dwReserved, PDWORD pdwStatusRtrn);
     * }
     */
    public static int NotifyUILanguageChange(int dwFlags, MemorySegment pcwstrNewLanguage, MemorySegment pcwstrPreviousLanguage, int dwReserved, MemorySegment pdwStatusRtrn) {
        var mh$ = NotifyUILanguageChange$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, pcwstrNewLanguage, pcwstrPreviousLanguage, dwReserved, pdwStatusRtrn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetStringTypeExA$MH() {
        return RuntimeHelper.requireNonNull(constants$540.GetStringTypeExA$MH,"GetStringTypeExA");
    }
    /**
     * {@snippet :
     * BOOL GetStringTypeExA(LCID Locale, DWORD dwInfoType, LPCSTR lpSrcStr, int cchSrc, LPWORD lpCharType);
     * }
     */
    public static int GetStringTypeExA(int Locale, int dwInfoType, MemorySegment lpSrcStr, int cchSrc, MemorySegment lpCharType) {
        var mh$ = GetStringTypeExA$MH();
        try {
            return (int)mh$.invokeExact(Locale, dwInfoType, lpSrcStr, cchSrc, lpCharType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetStringTypeA$MH() {
        return RuntimeHelper.requireNonNull(constants$540.GetStringTypeA$MH,"GetStringTypeA");
    }
    /**
     * {@snippet :
     * BOOL GetStringTypeA(LCID Locale, DWORD dwInfoType, LPCSTR lpSrcStr, int cchSrc, LPWORD lpCharType);
     * }
     */
    public static int GetStringTypeA(int Locale, int dwInfoType, MemorySegment lpSrcStr, int cchSrc, MemorySegment lpCharType) {
        var mh$ = GetStringTypeA$MH();
        try {
            return (int)mh$.invokeExact(Locale, dwInfoType, lpSrcStr, cchSrc, lpCharType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FoldStringA$MH() {
        return RuntimeHelper.requireNonNull(constants$540.FoldStringA$MH,"FoldStringA");
    }
    /**
     * {@snippet :
     * int FoldStringA(DWORD dwMapFlags, LPCSTR lpSrcStr, int cchSrc, LPSTR lpDestStr, int cchDest);
     * }
     */
    public static int FoldStringA(int dwMapFlags, MemorySegment lpSrcStr, int cchSrc, MemorySegment lpDestStr, int cchDest) {
        var mh$ = FoldStringA$MH();
        try {
            return (int)mh$.invokeExact(dwMapFlags, lpSrcStr, cchSrc, lpDestStr, cchDest);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumSystemLocalesA$MH() {
        return RuntimeHelper.requireNonNull(constants$540.EnumSystemLocalesA$MH,"EnumSystemLocalesA");
    }
    /**
     * {@snippet :
     * BOOL EnumSystemLocalesA(LOCALE_ENUMPROCA lpLocaleEnumProc, DWORD dwFlags);
     * }
     */
    public static int EnumSystemLocalesA(MemorySegment lpLocaleEnumProc, int dwFlags) {
        var mh$ = EnumSystemLocalesA$MH();
        try {
            return (int)mh$.invokeExact(lpLocaleEnumProc, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumSystemLocalesW$MH() {
        return RuntimeHelper.requireNonNull(constants$540.EnumSystemLocalesW$MH,"EnumSystemLocalesW");
    }
    /**
     * {@snippet :
     * BOOL EnumSystemLocalesW(LOCALE_ENUMPROCW lpLocaleEnumProc, DWORD dwFlags);
     * }
     */
    public static int EnumSystemLocalesW(MemorySegment lpLocaleEnumProc, int dwFlags) {
        var mh$ = EnumSystemLocalesW$MH();
        try {
            return (int)mh$.invokeExact(lpLocaleEnumProc, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumSystemLanguageGroupsA$MH() {
        return RuntimeHelper.requireNonNull(constants$540.EnumSystemLanguageGroupsA$MH,"EnumSystemLanguageGroupsA");
    }
    /**
     * {@snippet :
     * BOOL EnumSystemLanguageGroupsA(LANGUAGEGROUP_ENUMPROCA lpLanguageGroupEnumProc, DWORD dwFlags, LONG_PTR lParam);
     * }
     */
    public static int EnumSystemLanguageGroupsA(MemorySegment lpLanguageGroupEnumProc, int dwFlags, long lParam) {
        var mh$ = EnumSystemLanguageGroupsA$MH();
        try {
            return (int)mh$.invokeExact(lpLanguageGroupEnumProc, dwFlags, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumSystemLanguageGroupsW$MH() {
        return RuntimeHelper.requireNonNull(constants$541.EnumSystemLanguageGroupsW$MH,"EnumSystemLanguageGroupsW");
    }
    /**
     * {@snippet :
     * BOOL EnumSystemLanguageGroupsW(LANGUAGEGROUP_ENUMPROCW lpLanguageGroupEnumProc, DWORD dwFlags, LONG_PTR lParam);
     * }
     */
    public static int EnumSystemLanguageGroupsW(MemorySegment lpLanguageGroupEnumProc, int dwFlags, long lParam) {
        var mh$ = EnumSystemLanguageGroupsW$MH();
        try {
            return (int)mh$.invokeExact(lpLanguageGroupEnumProc, dwFlags, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumLanguageGroupLocalesA$MH() {
        return RuntimeHelper.requireNonNull(constants$541.EnumLanguageGroupLocalesA$MH,"EnumLanguageGroupLocalesA");
    }
    /**
     * {@snippet :
     * BOOL EnumLanguageGroupLocalesA(LANGGROUPLOCALE_ENUMPROCA lpLangGroupLocaleEnumProc, LGRPID LanguageGroup, DWORD dwFlags, LONG_PTR lParam);
     * }
     */
    public static int EnumLanguageGroupLocalesA(MemorySegment lpLangGroupLocaleEnumProc, int LanguageGroup, int dwFlags, long lParam) {
        var mh$ = EnumLanguageGroupLocalesA$MH();
        try {
            return (int)mh$.invokeExact(lpLangGroupLocaleEnumProc, LanguageGroup, dwFlags, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumLanguageGroupLocalesW$MH() {
        return RuntimeHelper.requireNonNull(constants$541.EnumLanguageGroupLocalesW$MH,"EnumLanguageGroupLocalesW");
    }
    /**
     * {@snippet :
     * BOOL EnumLanguageGroupLocalesW(LANGGROUPLOCALE_ENUMPROCW lpLangGroupLocaleEnumProc, LGRPID LanguageGroup, DWORD dwFlags, LONG_PTR lParam);
     * }
     */
    public static int EnumLanguageGroupLocalesW(MemorySegment lpLangGroupLocaleEnumProc, int LanguageGroup, int dwFlags, long lParam) {
        var mh$ = EnumLanguageGroupLocalesW$MH();
        try {
            return (int)mh$.invokeExact(lpLangGroupLocaleEnumProc, LanguageGroup, dwFlags, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumUILanguagesA$MH() {
        return RuntimeHelper.requireNonNull(constants$541.EnumUILanguagesA$MH,"EnumUILanguagesA");
    }
    /**
     * {@snippet :
     * BOOL EnumUILanguagesA(UILANGUAGE_ENUMPROCA lpUILanguageEnumProc, DWORD dwFlags, LONG_PTR lParam);
     * }
     */
    public static int EnumUILanguagesA(MemorySegment lpUILanguageEnumProc, int dwFlags, long lParam) {
        var mh$ = EnumUILanguagesA$MH();
        try {
            return (int)mh$.invokeExact(lpUILanguageEnumProc, dwFlags, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumUILanguagesW$MH() {
        return RuntimeHelper.requireNonNull(constants$541.EnumUILanguagesW$MH,"EnumUILanguagesW");
    }
    /**
     * {@snippet :
     * BOOL EnumUILanguagesW(UILANGUAGE_ENUMPROCW lpUILanguageEnumProc, DWORD dwFlags, LONG_PTR lParam);
     * }
     */
    public static int EnumUILanguagesW(MemorySegment lpUILanguageEnumProc, int dwFlags, long lParam) {
        var mh$ = EnumUILanguagesW$MH();
        try {
            return (int)mh$.invokeExact(lpUILanguageEnumProc, dwFlags, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumSystemCodePagesA$MH() {
        return RuntimeHelper.requireNonNull(constants$541.EnumSystemCodePagesA$MH,"EnumSystemCodePagesA");
    }
    /**
     * {@snippet :
     * BOOL EnumSystemCodePagesA(CODEPAGE_ENUMPROCA lpCodePageEnumProc, DWORD dwFlags);
     * }
     */
    public static int EnumSystemCodePagesA(MemorySegment lpCodePageEnumProc, int dwFlags) {
        var mh$ = EnumSystemCodePagesA$MH();
        try {
            return (int)mh$.invokeExact(lpCodePageEnumProc, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumSystemCodePagesW$MH() {
        return RuntimeHelper.requireNonNull(constants$542.EnumSystemCodePagesW$MH,"EnumSystemCodePagesW");
    }
    /**
     * {@snippet :
     * BOOL EnumSystemCodePagesW(CODEPAGE_ENUMPROCW lpCodePageEnumProc, DWORD dwFlags);
     * }
     */
    public static int EnumSystemCodePagesW(MemorySegment lpCodePageEnumProc, int dwFlags) {
        var mh$ = EnumSystemCodePagesW$MH();
        try {
            return (int)mh$.invokeExact(lpCodePageEnumProc, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IdnToAscii$MH() {
        return RuntimeHelper.requireNonNull(constants$542.IdnToAscii$MH,"IdnToAscii");
    }
    /**
     * {@snippet :
     * int IdnToAscii(DWORD dwFlags, LPCWSTR lpUnicodeCharStr, int cchUnicodeChar, LPWSTR lpASCIICharStr, int cchASCIIChar);
     * }
     */
    public static int IdnToAscii(int dwFlags, MemorySegment lpUnicodeCharStr, int cchUnicodeChar, MemorySegment lpASCIICharStr, int cchASCIIChar) {
        var mh$ = IdnToAscii$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, lpUnicodeCharStr, cchUnicodeChar, lpASCIICharStr, cchASCIIChar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IdnToUnicode$MH() {
        return RuntimeHelper.requireNonNull(constants$542.IdnToUnicode$MH,"IdnToUnicode");
    }
    /**
     * {@snippet :
     * int IdnToUnicode(DWORD dwFlags, LPCWSTR lpASCIICharStr, int cchASCIIChar, LPWSTR lpUnicodeCharStr, int cchUnicodeChar);
     * }
     */
    public static int IdnToUnicode(int dwFlags, MemorySegment lpASCIICharStr, int cchASCIIChar, MemorySegment lpUnicodeCharStr, int cchUnicodeChar) {
        var mh$ = IdnToUnicode$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, lpASCIICharStr, cchASCIIChar, lpUnicodeCharStr, cchUnicodeChar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IdnToNameprepUnicode$MH() {
        return RuntimeHelper.requireNonNull(constants$542.IdnToNameprepUnicode$MH,"IdnToNameprepUnicode");
    }
    /**
     * {@snippet :
     * int IdnToNameprepUnicode(DWORD dwFlags, LPCWSTR lpUnicodeCharStr, int cchUnicodeChar, LPWSTR lpNameprepCharStr, int cchNameprepChar);
     * }
     */
    public static int IdnToNameprepUnicode(int dwFlags, MemorySegment lpUnicodeCharStr, int cchUnicodeChar, MemorySegment lpNameprepCharStr, int cchNameprepChar) {
        var mh$ = IdnToNameprepUnicode$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, lpUnicodeCharStr, cchUnicodeChar, lpNameprepCharStr, cchNameprepChar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NormalizeString$MH() {
        return RuntimeHelper.requireNonNull(constants$542.NormalizeString$MH,"NormalizeString");
    }
    /**
     * {@snippet :
     * int NormalizeString(NORM_FORM NormForm, LPCWSTR lpSrcString, int cwSrcLength, LPWSTR lpDstString, int cwDstLength);
     * }
     */
    public static int NormalizeString(int NormForm, MemorySegment lpSrcString, int cwSrcLength, MemorySegment lpDstString, int cwDstLength) {
        var mh$ = NormalizeString$MH();
        try {
            return (int)mh$.invokeExact(NormForm, lpSrcString, cwSrcLength, lpDstString, cwDstLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsNormalizedString$MH() {
        return RuntimeHelper.requireNonNull(constants$542.IsNormalizedString$MH,"IsNormalizedString");
    }
    /**
     * {@snippet :
     * BOOL IsNormalizedString(NORM_FORM NormForm, LPCWSTR lpString, int cwLength);
     * }
     */
    public static int IsNormalizedString(int NormForm, MemorySegment lpString, int cwLength) {
        var mh$ = IsNormalizedString$MH();
        try {
            return (int)mh$.invokeExact(NormForm, lpString, cwLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VerifyScripts$MH() {
        return RuntimeHelper.requireNonNull(constants$543.VerifyScripts$MH,"VerifyScripts");
    }
    /**
     * {@snippet :
     * BOOL VerifyScripts(DWORD dwFlags, LPCWSTR lpLocaleScripts, int cchLocaleScripts, LPCWSTR lpTestScripts, int cchTestScripts);
     * }
     */
    public static int VerifyScripts(int dwFlags, MemorySegment lpLocaleScripts, int cchLocaleScripts, MemorySegment lpTestScripts, int cchTestScripts) {
        var mh$ = VerifyScripts$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, lpLocaleScripts, cchLocaleScripts, lpTestScripts, cchTestScripts);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetStringScripts$MH() {
        return RuntimeHelper.requireNonNull(constants$543.GetStringScripts$MH,"GetStringScripts");
    }
    /**
     * {@snippet :
     * int GetStringScripts(DWORD dwFlags, LPCWSTR lpString, int cchString, LPWSTR lpScripts, int cchScripts);
     * }
     */
    public static int GetStringScripts(int dwFlags, MemorySegment lpString, int cchString, MemorySegment lpScripts, int cchScripts) {
        var mh$ = GetStringScripts$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, lpString, cchString, lpScripts, cchScripts);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetLocaleInfoEx$MH() {
        return RuntimeHelper.requireNonNull(constants$543.GetLocaleInfoEx$MH,"GetLocaleInfoEx");
    }
    /**
     * {@snippet :
     * int GetLocaleInfoEx(LPCWSTR lpLocaleName, LCTYPE LCType, LPWSTR lpLCData, int cchData);
     * }
     */
    public static int GetLocaleInfoEx(MemorySegment lpLocaleName, int LCType, MemorySegment lpLCData, int cchData) {
        var mh$ = GetLocaleInfoEx$MH();
        try {
            return (int)mh$.invokeExact(lpLocaleName, LCType, lpLCData, cchData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCalendarInfoEx$MH() {
        return RuntimeHelper.requireNonNull(constants$543.GetCalendarInfoEx$MH,"GetCalendarInfoEx");
    }
    /**
     * {@snippet :
     * int GetCalendarInfoEx(LPCWSTR lpLocaleName, CALID Calendar, LPCWSTR lpReserved, CALTYPE CalType, LPWSTR lpCalData, int cchData, LPDWORD lpValue);
     * }
     */
    public static int GetCalendarInfoEx(MemorySegment lpLocaleName, int Calendar, MemorySegment lpReserved, int CalType, MemorySegment lpCalData, int cchData, MemorySegment lpValue) {
        var mh$ = GetCalendarInfoEx$MH();
        try {
            return (int)mh$.invokeExact(lpLocaleName, Calendar, lpReserved, CalType, lpCalData, cchData, lpValue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNumberFormatEx$MH() {
        return RuntimeHelper.requireNonNull(constants$543.GetNumberFormatEx$MH,"GetNumberFormatEx");
    }
    /**
     * {@snippet :
     * int GetNumberFormatEx(LPCWSTR lpLocaleName, DWORD dwFlags, LPCWSTR lpValue, const NUMBERFMTW* lpFormat, LPWSTR lpNumberStr, int cchNumber);
     * }
     */
    public static int GetNumberFormatEx(MemorySegment lpLocaleName, int dwFlags, MemorySegment lpValue, MemorySegment lpFormat, MemorySegment lpNumberStr, int cchNumber) {
        var mh$ = GetNumberFormatEx$MH();
        try {
            return (int)mh$.invokeExact(lpLocaleName, dwFlags, lpValue, lpFormat, lpNumberStr, cchNumber);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCurrencyFormatEx$MH() {
        return RuntimeHelper.requireNonNull(constants$543.GetCurrencyFormatEx$MH,"GetCurrencyFormatEx");
    }
    /**
     * {@snippet :
     * int GetCurrencyFormatEx(LPCWSTR lpLocaleName, DWORD dwFlags, LPCWSTR lpValue, const CURRENCYFMTW* lpFormat, LPWSTR lpCurrencyStr, int cchCurrency);
     * }
     */
    public static int GetCurrencyFormatEx(MemorySegment lpLocaleName, int dwFlags, MemorySegment lpValue, MemorySegment lpFormat, MemorySegment lpCurrencyStr, int cchCurrency) {
        var mh$ = GetCurrencyFormatEx$MH();
        try {
            return (int)mh$.invokeExact(lpLocaleName, dwFlags, lpValue, lpFormat, lpCurrencyStr, cchCurrency);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetUserDefaultLocaleName$MH() {
        return RuntimeHelper.requireNonNull(constants$544.GetUserDefaultLocaleName$MH,"GetUserDefaultLocaleName");
    }
    /**
     * {@snippet :
     * int GetUserDefaultLocaleName(LPWSTR lpLocaleName, int cchLocaleName);
     * }
     */
    public static int GetUserDefaultLocaleName(MemorySegment lpLocaleName, int cchLocaleName) {
        var mh$ = GetUserDefaultLocaleName$MH();
        try {
            return (int)mh$.invokeExact(lpLocaleName, cchLocaleName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSystemDefaultLocaleName$MH() {
        return RuntimeHelper.requireNonNull(constants$544.GetSystemDefaultLocaleName$MH,"GetSystemDefaultLocaleName");
    }
    /**
     * {@snippet :
     * int GetSystemDefaultLocaleName(LPWSTR lpLocaleName, int cchLocaleName);
     * }
     */
    public static int GetSystemDefaultLocaleName(MemorySegment lpLocaleName, int cchLocaleName) {
        var mh$ = GetSystemDefaultLocaleName$MH();
        try {
            return (int)mh$.invokeExact(lpLocaleName, cchLocaleName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsNLSDefinedString$MH() {
        return RuntimeHelper.requireNonNull(constants$544.IsNLSDefinedString$MH,"IsNLSDefinedString");
    }
    /**
     * {@snippet :
     * BOOL IsNLSDefinedString(NLS_FUNCTION Function, DWORD dwFlags, LPNLSVERSIONINFO lpVersionInformation, LPCWSTR lpString, INT cchStr);
     * }
     */
    public static int IsNLSDefinedString(int Function, int dwFlags, MemorySegment lpVersionInformation, MemorySegment lpString, int cchStr) {
        var mh$ = IsNLSDefinedString$MH();
        try {
            return (int)mh$.invokeExact(Function, dwFlags, lpVersionInformation, lpString, cchStr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNLSVersionEx$MH() {
        return RuntimeHelper.requireNonNull(constants$544.GetNLSVersionEx$MH,"GetNLSVersionEx");
    }
    /**
     * {@snippet :
     * BOOL GetNLSVersionEx(NLS_FUNCTION function, LPCWSTR lpLocaleName, LPNLSVERSIONINFOEX lpVersionInformation);
     * }
     */
    public static int GetNLSVersionEx(int function, MemorySegment lpLocaleName, MemorySegment lpVersionInformation) {
        var mh$ = GetNLSVersionEx$MH();
        try {
            return (int)mh$.invokeExact(function, lpLocaleName, lpVersionInformation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsValidNLSVersion$MH() {
        return RuntimeHelper.requireNonNull(constants$544.IsValidNLSVersion$MH,"IsValidNLSVersion");
    }
    /**
     * {@snippet :
     * DWORD IsValidNLSVersion(NLS_FUNCTION function, LPCWSTR lpLocaleName, LPNLSVERSIONINFOEX lpVersionInformation);
     * }
     */
    public static int IsValidNLSVersion(int function, MemorySegment lpLocaleName, MemorySegment lpVersionInformation) {
        var mh$ = IsValidNLSVersion$MH();
        try {
            return (int)mh$.invokeExact(function, lpLocaleName, lpVersionInformation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindNLSStringEx$MH() {
        return RuntimeHelper.requireNonNull(constants$544.FindNLSStringEx$MH,"FindNLSStringEx");
    }
    /**
     * {@snippet :
     * int FindNLSStringEx(LPCWSTR lpLocaleName, DWORD dwFindNLSStringFlags, LPCWSTR lpStringSource, int cchSource, LPCWSTR lpStringValue, int cchValue, LPINT pcchFound, LPNLSVERSIONINFO lpVersionInformation, LPVOID lpReserved, LPARAM sortHandle);
     * }
     */
    public static int FindNLSStringEx(MemorySegment lpLocaleName, int dwFindNLSStringFlags, MemorySegment lpStringSource, int cchSource, MemorySegment lpStringValue, int cchValue, MemorySegment pcchFound, MemorySegment lpVersionInformation, MemorySegment lpReserved, long sortHandle) {
        var mh$ = FindNLSStringEx$MH();
        try {
            return (int)mh$.invokeExact(lpLocaleName, dwFindNLSStringFlags, lpStringSource, cchSource, lpStringValue, cchValue, pcchFound, lpVersionInformation, lpReserved, sortHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LCMapStringEx$MH() {
        return RuntimeHelper.requireNonNull(constants$545.LCMapStringEx$MH,"LCMapStringEx");
    }
    /**
     * {@snippet :
     * int LCMapStringEx(LPCWSTR lpLocaleName, DWORD dwMapFlags, LPCWSTR lpSrcStr, int cchSrc, LPWSTR lpDestStr, int cchDest, LPNLSVERSIONINFO lpVersionInformation, LPVOID lpReserved, LPARAM sortHandle);
     * }
     */
    public static int LCMapStringEx(MemorySegment lpLocaleName, int dwMapFlags, MemorySegment lpSrcStr, int cchSrc, MemorySegment lpDestStr, int cchDest, MemorySegment lpVersionInformation, MemorySegment lpReserved, long sortHandle) {
        var mh$ = LCMapStringEx$MH();
        try {
            return (int)mh$.invokeExact(lpLocaleName, dwMapFlags, lpSrcStr, cchSrc, lpDestStr, cchDest, lpVersionInformation, lpReserved, sortHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsValidLocaleName$MH() {
        return RuntimeHelper.requireNonNull(constants$545.IsValidLocaleName$MH,"IsValidLocaleName");
    }
    /**
     * {@snippet :
     * BOOL IsValidLocaleName(LPCWSTR lpLocaleName);
     * }
     */
    public static int IsValidLocaleName(MemorySegment lpLocaleName) {
        var mh$ = IsValidLocaleName$MH();
        try {
            return (int)mh$.invokeExact(lpLocaleName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumCalendarInfoExEx$MH() {
        return RuntimeHelper.requireNonNull(constants$545.EnumCalendarInfoExEx$MH,"EnumCalendarInfoExEx");
    }
    /**
     * {@snippet :
     * BOOL EnumCalendarInfoExEx(CALINFO_ENUMPROCEXEX pCalInfoEnumProcExEx, LPCWSTR lpLocaleName, CALID Calendar, LPCWSTR lpReserved, CALTYPE CalType, LPARAM lParam);
     * }
     */
    public static int EnumCalendarInfoExEx(MemorySegment pCalInfoEnumProcExEx, MemorySegment lpLocaleName, int Calendar, MemorySegment lpReserved, int CalType, long lParam) {
        var mh$ = EnumCalendarInfoExEx$MH();
        try {
            return (int)mh$.invokeExact(pCalInfoEnumProcExEx, lpLocaleName, Calendar, lpReserved, CalType, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumDateFormatsExEx$MH() {
        return RuntimeHelper.requireNonNull(constants$546.EnumDateFormatsExEx$MH,"EnumDateFormatsExEx");
    }
    /**
     * {@snippet :
     * BOOL EnumDateFormatsExEx(DATEFMT_ENUMPROCEXEX lpDateFmtEnumProcExEx, LPCWSTR lpLocaleName, DWORD dwFlags, LPARAM lParam);
     * }
     */
    public static int EnumDateFormatsExEx(MemorySegment lpDateFmtEnumProcExEx, MemorySegment lpLocaleName, int dwFlags, long lParam) {
        var mh$ = EnumDateFormatsExEx$MH();
        try {
            return (int)mh$.invokeExact(lpDateFmtEnumProcExEx, lpLocaleName, dwFlags, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumTimeFormatsEx$MH() {
        return RuntimeHelper.requireNonNull(constants$546.EnumTimeFormatsEx$MH,"EnumTimeFormatsEx");
    }
    /**
     * {@snippet :
     * BOOL EnumTimeFormatsEx(TIMEFMT_ENUMPROCEX lpTimeFmtEnumProcEx, LPCWSTR lpLocaleName, DWORD dwFlags, LPARAM lParam);
     * }
     */
    public static int EnumTimeFormatsEx(MemorySegment lpTimeFmtEnumProcEx, MemorySegment lpLocaleName, int dwFlags, long lParam) {
        var mh$ = EnumTimeFormatsEx$MH();
        try {
            return (int)mh$.invokeExact(lpTimeFmtEnumProcEx, lpLocaleName, dwFlags, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumSystemLocalesEx$MH() {
        return RuntimeHelper.requireNonNull(constants$547.EnumSystemLocalesEx$MH,"EnumSystemLocalesEx");
    }
    /**
     * {@snippet :
     * BOOL EnumSystemLocalesEx(LOCALE_ENUMPROCEX lpLocaleEnumProcEx, DWORD dwFlags, LPARAM lParam, LPVOID lpReserved);
     * }
     */
    public static int EnumSystemLocalesEx(MemorySegment lpLocaleEnumProcEx, int dwFlags, long lParam, MemorySegment lpReserved) {
        var mh$ = EnumSystemLocalesEx$MH();
        try {
            return (int)mh$.invokeExact(lpLocaleEnumProcEx, dwFlags, lParam, lpReserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ResolveLocaleName$MH() {
        return RuntimeHelper.requireNonNull(constants$547.ResolveLocaleName$MH,"ResolveLocaleName");
    }
    /**
     * {@snippet :
     * int ResolveLocaleName(LPCWSTR lpNameToResolve, LPWSTR lpLocaleName, int cchLocaleName);
     * }
     */
    public static int ResolveLocaleName(MemorySegment lpNameToResolve, MemorySegment lpLocaleName, int cchLocaleName) {
        var mh$ = ResolveLocaleName$MH();
        try {
            return (int)mh$.invokeExact(lpNameToResolve, lpLocaleName, cchLocaleName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _COORD* PCOORD;
     * }
     */
    public static final OfAddress PCOORD = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _SMALL_RECT* PSMALL_RECT;
     * }
     */
    public static final OfAddress PSMALL_RECT = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _KEY_EVENT_RECORD* PKEY_EVENT_RECORD;
     * }
     */
    public static final OfAddress PKEY_EVENT_RECORD = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _MOUSE_EVENT_RECORD* PMOUSE_EVENT_RECORD;
     * }
     */
    public static final OfAddress PMOUSE_EVENT_RECORD = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _WINDOW_BUFFER_SIZE_RECORD* PWINDOW_BUFFER_SIZE_RECORD;
     * }
     */
    public static final OfAddress PWINDOW_BUFFER_SIZE_RECORD = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _MENU_EVENT_RECORD* PMENU_EVENT_RECORD;
     * }
     */
    public static final OfAddress PMENU_EVENT_RECORD = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _FOCUS_EVENT_RECORD* PFOCUS_EVENT_RECORD;
     * }
     */
    public static final OfAddress PFOCUS_EVENT_RECORD = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _INPUT_RECORD* PINPUT_RECORD;
     * }
     */
    public static final OfAddress PINPUT_RECORD = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _CHAR_INFO* PCHAR_INFO;
     * }
     */
    public static final OfAddress PCHAR_INFO = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _CONSOLE_FONT_INFO* PCONSOLE_FONT_INFO;
     * }
     */
    public static final OfAddress PCONSOLE_FONT_INFO = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef void* HPCON;
     * }
     */
    public static final OfAddress HPCON = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle AllocConsole$MH() {
        return RuntimeHelper.requireNonNull(constants$547.AllocConsole$MH,"AllocConsole");
    }
    /**
     * {@snippet :
     * BOOL AllocConsole();
     * }
     */
    public static int AllocConsole() {
        var mh$ = AllocConsole$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FreeConsole$MH() {
        return RuntimeHelper.requireNonNull(constants$547.FreeConsole$MH,"FreeConsole");
    }
    /**
     * {@snippet :
     * BOOL FreeConsole();
     * }
     */
    public static int FreeConsole() {
        var mh$ = FreeConsole$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AttachConsole$MH() {
        return RuntimeHelper.requireNonNull(constants$547.AttachConsole$MH,"AttachConsole");
    }
    /**
     * {@snippet :
     * BOOL AttachConsole(DWORD dwProcessId);
     * }
     */
    public static int AttachConsole(int dwProcessId) {
        var mh$ = AttachConsole$MH();
        try {
            return (int)mh$.invokeExact(dwProcessId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleCP$MH() {
        return RuntimeHelper.requireNonNull(constants$548.GetConsoleCP$MH,"GetConsoleCP");
    }
    /**
     * {@snippet :
     * UINT GetConsoleCP();
     * }
     */
    public static int GetConsoleCP() {
        var mh$ = GetConsoleCP$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleOutputCP$MH() {
        return RuntimeHelper.requireNonNull(constants$548.GetConsoleOutputCP$MH,"GetConsoleOutputCP");
    }
    /**
     * {@snippet :
     * UINT GetConsoleOutputCP();
     * }
     */
    public static int GetConsoleOutputCP() {
        var mh$ = GetConsoleOutputCP$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleMode$MH() {
        return RuntimeHelper.requireNonNull(constants$548.GetConsoleMode$MH,"GetConsoleMode");
    }
    /**
     * {@snippet :
     * BOOL GetConsoleMode(HANDLE hConsoleHandle, LPDWORD lpMode);
     * }
     */
    public static int GetConsoleMode(MemorySegment hConsoleHandle, MemorySegment lpMode) {
        var mh$ = GetConsoleMode$MH();
        try {
            return (int)mh$.invokeExact(hConsoleHandle, lpMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetConsoleMode$MH() {
        return RuntimeHelper.requireNonNull(constants$548.SetConsoleMode$MH,"SetConsoleMode");
    }
    /**
     * {@snippet :
     * BOOL SetConsoleMode(HANDLE hConsoleHandle, DWORD dwMode);
     * }
     */
    public static int SetConsoleMode(MemorySegment hConsoleHandle, int dwMode) {
        var mh$ = SetConsoleMode$MH();
        try {
            return (int)mh$.invokeExact(hConsoleHandle, dwMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNumberOfConsoleInputEvents$MH() {
        return RuntimeHelper.requireNonNull(constants$548.GetNumberOfConsoleInputEvents$MH,"GetNumberOfConsoleInputEvents");
    }
    /**
     * {@snippet :
     * BOOL GetNumberOfConsoleInputEvents(HANDLE hConsoleInput, LPDWORD lpNumberOfEvents);
     * }
     */
    public static int GetNumberOfConsoleInputEvents(MemorySegment hConsoleInput, MemorySegment lpNumberOfEvents) {
        var mh$ = GetNumberOfConsoleInputEvents$MH();
        try {
            return (int)mh$.invokeExact(hConsoleInput, lpNumberOfEvents);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadConsoleInputA$MH() {
        return RuntimeHelper.requireNonNull(constants$548.ReadConsoleInputA$MH,"ReadConsoleInputA");
    }
    /**
     * {@snippet :
     * BOOL ReadConsoleInputA(HANDLE hConsoleInput, PINPUT_RECORD lpBuffer, DWORD nLength, LPDWORD lpNumberOfEventsRead);
     * }
     */
    public static int ReadConsoleInputA(MemorySegment hConsoleInput, MemorySegment lpBuffer, int nLength, MemorySegment lpNumberOfEventsRead) {
        var mh$ = ReadConsoleInputA$MH();
        try {
            return (int)mh$.invokeExact(hConsoleInput, lpBuffer, nLength, lpNumberOfEventsRead);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadConsoleInputW$MH() {
        return RuntimeHelper.requireNonNull(constants$549.ReadConsoleInputW$MH,"ReadConsoleInputW");
    }
    /**
     * {@snippet :
     * BOOL ReadConsoleInputW(HANDLE hConsoleInput, PINPUT_RECORD lpBuffer, DWORD nLength, LPDWORD lpNumberOfEventsRead);
     * }
     */
    public static int ReadConsoleInputW(MemorySegment hConsoleInput, MemorySegment lpBuffer, int nLength, MemorySegment lpNumberOfEventsRead) {
        var mh$ = ReadConsoleInputW$MH();
        try {
            return (int)mh$.invokeExact(hConsoleInput, lpBuffer, nLength, lpNumberOfEventsRead);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PeekConsoleInputA$MH() {
        return RuntimeHelper.requireNonNull(constants$549.PeekConsoleInputA$MH,"PeekConsoleInputA");
    }
    /**
     * {@snippet :
     * BOOL PeekConsoleInputA(HANDLE hConsoleInput, PINPUT_RECORD lpBuffer, DWORD nLength, LPDWORD lpNumberOfEventsRead);
     * }
     */
    public static int PeekConsoleInputA(MemorySegment hConsoleInput, MemorySegment lpBuffer, int nLength, MemorySegment lpNumberOfEventsRead) {
        var mh$ = PeekConsoleInputA$MH();
        try {
            return (int)mh$.invokeExact(hConsoleInput, lpBuffer, nLength, lpNumberOfEventsRead);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PeekConsoleInputW$MH() {
        return RuntimeHelper.requireNonNull(constants$549.PeekConsoleInputW$MH,"PeekConsoleInputW");
    }
    /**
     * {@snippet :
     * BOOL PeekConsoleInputW(HANDLE hConsoleInput, PINPUT_RECORD lpBuffer, DWORD nLength, LPDWORD lpNumberOfEventsRead);
     * }
     */
    public static int PeekConsoleInputW(MemorySegment hConsoleInput, MemorySegment lpBuffer, int nLength, MemorySegment lpNumberOfEventsRead) {
        var mh$ = PeekConsoleInputW$MH();
        try {
            return (int)mh$.invokeExact(hConsoleInput, lpBuffer, nLength, lpNumberOfEventsRead);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _CONSOLE_READCONSOLE_CONTROL* PCONSOLE_READCONSOLE_CONTROL;
     * }
     */
    public static final OfAddress PCONSOLE_READCONSOLE_CONTROL = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle ReadConsoleA$MH() {
        return RuntimeHelper.requireNonNull(constants$549.ReadConsoleA$MH,"ReadConsoleA");
    }
    /**
     * {@snippet :
     * BOOL ReadConsoleA(HANDLE hConsoleInput, LPVOID lpBuffer, DWORD nNumberOfCharsToRead, LPDWORD lpNumberOfCharsRead, PCONSOLE_READCONSOLE_CONTROL pInputControl);
     * }
     */
    public static int ReadConsoleA(MemorySegment hConsoleInput, MemorySegment lpBuffer, int nNumberOfCharsToRead, MemorySegment lpNumberOfCharsRead, MemorySegment pInputControl) {
        var mh$ = ReadConsoleA$MH();
        try {
            return (int)mh$.invokeExact(hConsoleInput, lpBuffer, nNumberOfCharsToRead, lpNumberOfCharsRead, pInputControl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadConsoleW$MH() {
        return RuntimeHelper.requireNonNull(constants$549.ReadConsoleW$MH,"ReadConsoleW");
    }
    /**
     * {@snippet :
     * BOOL ReadConsoleW(HANDLE hConsoleInput, LPVOID lpBuffer, DWORD nNumberOfCharsToRead, LPDWORD lpNumberOfCharsRead, PCONSOLE_READCONSOLE_CONTROL pInputControl);
     * }
     */
    public static int ReadConsoleW(MemorySegment hConsoleInput, MemorySegment lpBuffer, int nNumberOfCharsToRead, MemorySegment lpNumberOfCharsRead, MemorySegment pInputControl) {
        var mh$ = ReadConsoleW$MH();
        try {
            return (int)mh$.invokeExact(hConsoleInput, lpBuffer, nNumberOfCharsToRead, lpNumberOfCharsRead, pInputControl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteConsoleA$MH() {
        return RuntimeHelper.requireNonNull(constants$549.WriteConsoleA$MH,"WriteConsoleA");
    }
    /**
     * {@snippet :
     * BOOL WriteConsoleA(HANDLE hConsoleOutput, void* lpBuffer, DWORD nNumberOfCharsToWrite, LPDWORD lpNumberOfCharsWritten, LPVOID lpReserved);
     * }
     */
    public static int WriteConsoleA(MemorySegment hConsoleOutput, MemorySegment lpBuffer, int nNumberOfCharsToWrite, MemorySegment lpNumberOfCharsWritten, MemorySegment lpReserved) {
        var mh$ = WriteConsoleA$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, lpBuffer, nNumberOfCharsToWrite, lpNumberOfCharsWritten, lpReserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteConsoleW$MH() {
        return RuntimeHelper.requireNonNull(constants$550.WriteConsoleW$MH,"WriteConsoleW");
    }
    /**
     * {@snippet :
     * BOOL WriteConsoleW(HANDLE hConsoleOutput, void* lpBuffer, DWORD nNumberOfCharsToWrite, LPDWORD lpNumberOfCharsWritten, LPVOID lpReserved);
     * }
     */
    public static int WriteConsoleW(MemorySegment hConsoleOutput, MemorySegment lpBuffer, int nNumberOfCharsToWrite, MemorySegment lpNumberOfCharsWritten, MemorySegment lpReserved) {
        var mh$ = WriteConsoleW$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, lpBuffer, nNumberOfCharsToWrite, lpNumberOfCharsWritten, lpReserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetConsoleCtrlHandler$MH() {
        return RuntimeHelper.requireNonNull(constants$550.SetConsoleCtrlHandler$MH,"SetConsoleCtrlHandler");
    }
    /**
     * {@snippet :
     * BOOL SetConsoleCtrlHandler(PHANDLER_ROUTINE HandlerRoutine, BOOL Add);
     * }
     */
    public static int SetConsoleCtrlHandler(MemorySegment HandlerRoutine, int Add) {
        var mh$ = SetConsoleCtrlHandler$MH();
        try {
            return (int)mh$.invokeExact(HandlerRoutine, Add);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreatePseudoConsole$MH() {
        return RuntimeHelper.requireNonNull(constants$550.CreatePseudoConsole$MH,"CreatePseudoConsole");
    }
    /**
     * {@snippet :
     * HRESULT CreatePseudoConsole(COORD size, HANDLE hInput, HANDLE hOutput, DWORD dwFlags, HPCON* phPC);
     * }
     */
    public static int CreatePseudoConsole(MemorySegment size, MemorySegment hInput, MemorySegment hOutput, int dwFlags, MemorySegment phPC) {
        var mh$ = CreatePseudoConsole$MH();
        try {
            return (int)mh$.invokeExact(size, hInput, hOutput, dwFlags, phPC);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ResizePseudoConsole$MH() {
        return RuntimeHelper.requireNonNull(constants$550.ResizePseudoConsole$MH,"ResizePseudoConsole");
    }
    /**
     * {@snippet :
     * HRESULT ResizePseudoConsole(HPCON hPC, COORD size);
     * }
     */
    public static int ResizePseudoConsole(MemorySegment hPC, MemorySegment size) {
        var mh$ = ResizePseudoConsole$MH();
        try {
            return (int)mh$.invokeExact(hPC, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ClosePseudoConsole$MH() {
        return RuntimeHelper.requireNonNull(constants$551.ClosePseudoConsole$MH,"ClosePseudoConsole");
    }
    /**
     * {@snippet :
     * void ClosePseudoConsole(HPCON hPC);
     * }
     */
    public static void ClosePseudoConsole(MemorySegment hPC) {
        var mh$ = ClosePseudoConsole$MH();
        try {
            mh$.invokeExact(hPC);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FillConsoleOutputCharacterA$MH() {
        return RuntimeHelper.requireNonNull(constants$551.FillConsoleOutputCharacterA$MH,"FillConsoleOutputCharacterA");
    }
    /**
     * {@snippet :
     * BOOL FillConsoleOutputCharacterA(HANDLE hConsoleOutput, CHAR cCharacter, DWORD nLength, COORD dwWriteCoord, LPDWORD lpNumberOfCharsWritten);
     * }
     */
    public static int FillConsoleOutputCharacterA(MemorySegment hConsoleOutput, byte cCharacter, int nLength, MemorySegment dwWriteCoord, MemorySegment lpNumberOfCharsWritten) {
        var mh$ = FillConsoleOutputCharacterA$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, cCharacter, nLength, dwWriteCoord, lpNumberOfCharsWritten);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FillConsoleOutputCharacterW$MH() {
        return RuntimeHelper.requireNonNull(constants$551.FillConsoleOutputCharacterW$MH,"FillConsoleOutputCharacterW");
    }
    /**
     * {@snippet :
     * BOOL FillConsoleOutputCharacterW(HANDLE hConsoleOutput, WCHAR cCharacter, DWORD nLength, COORD dwWriteCoord, LPDWORD lpNumberOfCharsWritten);
     * }
     */
    public static int FillConsoleOutputCharacterW(MemorySegment hConsoleOutput, short cCharacter, int nLength, MemorySegment dwWriteCoord, MemorySegment lpNumberOfCharsWritten) {
        var mh$ = FillConsoleOutputCharacterW$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, cCharacter, nLength, dwWriteCoord, lpNumberOfCharsWritten);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FillConsoleOutputAttribute$MH() {
        return RuntimeHelper.requireNonNull(constants$551.FillConsoleOutputAttribute$MH,"FillConsoleOutputAttribute");
    }
    /**
     * {@snippet :
     * BOOL FillConsoleOutputAttribute(HANDLE hConsoleOutput, WORD wAttribute, DWORD nLength, COORD dwWriteCoord, LPDWORD lpNumberOfAttrsWritten);
     * }
     */
    public static int FillConsoleOutputAttribute(MemorySegment hConsoleOutput, short wAttribute, int nLength, MemorySegment dwWriteCoord, MemorySegment lpNumberOfAttrsWritten) {
        var mh$ = FillConsoleOutputAttribute$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, wAttribute, nLength, dwWriteCoord, lpNumberOfAttrsWritten);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GenerateConsoleCtrlEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$551.GenerateConsoleCtrlEvent$MH,"GenerateConsoleCtrlEvent");
    }
    /**
     * {@snippet :
     * BOOL GenerateConsoleCtrlEvent(DWORD dwCtrlEvent, DWORD dwProcessGroupId);
     * }
     */
    public static int GenerateConsoleCtrlEvent(int dwCtrlEvent, int dwProcessGroupId) {
        var mh$ = GenerateConsoleCtrlEvent$MH();
        try {
            return (int)mh$.invokeExact(dwCtrlEvent, dwProcessGroupId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateConsoleScreenBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$551.CreateConsoleScreenBuffer$MH,"CreateConsoleScreenBuffer");
    }
    /**
     * {@snippet :
     * HANDLE CreateConsoleScreenBuffer(DWORD dwDesiredAccess, DWORD dwShareMode, const SECURITY_ATTRIBUTES* lpSecurityAttributes, DWORD dwFlags, LPVOID lpScreenBufferData);
     * }
     */
    public static MemorySegment CreateConsoleScreenBuffer(int dwDesiredAccess, int dwShareMode, MemorySegment lpSecurityAttributes, int dwFlags, MemorySegment lpScreenBufferData) {
        var mh$ = CreateConsoleScreenBuffer$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(dwDesiredAccess, dwShareMode, lpSecurityAttributes, dwFlags, lpScreenBufferData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetConsoleActiveScreenBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$552.SetConsoleActiveScreenBuffer$MH,"SetConsoleActiveScreenBuffer");
    }
    /**
     * {@snippet :
     * BOOL SetConsoleActiveScreenBuffer(HANDLE hConsoleOutput);
     * }
     */
    public static int SetConsoleActiveScreenBuffer(MemorySegment hConsoleOutput) {
        var mh$ = SetConsoleActiveScreenBuffer$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FlushConsoleInputBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$552.FlushConsoleInputBuffer$MH,"FlushConsoleInputBuffer");
    }
    /**
     * {@snippet :
     * BOOL FlushConsoleInputBuffer(HANDLE hConsoleInput);
     * }
     */
    public static int FlushConsoleInputBuffer(MemorySegment hConsoleInput) {
        var mh$ = FlushConsoleInputBuffer$MH();
        try {
            return (int)mh$.invokeExact(hConsoleInput);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetConsoleCP$MH() {
        return RuntimeHelper.requireNonNull(constants$552.SetConsoleCP$MH,"SetConsoleCP");
    }
    /**
     * {@snippet :
     * BOOL SetConsoleCP(UINT wCodePageID);
     * }
     */
    public static int SetConsoleCP(int wCodePageID) {
        var mh$ = SetConsoleCP$MH();
        try {
            return (int)mh$.invokeExact(wCodePageID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetConsoleOutputCP$MH() {
        return RuntimeHelper.requireNonNull(constants$552.SetConsoleOutputCP$MH,"SetConsoleOutputCP");
    }
    /**
     * {@snippet :
     * BOOL SetConsoleOutputCP(UINT wCodePageID);
     * }
     */
    public static int SetConsoleOutputCP(int wCodePageID) {
        var mh$ = SetConsoleOutputCP$MH();
        try {
            return (int)mh$.invokeExact(wCodePageID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _CONSOLE_CURSOR_INFO* PCONSOLE_CURSOR_INFO;
     * }
     */
    public static final OfAddress PCONSOLE_CURSOR_INFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetConsoleCursorInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$552.GetConsoleCursorInfo$MH,"GetConsoleCursorInfo");
    }
    /**
     * {@snippet :
     * BOOL GetConsoleCursorInfo(HANDLE hConsoleOutput, PCONSOLE_CURSOR_INFO lpConsoleCursorInfo);
     * }
     */
    public static int GetConsoleCursorInfo(MemorySegment hConsoleOutput, MemorySegment lpConsoleCursorInfo) {
        var mh$ = GetConsoleCursorInfo$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, lpConsoleCursorInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetConsoleCursorInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$552.SetConsoleCursorInfo$MH,"SetConsoleCursorInfo");
    }
    /**
     * {@snippet :
     * BOOL SetConsoleCursorInfo(HANDLE hConsoleOutput, const CONSOLE_CURSOR_INFO* lpConsoleCursorInfo);
     * }
     */
    public static int SetConsoleCursorInfo(MemorySegment hConsoleOutput, MemorySegment lpConsoleCursorInfo) {
        var mh$ = SetConsoleCursorInfo$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, lpConsoleCursorInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _CONSOLE_SCREEN_BUFFER_INFO* PCONSOLE_SCREEN_BUFFER_INFO;
     * }
     */
    public static final OfAddress PCONSOLE_SCREEN_BUFFER_INFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetConsoleScreenBufferInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$553.GetConsoleScreenBufferInfo$MH,"GetConsoleScreenBufferInfo");
    }
    /**
     * {@snippet :
     * BOOL GetConsoleScreenBufferInfo(HANDLE hConsoleOutput, PCONSOLE_SCREEN_BUFFER_INFO lpConsoleScreenBufferInfo);
     * }
     */
    public static int GetConsoleScreenBufferInfo(MemorySegment hConsoleOutput, MemorySegment lpConsoleScreenBufferInfo) {
        var mh$ = GetConsoleScreenBufferInfo$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, lpConsoleScreenBufferInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _CONSOLE_SCREEN_BUFFER_INFOEX* PCONSOLE_SCREEN_BUFFER_INFOEX;
     * }
     */
    public static final OfAddress PCONSOLE_SCREEN_BUFFER_INFOEX = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetConsoleScreenBufferInfoEx$MH() {
        return RuntimeHelper.requireNonNull(constants$553.GetConsoleScreenBufferInfoEx$MH,"GetConsoleScreenBufferInfoEx");
    }
    /**
     * {@snippet :
     * BOOL GetConsoleScreenBufferInfoEx(HANDLE hConsoleOutput, PCONSOLE_SCREEN_BUFFER_INFOEX lpConsoleScreenBufferInfoEx);
     * }
     */
    public static int GetConsoleScreenBufferInfoEx(MemorySegment hConsoleOutput, MemorySegment lpConsoleScreenBufferInfoEx) {
        var mh$ = GetConsoleScreenBufferInfoEx$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, lpConsoleScreenBufferInfoEx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetConsoleScreenBufferInfoEx$MH() {
        return RuntimeHelper.requireNonNull(constants$553.SetConsoleScreenBufferInfoEx$MH,"SetConsoleScreenBufferInfoEx");
    }
    /**
     * {@snippet :
     * BOOL SetConsoleScreenBufferInfoEx(HANDLE hConsoleOutput, PCONSOLE_SCREEN_BUFFER_INFOEX lpConsoleScreenBufferInfoEx);
     * }
     */
    public static int SetConsoleScreenBufferInfoEx(MemorySegment hConsoleOutput, MemorySegment lpConsoleScreenBufferInfoEx) {
        var mh$ = SetConsoleScreenBufferInfoEx$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, lpConsoleScreenBufferInfoEx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetConsoleScreenBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$553.SetConsoleScreenBufferSize$MH,"SetConsoleScreenBufferSize");
    }
    /**
     * {@snippet :
     * BOOL SetConsoleScreenBufferSize(HANDLE hConsoleOutput, COORD dwSize);
     * }
     */
    public static int SetConsoleScreenBufferSize(MemorySegment hConsoleOutput, MemorySegment dwSize) {
        var mh$ = SetConsoleScreenBufferSize$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, dwSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetConsoleCursorPosition$MH() {
        return RuntimeHelper.requireNonNull(constants$553.SetConsoleCursorPosition$MH,"SetConsoleCursorPosition");
    }
    /**
     * {@snippet :
     * BOOL SetConsoleCursorPosition(HANDLE hConsoleOutput, COORD dwCursorPosition);
     * }
     */
    public static int SetConsoleCursorPosition(MemorySegment hConsoleOutput, MemorySegment dwCursorPosition) {
        var mh$ = SetConsoleCursorPosition$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, dwCursorPosition);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetLargestConsoleWindowSize$MH() {
        return RuntimeHelper.requireNonNull(constants$553.GetLargestConsoleWindowSize$MH,"GetLargestConsoleWindowSize");
    }
    /**
     * {@snippet :
     * COORD GetLargestConsoleWindowSize(HANDLE hConsoleOutput);
     * }
     */
    public static MemorySegment GetLargestConsoleWindowSize(SegmentAllocator allocator, MemorySegment hConsoleOutput) {
        var mh$ = GetLargestConsoleWindowSize$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, hConsoleOutput);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetConsoleTextAttribute$MH() {
        return RuntimeHelper.requireNonNull(constants$554.SetConsoleTextAttribute$MH,"SetConsoleTextAttribute");
    }
    /**
     * {@snippet :
     * BOOL SetConsoleTextAttribute(HANDLE hConsoleOutput, WORD wAttributes);
     * }
     */
    public static int SetConsoleTextAttribute(MemorySegment hConsoleOutput, short wAttributes) {
        var mh$ = SetConsoleTextAttribute$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, wAttributes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetConsoleWindowInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$554.SetConsoleWindowInfo$MH,"SetConsoleWindowInfo");
    }
    /**
     * {@snippet :
     * BOOL SetConsoleWindowInfo(HANDLE hConsoleOutput, BOOL bAbsolute, const SMALL_RECT* lpConsoleWindow);
     * }
     */
    public static int SetConsoleWindowInfo(MemorySegment hConsoleOutput, int bAbsolute, MemorySegment lpConsoleWindow) {
        var mh$ = SetConsoleWindowInfo$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, bAbsolute, lpConsoleWindow);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteConsoleOutputCharacterA$MH() {
        return RuntimeHelper.requireNonNull(constants$554.WriteConsoleOutputCharacterA$MH,"WriteConsoleOutputCharacterA");
    }
    /**
     * {@snippet :
     * BOOL WriteConsoleOutputCharacterA(HANDLE hConsoleOutput, LPCSTR lpCharacter, DWORD nLength, COORD dwWriteCoord, LPDWORD lpNumberOfCharsWritten);
     * }
     */
    public static int WriteConsoleOutputCharacterA(MemorySegment hConsoleOutput, MemorySegment lpCharacter, int nLength, MemorySegment dwWriteCoord, MemorySegment lpNumberOfCharsWritten) {
        var mh$ = WriteConsoleOutputCharacterA$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, lpCharacter, nLength, dwWriteCoord, lpNumberOfCharsWritten);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteConsoleOutputCharacterW$MH() {
        return RuntimeHelper.requireNonNull(constants$554.WriteConsoleOutputCharacterW$MH,"WriteConsoleOutputCharacterW");
    }
    /**
     * {@snippet :
     * BOOL WriteConsoleOutputCharacterW(HANDLE hConsoleOutput, LPCWSTR lpCharacter, DWORD nLength, COORD dwWriteCoord, LPDWORD lpNumberOfCharsWritten);
     * }
     */
    public static int WriteConsoleOutputCharacterW(MemorySegment hConsoleOutput, MemorySegment lpCharacter, int nLength, MemorySegment dwWriteCoord, MemorySegment lpNumberOfCharsWritten) {
        var mh$ = WriteConsoleOutputCharacterW$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, lpCharacter, nLength, dwWriteCoord, lpNumberOfCharsWritten);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteConsoleOutputAttribute$MH() {
        return RuntimeHelper.requireNonNull(constants$554.WriteConsoleOutputAttribute$MH,"WriteConsoleOutputAttribute");
    }
    /**
     * {@snippet :
     * BOOL WriteConsoleOutputAttribute(HANDLE hConsoleOutput, const WORD* lpAttribute, DWORD nLength, COORD dwWriteCoord, LPDWORD lpNumberOfAttrsWritten);
     * }
     */
    public static int WriteConsoleOutputAttribute(MemorySegment hConsoleOutput, MemorySegment lpAttribute, int nLength, MemorySegment dwWriteCoord, MemorySegment lpNumberOfAttrsWritten) {
        var mh$ = WriteConsoleOutputAttribute$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, lpAttribute, nLength, dwWriteCoord, lpNumberOfAttrsWritten);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadConsoleOutputCharacterA$MH() {
        return RuntimeHelper.requireNonNull(constants$554.ReadConsoleOutputCharacterA$MH,"ReadConsoleOutputCharacterA");
    }
    /**
     * {@snippet :
     * BOOL ReadConsoleOutputCharacterA(HANDLE hConsoleOutput, LPSTR lpCharacter, DWORD nLength, COORD dwReadCoord, LPDWORD lpNumberOfCharsRead);
     * }
     */
    public static int ReadConsoleOutputCharacterA(MemorySegment hConsoleOutput, MemorySegment lpCharacter, int nLength, MemorySegment dwReadCoord, MemorySegment lpNumberOfCharsRead) {
        var mh$ = ReadConsoleOutputCharacterA$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, lpCharacter, nLength, dwReadCoord, lpNumberOfCharsRead);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadConsoleOutputCharacterW$MH() {
        return RuntimeHelper.requireNonNull(constants$555.ReadConsoleOutputCharacterW$MH,"ReadConsoleOutputCharacterW");
    }
    /**
     * {@snippet :
     * BOOL ReadConsoleOutputCharacterW(HANDLE hConsoleOutput, LPWSTR lpCharacter, DWORD nLength, COORD dwReadCoord, LPDWORD lpNumberOfCharsRead);
     * }
     */
    public static int ReadConsoleOutputCharacterW(MemorySegment hConsoleOutput, MemorySegment lpCharacter, int nLength, MemorySegment dwReadCoord, MemorySegment lpNumberOfCharsRead) {
        var mh$ = ReadConsoleOutputCharacterW$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, lpCharacter, nLength, dwReadCoord, lpNumberOfCharsRead);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadConsoleOutputAttribute$MH() {
        return RuntimeHelper.requireNonNull(constants$555.ReadConsoleOutputAttribute$MH,"ReadConsoleOutputAttribute");
    }
    /**
     * {@snippet :
     * BOOL ReadConsoleOutputAttribute(HANDLE hConsoleOutput, LPWORD lpAttribute, DWORD nLength, COORD dwReadCoord, LPDWORD lpNumberOfAttrsRead);
     * }
     */
    public static int ReadConsoleOutputAttribute(MemorySegment hConsoleOutput, MemorySegment lpAttribute, int nLength, MemorySegment dwReadCoord, MemorySegment lpNumberOfAttrsRead) {
        var mh$ = ReadConsoleOutputAttribute$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, lpAttribute, nLength, dwReadCoord, lpNumberOfAttrsRead);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteConsoleInputA$MH() {
        return RuntimeHelper.requireNonNull(constants$555.WriteConsoleInputA$MH,"WriteConsoleInputA");
    }
    /**
     * {@snippet :
     * BOOL WriteConsoleInputA(HANDLE hConsoleInput, const INPUT_RECORD* lpBuffer, DWORD nLength, LPDWORD lpNumberOfEventsWritten);
     * }
     */
    public static int WriteConsoleInputA(MemorySegment hConsoleInput, MemorySegment lpBuffer, int nLength, MemorySegment lpNumberOfEventsWritten) {
        var mh$ = WriteConsoleInputA$MH();
        try {
            return (int)mh$.invokeExact(hConsoleInput, lpBuffer, nLength, lpNumberOfEventsWritten);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteConsoleInputW$MH() {
        return RuntimeHelper.requireNonNull(constants$555.WriteConsoleInputW$MH,"WriteConsoleInputW");
    }
    /**
     * {@snippet :
     * BOOL WriteConsoleInputW(HANDLE hConsoleInput, const INPUT_RECORD* lpBuffer, DWORD nLength, LPDWORD lpNumberOfEventsWritten);
     * }
     */
    public static int WriteConsoleInputW(MemorySegment hConsoleInput, MemorySegment lpBuffer, int nLength, MemorySegment lpNumberOfEventsWritten) {
        var mh$ = WriteConsoleInputW$MH();
        try {
            return (int)mh$.invokeExact(hConsoleInput, lpBuffer, nLength, lpNumberOfEventsWritten);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ScrollConsoleScreenBufferA$MH() {
        return RuntimeHelper.requireNonNull(constants$555.ScrollConsoleScreenBufferA$MH,"ScrollConsoleScreenBufferA");
    }
    /**
     * {@snippet :
     * BOOL ScrollConsoleScreenBufferA(HANDLE hConsoleOutput, const SMALL_RECT* lpScrollRectangle, const SMALL_RECT* lpClipRectangle, COORD dwDestinationOrigin, const CHAR_INFO* lpFill);
     * }
     */
    public static int ScrollConsoleScreenBufferA(MemorySegment hConsoleOutput, MemorySegment lpScrollRectangle, MemorySegment lpClipRectangle, MemorySegment dwDestinationOrigin, MemorySegment lpFill) {
        var mh$ = ScrollConsoleScreenBufferA$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, lpScrollRectangle, lpClipRectangle, dwDestinationOrigin, lpFill);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ScrollConsoleScreenBufferW$MH() {
        return RuntimeHelper.requireNonNull(constants$555.ScrollConsoleScreenBufferW$MH,"ScrollConsoleScreenBufferW");
    }
    /**
     * {@snippet :
     * BOOL ScrollConsoleScreenBufferW(HANDLE hConsoleOutput, const SMALL_RECT* lpScrollRectangle, const SMALL_RECT* lpClipRectangle, COORD dwDestinationOrigin, const CHAR_INFO* lpFill);
     * }
     */
    public static int ScrollConsoleScreenBufferW(MemorySegment hConsoleOutput, MemorySegment lpScrollRectangle, MemorySegment lpClipRectangle, MemorySegment dwDestinationOrigin, MemorySegment lpFill) {
        var mh$ = ScrollConsoleScreenBufferW$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, lpScrollRectangle, lpClipRectangle, dwDestinationOrigin, lpFill);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteConsoleOutputA$MH() {
        return RuntimeHelper.requireNonNull(constants$556.WriteConsoleOutputA$MH,"WriteConsoleOutputA");
    }
    /**
     * {@snippet :
     * BOOL WriteConsoleOutputA(HANDLE hConsoleOutput, const CHAR_INFO* lpBuffer, COORD dwBufferSize, COORD dwBufferCoord, PSMALL_RECT lpWriteRegion);
     * }
     */
    public static int WriteConsoleOutputA(MemorySegment hConsoleOutput, MemorySegment lpBuffer, MemorySegment dwBufferSize, MemorySegment dwBufferCoord, MemorySegment lpWriteRegion) {
        var mh$ = WriteConsoleOutputA$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, lpBuffer, dwBufferSize, dwBufferCoord, lpWriteRegion);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteConsoleOutputW$MH() {
        return RuntimeHelper.requireNonNull(constants$556.WriteConsoleOutputW$MH,"WriteConsoleOutputW");
    }
    /**
     * {@snippet :
     * BOOL WriteConsoleOutputW(HANDLE hConsoleOutput, const CHAR_INFO* lpBuffer, COORD dwBufferSize, COORD dwBufferCoord, PSMALL_RECT lpWriteRegion);
     * }
     */
    public static int WriteConsoleOutputW(MemorySegment hConsoleOutput, MemorySegment lpBuffer, MemorySegment dwBufferSize, MemorySegment dwBufferCoord, MemorySegment lpWriteRegion) {
        var mh$ = WriteConsoleOutputW$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, lpBuffer, dwBufferSize, dwBufferCoord, lpWriteRegion);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadConsoleOutputA$MH() {
        return RuntimeHelper.requireNonNull(constants$556.ReadConsoleOutputA$MH,"ReadConsoleOutputA");
    }
    /**
     * {@snippet :
     * BOOL ReadConsoleOutputA(HANDLE hConsoleOutput, PCHAR_INFO lpBuffer, COORD dwBufferSize, COORD dwBufferCoord, PSMALL_RECT lpReadRegion);
     * }
     */
    public static int ReadConsoleOutputA(MemorySegment hConsoleOutput, MemorySegment lpBuffer, MemorySegment dwBufferSize, MemorySegment dwBufferCoord, MemorySegment lpReadRegion) {
        var mh$ = ReadConsoleOutputA$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, lpBuffer, dwBufferSize, dwBufferCoord, lpReadRegion);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadConsoleOutputW$MH() {
        return RuntimeHelper.requireNonNull(constants$556.ReadConsoleOutputW$MH,"ReadConsoleOutputW");
    }
    /**
     * {@snippet :
     * BOOL ReadConsoleOutputW(HANDLE hConsoleOutput, PCHAR_INFO lpBuffer, COORD dwBufferSize, COORD dwBufferCoord, PSMALL_RECT lpReadRegion);
     * }
     */
    public static int ReadConsoleOutputW(MemorySegment hConsoleOutput, MemorySegment lpBuffer, MemorySegment dwBufferSize, MemorySegment dwBufferCoord, MemorySegment lpReadRegion) {
        var mh$ = ReadConsoleOutputW$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, lpBuffer, dwBufferSize, dwBufferCoord, lpReadRegion);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleTitleA$MH() {
        return RuntimeHelper.requireNonNull(constants$556.GetConsoleTitleA$MH,"GetConsoleTitleA");
    }
    /**
     * {@snippet :
     * DWORD GetConsoleTitleA(LPSTR lpConsoleTitle, DWORD nSize);
     * }
     */
    public static int GetConsoleTitleA(MemorySegment lpConsoleTitle, int nSize) {
        var mh$ = GetConsoleTitleA$MH();
        try {
            return (int)mh$.invokeExact(lpConsoleTitle, nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleTitleW$MH() {
        return RuntimeHelper.requireNonNull(constants$556.GetConsoleTitleW$MH,"GetConsoleTitleW");
    }
    /**
     * {@snippet :
     * DWORD GetConsoleTitleW(LPWSTR lpConsoleTitle, DWORD nSize);
     * }
     */
    public static int GetConsoleTitleW(MemorySegment lpConsoleTitle, int nSize) {
        var mh$ = GetConsoleTitleW$MH();
        try {
            return (int)mh$.invokeExact(lpConsoleTitle, nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleOriginalTitleA$MH() {
        return RuntimeHelper.requireNonNull(constants$557.GetConsoleOriginalTitleA$MH,"GetConsoleOriginalTitleA");
    }
    /**
     * {@snippet :
     * DWORD GetConsoleOriginalTitleA(LPSTR lpConsoleTitle, DWORD nSize);
     * }
     */
    public static int GetConsoleOriginalTitleA(MemorySegment lpConsoleTitle, int nSize) {
        var mh$ = GetConsoleOriginalTitleA$MH();
        try {
            return (int)mh$.invokeExact(lpConsoleTitle, nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleOriginalTitleW$MH() {
        return RuntimeHelper.requireNonNull(constants$557.GetConsoleOriginalTitleW$MH,"GetConsoleOriginalTitleW");
    }
    /**
     * {@snippet :
     * DWORD GetConsoleOriginalTitleW(LPWSTR lpConsoleTitle, DWORD nSize);
     * }
     */
    public static int GetConsoleOriginalTitleW(MemorySegment lpConsoleTitle, int nSize) {
        var mh$ = GetConsoleOriginalTitleW$MH();
        try {
            return (int)mh$.invokeExact(lpConsoleTitle, nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetConsoleTitleA$MH() {
        return RuntimeHelper.requireNonNull(constants$557.SetConsoleTitleA$MH,"SetConsoleTitleA");
    }
    /**
     * {@snippet :
     * BOOL SetConsoleTitleA(LPCSTR lpConsoleTitle);
     * }
     */
    public static int SetConsoleTitleA(MemorySegment lpConsoleTitle) {
        var mh$ = SetConsoleTitleA$MH();
        try {
            return (int)mh$.invokeExact(lpConsoleTitle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetConsoleTitleW$MH() {
        return RuntimeHelper.requireNonNull(constants$557.SetConsoleTitleW$MH,"SetConsoleTitleW");
    }
    /**
     * {@snippet :
     * BOOL SetConsoleTitleW(LPCWSTR lpConsoleTitle);
     * }
     */
    public static int SetConsoleTitleW(MemorySegment lpConsoleTitle) {
        var mh$ = SetConsoleTitleW$MH();
        try {
            return (int)mh$.invokeExact(lpConsoleTitle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNumberOfConsoleMouseButtons$MH() {
        return RuntimeHelper.requireNonNull(constants$557.GetNumberOfConsoleMouseButtons$MH,"GetNumberOfConsoleMouseButtons");
    }
    /**
     * {@snippet :
     * BOOL GetNumberOfConsoleMouseButtons(LPDWORD lpNumberOfMouseButtons);
     * }
     */
    public static int GetNumberOfConsoleMouseButtons(MemorySegment lpNumberOfMouseButtons) {
        var mh$ = GetNumberOfConsoleMouseButtons$MH();
        try {
            return (int)mh$.invokeExact(lpNumberOfMouseButtons);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleFontSize$MH() {
        return RuntimeHelper.requireNonNull(constants$557.GetConsoleFontSize$MH,"GetConsoleFontSize");
    }
    /**
     * {@snippet :
     * COORD GetConsoleFontSize(HANDLE hConsoleOutput, DWORD nFont);
     * }
     */
    public static MemorySegment GetConsoleFontSize(SegmentAllocator allocator, MemorySegment hConsoleOutput, int nFont) {
        var mh$ = GetConsoleFontSize$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, hConsoleOutput, nFont);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCurrentConsoleFont$MH() {
        return RuntimeHelper.requireNonNull(constants$558.GetCurrentConsoleFont$MH,"GetCurrentConsoleFont");
    }
    /**
     * {@snippet :
     * BOOL GetCurrentConsoleFont(HANDLE hConsoleOutput, BOOL bMaximumWindow, PCONSOLE_FONT_INFO lpConsoleCurrentFont);
     * }
     */
    public static int GetCurrentConsoleFont(MemorySegment hConsoleOutput, int bMaximumWindow, MemorySegment lpConsoleCurrentFont) {
        var mh$ = GetCurrentConsoleFont$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, bMaximumWindow, lpConsoleCurrentFont);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _CONSOLE_FONT_INFOEX* PCONSOLE_FONT_INFOEX;
     * }
     */
    public static final OfAddress PCONSOLE_FONT_INFOEX = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetCurrentConsoleFontEx$MH() {
        return RuntimeHelper.requireNonNull(constants$558.GetCurrentConsoleFontEx$MH,"GetCurrentConsoleFontEx");
    }
    /**
     * {@snippet :
     * BOOL GetCurrentConsoleFontEx(HANDLE hConsoleOutput, BOOL bMaximumWindow, PCONSOLE_FONT_INFOEX lpConsoleCurrentFontEx);
     * }
     */
    public static int GetCurrentConsoleFontEx(MemorySegment hConsoleOutput, int bMaximumWindow, MemorySegment lpConsoleCurrentFontEx) {
        var mh$ = GetCurrentConsoleFontEx$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, bMaximumWindow, lpConsoleCurrentFontEx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetCurrentConsoleFontEx$MH() {
        return RuntimeHelper.requireNonNull(constants$558.SetCurrentConsoleFontEx$MH,"SetCurrentConsoleFontEx");
    }
    /**
     * {@snippet :
     * BOOL SetCurrentConsoleFontEx(HANDLE hConsoleOutput, BOOL bMaximumWindow, PCONSOLE_FONT_INFOEX lpConsoleCurrentFontEx);
     * }
     */
    public static int SetCurrentConsoleFontEx(MemorySegment hConsoleOutput, int bMaximumWindow, MemorySegment lpConsoleCurrentFontEx) {
        var mh$ = SetCurrentConsoleFontEx$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, bMaximumWindow, lpConsoleCurrentFontEx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _CONSOLE_SELECTION_INFO* PCONSOLE_SELECTION_INFO;
     * }
     */
    public static final OfAddress PCONSOLE_SELECTION_INFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetConsoleSelectionInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$558.GetConsoleSelectionInfo$MH,"GetConsoleSelectionInfo");
    }
    /**
     * {@snippet :
     * BOOL GetConsoleSelectionInfo(PCONSOLE_SELECTION_INFO lpConsoleSelectionInfo);
     * }
     */
    public static int GetConsoleSelectionInfo(MemorySegment lpConsoleSelectionInfo) {
        var mh$ = GetConsoleSelectionInfo$MH();
        try {
            return (int)mh$.invokeExact(lpConsoleSelectionInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _CONSOLE_HISTORY_INFO* PCONSOLE_HISTORY_INFO;
     * }
     */
    public static final OfAddress PCONSOLE_HISTORY_INFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetConsoleHistoryInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$558.GetConsoleHistoryInfo$MH,"GetConsoleHistoryInfo");
    }
    /**
     * {@snippet :
     * BOOL GetConsoleHistoryInfo(PCONSOLE_HISTORY_INFO lpConsoleHistoryInfo);
     * }
     */
    public static int GetConsoleHistoryInfo(MemorySegment lpConsoleHistoryInfo) {
        var mh$ = GetConsoleHistoryInfo$MH();
        try {
            return (int)mh$.invokeExact(lpConsoleHistoryInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetConsoleHistoryInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$558.SetConsoleHistoryInfo$MH,"SetConsoleHistoryInfo");
    }
    /**
     * {@snippet :
     * BOOL SetConsoleHistoryInfo(PCONSOLE_HISTORY_INFO lpConsoleHistoryInfo);
     * }
     */
    public static int SetConsoleHistoryInfo(MemorySegment lpConsoleHistoryInfo) {
        var mh$ = SetConsoleHistoryInfo$MH();
        try {
            return (int)mh$.invokeExact(lpConsoleHistoryInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleDisplayMode$MH() {
        return RuntimeHelper.requireNonNull(constants$559.GetConsoleDisplayMode$MH,"GetConsoleDisplayMode");
    }
    /**
     * {@snippet :
     * BOOL GetConsoleDisplayMode(LPDWORD lpModeFlags);
     * }
     */
    public static int GetConsoleDisplayMode(MemorySegment lpModeFlags) {
        var mh$ = GetConsoleDisplayMode$MH();
        try {
            return (int)mh$.invokeExact(lpModeFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetConsoleDisplayMode$MH() {
        return RuntimeHelper.requireNonNull(constants$559.SetConsoleDisplayMode$MH,"SetConsoleDisplayMode");
    }
    /**
     * {@snippet :
     * BOOL SetConsoleDisplayMode(HANDLE hConsoleOutput, DWORD dwFlags, PCOORD lpNewScreenBufferDimensions);
     * }
     */
    public static int SetConsoleDisplayMode(MemorySegment hConsoleOutput, int dwFlags, MemorySegment lpNewScreenBufferDimensions) {
        var mh$ = SetConsoleDisplayMode$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, dwFlags, lpNewScreenBufferDimensions);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$559.GetConsoleWindow$MH,"GetConsoleWindow");
    }
    /**
     * {@snippet :
     * HWND GetConsoleWindow();
     * }
     */
    public static MemorySegment GetConsoleWindow() {
        var mh$ = GetConsoleWindow$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddConsoleAliasA$MH() {
        return RuntimeHelper.requireNonNull(constants$559.AddConsoleAliasA$MH,"AddConsoleAliasA");
    }
    /**
     * {@snippet :
     * BOOL AddConsoleAliasA(LPSTR Source, LPSTR Target, LPSTR ExeName);
     * }
     */
    public static int AddConsoleAliasA(MemorySegment Source, MemorySegment Target, MemorySegment ExeName) {
        var mh$ = AddConsoleAliasA$MH();
        try {
            return (int)mh$.invokeExact(Source, Target, ExeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddConsoleAliasW$MH() {
        return RuntimeHelper.requireNonNull(constants$559.AddConsoleAliasW$MH,"AddConsoleAliasW");
    }
    /**
     * {@snippet :
     * BOOL AddConsoleAliasW(LPWSTR Source, LPWSTR Target, LPWSTR ExeName);
     * }
     */
    public static int AddConsoleAliasW(MemorySegment Source, MemorySegment Target, MemorySegment ExeName) {
        var mh$ = AddConsoleAliasW$MH();
        try {
            return (int)mh$.invokeExact(Source, Target, ExeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleAliasA$MH() {
        return RuntimeHelper.requireNonNull(constants$559.GetConsoleAliasA$MH,"GetConsoleAliasA");
    }
    /**
     * {@snippet :
     * DWORD GetConsoleAliasA(LPSTR Source, LPSTR TargetBuffer, DWORD TargetBufferLength, LPSTR ExeName);
     * }
     */
    public static int GetConsoleAliasA(MemorySegment Source, MemorySegment TargetBuffer, int TargetBufferLength, MemorySegment ExeName) {
        var mh$ = GetConsoleAliasA$MH();
        try {
            return (int)mh$.invokeExact(Source, TargetBuffer, TargetBufferLength, ExeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleAliasW$MH() {
        return RuntimeHelper.requireNonNull(constants$560.GetConsoleAliasW$MH,"GetConsoleAliasW");
    }
    /**
     * {@snippet :
     * DWORD GetConsoleAliasW(LPWSTR Source, LPWSTR TargetBuffer, DWORD TargetBufferLength, LPWSTR ExeName);
     * }
     */
    public static int GetConsoleAliasW(MemorySegment Source, MemorySegment TargetBuffer, int TargetBufferLength, MemorySegment ExeName) {
        var mh$ = GetConsoleAliasW$MH();
        try {
            return (int)mh$.invokeExact(Source, TargetBuffer, TargetBufferLength, ExeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleAliasesLengthA$MH() {
        return RuntimeHelper.requireNonNull(constants$560.GetConsoleAliasesLengthA$MH,"GetConsoleAliasesLengthA");
    }
    /**
     * {@snippet :
     * DWORD GetConsoleAliasesLengthA(LPSTR ExeName);
     * }
     */
    public static int GetConsoleAliasesLengthA(MemorySegment ExeName) {
        var mh$ = GetConsoleAliasesLengthA$MH();
        try {
            return (int)mh$.invokeExact(ExeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleAliasesLengthW$MH() {
        return RuntimeHelper.requireNonNull(constants$560.GetConsoleAliasesLengthW$MH,"GetConsoleAliasesLengthW");
    }
    /**
     * {@snippet :
     * DWORD GetConsoleAliasesLengthW(LPWSTR ExeName);
     * }
     */
    public static int GetConsoleAliasesLengthW(MemorySegment ExeName) {
        var mh$ = GetConsoleAliasesLengthW$MH();
        try {
            return (int)mh$.invokeExact(ExeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleAliasExesLengthA$MH() {
        return RuntimeHelper.requireNonNull(constants$560.GetConsoleAliasExesLengthA$MH,"GetConsoleAliasExesLengthA");
    }
    /**
     * {@snippet :
     * DWORD GetConsoleAliasExesLengthA();
     * }
     */
    public static int GetConsoleAliasExesLengthA() {
        var mh$ = GetConsoleAliasExesLengthA$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleAliasExesLengthW$MH() {
        return RuntimeHelper.requireNonNull(constants$560.GetConsoleAliasExesLengthW$MH,"GetConsoleAliasExesLengthW");
    }
    /**
     * {@snippet :
     * DWORD GetConsoleAliasExesLengthW();
     * }
     */
    public static int GetConsoleAliasExesLengthW() {
        var mh$ = GetConsoleAliasExesLengthW$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleAliasesA$MH() {
        return RuntimeHelper.requireNonNull(constants$560.GetConsoleAliasesA$MH,"GetConsoleAliasesA");
    }
    /**
     * {@snippet :
     * DWORD GetConsoleAliasesA(LPSTR AliasBuffer, DWORD AliasBufferLength, LPSTR ExeName);
     * }
     */
    public static int GetConsoleAliasesA(MemorySegment AliasBuffer, int AliasBufferLength, MemorySegment ExeName) {
        var mh$ = GetConsoleAliasesA$MH();
        try {
            return (int)mh$.invokeExact(AliasBuffer, AliasBufferLength, ExeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleAliasesW$MH() {
        return RuntimeHelper.requireNonNull(constants$561.GetConsoleAliasesW$MH,"GetConsoleAliasesW");
    }
    /**
     * {@snippet :
     * DWORD GetConsoleAliasesW(LPWSTR AliasBuffer, DWORD AliasBufferLength, LPWSTR ExeName);
     * }
     */
    public static int GetConsoleAliasesW(MemorySegment AliasBuffer, int AliasBufferLength, MemorySegment ExeName) {
        var mh$ = GetConsoleAliasesW$MH();
        try {
            return (int)mh$.invokeExact(AliasBuffer, AliasBufferLength, ExeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleAliasExesA$MH() {
        return RuntimeHelper.requireNonNull(constants$561.GetConsoleAliasExesA$MH,"GetConsoleAliasExesA");
    }
    /**
     * {@snippet :
     * DWORD GetConsoleAliasExesA(LPSTR ExeNameBuffer, DWORD ExeNameBufferLength);
     * }
     */
    public static int GetConsoleAliasExesA(MemorySegment ExeNameBuffer, int ExeNameBufferLength) {
        var mh$ = GetConsoleAliasExesA$MH();
        try {
            return (int)mh$.invokeExact(ExeNameBuffer, ExeNameBufferLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleAliasExesW$MH() {
        return RuntimeHelper.requireNonNull(constants$561.GetConsoleAliasExesW$MH,"GetConsoleAliasExesW");
    }
    /**
     * {@snippet :
     * DWORD GetConsoleAliasExesW(LPWSTR ExeNameBuffer, DWORD ExeNameBufferLength);
     * }
     */
    public static int GetConsoleAliasExesW(MemorySegment ExeNameBuffer, int ExeNameBufferLength) {
        var mh$ = GetConsoleAliasExesW$MH();
        try {
            return (int)mh$.invokeExact(ExeNameBuffer, ExeNameBufferLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExpungeConsoleCommandHistoryA$MH() {
        return RuntimeHelper.requireNonNull(constants$561.ExpungeConsoleCommandHistoryA$MH,"ExpungeConsoleCommandHistoryA");
    }
    /**
     * {@snippet :
     * void ExpungeConsoleCommandHistoryA(LPSTR ExeName);
     * }
     */
    public static void ExpungeConsoleCommandHistoryA(MemorySegment ExeName) {
        var mh$ = ExpungeConsoleCommandHistoryA$MH();
        try {
            mh$.invokeExact(ExeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExpungeConsoleCommandHistoryW$MH() {
        return RuntimeHelper.requireNonNull(constants$561.ExpungeConsoleCommandHistoryW$MH,"ExpungeConsoleCommandHistoryW");
    }
    /**
     * {@snippet :
     * void ExpungeConsoleCommandHistoryW(LPWSTR ExeName);
     * }
     */
    public static void ExpungeConsoleCommandHistoryW(MemorySegment ExeName) {
        var mh$ = ExpungeConsoleCommandHistoryW$MH();
        try {
            mh$.invokeExact(ExeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetConsoleNumberOfCommandsA$MH() {
        return RuntimeHelper.requireNonNull(constants$561.SetConsoleNumberOfCommandsA$MH,"SetConsoleNumberOfCommandsA");
    }
    /**
     * {@snippet :
     * BOOL SetConsoleNumberOfCommandsA(DWORD Number, LPSTR ExeName);
     * }
     */
    public static int SetConsoleNumberOfCommandsA(int Number, MemorySegment ExeName) {
        var mh$ = SetConsoleNumberOfCommandsA$MH();
        try {
            return (int)mh$.invokeExact(Number, ExeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetConsoleNumberOfCommandsW$MH() {
        return RuntimeHelper.requireNonNull(constants$562.SetConsoleNumberOfCommandsW$MH,"SetConsoleNumberOfCommandsW");
    }
    /**
     * {@snippet :
     * BOOL SetConsoleNumberOfCommandsW(DWORD Number, LPWSTR ExeName);
     * }
     */
    public static int SetConsoleNumberOfCommandsW(int Number, MemorySegment ExeName) {
        var mh$ = SetConsoleNumberOfCommandsW$MH();
        try {
            return (int)mh$.invokeExact(Number, ExeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleCommandHistoryLengthA$MH() {
        return RuntimeHelper.requireNonNull(constants$562.GetConsoleCommandHistoryLengthA$MH,"GetConsoleCommandHistoryLengthA");
    }
    /**
     * {@snippet :
     * DWORD GetConsoleCommandHistoryLengthA(LPSTR ExeName);
     * }
     */
    public static int GetConsoleCommandHistoryLengthA(MemorySegment ExeName) {
        var mh$ = GetConsoleCommandHistoryLengthA$MH();
        try {
            return (int)mh$.invokeExact(ExeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleCommandHistoryLengthW$MH() {
        return RuntimeHelper.requireNonNull(constants$562.GetConsoleCommandHistoryLengthW$MH,"GetConsoleCommandHistoryLengthW");
    }
    /**
     * {@snippet :
     * DWORD GetConsoleCommandHistoryLengthW(LPWSTR ExeName);
     * }
     */
    public static int GetConsoleCommandHistoryLengthW(MemorySegment ExeName) {
        var mh$ = GetConsoleCommandHistoryLengthW$MH();
        try {
            return (int)mh$.invokeExact(ExeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleCommandHistoryA$MH() {
        return RuntimeHelper.requireNonNull(constants$562.GetConsoleCommandHistoryA$MH,"GetConsoleCommandHistoryA");
    }
    /**
     * {@snippet :
     * DWORD GetConsoleCommandHistoryA(LPSTR Commands, DWORD CommandBufferLength, LPSTR ExeName);
     * }
     */
    public static int GetConsoleCommandHistoryA(MemorySegment Commands, int CommandBufferLength, MemorySegment ExeName) {
        var mh$ = GetConsoleCommandHistoryA$MH();
        try {
            return (int)mh$.invokeExact(Commands, CommandBufferLength, ExeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleCommandHistoryW$MH() {
        return RuntimeHelper.requireNonNull(constants$562.GetConsoleCommandHistoryW$MH,"GetConsoleCommandHistoryW");
    }
    /**
     * {@snippet :
     * DWORD GetConsoleCommandHistoryW(LPWSTR Commands, DWORD CommandBufferLength, LPWSTR ExeName);
     * }
     */
    public static int GetConsoleCommandHistoryW(MemorySegment Commands, int CommandBufferLength, MemorySegment ExeName) {
        var mh$ = GetConsoleCommandHistoryW$MH();
        try {
            return (int)mh$.invokeExact(Commands, CommandBufferLength, ExeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleProcessList$MH() {
        return RuntimeHelper.requireNonNull(constants$562.GetConsoleProcessList$MH,"GetConsoleProcessList");
    }
    /**
     * {@snippet :
     * DWORD GetConsoleProcessList(LPDWORD lpdwProcessList, DWORD dwProcessCount);
     * }
     */
    public static int GetConsoleProcessList(MemorySegment lpdwProcessList, int dwProcessCount) {
        var mh$ = GetConsoleProcessList$MH();
        try {
            return (int)mh$.invokeExact(lpdwProcessList, dwProcessCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VerFindFileA$MH() {
        return RuntimeHelper.requireNonNull(constants$563.VerFindFileA$MH,"VerFindFileA");
    }
    /**
     * {@snippet :
     * DWORD VerFindFileA(DWORD uFlags, LPCSTR szFileName, LPCSTR szWinDir, LPCSTR szAppDir, LPSTR szCurDir, PUINT puCurDirLen, LPSTR szDestDir, PUINT puDestDirLen);
     * }
     */
    public static int VerFindFileA(int uFlags, MemorySegment szFileName, MemorySegment szWinDir, MemorySegment szAppDir, MemorySegment szCurDir, MemorySegment puCurDirLen, MemorySegment szDestDir, MemorySegment puDestDirLen) {
        var mh$ = VerFindFileA$MH();
        try {
            return (int)mh$.invokeExact(uFlags, szFileName, szWinDir, szAppDir, szCurDir, puCurDirLen, szDestDir, puDestDirLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VerFindFileW$MH() {
        return RuntimeHelper.requireNonNull(constants$563.VerFindFileW$MH,"VerFindFileW");
    }
    /**
     * {@snippet :
     * DWORD VerFindFileW(DWORD uFlags, LPCWSTR szFileName, LPCWSTR szWinDir, LPCWSTR szAppDir, LPWSTR szCurDir, PUINT puCurDirLen, LPWSTR szDestDir, PUINT puDestDirLen);
     * }
     */
    public static int VerFindFileW(int uFlags, MemorySegment szFileName, MemorySegment szWinDir, MemorySegment szAppDir, MemorySegment szCurDir, MemorySegment puCurDirLen, MemorySegment szDestDir, MemorySegment puDestDirLen) {
        var mh$ = VerFindFileW$MH();
        try {
            return (int)mh$.invokeExact(uFlags, szFileName, szWinDir, szAppDir, szCurDir, puCurDirLen, szDestDir, puDestDirLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VerInstallFileA$MH() {
        return RuntimeHelper.requireNonNull(constants$563.VerInstallFileA$MH,"VerInstallFileA");
    }
    /**
     * {@snippet :
     * DWORD VerInstallFileA(DWORD uFlags, LPCSTR szSrcFileName, LPCSTR szDestFileName, LPCSTR szSrcDir, LPCSTR szDestDir, LPCSTR szCurDir, LPSTR szTmpFile, PUINT puTmpFileLen);
     * }
     */
    public static int VerInstallFileA(int uFlags, MemorySegment szSrcFileName, MemorySegment szDestFileName, MemorySegment szSrcDir, MemorySegment szDestDir, MemorySegment szCurDir, MemorySegment szTmpFile, MemorySegment puTmpFileLen) {
        var mh$ = VerInstallFileA$MH();
        try {
            return (int)mh$.invokeExact(uFlags, szSrcFileName, szDestFileName, szSrcDir, szDestDir, szCurDir, szTmpFile, puTmpFileLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VerInstallFileW$MH() {
        return RuntimeHelper.requireNonNull(constants$563.VerInstallFileW$MH,"VerInstallFileW");
    }
    /**
     * {@snippet :
     * DWORD VerInstallFileW(DWORD uFlags, LPCWSTR szSrcFileName, LPCWSTR szDestFileName, LPCWSTR szSrcDir, LPCWSTR szDestDir, LPCWSTR szCurDir, LPWSTR szTmpFile, PUINT puTmpFileLen);
     * }
     */
    public static int VerInstallFileW(int uFlags, MemorySegment szSrcFileName, MemorySegment szDestFileName, MemorySegment szSrcDir, MemorySegment szDestDir, MemorySegment szCurDir, MemorySegment szTmpFile, MemorySegment puTmpFileLen) {
        var mh$ = VerInstallFileW$MH();
        try {
            return (int)mh$.invokeExact(uFlags, szSrcFileName, szDestFileName, szSrcDir, szDestDir, szCurDir, szTmpFile, puTmpFileLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileVersionInfoSizeA$MH() {
        return RuntimeHelper.requireNonNull(constants$563.GetFileVersionInfoSizeA$MH,"GetFileVersionInfoSizeA");
    }
    /**
     * {@snippet :
     * DWORD GetFileVersionInfoSizeA(LPCSTR lptstrFilename, LPDWORD lpdwHandle);
     * }
     */
    public static int GetFileVersionInfoSizeA(MemorySegment lptstrFilename, MemorySegment lpdwHandle) {
        var mh$ = GetFileVersionInfoSizeA$MH();
        try {
            return (int)mh$.invokeExact(lptstrFilename, lpdwHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileVersionInfoSizeW$MH() {
        return RuntimeHelper.requireNonNull(constants$563.GetFileVersionInfoSizeW$MH,"GetFileVersionInfoSizeW");
    }
    /**
     * {@snippet :
     * DWORD GetFileVersionInfoSizeW(LPCWSTR lptstrFilename, LPDWORD lpdwHandle);
     * }
     */
    public static int GetFileVersionInfoSizeW(MemorySegment lptstrFilename, MemorySegment lpdwHandle) {
        var mh$ = GetFileVersionInfoSizeW$MH();
        try {
            return (int)mh$.invokeExact(lptstrFilename, lpdwHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileVersionInfoA$MH() {
        return RuntimeHelper.requireNonNull(constants$564.GetFileVersionInfoA$MH,"GetFileVersionInfoA");
    }
    /**
     * {@snippet :
     * BOOL GetFileVersionInfoA(LPCSTR lptstrFilename, DWORD dwHandle, DWORD dwLen, LPVOID lpData);
     * }
     */
    public static int GetFileVersionInfoA(MemorySegment lptstrFilename, int dwHandle, int dwLen, MemorySegment lpData) {
        var mh$ = GetFileVersionInfoA$MH();
        try {
            return (int)mh$.invokeExact(lptstrFilename, dwHandle, dwLen, lpData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileVersionInfoW$MH() {
        return RuntimeHelper.requireNonNull(constants$564.GetFileVersionInfoW$MH,"GetFileVersionInfoW");
    }
    /**
     * {@snippet :
     * BOOL GetFileVersionInfoW(LPCWSTR lptstrFilename, DWORD dwHandle, DWORD dwLen, LPVOID lpData);
     * }
     */
    public static int GetFileVersionInfoW(MemorySegment lptstrFilename, int dwHandle, int dwLen, MemorySegment lpData) {
        var mh$ = GetFileVersionInfoW$MH();
        try {
            return (int)mh$.invokeExact(lptstrFilename, dwHandle, dwLen, lpData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileVersionInfoSizeExA$MH() {
        return RuntimeHelper.requireNonNull(constants$564.GetFileVersionInfoSizeExA$MH,"GetFileVersionInfoSizeExA");
    }
    /**
     * {@snippet :
     * DWORD GetFileVersionInfoSizeExA(DWORD dwFlags, LPCSTR lpwstrFilename, LPDWORD lpdwHandle);
     * }
     */
    public static int GetFileVersionInfoSizeExA(int dwFlags, MemorySegment lpwstrFilename, MemorySegment lpdwHandle) {
        var mh$ = GetFileVersionInfoSizeExA$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, lpwstrFilename, lpdwHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileVersionInfoSizeExW$MH() {
        return RuntimeHelper.requireNonNull(constants$564.GetFileVersionInfoSizeExW$MH,"GetFileVersionInfoSizeExW");
    }
    /**
     * {@snippet :
     * DWORD GetFileVersionInfoSizeExW(DWORD dwFlags, LPCWSTR lpwstrFilename, LPDWORD lpdwHandle);
     * }
     */
    public static int GetFileVersionInfoSizeExW(int dwFlags, MemorySegment lpwstrFilename, MemorySegment lpdwHandle) {
        var mh$ = GetFileVersionInfoSizeExW$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, lpwstrFilename, lpdwHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}


