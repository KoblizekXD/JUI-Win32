// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _WIM_PROVIDER_ADD_OVERLAY_INPUT {
 *     DWORD WimType;
 *     DWORD WimIndex;
 *     DWORD WimFileNameOffset;
 *     DWORD WimFileNameLength;
 * };
 * }
 */
public class _WIM_PROVIDER_ADD_OVERLAY_INPUT {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("WimType"),
        Constants$root.C_LONG$LAYOUT.withName("WimIndex"),
        Constants$root.C_LONG$LAYOUT.withName("WimFileNameOffset"),
        Constants$root.C_LONG$LAYOUT.withName("WimFileNameLength")
    ).withName("_WIM_PROVIDER_ADD_OVERLAY_INPUT");
    public static MemoryLayout $LAYOUT() {
        return _WIM_PROVIDER_ADD_OVERLAY_INPUT.$struct$LAYOUT;
    }
    static final VarHandle WimType$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("WimType"));
    public static VarHandle WimType$VH() {
        return _WIM_PROVIDER_ADD_OVERLAY_INPUT.WimType$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD WimType;
     * }
     */
    public static int WimType$get(MemorySegment seg) {
        return (int)_WIM_PROVIDER_ADD_OVERLAY_INPUT.WimType$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD WimType;
     * }
     */
    public static void WimType$set(MemorySegment seg, int x) {
        _WIM_PROVIDER_ADD_OVERLAY_INPUT.WimType$VH.set(seg, x);
    }
    public static int WimType$get(MemorySegment seg, long index) {
        return (int)_WIM_PROVIDER_ADD_OVERLAY_INPUT.WimType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void WimType$set(MemorySegment seg, long index, int x) {
        _WIM_PROVIDER_ADD_OVERLAY_INPUT.WimType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle WimIndex$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("WimIndex"));
    public static VarHandle WimIndex$VH() {
        return _WIM_PROVIDER_ADD_OVERLAY_INPUT.WimIndex$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD WimIndex;
     * }
     */
    public static int WimIndex$get(MemorySegment seg) {
        return (int)_WIM_PROVIDER_ADD_OVERLAY_INPUT.WimIndex$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD WimIndex;
     * }
     */
    public static void WimIndex$set(MemorySegment seg, int x) {
        _WIM_PROVIDER_ADD_OVERLAY_INPUT.WimIndex$VH.set(seg, x);
    }
    public static int WimIndex$get(MemorySegment seg, long index) {
        return (int)_WIM_PROVIDER_ADD_OVERLAY_INPUT.WimIndex$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void WimIndex$set(MemorySegment seg, long index, int x) {
        _WIM_PROVIDER_ADD_OVERLAY_INPUT.WimIndex$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle WimFileNameOffset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("WimFileNameOffset"));
    public static VarHandle WimFileNameOffset$VH() {
        return _WIM_PROVIDER_ADD_OVERLAY_INPUT.WimFileNameOffset$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD WimFileNameOffset;
     * }
     */
    public static int WimFileNameOffset$get(MemorySegment seg) {
        return (int)_WIM_PROVIDER_ADD_OVERLAY_INPUT.WimFileNameOffset$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD WimFileNameOffset;
     * }
     */
    public static void WimFileNameOffset$set(MemorySegment seg, int x) {
        _WIM_PROVIDER_ADD_OVERLAY_INPUT.WimFileNameOffset$VH.set(seg, x);
    }
    public static int WimFileNameOffset$get(MemorySegment seg, long index) {
        return (int)_WIM_PROVIDER_ADD_OVERLAY_INPUT.WimFileNameOffset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void WimFileNameOffset$set(MemorySegment seg, long index, int x) {
        _WIM_PROVIDER_ADD_OVERLAY_INPUT.WimFileNameOffset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle WimFileNameLength$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("WimFileNameLength"));
    public static VarHandle WimFileNameLength$VH() {
        return _WIM_PROVIDER_ADD_OVERLAY_INPUT.WimFileNameLength$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD WimFileNameLength;
     * }
     */
    public static int WimFileNameLength$get(MemorySegment seg) {
        return (int)_WIM_PROVIDER_ADD_OVERLAY_INPUT.WimFileNameLength$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD WimFileNameLength;
     * }
     */
    public static void WimFileNameLength$set(MemorySegment seg, int x) {
        _WIM_PROVIDER_ADD_OVERLAY_INPUT.WimFileNameLength$VH.set(seg, x);
    }
    public static int WimFileNameLength$get(MemorySegment seg, long index) {
        return (int)_WIM_PROVIDER_ADD_OVERLAY_INPUT.WimFileNameLength$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void WimFileNameLength$set(MemorySegment seg, long index, int x) {
        _WIM_PROVIDER_ADD_OVERLAY_INPUT.WimFileNameLength$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


