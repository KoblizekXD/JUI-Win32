// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _QUERY_BAD_RANGES_INPUT {
 *     DWORD Flags;
 *     DWORD NumRanges;
 *     QUERY_BAD_RANGES_INPUT_RANGE Ranges[1];
 * };
 * }
 */
public class _QUERY_BAD_RANGES_INPUT {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("Flags"),
        Constants$root.C_LONG$LAYOUT.withName("NumRanges"),
        MemoryLayout.sequenceLayout(1, MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("StartOffset"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("LengthInBytes")
        ).withName("_QUERY_BAD_RANGES_INPUT_RANGE")).withName("Ranges")
    ).withName("_QUERY_BAD_RANGES_INPUT");
    public static MemoryLayout $LAYOUT() {
        return _QUERY_BAD_RANGES_INPUT.$struct$LAYOUT;
    }
    static final VarHandle Flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Flags"));
    public static VarHandle Flags$VH() {
        return _QUERY_BAD_RANGES_INPUT.Flags$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Flags;
     * }
     */
    public static int Flags$get(MemorySegment seg) {
        return (int)_QUERY_BAD_RANGES_INPUT.Flags$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Flags;
     * }
     */
    public static void Flags$set(MemorySegment seg, int x) {
        _QUERY_BAD_RANGES_INPUT.Flags$VH.set(seg, x);
    }
    public static int Flags$get(MemorySegment seg, long index) {
        return (int)_QUERY_BAD_RANGES_INPUT.Flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Flags$set(MemorySegment seg, long index, int x) {
        _QUERY_BAD_RANGES_INPUT.Flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle NumRanges$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("NumRanges"));
    public static VarHandle NumRanges$VH() {
        return _QUERY_BAD_RANGES_INPUT.NumRanges$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD NumRanges;
     * }
     */
    public static int NumRanges$get(MemorySegment seg) {
        return (int)_QUERY_BAD_RANGES_INPUT.NumRanges$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD NumRanges;
     * }
     */
    public static void NumRanges$set(MemorySegment seg, int x) {
        _QUERY_BAD_RANGES_INPUT.NumRanges$VH.set(seg, x);
    }
    public static int NumRanges$get(MemorySegment seg, long index) {
        return (int)_QUERY_BAD_RANGES_INPUT.NumRanges$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void NumRanges$set(MemorySegment seg, long index, int x) {
        _QUERY_BAD_RANGES_INPUT.NumRanges$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Ranges$slice(MemorySegment seg) {
        return seg.asSlice(8, 16);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


