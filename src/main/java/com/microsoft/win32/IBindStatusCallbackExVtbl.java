// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IBindStatusCallbackExVtbl {
 *     HRESULT (*QueryInterface)(IBindStatusCallbackEx*,const IID*,void**);
 *     ULONG (*AddRef)(IBindStatusCallbackEx*);
 *     ULONG (*Release)(IBindStatusCallbackEx*);
 *     HRESULT (*OnStartBinding)(IBindStatusCallbackEx*,DWORD,IBinding*);
 *     HRESULT (*GetPriority)(IBindStatusCallbackEx*,LONG*);
 *     HRESULT (*OnLowResource)(IBindStatusCallbackEx*,DWORD);
 *     HRESULT (*OnProgress)(IBindStatusCallbackEx*,ULONG,ULONG,ULONG,LPCWSTR);
 *     HRESULT (*OnStopBinding)(IBindStatusCallbackEx*,HRESULT,LPCWSTR);
 *     HRESULT (*GetBindInfo)(IBindStatusCallbackEx*,DWORD*,BINDINFO*);
 *     HRESULT (*OnDataAvailable)(IBindStatusCallbackEx*,DWORD,DWORD,FORMATETC*,STGMEDIUM*);
 *     HRESULT (*OnObjectAvailable)(IBindStatusCallbackEx*,const IID*,IUnknown*);
 *     HRESULT (*GetBindInfoEx)(IBindStatusCallbackEx*,DWORD*,BINDINFO*,DWORD*,DWORD*);
 * };
 * }
 */
public class IBindStatusCallbackExVtbl {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("OnStartBinding"),
        Constants$root.C_POINTER$LAYOUT.withName("GetPriority"),
        Constants$root.C_POINTER$LAYOUT.withName("OnLowResource"),
        Constants$root.C_POINTER$LAYOUT.withName("OnProgress"),
        Constants$root.C_POINTER$LAYOUT.withName("OnStopBinding"),
        Constants$root.C_POINTER$LAYOUT.withName("GetBindInfo"),
        Constants$root.C_POINTER$LAYOUT.withName("OnDataAvailable"),
        Constants$root.C_POINTER$LAYOUT.withName("OnObjectAvailable"),
        Constants$root.C_POINTER$LAYOUT.withName("GetBindInfoEx")
    ).withName("IBindStatusCallbackExVtbl");
    public static MemoryLayout $LAYOUT() {
        return IBindStatusCallbackExVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor QueryInterface_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_UP$MH = RuntimeHelper.upcallHandle(QueryInterface.class, "apply", IBindStatusCallbackExVtbl.QueryInterface_UP$FUNC);
    static final FunctionDescriptor QueryInterface_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_DOWN$MH = RuntimeHelper.downcallHandle(
        IBindStatusCallbackExVtbl.QueryInterface_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(IBindStatusCallbackEx*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IBindStatusCallbackExVtbl.QueryInterface_UP$MH, fi, IBindStatusCallbackExVtbl.QueryInterface$FUNC, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IBindStatusCallbackExVtbl.QueryInterface_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return IBindStatusCallbackExVtbl.QueryInterface$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IBindStatusCallbackEx*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IBindStatusCallbackExVtbl.QueryInterface$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IBindStatusCallbackEx*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        IBindStatusCallbackExVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IBindStatusCallbackExVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        IBindStatusCallbackExVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, SegmentScope scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor AddRef_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_UP$MH = RuntimeHelper.upcallHandle(AddRef.class, "apply", IBindStatusCallbackExVtbl.AddRef_UP$FUNC);
    static final FunctionDescriptor AddRef_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_DOWN$MH = RuntimeHelper.downcallHandle(
        IBindStatusCallbackExVtbl.AddRef_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*AddRef)(IBindStatusCallbackEx*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IBindStatusCallbackExVtbl.AddRef_UP$MH, fi, IBindStatusCallbackExVtbl.AddRef$FUNC, scope);
        }
        static AddRef ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IBindStatusCallbackExVtbl.AddRef_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return IBindStatusCallbackExVtbl.AddRef$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(IBindStatusCallbackEx*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IBindStatusCallbackExVtbl.AddRef$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(IBindStatusCallbackEx*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        IBindStatusCallbackExVtbl.AddRef$VH.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IBindStatusCallbackExVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        IBindStatusCallbackExVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, SegmentScope scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Release_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_UP$MH = RuntimeHelper.upcallHandle(Release.class, "apply", IBindStatusCallbackExVtbl.Release_UP$FUNC);
    static final FunctionDescriptor Release_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_DOWN$MH = RuntimeHelper.downcallHandle(
        IBindStatusCallbackExVtbl.Release_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*Release)(IBindStatusCallbackEx*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IBindStatusCallbackExVtbl.Release_UP$MH, fi, IBindStatusCallbackExVtbl.Release$FUNC, scope);
        }
        static Release ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IBindStatusCallbackExVtbl.Release_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return IBindStatusCallbackExVtbl.Release$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(IBindStatusCallbackEx*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IBindStatusCallbackExVtbl.Release$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(IBindStatusCallbackEx*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        IBindStatusCallbackExVtbl.Release$VH.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IBindStatusCallbackExVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        IBindStatusCallbackExVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, SegmentScope scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    static final FunctionDescriptor OnStartBinding$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor OnStartBinding_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle OnStartBinding_UP$MH = RuntimeHelper.upcallHandle(OnStartBinding.class, "apply", IBindStatusCallbackExVtbl.OnStartBinding_UP$FUNC);
    static final FunctionDescriptor OnStartBinding_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle OnStartBinding_DOWN$MH = RuntimeHelper.downcallHandle(
        IBindStatusCallbackExVtbl.OnStartBinding_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*OnStartBinding)(IBindStatusCallbackEx*,DWORD,IBinding*);
     * }
     */
    public interface OnStartBinding {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(OnStartBinding fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IBindStatusCallbackExVtbl.OnStartBinding_UP$MH, fi, IBindStatusCallbackExVtbl.OnStartBinding$FUNC, scope);
        }
        static OnStartBinding ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IBindStatusCallbackExVtbl.OnStartBinding_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle OnStartBinding$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("OnStartBinding"));
    public static VarHandle OnStartBinding$VH() {
        return IBindStatusCallbackExVtbl.OnStartBinding$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*OnStartBinding)(IBindStatusCallbackEx*,DWORD,IBinding*);
     * }
     */
    public static MemorySegment OnStartBinding$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IBindStatusCallbackExVtbl.OnStartBinding$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*OnStartBinding)(IBindStatusCallbackEx*,DWORD,IBinding*);
     * }
     */
    public static void OnStartBinding$set(MemorySegment seg, MemorySegment x) {
        IBindStatusCallbackExVtbl.OnStartBinding$VH.set(seg, x);
    }
    public static MemorySegment OnStartBinding$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IBindStatusCallbackExVtbl.OnStartBinding$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void OnStartBinding$set(MemorySegment seg, long index, MemorySegment x) {
        IBindStatusCallbackExVtbl.OnStartBinding$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static OnStartBinding OnStartBinding(MemorySegment segment, SegmentScope scope) {
        return OnStartBinding.ofAddress(OnStartBinding$get(segment), scope);
    }
    static final FunctionDescriptor GetPriority$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetPriority_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetPriority_UP$MH = RuntimeHelper.upcallHandle(GetPriority.class, "apply", IBindStatusCallbackExVtbl.GetPriority_UP$FUNC);
    static final FunctionDescriptor GetPriority_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetPriority_DOWN$MH = RuntimeHelper.downcallHandle(
        IBindStatusCallbackExVtbl.GetPriority_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetPriority)(IBindStatusCallbackEx*,LONG*);
     * }
     */
    public interface GetPriority {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetPriority fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IBindStatusCallbackExVtbl.GetPriority_UP$MH, fi, IBindStatusCallbackExVtbl.GetPriority$FUNC, scope);
        }
        static GetPriority ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IBindStatusCallbackExVtbl.GetPriority_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetPriority$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetPriority"));
    public static VarHandle GetPriority$VH() {
        return IBindStatusCallbackExVtbl.GetPriority$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetPriority)(IBindStatusCallbackEx*,LONG*);
     * }
     */
    public static MemorySegment GetPriority$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IBindStatusCallbackExVtbl.GetPriority$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetPriority)(IBindStatusCallbackEx*,LONG*);
     * }
     */
    public static void GetPriority$set(MemorySegment seg, MemorySegment x) {
        IBindStatusCallbackExVtbl.GetPriority$VH.set(seg, x);
    }
    public static MemorySegment GetPriority$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IBindStatusCallbackExVtbl.GetPriority$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetPriority$set(MemorySegment seg, long index, MemorySegment x) {
        IBindStatusCallbackExVtbl.GetPriority$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetPriority GetPriority(MemorySegment segment, SegmentScope scope) {
        return GetPriority.ofAddress(GetPriority$get(segment), scope);
    }
    static final FunctionDescriptor OnLowResource$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor OnLowResource_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle OnLowResource_UP$MH = RuntimeHelper.upcallHandle(OnLowResource.class, "apply", IBindStatusCallbackExVtbl.OnLowResource_UP$FUNC);
    static final FunctionDescriptor OnLowResource_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle OnLowResource_DOWN$MH = RuntimeHelper.downcallHandle(
        IBindStatusCallbackExVtbl.OnLowResource_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*OnLowResource)(IBindStatusCallbackEx*,DWORD);
     * }
     */
    public interface OnLowResource {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(OnLowResource fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IBindStatusCallbackExVtbl.OnLowResource_UP$MH, fi, IBindStatusCallbackExVtbl.OnLowResource$FUNC, scope);
        }
        static OnLowResource ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)IBindStatusCallbackExVtbl.OnLowResource_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle OnLowResource$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("OnLowResource"));
    public static VarHandle OnLowResource$VH() {
        return IBindStatusCallbackExVtbl.OnLowResource$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*OnLowResource)(IBindStatusCallbackEx*,DWORD);
     * }
     */
    public static MemorySegment OnLowResource$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IBindStatusCallbackExVtbl.OnLowResource$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*OnLowResource)(IBindStatusCallbackEx*,DWORD);
     * }
     */
    public static void OnLowResource$set(MemorySegment seg, MemorySegment x) {
        IBindStatusCallbackExVtbl.OnLowResource$VH.set(seg, x);
    }
    public static MemorySegment OnLowResource$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IBindStatusCallbackExVtbl.OnLowResource$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void OnLowResource$set(MemorySegment seg, long index, MemorySegment x) {
        IBindStatusCallbackExVtbl.OnLowResource$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static OnLowResource OnLowResource(MemorySegment segment, SegmentScope scope) {
        return OnLowResource.ofAddress(OnLowResource$get(segment), scope);
    }
    static final FunctionDescriptor OnProgress$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor OnProgress_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle OnProgress_UP$MH = RuntimeHelper.upcallHandle(OnProgress.class, "apply", IBindStatusCallbackExVtbl.OnProgress_UP$FUNC);
    static final FunctionDescriptor OnProgress_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle OnProgress_DOWN$MH = RuntimeHelper.downcallHandle(
        IBindStatusCallbackExVtbl.OnProgress_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*OnProgress)(IBindStatusCallbackEx*,ULONG,ULONG,ULONG,LPCWSTR);
     * }
     */
    public interface OnProgress {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, int _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(OnProgress fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IBindStatusCallbackExVtbl.OnProgress_UP$MH, fi, IBindStatusCallbackExVtbl.OnProgress$FUNC, scope);
        }
        static OnProgress ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, int __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (int)IBindStatusCallbackExVtbl.OnProgress_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle OnProgress$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("OnProgress"));
    public static VarHandle OnProgress$VH() {
        return IBindStatusCallbackExVtbl.OnProgress$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*OnProgress)(IBindStatusCallbackEx*,ULONG,ULONG,ULONG,LPCWSTR);
     * }
     */
    public static MemorySegment OnProgress$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IBindStatusCallbackExVtbl.OnProgress$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*OnProgress)(IBindStatusCallbackEx*,ULONG,ULONG,ULONG,LPCWSTR);
     * }
     */
    public static void OnProgress$set(MemorySegment seg, MemorySegment x) {
        IBindStatusCallbackExVtbl.OnProgress$VH.set(seg, x);
    }
    public static MemorySegment OnProgress$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IBindStatusCallbackExVtbl.OnProgress$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void OnProgress$set(MemorySegment seg, long index, MemorySegment x) {
        IBindStatusCallbackExVtbl.OnProgress$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static OnProgress OnProgress(MemorySegment segment, SegmentScope scope) {
        return OnProgress.ofAddress(OnProgress$get(segment), scope);
    }
    static final FunctionDescriptor OnStopBinding$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor OnStopBinding_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle OnStopBinding_UP$MH = RuntimeHelper.upcallHandle(OnStopBinding.class, "apply", IBindStatusCallbackExVtbl.OnStopBinding_UP$FUNC);
    static final FunctionDescriptor OnStopBinding_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle OnStopBinding_DOWN$MH = RuntimeHelper.downcallHandle(
        IBindStatusCallbackExVtbl.OnStopBinding_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*OnStopBinding)(IBindStatusCallbackEx*,HRESULT,LPCWSTR);
     * }
     */
    public interface OnStopBinding {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(OnStopBinding fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IBindStatusCallbackExVtbl.OnStopBinding_UP$MH, fi, IBindStatusCallbackExVtbl.OnStopBinding$FUNC, scope);
        }
        static OnStopBinding ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IBindStatusCallbackExVtbl.OnStopBinding_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle OnStopBinding$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("OnStopBinding"));
    public static VarHandle OnStopBinding$VH() {
        return IBindStatusCallbackExVtbl.OnStopBinding$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*OnStopBinding)(IBindStatusCallbackEx*,HRESULT,LPCWSTR);
     * }
     */
    public static MemorySegment OnStopBinding$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IBindStatusCallbackExVtbl.OnStopBinding$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*OnStopBinding)(IBindStatusCallbackEx*,HRESULT,LPCWSTR);
     * }
     */
    public static void OnStopBinding$set(MemorySegment seg, MemorySegment x) {
        IBindStatusCallbackExVtbl.OnStopBinding$VH.set(seg, x);
    }
    public static MemorySegment OnStopBinding$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IBindStatusCallbackExVtbl.OnStopBinding$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void OnStopBinding$set(MemorySegment seg, long index, MemorySegment x) {
        IBindStatusCallbackExVtbl.OnStopBinding$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static OnStopBinding OnStopBinding(MemorySegment segment, SegmentScope scope) {
        return OnStopBinding.ofAddress(OnStopBinding$get(segment), scope);
    }
    static final FunctionDescriptor GetBindInfo$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetBindInfo_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetBindInfo_UP$MH = RuntimeHelper.upcallHandle(GetBindInfo.class, "apply", IBindStatusCallbackExVtbl.GetBindInfo_UP$FUNC);
    static final FunctionDescriptor GetBindInfo_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetBindInfo_DOWN$MH = RuntimeHelper.downcallHandle(
        IBindStatusCallbackExVtbl.GetBindInfo_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetBindInfo)(IBindStatusCallbackEx*,DWORD*,BINDINFO*);
     * }
     */
    public interface GetBindInfo {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetBindInfo fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IBindStatusCallbackExVtbl.GetBindInfo_UP$MH, fi, IBindStatusCallbackExVtbl.GetBindInfo$FUNC, scope);
        }
        static GetBindInfo ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IBindStatusCallbackExVtbl.GetBindInfo_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetBindInfo$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetBindInfo"));
    public static VarHandle GetBindInfo$VH() {
        return IBindStatusCallbackExVtbl.GetBindInfo$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetBindInfo)(IBindStatusCallbackEx*,DWORD*,BINDINFO*);
     * }
     */
    public static MemorySegment GetBindInfo$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IBindStatusCallbackExVtbl.GetBindInfo$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetBindInfo)(IBindStatusCallbackEx*,DWORD*,BINDINFO*);
     * }
     */
    public static void GetBindInfo$set(MemorySegment seg, MemorySegment x) {
        IBindStatusCallbackExVtbl.GetBindInfo$VH.set(seg, x);
    }
    public static MemorySegment GetBindInfo$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IBindStatusCallbackExVtbl.GetBindInfo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetBindInfo$set(MemorySegment seg, long index, MemorySegment x) {
        IBindStatusCallbackExVtbl.GetBindInfo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetBindInfo GetBindInfo(MemorySegment segment, SegmentScope scope) {
        return GetBindInfo.ofAddress(GetBindInfo$get(segment), scope);
    }
    static final FunctionDescriptor OnDataAvailable$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor OnDataAvailable_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle OnDataAvailable_UP$MH = RuntimeHelper.upcallHandle(OnDataAvailable.class, "apply", IBindStatusCallbackExVtbl.OnDataAvailable_UP$FUNC);
    static final FunctionDescriptor OnDataAvailable_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle OnDataAvailable_DOWN$MH = RuntimeHelper.downcallHandle(
        IBindStatusCallbackExVtbl.OnDataAvailable_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*OnDataAvailable)(IBindStatusCallbackEx*,DWORD,DWORD,FORMATETC*,STGMEDIUM*);
     * }
     */
    public interface OnDataAvailable {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(OnDataAvailable fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IBindStatusCallbackExVtbl.OnDataAvailable_UP$MH, fi, IBindStatusCallbackExVtbl.OnDataAvailable$FUNC, scope);
        }
        static OnDataAvailable ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (int)IBindStatusCallbackExVtbl.OnDataAvailable_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle OnDataAvailable$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("OnDataAvailable"));
    public static VarHandle OnDataAvailable$VH() {
        return IBindStatusCallbackExVtbl.OnDataAvailable$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*OnDataAvailable)(IBindStatusCallbackEx*,DWORD,DWORD,FORMATETC*,STGMEDIUM*);
     * }
     */
    public static MemorySegment OnDataAvailable$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IBindStatusCallbackExVtbl.OnDataAvailable$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*OnDataAvailable)(IBindStatusCallbackEx*,DWORD,DWORD,FORMATETC*,STGMEDIUM*);
     * }
     */
    public static void OnDataAvailable$set(MemorySegment seg, MemorySegment x) {
        IBindStatusCallbackExVtbl.OnDataAvailable$VH.set(seg, x);
    }
    public static MemorySegment OnDataAvailable$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IBindStatusCallbackExVtbl.OnDataAvailable$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void OnDataAvailable$set(MemorySegment seg, long index, MemorySegment x) {
        IBindStatusCallbackExVtbl.OnDataAvailable$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static OnDataAvailable OnDataAvailable(MemorySegment segment, SegmentScope scope) {
        return OnDataAvailable.ofAddress(OnDataAvailable$get(segment), scope);
    }
    static final FunctionDescriptor OnObjectAvailable$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor OnObjectAvailable_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle OnObjectAvailable_UP$MH = RuntimeHelper.upcallHandle(OnObjectAvailable.class, "apply", IBindStatusCallbackExVtbl.OnObjectAvailable_UP$FUNC);
    static final FunctionDescriptor OnObjectAvailable_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle OnObjectAvailable_DOWN$MH = RuntimeHelper.downcallHandle(
        IBindStatusCallbackExVtbl.OnObjectAvailable_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*OnObjectAvailable)(IBindStatusCallbackEx*,const IID*,IUnknown*);
     * }
     */
    public interface OnObjectAvailable {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(OnObjectAvailable fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IBindStatusCallbackExVtbl.OnObjectAvailable_UP$MH, fi, IBindStatusCallbackExVtbl.OnObjectAvailable$FUNC, scope);
        }
        static OnObjectAvailable ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IBindStatusCallbackExVtbl.OnObjectAvailable_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle OnObjectAvailable$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("OnObjectAvailable"));
    public static VarHandle OnObjectAvailable$VH() {
        return IBindStatusCallbackExVtbl.OnObjectAvailable$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*OnObjectAvailable)(IBindStatusCallbackEx*,const IID*,IUnknown*);
     * }
     */
    public static MemorySegment OnObjectAvailable$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IBindStatusCallbackExVtbl.OnObjectAvailable$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*OnObjectAvailable)(IBindStatusCallbackEx*,const IID*,IUnknown*);
     * }
     */
    public static void OnObjectAvailable$set(MemorySegment seg, MemorySegment x) {
        IBindStatusCallbackExVtbl.OnObjectAvailable$VH.set(seg, x);
    }
    public static MemorySegment OnObjectAvailable$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IBindStatusCallbackExVtbl.OnObjectAvailable$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void OnObjectAvailable$set(MemorySegment seg, long index, MemorySegment x) {
        IBindStatusCallbackExVtbl.OnObjectAvailable$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static OnObjectAvailable OnObjectAvailable(MemorySegment segment, SegmentScope scope) {
        return OnObjectAvailable.ofAddress(OnObjectAvailable$get(segment), scope);
    }
    static final FunctionDescriptor GetBindInfoEx$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetBindInfoEx_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetBindInfoEx_UP$MH = RuntimeHelper.upcallHandle(GetBindInfoEx.class, "apply", IBindStatusCallbackExVtbl.GetBindInfoEx_UP$FUNC);
    static final FunctionDescriptor GetBindInfoEx_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetBindInfoEx_DOWN$MH = RuntimeHelper.downcallHandle(
        IBindStatusCallbackExVtbl.GetBindInfoEx_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetBindInfoEx)(IBindStatusCallbackEx*,DWORD*,BINDINFO*,DWORD*,DWORD*);
     * }
     */
    public interface GetBindInfoEx {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(GetBindInfoEx fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IBindStatusCallbackExVtbl.GetBindInfoEx_UP$MH, fi, IBindStatusCallbackExVtbl.GetBindInfoEx$FUNC, scope);
        }
        static GetBindInfoEx ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (int)IBindStatusCallbackExVtbl.GetBindInfoEx_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetBindInfoEx$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetBindInfoEx"));
    public static VarHandle GetBindInfoEx$VH() {
        return IBindStatusCallbackExVtbl.GetBindInfoEx$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetBindInfoEx)(IBindStatusCallbackEx*,DWORD*,BINDINFO*,DWORD*,DWORD*);
     * }
     */
    public static MemorySegment GetBindInfoEx$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IBindStatusCallbackExVtbl.GetBindInfoEx$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetBindInfoEx)(IBindStatusCallbackEx*,DWORD*,BINDINFO*,DWORD*,DWORD*);
     * }
     */
    public static void GetBindInfoEx$set(MemorySegment seg, MemorySegment x) {
        IBindStatusCallbackExVtbl.GetBindInfoEx$VH.set(seg, x);
    }
    public static MemorySegment GetBindInfoEx$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IBindStatusCallbackExVtbl.GetBindInfoEx$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetBindInfoEx$set(MemorySegment seg, long index, MemorySegment x) {
        IBindStatusCallbackExVtbl.GetBindInfoEx$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetBindInfoEx GetBindInfoEx(MemorySegment segment, SegmentScope scope) {
        return GetBindInfoEx.ofAddress(GetBindInfoEx$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


