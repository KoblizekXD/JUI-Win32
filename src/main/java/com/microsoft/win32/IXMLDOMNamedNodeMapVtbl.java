// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IXMLDOMNamedNodeMapVtbl {
 *     HRESULT (*QueryInterface)(IXMLDOMNamedNodeMap*,const IID*,void**);
 *     ULONG (*AddRef)(IXMLDOMNamedNodeMap*);
 *     ULONG (*Release)(IXMLDOMNamedNodeMap*);
 *     HRESULT (*GetTypeInfoCount)(IXMLDOMNamedNodeMap*,UINT*);
 *     HRESULT (*GetTypeInfo)(IXMLDOMNamedNodeMap*,UINT,LCID,ITypeInfo**);
 *     HRESULT (*GetIDsOfNames)(IXMLDOMNamedNodeMap*,const IID*,LPOLESTR*,UINT,LCID,DISPID*);
 *     HRESULT (*Invoke)(IXMLDOMNamedNodeMap*,DISPID,const IID*,LCID,WORD,DISPPARAMS*,VARIANT*,EXCEPINFO*,UINT*);
 *     HRESULT (*getNamedItem)(IXMLDOMNamedNodeMap*,BSTR,IXMLDOMNode**);
 *     HRESULT (*setNamedItem)(IXMLDOMNamedNodeMap*,IXMLDOMNode*,IXMLDOMNode**);
 *     HRESULT (*removeNamedItem)(IXMLDOMNamedNodeMap*,BSTR,IXMLDOMNode**);
 *     HRESULT (*get_item)(IXMLDOMNamedNodeMap*,long,IXMLDOMNode**);
 *     HRESULT (*get_length)(IXMLDOMNamedNodeMap*,long*);
 *     HRESULT (*getQualifiedItem)(IXMLDOMNamedNodeMap*,BSTR,BSTR,IXMLDOMNode**);
 *     HRESULT (*removeQualifiedItem)(IXMLDOMNamedNodeMap*,BSTR,BSTR,IXMLDOMNode**);
 *     HRESULT (*nextNode)(IXMLDOMNamedNodeMap*,IXMLDOMNode**);
 *     HRESULT (*reset)(IXMLDOMNamedNodeMap*);
 *     HRESULT (*get__newEnum)(IXMLDOMNamedNodeMap*,IUnknown**);
 * };
 * }
 */
public class IXMLDOMNamedNodeMapVtbl {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("GetTypeInfoCount"),
        Constants$root.C_POINTER$LAYOUT.withName("GetTypeInfo"),
        Constants$root.C_POINTER$LAYOUT.withName("GetIDsOfNames"),
        Constants$root.C_POINTER$LAYOUT.withName("Invoke"),
        Constants$root.C_POINTER$LAYOUT.withName("getNamedItem"),
        Constants$root.C_POINTER$LAYOUT.withName("setNamedItem"),
        Constants$root.C_POINTER$LAYOUT.withName("removeNamedItem"),
        Constants$root.C_POINTER$LAYOUT.withName("get_item"),
        Constants$root.C_POINTER$LAYOUT.withName("get_length"),
        Constants$root.C_POINTER$LAYOUT.withName("getQualifiedItem"),
        Constants$root.C_POINTER$LAYOUT.withName("removeQualifiedItem"),
        Constants$root.C_POINTER$LAYOUT.withName("nextNode"),
        Constants$root.C_POINTER$LAYOUT.withName("reset"),
        Constants$root.C_POINTER$LAYOUT.withName("get__newEnum")
    ).withName("IXMLDOMNamedNodeMapVtbl");
    public static MemoryLayout $LAYOUT() {
        return IXMLDOMNamedNodeMapVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor QueryInterface_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_UP$MH = RuntimeHelper.upcallHandle(QueryInterface.class, "apply", IXMLDOMNamedNodeMapVtbl.QueryInterface_UP$FUNC);
    static final FunctionDescriptor QueryInterface_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDOMNamedNodeMapVtbl.QueryInterface_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(IXMLDOMNamedNodeMap*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDOMNamedNodeMapVtbl.QueryInterface_UP$MH, fi, IXMLDOMNamedNodeMapVtbl.QueryInterface$FUNC, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IXMLDOMNamedNodeMapVtbl.QueryInterface_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return IXMLDOMNamedNodeMapVtbl.QueryInterface$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IXMLDOMNamedNodeMap*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDOMNamedNodeMapVtbl.QueryInterface$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IXMLDOMNamedNodeMap*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        IXMLDOMNamedNodeMapVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDOMNamedNodeMapVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDOMNamedNodeMapVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, SegmentScope scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor AddRef_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_UP$MH = RuntimeHelper.upcallHandle(AddRef.class, "apply", IXMLDOMNamedNodeMapVtbl.AddRef_UP$FUNC);
    static final FunctionDescriptor AddRef_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDOMNamedNodeMapVtbl.AddRef_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*AddRef)(IXMLDOMNamedNodeMap*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDOMNamedNodeMapVtbl.AddRef_UP$MH, fi, IXMLDOMNamedNodeMapVtbl.AddRef$FUNC, scope);
        }
        static AddRef ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IXMLDOMNamedNodeMapVtbl.AddRef_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return IXMLDOMNamedNodeMapVtbl.AddRef$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(IXMLDOMNamedNodeMap*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDOMNamedNodeMapVtbl.AddRef$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(IXMLDOMNamedNodeMap*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        IXMLDOMNamedNodeMapVtbl.AddRef$VH.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDOMNamedNodeMapVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDOMNamedNodeMapVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, SegmentScope scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Release_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_UP$MH = RuntimeHelper.upcallHandle(Release.class, "apply", IXMLDOMNamedNodeMapVtbl.Release_UP$FUNC);
    static final FunctionDescriptor Release_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDOMNamedNodeMapVtbl.Release_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*Release)(IXMLDOMNamedNodeMap*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDOMNamedNodeMapVtbl.Release_UP$MH, fi, IXMLDOMNamedNodeMapVtbl.Release$FUNC, scope);
        }
        static Release ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IXMLDOMNamedNodeMapVtbl.Release_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return IXMLDOMNamedNodeMapVtbl.Release$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(IXMLDOMNamedNodeMap*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDOMNamedNodeMapVtbl.Release$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(IXMLDOMNamedNodeMap*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        IXMLDOMNamedNodeMapVtbl.Release$VH.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDOMNamedNodeMapVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDOMNamedNodeMapVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, SegmentScope scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    static final FunctionDescriptor GetTypeInfoCount$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetTypeInfoCount_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetTypeInfoCount_UP$MH = RuntimeHelper.upcallHandle(GetTypeInfoCount.class, "apply", IXMLDOMNamedNodeMapVtbl.GetTypeInfoCount_UP$FUNC);
    static final FunctionDescriptor GetTypeInfoCount_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetTypeInfoCount_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDOMNamedNodeMapVtbl.GetTypeInfoCount_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetTypeInfoCount)(IXMLDOMNamedNodeMap*,UINT*);
     * }
     */
    public interface GetTypeInfoCount {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetTypeInfoCount fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDOMNamedNodeMapVtbl.GetTypeInfoCount_UP$MH, fi, IXMLDOMNamedNodeMapVtbl.GetTypeInfoCount$FUNC, scope);
        }
        static GetTypeInfoCount ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IXMLDOMNamedNodeMapVtbl.GetTypeInfoCount_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetTypeInfoCount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetTypeInfoCount"));
    public static VarHandle GetTypeInfoCount$VH() {
        return IXMLDOMNamedNodeMapVtbl.GetTypeInfoCount$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetTypeInfoCount)(IXMLDOMNamedNodeMap*,UINT*);
     * }
     */
    public static MemorySegment GetTypeInfoCount$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDOMNamedNodeMapVtbl.GetTypeInfoCount$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetTypeInfoCount)(IXMLDOMNamedNodeMap*,UINT*);
     * }
     */
    public static void GetTypeInfoCount$set(MemorySegment seg, MemorySegment x) {
        IXMLDOMNamedNodeMapVtbl.GetTypeInfoCount$VH.set(seg, x);
    }
    public static MemorySegment GetTypeInfoCount$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDOMNamedNodeMapVtbl.GetTypeInfoCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTypeInfoCount$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDOMNamedNodeMapVtbl.GetTypeInfoCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTypeInfoCount GetTypeInfoCount(MemorySegment segment, SegmentScope scope) {
        return GetTypeInfoCount.ofAddress(GetTypeInfoCount$get(segment), scope);
    }
    static final FunctionDescriptor GetTypeInfo$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetTypeInfo_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetTypeInfo_UP$MH = RuntimeHelper.upcallHandle(GetTypeInfo.class, "apply", IXMLDOMNamedNodeMapVtbl.GetTypeInfo_UP$FUNC);
    static final FunctionDescriptor GetTypeInfo_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetTypeInfo_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDOMNamedNodeMapVtbl.GetTypeInfo_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetTypeInfo)(IXMLDOMNamedNodeMap*,UINT,LCID,ITypeInfo**);
     * }
     */
    public interface GetTypeInfo {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(GetTypeInfo fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDOMNamedNodeMapVtbl.GetTypeInfo_UP$MH, fi, IXMLDOMNamedNodeMapVtbl.GetTypeInfo$FUNC, scope);
        }
        static GetTypeInfo ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)IXMLDOMNamedNodeMapVtbl.GetTypeInfo_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetTypeInfo$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetTypeInfo"));
    public static VarHandle GetTypeInfo$VH() {
        return IXMLDOMNamedNodeMapVtbl.GetTypeInfo$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetTypeInfo)(IXMLDOMNamedNodeMap*,UINT,LCID,ITypeInfo**);
     * }
     */
    public static MemorySegment GetTypeInfo$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDOMNamedNodeMapVtbl.GetTypeInfo$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetTypeInfo)(IXMLDOMNamedNodeMap*,UINT,LCID,ITypeInfo**);
     * }
     */
    public static void GetTypeInfo$set(MemorySegment seg, MemorySegment x) {
        IXMLDOMNamedNodeMapVtbl.GetTypeInfo$VH.set(seg, x);
    }
    public static MemorySegment GetTypeInfo$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDOMNamedNodeMapVtbl.GetTypeInfo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTypeInfo$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDOMNamedNodeMapVtbl.GetTypeInfo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTypeInfo GetTypeInfo(MemorySegment segment, SegmentScope scope) {
        return GetTypeInfo.ofAddress(GetTypeInfo$get(segment), scope);
    }
    static final FunctionDescriptor GetIDsOfNames$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetIDsOfNames_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetIDsOfNames_UP$MH = RuntimeHelper.upcallHandle(GetIDsOfNames.class, "apply", IXMLDOMNamedNodeMapVtbl.GetIDsOfNames_UP$FUNC);
    static final FunctionDescriptor GetIDsOfNames_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetIDsOfNames_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDOMNamedNodeMapVtbl.GetIDsOfNames_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetIDsOfNames)(IXMLDOMNamedNodeMap*,const IID*,LPOLESTR*,UINT,LCID,DISPID*);
     * }
     */
    public interface GetIDsOfNames {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3, int _x4, java.lang.foreign.MemorySegment _x5);
        static MemorySegment allocate(GetIDsOfNames fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDOMNamedNodeMapVtbl.GetIDsOfNames_UP$MH, fi, IXMLDOMNamedNodeMapVtbl.GetIDsOfNames$FUNC, scope);
        }
        static GetIDsOfNames ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3, int __x4, java.lang.foreign.MemorySegment __x5) -> {
                try {
                    return (int)IXMLDOMNamedNodeMapVtbl.GetIDsOfNames_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetIDsOfNames$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetIDsOfNames"));
    public static VarHandle GetIDsOfNames$VH() {
        return IXMLDOMNamedNodeMapVtbl.GetIDsOfNames$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetIDsOfNames)(IXMLDOMNamedNodeMap*,const IID*,LPOLESTR*,UINT,LCID,DISPID*);
     * }
     */
    public static MemorySegment GetIDsOfNames$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDOMNamedNodeMapVtbl.GetIDsOfNames$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetIDsOfNames)(IXMLDOMNamedNodeMap*,const IID*,LPOLESTR*,UINT,LCID,DISPID*);
     * }
     */
    public static void GetIDsOfNames$set(MemorySegment seg, MemorySegment x) {
        IXMLDOMNamedNodeMapVtbl.GetIDsOfNames$VH.set(seg, x);
    }
    public static MemorySegment GetIDsOfNames$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDOMNamedNodeMapVtbl.GetIDsOfNames$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetIDsOfNames$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDOMNamedNodeMapVtbl.GetIDsOfNames$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetIDsOfNames GetIDsOfNames(MemorySegment segment, SegmentScope scope) {
        return GetIDsOfNames.ofAddress(GetIDsOfNames$get(segment), scope);
    }
    static final FunctionDescriptor Invoke$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_SHORT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Invoke_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_SHORT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Invoke_UP$MH = RuntimeHelper.upcallHandle(Invoke.class, "apply", IXMLDOMNamedNodeMapVtbl.Invoke_UP$FUNC);
    static final FunctionDescriptor Invoke_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_SHORT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Invoke_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDOMNamedNodeMapVtbl.Invoke_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*Invoke)(IXMLDOMNamedNodeMap*,DISPID,const IID*,LCID,WORD,DISPPARAMS*,VARIANT*,EXCEPINFO*,UINT*);
     * }
     */
    public interface Invoke {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, int _x3, short _x4, java.lang.foreign.MemorySegment _x5, java.lang.foreign.MemorySegment _x6, java.lang.foreign.MemorySegment _x7, java.lang.foreign.MemorySegment _x8);
        static MemorySegment allocate(Invoke fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDOMNamedNodeMapVtbl.Invoke_UP$MH, fi, IXMLDOMNamedNodeMapVtbl.Invoke$FUNC, scope);
        }
        static Invoke ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, int __x3, short __x4, java.lang.foreign.MemorySegment __x5, java.lang.foreign.MemorySegment __x6, java.lang.foreign.MemorySegment __x7, java.lang.foreign.MemorySegment __x8) -> {
                try {
                    return (int)IXMLDOMNamedNodeMapVtbl.Invoke_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6, __x7, __x8);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Invoke$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Invoke"));
    public static VarHandle Invoke$VH() {
        return IXMLDOMNamedNodeMapVtbl.Invoke$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Invoke)(IXMLDOMNamedNodeMap*,DISPID,const IID*,LCID,WORD,DISPPARAMS*,VARIANT*,EXCEPINFO*,UINT*);
     * }
     */
    public static MemorySegment Invoke$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDOMNamedNodeMapVtbl.Invoke$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Invoke)(IXMLDOMNamedNodeMap*,DISPID,const IID*,LCID,WORD,DISPPARAMS*,VARIANT*,EXCEPINFO*,UINT*);
     * }
     */
    public static void Invoke$set(MemorySegment seg, MemorySegment x) {
        IXMLDOMNamedNodeMapVtbl.Invoke$VH.set(seg, x);
    }
    public static MemorySegment Invoke$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDOMNamedNodeMapVtbl.Invoke$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Invoke$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDOMNamedNodeMapVtbl.Invoke$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Invoke Invoke(MemorySegment segment, SegmentScope scope) {
        return Invoke.ofAddress(Invoke$get(segment), scope);
    }
    static final FunctionDescriptor getNamedItem$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor getNamedItem_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle getNamedItem_UP$MH = RuntimeHelper.upcallHandle(getNamedItem.class, "apply", IXMLDOMNamedNodeMapVtbl.getNamedItem_UP$FUNC);
    static final FunctionDescriptor getNamedItem_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle getNamedItem_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDOMNamedNodeMapVtbl.getNamedItem_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*getNamedItem)(IXMLDOMNamedNodeMap*,BSTR,IXMLDOMNode**);
     * }
     */
    public interface getNamedItem {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(getNamedItem fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDOMNamedNodeMapVtbl.getNamedItem_UP$MH, fi, IXMLDOMNamedNodeMapVtbl.getNamedItem$FUNC, scope);
        }
        static getNamedItem ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IXMLDOMNamedNodeMapVtbl.getNamedItem_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle getNamedItem$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("getNamedItem"));
    public static VarHandle getNamedItem$VH() {
        return IXMLDOMNamedNodeMapVtbl.getNamedItem$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*getNamedItem)(IXMLDOMNamedNodeMap*,BSTR,IXMLDOMNode**);
     * }
     */
    public static MemorySegment getNamedItem$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDOMNamedNodeMapVtbl.getNamedItem$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*getNamedItem)(IXMLDOMNamedNodeMap*,BSTR,IXMLDOMNode**);
     * }
     */
    public static void getNamedItem$set(MemorySegment seg, MemorySegment x) {
        IXMLDOMNamedNodeMapVtbl.getNamedItem$VH.set(seg, x);
    }
    public static MemorySegment getNamedItem$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDOMNamedNodeMapVtbl.getNamedItem$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void getNamedItem$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDOMNamedNodeMapVtbl.getNamedItem$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static getNamedItem getNamedItem(MemorySegment segment, SegmentScope scope) {
        return getNamedItem.ofAddress(getNamedItem$get(segment), scope);
    }
    static final FunctionDescriptor setNamedItem$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor setNamedItem_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle setNamedItem_UP$MH = RuntimeHelper.upcallHandle(setNamedItem.class, "apply", IXMLDOMNamedNodeMapVtbl.setNamedItem_UP$FUNC);
    static final FunctionDescriptor setNamedItem_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle setNamedItem_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDOMNamedNodeMapVtbl.setNamedItem_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*setNamedItem)(IXMLDOMNamedNodeMap*,IXMLDOMNode*,IXMLDOMNode**);
     * }
     */
    public interface setNamedItem {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(setNamedItem fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDOMNamedNodeMapVtbl.setNamedItem_UP$MH, fi, IXMLDOMNamedNodeMapVtbl.setNamedItem$FUNC, scope);
        }
        static setNamedItem ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IXMLDOMNamedNodeMapVtbl.setNamedItem_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle setNamedItem$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("setNamedItem"));
    public static VarHandle setNamedItem$VH() {
        return IXMLDOMNamedNodeMapVtbl.setNamedItem$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*setNamedItem)(IXMLDOMNamedNodeMap*,IXMLDOMNode*,IXMLDOMNode**);
     * }
     */
    public static MemorySegment setNamedItem$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDOMNamedNodeMapVtbl.setNamedItem$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*setNamedItem)(IXMLDOMNamedNodeMap*,IXMLDOMNode*,IXMLDOMNode**);
     * }
     */
    public static void setNamedItem$set(MemorySegment seg, MemorySegment x) {
        IXMLDOMNamedNodeMapVtbl.setNamedItem$VH.set(seg, x);
    }
    public static MemorySegment setNamedItem$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDOMNamedNodeMapVtbl.setNamedItem$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void setNamedItem$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDOMNamedNodeMapVtbl.setNamedItem$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static setNamedItem setNamedItem(MemorySegment segment, SegmentScope scope) {
        return setNamedItem.ofAddress(setNamedItem$get(segment), scope);
    }
    static final FunctionDescriptor removeNamedItem$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor removeNamedItem_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle removeNamedItem_UP$MH = RuntimeHelper.upcallHandle(removeNamedItem.class, "apply", IXMLDOMNamedNodeMapVtbl.removeNamedItem_UP$FUNC);
    static final FunctionDescriptor removeNamedItem_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle removeNamedItem_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDOMNamedNodeMapVtbl.removeNamedItem_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*removeNamedItem)(IXMLDOMNamedNodeMap*,BSTR,IXMLDOMNode**);
     * }
     */
    public interface removeNamedItem {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(removeNamedItem fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDOMNamedNodeMapVtbl.removeNamedItem_UP$MH, fi, IXMLDOMNamedNodeMapVtbl.removeNamedItem$FUNC, scope);
        }
        static removeNamedItem ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IXMLDOMNamedNodeMapVtbl.removeNamedItem_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle removeNamedItem$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("removeNamedItem"));
    public static VarHandle removeNamedItem$VH() {
        return IXMLDOMNamedNodeMapVtbl.removeNamedItem$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*removeNamedItem)(IXMLDOMNamedNodeMap*,BSTR,IXMLDOMNode**);
     * }
     */
    public static MemorySegment removeNamedItem$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDOMNamedNodeMapVtbl.removeNamedItem$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*removeNamedItem)(IXMLDOMNamedNodeMap*,BSTR,IXMLDOMNode**);
     * }
     */
    public static void removeNamedItem$set(MemorySegment seg, MemorySegment x) {
        IXMLDOMNamedNodeMapVtbl.removeNamedItem$VH.set(seg, x);
    }
    public static MemorySegment removeNamedItem$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDOMNamedNodeMapVtbl.removeNamedItem$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void removeNamedItem$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDOMNamedNodeMapVtbl.removeNamedItem$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static removeNamedItem removeNamedItem(MemorySegment segment, SegmentScope scope) {
        return removeNamedItem.ofAddress(removeNamedItem$get(segment), scope);
    }
    static final FunctionDescriptor get_item$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_item_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_item_UP$MH = RuntimeHelper.upcallHandle(get_item.class, "apply", IXMLDOMNamedNodeMapVtbl.get_item_UP$FUNC);
    static final FunctionDescriptor get_item_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_item_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDOMNamedNodeMapVtbl.get_item_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*get_item)(IXMLDOMNamedNodeMap*,long,IXMLDOMNode**);
     * }
     */
    public interface get_item {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(get_item fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDOMNamedNodeMapVtbl.get_item_UP$MH, fi, IXMLDOMNamedNodeMapVtbl.get_item$FUNC, scope);
        }
        static get_item ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IXMLDOMNamedNodeMapVtbl.get_item_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_item$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_item"));
    public static VarHandle get_item$VH() {
        return IXMLDOMNamedNodeMapVtbl.get_item$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_item)(IXMLDOMNamedNodeMap*,long,IXMLDOMNode**);
     * }
     */
    public static MemorySegment get_item$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDOMNamedNodeMapVtbl.get_item$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_item)(IXMLDOMNamedNodeMap*,long,IXMLDOMNode**);
     * }
     */
    public static void get_item$set(MemorySegment seg, MemorySegment x) {
        IXMLDOMNamedNodeMapVtbl.get_item$VH.set(seg, x);
    }
    public static MemorySegment get_item$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDOMNamedNodeMapVtbl.get_item$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_item$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDOMNamedNodeMapVtbl.get_item$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_item get_item(MemorySegment segment, SegmentScope scope) {
        return get_item.ofAddress(get_item$get(segment), scope);
    }
    static final FunctionDescriptor get_length$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_length_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_length_UP$MH = RuntimeHelper.upcallHandle(get_length.class, "apply", IXMLDOMNamedNodeMapVtbl.get_length_UP$FUNC);
    static final FunctionDescriptor get_length_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_length_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDOMNamedNodeMapVtbl.get_length_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*get_length)(IXMLDOMNamedNodeMap*,long*);
     * }
     */
    public interface get_length {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_length fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDOMNamedNodeMapVtbl.get_length_UP$MH, fi, IXMLDOMNamedNodeMapVtbl.get_length$FUNC, scope);
        }
        static get_length ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IXMLDOMNamedNodeMapVtbl.get_length_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_length$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_length"));
    public static VarHandle get_length$VH() {
        return IXMLDOMNamedNodeMapVtbl.get_length$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_length)(IXMLDOMNamedNodeMap*,long*);
     * }
     */
    public static MemorySegment get_length$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDOMNamedNodeMapVtbl.get_length$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_length)(IXMLDOMNamedNodeMap*,long*);
     * }
     */
    public static void get_length$set(MemorySegment seg, MemorySegment x) {
        IXMLDOMNamedNodeMapVtbl.get_length$VH.set(seg, x);
    }
    public static MemorySegment get_length$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDOMNamedNodeMapVtbl.get_length$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_length$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDOMNamedNodeMapVtbl.get_length$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_length get_length(MemorySegment segment, SegmentScope scope) {
        return get_length.ofAddress(get_length$get(segment), scope);
    }
    static final FunctionDescriptor getQualifiedItem$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor getQualifiedItem_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle getQualifiedItem_UP$MH = RuntimeHelper.upcallHandle(getQualifiedItem.class, "apply", IXMLDOMNamedNodeMapVtbl.getQualifiedItem_UP$FUNC);
    static final FunctionDescriptor getQualifiedItem_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle getQualifiedItem_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDOMNamedNodeMapVtbl.getQualifiedItem_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*getQualifiedItem)(IXMLDOMNamedNodeMap*,BSTR,BSTR,IXMLDOMNode**);
     * }
     */
    public interface getQualifiedItem {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(getQualifiedItem fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDOMNamedNodeMapVtbl.getQualifiedItem_UP$MH, fi, IXMLDOMNamedNodeMapVtbl.getQualifiedItem$FUNC, scope);
        }
        static getQualifiedItem ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)IXMLDOMNamedNodeMapVtbl.getQualifiedItem_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle getQualifiedItem$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("getQualifiedItem"));
    public static VarHandle getQualifiedItem$VH() {
        return IXMLDOMNamedNodeMapVtbl.getQualifiedItem$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*getQualifiedItem)(IXMLDOMNamedNodeMap*,BSTR,BSTR,IXMLDOMNode**);
     * }
     */
    public static MemorySegment getQualifiedItem$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDOMNamedNodeMapVtbl.getQualifiedItem$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*getQualifiedItem)(IXMLDOMNamedNodeMap*,BSTR,BSTR,IXMLDOMNode**);
     * }
     */
    public static void getQualifiedItem$set(MemorySegment seg, MemorySegment x) {
        IXMLDOMNamedNodeMapVtbl.getQualifiedItem$VH.set(seg, x);
    }
    public static MemorySegment getQualifiedItem$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDOMNamedNodeMapVtbl.getQualifiedItem$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void getQualifiedItem$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDOMNamedNodeMapVtbl.getQualifiedItem$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static getQualifiedItem getQualifiedItem(MemorySegment segment, SegmentScope scope) {
        return getQualifiedItem.ofAddress(getQualifiedItem$get(segment), scope);
    }
    static final FunctionDescriptor removeQualifiedItem$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor removeQualifiedItem_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle removeQualifiedItem_UP$MH = RuntimeHelper.upcallHandle(removeQualifiedItem.class, "apply", IXMLDOMNamedNodeMapVtbl.removeQualifiedItem_UP$FUNC);
    static final FunctionDescriptor removeQualifiedItem_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle removeQualifiedItem_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDOMNamedNodeMapVtbl.removeQualifiedItem_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*removeQualifiedItem)(IXMLDOMNamedNodeMap*,BSTR,BSTR,IXMLDOMNode**);
     * }
     */
    public interface removeQualifiedItem {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(removeQualifiedItem fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDOMNamedNodeMapVtbl.removeQualifiedItem_UP$MH, fi, IXMLDOMNamedNodeMapVtbl.removeQualifiedItem$FUNC, scope);
        }
        static removeQualifiedItem ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)IXMLDOMNamedNodeMapVtbl.removeQualifiedItem_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle removeQualifiedItem$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("removeQualifiedItem"));
    public static VarHandle removeQualifiedItem$VH() {
        return IXMLDOMNamedNodeMapVtbl.removeQualifiedItem$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*removeQualifiedItem)(IXMLDOMNamedNodeMap*,BSTR,BSTR,IXMLDOMNode**);
     * }
     */
    public static MemorySegment removeQualifiedItem$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDOMNamedNodeMapVtbl.removeQualifiedItem$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*removeQualifiedItem)(IXMLDOMNamedNodeMap*,BSTR,BSTR,IXMLDOMNode**);
     * }
     */
    public static void removeQualifiedItem$set(MemorySegment seg, MemorySegment x) {
        IXMLDOMNamedNodeMapVtbl.removeQualifiedItem$VH.set(seg, x);
    }
    public static MemorySegment removeQualifiedItem$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDOMNamedNodeMapVtbl.removeQualifiedItem$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void removeQualifiedItem$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDOMNamedNodeMapVtbl.removeQualifiedItem$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static removeQualifiedItem removeQualifiedItem(MemorySegment segment, SegmentScope scope) {
        return removeQualifiedItem.ofAddress(removeQualifiedItem$get(segment), scope);
    }
    static final FunctionDescriptor nextNode$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor nextNode_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle nextNode_UP$MH = RuntimeHelper.upcallHandle(nextNode.class, "apply", IXMLDOMNamedNodeMapVtbl.nextNode_UP$FUNC);
    static final FunctionDescriptor nextNode_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle nextNode_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDOMNamedNodeMapVtbl.nextNode_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*nextNode)(IXMLDOMNamedNodeMap*,IXMLDOMNode**);
     * }
     */
    public interface nextNode {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(nextNode fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDOMNamedNodeMapVtbl.nextNode_UP$MH, fi, IXMLDOMNamedNodeMapVtbl.nextNode$FUNC, scope);
        }
        static nextNode ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IXMLDOMNamedNodeMapVtbl.nextNode_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle nextNode$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("nextNode"));
    public static VarHandle nextNode$VH() {
        return IXMLDOMNamedNodeMapVtbl.nextNode$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*nextNode)(IXMLDOMNamedNodeMap*,IXMLDOMNode**);
     * }
     */
    public static MemorySegment nextNode$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDOMNamedNodeMapVtbl.nextNode$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*nextNode)(IXMLDOMNamedNodeMap*,IXMLDOMNode**);
     * }
     */
    public static void nextNode$set(MemorySegment seg, MemorySegment x) {
        IXMLDOMNamedNodeMapVtbl.nextNode$VH.set(seg, x);
    }
    public static MemorySegment nextNode$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDOMNamedNodeMapVtbl.nextNode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nextNode$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDOMNamedNodeMapVtbl.nextNode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static nextNode nextNode(MemorySegment segment, SegmentScope scope) {
        return nextNode.ofAddress(nextNode$get(segment), scope);
    }
    static final FunctionDescriptor reset$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor reset_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle reset_UP$MH = RuntimeHelper.upcallHandle(reset.class, "apply", IXMLDOMNamedNodeMapVtbl.reset_UP$FUNC);
    static final FunctionDescriptor reset_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle reset_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDOMNamedNodeMapVtbl.reset_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*reset)(IXMLDOMNamedNodeMap*);
     * }
     */
    public interface reset {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(reset fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDOMNamedNodeMapVtbl.reset_UP$MH, fi, IXMLDOMNamedNodeMapVtbl.reset$FUNC, scope);
        }
        static reset ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IXMLDOMNamedNodeMapVtbl.reset_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle reset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("reset"));
    public static VarHandle reset$VH() {
        return IXMLDOMNamedNodeMapVtbl.reset$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*reset)(IXMLDOMNamedNodeMap*);
     * }
     */
    public static MemorySegment reset$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDOMNamedNodeMapVtbl.reset$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*reset)(IXMLDOMNamedNodeMap*);
     * }
     */
    public static void reset$set(MemorySegment seg, MemorySegment x) {
        IXMLDOMNamedNodeMapVtbl.reset$VH.set(seg, x);
    }
    public static MemorySegment reset$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDOMNamedNodeMapVtbl.reset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void reset$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDOMNamedNodeMapVtbl.reset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static reset reset(MemorySegment segment, SegmentScope scope) {
        return reset.ofAddress(reset$get(segment), scope);
    }
    static final FunctionDescriptor get__newEnum$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get__newEnum_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get__newEnum_UP$MH = RuntimeHelper.upcallHandle(get__newEnum.class, "apply", IXMLDOMNamedNodeMapVtbl.get__newEnum_UP$FUNC);
    static final FunctionDescriptor get__newEnum_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get__newEnum_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDOMNamedNodeMapVtbl.get__newEnum_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*get__newEnum)(IXMLDOMNamedNodeMap*,IUnknown**);
     * }
     */
    public interface get__newEnum {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get__newEnum fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDOMNamedNodeMapVtbl.get__newEnum_UP$MH, fi, IXMLDOMNamedNodeMapVtbl.get__newEnum$FUNC, scope);
        }
        static get__newEnum ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IXMLDOMNamedNodeMapVtbl.get__newEnum_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get__newEnum$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get__newEnum"));
    public static VarHandle get__newEnum$VH() {
        return IXMLDOMNamedNodeMapVtbl.get__newEnum$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get__newEnum)(IXMLDOMNamedNodeMap*,IUnknown**);
     * }
     */
    public static MemorySegment get__newEnum$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDOMNamedNodeMapVtbl.get__newEnum$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get__newEnum)(IXMLDOMNamedNodeMap*,IUnknown**);
     * }
     */
    public static void get__newEnum$set(MemorySegment seg, MemorySegment x) {
        IXMLDOMNamedNodeMapVtbl.get__newEnum$VH.set(seg, x);
    }
    public static MemorySegment get__newEnum$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDOMNamedNodeMapVtbl.get__newEnum$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get__newEnum$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDOMNamedNodeMapVtbl.get__newEnum$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get__newEnum get__newEnum(MemorySegment segment, SegmentScope scope) {
        return get__newEnum.ofAddress(get__newEnum$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


