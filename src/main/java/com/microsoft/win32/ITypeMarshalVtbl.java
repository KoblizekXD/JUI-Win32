// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct ITypeMarshalVtbl {
 *     HRESULT (*QueryInterface)(ITypeMarshal*,const IID*,void**);
 *     ULONG (*AddRef)(ITypeMarshal*);
 *     ULONG (*Release)(ITypeMarshal*);
 *     HRESULT (*Size)(ITypeMarshal*,PVOID,DWORD,PVOID,ULONG*);
 *     HRESULT (*Marshal)(ITypeMarshal*,PVOID,DWORD,PVOID,ULONG,BYTE*,ULONG*);
 *     HRESULT (*Unmarshal)(ITypeMarshal*,PVOID,DWORD,ULONG,BYTE*,ULONG*);
 *     HRESULT (*Free)(ITypeMarshal*,PVOID);
 * };
 * }
 */
public class ITypeMarshalVtbl {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("Size"),
        Constants$root.C_POINTER$LAYOUT.withName("Marshal"),
        Constants$root.C_POINTER$LAYOUT.withName("Unmarshal"),
        Constants$root.C_POINTER$LAYOUT.withName("Free")
    ).withName("ITypeMarshalVtbl");
    public static MemoryLayout $LAYOUT() {
        return ITypeMarshalVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor QueryInterface_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_UP$MH = RuntimeHelper.upcallHandle(QueryInterface.class, "apply", ITypeMarshalVtbl.QueryInterface_UP$FUNC);
    static final FunctionDescriptor QueryInterface_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_DOWN$MH = RuntimeHelper.downcallHandle(
        ITypeMarshalVtbl.QueryInterface_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(ITypeMarshal*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ITypeMarshalVtbl.QueryInterface_UP$MH, fi, ITypeMarshalVtbl.QueryInterface$FUNC, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)ITypeMarshalVtbl.QueryInterface_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return ITypeMarshalVtbl.QueryInterface$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(ITypeMarshal*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ITypeMarshalVtbl.QueryInterface$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(ITypeMarshal*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        ITypeMarshalVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ITypeMarshalVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        ITypeMarshalVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, SegmentScope scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor AddRef_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_UP$MH = RuntimeHelper.upcallHandle(AddRef.class, "apply", ITypeMarshalVtbl.AddRef_UP$FUNC);
    static final FunctionDescriptor AddRef_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_DOWN$MH = RuntimeHelper.downcallHandle(
        ITypeMarshalVtbl.AddRef_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*AddRef)(ITypeMarshal*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ITypeMarshalVtbl.AddRef_UP$MH, fi, ITypeMarshalVtbl.AddRef$FUNC, scope);
        }
        static AddRef ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)ITypeMarshalVtbl.AddRef_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return ITypeMarshalVtbl.AddRef$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(ITypeMarshal*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ITypeMarshalVtbl.AddRef$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(ITypeMarshal*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        ITypeMarshalVtbl.AddRef$VH.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ITypeMarshalVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        ITypeMarshalVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, SegmentScope scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Release_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_UP$MH = RuntimeHelper.upcallHandle(Release.class, "apply", ITypeMarshalVtbl.Release_UP$FUNC);
    static final FunctionDescriptor Release_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_DOWN$MH = RuntimeHelper.downcallHandle(
        ITypeMarshalVtbl.Release_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*Release)(ITypeMarshal*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ITypeMarshalVtbl.Release_UP$MH, fi, ITypeMarshalVtbl.Release$FUNC, scope);
        }
        static Release ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)ITypeMarshalVtbl.Release_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return ITypeMarshalVtbl.Release$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(ITypeMarshal*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ITypeMarshalVtbl.Release$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(ITypeMarshal*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        ITypeMarshalVtbl.Release$VH.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ITypeMarshalVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        ITypeMarshalVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, SegmentScope scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    static final FunctionDescriptor Size$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Size_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Size_UP$MH = RuntimeHelper.upcallHandle(Size.class, "apply", ITypeMarshalVtbl.Size_UP$FUNC);
    static final FunctionDescriptor Size_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Size_DOWN$MH = RuntimeHelper.downcallHandle(
        ITypeMarshalVtbl.Size_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*Size)(ITypeMarshal*,PVOID,DWORD,PVOID,ULONG*);
     * }
     */
    public interface Size {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(Size fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ITypeMarshalVtbl.Size_UP$MH, fi, ITypeMarshalVtbl.Size$FUNC, scope);
        }
        static Size ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (int)ITypeMarshalVtbl.Size_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Size$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Size"));
    public static VarHandle Size$VH() {
        return ITypeMarshalVtbl.Size$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Size)(ITypeMarshal*,PVOID,DWORD,PVOID,ULONG*);
     * }
     */
    public static MemorySegment Size$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ITypeMarshalVtbl.Size$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Size)(ITypeMarshal*,PVOID,DWORD,PVOID,ULONG*);
     * }
     */
    public static void Size$set(MemorySegment seg, MemorySegment x) {
        ITypeMarshalVtbl.Size$VH.set(seg, x);
    }
    public static MemorySegment Size$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ITypeMarshalVtbl.Size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Size$set(MemorySegment seg, long index, MemorySegment x) {
        ITypeMarshalVtbl.Size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Size Size(MemorySegment segment, SegmentScope scope) {
        return Size.ofAddress(Size$get(segment), scope);
    }
    static final FunctionDescriptor Marshal$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Marshal_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Marshal_UP$MH = RuntimeHelper.upcallHandle(Marshal.class, "apply", ITypeMarshalVtbl.Marshal_UP$FUNC);
    static final FunctionDescriptor Marshal_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Marshal_DOWN$MH = RuntimeHelper.downcallHandle(
        ITypeMarshalVtbl.Marshal_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*Marshal)(ITypeMarshal*,PVOID,DWORD,PVOID,ULONG,BYTE*,ULONG*);
     * }
     */
    public interface Marshal {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, java.lang.foreign.MemorySegment _x3, int _x4, java.lang.foreign.MemorySegment _x5, java.lang.foreign.MemorySegment _x6);
        static MemorySegment allocate(Marshal fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ITypeMarshalVtbl.Marshal_UP$MH, fi, ITypeMarshalVtbl.Marshal$FUNC, scope);
        }
        static Marshal ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, java.lang.foreign.MemorySegment __x3, int __x4, java.lang.foreign.MemorySegment __x5, java.lang.foreign.MemorySegment __x6) -> {
                try {
                    return (int)ITypeMarshalVtbl.Marshal_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Marshal$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Marshal"));
    public static VarHandle Marshal$VH() {
        return ITypeMarshalVtbl.Marshal$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Marshal)(ITypeMarshal*,PVOID,DWORD,PVOID,ULONG,BYTE*,ULONG*);
     * }
     */
    public static MemorySegment Marshal$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ITypeMarshalVtbl.Marshal$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Marshal)(ITypeMarshal*,PVOID,DWORD,PVOID,ULONG,BYTE*,ULONG*);
     * }
     */
    public static void Marshal$set(MemorySegment seg, MemorySegment x) {
        ITypeMarshalVtbl.Marshal$VH.set(seg, x);
    }
    public static MemorySegment Marshal$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ITypeMarshalVtbl.Marshal$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Marshal$set(MemorySegment seg, long index, MemorySegment x) {
        ITypeMarshalVtbl.Marshal$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Marshal Marshal(MemorySegment segment, SegmentScope scope) {
        return Marshal.ofAddress(Marshal$get(segment), scope);
    }
    static final FunctionDescriptor Unmarshal$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Unmarshal_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Unmarshal_UP$MH = RuntimeHelper.upcallHandle(Unmarshal.class, "apply", ITypeMarshalVtbl.Unmarshal_UP$FUNC);
    static final FunctionDescriptor Unmarshal_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Unmarshal_DOWN$MH = RuntimeHelper.downcallHandle(
        ITypeMarshalVtbl.Unmarshal_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*Unmarshal)(ITypeMarshal*,PVOID,DWORD,ULONG,BYTE*,ULONG*);
     * }
     */
    public interface Unmarshal {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, int _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5);
        static MemorySegment allocate(Unmarshal fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ITypeMarshalVtbl.Unmarshal_UP$MH, fi, ITypeMarshalVtbl.Unmarshal$FUNC, scope);
        }
        static Unmarshal ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, int __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5) -> {
                try {
                    return (int)ITypeMarshalVtbl.Unmarshal_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Unmarshal$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Unmarshal"));
    public static VarHandle Unmarshal$VH() {
        return ITypeMarshalVtbl.Unmarshal$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Unmarshal)(ITypeMarshal*,PVOID,DWORD,ULONG,BYTE*,ULONG*);
     * }
     */
    public static MemorySegment Unmarshal$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ITypeMarshalVtbl.Unmarshal$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Unmarshal)(ITypeMarshal*,PVOID,DWORD,ULONG,BYTE*,ULONG*);
     * }
     */
    public static void Unmarshal$set(MemorySegment seg, MemorySegment x) {
        ITypeMarshalVtbl.Unmarshal$VH.set(seg, x);
    }
    public static MemorySegment Unmarshal$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ITypeMarshalVtbl.Unmarshal$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Unmarshal$set(MemorySegment seg, long index, MemorySegment x) {
        ITypeMarshalVtbl.Unmarshal$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Unmarshal Unmarshal(MemorySegment segment, SegmentScope scope) {
        return Unmarshal.ofAddress(Unmarshal$get(segment), scope);
    }
    static final FunctionDescriptor Free$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Free_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Free_UP$MH = RuntimeHelper.upcallHandle(Free.class, "apply", ITypeMarshalVtbl.Free_UP$FUNC);
    static final FunctionDescriptor Free_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Free_DOWN$MH = RuntimeHelper.downcallHandle(
        ITypeMarshalVtbl.Free_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*Free)(ITypeMarshal*,PVOID);
     * }
     */
    public interface Free {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(Free fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ITypeMarshalVtbl.Free_UP$MH, fi, ITypeMarshalVtbl.Free$FUNC, scope);
        }
        static Free ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)ITypeMarshalVtbl.Free_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Free$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Free"));
    public static VarHandle Free$VH() {
        return ITypeMarshalVtbl.Free$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Free)(ITypeMarshal*,PVOID);
     * }
     */
    public static MemorySegment Free$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ITypeMarshalVtbl.Free$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Free)(ITypeMarshal*,PVOID);
     * }
     */
    public static void Free$set(MemorySegment seg, MemorySegment x) {
        ITypeMarshalVtbl.Free$VH.set(seg, x);
    }
    public static MemorySegment Free$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ITypeMarshalVtbl.Free$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Free$set(MemorySegment seg, long index, MemorySegment x) {
        ITypeMarshalVtbl.Free$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Free Free(MemorySegment segment, SegmentScope scope) {
        return Free.ofAddress(Free$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


