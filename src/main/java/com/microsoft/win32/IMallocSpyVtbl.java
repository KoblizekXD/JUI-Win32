// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IMallocSpyVtbl {
 *     HRESULT (*QueryInterface)(IMallocSpy*,const IID*,void**);
 *     ULONG (*AddRef)(IMallocSpy*);
 *     ULONG (*Release)(IMallocSpy*);
 *     SIZE_T (*PreAlloc)(IMallocSpy*,SIZE_T);
 *     void* (*PostAlloc)(IMallocSpy*,void*);
 *     void* (*PreFree)(IMallocSpy*,void*,BOOL);
 *     void (*PostFree)(IMallocSpy*,BOOL);
 *     SIZE_T (*PreRealloc)(IMallocSpy*,void*,SIZE_T,void**,BOOL);
 *     void* (*PostRealloc)(IMallocSpy*,void*,BOOL);
 *     void* (*PreGetSize)(IMallocSpy*,void*,BOOL);
 *     SIZE_T (*PostGetSize)(IMallocSpy*,SIZE_T,BOOL);
 *     void* (*PreDidAlloc)(IMallocSpy*,void*,BOOL);
 *     int (*PostDidAlloc)(IMallocSpy*,void*,BOOL,int);
 *     void (*PreHeapMinimize)(IMallocSpy*);
 *     void (*PostHeapMinimize)(IMallocSpy*);
 * };
 * }
 */
public class IMallocSpyVtbl {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("PreAlloc"),
        Constants$root.C_POINTER$LAYOUT.withName("PostAlloc"),
        Constants$root.C_POINTER$LAYOUT.withName("PreFree"),
        Constants$root.C_POINTER$LAYOUT.withName("PostFree"),
        Constants$root.C_POINTER$LAYOUT.withName("PreRealloc"),
        Constants$root.C_POINTER$LAYOUT.withName("PostRealloc"),
        Constants$root.C_POINTER$LAYOUT.withName("PreGetSize"),
        Constants$root.C_POINTER$LAYOUT.withName("PostGetSize"),
        Constants$root.C_POINTER$LAYOUT.withName("PreDidAlloc"),
        Constants$root.C_POINTER$LAYOUT.withName("PostDidAlloc"),
        Constants$root.C_POINTER$LAYOUT.withName("PreHeapMinimize"),
        Constants$root.C_POINTER$LAYOUT.withName("PostHeapMinimize")
    ).withName("IMallocSpyVtbl");
    public static MemoryLayout $LAYOUT() {
        return IMallocSpyVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor QueryInterface_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_UP$MH = RuntimeHelper.upcallHandle(QueryInterface.class, "apply", IMallocSpyVtbl.QueryInterface_UP$FUNC);
    static final FunctionDescriptor QueryInterface_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_DOWN$MH = RuntimeHelper.downcallHandle(
        IMallocSpyVtbl.QueryInterface_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(IMallocSpy*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IMallocSpyVtbl.QueryInterface_UP$MH, fi, IMallocSpyVtbl.QueryInterface$FUNC, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IMallocSpyVtbl.QueryInterface_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return IMallocSpyVtbl.QueryInterface$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IMallocSpy*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IMallocSpyVtbl.QueryInterface$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IMallocSpy*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        IMallocSpyVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IMallocSpyVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        IMallocSpyVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, SegmentScope scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor AddRef_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_UP$MH = RuntimeHelper.upcallHandle(AddRef.class, "apply", IMallocSpyVtbl.AddRef_UP$FUNC);
    static final FunctionDescriptor AddRef_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_DOWN$MH = RuntimeHelper.downcallHandle(
        IMallocSpyVtbl.AddRef_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*AddRef)(IMallocSpy*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IMallocSpyVtbl.AddRef_UP$MH, fi, IMallocSpyVtbl.AddRef$FUNC, scope);
        }
        static AddRef ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IMallocSpyVtbl.AddRef_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return IMallocSpyVtbl.AddRef$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(IMallocSpy*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IMallocSpyVtbl.AddRef$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(IMallocSpy*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        IMallocSpyVtbl.AddRef$VH.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IMallocSpyVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        IMallocSpyVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, SegmentScope scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Release_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_UP$MH = RuntimeHelper.upcallHandle(Release.class, "apply", IMallocSpyVtbl.Release_UP$FUNC);
    static final FunctionDescriptor Release_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_DOWN$MH = RuntimeHelper.downcallHandle(
        IMallocSpyVtbl.Release_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*Release)(IMallocSpy*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IMallocSpyVtbl.Release_UP$MH, fi, IMallocSpyVtbl.Release$FUNC, scope);
        }
        static Release ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IMallocSpyVtbl.Release_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return IMallocSpyVtbl.Release$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(IMallocSpy*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IMallocSpyVtbl.Release$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(IMallocSpy*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        IMallocSpyVtbl.Release$VH.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IMallocSpyVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        IMallocSpyVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, SegmentScope scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    static final FunctionDescriptor PreAlloc$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final FunctionDescriptor PreAlloc_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final MethodHandle PreAlloc_UP$MH = RuntimeHelper.upcallHandle(PreAlloc.class, "apply", IMallocSpyVtbl.PreAlloc_UP$FUNC);
    static final FunctionDescriptor PreAlloc_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final MethodHandle PreAlloc_DOWN$MH = RuntimeHelper.downcallHandle(
        IMallocSpyVtbl.PreAlloc_DOWN$FUNC
    );
    /**
     * {@snippet :
 * SIZE_T (*PreAlloc)(IMallocSpy*,SIZE_T);
     * }
     */
    public interface PreAlloc {

        long apply(java.lang.foreign.MemorySegment _x0, long _x1);
        static MemorySegment allocate(PreAlloc fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IMallocSpyVtbl.PreAlloc_UP$MH, fi, IMallocSpyVtbl.PreAlloc$FUNC, scope);
        }
        static PreAlloc ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, long __x1) -> {
                try {
                    return (long)IMallocSpyVtbl.PreAlloc_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle PreAlloc$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("PreAlloc"));
    public static VarHandle PreAlloc$VH() {
        return IMallocSpyVtbl.PreAlloc$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * SIZE_T (*PreAlloc)(IMallocSpy*,SIZE_T);
     * }
     */
    public static MemorySegment PreAlloc$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IMallocSpyVtbl.PreAlloc$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * SIZE_T (*PreAlloc)(IMallocSpy*,SIZE_T);
     * }
     */
    public static void PreAlloc$set(MemorySegment seg, MemorySegment x) {
        IMallocSpyVtbl.PreAlloc$VH.set(seg, x);
    }
    public static MemorySegment PreAlloc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IMallocSpyVtbl.PreAlloc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void PreAlloc$set(MemorySegment seg, long index, MemorySegment x) {
        IMallocSpyVtbl.PreAlloc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static PreAlloc PreAlloc(MemorySegment segment, SegmentScope scope) {
        return PreAlloc.ofAddress(PreAlloc$get(segment), scope);
    }
    static final FunctionDescriptor PostAlloc$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor PostAlloc_UP$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle PostAlloc_UP$MH = RuntimeHelper.upcallHandle(PostAlloc.class, "apply", IMallocSpyVtbl.PostAlloc_UP$FUNC);
    static final FunctionDescriptor PostAlloc_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle PostAlloc_DOWN$MH = RuntimeHelper.downcallHandle(
        IMallocSpyVtbl.PostAlloc_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void* (*PostAlloc)(IMallocSpy*,void*);
     * }
     */
    public interface PostAlloc {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(PostAlloc fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IMallocSpyVtbl.PostAlloc_UP$MH, fi, IMallocSpyVtbl.PostAlloc$FUNC, scope);
        }
        static PostAlloc ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (java.lang.foreign.MemorySegment)IMallocSpyVtbl.PostAlloc_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle PostAlloc$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("PostAlloc"));
    public static VarHandle PostAlloc$VH() {
        return IMallocSpyVtbl.PostAlloc$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* (*PostAlloc)(IMallocSpy*,void*);
     * }
     */
    public static MemorySegment PostAlloc$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IMallocSpyVtbl.PostAlloc$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* (*PostAlloc)(IMallocSpy*,void*);
     * }
     */
    public static void PostAlloc$set(MemorySegment seg, MemorySegment x) {
        IMallocSpyVtbl.PostAlloc$VH.set(seg, x);
    }
    public static MemorySegment PostAlloc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IMallocSpyVtbl.PostAlloc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void PostAlloc$set(MemorySegment seg, long index, MemorySegment x) {
        IMallocSpyVtbl.PostAlloc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static PostAlloc PostAlloc(MemorySegment segment, SegmentScope scope) {
        return PostAlloc.ofAddress(PostAlloc$get(segment), scope);
    }
    static final FunctionDescriptor PreFree$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor PreFree_UP$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle PreFree_UP$MH = RuntimeHelper.upcallHandle(PreFree.class, "apply", IMallocSpyVtbl.PreFree_UP$FUNC);
    static final FunctionDescriptor PreFree_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle PreFree_DOWN$MH = RuntimeHelper.downcallHandle(
        IMallocSpyVtbl.PreFree_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void* (*PreFree)(IMallocSpy*,void*,BOOL);
     * }
     */
    public interface PreFree {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2);
        static MemorySegment allocate(PreFree fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IMallocSpyVtbl.PreFree_UP$MH, fi, IMallocSpyVtbl.PreFree$FUNC, scope);
        }
        static PreFree ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2) -> {
                try {
                    return (java.lang.foreign.MemorySegment)IMallocSpyVtbl.PreFree_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle PreFree$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("PreFree"));
    public static VarHandle PreFree$VH() {
        return IMallocSpyVtbl.PreFree$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* (*PreFree)(IMallocSpy*,void*,BOOL);
     * }
     */
    public static MemorySegment PreFree$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IMallocSpyVtbl.PreFree$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* (*PreFree)(IMallocSpy*,void*,BOOL);
     * }
     */
    public static void PreFree$set(MemorySegment seg, MemorySegment x) {
        IMallocSpyVtbl.PreFree$VH.set(seg, x);
    }
    public static MemorySegment PreFree$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IMallocSpyVtbl.PreFree$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void PreFree$set(MemorySegment seg, long index, MemorySegment x) {
        IMallocSpyVtbl.PreFree$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static PreFree PreFree(MemorySegment segment, SegmentScope scope) {
        return PreFree.ofAddress(PreFree$get(segment), scope);
    }
    static final FunctionDescriptor PostFree$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor PostFree_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle PostFree_UP$MH = RuntimeHelper.upcallHandle(PostFree.class, "apply", IMallocSpyVtbl.PostFree_UP$FUNC);
    static final FunctionDescriptor PostFree_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle PostFree_DOWN$MH = RuntimeHelper.downcallHandle(
        IMallocSpyVtbl.PostFree_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*PostFree)(IMallocSpy*,BOOL);
     * }
     */
    public interface PostFree {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(PostFree fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IMallocSpyVtbl.PostFree_UP$MH, fi, IMallocSpyVtbl.PostFree$FUNC, scope);
        }
        static PostFree ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    IMallocSpyVtbl.PostFree_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle PostFree$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("PostFree"));
    public static VarHandle PostFree$VH() {
        return IMallocSpyVtbl.PostFree$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*PostFree)(IMallocSpy*,BOOL);
     * }
     */
    public static MemorySegment PostFree$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IMallocSpyVtbl.PostFree$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*PostFree)(IMallocSpy*,BOOL);
     * }
     */
    public static void PostFree$set(MemorySegment seg, MemorySegment x) {
        IMallocSpyVtbl.PostFree$VH.set(seg, x);
    }
    public static MemorySegment PostFree$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IMallocSpyVtbl.PostFree$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void PostFree$set(MemorySegment seg, long index, MemorySegment x) {
        IMallocSpyVtbl.PostFree$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static PostFree PostFree(MemorySegment segment, SegmentScope scope) {
        return PostFree.ofAddress(PostFree$get(segment), scope);
    }
    static final FunctionDescriptor PreRealloc$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor PreRealloc_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle PreRealloc_UP$MH = RuntimeHelper.upcallHandle(PreRealloc.class, "apply", IMallocSpyVtbl.PreRealloc_UP$FUNC);
    static final FunctionDescriptor PreRealloc_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle PreRealloc_DOWN$MH = RuntimeHelper.downcallHandle(
        IMallocSpyVtbl.PreRealloc_DOWN$FUNC
    );
    /**
     * {@snippet :
 * SIZE_T (*PreRealloc)(IMallocSpy*,void*,SIZE_T,void**,BOOL);
     * }
     */
    public interface PreRealloc {

        long apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, long _x2, java.lang.foreign.MemorySegment _x3, int _x4);
        static MemorySegment allocate(PreRealloc fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IMallocSpyVtbl.PreRealloc_UP$MH, fi, IMallocSpyVtbl.PreRealloc$FUNC, scope);
        }
        static PreRealloc ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, long __x2, java.lang.foreign.MemorySegment __x3, int __x4) -> {
                try {
                    return (long)IMallocSpyVtbl.PreRealloc_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle PreRealloc$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("PreRealloc"));
    public static VarHandle PreRealloc$VH() {
        return IMallocSpyVtbl.PreRealloc$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * SIZE_T (*PreRealloc)(IMallocSpy*,void*,SIZE_T,void**,BOOL);
     * }
     */
    public static MemorySegment PreRealloc$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IMallocSpyVtbl.PreRealloc$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * SIZE_T (*PreRealloc)(IMallocSpy*,void*,SIZE_T,void**,BOOL);
     * }
     */
    public static void PreRealloc$set(MemorySegment seg, MemorySegment x) {
        IMallocSpyVtbl.PreRealloc$VH.set(seg, x);
    }
    public static MemorySegment PreRealloc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IMallocSpyVtbl.PreRealloc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void PreRealloc$set(MemorySegment seg, long index, MemorySegment x) {
        IMallocSpyVtbl.PreRealloc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static PreRealloc PreRealloc(MemorySegment segment, SegmentScope scope) {
        return PreRealloc.ofAddress(PreRealloc$get(segment), scope);
    }
    static final FunctionDescriptor PostRealloc$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor PostRealloc_UP$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle PostRealloc_UP$MH = RuntimeHelper.upcallHandle(PostRealloc.class, "apply", IMallocSpyVtbl.PostRealloc_UP$FUNC);
    static final FunctionDescriptor PostRealloc_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle PostRealloc_DOWN$MH = RuntimeHelper.downcallHandle(
        IMallocSpyVtbl.PostRealloc_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void* (*PostRealloc)(IMallocSpy*,void*,BOOL);
     * }
     */
    public interface PostRealloc {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2);
        static MemorySegment allocate(PostRealloc fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IMallocSpyVtbl.PostRealloc_UP$MH, fi, IMallocSpyVtbl.PostRealloc$FUNC, scope);
        }
        static PostRealloc ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2) -> {
                try {
                    return (java.lang.foreign.MemorySegment)IMallocSpyVtbl.PostRealloc_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle PostRealloc$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("PostRealloc"));
    public static VarHandle PostRealloc$VH() {
        return IMallocSpyVtbl.PostRealloc$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* (*PostRealloc)(IMallocSpy*,void*,BOOL);
     * }
     */
    public static MemorySegment PostRealloc$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IMallocSpyVtbl.PostRealloc$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* (*PostRealloc)(IMallocSpy*,void*,BOOL);
     * }
     */
    public static void PostRealloc$set(MemorySegment seg, MemorySegment x) {
        IMallocSpyVtbl.PostRealloc$VH.set(seg, x);
    }
    public static MemorySegment PostRealloc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IMallocSpyVtbl.PostRealloc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void PostRealloc$set(MemorySegment seg, long index, MemorySegment x) {
        IMallocSpyVtbl.PostRealloc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static PostRealloc PostRealloc(MemorySegment segment, SegmentScope scope) {
        return PostRealloc.ofAddress(PostRealloc$get(segment), scope);
    }
    static final FunctionDescriptor PreGetSize$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor PreGetSize_UP$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle PreGetSize_UP$MH = RuntimeHelper.upcallHandle(PreGetSize.class, "apply", IMallocSpyVtbl.PreGetSize_UP$FUNC);
    static final FunctionDescriptor PreGetSize_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle PreGetSize_DOWN$MH = RuntimeHelper.downcallHandle(
        IMallocSpyVtbl.PreGetSize_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void* (*PreGetSize)(IMallocSpy*,void*,BOOL);
     * }
     */
    public interface PreGetSize {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2);
        static MemorySegment allocate(PreGetSize fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IMallocSpyVtbl.PreGetSize_UP$MH, fi, IMallocSpyVtbl.PreGetSize$FUNC, scope);
        }
        static PreGetSize ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2) -> {
                try {
                    return (java.lang.foreign.MemorySegment)IMallocSpyVtbl.PreGetSize_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle PreGetSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("PreGetSize"));
    public static VarHandle PreGetSize$VH() {
        return IMallocSpyVtbl.PreGetSize$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* (*PreGetSize)(IMallocSpy*,void*,BOOL);
     * }
     */
    public static MemorySegment PreGetSize$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IMallocSpyVtbl.PreGetSize$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* (*PreGetSize)(IMallocSpy*,void*,BOOL);
     * }
     */
    public static void PreGetSize$set(MemorySegment seg, MemorySegment x) {
        IMallocSpyVtbl.PreGetSize$VH.set(seg, x);
    }
    public static MemorySegment PreGetSize$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IMallocSpyVtbl.PreGetSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void PreGetSize$set(MemorySegment seg, long index, MemorySegment x) {
        IMallocSpyVtbl.PreGetSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static PreGetSize PreGetSize(MemorySegment segment, SegmentScope scope) {
        return PreGetSize.ofAddress(PreGetSize$get(segment), scope);
    }
    static final FunctionDescriptor PostGetSize$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor PostGetSize_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle PostGetSize_UP$MH = RuntimeHelper.upcallHandle(PostGetSize.class, "apply", IMallocSpyVtbl.PostGetSize_UP$FUNC);
    static final FunctionDescriptor PostGetSize_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle PostGetSize_DOWN$MH = RuntimeHelper.downcallHandle(
        IMallocSpyVtbl.PostGetSize_DOWN$FUNC
    );
    /**
     * {@snippet :
 * SIZE_T (*PostGetSize)(IMallocSpy*,SIZE_T,BOOL);
     * }
     */
    public interface PostGetSize {

        long apply(java.lang.foreign.MemorySegment _x0, long _x1, int _x2);
        static MemorySegment allocate(PostGetSize fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IMallocSpyVtbl.PostGetSize_UP$MH, fi, IMallocSpyVtbl.PostGetSize$FUNC, scope);
        }
        static PostGetSize ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, long __x1, int __x2) -> {
                try {
                    return (long)IMallocSpyVtbl.PostGetSize_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle PostGetSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("PostGetSize"));
    public static VarHandle PostGetSize$VH() {
        return IMallocSpyVtbl.PostGetSize$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * SIZE_T (*PostGetSize)(IMallocSpy*,SIZE_T,BOOL);
     * }
     */
    public static MemorySegment PostGetSize$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IMallocSpyVtbl.PostGetSize$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * SIZE_T (*PostGetSize)(IMallocSpy*,SIZE_T,BOOL);
     * }
     */
    public static void PostGetSize$set(MemorySegment seg, MemorySegment x) {
        IMallocSpyVtbl.PostGetSize$VH.set(seg, x);
    }
    public static MemorySegment PostGetSize$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IMallocSpyVtbl.PostGetSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void PostGetSize$set(MemorySegment seg, long index, MemorySegment x) {
        IMallocSpyVtbl.PostGetSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static PostGetSize PostGetSize(MemorySegment segment, SegmentScope scope) {
        return PostGetSize.ofAddress(PostGetSize$get(segment), scope);
    }
    static final FunctionDescriptor PreDidAlloc$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor PreDidAlloc_UP$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle PreDidAlloc_UP$MH = RuntimeHelper.upcallHandle(PreDidAlloc.class, "apply", IMallocSpyVtbl.PreDidAlloc_UP$FUNC);
    static final FunctionDescriptor PreDidAlloc_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle PreDidAlloc_DOWN$MH = RuntimeHelper.downcallHandle(
        IMallocSpyVtbl.PreDidAlloc_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void* (*PreDidAlloc)(IMallocSpy*,void*,BOOL);
     * }
     */
    public interface PreDidAlloc {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2);
        static MemorySegment allocate(PreDidAlloc fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IMallocSpyVtbl.PreDidAlloc_UP$MH, fi, IMallocSpyVtbl.PreDidAlloc$FUNC, scope);
        }
        static PreDidAlloc ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2) -> {
                try {
                    return (java.lang.foreign.MemorySegment)IMallocSpyVtbl.PreDidAlloc_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle PreDidAlloc$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("PreDidAlloc"));
    public static VarHandle PreDidAlloc$VH() {
        return IMallocSpyVtbl.PreDidAlloc$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* (*PreDidAlloc)(IMallocSpy*,void*,BOOL);
     * }
     */
    public static MemorySegment PreDidAlloc$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IMallocSpyVtbl.PreDidAlloc$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* (*PreDidAlloc)(IMallocSpy*,void*,BOOL);
     * }
     */
    public static void PreDidAlloc$set(MemorySegment seg, MemorySegment x) {
        IMallocSpyVtbl.PreDidAlloc$VH.set(seg, x);
    }
    public static MemorySegment PreDidAlloc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IMallocSpyVtbl.PreDidAlloc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void PreDidAlloc$set(MemorySegment seg, long index, MemorySegment x) {
        IMallocSpyVtbl.PreDidAlloc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static PreDidAlloc PreDidAlloc(MemorySegment segment, SegmentScope scope) {
        return PreDidAlloc.ofAddress(PreDidAlloc$get(segment), scope);
    }
    static final FunctionDescriptor PostDidAlloc$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor PostDidAlloc_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle PostDidAlloc_UP$MH = RuntimeHelper.upcallHandle(PostDidAlloc.class, "apply", IMallocSpyVtbl.PostDidAlloc_UP$FUNC);
    static final FunctionDescriptor PostDidAlloc_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle PostDidAlloc_DOWN$MH = RuntimeHelper.downcallHandle(
        IMallocSpyVtbl.PostDidAlloc_DOWN$FUNC
    );
    /**
     * {@snippet :
 * int (*PostDidAlloc)(IMallocSpy*,void*,BOOL,int);
     * }
     */
    public interface PostDidAlloc {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, int _x3);
        static MemorySegment allocate(PostDidAlloc fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IMallocSpyVtbl.PostDidAlloc_UP$MH, fi, IMallocSpyVtbl.PostDidAlloc$FUNC, scope);
        }
        static PostDidAlloc ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, int __x3) -> {
                try {
                    return (int)IMallocSpyVtbl.PostDidAlloc_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle PostDidAlloc$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("PostDidAlloc"));
    public static VarHandle PostDidAlloc$VH() {
        return IMallocSpyVtbl.PostDidAlloc$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*PostDidAlloc)(IMallocSpy*,void*,BOOL,int);
     * }
     */
    public static MemorySegment PostDidAlloc$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IMallocSpyVtbl.PostDidAlloc$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*PostDidAlloc)(IMallocSpy*,void*,BOOL,int);
     * }
     */
    public static void PostDidAlloc$set(MemorySegment seg, MemorySegment x) {
        IMallocSpyVtbl.PostDidAlloc$VH.set(seg, x);
    }
    public static MemorySegment PostDidAlloc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IMallocSpyVtbl.PostDidAlloc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void PostDidAlloc$set(MemorySegment seg, long index, MemorySegment x) {
        IMallocSpyVtbl.PostDidAlloc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static PostDidAlloc PostDidAlloc(MemorySegment segment, SegmentScope scope) {
        return PostDidAlloc.ofAddress(PostDidAlloc$get(segment), scope);
    }
    static final FunctionDescriptor PreHeapMinimize$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor PreHeapMinimize_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle PreHeapMinimize_UP$MH = RuntimeHelper.upcallHandle(PreHeapMinimize.class, "apply", IMallocSpyVtbl.PreHeapMinimize_UP$FUNC);
    static final FunctionDescriptor PreHeapMinimize_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle PreHeapMinimize_DOWN$MH = RuntimeHelper.downcallHandle(
        IMallocSpyVtbl.PreHeapMinimize_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*PreHeapMinimize)(IMallocSpy*);
     * }
     */
    public interface PreHeapMinimize {

        void apply(java.lang.foreign.MemorySegment pParameter);
        static MemorySegment allocate(PreHeapMinimize fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IMallocSpyVtbl.PreHeapMinimize_UP$MH, fi, IMallocSpyVtbl.PreHeapMinimize$FUNC, scope);
        }
        static PreHeapMinimize ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _pParameter) -> {
                try {
                    IMallocSpyVtbl.PreHeapMinimize_DOWN$MH.invokeExact(symbol, _pParameter);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle PreHeapMinimize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("PreHeapMinimize"));
    public static VarHandle PreHeapMinimize$VH() {
        return IMallocSpyVtbl.PreHeapMinimize$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*PreHeapMinimize)(IMallocSpy*);
     * }
     */
    public static MemorySegment PreHeapMinimize$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IMallocSpyVtbl.PreHeapMinimize$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*PreHeapMinimize)(IMallocSpy*);
     * }
     */
    public static void PreHeapMinimize$set(MemorySegment seg, MemorySegment x) {
        IMallocSpyVtbl.PreHeapMinimize$VH.set(seg, x);
    }
    public static MemorySegment PreHeapMinimize$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IMallocSpyVtbl.PreHeapMinimize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void PreHeapMinimize$set(MemorySegment seg, long index, MemorySegment x) {
        IMallocSpyVtbl.PreHeapMinimize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static PreHeapMinimize PreHeapMinimize(MemorySegment segment, SegmentScope scope) {
        return PreHeapMinimize.ofAddress(PreHeapMinimize$get(segment), scope);
    }
    static final FunctionDescriptor PostHeapMinimize$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor PostHeapMinimize_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle PostHeapMinimize_UP$MH = RuntimeHelper.upcallHandle(PostHeapMinimize.class, "apply", IMallocSpyVtbl.PostHeapMinimize_UP$FUNC);
    static final FunctionDescriptor PostHeapMinimize_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle PostHeapMinimize_DOWN$MH = RuntimeHelper.downcallHandle(
        IMallocSpyVtbl.PostHeapMinimize_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*PostHeapMinimize)(IMallocSpy*);
     * }
     */
    public interface PostHeapMinimize {

        void apply(java.lang.foreign.MemorySegment pParameter);
        static MemorySegment allocate(PostHeapMinimize fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IMallocSpyVtbl.PostHeapMinimize_UP$MH, fi, IMallocSpyVtbl.PostHeapMinimize$FUNC, scope);
        }
        static PostHeapMinimize ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _pParameter) -> {
                try {
                    IMallocSpyVtbl.PostHeapMinimize_DOWN$MH.invokeExact(symbol, _pParameter);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle PostHeapMinimize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("PostHeapMinimize"));
    public static VarHandle PostHeapMinimize$VH() {
        return IMallocSpyVtbl.PostHeapMinimize$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*PostHeapMinimize)(IMallocSpy*);
     * }
     */
    public static MemorySegment PostHeapMinimize$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IMallocSpyVtbl.PostHeapMinimize$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*PostHeapMinimize)(IMallocSpy*);
     * }
     */
    public static void PostHeapMinimize$set(MemorySegment seg, MemorySegment x) {
        IMallocSpyVtbl.PostHeapMinimize$VH.set(seg, x);
    }
    public static MemorySegment PostHeapMinimize$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IMallocSpyVtbl.PostHeapMinimize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void PostHeapMinimize$set(MemorySegment seg, long index, MemorySegment x) {
        IMallocSpyVtbl.PostHeapMinimize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static PostHeapMinimize PostHeapMinimize(MemorySegment segment, SegmentScope scope) {
        return PostHeapMinimize.ofAddress(PostHeapMinimize$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


