// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct {
 *     DWORDLONG UsnJournalID;
 *     USN FirstUsn;
 *     USN NextUsn;
 *     USN LowestValidUsn;
 *     USN MaxUsn;
 *     DWORDLONG MaximumSize;
 *     DWORDLONG AllocationDelta;
 *     WORD MinSupportedMajorVersion;
 *     WORD MaxSupportedMajorVersion;
 *     DWORD Flags;
 *     DWORDLONG RangeTrackChunkSize;
 *     LONGLONG RangeTrackFileSizeThreshold;
 * };
 * }
 */
public class USN_JOURNAL_DATA_V2 {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG_LONG$LAYOUT.withName("UsnJournalID"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("FirstUsn"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("NextUsn"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("LowestValidUsn"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("MaxUsn"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("MaximumSize"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("AllocationDelta"),
        Constants$root.C_SHORT$LAYOUT.withName("MinSupportedMajorVersion"),
        Constants$root.C_SHORT$LAYOUT.withName("MaxSupportedMajorVersion"),
        Constants$root.C_LONG$LAYOUT.withName("Flags"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("RangeTrackChunkSize"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("RangeTrackFileSizeThreshold")
    );
    public static MemoryLayout $LAYOUT() {
        return USN_JOURNAL_DATA_V2.$struct$LAYOUT;
    }
    static final VarHandle UsnJournalID$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("UsnJournalID"));
    public static VarHandle UsnJournalID$VH() {
        return USN_JOURNAL_DATA_V2.UsnJournalID$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORDLONG UsnJournalID;
     * }
     */
    public static long UsnJournalID$get(MemorySegment seg) {
        return (long)USN_JOURNAL_DATA_V2.UsnJournalID$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORDLONG UsnJournalID;
     * }
     */
    public static void UsnJournalID$set(MemorySegment seg, long x) {
        USN_JOURNAL_DATA_V2.UsnJournalID$VH.set(seg, x);
    }
    public static long UsnJournalID$get(MemorySegment seg, long index) {
        return (long)USN_JOURNAL_DATA_V2.UsnJournalID$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void UsnJournalID$set(MemorySegment seg, long index, long x) {
        USN_JOURNAL_DATA_V2.UsnJournalID$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle FirstUsn$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("FirstUsn"));
    public static VarHandle FirstUsn$VH() {
        return USN_JOURNAL_DATA_V2.FirstUsn$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * USN FirstUsn;
     * }
     */
    public static long FirstUsn$get(MemorySegment seg) {
        return (long)USN_JOURNAL_DATA_V2.FirstUsn$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * USN FirstUsn;
     * }
     */
    public static void FirstUsn$set(MemorySegment seg, long x) {
        USN_JOURNAL_DATA_V2.FirstUsn$VH.set(seg, x);
    }
    public static long FirstUsn$get(MemorySegment seg, long index) {
        return (long)USN_JOURNAL_DATA_V2.FirstUsn$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void FirstUsn$set(MemorySegment seg, long index, long x) {
        USN_JOURNAL_DATA_V2.FirstUsn$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle NextUsn$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("NextUsn"));
    public static VarHandle NextUsn$VH() {
        return USN_JOURNAL_DATA_V2.NextUsn$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * USN NextUsn;
     * }
     */
    public static long NextUsn$get(MemorySegment seg) {
        return (long)USN_JOURNAL_DATA_V2.NextUsn$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * USN NextUsn;
     * }
     */
    public static void NextUsn$set(MemorySegment seg, long x) {
        USN_JOURNAL_DATA_V2.NextUsn$VH.set(seg, x);
    }
    public static long NextUsn$get(MemorySegment seg, long index) {
        return (long)USN_JOURNAL_DATA_V2.NextUsn$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void NextUsn$set(MemorySegment seg, long index, long x) {
        USN_JOURNAL_DATA_V2.NextUsn$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle LowestValidUsn$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("LowestValidUsn"));
    public static VarHandle LowestValidUsn$VH() {
        return USN_JOURNAL_DATA_V2.LowestValidUsn$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * USN LowestValidUsn;
     * }
     */
    public static long LowestValidUsn$get(MemorySegment seg) {
        return (long)USN_JOURNAL_DATA_V2.LowestValidUsn$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * USN LowestValidUsn;
     * }
     */
    public static void LowestValidUsn$set(MemorySegment seg, long x) {
        USN_JOURNAL_DATA_V2.LowestValidUsn$VH.set(seg, x);
    }
    public static long LowestValidUsn$get(MemorySegment seg, long index) {
        return (long)USN_JOURNAL_DATA_V2.LowestValidUsn$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void LowestValidUsn$set(MemorySegment seg, long index, long x) {
        USN_JOURNAL_DATA_V2.LowestValidUsn$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MaxUsn$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("MaxUsn"));
    public static VarHandle MaxUsn$VH() {
        return USN_JOURNAL_DATA_V2.MaxUsn$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * USN MaxUsn;
     * }
     */
    public static long MaxUsn$get(MemorySegment seg) {
        return (long)USN_JOURNAL_DATA_V2.MaxUsn$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * USN MaxUsn;
     * }
     */
    public static void MaxUsn$set(MemorySegment seg, long x) {
        USN_JOURNAL_DATA_V2.MaxUsn$VH.set(seg, x);
    }
    public static long MaxUsn$get(MemorySegment seg, long index) {
        return (long)USN_JOURNAL_DATA_V2.MaxUsn$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MaxUsn$set(MemorySegment seg, long index, long x) {
        USN_JOURNAL_DATA_V2.MaxUsn$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MaximumSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("MaximumSize"));
    public static VarHandle MaximumSize$VH() {
        return USN_JOURNAL_DATA_V2.MaximumSize$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORDLONG MaximumSize;
     * }
     */
    public static long MaximumSize$get(MemorySegment seg) {
        return (long)USN_JOURNAL_DATA_V2.MaximumSize$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORDLONG MaximumSize;
     * }
     */
    public static void MaximumSize$set(MemorySegment seg, long x) {
        USN_JOURNAL_DATA_V2.MaximumSize$VH.set(seg, x);
    }
    public static long MaximumSize$get(MemorySegment seg, long index) {
        return (long)USN_JOURNAL_DATA_V2.MaximumSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MaximumSize$set(MemorySegment seg, long index, long x) {
        USN_JOURNAL_DATA_V2.MaximumSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle AllocationDelta$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AllocationDelta"));
    public static VarHandle AllocationDelta$VH() {
        return USN_JOURNAL_DATA_V2.AllocationDelta$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORDLONG AllocationDelta;
     * }
     */
    public static long AllocationDelta$get(MemorySegment seg) {
        return (long)USN_JOURNAL_DATA_V2.AllocationDelta$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORDLONG AllocationDelta;
     * }
     */
    public static void AllocationDelta$set(MemorySegment seg, long x) {
        USN_JOURNAL_DATA_V2.AllocationDelta$VH.set(seg, x);
    }
    public static long AllocationDelta$get(MemorySegment seg, long index) {
        return (long)USN_JOURNAL_DATA_V2.AllocationDelta$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AllocationDelta$set(MemorySegment seg, long index, long x) {
        USN_JOURNAL_DATA_V2.AllocationDelta$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MinSupportedMajorVersion$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("MinSupportedMajorVersion"));
    public static VarHandle MinSupportedMajorVersion$VH() {
        return USN_JOURNAL_DATA_V2.MinSupportedMajorVersion$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD MinSupportedMajorVersion;
     * }
     */
    public static short MinSupportedMajorVersion$get(MemorySegment seg) {
        return (short)USN_JOURNAL_DATA_V2.MinSupportedMajorVersion$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD MinSupportedMajorVersion;
     * }
     */
    public static void MinSupportedMajorVersion$set(MemorySegment seg, short x) {
        USN_JOURNAL_DATA_V2.MinSupportedMajorVersion$VH.set(seg, x);
    }
    public static short MinSupportedMajorVersion$get(MemorySegment seg, long index) {
        return (short)USN_JOURNAL_DATA_V2.MinSupportedMajorVersion$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MinSupportedMajorVersion$set(MemorySegment seg, long index, short x) {
        USN_JOURNAL_DATA_V2.MinSupportedMajorVersion$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MaxSupportedMajorVersion$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("MaxSupportedMajorVersion"));
    public static VarHandle MaxSupportedMajorVersion$VH() {
        return USN_JOURNAL_DATA_V2.MaxSupportedMajorVersion$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD MaxSupportedMajorVersion;
     * }
     */
    public static short MaxSupportedMajorVersion$get(MemorySegment seg) {
        return (short)USN_JOURNAL_DATA_V2.MaxSupportedMajorVersion$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD MaxSupportedMajorVersion;
     * }
     */
    public static void MaxSupportedMajorVersion$set(MemorySegment seg, short x) {
        USN_JOURNAL_DATA_V2.MaxSupportedMajorVersion$VH.set(seg, x);
    }
    public static short MaxSupportedMajorVersion$get(MemorySegment seg, long index) {
        return (short)USN_JOURNAL_DATA_V2.MaxSupportedMajorVersion$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MaxSupportedMajorVersion$set(MemorySegment seg, long index, short x) {
        USN_JOURNAL_DATA_V2.MaxSupportedMajorVersion$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Flags"));
    public static VarHandle Flags$VH() {
        return USN_JOURNAL_DATA_V2.Flags$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Flags;
     * }
     */
    public static int Flags$get(MemorySegment seg) {
        return (int)USN_JOURNAL_DATA_V2.Flags$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Flags;
     * }
     */
    public static void Flags$set(MemorySegment seg, int x) {
        USN_JOURNAL_DATA_V2.Flags$VH.set(seg, x);
    }
    public static int Flags$get(MemorySegment seg, long index) {
        return (int)USN_JOURNAL_DATA_V2.Flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Flags$set(MemorySegment seg, long index, int x) {
        USN_JOURNAL_DATA_V2.Flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle RangeTrackChunkSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("RangeTrackChunkSize"));
    public static VarHandle RangeTrackChunkSize$VH() {
        return USN_JOURNAL_DATA_V2.RangeTrackChunkSize$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORDLONG RangeTrackChunkSize;
     * }
     */
    public static long RangeTrackChunkSize$get(MemorySegment seg) {
        return (long)USN_JOURNAL_DATA_V2.RangeTrackChunkSize$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORDLONG RangeTrackChunkSize;
     * }
     */
    public static void RangeTrackChunkSize$set(MemorySegment seg, long x) {
        USN_JOURNAL_DATA_V2.RangeTrackChunkSize$VH.set(seg, x);
    }
    public static long RangeTrackChunkSize$get(MemorySegment seg, long index) {
        return (long)USN_JOURNAL_DATA_V2.RangeTrackChunkSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void RangeTrackChunkSize$set(MemorySegment seg, long index, long x) {
        USN_JOURNAL_DATA_V2.RangeTrackChunkSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle RangeTrackFileSizeThreshold$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("RangeTrackFileSizeThreshold"));
    public static VarHandle RangeTrackFileSizeThreshold$VH() {
        return USN_JOURNAL_DATA_V2.RangeTrackFileSizeThreshold$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LONGLONG RangeTrackFileSizeThreshold;
     * }
     */
    public static long RangeTrackFileSizeThreshold$get(MemorySegment seg) {
        return (long)USN_JOURNAL_DATA_V2.RangeTrackFileSizeThreshold$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LONGLONG RangeTrackFileSizeThreshold;
     * }
     */
    public static void RangeTrackFileSizeThreshold$set(MemorySegment seg, long x) {
        USN_JOURNAL_DATA_V2.RangeTrackFileSizeThreshold$VH.set(seg, x);
    }
    public static long RangeTrackFileSizeThreshold$get(MemorySegment seg, long index) {
        return (long)USN_JOURNAL_DATA_V2.RangeTrackFileSizeThreshold$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void RangeTrackFileSizeThreshold$set(MemorySegment seg, long index, long x) {
        USN_JOURNAL_DATA_V2.RangeTrackFileSizeThreshold$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


