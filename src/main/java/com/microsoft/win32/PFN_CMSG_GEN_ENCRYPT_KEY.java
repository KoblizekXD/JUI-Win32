// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * int (*PFN_CMSG_GEN_ENCRYPT_KEY)(unsigned long long* phCryptProv,struct _CRYPT_ALGORITHM_IDENTIFIER* paiEncrypt,void* pvEncryptAuxInfo,struct _CERT_PUBLIC_KEY_INFO* pPublicKeyInfo,void* (*pfnAlloc)(unsigned long long),unsigned long long* phEncryptKey,unsigned char** ppbEncryptParameters,unsigned long* pcbEncryptParameters);
 * }
 */
public interface PFN_CMSG_GEN_ENCRYPT_KEY {

    int apply(java.lang.foreign.MemorySegment phCryptProv, java.lang.foreign.MemorySegment paiEncrypt, java.lang.foreign.MemorySegment pvEncryptAuxInfo, java.lang.foreign.MemorySegment pPublicKeyInfo, java.lang.foreign.MemorySegment pfnAlloc, java.lang.foreign.MemorySegment phEncryptKey, java.lang.foreign.MemorySegment ppbEncryptParameters, java.lang.foreign.MemorySegment pcbEncryptParameters);
    static MemorySegment allocate(PFN_CMSG_GEN_ENCRYPT_KEY fi, SegmentScope scope) {
        return RuntimeHelper.upcallStub(constants$747.PFN_CMSG_GEN_ENCRYPT_KEY_UP$MH, fi, constants$747.PFN_CMSG_GEN_ENCRYPT_KEY$FUNC, scope);
    }
    static PFN_CMSG_GEN_ENCRYPT_KEY ofAddress(MemorySegment addr, SegmentScope scope) {
        MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
        return (java.lang.foreign.MemorySegment _phCryptProv, java.lang.foreign.MemorySegment _paiEncrypt, java.lang.foreign.MemorySegment _pvEncryptAuxInfo, java.lang.foreign.MemorySegment _pPublicKeyInfo, java.lang.foreign.MemorySegment _pfnAlloc, java.lang.foreign.MemorySegment _phEncryptKey, java.lang.foreign.MemorySegment _ppbEncryptParameters, java.lang.foreign.MemorySegment _pcbEncryptParameters) -> {
            try {
                return (int)constants$747.PFN_CMSG_GEN_ENCRYPT_KEY_DOWN$MH.invokeExact(symbol, _phCryptProv, _paiEncrypt, _pvEncryptAuxInfo, _pPublicKeyInfo, _pfnAlloc, _phEncryptKey, _ppbEncryptParameters, _pcbEncryptParameters);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


