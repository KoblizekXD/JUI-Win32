// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct tagTTPOLYGONHEADER {
 *     DWORD cb;
 *     DWORD dwType;
 *     POINTFX pfxStart;
 * };
 * }
 */
public class tagTTPOLYGONHEADER {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("cb"),
        Constants$root.C_LONG$LAYOUT.withName("dwType"),
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_SHORT$LAYOUT.withName("fract"),
                Constants$root.C_SHORT$LAYOUT.withName("value")
            ).withName("x"),
            MemoryLayout.structLayout(
                Constants$root.C_SHORT$LAYOUT.withName("fract"),
                Constants$root.C_SHORT$LAYOUT.withName("value")
            ).withName("y")
        ).withName("pfxStart")
    ).withName("tagTTPOLYGONHEADER");
    public static MemoryLayout $LAYOUT() {
        return tagTTPOLYGONHEADER.$struct$LAYOUT;
    }
    static final VarHandle cb$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cb"));
    public static VarHandle cb$VH() {
        return tagTTPOLYGONHEADER.cb$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD cb;
     * }
     */
    public static int cb$get(MemorySegment seg) {
        return (int)tagTTPOLYGONHEADER.cb$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD cb;
     * }
     */
    public static void cb$set(MemorySegment seg, int x) {
        tagTTPOLYGONHEADER.cb$VH.set(seg, x);
    }
    public static int cb$get(MemorySegment seg, long index) {
        return (int)tagTTPOLYGONHEADER.cb$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cb$set(MemorySegment seg, long index, int x) {
        tagTTPOLYGONHEADER.cb$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwType$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwType"));
    public static VarHandle dwType$VH() {
        return tagTTPOLYGONHEADER.dwType$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwType;
     * }
     */
    public static int dwType$get(MemorySegment seg) {
        return (int)tagTTPOLYGONHEADER.dwType$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwType;
     * }
     */
    public static void dwType$set(MemorySegment seg, int x) {
        tagTTPOLYGONHEADER.dwType$VH.set(seg, x);
    }
    public static int dwType$get(MemorySegment seg, long index) {
        return (int)tagTTPOLYGONHEADER.dwType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwType$set(MemorySegment seg, long index, int x) {
        tagTTPOLYGONHEADER.dwType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment pfxStart$slice(MemorySegment seg) {
        return seg.asSlice(8, 8);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


