// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct tagCOLORCORRECTPALETTE {
 *     EMR emr;
 *     DWORD ihPalette;
 *     DWORD nFirstEntry;
 *     DWORD nPalEntries;
 *     DWORD nReserved;
 * };
 * }
 */
public class tagCOLORCORRECTPALETTE {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("iType"),
            Constants$root.C_LONG$LAYOUT.withName("nSize")
        ).withName("emr"),
        Constants$root.C_LONG$LAYOUT.withName("ihPalette"),
        Constants$root.C_LONG$LAYOUT.withName("nFirstEntry"),
        Constants$root.C_LONG$LAYOUT.withName("nPalEntries"),
        Constants$root.C_LONG$LAYOUT.withName("nReserved")
    ).withName("tagCOLORCORRECTPALETTE");
    public static MemoryLayout $LAYOUT() {
        return tagCOLORCORRECTPALETTE.$struct$LAYOUT;
    }
    public static MemorySegment emr$slice(MemorySegment seg) {
        return seg.asSlice(0, 8);
    }
    static final VarHandle ihPalette$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ihPalette"));
    public static VarHandle ihPalette$VH() {
        return tagCOLORCORRECTPALETTE.ihPalette$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD ihPalette;
     * }
     */
    public static int ihPalette$get(MemorySegment seg) {
        return (int)tagCOLORCORRECTPALETTE.ihPalette$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD ihPalette;
     * }
     */
    public static void ihPalette$set(MemorySegment seg, int x) {
        tagCOLORCORRECTPALETTE.ihPalette$VH.set(seg, x);
    }
    public static int ihPalette$get(MemorySegment seg, long index) {
        return (int)tagCOLORCORRECTPALETTE.ihPalette$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ihPalette$set(MemorySegment seg, long index, int x) {
        tagCOLORCORRECTPALETTE.ihPalette$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle nFirstEntry$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("nFirstEntry"));
    public static VarHandle nFirstEntry$VH() {
        return tagCOLORCORRECTPALETTE.nFirstEntry$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD nFirstEntry;
     * }
     */
    public static int nFirstEntry$get(MemorySegment seg) {
        return (int)tagCOLORCORRECTPALETTE.nFirstEntry$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD nFirstEntry;
     * }
     */
    public static void nFirstEntry$set(MemorySegment seg, int x) {
        tagCOLORCORRECTPALETTE.nFirstEntry$VH.set(seg, x);
    }
    public static int nFirstEntry$get(MemorySegment seg, long index) {
        return (int)tagCOLORCORRECTPALETTE.nFirstEntry$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nFirstEntry$set(MemorySegment seg, long index, int x) {
        tagCOLORCORRECTPALETTE.nFirstEntry$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle nPalEntries$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("nPalEntries"));
    public static VarHandle nPalEntries$VH() {
        return tagCOLORCORRECTPALETTE.nPalEntries$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD nPalEntries;
     * }
     */
    public static int nPalEntries$get(MemorySegment seg) {
        return (int)tagCOLORCORRECTPALETTE.nPalEntries$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD nPalEntries;
     * }
     */
    public static void nPalEntries$set(MemorySegment seg, int x) {
        tagCOLORCORRECTPALETTE.nPalEntries$VH.set(seg, x);
    }
    public static int nPalEntries$get(MemorySegment seg, long index) {
        return (int)tagCOLORCORRECTPALETTE.nPalEntries$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nPalEntries$set(MemorySegment seg, long index, int x) {
        tagCOLORCORRECTPALETTE.nPalEntries$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle nReserved$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("nReserved"));
    public static VarHandle nReserved$VH() {
        return tagCOLORCORRECTPALETTE.nReserved$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD nReserved;
     * }
     */
    public static int nReserved$get(MemorySegment seg) {
        return (int)tagCOLORCORRECTPALETTE.nReserved$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD nReserved;
     * }
     */
    public static void nReserved$set(MemorySegment seg, int x) {
        tagCOLORCORRECTPALETTE.nReserved$VH.set(seg, x);
    }
    public static int nReserved$get(MemorySegment seg, long index) {
        return (int)tagCOLORCORRECTPALETTE.nReserved$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nReserved$set(MemorySegment seg, long index, int x) {
        tagCOLORCORRECTPALETTE.nReserved$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


