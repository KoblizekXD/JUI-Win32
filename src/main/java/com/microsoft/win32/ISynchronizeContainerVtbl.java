// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct ISynchronizeContainerVtbl {
 *     HRESULT (*QueryInterface)(ISynchronizeContainer*,const IID*,void**);
 *     ULONG (*AddRef)(ISynchronizeContainer*);
 *     ULONG (*Release)(ISynchronizeContainer*);
 *     HRESULT (*AddSynchronize)(ISynchronizeContainer*,ISynchronize*);
 *     HRESULT (*WaitMultiple)(ISynchronizeContainer*,DWORD,DWORD,ISynchronize**);
 * };
 * }
 */
public class ISynchronizeContainerVtbl {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("AddSynchronize"),
        Constants$root.C_POINTER$LAYOUT.withName("WaitMultiple")
    ).withName("ISynchronizeContainerVtbl");
    public static MemoryLayout $LAYOUT() {
        return ISynchronizeContainerVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor QueryInterface_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_UP$MH = RuntimeHelper.upcallHandle(QueryInterface.class, "apply", ISynchronizeContainerVtbl.QueryInterface_UP$FUNC);
    static final FunctionDescriptor QueryInterface_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_DOWN$MH = RuntimeHelper.downcallHandle(
        ISynchronizeContainerVtbl.QueryInterface_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(ISynchronizeContainer*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ISynchronizeContainerVtbl.QueryInterface_UP$MH, fi, ISynchronizeContainerVtbl.QueryInterface$FUNC, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)ISynchronizeContainerVtbl.QueryInterface_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return ISynchronizeContainerVtbl.QueryInterface$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(ISynchronizeContainer*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ISynchronizeContainerVtbl.QueryInterface$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(ISynchronizeContainer*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        ISynchronizeContainerVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ISynchronizeContainerVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        ISynchronizeContainerVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, SegmentScope scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor AddRef_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_UP$MH = RuntimeHelper.upcallHandle(AddRef.class, "apply", ISynchronizeContainerVtbl.AddRef_UP$FUNC);
    static final FunctionDescriptor AddRef_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_DOWN$MH = RuntimeHelper.downcallHandle(
        ISynchronizeContainerVtbl.AddRef_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*AddRef)(ISynchronizeContainer*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ISynchronizeContainerVtbl.AddRef_UP$MH, fi, ISynchronizeContainerVtbl.AddRef$FUNC, scope);
        }
        static AddRef ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)ISynchronizeContainerVtbl.AddRef_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return ISynchronizeContainerVtbl.AddRef$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(ISynchronizeContainer*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ISynchronizeContainerVtbl.AddRef$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(ISynchronizeContainer*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        ISynchronizeContainerVtbl.AddRef$VH.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ISynchronizeContainerVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        ISynchronizeContainerVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, SegmentScope scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Release_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_UP$MH = RuntimeHelper.upcallHandle(Release.class, "apply", ISynchronizeContainerVtbl.Release_UP$FUNC);
    static final FunctionDescriptor Release_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_DOWN$MH = RuntimeHelper.downcallHandle(
        ISynchronizeContainerVtbl.Release_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*Release)(ISynchronizeContainer*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ISynchronizeContainerVtbl.Release_UP$MH, fi, ISynchronizeContainerVtbl.Release$FUNC, scope);
        }
        static Release ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)ISynchronizeContainerVtbl.Release_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return ISynchronizeContainerVtbl.Release$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(ISynchronizeContainer*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ISynchronizeContainerVtbl.Release$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(ISynchronizeContainer*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        ISynchronizeContainerVtbl.Release$VH.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ISynchronizeContainerVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        ISynchronizeContainerVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, SegmentScope scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    static final FunctionDescriptor AddSynchronize$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor AddSynchronize_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddSynchronize_UP$MH = RuntimeHelper.upcallHandle(AddSynchronize.class, "apply", ISynchronizeContainerVtbl.AddSynchronize_UP$FUNC);
    static final FunctionDescriptor AddSynchronize_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddSynchronize_DOWN$MH = RuntimeHelper.downcallHandle(
        ISynchronizeContainerVtbl.AddSynchronize_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*AddSynchronize)(ISynchronizeContainer*,ISynchronize*);
     * }
     */
    public interface AddSynchronize {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(AddSynchronize fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ISynchronizeContainerVtbl.AddSynchronize_UP$MH, fi, ISynchronizeContainerVtbl.AddSynchronize$FUNC, scope);
        }
        static AddSynchronize ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)ISynchronizeContainerVtbl.AddSynchronize_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddSynchronize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddSynchronize"));
    public static VarHandle AddSynchronize$VH() {
        return ISynchronizeContainerVtbl.AddSynchronize$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*AddSynchronize)(ISynchronizeContainer*,ISynchronize*);
     * }
     */
    public static MemorySegment AddSynchronize$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ISynchronizeContainerVtbl.AddSynchronize$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*AddSynchronize)(ISynchronizeContainer*,ISynchronize*);
     * }
     */
    public static void AddSynchronize$set(MemorySegment seg, MemorySegment x) {
        ISynchronizeContainerVtbl.AddSynchronize$VH.set(seg, x);
    }
    public static MemorySegment AddSynchronize$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ISynchronizeContainerVtbl.AddSynchronize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddSynchronize$set(MemorySegment seg, long index, MemorySegment x) {
        ISynchronizeContainerVtbl.AddSynchronize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddSynchronize AddSynchronize(MemorySegment segment, SegmentScope scope) {
        return AddSynchronize.ofAddress(AddSynchronize$get(segment), scope);
    }
    static final FunctionDescriptor WaitMultiple$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor WaitMultiple_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle WaitMultiple_UP$MH = RuntimeHelper.upcallHandle(WaitMultiple.class, "apply", ISynchronizeContainerVtbl.WaitMultiple_UP$FUNC);
    static final FunctionDescriptor WaitMultiple_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle WaitMultiple_DOWN$MH = RuntimeHelper.downcallHandle(
        ISynchronizeContainerVtbl.WaitMultiple_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*WaitMultiple)(ISynchronizeContainer*,DWORD,DWORD,ISynchronize**);
     * }
     */
    public interface WaitMultiple {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(WaitMultiple fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ISynchronizeContainerVtbl.WaitMultiple_UP$MH, fi, ISynchronizeContainerVtbl.WaitMultiple$FUNC, scope);
        }
        static WaitMultiple ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)ISynchronizeContainerVtbl.WaitMultiple_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle WaitMultiple$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("WaitMultiple"));
    public static VarHandle WaitMultiple$VH() {
        return ISynchronizeContainerVtbl.WaitMultiple$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*WaitMultiple)(ISynchronizeContainer*,DWORD,DWORD,ISynchronize**);
     * }
     */
    public static MemorySegment WaitMultiple$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ISynchronizeContainerVtbl.WaitMultiple$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*WaitMultiple)(ISynchronizeContainer*,DWORD,DWORD,ISynchronize**);
     * }
     */
    public static void WaitMultiple$set(MemorySegment seg, MemorySegment x) {
        ISynchronizeContainerVtbl.WaitMultiple$VH.set(seg, x);
    }
    public static MemorySegment WaitMultiple$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ISynchronizeContainerVtbl.WaitMultiple$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void WaitMultiple$set(MemorySegment seg, long index, MemorySegment x) {
        ISynchronizeContainerVtbl.WaitMultiple$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static WaitMultiple WaitMultiple(MemorySegment segment, SegmentScope scope) {
        return WaitMultiple.ofAddress(WaitMultiple$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


