// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _MESSAGE_RESOURCE_ENTRY {
 *     WORD Length;
 *     WORD Flags;
 *     BYTE Text[1];
 * };
 * }
 */
public class _MESSAGE_RESOURCE_ENTRY {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_SHORT$LAYOUT.withName("Length"),
        Constants$root.C_SHORT$LAYOUT.withName("Flags"),
        MemoryLayout.sequenceLayout(1, Constants$root.C_CHAR$LAYOUT).withName("Text"),
        MemoryLayout.paddingLayout(8)
    ).withName("_MESSAGE_RESOURCE_ENTRY");
    public static MemoryLayout $LAYOUT() {
        return _MESSAGE_RESOURCE_ENTRY.$struct$LAYOUT;
    }
    static final VarHandle Length$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Length"));
    public static VarHandle Length$VH() {
        return _MESSAGE_RESOURCE_ENTRY.Length$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD Length;
     * }
     */
    public static short Length$get(MemorySegment seg) {
        return (short)_MESSAGE_RESOURCE_ENTRY.Length$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD Length;
     * }
     */
    public static void Length$set(MemorySegment seg, short x) {
        _MESSAGE_RESOURCE_ENTRY.Length$VH.set(seg, x);
    }
    public static short Length$get(MemorySegment seg, long index) {
        return (short)_MESSAGE_RESOURCE_ENTRY.Length$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Length$set(MemorySegment seg, long index, short x) {
        _MESSAGE_RESOURCE_ENTRY.Length$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Flags"));
    public static VarHandle Flags$VH() {
        return _MESSAGE_RESOURCE_ENTRY.Flags$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD Flags;
     * }
     */
    public static short Flags$get(MemorySegment seg) {
        return (short)_MESSAGE_RESOURCE_ENTRY.Flags$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD Flags;
     * }
     */
    public static void Flags$set(MemorySegment seg, short x) {
        _MESSAGE_RESOURCE_ENTRY.Flags$VH.set(seg, x);
    }
    public static short Flags$get(MemorySegment seg, long index) {
        return (short)_MESSAGE_RESOURCE_ENTRY.Flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Flags$set(MemorySegment seg, long index, short x) {
        _MESSAGE_RESOURCE_ENTRY.Flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Text$slice(MemorySegment seg) {
        return seg.asSlice(4, 1);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


