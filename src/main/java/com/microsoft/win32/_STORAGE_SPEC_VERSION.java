// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * union _STORAGE_SPEC_VERSION {
 *     struct {
 *         union  MinorVersion;
 *         WORD MajorVersion;
 *     };
 *     DWORD AsUlong;
 * };
 * }
 */
public class _STORAGE_SPEC_VERSION {

    static final UnionLayout $union$LAYOUT = MemoryLayout.unionLayout(
        MemoryLayout.structLayout(
            MemoryLayout.unionLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_CHAR$LAYOUT.withName("SubMinor"),
                    Constants$root.C_CHAR$LAYOUT.withName("Minor")
                ).withName("$anon$0"),
                Constants$root.C_SHORT$LAYOUT.withName("AsUshort")
            ).withName("MinorVersion"),
            Constants$root.C_SHORT$LAYOUT.withName("MajorVersion")
        ).withName("$anon$0"),
        Constants$root.C_LONG$LAYOUT.withName("AsUlong")
    ).withName("_STORAGE_SPEC_VERSION");
    public static MemoryLayout $LAYOUT() {
        return _STORAGE_SPEC_VERSION.$union$LAYOUT;
    }
    /**
     * {@snippet :
     * union {
     *     struct {
     *         BYTE SubMinor;
     *         BYTE Minor;
     *     };
     *     WORD AsUshort;
     * };
     * }
     */
    public static final class MinorVersion {

        // Suppresses default constructor, ensuring non-instantiability.
        private MinorVersion() {}
        static final UnionLayout MinorVersion$union$LAYOUT = MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_CHAR$LAYOUT.withName("SubMinor"),
                Constants$root.C_CHAR$LAYOUT.withName("Minor")
            ).withName("$anon$0"),
            Constants$root.C_SHORT$LAYOUT.withName("AsUshort")
        );
        public static MemoryLayout $LAYOUT() {
            return MinorVersion.MinorVersion$union$LAYOUT;
        }
        static final VarHandle SubMinor$VH = MinorVersion$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("SubMinor"));
        public static VarHandle SubMinor$VH() {
            return MinorVersion.SubMinor$VH;
        }
        /**
         * Getter for field:
         * {@snippet :
         * BYTE SubMinor;
         * }
         */
        public static byte SubMinor$get(MemorySegment seg) {
            return (byte)MinorVersion.SubMinor$VH.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * BYTE SubMinor;
         * }
         */
        public static void SubMinor$set(MemorySegment seg, byte x) {
            MinorVersion.SubMinor$VH.set(seg, x);
        }
        public static byte SubMinor$get(MemorySegment seg, long index) {
            return (byte)MinorVersion.SubMinor$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void SubMinor$set(MemorySegment seg, long index, byte x) {
            MinorVersion.SubMinor$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle Minor$VH = MinorVersion$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("Minor"));
        public static VarHandle Minor$VH() {
            return MinorVersion.Minor$VH;
        }
        /**
         * Getter for field:
         * {@snippet :
         * BYTE Minor;
         * }
         */
        public static byte Minor$get(MemorySegment seg) {
            return (byte)MinorVersion.Minor$VH.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * BYTE Minor;
         * }
         */
        public static void Minor$set(MemorySegment seg, byte x) {
            MinorVersion.Minor$VH.set(seg, x);
        }
        public static byte Minor$get(MemorySegment seg, long index) {
            return (byte)MinorVersion.Minor$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void Minor$set(MemorySegment seg, long index, byte x) {
            MinorVersion.Minor$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle AsUshort$VH = MinorVersion$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AsUshort"));
        public static VarHandle AsUshort$VH() {
            return MinorVersion.AsUshort$VH;
        }
        /**
         * Getter for field:
         * {@snippet :
         * WORD AsUshort;
         * }
         */
        public static short AsUshort$get(MemorySegment seg) {
            return (short)MinorVersion.AsUshort$VH.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * WORD AsUshort;
         * }
         */
        public static void AsUshort$set(MemorySegment seg, short x) {
            MinorVersion.AsUshort$VH.set(seg, x);
        }
        public static short AsUshort$get(MemorySegment seg, long index) {
            return (short)MinorVersion.AsUshort$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void AsUshort$set(MemorySegment seg, long index, short x) {
            MinorVersion.AsUshort$VH.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
    }

    public static MemorySegment MinorVersion$slice(MemorySegment seg) {
        return seg.asSlice(0, 2);
    }
    static final VarHandle MajorVersion$VH = $union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("MajorVersion"));
    public static VarHandle MajorVersion$VH() {
        return _STORAGE_SPEC_VERSION.MajorVersion$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD MajorVersion;
     * }
     */
    public static short MajorVersion$get(MemorySegment seg) {
        return (short)_STORAGE_SPEC_VERSION.MajorVersion$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD MajorVersion;
     * }
     */
    public static void MajorVersion$set(MemorySegment seg, short x) {
        _STORAGE_SPEC_VERSION.MajorVersion$VH.set(seg, x);
    }
    public static short MajorVersion$get(MemorySegment seg, long index) {
        return (short)_STORAGE_SPEC_VERSION.MajorVersion$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MajorVersion$set(MemorySegment seg, long index, short x) {
        _STORAGE_SPEC_VERSION.MajorVersion$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle AsUlong$VH = $union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AsUlong"));
    public static VarHandle AsUlong$VH() {
        return _STORAGE_SPEC_VERSION.AsUlong$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD AsUlong;
     * }
     */
    public static int AsUlong$get(MemorySegment seg) {
        return (int)_STORAGE_SPEC_VERSION.AsUlong$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD AsUlong;
     * }
     */
    public static void AsUlong$set(MemorySegment seg, int x) {
        _STORAGE_SPEC_VERSION.AsUlong$VH.set(seg, x);
    }
    public static int AsUlong$get(MemorySegment seg, long index) {
        return (int)_STORAGE_SPEC_VERSION.AsUlong$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AsUlong$set(MemorySegment seg, long index, int x) {
        _STORAGE_SPEC_VERSION.AsUlong$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


