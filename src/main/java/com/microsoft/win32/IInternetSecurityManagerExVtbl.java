// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IInternetSecurityManagerExVtbl {
 *     HRESULT (*QueryInterface)(IInternetSecurityManagerEx*,const IID*,void**);
 *     ULONG (*AddRef)(IInternetSecurityManagerEx*);
 *     ULONG (*Release)(IInternetSecurityManagerEx*);
 *     HRESULT (*SetSecuritySite)(IInternetSecurityManagerEx*,IInternetSecurityMgrSite*);
 *     HRESULT (*GetSecuritySite)(IInternetSecurityManagerEx*,IInternetSecurityMgrSite**);
 *     HRESULT (*MapUrlToZone)(IInternetSecurityManagerEx*,LPCWSTR,DWORD*,DWORD);
 *     HRESULT (*GetSecurityId)(IInternetSecurityManagerEx*,LPCWSTR,BYTE*,DWORD*,DWORD_PTR);
 *     HRESULT (*ProcessUrlAction)(IInternetSecurityManagerEx*,LPCWSTR,DWORD,BYTE*,DWORD,BYTE*,DWORD,DWORD,DWORD);
 *     HRESULT (*QueryCustomPolicy)(IInternetSecurityManagerEx*,LPCWSTR,const GUID*,BYTE**,DWORD*,BYTE*,DWORD,DWORD);
 *     HRESULT (*SetZoneMapping)(IInternetSecurityManagerEx*,DWORD,LPCWSTR,DWORD);
 *     HRESULT (*GetZoneMappings)(IInternetSecurityManagerEx*,DWORD,IEnumString**,DWORD);
 *     HRESULT (*ProcessUrlActionEx)(IInternetSecurityManagerEx*,LPCWSTR,DWORD,BYTE*,DWORD,BYTE*,DWORD,DWORD,DWORD,DWORD*);
 * };
 * }
 */
public class IInternetSecurityManagerExVtbl {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("SetSecuritySite"),
        Constants$root.C_POINTER$LAYOUT.withName("GetSecuritySite"),
        Constants$root.C_POINTER$LAYOUT.withName("MapUrlToZone"),
        Constants$root.C_POINTER$LAYOUT.withName("GetSecurityId"),
        Constants$root.C_POINTER$LAYOUT.withName("ProcessUrlAction"),
        Constants$root.C_POINTER$LAYOUT.withName("QueryCustomPolicy"),
        Constants$root.C_POINTER$LAYOUT.withName("SetZoneMapping"),
        Constants$root.C_POINTER$LAYOUT.withName("GetZoneMappings"),
        Constants$root.C_POINTER$LAYOUT.withName("ProcessUrlActionEx")
    ).withName("IInternetSecurityManagerExVtbl");
    public static MemoryLayout $LAYOUT() {
        return IInternetSecurityManagerExVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor QueryInterface_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_UP$MH = RuntimeHelper.upcallHandle(QueryInterface.class, "apply", IInternetSecurityManagerExVtbl.QueryInterface_UP$FUNC);
    static final FunctionDescriptor QueryInterface_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_DOWN$MH = RuntimeHelper.downcallHandle(
        IInternetSecurityManagerExVtbl.QueryInterface_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(IInternetSecurityManagerEx*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IInternetSecurityManagerExVtbl.QueryInterface_UP$MH, fi, IInternetSecurityManagerExVtbl.QueryInterface$FUNC, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IInternetSecurityManagerExVtbl.QueryInterface_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return IInternetSecurityManagerExVtbl.QueryInterface$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IInternetSecurityManagerEx*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IInternetSecurityManagerExVtbl.QueryInterface$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IInternetSecurityManagerEx*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        IInternetSecurityManagerExVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IInternetSecurityManagerExVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        IInternetSecurityManagerExVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, SegmentScope scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor AddRef_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_UP$MH = RuntimeHelper.upcallHandle(AddRef.class, "apply", IInternetSecurityManagerExVtbl.AddRef_UP$FUNC);
    static final FunctionDescriptor AddRef_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_DOWN$MH = RuntimeHelper.downcallHandle(
        IInternetSecurityManagerExVtbl.AddRef_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*AddRef)(IInternetSecurityManagerEx*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IInternetSecurityManagerExVtbl.AddRef_UP$MH, fi, IInternetSecurityManagerExVtbl.AddRef$FUNC, scope);
        }
        static AddRef ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IInternetSecurityManagerExVtbl.AddRef_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return IInternetSecurityManagerExVtbl.AddRef$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(IInternetSecurityManagerEx*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IInternetSecurityManagerExVtbl.AddRef$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(IInternetSecurityManagerEx*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        IInternetSecurityManagerExVtbl.AddRef$VH.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IInternetSecurityManagerExVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        IInternetSecurityManagerExVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, SegmentScope scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Release_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_UP$MH = RuntimeHelper.upcallHandle(Release.class, "apply", IInternetSecurityManagerExVtbl.Release_UP$FUNC);
    static final FunctionDescriptor Release_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_DOWN$MH = RuntimeHelper.downcallHandle(
        IInternetSecurityManagerExVtbl.Release_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*Release)(IInternetSecurityManagerEx*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IInternetSecurityManagerExVtbl.Release_UP$MH, fi, IInternetSecurityManagerExVtbl.Release$FUNC, scope);
        }
        static Release ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IInternetSecurityManagerExVtbl.Release_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return IInternetSecurityManagerExVtbl.Release$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(IInternetSecurityManagerEx*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IInternetSecurityManagerExVtbl.Release$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(IInternetSecurityManagerEx*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        IInternetSecurityManagerExVtbl.Release$VH.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IInternetSecurityManagerExVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        IInternetSecurityManagerExVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, SegmentScope scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    static final FunctionDescriptor SetSecuritySite$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor SetSecuritySite_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetSecuritySite_UP$MH = RuntimeHelper.upcallHandle(SetSecuritySite.class, "apply", IInternetSecurityManagerExVtbl.SetSecuritySite_UP$FUNC);
    static final FunctionDescriptor SetSecuritySite_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetSecuritySite_DOWN$MH = RuntimeHelper.downcallHandle(
        IInternetSecurityManagerExVtbl.SetSecuritySite_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetSecuritySite)(IInternetSecurityManagerEx*,IInternetSecurityMgrSite*);
     * }
     */
    public interface SetSecuritySite {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(SetSecuritySite fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IInternetSecurityManagerExVtbl.SetSecuritySite_UP$MH, fi, IInternetSecurityManagerExVtbl.SetSecuritySite$FUNC, scope);
        }
        static SetSecuritySite ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IInternetSecurityManagerExVtbl.SetSecuritySite_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetSecuritySite$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetSecuritySite"));
    public static VarHandle SetSecuritySite$VH() {
        return IInternetSecurityManagerExVtbl.SetSecuritySite$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetSecuritySite)(IInternetSecurityManagerEx*,IInternetSecurityMgrSite*);
     * }
     */
    public static MemorySegment SetSecuritySite$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IInternetSecurityManagerExVtbl.SetSecuritySite$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetSecuritySite)(IInternetSecurityManagerEx*,IInternetSecurityMgrSite*);
     * }
     */
    public static void SetSecuritySite$set(MemorySegment seg, MemorySegment x) {
        IInternetSecurityManagerExVtbl.SetSecuritySite$VH.set(seg, x);
    }
    public static MemorySegment SetSecuritySite$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IInternetSecurityManagerExVtbl.SetSecuritySite$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetSecuritySite$set(MemorySegment seg, long index, MemorySegment x) {
        IInternetSecurityManagerExVtbl.SetSecuritySite$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetSecuritySite SetSecuritySite(MemorySegment segment, SegmentScope scope) {
        return SetSecuritySite.ofAddress(SetSecuritySite$get(segment), scope);
    }
    static final FunctionDescriptor GetSecuritySite$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetSecuritySite_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetSecuritySite_UP$MH = RuntimeHelper.upcallHandle(GetSecuritySite.class, "apply", IInternetSecurityManagerExVtbl.GetSecuritySite_UP$FUNC);
    static final FunctionDescriptor GetSecuritySite_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetSecuritySite_DOWN$MH = RuntimeHelper.downcallHandle(
        IInternetSecurityManagerExVtbl.GetSecuritySite_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetSecuritySite)(IInternetSecurityManagerEx*,IInternetSecurityMgrSite**);
     * }
     */
    public interface GetSecuritySite {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetSecuritySite fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IInternetSecurityManagerExVtbl.GetSecuritySite_UP$MH, fi, IInternetSecurityManagerExVtbl.GetSecuritySite$FUNC, scope);
        }
        static GetSecuritySite ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IInternetSecurityManagerExVtbl.GetSecuritySite_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetSecuritySite$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetSecuritySite"));
    public static VarHandle GetSecuritySite$VH() {
        return IInternetSecurityManagerExVtbl.GetSecuritySite$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetSecuritySite)(IInternetSecurityManagerEx*,IInternetSecurityMgrSite**);
     * }
     */
    public static MemorySegment GetSecuritySite$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IInternetSecurityManagerExVtbl.GetSecuritySite$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetSecuritySite)(IInternetSecurityManagerEx*,IInternetSecurityMgrSite**);
     * }
     */
    public static void GetSecuritySite$set(MemorySegment seg, MemorySegment x) {
        IInternetSecurityManagerExVtbl.GetSecuritySite$VH.set(seg, x);
    }
    public static MemorySegment GetSecuritySite$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IInternetSecurityManagerExVtbl.GetSecuritySite$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetSecuritySite$set(MemorySegment seg, long index, MemorySegment x) {
        IInternetSecurityManagerExVtbl.GetSecuritySite$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetSecuritySite GetSecuritySite(MemorySegment segment, SegmentScope scope) {
        return GetSecuritySite.ofAddress(GetSecuritySite$get(segment), scope);
    }
    static final FunctionDescriptor MapUrlToZone$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor MapUrlToZone_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle MapUrlToZone_UP$MH = RuntimeHelper.upcallHandle(MapUrlToZone.class, "apply", IInternetSecurityManagerExVtbl.MapUrlToZone_UP$FUNC);
    static final FunctionDescriptor MapUrlToZone_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle MapUrlToZone_DOWN$MH = RuntimeHelper.downcallHandle(
        IInternetSecurityManagerExVtbl.MapUrlToZone_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*MapUrlToZone)(IInternetSecurityManagerEx*,LPCWSTR,DWORD*,DWORD);
     * }
     */
    public interface MapUrlToZone {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3);
        static MemorySegment allocate(MapUrlToZone fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IInternetSecurityManagerExVtbl.MapUrlToZone_UP$MH, fi, IInternetSecurityManagerExVtbl.MapUrlToZone$FUNC, scope);
        }
        static MapUrlToZone ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3) -> {
                try {
                    return (int)IInternetSecurityManagerExVtbl.MapUrlToZone_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle MapUrlToZone$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("MapUrlToZone"));
    public static VarHandle MapUrlToZone$VH() {
        return IInternetSecurityManagerExVtbl.MapUrlToZone$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*MapUrlToZone)(IInternetSecurityManagerEx*,LPCWSTR,DWORD*,DWORD);
     * }
     */
    public static MemorySegment MapUrlToZone$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IInternetSecurityManagerExVtbl.MapUrlToZone$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*MapUrlToZone)(IInternetSecurityManagerEx*,LPCWSTR,DWORD*,DWORD);
     * }
     */
    public static void MapUrlToZone$set(MemorySegment seg, MemorySegment x) {
        IInternetSecurityManagerExVtbl.MapUrlToZone$VH.set(seg, x);
    }
    public static MemorySegment MapUrlToZone$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IInternetSecurityManagerExVtbl.MapUrlToZone$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MapUrlToZone$set(MemorySegment seg, long index, MemorySegment x) {
        IInternetSecurityManagerExVtbl.MapUrlToZone$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MapUrlToZone MapUrlToZone(MemorySegment segment, SegmentScope scope) {
        return MapUrlToZone.ofAddress(MapUrlToZone$get(segment), scope);
    }
    static final FunctionDescriptor GetSecurityId$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final FunctionDescriptor GetSecurityId_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final MethodHandle GetSecurityId_UP$MH = RuntimeHelper.upcallHandle(GetSecurityId.class, "apply", IInternetSecurityManagerExVtbl.GetSecurityId_UP$FUNC);
    static final FunctionDescriptor GetSecurityId_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final MethodHandle GetSecurityId_DOWN$MH = RuntimeHelper.downcallHandle(
        IInternetSecurityManagerExVtbl.GetSecurityId_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetSecurityId)(IInternetSecurityManagerEx*,LPCWSTR,BYTE*,DWORD*,DWORD_PTR);
     * }
     */
    public interface GetSecurityId {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, long _x4);
        static MemorySegment allocate(GetSecurityId fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IInternetSecurityManagerExVtbl.GetSecurityId_UP$MH, fi, IInternetSecurityManagerExVtbl.GetSecurityId$FUNC, scope);
        }
        static GetSecurityId ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, long __x4) -> {
                try {
                    return (int)IInternetSecurityManagerExVtbl.GetSecurityId_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetSecurityId$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetSecurityId"));
    public static VarHandle GetSecurityId$VH() {
        return IInternetSecurityManagerExVtbl.GetSecurityId$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetSecurityId)(IInternetSecurityManagerEx*,LPCWSTR,BYTE*,DWORD*,DWORD_PTR);
     * }
     */
    public static MemorySegment GetSecurityId$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IInternetSecurityManagerExVtbl.GetSecurityId$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetSecurityId)(IInternetSecurityManagerEx*,LPCWSTR,BYTE*,DWORD*,DWORD_PTR);
     * }
     */
    public static void GetSecurityId$set(MemorySegment seg, MemorySegment x) {
        IInternetSecurityManagerExVtbl.GetSecurityId$VH.set(seg, x);
    }
    public static MemorySegment GetSecurityId$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IInternetSecurityManagerExVtbl.GetSecurityId$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetSecurityId$set(MemorySegment seg, long index, MemorySegment x) {
        IInternetSecurityManagerExVtbl.GetSecurityId$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetSecurityId GetSecurityId(MemorySegment segment, SegmentScope scope) {
        return GetSecurityId.ofAddress(GetSecurityId$get(segment), scope);
    }
    static final FunctionDescriptor ProcessUrlAction$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor ProcessUrlAction_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle ProcessUrlAction_UP$MH = RuntimeHelper.upcallHandle(ProcessUrlAction.class, "apply", IInternetSecurityManagerExVtbl.ProcessUrlAction_UP$FUNC);
    static final FunctionDescriptor ProcessUrlAction_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle ProcessUrlAction_DOWN$MH = RuntimeHelper.downcallHandle(
        IInternetSecurityManagerExVtbl.ProcessUrlAction_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*ProcessUrlAction)(IInternetSecurityManagerEx*,LPCWSTR,DWORD,BYTE*,DWORD,BYTE*,DWORD,DWORD,DWORD);
     * }
     */
    public interface ProcessUrlAction {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, java.lang.foreign.MemorySegment _x3, int _x4, java.lang.foreign.MemorySegment _x5, int _x6, int _x7, int _x8);
        static MemorySegment allocate(ProcessUrlAction fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IInternetSecurityManagerExVtbl.ProcessUrlAction_UP$MH, fi, IInternetSecurityManagerExVtbl.ProcessUrlAction$FUNC, scope);
        }
        static ProcessUrlAction ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, java.lang.foreign.MemorySegment __x3, int __x4, java.lang.foreign.MemorySegment __x5, int __x6, int __x7, int __x8) -> {
                try {
                    return (int)IInternetSecurityManagerExVtbl.ProcessUrlAction_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6, __x7, __x8);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ProcessUrlAction$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ProcessUrlAction"));
    public static VarHandle ProcessUrlAction$VH() {
        return IInternetSecurityManagerExVtbl.ProcessUrlAction$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*ProcessUrlAction)(IInternetSecurityManagerEx*,LPCWSTR,DWORD,BYTE*,DWORD,BYTE*,DWORD,DWORD,DWORD);
     * }
     */
    public static MemorySegment ProcessUrlAction$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IInternetSecurityManagerExVtbl.ProcessUrlAction$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*ProcessUrlAction)(IInternetSecurityManagerEx*,LPCWSTR,DWORD,BYTE*,DWORD,BYTE*,DWORD,DWORD,DWORD);
     * }
     */
    public static void ProcessUrlAction$set(MemorySegment seg, MemorySegment x) {
        IInternetSecurityManagerExVtbl.ProcessUrlAction$VH.set(seg, x);
    }
    public static MemorySegment ProcessUrlAction$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IInternetSecurityManagerExVtbl.ProcessUrlAction$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ProcessUrlAction$set(MemorySegment seg, long index, MemorySegment x) {
        IInternetSecurityManagerExVtbl.ProcessUrlAction$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ProcessUrlAction ProcessUrlAction(MemorySegment segment, SegmentScope scope) {
        return ProcessUrlAction.ofAddress(ProcessUrlAction$get(segment), scope);
    }
    static final FunctionDescriptor QueryCustomPolicy$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor QueryCustomPolicy_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle QueryCustomPolicy_UP$MH = RuntimeHelper.upcallHandle(QueryCustomPolicy.class, "apply", IInternetSecurityManagerExVtbl.QueryCustomPolicy_UP$FUNC);
    static final FunctionDescriptor QueryCustomPolicy_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle QueryCustomPolicy_DOWN$MH = RuntimeHelper.downcallHandle(
        IInternetSecurityManagerExVtbl.QueryCustomPolicy_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*QueryCustomPolicy)(IInternetSecurityManagerEx*,LPCWSTR,const GUID*,BYTE**,DWORD*,BYTE*,DWORD,DWORD);
     * }
     */
    public interface QueryCustomPolicy {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5, int _x6, int _x7);
        static MemorySegment allocate(QueryCustomPolicy fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IInternetSecurityManagerExVtbl.QueryCustomPolicy_UP$MH, fi, IInternetSecurityManagerExVtbl.QueryCustomPolicy$FUNC, scope);
        }
        static QueryCustomPolicy ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5, int __x6, int __x7) -> {
                try {
                    return (int)IInternetSecurityManagerExVtbl.QueryCustomPolicy_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6, __x7);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryCustomPolicy$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryCustomPolicy"));
    public static VarHandle QueryCustomPolicy$VH() {
        return IInternetSecurityManagerExVtbl.QueryCustomPolicy$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryCustomPolicy)(IInternetSecurityManagerEx*,LPCWSTR,const GUID*,BYTE**,DWORD*,BYTE*,DWORD,DWORD);
     * }
     */
    public static MemorySegment QueryCustomPolicy$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IInternetSecurityManagerExVtbl.QueryCustomPolicy$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryCustomPolicy)(IInternetSecurityManagerEx*,LPCWSTR,const GUID*,BYTE**,DWORD*,BYTE*,DWORD,DWORD);
     * }
     */
    public static void QueryCustomPolicy$set(MemorySegment seg, MemorySegment x) {
        IInternetSecurityManagerExVtbl.QueryCustomPolicy$VH.set(seg, x);
    }
    public static MemorySegment QueryCustomPolicy$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IInternetSecurityManagerExVtbl.QueryCustomPolicy$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryCustomPolicy$set(MemorySegment seg, long index, MemorySegment x) {
        IInternetSecurityManagerExVtbl.QueryCustomPolicy$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryCustomPolicy QueryCustomPolicy(MemorySegment segment, SegmentScope scope) {
        return QueryCustomPolicy.ofAddress(QueryCustomPolicy$get(segment), scope);
    }
    static final FunctionDescriptor SetZoneMapping$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor SetZoneMapping_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle SetZoneMapping_UP$MH = RuntimeHelper.upcallHandle(SetZoneMapping.class, "apply", IInternetSecurityManagerExVtbl.SetZoneMapping_UP$FUNC);
    static final FunctionDescriptor SetZoneMapping_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle SetZoneMapping_DOWN$MH = RuntimeHelper.downcallHandle(
        IInternetSecurityManagerExVtbl.SetZoneMapping_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetZoneMapping)(IInternetSecurityManagerEx*,DWORD,LPCWSTR,DWORD);
     * }
     */
    public interface SetZoneMapping {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, int _x3);
        static MemorySegment allocate(SetZoneMapping fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IInternetSecurityManagerExVtbl.SetZoneMapping_UP$MH, fi, IInternetSecurityManagerExVtbl.SetZoneMapping$FUNC, scope);
        }
        static SetZoneMapping ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, int __x3) -> {
                try {
                    return (int)IInternetSecurityManagerExVtbl.SetZoneMapping_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetZoneMapping$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetZoneMapping"));
    public static VarHandle SetZoneMapping$VH() {
        return IInternetSecurityManagerExVtbl.SetZoneMapping$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetZoneMapping)(IInternetSecurityManagerEx*,DWORD,LPCWSTR,DWORD);
     * }
     */
    public static MemorySegment SetZoneMapping$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IInternetSecurityManagerExVtbl.SetZoneMapping$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetZoneMapping)(IInternetSecurityManagerEx*,DWORD,LPCWSTR,DWORD);
     * }
     */
    public static void SetZoneMapping$set(MemorySegment seg, MemorySegment x) {
        IInternetSecurityManagerExVtbl.SetZoneMapping$VH.set(seg, x);
    }
    public static MemorySegment SetZoneMapping$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IInternetSecurityManagerExVtbl.SetZoneMapping$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetZoneMapping$set(MemorySegment seg, long index, MemorySegment x) {
        IInternetSecurityManagerExVtbl.SetZoneMapping$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetZoneMapping SetZoneMapping(MemorySegment segment, SegmentScope scope) {
        return SetZoneMapping.ofAddress(SetZoneMapping$get(segment), scope);
    }
    static final FunctionDescriptor GetZoneMappings$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor GetZoneMappings_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle GetZoneMappings_UP$MH = RuntimeHelper.upcallHandle(GetZoneMappings.class, "apply", IInternetSecurityManagerExVtbl.GetZoneMappings_UP$FUNC);
    static final FunctionDescriptor GetZoneMappings_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle GetZoneMappings_DOWN$MH = RuntimeHelper.downcallHandle(
        IInternetSecurityManagerExVtbl.GetZoneMappings_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetZoneMappings)(IInternetSecurityManagerEx*,DWORD,IEnumString**,DWORD);
     * }
     */
    public interface GetZoneMappings {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, int _x3);
        static MemorySegment allocate(GetZoneMappings fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IInternetSecurityManagerExVtbl.GetZoneMappings_UP$MH, fi, IInternetSecurityManagerExVtbl.GetZoneMappings$FUNC, scope);
        }
        static GetZoneMappings ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, int __x3) -> {
                try {
                    return (int)IInternetSecurityManagerExVtbl.GetZoneMappings_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetZoneMappings$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetZoneMappings"));
    public static VarHandle GetZoneMappings$VH() {
        return IInternetSecurityManagerExVtbl.GetZoneMappings$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetZoneMappings)(IInternetSecurityManagerEx*,DWORD,IEnumString**,DWORD);
     * }
     */
    public static MemorySegment GetZoneMappings$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IInternetSecurityManagerExVtbl.GetZoneMappings$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetZoneMappings)(IInternetSecurityManagerEx*,DWORD,IEnumString**,DWORD);
     * }
     */
    public static void GetZoneMappings$set(MemorySegment seg, MemorySegment x) {
        IInternetSecurityManagerExVtbl.GetZoneMappings$VH.set(seg, x);
    }
    public static MemorySegment GetZoneMappings$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IInternetSecurityManagerExVtbl.GetZoneMappings$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetZoneMappings$set(MemorySegment seg, long index, MemorySegment x) {
        IInternetSecurityManagerExVtbl.GetZoneMappings$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetZoneMappings GetZoneMappings(MemorySegment segment, SegmentScope scope) {
        return GetZoneMappings.ofAddress(GetZoneMappings$get(segment), scope);
    }
    static final FunctionDescriptor ProcessUrlActionEx$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor ProcessUrlActionEx_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ProcessUrlActionEx_UP$MH = RuntimeHelper.upcallHandle(ProcessUrlActionEx.class, "apply", IInternetSecurityManagerExVtbl.ProcessUrlActionEx_UP$FUNC);
    static final FunctionDescriptor ProcessUrlActionEx_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ProcessUrlActionEx_DOWN$MH = RuntimeHelper.downcallHandle(
        IInternetSecurityManagerExVtbl.ProcessUrlActionEx_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*ProcessUrlActionEx)(IInternetSecurityManagerEx*,LPCWSTR,DWORD,BYTE*,DWORD,BYTE*,DWORD,DWORD,DWORD,DWORD*);
     * }
     */
    public interface ProcessUrlActionEx {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, java.lang.foreign.MemorySegment _x3, int _x4, java.lang.foreign.MemorySegment _x5, int _x6, int _x7, int _x8, java.lang.foreign.MemorySegment _x9);
        static MemorySegment allocate(ProcessUrlActionEx fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IInternetSecurityManagerExVtbl.ProcessUrlActionEx_UP$MH, fi, IInternetSecurityManagerExVtbl.ProcessUrlActionEx$FUNC, scope);
        }
        static ProcessUrlActionEx ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, java.lang.foreign.MemorySegment __x3, int __x4, java.lang.foreign.MemorySegment __x5, int __x6, int __x7, int __x8, java.lang.foreign.MemorySegment __x9) -> {
                try {
                    return (int)IInternetSecurityManagerExVtbl.ProcessUrlActionEx_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6, __x7, __x8, __x9);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ProcessUrlActionEx$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ProcessUrlActionEx"));
    public static VarHandle ProcessUrlActionEx$VH() {
        return IInternetSecurityManagerExVtbl.ProcessUrlActionEx$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*ProcessUrlActionEx)(IInternetSecurityManagerEx*,LPCWSTR,DWORD,BYTE*,DWORD,BYTE*,DWORD,DWORD,DWORD,DWORD*);
     * }
     */
    public static MemorySegment ProcessUrlActionEx$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IInternetSecurityManagerExVtbl.ProcessUrlActionEx$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*ProcessUrlActionEx)(IInternetSecurityManagerEx*,LPCWSTR,DWORD,BYTE*,DWORD,BYTE*,DWORD,DWORD,DWORD,DWORD*);
     * }
     */
    public static void ProcessUrlActionEx$set(MemorySegment seg, MemorySegment x) {
        IInternetSecurityManagerExVtbl.ProcessUrlActionEx$VH.set(seg, x);
    }
    public static MemorySegment ProcessUrlActionEx$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IInternetSecurityManagerExVtbl.ProcessUrlActionEx$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ProcessUrlActionEx$set(MemorySegment seg, long index, MemorySegment x) {
        IInternetSecurityManagerExVtbl.ProcessUrlActionEx$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ProcessUrlActionEx ProcessUrlActionEx(MemorySegment segment, SegmentScope scope) {
        return ProcessUrlActionEx.ofAddress(ProcessUrlActionEx$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


