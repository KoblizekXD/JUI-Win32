// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
final class constants$107 {

    // Suppresses default constructor, ensuring non-instantiability.
    private constants$107() {}
    static final FunctionDescriptor WAITORTIMERCALLBACK$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_CHAR$LAYOUT
    );
    static final FunctionDescriptor WAITORTIMERCALLBACK_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_CHAR$LAYOUT
    );
    static final MethodHandle WAITORTIMERCALLBACK_UP$MH = RuntimeHelper.upcallHandle(WAITORTIMERCALLBACK.class, "apply", constants$107.WAITORTIMERCALLBACK_UP$FUNC);
    static final FunctionDescriptor WAITORTIMERCALLBACK_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_CHAR$LAYOUT
    );
    static final MethodHandle WAITORTIMERCALLBACK_DOWN$MH = RuntimeHelper.downcallHandle(
        constants$107.WAITORTIMERCALLBACK_DOWN$FUNC
    );
    static final FunctionDescriptor PFLS_CALLBACK_FUNCTION$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor PFLS_CALLBACK_FUNCTION_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle PFLS_CALLBACK_FUNCTION_UP$MH = RuntimeHelper.upcallHandle(PFLS_CALLBACK_FUNCTION.class, "apply", constants$107.PFLS_CALLBACK_FUNCTION_UP$FUNC);
    static final FunctionDescriptor PFLS_CALLBACK_FUNCTION_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle PFLS_CALLBACK_FUNCTION_DOWN$MH = RuntimeHelper.downcallHandle(
        constants$107.PFLS_CALLBACK_FUNCTION_DOWN$FUNC
    );
    static final FunctionDescriptor PSECURE_MEMORY_CACHE_CALLBACK$FUNC = FunctionDescriptor.of(Constants$root.C_CHAR$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final FunctionDescriptor PSECURE_MEMORY_CACHE_CALLBACK_UP$FUNC = FunctionDescriptor.of(Constants$root.C_CHAR$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final MethodHandle PSECURE_MEMORY_CACHE_CALLBACK_UP$MH = RuntimeHelper.upcallHandle(PSECURE_MEMORY_CACHE_CALLBACK.class, "apply", constants$107.PSECURE_MEMORY_CACHE_CALLBACK_UP$FUNC);
    static final FunctionDescriptor PSECURE_MEMORY_CACHE_CALLBACK_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_CHAR$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final MethodHandle PSECURE_MEMORY_CACHE_CALLBACK_DOWN$MH = RuntimeHelper.downcallHandle(
        constants$107.PSECURE_MEMORY_CACHE_CALLBACK_DOWN$FUNC
    );
}


