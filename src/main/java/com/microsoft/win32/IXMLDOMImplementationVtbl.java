// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IXMLDOMImplementationVtbl {
 *     HRESULT (*QueryInterface)(IXMLDOMImplementation*,const IID*,void**);
 *     ULONG (*AddRef)(IXMLDOMImplementation*);
 *     ULONG (*Release)(IXMLDOMImplementation*);
 *     HRESULT (*GetTypeInfoCount)(IXMLDOMImplementation*,UINT*);
 *     HRESULT (*GetTypeInfo)(IXMLDOMImplementation*,UINT,LCID,ITypeInfo**);
 *     HRESULT (*GetIDsOfNames)(IXMLDOMImplementation*,const IID*,LPOLESTR*,UINT,LCID,DISPID*);
 *     HRESULT (*Invoke)(IXMLDOMImplementation*,DISPID,const IID*,LCID,WORD,DISPPARAMS*,VARIANT*,EXCEPINFO*,UINT*);
 *     HRESULT (*hasFeature)(IXMLDOMImplementation*,BSTR,BSTR,VARIANT_BOOL*);
 * };
 * }
 */
public class IXMLDOMImplementationVtbl {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("GetTypeInfoCount"),
        Constants$root.C_POINTER$LAYOUT.withName("GetTypeInfo"),
        Constants$root.C_POINTER$LAYOUT.withName("GetIDsOfNames"),
        Constants$root.C_POINTER$LAYOUT.withName("Invoke"),
        Constants$root.C_POINTER$LAYOUT.withName("hasFeature")
    ).withName("IXMLDOMImplementationVtbl");
    public static MemoryLayout $LAYOUT() {
        return IXMLDOMImplementationVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor QueryInterface_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_UP$MH = RuntimeHelper.upcallHandle(QueryInterface.class, "apply", IXMLDOMImplementationVtbl.QueryInterface_UP$FUNC);
    static final FunctionDescriptor QueryInterface_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDOMImplementationVtbl.QueryInterface_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(IXMLDOMImplementation*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDOMImplementationVtbl.QueryInterface_UP$MH, fi, IXMLDOMImplementationVtbl.QueryInterface$FUNC, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IXMLDOMImplementationVtbl.QueryInterface_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return IXMLDOMImplementationVtbl.QueryInterface$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IXMLDOMImplementation*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDOMImplementationVtbl.QueryInterface$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IXMLDOMImplementation*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        IXMLDOMImplementationVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDOMImplementationVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDOMImplementationVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, SegmentScope scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor AddRef_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_UP$MH = RuntimeHelper.upcallHandle(AddRef.class, "apply", IXMLDOMImplementationVtbl.AddRef_UP$FUNC);
    static final FunctionDescriptor AddRef_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDOMImplementationVtbl.AddRef_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*AddRef)(IXMLDOMImplementation*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDOMImplementationVtbl.AddRef_UP$MH, fi, IXMLDOMImplementationVtbl.AddRef$FUNC, scope);
        }
        static AddRef ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IXMLDOMImplementationVtbl.AddRef_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return IXMLDOMImplementationVtbl.AddRef$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(IXMLDOMImplementation*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDOMImplementationVtbl.AddRef$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(IXMLDOMImplementation*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        IXMLDOMImplementationVtbl.AddRef$VH.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDOMImplementationVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDOMImplementationVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, SegmentScope scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Release_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_UP$MH = RuntimeHelper.upcallHandle(Release.class, "apply", IXMLDOMImplementationVtbl.Release_UP$FUNC);
    static final FunctionDescriptor Release_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDOMImplementationVtbl.Release_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*Release)(IXMLDOMImplementation*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDOMImplementationVtbl.Release_UP$MH, fi, IXMLDOMImplementationVtbl.Release$FUNC, scope);
        }
        static Release ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IXMLDOMImplementationVtbl.Release_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return IXMLDOMImplementationVtbl.Release$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(IXMLDOMImplementation*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDOMImplementationVtbl.Release$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(IXMLDOMImplementation*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        IXMLDOMImplementationVtbl.Release$VH.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDOMImplementationVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDOMImplementationVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, SegmentScope scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    static final FunctionDescriptor GetTypeInfoCount$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetTypeInfoCount_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetTypeInfoCount_UP$MH = RuntimeHelper.upcallHandle(GetTypeInfoCount.class, "apply", IXMLDOMImplementationVtbl.GetTypeInfoCount_UP$FUNC);
    static final FunctionDescriptor GetTypeInfoCount_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetTypeInfoCount_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDOMImplementationVtbl.GetTypeInfoCount_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetTypeInfoCount)(IXMLDOMImplementation*,UINT*);
     * }
     */
    public interface GetTypeInfoCount {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetTypeInfoCount fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDOMImplementationVtbl.GetTypeInfoCount_UP$MH, fi, IXMLDOMImplementationVtbl.GetTypeInfoCount$FUNC, scope);
        }
        static GetTypeInfoCount ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IXMLDOMImplementationVtbl.GetTypeInfoCount_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetTypeInfoCount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetTypeInfoCount"));
    public static VarHandle GetTypeInfoCount$VH() {
        return IXMLDOMImplementationVtbl.GetTypeInfoCount$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetTypeInfoCount)(IXMLDOMImplementation*,UINT*);
     * }
     */
    public static MemorySegment GetTypeInfoCount$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDOMImplementationVtbl.GetTypeInfoCount$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetTypeInfoCount)(IXMLDOMImplementation*,UINT*);
     * }
     */
    public static void GetTypeInfoCount$set(MemorySegment seg, MemorySegment x) {
        IXMLDOMImplementationVtbl.GetTypeInfoCount$VH.set(seg, x);
    }
    public static MemorySegment GetTypeInfoCount$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDOMImplementationVtbl.GetTypeInfoCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTypeInfoCount$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDOMImplementationVtbl.GetTypeInfoCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTypeInfoCount GetTypeInfoCount(MemorySegment segment, SegmentScope scope) {
        return GetTypeInfoCount.ofAddress(GetTypeInfoCount$get(segment), scope);
    }
    static final FunctionDescriptor GetTypeInfo$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetTypeInfo_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetTypeInfo_UP$MH = RuntimeHelper.upcallHandle(GetTypeInfo.class, "apply", IXMLDOMImplementationVtbl.GetTypeInfo_UP$FUNC);
    static final FunctionDescriptor GetTypeInfo_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetTypeInfo_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDOMImplementationVtbl.GetTypeInfo_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetTypeInfo)(IXMLDOMImplementation*,UINT,LCID,ITypeInfo**);
     * }
     */
    public interface GetTypeInfo {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(GetTypeInfo fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDOMImplementationVtbl.GetTypeInfo_UP$MH, fi, IXMLDOMImplementationVtbl.GetTypeInfo$FUNC, scope);
        }
        static GetTypeInfo ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)IXMLDOMImplementationVtbl.GetTypeInfo_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetTypeInfo$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetTypeInfo"));
    public static VarHandle GetTypeInfo$VH() {
        return IXMLDOMImplementationVtbl.GetTypeInfo$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetTypeInfo)(IXMLDOMImplementation*,UINT,LCID,ITypeInfo**);
     * }
     */
    public static MemorySegment GetTypeInfo$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDOMImplementationVtbl.GetTypeInfo$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetTypeInfo)(IXMLDOMImplementation*,UINT,LCID,ITypeInfo**);
     * }
     */
    public static void GetTypeInfo$set(MemorySegment seg, MemorySegment x) {
        IXMLDOMImplementationVtbl.GetTypeInfo$VH.set(seg, x);
    }
    public static MemorySegment GetTypeInfo$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDOMImplementationVtbl.GetTypeInfo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTypeInfo$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDOMImplementationVtbl.GetTypeInfo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTypeInfo GetTypeInfo(MemorySegment segment, SegmentScope scope) {
        return GetTypeInfo.ofAddress(GetTypeInfo$get(segment), scope);
    }
    static final FunctionDescriptor GetIDsOfNames$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetIDsOfNames_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetIDsOfNames_UP$MH = RuntimeHelper.upcallHandle(GetIDsOfNames.class, "apply", IXMLDOMImplementationVtbl.GetIDsOfNames_UP$FUNC);
    static final FunctionDescriptor GetIDsOfNames_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetIDsOfNames_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDOMImplementationVtbl.GetIDsOfNames_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetIDsOfNames)(IXMLDOMImplementation*,const IID*,LPOLESTR*,UINT,LCID,DISPID*);
     * }
     */
    public interface GetIDsOfNames {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3, int _x4, java.lang.foreign.MemorySegment _x5);
        static MemorySegment allocate(GetIDsOfNames fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDOMImplementationVtbl.GetIDsOfNames_UP$MH, fi, IXMLDOMImplementationVtbl.GetIDsOfNames$FUNC, scope);
        }
        static GetIDsOfNames ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3, int __x4, java.lang.foreign.MemorySegment __x5) -> {
                try {
                    return (int)IXMLDOMImplementationVtbl.GetIDsOfNames_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetIDsOfNames$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetIDsOfNames"));
    public static VarHandle GetIDsOfNames$VH() {
        return IXMLDOMImplementationVtbl.GetIDsOfNames$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetIDsOfNames)(IXMLDOMImplementation*,const IID*,LPOLESTR*,UINT,LCID,DISPID*);
     * }
     */
    public static MemorySegment GetIDsOfNames$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDOMImplementationVtbl.GetIDsOfNames$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetIDsOfNames)(IXMLDOMImplementation*,const IID*,LPOLESTR*,UINT,LCID,DISPID*);
     * }
     */
    public static void GetIDsOfNames$set(MemorySegment seg, MemorySegment x) {
        IXMLDOMImplementationVtbl.GetIDsOfNames$VH.set(seg, x);
    }
    public static MemorySegment GetIDsOfNames$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDOMImplementationVtbl.GetIDsOfNames$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetIDsOfNames$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDOMImplementationVtbl.GetIDsOfNames$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetIDsOfNames GetIDsOfNames(MemorySegment segment, SegmentScope scope) {
        return GetIDsOfNames.ofAddress(GetIDsOfNames$get(segment), scope);
    }
    static final FunctionDescriptor Invoke$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_SHORT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Invoke_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_SHORT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Invoke_UP$MH = RuntimeHelper.upcallHandle(Invoke.class, "apply", IXMLDOMImplementationVtbl.Invoke_UP$FUNC);
    static final FunctionDescriptor Invoke_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_SHORT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Invoke_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDOMImplementationVtbl.Invoke_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*Invoke)(IXMLDOMImplementation*,DISPID,const IID*,LCID,WORD,DISPPARAMS*,VARIANT*,EXCEPINFO*,UINT*);
     * }
     */
    public interface Invoke {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, int _x3, short _x4, java.lang.foreign.MemorySegment _x5, java.lang.foreign.MemorySegment _x6, java.lang.foreign.MemorySegment _x7, java.lang.foreign.MemorySegment _x8);
        static MemorySegment allocate(Invoke fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDOMImplementationVtbl.Invoke_UP$MH, fi, IXMLDOMImplementationVtbl.Invoke$FUNC, scope);
        }
        static Invoke ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, int __x3, short __x4, java.lang.foreign.MemorySegment __x5, java.lang.foreign.MemorySegment __x6, java.lang.foreign.MemorySegment __x7, java.lang.foreign.MemorySegment __x8) -> {
                try {
                    return (int)IXMLDOMImplementationVtbl.Invoke_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6, __x7, __x8);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Invoke$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Invoke"));
    public static VarHandle Invoke$VH() {
        return IXMLDOMImplementationVtbl.Invoke$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Invoke)(IXMLDOMImplementation*,DISPID,const IID*,LCID,WORD,DISPPARAMS*,VARIANT*,EXCEPINFO*,UINT*);
     * }
     */
    public static MemorySegment Invoke$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDOMImplementationVtbl.Invoke$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Invoke)(IXMLDOMImplementation*,DISPID,const IID*,LCID,WORD,DISPPARAMS*,VARIANT*,EXCEPINFO*,UINT*);
     * }
     */
    public static void Invoke$set(MemorySegment seg, MemorySegment x) {
        IXMLDOMImplementationVtbl.Invoke$VH.set(seg, x);
    }
    public static MemorySegment Invoke$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDOMImplementationVtbl.Invoke$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Invoke$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDOMImplementationVtbl.Invoke$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Invoke Invoke(MemorySegment segment, SegmentScope scope) {
        return Invoke.ofAddress(Invoke$get(segment), scope);
    }
    static final FunctionDescriptor hasFeature$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor hasFeature_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle hasFeature_UP$MH = RuntimeHelper.upcallHandle(hasFeature.class, "apply", IXMLDOMImplementationVtbl.hasFeature_UP$FUNC);
    static final FunctionDescriptor hasFeature_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle hasFeature_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDOMImplementationVtbl.hasFeature_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*hasFeature)(IXMLDOMImplementation*,BSTR,BSTR,VARIANT_BOOL*);
     * }
     */
    public interface hasFeature {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(hasFeature fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDOMImplementationVtbl.hasFeature_UP$MH, fi, IXMLDOMImplementationVtbl.hasFeature$FUNC, scope);
        }
        static hasFeature ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)IXMLDOMImplementationVtbl.hasFeature_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle hasFeature$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hasFeature"));
    public static VarHandle hasFeature$VH() {
        return IXMLDOMImplementationVtbl.hasFeature$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*hasFeature)(IXMLDOMImplementation*,BSTR,BSTR,VARIANT_BOOL*);
     * }
     */
    public static MemorySegment hasFeature$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDOMImplementationVtbl.hasFeature$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*hasFeature)(IXMLDOMImplementation*,BSTR,BSTR,VARIANT_BOOL*);
     * }
     */
    public static void hasFeature$set(MemorySegment seg, MemorySegment x) {
        IXMLDOMImplementationVtbl.hasFeature$VH.set(seg, x);
    }
    public static MemorySegment hasFeature$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDOMImplementationVtbl.hasFeature$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hasFeature$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDOMImplementationVtbl.hasFeature$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static hasFeature hasFeature(MemorySegment segment, SegmentScope scope) {
        return hasFeature.ofAddress(hasFeature$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


