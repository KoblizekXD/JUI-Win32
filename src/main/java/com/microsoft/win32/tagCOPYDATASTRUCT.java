// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct tagCOPYDATASTRUCT {
 *     ULONG_PTR dwData;
 *     DWORD cbData;
 *     PVOID lpData;
 * };
 * }
 */
public class tagCOPYDATASTRUCT {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG_LONG$LAYOUT.withName("dwData"),
        Constants$root.C_LONG$LAYOUT.withName("cbData"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("lpData")
    ).withName("tagCOPYDATASTRUCT");
    public static MemoryLayout $LAYOUT() {
        return tagCOPYDATASTRUCT.$struct$LAYOUT;
    }
    static final VarHandle dwData$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwData"));
    public static VarHandle dwData$VH() {
        return tagCOPYDATASTRUCT.dwData$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG_PTR dwData;
     * }
     */
    public static long dwData$get(MemorySegment seg) {
        return (long)tagCOPYDATASTRUCT.dwData$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG_PTR dwData;
     * }
     */
    public static void dwData$set(MemorySegment seg, long x) {
        tagCOPYDATASTRUCT.dwData$VH.set(seg, x);
    }
    public static long dwData$get(MemorySegment seg, long index) {
        return (long)tagCOPYDATASTRUCT.dwData$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwData$set(MemorySegment seg, long index, long x) {
        tagCOPYDATASTRUCT.dwData$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cbData$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cbData"));
    public static VarHandle cbData$VH() {
        return tagCOPYDATASTRUCT.cbData$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD cbData;
     * }
     */
    public static int cbData$get(MemorySegment seg) {
        return (int)tagCOPYDATASTRUCT.cbData$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD cbData;
     * }
     */
    public static void cbData$set(MemorySegment seg, int x) {
        tagCOPYDATASTRUCT.cbData$VH.set(seg, x);
    }
    public static int cbData$get(MemorySegment seg, long index) {
        return (int)tagCOPYDATASTRUCT.cbData$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cbData$set(MemorySegment seg, long index, int x) {
        tagCOPYDATASTRUCT.cbData$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lpData$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lpData"));
    public static VarHandle lpData$VH() {
        return tagCOPYDATASTRUCT.lpData$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PVOID lpData;
     * }
     */
    public static MemorySegment lpData$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)tagCOPYDATASTRUCT.lpData$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PVOID lpData;
     * }
     */
    public static void lpData$set(MemorySegment seg, MemorySegment x) {
        tagCOPYDATASTRUCT.lpData$VH.set(seg, x);
    }
    public static MemorySegment lpData$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)tagCOPYDATASTRUCT.lpData$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpData$set(MemorySegment seg, long index, MemorySegment x) {
        tagCOPYDATASTRUCT.lpData$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


