// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _TAPE_WMI_OPERATIONS {
 *     DWORD Method;
 *     DWORD DataBufferSize;
 *     PVOID DataBuffer;
 * };
 * }
 */
public class _TAPE_WMI_OPERATIONS {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("Method"),
        Constants$root.C_LONG$LAYOUT.withName("DataBufferSize"),
        Constants$root.C_POINTER$LAYOUT.withName("DataBuffer")
    ).withName("_TAPE_WMI_OPERATIONS");
    public static MemoryLayout $LAYOUT() {
        return _TAPE_WMI_OPERATIONS.$struct$LAYOUT;
    }
    static final VarHandle Method$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Method"));
    public static VarHandle Method$VH() {
        return _TAPE_WMI_OPERATIONS.Method$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Method;
     * }
     */
    public static int Method$get(MemorySegment seg) {
        return (int)_TAPE_WMI_OPERATIONS.Method$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Method;
     * }
     */
    public static void Method$set(MemorySegment seg, int x) {
        _TAPE_WMI_OPERATIONS.Method$VH.set(seg, x);
    }
    public static int Method$get(MemorySegment seg, long index) {
        return (int)_TAPE_WMI_OPERATIONS.Method$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Method$set(MemorySegment seg, long index, int x) {
        _TAPE_WMI_OPERATIONS.Method$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle DataBufferSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("DataBufferSize"));
    public static VarHandle DataBufferSize$VH() {
        return _TAPE_WMI_OPERATIONS.DataBufferSize$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD DataBufferSize;
     * }
     */
    public static int DataBufferSize$get(MemorySegment seg) {
        return (int)_TAPE_WMI_OPERATIONS.DataBufferSize$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD DataBufferSize;
     * }
     */
    public static void DataBufferSize$set(MemorySegment seg, int x) {
        _TAPE_WMI_OPERATIONS.DataBufferSize$VH.set(seg, x);
    }
    public static int DataBufferSize$get(MemorySegment seg, long index) {
        return (int)_TAPE_WMI_OPERATIONS.DataBufferSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DataBufferSize$set(MemorySegment seg, long index, int x) {
        _TAPE_WMI_OPERATIONS.DataBufferSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle DataBuffer$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("DataBuffer"));
    public static VarHandle DataBuffer$VH() {
        return _TAPE_WMI_OPERATIONS.DataBuffer$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PVOID DataBuffer;
     * }
     */
    public static MemorySegment DataBuffer$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_TAPE_WMI_OPERATIONS.DataBuffer$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PVOID DataBuffer;
     * }
     */
    public static void DataBuffer$set(MemorySegment seg, MemorySegment x) {
        _TAPE_WMI_OPERATIONS.DataBuffer$VH.set(seg, x);
    }
    public static MemorySegment DataBuffer$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_TAPE_WMI_OPERATIONS.DataBuffer$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DataBuffer$set(MemorySegment seg, long index, MemorySegment x) {
        _TAPE_WMI_OPERATIONS.DataBuffer$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


