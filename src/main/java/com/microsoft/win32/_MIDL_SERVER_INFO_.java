// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _MIDL_SERVER_INFO_ {
 *     PMIDL_STUB_DESC pStubDesc;
 *     const SERVER_ROUTINE* DispatchTable;
 *     PFORMAT_STRING ProcString;
 *     unsigned short* FmtStringOffset;
 *     const STUB_THUNK* ThunkTable;
 *     PRPC_SYNTAX_IDENTIFIER pTransferSyntax;
 *     ULONG_PTR nCount;
 *     PMIDL_SYNTAX_INFO pSyntaxInfo;
 * };
 * }
 */
public class _MIDL_SERVER_INFO_ {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("pStubDesc"),
        Constants$root.C_POINTER$LAYOUT.withName("DispatchTable"),
        Constants$root.C_POINTER$LAYOUT.withName("ProcString"),
        Constants$root.C_POINTER$LAYOUT.withName("FmtStringOffset"),
        Constants$root.C_POINTER$LAYOUT.withName("ThunkTable"),
        Constants$root.C_POINTER$LAYOUT.withName("pTransferSyntax"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("nCount"),
        Constants$root.C_POINTER$LAYOUT.withName("pSyntaxInfo")
    ).withName("_MIDL_SERVER_INFO_");
    public static MemoryLayout $LAYOUT() {
        return _MIDL_SERVER_INFO_.$struct$LAYOUT;
    }
    static final VarHandle pStubDesc$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pStubDesc"));
    public static VarHandle pStubDesc$VH() {
        return _MIDL_SERVER_INFO_.pStubDesc$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PMIDL_STUB_DESC pStubDesc;
     * }
     */
    public static MemorySegment pStubDesc$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_MIDL_SERVER_INFO_.pStubDesc$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PMIDL_STUB_DESC pStubDesc;
     * }
     */
    public static void pStubDesc$set(MemorySegment seg, MemorySegment x) {
        _MIDL_SERVER_INFO_.pStubDesc$VH.set(seg, x);
    }
    public static MemorySegment pStubDesc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_MIDL_SERVER_INFO_.pStubDesc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pStubDesc$set(MemorySegment seg, long index, MemorySegment x) {
        _MIDL_SERVER_INFO_.pStubDesc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle DispatchTable$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("DispatchTable"));
    public static VarHandle DispatchTable$VH() {
        return _MIDL_SERVER_INFO_.DispatchTable$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * const SERVER_ROUTINE* DispatchTable;
     * }
     */
    public static MemorySegment DispatchTable$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_MIDL_SERVER_INFO_.DispatchTable$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * const SERVER_ROUTINE* DispatchTable;
     * }
     */
    public static void DispatchTable$set(MemorySegment seg, MemorySegment x) {
        _MIDL_SERVER_INFO_.DispatchTable$VH.set(seg, x);
    }
    public static MemorySegment DispatchTable$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_MIDL_SERVER_INFO_.DispatchTable$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DispatchTable$set(MemorySegment seg, long index, MemorySegment x) {
        _MIDL_SERVER_INFO_.DispatchTable$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ProcString$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ProcString"));
    public static VarHandle ProcString$VH() {
        return _MIDL_SERVER_INFO_.ProcString$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PFORMAT_STRING ProcString;
     * }
     */
    public static MemorySegment ProcString$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_MIDL_SERVER_INFO_.ProcString$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PFORMAT_STRING ProcString;
     * }
     */
    public static void ProcString$set(MemorySegment seg, MemorySegment x) {
        _MIDL_SERVER_INFO_.ProcString$VH.set(seg, x);
    }
    public static MemorySegment ProcString$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_MIDL_SERVER_INFO_.ProcString$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ProcString$set(MemorySegment seg, long index, MemorySegment x) {
        _MIDL_SERVER_INFO_.ProcString$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle FmtStringOffset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("FmtStringOffset"));
    public static VarHandle FmtStringOffset$VH() {
        return _MIDL_SERVER_INFO_.FmtStringOffset$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short* FmtStringOffset;
     * }
     */
    public static MemorySegment FmtStringOffset$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_MIDL_SERVER_INFO_.FmtStringOffset$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short* FmtStringOffset;
     * }
     */
    public static void FmtStringOffset$set(MemorySegment seg, MemorySegment x) {
        _MIDL_SERVER_INFO_.FmtStringOffset$VH.set(seg, x);
    }
    public static MemorySegment FmtStringOffset$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_MIDL_SERVER_INFO_.FmtStringOffset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void FmtStringOffset$set(MemorySegment seg, long index, MemorySegment x) {
        _MIDL_SERVER_INFO_.FmtStringOffset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ThunkTable$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ThunkTable"));
    public static VarHandle ThunkTable$VH() {
        return _MIDL_SERVER_INFO_.ThunkTable$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * const STUB_THUNK* ThunkTable;
     * }
     */
    public static MemorySegment ThunkTable$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_MIDL_SERVER_INFO_.ThunkTable$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * const STUB_THUNK* ThunkTable;
     * }
     */
    public static void ThunkTable$set(MemorySegment seg, MemorySegment x) {
        _MIDL_SERVER_INFO_.ThunkTable$VH.set(seg, x);
    }
    public static MemorySegment ThunkTable$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_MIDL_SERVER_INFO_.ThunkTable$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ThunkTable$set(MemorySegment seg, long index, MemorySegment x) {
        _MIDL_SERVER_INFO_.ThunkTable$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pTransferSyntax$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pTransferSyntax"));
    public static VarHandle pTransferSyntax$VH() {
        return _MIDL_SERVER_INFO_.pTransferSyntax$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PRPC_SYNTAX_IDENTIFIER pTransferSyntax;
     * }
     */
    public static MemorySegment pTransferSyntax$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_MIDL_SERVER_INFO_.pTransferSyntax$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PRPC_SYNTAX_IDENTIFIER pTransferSyntax;
     * }
     */
    public static void pTransferSyntax$set(MemorySegment seg, MemorySegment x) {
        _MIDL_SERVER_INFO_.pTransferSyntax$VH.set(seg, x);
    }
    public static MemorySegment pTransferSyntax$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_MIDL_SERVER_INFO_.pTransferSyntax$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pTransferSyntax$set(MemorySegment seg, long index, MemorySegment x) {
        _MIDL_SERVER_INFO_.pTransferSyntax$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle nCount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("nCount"));
    public static VarHandle nCount$VH() {
        return _MIDL_SERVER_INFO_.nCount$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG_PTR nCount;
     * }
     */
    public static long nCount$get(MemorySegment seg) {
        return (long)_MIDL_SERVER_INFO_.nCount$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG_PTR nCount;
     * }
     */
    public static void nCount$set(MemorySegment seg, long x) {
        _MIDL_SERVER_INFO_.nCount$VH.set(seg, x);
    }
    public static long nCount$get(MemorySegment seg, long index) {
        return (long)_MIDL_SERVER_INFO_.nCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nCount$set(MemorySegment seg, long index, long x) {
        _MIDL_SERVER_INFO_.nCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pSyntaxInfo$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pSyntaxInfo"));
    public static VarHandle pSyntaxInfo$VH() {
        return _MIDL_SERVER_INFO_.pSyntaxInfo$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PMIDL_SYNTAX_INFO pSyntaxInfo;
     * }
     */
    public static MemorySegment pSyntaxInfo$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_MIDL_SERVER_INFO_.pSyntaxInfo$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PMIDL_SYNTAX_INFO pSyntaxInfo;
     * }
     */
    public static void pSyntaxInfo$set(MemorySegment seg, MemorySegment x) {
        _MIDL_SERVER_INFO_.pSyntaxInfo$VH.set(seg, x);
    }
    public static MemorySegment pSyntaxInfo$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_MIDL_SERVER_INFO_.pSyntaxInfo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pSyntaxInfo$set(MemorySegment seg, long index, MemorySegment x) {
        _MIDL_SERVER_INFO_.pSyntaxInfo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


