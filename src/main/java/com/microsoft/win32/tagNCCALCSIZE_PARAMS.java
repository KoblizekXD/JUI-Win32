// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct tagNCCALCSIZE_PARAMS {
 *     RECT rgrc[3];
 *     PWINDOWPOS lppos;
 * };
 * }
 */
public class tagNCCALCSIZE_PARAMS {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(3, MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("left"),
            Constants$root.C_LONG$LAYOUT.withName("top"),
            Constants$root.C_LONG$LAYOUT.withName("right"),
            Constants$root.C_LONG$LAYOUT.withName("bottom")
        ).withName("tagRECT")).withName("rgrc"),
        Constants$root.C_POINTER$LAYOUT.withName("lppos")
    ).withName("tagNCCALCSIZE_PARAMS");
    public static MemoryLayout $LAYOUT() {
        return tagNCCALCSIZE_PARAMS.$struct$LAYOUT;
    }
    public static MemorySegment rgrc$slice(MemorySegment seg) {
        return seg.asSlice(0, 48);
    }
    static final VarHandle lppos$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lppos"));
    public static VarHandle lppos$VH() {
        return tagNCCALCSIZE_PARAMS.lppos$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PWINDOWPOS lppos;
     * }
     */
    public static MemorySegment lppos$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)tagNCCALCSIZE_PARAMS.lppos$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PWINDOWPOS lppos;
     * }
     */
    public static void lppos$set(MemorySegment seg, MemorySegment x) {
        tagNCCALCSIZE_PARAMS.lppos$VH.set(seg, x);
    }
    public static MemorySegment lppos$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)tagNCCALCSIZE_PARAMS.lppos$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lppos$set(MemorySegment seg, long index, MemorySegment x) {
        tagNCCALCSIZE_PARAMS.lppos$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


