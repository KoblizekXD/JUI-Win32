// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IInternetHostSecurityManagerVtbl {
 *     HRESULT (*QueryInterface)(IInternetHostSecurityManager*,const IID*,void**);
 *     ULONG (*AddRef)(IInternetHostSecurityManager*);
 *     ULONG (*Release)(IInternetHostSecurityManager*);
 *     HRESULT (*GetSecurityId)(IInternetHostSecurityManager*,BYTE*,DWORD*,DWORD_PTR);
 *     HRESULT (*ProcessUrlAction)(IInternetHostSecurityManager*,DWORD,BYTE*,DWORD,BYTE*,DWORD,DWORD,DWORD);
 *     HRESULT (*QueryCustomPolicy)(IInternetHostSecurityManager*,const GUID*,BYTE**,DWORD*,BYTE*,DWORD,DWORD);
 * };
 * }
 */
public class IInternetHostSecurityManagerVtbl {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("GetSecurityId"),
        Constants$root.C_POINTER$LAYOUT.withName("ProcessUrlAction"),
        Constants$root.C_POINTER$LAYOUT.withName("QueryCustomPolicy")
    ).withName("IInternetHostSecurityManagerVtbl");
    public static MemoryLayout $LAYOUT() {
        return IInternetHostSecurityManagerVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor QueryInterface_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_UP$MH = RuntimeHelper.upcallHandle(QueryInterface.class, "apply", IInternetHostSecurityManagerVtbl.QueryInterface_UP$FUNC);
    static final FunctionDescriptor QueryInterface_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_DOWN$MH = RuntimeHelper.downcallHandle(
        IInternetHostSecurityManagerVtbl.QueryInterface_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(IInternetHostSecurityManager*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IInternetHostSecurityManagerVtbl.QueryInterface_UP$MH, fi, IInternetHostSecurityManagerVtbl.QueryInterface$FUNC, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IInternetHostSecurityManagerVtbl.QueryInterface_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return IInternetHostSecurityManagerVtbl.QueryInterface$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IInternetHostSecurityManager*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IInternetHostSecurityManagerVtbl.QueryInterface$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IInternetHostSecurityManager*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        IInternetHostSecurityManagerVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IInternetHostSecurityManagerVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        IInternetHostSecurityManagerVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, SegmentScope scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor AddRef_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_UP$MH = RuntimeHelper.upcallHandle(AddRef.class, "apply", IInternetHostSecurityManagerVtbl.AddRef_UP$FUNC);
    static final FunctionDescriptor AddRef_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_DOWN$MH = RuntimeHelper.downcallHandle(
        IInternetHostSecurityManagerVtbl.AddRef_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*AddRef)(IInternetHostSecurityManager*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IInternetHostSecurityManagerVtbl.AddRef_UP$MH, fi, IInternetHostSecurityManagerVtbl.AddRef$FUNC, scope);
        }
        static AddRef ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IInternetHostSecurityManagerVtbl.AddRef_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return IInternetHostSecurityManagerVtbl.AddRef$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(IInternetHostSecurityManager*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IInternetHostSecurityManagerVtbl.AddRef$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(IInternetHostSecurityManager*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        IInternetHostSecurityManagerVtbl.AddRef$VH.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IInternetHostSecurityManagerVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        IInternetHostSecurityManagerVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, SegmentScope scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Release_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_UP$MH = RuntimeHelper.upcallHandle(Release.class, "apply", IInternetHostSecurityManagerVtbl.Release_UP$FUNC);
    static final FunctionDescriptor Release_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_DOWN$MH = RuntimeHelper.downcallHandle(
        IInternetHostSecurityManagerVtbl.Release_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*Release)(IInternetHostSecurityManager*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IInternetHostSecurityManagerVtbl.Release_UP$MH, fi, IInternetHostSecurityManagerVtbl.Release$FUNC, scope);
        }
        static Release ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IInternetHostSecurityManagerVtbl.Release_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return IInternetHostSecurityManagerVtbl.Release$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(IInternetHostSecurityManager*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IInternetHostSecurityManagerVtbl.Release$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(IInternetHostSecurityManager*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        IInternetHostSecurityManagerVtbl.Release$VH.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IInternetHostSecurityManagerVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        IInternetHostSecurityManagerVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, SegmentScope scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    static final FunctionDescriptor GetSecurityId$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final FunctionDescriptor GetSecurityId_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final MethodHandle GetSecurityId_UP$MH = RuntimeHelper.upcallHandle(GetSecurityId.class, "apply", IInternetHostSecurityManagerVtbl.GetSecurityId_UP$FUNC);
    static final FunctionDescriptor GetSecurityId_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final MethodHandle GetSecurityId_DOWN$MH = RuntimeHelper.downcallHandle(
        IInternetHostSecurityManagerVtbl.GetSecurityId_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetSecurityId)(IInternetHostSecurityManager*,BYTE*,DWORD*,DWORD_PTR);
     * }
     */
    public interface GetSecurityId {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, long _x3);
        static MemorySegment allocate(GetSecurityId fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IInternetHostSecurityManagerVtbl.GetSecurityId_UP$MH, fi, IInternetHostSecurityManagerVtbl.GetSecurityId$FUNC, scope);
        }
        static GetSecurityId ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, long __x3) -> {
                try {
                    return (int)IInternetHostSecurityManagerVtbl.GetSecurityId_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetSecurityId$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetSecurityId"));
    public static VarHandle GetSecurityId$VH() {
        return IInternetHostSecurityManagerVtbl.GetSecurityId$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetSecurityId)(IInternetHostSecurityManager*,BYTE*,DWORD*,DWORD_PTR);
     * }
     */
    public static MemorySegment GetSecurityId$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IInternetHostSecurityManagerVtbl.GetSecurityId$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetSecurityId)(IInternetHostSecurityManager*,BYTE*,DWORD*,DWORD_PTR);
     * }
     */
    public static void GetSecurityId$set(MemorySegment seg, MemorySegment x) {
        IInternetHostSecurityManagerVtbl.GetSecurityId$VH.set(seg, x);
    }
    public static MemorySegment GetSecurityId$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IInternetHostSecurityManagerVtbl.GetSecurityId$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetSecurityId$set(MemorySegment seg, long index, MemorySegment x) {
        IInternetHostSecurityManagerVtbl.GetSecurityId$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetSecurityId GetSecurityId(MemorySegment segment, SegmentScope scope) {
        return GetSecurityId.ofAddress(GetSecurityId$get(segment), scope);
    }
    static final FunctionDescriptor ProcessUrlAction$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor ProcessUrlAction_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle ProcessUrlAction_UP$MH = RuntimeHelper.upcallHandle(ProcessUrlAction.class, "apply", IInternetHostSecurityManagerVtbl.ProcessUrlAction_UP$FUNC);
    static final FunctionDescriptor ProcessUrlAction_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle ProcessUrlAction_DOWN$MH = RuntimeHelper.downcallHandle(
        IInternetHostSecurityManagerVtbl.ProcessUrlAction_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*ProcessUrlAction)(IInternetHostSecurityManager*,DWORD,BYTE*,DWORD,BYTE*,DWORD,DWORD,DWORD);
     * }
     */
    public interface ProcessUrlAction {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, int _x3, java.lang.foreign.MemorySegment _x4, int _x5, int _x6, int _x7);
        static MemorySegment allocate(ProcessUrlAction fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IInternetHostSecurityManagerVtbl.ProcessUrlAction_UP$MH, fi, IInternetHostSecurityManagerVtbl.ProcessUrlAction$FUNC, scope);
        }
        static ProcessUrlAction ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, int __x3, java.lang.foreign.MemorySegment __x4, int __x5, int __x6, int __x7) -> {
                try {
                    return (int)IInternetHostSecurityManagerVtbl.ProcessUrlAction_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6, __x7);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ProcessUrlAction$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ProcessUrlAction"));
    public static VarHandle ProcessUrlAction$VH() {
        return IInternetHostSecurityManagerVtbl.ProcessUrlAction$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*ProcessUrlAction)(IInternetHostSecurityManager*,DWORD,BYTE*,DWORD,BYTE*,DWORD,DWORD,DWORD);
     * }
     */
    public static MemorySegment ProcessUrlAction$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IInternetHostSecurityManagerVtbl.ProcessUrlAction$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*ProcessUrlAction)(IInternetHostSecurityManager*,DWORD,BYTE*,DWORD,BYTE*,DWORD,DWORD,DWORD);
     * }
     */
    public static void ProcessUrlAction$set(MemorySegment seg, MemorySegment x) {
        IInternetHostSecurityManagerVtbl.ProcessUrlAction$VH.set(seg, x);
    }
    public static MemorySegment ProcessUrlAction$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IInternetHostSecurityManagerVtbl.ProcessUrlAction$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ProcessUrlAction$set(MemorySegment seg, long index, MemorySegment x) {
        IInternetHostSecurityManagerVtbl.ProcessUrlAction$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ProcessUrlAction ProcessUrlAction(MemorySegment segment, SegmentScope scope) {
        return ProcessUrlAction.ofAddress(ProcessUrlAction$get(segment), scope);
    }
    static final FunctionDescriptor QueryCustomPolicy$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor QueryCustomPolicy_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle QueryCustomPolicy_UP$MH = RuntimeHelper.upcallHandle(QueryCustomPolicy.class, "apply", IInternetHostSecurityManagerVtbl.QueryCustomPolicy_UP$FUNC);
    static final FunctionDescriptor QueryCustomPolicy_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle QueryCustomPolicy_DOWN$MH = RuntimeHelper.downcallHandle(
        IInternetHostSecurityManagerVtbl.QueryCustomPolicy_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*QueryCustomPolicy)(IInternetHostSecurityManager*,const GUID*,BYTE**,DWORD*,BYTE*,DWORD,DWORD);
     * }
     */
    public interface QueryCustomPolicy {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, int _x5, int _x6);
        static MemorySegment allocate(QueryCustomPolicy fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IInternetHostSecurityManagerVtbl.QueryCustomPolicy_UP$MH, fi, IInternetHostSecurityManagerVtbl.QueryCustomPolicy$FUNC, scope);
        }
        static QueryCustomPolicy ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, int __x5, int __x6) -> {
                try {
                    return (int)IInternetHostSecurityManagerVtbl.QueryCustomPolicy_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryCustomPolicy$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryCustomPolicy"));
    public static VarHandle QueryCustomPolicy$VH() {
        return IInternetHostSecurityManagerVtbl.QueryCustomPolicy$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryCustomPolicy)(IInternetHostSecurityManager*,const GUID*,BYTE**,DWORD*,BYTE*,DWORD,DWORD);
     * }
     */
    public static MemorySegment QueryCustomPolicy$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IInternetHostSecurityManagerVtbl.QueryCustomPolicy$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryCustomPolicy)(IInternetHostSecurityManager*,const GUID*,BYTE**,DWORD*,BYTE*,DWORD,DWORD);
     * }
     */
    public static void QueryCustomPolicy$set(MemorySegment seg, MemorySegment x) {
        IInternetHostSecurityManagerVtbl.QueryCustomPolicy$VH.set(seg, x);
    }
    public static MemorySegment QueryCustomPolicy$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IInternetHostSecurityManagerVtbl.QueryCustomPolicy$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryCustomPolicy$set(MemorySegment seg, long index, MemorySegment x) {
        IInternetHostSecurityManagerVtbl.QueryCustomPolicy$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryCustomPolicy QueryCustomPolicy(MemorySegment segment, SegmentScope scope) {
        return QueryCustomPolicy.ofAddress(QueryCustomPolicy$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


