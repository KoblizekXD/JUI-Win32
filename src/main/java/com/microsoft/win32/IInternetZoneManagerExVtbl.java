// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IInternetZoneManagerExVtbl {
 *     HRESULT (*QueryInterface)(IInternetZoneManagerEx*,const IID*,void**);
 *     ULONG (*AddRef)(IInternetZoneManagerEx*);
 *     ULONG (*Release)(IInternetZoneManagerEx*);
 *     HRESULT (*GetZoneAttributes)(IInternetZoneManagerEx*,DWORD,ZONEATTRIBUTES*);
 *     HRESULT (*SetZoneAttributes)(IInternetZoneManagerEx*,DWORD,ZONEATTRIBUTES*);
 *     HRESULT (*GetZoneCustomPolicy)(IInternetZoneManagerEx*,DWORD,const GUID*,BYTE**,DWORD*,URLZONEREG);
 *     HRESULT (*SetZoneCustomPolicy)(IInternetZoneManagerEx*,DWORD,const GUID*,BYTE*,DWORD,URLZONEREG);
 *     HRESULT (*GetZoneActionPolicy)(IInternetZoneManagerEx*,DWORD,DWORD,BYTE*,DWORD,URLZONEREG);
 *     HRESULT (*SetZoneActionPolicy)(IInternetZoneManagerEx*,DWORD,DWORD,BYTE*,DWORD,URLZONEREG);
 *     HRESULT (*PromptAction)(IInternetZoneManagerEx*,DWORD,HWND,LPCWSTR,LPCWSTR,DWORD);
 *     HRESULT (*LogAction)(IInternetZoneManagerEx*,DWORD,LPCWSTR,LPCWSTR,DWORD);
 *     HRESULT (*CreateZoneEnumerator)(IInternetZoneManagerEx*,DWORD*,DWORD*,DWORD);
 *     HRESULT (*GetZoneAt)(IInternetZoneManagerEx*,DWORD,DWORD,DWORD*);
 *     HRESULT (*DestroyZoneEnumerator)(IInternetZoneManagerEx*,DWORD);
 *     HRESULT (*CopyTemplatePoliciesToZone)(IInternetZoneManagerEx*,DWORD,DWORD,DWORD);
 *     HRESULT (*GetZoneActionPolicyEx)(IInternetZoneManagerEx*,DWORD,DWORD,BYTE*,DWORD,URLZONEREG,DWORD);
 *     HRESULT (*SetZoneActionPolicyEx)(IInternetZoneManagerEx*,DWORD,DWORD,BYTE*,DWORD,URLZONEREG,DWORD);
 * };
 * }
 */
public class IInternetZoneManagerExVtbl {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("GetZoneAttributes"),
        Constants$root.C_POINTER$LAYOUT.withName("SetZoneAttributes"),
        Constants$root.C_POINTER$LAYOUT.withName("GetZoneCustomPolicy"),
        Constants$root.C_POINTER$LAYOUT.withName("SetZoneCustomPolicy"),
        Constants$root.C_POINTER$LAYOUT.withName("GetZoneActionPolicy"),
        Constants$root.C_POINTER$LAYOUT.withName("SetZoneActionPolicy"),
        Constants$root.C_POINTER$LAYOUT.withName("PromptAction"),
        Constants$root.C_POINTER$LAYOUT.withName("LogAction"),
        Constants$root.C_POINTER$LAYOUT.withName("CreateZoneEnumerator"),
        Constants$root.C_POINTER$LAYOUT.withName("GetZoneAt"),
        Constants$root.C_POINTER$LAYOUT.withName("DestroyZoneEnumerator"),
        Constants$root.C_POINTER$LAYOUT.withName("CopyTemplatePoliciesToZone"),
        Constants$root.C_POINTER$LAYOUT.withName("GetZoneActionPolicyEx"),
        Constants$root.C_POINTER$LAYOUT.withName("SetZoneActionPolicyEx")
    ).withName("IInternetZoneManagerExVtbl");
    public static MemoryLayout $LAYOUT() {
        return IInternetZoneManagerExVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor QueryInterface_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_UP$MH = RuntimeHelper.upcallHandle(QueryInterface.class, "apply", IInternetZoneManagerExVtbl.QueryInterface_UP$FUNC);
    static final FunctionDescriptor QueryInterface_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_DOWN$MH = RuntimeHelper.downcallHandle(
        IInternetZoneManagerExVtbl.QueryInterface_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(IInternetZoneManagerEx*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IInternetZoneManagerExVtbl.QueryInterface_UP$MH, fi, IInternetZoneManagerExVtbl.QueryInterface$FUNC, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IInternetZoneManagerExVtbl.QueryInterface_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return IInternetZoneManagerExVtbl.QueryInterface$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IInternetZoneManagerEx*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IInternetZoneManagerExVtbl.QueryInterface$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IInternetZoneManagerEx*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        IInternetZoneManagerExVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IInternetZoneManagerExVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        IInternetZoneManagerExVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, SegmentScope scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor AddRef_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_UP$MH = RuntimeHelper.upcallHandle(AddRef.class, "apply", IInternetZoneManagerExVtbl.AddRef_UP$FUNC);
    static final FunctionDescriptor AddRef_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_DOWN$MH = RuntimeHelper.downcallHandle(
        IInternetZoneManagerExVtbl.AddRef_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*AddRef)(IInternetZoneManagerEx*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IInternetZoneManagerExVtbl.AddRef_UP$MH, fi, IInternetZoneManagerExVtbl.AddRef$FUNC, scope);
        }
        static AddRef ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IInternetZoneManagerExVtbl.AddRef_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return IInternetZoneManagerExVtbl.AddRef$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(IInternetZoneManagerEx*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IInternetZoneManagerExVtbl.AddRef$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(IInternetZoneManagerEx*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        IInternetZoneManagerExVtbl.AddRef$VH.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IInternetZoneManagerExVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        IInternetZoneManagerExVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, SegmentScope scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Release_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_UP$MH = RuntimeHelper.upcallHandle(Release.class, "apply", IInternetZoneManagerExVtbl.Release_UP$FUNC);
    static final FunctionDescriptor Release_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_DOWN$MH = RuntimeHelper.downcallHandle(
        IInternetZoneManagerExVtbl.Release_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*Release)(IInternetZoneManagerEx*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IInternetZoneManagerExVtbl.Release_UP$MH, fi, IInternetZoneManagerExVtbl.Release$FUNC, scope);
        }
        static Release ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IInternetZoneManagerExVtbl.Release_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return IInternetZoneManagerExVtbl.Release$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(IInternetZoneManagerEx*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IInternetZoneManagerExVtbl.Release$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(IInternetZoneManagerEx*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        IInternetZoneManagerExVtbl.Release$VH.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IInternetZoneManagerExVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        IInternetZoneManagerExVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, SegmentScope scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    static final FunctionDescriptor GetZoneAttributes$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetZoneAttributes_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetZoneAttributes_UP$MH = RuntimeHelper.upcallHandle(GetZoneAttributes.class, "apply", IInternetZoneManagerExVtbl.GetZoneAttributes_UP$FUNC);
    static final FunctionDescriptor GetZoneAttributes_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetZoneAttributes_DOWN$MH = RuntimeHelper.downcallHandle(
        IInternetZoneManagerExVtbl.GetZoneAttributes_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetZoneAttributes)(IInternetZoneManagerEx*,DWORD,ZONEATTRIBUTES*);
     * }
     */
    public interface GetZoneAttributes {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetZoneAttributes fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IInternetZoneManagerExVtbl.GetZoneAttributes_UP$MH, fi, IInternetZoneManagerExVtbl.GetZoneAttributes$FUNC, scope);
        }
        static GetZoneAttributes ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IInternetZoneManagerExVtbl.GetZoneAttributes_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetZoneAttributes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetZoneAttributes"));
    public static VarHandle GetZoneAttributes$VH() {
        return IInternetZoneManagerExVtbl.GetZoneAttributes$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetZoneAttributes)(IInternetZoneManagerEx*,DWORD,ZONEATTRIBUTES*);
     * }
     */
    public static MemorySegment GetZoneAttributes$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IInternetZoneManagerExVtbl.GetZoneAttributes$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetZoneAttributes)(IInternetZoneManagerEx*,DWORD,ZONEATTRIBUTES*);
     * }
     */
    public static void GetZoneAttributes$set(MemorySegment seg, MemorySegment x) {
        IInternetZoneManagerExVtbl.GetZoneAttributes$VH.set(seg, x);
    }
    public static MemorySegment GetZoneAttributes$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IInternetZoneManagerExVtbl.GetZoneAttributes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetZoneAttributes$set(MemorySegment seg, long index, MemorySegment x) {
        IInternetZoneManagerExVtbl.GetZoneAttributes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetZoneAttributes GetZoneAttributes(MemorySegment segment, SegmentScope scope) {
        return GetZoneAttributes.ofAddress(GetZoneAttributes$get(segment), scope);
    }
    static final FunctionDescriptor SetZoneAttributes$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor SetZoneAttributes_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetZoneAttributes_UP$MH = RuntimeHelper.upcallHandle(SetZoneAttributes.class, "apply", IInternetZoneManagerExVtbl.SetZoneAttributes_UP$FUNC);
    static final FunctionDescriptor SetZoneAttributes_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetZoneAttributes_DOWN$MH = RuntimeHelper.downcallHandle(
        IInternetZoneManagerExVtbl.SetZoneAttributes_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetZoneAttributes)(IInternetZoneManagerEx*,DWORD,ZONEATTRIBUTES*);
     * }
     */
    public interface SetZoneAttributes {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(SetZoneAttributes fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IInternetZoneManagerExVtbl.SetZoneAttributes_UP$MH, fi, IInternetZoneManagerExVtbl.SetZoneAttributes$FUNC, scope);
        }
        static SetZoneAttributes ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IInternetZoneManagerExVtbl.SetZoneAttributes_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetZoneAttributes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetZoneAttributes"));
    public static VarHandle SetZoneAttributes$VH() {
        return IInternetZoneManagerExVtbl.SetZoneAttributes$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetZoneAttributes)(IInternetZoneManagerEx*,DWORD,ZONEATTRIBUTES*);
     * }
     */
    public static MemorySegment SetZoneAttributes$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IInternetZoneManagerExVtbl.SetZoneAttributes$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetZoneAttributes)(IInternetZoneManagerEx*,DWORD,ZONEATTRIBUTES*);
     * }
     */
    public static void SetZoneAttributes$set(MemorySegment seg, MemorySegment x) {
        IInternetZoneManagerExVtbl.SetZoneAttributes$VH.set(seg, x);
    }
    public static MemorySegment SetZoneAttributes$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IInternetZoneManagerExVtbl.SetZoneAttributes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetZoneAttributes$set(MemorySegment seg, long index, MemorySegment x) {
        IInternetZoneManagerExVtbl.SetZoneAttributes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetZoneAttributes SetZoneAttributes(MemorySegment segment, SegmentScope scope) {
        return SetZoneAttributes.ofAddress(SetZoneAttributes$get(segment), scope);
    }
    static final FunctionDescriptor GetZoneCustomPolicy$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor GetZoneCustomPolicy_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle GetZoneCustomPolicy_UP$MH = RuntimeHelper.upcallHandle(GetZoneCustomPolicy.class, "apply", IInternetZoneManagerExVtbl.GetZoneCustomPolicy_UP$FUNC);
    static final FunctionDescriptor GetZoneCustomPolicy_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle GetZoneCustomPolicy_DOWN$MH = RuntimeHelper.downcallHandle(
        IInternetZoneManagerExVtbl.GetZoneCustomPolicy_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetZoneCustomPolicy)(IInternetZoneManagerEx*,DWORD,const GUID*,BYTE**,DWORD*,URLZONEREG);
     * }
     */
    public interface GetZoneCustomPolicy {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, int _x5);
        static MemorySegment allocate(GetZoneCustomPolicy fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IInternetZoneManagerExVtbl.GetZoneCustomPolicy_UP$MH, fi, IInternetZoneManagerExVtbl.GetZoneCustomPolicy$FUNC, scope);
        }
        static GetZoneCustomPolicy ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, int __x5) -> {
                try {
                    return (int)IInternetZoneManagerExVtbl.GetZoneCustomPolicy_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetZoneCustomPolicy$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetZoneCustomPolicy"));
    public static VarHandle GetZoneCustomPolicy$VH() {
        return IInternetZoneManagerExVtbl.GetZoneCustomPolicy$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetZoneCustomPolicy)(IInternetZoneManagerEx*,DWORD,const GUID*,BYTE**,DWORD*,URLZONEREG);
     * }
     */
    public static MemorySegment GetZoneCustomPolicy$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IInternetZoneManagerExVtbl.GetZoneCustomPolicy$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetZoneCustomPolicy)(IInternetZoneManagerEx*,DWORD,const GUID*,BYTE**,DWORD*,URLZONEREG);
     * }
     */
    public static void GetZoneCustomPolicy$set(MemorySegment seg, MemorySegment x) {
        IInternetZoneManagerExVtbl.GetZoneCustomPolicy$VH.set(seg, x);
    }
    public static MemorySegment GetZoneCustomPolicy$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IInternetZoneManagerExVtbl.GetZoneCustomPolicy$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetZoneCustomPolicy$set(MemorySegment seg, long index, MemorySegment x) {
        IInternetZoneManagerExVtbl.GetZoneCustomPolicy$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetZoneCustomPolicy GetZoneCustomPolicy(MemorySegment segment, SegmentScope scope) {
        return GetZoneCustomPolicy.ofAddress(GetZoneCustomPolicy$get(segment), scope);
    }
    static final FunctionDescriptor SetZoneCustomPolicy$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor SetZoneCustomPolicy_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle SetZoneCustomPolicy_UP$MH = RuntimeHelper.upcallHandle(SetZoneCustomPolicy.class, "apply", IInternetZoneManagerExVtbl.SetZoneCustomPolicy_UP$FUNC);
    static final FunctionDescriptor SetZoneCustomPolicy_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle SetZoneCustomPolicy_DOWN$MH = RuntimeHelper.downcallHandle(
        IInternetZoneManagerExVtbl.SetZoneCustomPolicy_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetZoneCustomPolicy)(IInternetZoneManagerEx*,DWORD,const GUID*,BYTE*,DWORD,URLZONEREG);
     * }
     */
    public interface SetZoneCustomPolicy {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, int _x4, int _x5);
        static MemorySegment allocate(SetZoneCustomPolicy fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IInternetZoneManagerExVtbl.SetZoneCustomPolicy_UP$MH, fi, IInternetZoneManagerExVtbl.SetZoneCustomPolicy$FUNC, scope);
        }
        static SetZoneCustomPolicy ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, int __x4, int __x5) -> {
                try {
                    return (int)IInternetZoneManagerExVtbl.SetZoneCustomPolicy_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetZoneCustomPolicy$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetZoneCustomPolicy"));
    public static VarHandle SetZoneCustomPolicy$VH() {
        return IInternetZoneManagerExVtbl.SetZoneCustomPolicy$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetZoneCustomPolicy)(IInternetZoneManagerEx*,DWORD,const GUID*,BYTE*,DWORD,URLZONEREG);
     * }
     */
    public static MemorySegment SetZoneCustomPolicy$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IInternetZoneManagerExVtbl.SetZoneCustomPolicy$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetZoneCustomPolicy)(IInternetZoneManagerEx*,DWORD,const GUID*,BYTE*,DWORD,URLZONEREG);
     * }
     */
    public static void SetZoneCustomPolicy$set(MemorySegment seg, MemorySegment x) {
        IInternetZoneManagerExVtbl.SetZoneCustomPolicy$VH.set(seg, x);
    }
    public static MemorySegment SetZoneCustomPolicy$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IInternetZoneManagerExVtbl.SetZoneCustomPolicy$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetZoneCustomPolicy$set(MemorySegment seg, long index, MemorySegment x) {
        IInternetZoneManagerExVtbl.SetZoneCustomPolicy$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetZoneCustomPolicy SetZoneCustomPolicy(MemorySegment segment, SegmentScope scope) {
        return SetZoneCustomPolicy.ofAddress(SetZoneCustomPolicy$get(segment), scope);
    }
    static final FunctionDescriptor GetZoneActionPolicy$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor GetZoneActionPolicy_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle GetZoneActionPolicy_UP$MH = RuntimeHelper.upcallHandle(GetZoneActionPolicy.class, "apply", IInternetZoneManagerExVtbl.GetZoneActionPolicy_UP$FUNC);
    static final FunctionDescriptor GetZoneActionPolicy_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle GetZoneActionPolicy_DOWN$MH = RuntimeHelper.downcallHandle(
        IInternetZoneManagerExVtbl.GetZoneActionPolicy_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetZoneActionPolicy)(IInternetZoneManagerEx*,DWORD,DWORD,BYTE*,DWORD,URLZONEREG);
     * }
     */
    public interface GetZoneActionPolicy {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, java.lang.foreign.MemorySegment _x3, int _x4, int _x5);
        static MemorySegment allocate(GetZoneActionPolicy fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IInternetZoneManagerExVtbl.GetZoneActionPolicy_UP$MH, fi, IInternetZoneManagerExVtbl.GetZoneActionPolicy$FUNC, scope);
        }
        static GetZoneActionPolicy ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, java.lang.foreign.MemorySegment __x3, int __x4, int __x5) -> {
                try {
                    return (int)IInternetZoneManagerExVtbl.GetZoneActionPolicy_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetZoneActionPolicy$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetZoneActionPolicy"));
    public static VarHandle GetZoneActionPolicy$VH() {
        return IInternetZoneManagerExVtbl.GetZoneActionPolicy$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetZoneActionPolicy)(IInternetZoneManagerEx*,DWORD,DWORD,BYTE*,DWORD,URLZONEREG);
     * }
     */
    public static MemorySegment GetZoneActionPolicy$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IInternetZoneManagerExVtbl.GetZoneActionPolicy$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetZoneActionPolicy)(IInternetZoneManagerEx*,DWORD,DWORD,BYTE*,DWORD,URLZONEREG);
     * }
     */
    public static void GetZoneActionPolicy$set(MemorySegment seg, MemorySegment x) {
        IInternetZoneManagerExVtbl.GetZoneActionPolicy$VH.set(seg, x);
    }
    public static MemorySegment GetZoneActionPolicy$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IInternetZoneManagerExVtbl.GetZoneActionPolicy$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetZoneActionPolicy$set(MemorySegment seg, long index, MemorySegment x) {
        IInternetZoneManagerExVtbl.GetZoneActionPolicy$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetZoneActionPolicy GetZoneActionPolicy(MemorySegment segment, SegmentScope scope) {
        return GetZoneActionPolicy.ofAddress(GetZoneActionPolicy$get(segment), scope);
    }
    static final FunctionDescriptor SetZoneActionPolicy$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor SetZoneActionPolicy_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle SetZoneActionPolicy_UP$MH = RuntimeHelper.upcallHandle(SetZoneActionPolicy.class, "apply", IInternetZoneManagerExVtbl.SetZoneActionPolicy_UP$FUNC);
    static final FunctionDescriptor SetZoneActionPolicy_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle SetZoneActionPolicy_DOWN$MH = RuntimeHelper.downcallHandle(
        IInternetZoneManagerExVtbl.SetZoneActionPolicy_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetZoneActionPolicy)(IInternetZoneManagerEx*,DWORD,DWORD,BYTE*,DWORD,URLZONEREG);
     * }
     */
    public interface SetZoneActionPolicy {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, java.lang.foreign.MemorySegment _x3, int _x4, int _x5);
        static MemorySegment allocate(SetZoneActionPolicy fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IInternetZoneManagerExVtbl.SetZoneActionPolicy_UP$MH, fi, IInternetZoneManagerExVtbl.SetZoneActionPolicy$FUNC, scope);
        }
        static SetZoneActionPolicy ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, java.lang.foreign.MemorySegment __x3, int __x4, int __x5) -> {
                try {
                    return (int)IInternetZoneManagerExVtbl.SetZoneActionPolicy_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetZoneActionPolicy$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetZoneActionPolicy"));
    public static VarHandle SetZoneActionPolicy$VH() {
        return IInternetZoneManagerExVtbl.SetZoneActionPolicy$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetZoneActionPolicy)(IInternetZoneManagerEx*,DWORD,DWORD,BYTE*,DWORD,URLZONEREG);
     * }
     */
    public static MemorySegment SetZoneActionPolicy$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IInternetZoneManagerExVtbl.SetZoneActionPolicy$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetZoneActionPolicy)(IInternetZoneManagerEx*,DWORD,DWORD,BYTE*,DWORD,URLZONEREG);
     * }
     */
    public static void SetZoneActionPolicy$set(MemorySegment seg, MemorySegment x) {
        IInternetZoneManagerExVtbl.SetZoneActionPolicy$VH.set(seg, x);
    }
    public static MemorySegment SetZoneActionPolicy$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IInternetZoneManagerExVtbl.SetZoneActionPolicy$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetZoneActionPolicy$set(MemorySegment seg, long index, MemorySegment x) {
        IInternetZoneManagerExVtbl.SetZoneActionPolicy$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetZoneActionPolicy SetZoneActionPolicy(MemorySegment segment, SegmentScope scope) {
        return SetZoneActionPolicy.ofAddress(SetZoneActionPolicy$get(segment), scope);
    }
    static final FunctionDescriptor PromptAction$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor PromptAction_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle PromptAction_UP$MH = RuntimeHelper.upcallHandle(PromptAction.class, "apply", IInternetZoneManagerExVtbl.PromptAction_UP$FUNC);
    static final FunctionDescriptor PromptAction_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle PromptAction_DOWN$MH = RuntimeHelper.downcallHandle(
        IInternetZoneManagerExVtbl.PromptAction_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*PromptAction)(IInternetZoneManagerEx*,DWORD,HWND,LPCWSTR,LPCWSTR,DWORD);
     * }
     */
    public interface PromptAction {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, int _x5);
        static MemorySegment allocate(PromptAction fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IInternetZoneManagerExVtbl.PromptAction_UP$MH, fi, IInternetZoneManagerExVtbl.PromptAction$FUNC, scope);
        }
        static PromptAction ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, int __x5) -> {
                try {
                    return (int)IInternetZoneManagerExVtbl.PromptAction_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle PromptAction$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("PromptAction"));
    public static VarHandle PromptAction$VH() {
        return IInternetZoneManagerExVtbl.PromptAction$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*PromptAction)(IInternetZoneManagerEx*,DWORD,HWND,LPCWSTR,LPCWSTR,DWORD);
     * }
     */
    public static MemorySegment PromptAction$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IInternetZoneManagerExVtbl.PromptAction$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*PromptAction)(IInternetZoneManagerEx*,DWORD,HWND,LPCWSTR,LPCWSTR,DWORD);
     * }
     */
    public static void PromptAction$set(MemorySegment seg, MemorySegment x) {
        IInternetZoneManagerExVtbl.PromptAction$VH.set(seg, x);
    }
    public static MemorySegment PromptAction$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IInternetZoneManagerExVtbl.PromptAction$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void PromptAction$set(MemorySegment seg, long index, MemorySegment x) {
        IInternetZoneManagerExVtbl.PromptAction$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static PromptAction PromptAction(MemorySegment segment, SegmentScope scope) {
        return PromptAction.ofAddress(PromptAction$get(segment), scope);
    }
    static final FunctionDescriptor LogAction$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor LogAction_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle LogAction_UP$MH = RuntimeHelper.upcallHandle(LogAction.class, "apply", IInternetZoneManagerExVtbl.LogAction_UP$FUNC);
    static final FunctionDescriptor LogAction_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle LogAction_DOWN$MH = RuntimeHelper.downcallHandle(
        IInternetZoneManagerExVtbl.LogAction_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*LogAction)(IInternetZoneManagerEx*,DWORD,LPCWSTR,LPCWSTR,DWORD);
     * }
     */
    public interface LogAction {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, int _x4);
        static MemorySegment allocate(LogAction fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IInternetZoneManagerExVtbl.LogAction_UP$MH, fi, IInternetZoneManagerExVtbl.LogAction$FUNC, scope);
        }
        static LogAction ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, int __x4) -> {
                try {
                    return (int)IInternetZoneManagerExVtbl.LogAction_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle LogAction$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("LogAction"));
    public static VarHandle LogAction$VH() {
        return IInternetZoneManagerExVtbl.LogAction$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*LogAction)(IInternetZoneManagerEx*,DWORD,LPCWSTR,LPCWSTR,DWORD);
     * }
     */
    public static MemorySegment LogAction$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IInternetZoneManagerExVtbl.LogAction$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*LogAction)(IInternetZoneManagerEx*,DWORD,LPCWSTR,LPCWSTR,DWORD);
     * }
     */
    public static void LogAction$set(MemorySegment seg, MemorySegment x) {
        IInternetZoneManagerExVtbl.LogAction$VH.set(seg, x);
    }
    public static MemorySegment LogAction$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IInternetZoneManagerExVtbl.LogAction$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void LogAction$set(MemorySegment seg, long index, MemorySegment x) {
        IInternetZoneManagerExVtbl.LogAction$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static LogAction LogAction(MemorySegment segment, SegmentScope scope) {
        return LogAction.ofAddress(LogAction$get(segment), scope);
    }
    static final FunctionDescriptor CreateZoneEnumerator$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor CreateZoneEnumerator_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle CreateZoneEnumerator_UP$MH = RuntimeHelper.upcallHandle(CreateZoneEnumerator.class, "apply", IInternetZoneManagerExVtbl.CreateZoneEnumerator_UP$FUNC);
    static final FunctionDescriptor CreateZoneEnumerator_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle CreateZoneEnumerator_DOWN$MH = RuntimeHelper.downcallHandle(
        IInternetZoneManagerExVtbl.CreateZoneEnumerator_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*CreateZoneEnumerator)(IInternetZoneManagerEx*,DWORD*,DWORD*,DWORD);
     * }
     */
    public interface CreateZoneEnumerator {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3);
        static MemorySegment allocate(CreateZoneEnumerator fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IInternetZoneManagerExVtbl.CreateZoneEnumerator_UP$MH, fi, IInternetZoneManagerExVtbl.CreateZoneEnumerator$FUNC, scope);
        }
        static CreateZoneEnumerator ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3) -> {
                try {
                    return (int)IInternetZoneManagerExVtbl.CreateZoneEnumerator_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle CreateZoneEnumerator$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("CreateZoneEnumerator"));
    public static VarHandle CreateZoneEnumerator$VH() {
        return IInternetZoneManagerExVtbl.CreateZoneEnumerator$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*CreateZoneEnumerator)(IInternetZoneManagerEx*,DWORD*,DWORD*,DWORD);
     * }
     */
    public static MemorySegment CreateZoneEnumerator$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IInternetZoneManagerExVtbl.CreateZoneEnumerator$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*CreateZoneEnumerator)(IInternetZoneManagerEx*,DWORD*,DWORD*,DWORD);
     * }
     */
    public static void CreateZoneEnumerator$set(MemorySegment seg, MemorySegment x) {
        IInternetZoneManagerExVtbl.CreateZoneEnumerator$VH.set(seg, x);
    }
    public static MemorySegment CreateZoneEnumerator$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IInternetZoneManagerExVtbl.CreateZoneEnumerator$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CreateZoneEnumerator$set(MemorySegment seg, long index, MemorySegment x) {
        IInternetZoneManagerExVtbl.CreateZoneEnumerator$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static CreateZoneEnumerator CreateZoneEnumerator(MemorySegment segment, SegmentScope scope) {
        return CreateZoneEnumerator.ofAddress(CreateZoneEnumerator$get(segment), scope);
    }
    static final FunctionDescriptor GetZoneAt$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetZoneAt_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetZoneAt_UP$MH = RuntimeHelper.upcallHandle(GetZoneAt.class, "apply", IInternetZoneManagerExVtbl.GetZoneAt_UP$FUNC);
    static final FunctionDescriptor GetZoneAt_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetZoneAt_DOWN$MH = RuntimeHelper.downcallHandle(
        IInternetZoneManagerExVtbl.GetZoneAt_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetZoneAt)(IInternetZoneManagerEx*,DWORD,DWORD,DWORD*);
     * }
     */
    public interface GetZoneAt {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(GetZoneAt fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IInternetZoneManagerExVtbl.GetZoneAt_UP$MH, fi, IInternetZoneManagerExVtbl.GetZoneAt$FUNC, scope);
        }
        static GetZoneAt ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)IInternetZoneManagerExVtbl.GetZoneAt_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetZoneAt$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetZoneAt"));
    public static VarHandle GetZoneAt$VH() {
        return IInternetZoneManagerExVtbl.GetZoneAt$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetZoneAt)(IInternetZoneManagerEx*,DWORD,DWORD,DWORD*);
     * }
     */
    public static MemorySegment GetZoneAt$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IInternetZoneManagerExVtbl.GetZoneAt$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetZoneAt)(IInternetZoneManagerEx*,DWORD,DWORD,DWORD*);
     * }
     */
    public static void GetZoneAt$set(MemorySegment seg, MemorySegment x) {
        IInternetZoneManagerExVtbl.GetZoneAt$VH.set(seg, x);
    }
    public static MemorySegment GetZoneAt$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IInternetZoneManagerExVtbl.GetZoneAt$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetZoneAt$set(MemorySegment seg, long index, MemorySegment x) {
        IInternetZoneManagerExVtbl.GetZoneAt$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetZoneAt GetZoneAt(MemorySegment segment, SegmentScope scope) {
        return GetZoneAt.ofAddress(GetZoneAt$get(segment), scope);
    }
    static final FunctionDescriptor DestroyZoneEnumerator$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor DestroyZoneEnumerator_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle DestroyZoneEnumerator_UP$MH = RuntimeHelper.upcallHandle(DestroyZoneEnumerator.class, "apply", IInternetZoneManagerExVtbl.DestroyZoneEnumerator_UP$FUNC);
    static final FunctionDescriptor DestroyZoneEnumerator_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle DestroyZoneEnumerator_DOWN$MH = RuntimeHelper.downcallHandle(
        IInternetZoneManagerExVtbl.DestroyZoneEnumerator_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*DestroyZoneEnumerator)(IInternetZoneManagerEx*,DWORD);
     * }
     */
    public interface DestroyZoneEnumerator {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(DestroyZoneEnumerator fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IInternetZoneManagerExVtbl.DestroyZoneEnumerator_UP$MH, fi, IInternetZoneManagerExVtbl.DestroyZoneEnumerator$FUNC, scope);
        }
        static DestroyZoneEnumerator ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)IInternetZoneManagerExVtbl.DestroyZoneEnumerator_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle DestroyZoneEnumerator$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("DestroyZoneEnumerator"));
    public static VarHandle DestroyZoneEnumerator$VH() {
        return IInternetZoneManagerExVtbl.DestroyZoneEnumerator$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*DestroyZoneEnumerator)(IInternetZoneManagerEx*,DWORD);
     * }
     */
    public static MemorySegment DestroyZoneEnumerator$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IInternetZoneManagerExVtbl.DestroyZoneEnumerator$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*DestroyZoneEnumerator)(IInternetZoneManagerEx*,DWORD);
     * }
     */
    public static void DestroyZoneEnumerator$set(MemorySegment seg, MemorySegment x) {
        IInternetZoneManagerExVtbl.DestroyZoneEnumerator$VH.set(seg, x);
    }
    public static MemorySegment DestroyZoneEnumerator$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IInternetZoneManagerExVtbl.DestroyZoneEnumerator$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DestroyZoneEnumerator$set(MemorySegment seg, long index, MemorySegment x) {
        IInternetZoneManagerExVtbl.DestroyZoneEnumerator$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static DestroyZoneEnumerator DestroyZoneEnumerator(MemorySegment segment, SegmentScope scope) {
        return DestroyZoneEnumerator.ofAddress(DestroyZoneEnumerator$get(segment), scope);
    }
    static final FunctionDescriptor CopyTemplatePoliciesToZone$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor CopyTemplatePoliciesToZone_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle CopyTemplatePoliciesToZone_UP$MH = RuntimeHelper.upcallHandle(CopyTemplatePoliciesToZone.class, "apply", IInternetZoneManagerExVtbl.CopyTemplatePoliciesToZone_UP$FUNC);
    static final FunctionDescriptor CopyTemplatePoliciesToZone_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle CopyTemplatePoliciesToZone_DOWN$MH = RuntimeHelper.downcallHandle(
        IInternetZoneManagerExVtbl.CopyTemplatePoliciesToZone_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*CopyTemplatePoliciesToZone)(IInternetZoneManagerEx*,DWORD,DWORD,DWORD);
     * }
     */
    public interface CopyTemplatePoliciesToZone {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, int _x3);
        static MemorySegment allocate(CopyTemplatePoliciesToZone fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IInternetZoneManagerExVtbl.CopyTemplatePoliciesToZone_UP$MH, fi, IInternetZoneManagerExVtbl.CopyTemplatePoliciesToZone$FUNC, scope);
        }
        static CopyTemplatePoliciesToZone ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, int __x3) -> {
                try {
                    return (int)IInternetZoneManagerExVtbl.CopyTemplatePoliciesToZone_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle CopyTemplatePoliciesToZone$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("CopyTemplatePoliciesToZone"));
    public static VarHandle CopyTemplatePoliciesToZone$VH() {
        return IInternetZoneManagerExVtbl.CopyTemplatePoliciesToZone$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*CopyTemplatePoliciesToZone)(IInternetZoneManagerEx*,DWORD,DWORD,DWORD);
     * }
     */
    public static MemorySegment CopyTemplatePoliciesToZone$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IInternetZoneManagerExVtbl.CopyTemplatePoliciesToZone$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*CopyTemplatePoliciesToZone)(IInternetZoneManagerEx*,DWORD,DWORD,DWORD);
     * }
     */
    public static void CopyTemplatePoliciesToZone$set(MemorySegment seg, MemorySegment x) {
        IInternetZoneManagerExVtbl.CopyTemplatePoliciesToZone$VH.set(seg, x);
    }
    public static MemorySegment CopyTemplatePoliciesToZone$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IInternetZoneManagerExVtbl.CopyTemplatePoliciesToZone$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CopyTemplatePoliciesToZone$set(MemorySegment seg, long index, MemorySegment x) {
        IInternetZoneManagerExVtbl.CopyTemplatePoliciesToZone$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static CopyTemplatePoliciesToZone CopyTemplatePoliciesToZone(MemorySegment segment, SegmentScope scope) {
        return CopyTemplatePoliciesToZone.ofAddress(CopyTemplatePoliciesToZone$get(segment), scope);
    }
    static final FunctionDescriptor GetZoneActionPolicyEx$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor GetZoneActionPolicyEx_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle GetZoneActionPolicyEx_UP$MH = RuntimeHelper.upcallHandle(GetZoneActionPolicyEx.class, "apply", IInternetZoneManagerExVtbl.GetZoneActionPolicyEx_UP$FUNC);
    static final FunctionDescriptor GetZoneActionPolicyEx_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle GetZoneActionPolicyEx_DOWN$MH = RuntimeHelper.downcallHandle(
        IInternetZoneManagerExVtbl.GetZoneActionPolicyEx_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetZoneActionPolicyEx)(IInternetZoneManagerEx*,DWORD,DWORD,BYTE*,DWORD,URLZONEREG,DWORD);
     * }
     */
    public interface GetZoneActionPolicyEx {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, java.lang.foreign.MemorySegment _x3, int _x4, int _x5, int _x6);
        static MemorySegment allocate(GetZoneActionPolicyEx fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IInternetZoneManagerExVtbl.GetZoneActionPolicyEx_UP$MH, fi, IInternetZoneManagerExVtbl.GetZoneActionPolicyEx$FUNC, scope);
        }
        static GetZoneActionPolicyEx ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, java.lang.foreign.MemorySegment __x3, int __x4, int __x5, int __x6) -> {
                try {
                    return (int)IInternetZoneManagerExVtbl.GetZoneActionPolicyEx_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetZoneActionPolicyEx$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetZoneActionPolicyEx"));
    public static VarHandle GetZoneActionPolicyEx$VH() {
        return IInternetZoneManagerExVtbl.GetZoneActionPolicyEx$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetZoneActionPolicyEx)(IInternetZoneManagerEx*,DWORD,DWORD,BYTE*,DWORD,URLZONEREG,DWORD);
     * }
     */
    public static MemorySegment GetZoneActionPolicyEx$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IInternetZoneManagerExVtbl.GetZoneActionPolicyEx$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetZoneActionPolicyEx)(IInternetZoneManagerEx*,DWORD,DWORD,BYTE*,DWORD,URLZONEREG,DWORD);
     * }
     */
    public static void GetZoneActionPolicyEx$set(MemorySegment seg, MemorySegment x) {
        IInternetZoneManagerExVtbl.GetZoneActionPolicyEx$VH.set(seg, x);
    }
    public static MemorySegment GetZoneActionPolicyEx$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IInternetZoneManagerExVtbl.GetZoneActionPolicyEx$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetZoneActionPolicyEx$set(MemorySegment seg, long index, MemorySegment x) {
        IInternetZoneManagerExVtbl.GetZoneActionPolicyEx$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetZoneActionPolicyEx GetZoneActionPolicyEx(MemorySegment segment, SegmentScope scope) {
        return GetZoneActionPolicyEx.ofAddress(GetZoneActionPolicyEx$get(segment), scope);
    }
    static final FunctionDescriptor SetZoneActionPolicyEx$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor SetZoneActionPolicyEx_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle SetZoneActionPolicyEx_UP$MH = RuntimeHelper.upcallHandle(SetZoneActionPolicyEx.class, "apply", IInternetZoneManagerExVtbl.SetZoneActionPolicyEx_UP$FUNC);
    static final FunctionDescriptor SetZoneActionPolicyEx_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle SetZoneActionPolicyEx_DOWN$MH = RuntimeHelper.downcallHandle(
        IInternetZoneManagerExVtbl.SetZoneActionPolicyEx_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetZoneActionPolicyEx)(IInternetZoneManagerEx*,DWORD,DWORD,BYTE*,DWORD,URLZONEREG,DWORD);
     * }
     */
    public interface SetZoneActionPolicyEx {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, java.lang.foreign.MemorySegment _x3, int _x4, int _x5, int _x6);
        static MemorySegment allocate(SetZoneActionPolicyEx fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IInternetZoneManagerExVtbl.SetZoneActionPolicyEx_UP$MH, fi, IInternetZoneManagerExVtbl.SetZoneActionPolicyEx$FUNC, scope);
        }
        static SetZoneActionPolicyEx ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, java.lang.foreign.MemorySegment __x3, int __x4, int __x5, int __x6) -> {
                try {
                    return (int)IInternetZoneManagerExVtbl.SetZoneActionPolicyEx_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetZoneActionPolicyEx$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetZoneActionPolicyEx"));
    public static VarHandle SetZoneActionPolicyEx$VH() {
        return IInternetZoneManagerExVtbl.SetZoneActionPolicyEx$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetZoneActionPolicyEx)(IInternetZoneManagerEx*,DWORD,DWORD,BYTE*,DWORD,URLZONEREG,DWORD);
     * }
     */
    public static MemorySegment SetZoneActionPolicyEx$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IInternetZoneManagerExVtbl.SetZoneActionPolicyEx$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetZoneActionPolicyEx)(IInternetZoneManagerEx*,DWORD,DWORD,BYTE*,DWORD,URLZONEREG,DWORD);
     * }
     */
    public static void SetZoneActionPolicyEx$set(MemorySegment seg, MemorySegment x) {
        IInternetZoneManagerExVtbl.SetZoneActionPolicyEx$VH.set(seg, x);
    }
    public static MemorySegment SetZoneActionPolicyEx$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IInternetZoneManagerExVtbl.SetZoneActionPolicyEx$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetZoneActionPolicyEx$set(MemorySegment seg, long index, MemorySegment x) {
        IInternetZoneManagerExVtbl.SetZoneActionPolicyEx$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetZoneActionPolicyEx SetZoneActionPolicyEx(MemorySegment segment, SegmentScope scope) {
        return SetZoneActionPolicyEx.ofAddress(SetZoneActionPolicyEx$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


