// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct tagMETHODDATA {
 *     OLECHAR* szName;
 *     PARAMDATA* ppdata;
 *     DISPID dispid;
 *     UINT iMeth;
 *     CALLCONV cc;
 *     UINT cArgs;
 *     WORD wFlags;
 *     VARTYPE vtReturn;
 * };
 * }
 */
public class tagMETHODDATA {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("szName"),
        Constants$root.C_POINTER$LAYOUT.withName("ppdata"),
        Constants$root.C_LONG$LAYOUT.withName("dispid"),
        Constants$root.C_LONG$LAYOUT.withName("iMeth"),
        Constants$root.C_LONG$LAYOUT.withName("cc"),
        Constants$root.C_LONG$LAYOUT.withName("cArgs"),
        Constants$root.C_SHORT$LAYOUT.withName("wFlags"),
        Constants$root.C_SHORT$LAYOUT.withName("vtReturn"),
        MemoryLayout.paddingLayout(32)
    ).withName("tagMETHODDATA");
    public static MemoryLayout $LAYOUT() {
        return tagMETHODDATA.$struct$LAYOUT;
    }
    static final VarHandle szName$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("szName"));
    public static VarHandle szName$VH() {
        return tagMETHODDATA.szName$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * OLECHAR* szName;
     * }
     */
    public static MemorySegment szName$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)tagMETHODDATA.szName$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * OLECHAR* szName;
     * }
     */
    public static void szName$set(MemorySegment seg, MemorySegment x) {
        tagMETHODDATA.szName$VH.set(seg, x);
    }
    public static MemorySegment szName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)tagMETHODDATA.szName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void szName$set(MemorySegment seg, long index, MemorySegment x) {
        tagMETHODDATA.szName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ppdata$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ppdata"));
    public static VarHandle ppdata$VH() {
        return tagMETHODDATA.ppdata$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PARAMDATA* ppdata;
     * }
     */
    public static MemorySegment ppdata$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)tagMETHODDATA.ppdata$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PARAMDATA* ppdata;
     * }
     */
    public static void ppdata$set(MemorySegment seg, MemorySegment x) {
        tagMETHODDATA.ppdata$VH.set(seg, x);
    }
    public static MemorySegment ppdata$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)tagMETHODDATA.ppdata$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ppdata$set(MemorySegment seg, long index, MemorySegment x) {
        tagMETHODDATA.ppdata$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dispid$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dispid"));
    public static VarHandle dispid$VH() {
        return tagMETHODDATA.dispid$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DISPID dispid;
     * }
     */
    public static int dispid$get(MemorySegment seg) {
        return (int)tagMETHODDATA.dispid$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DISPID dispid;
     * }
     */
    public static void dispid$set(MemorySegment seg, int x) {
        tagMETHODDATA.dispid$VH.set(seg, x);
    }
    public static int dispid$get(MemorySegment seg, long index) {
        return (int)tagMETHODDATA.dispid$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dispid$set(MemorySegment seg, long index, int x) {
        tagMETHODDATA.dispid$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle iMeth$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("iMeth"));
    public static VarHandle iMeth$VH() {
        return tagMETHODDATA.iMeth$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * UINT iMeth;
     * }
     */
    public static int iMeth$get(MemorySegment seg) {
        return (int)tagMETHODDATA.iMeth$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * UINT iMeth;
     * }
     */
    public static void iMeth$set(MemorySegment seg, int x) {
        tagMETHODDATA.iMeth$VH.set(seg, x);
    }
    public static int iMeth$get(MemorySegment seg, long index) {
        return (int)tagMETHODDATA.iMeth$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void iMeth$set(MemorySegment seg, long index, int x) {
        tagMETHODDATA.iMeth$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cc$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cc"));
    public static VarHandle cc$VH() {
        return tagMETHODDATA.cc$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * CALLCONV cc;
     * }
     */
    public static int cc$get(MemorySegment seg) {
        return (int)tagMETHODDATA.cc$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * CALLCONV cc;
     * }
     */
    public static void cc$set(MemorySegment seg, int x) {
        tagMETHODDATA.cc$VH.set(seg, x);
    }
    public static int cc$get(MemorySegment seg, long index) {
        return (int)tagMETHODDATA.cc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cc$set(MemorySegment seg, long index, int x) {
        tagMETHODDATA.cc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cArgs$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cArgs"));
    public static VarHandle cArgs$VH() {
        return tagMETHODDATA.cArgs$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * UINT cArgs;
     * }
     */
    public static int cArgs$get(MemorySegment seg) {
        return (int)tagMETHODDATA.cArgs$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * UINT cArgs;
     * }
     */
    public static void cArgs$set(MemorySegment seg, int x) {
        tagMETHODDATA.cArgs$VH.set(seg, x);
    }
    public static int cArgs$get(MemorySegment seg, long index) {
        return (int)tagMETHODDATA.cArgs$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cArgs$set(MemorySegment seg, long index, int x) {
        tagMETHODDATA.cArgs$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle wFlags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("wFlags"));
    public static VarHandle wFlags$VH() {
        return tagMETHODDATA.wFlags$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD wFlags;
     * }
     */
    public static short wFlags$get(MemorySegment seg) {
        return (short)tagMETHODDATA.wFlags$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD wFlags;
     * }
     */
    public static void wFlags$set(MemorySegment seg, short x) {
        tagMETHODDATA.wFlags$VH.set(seg, x);
    }
    public static short wFlags$get(MemorySegment seg, long index) {
        return (short)tagMETHODDATA.wFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void wFlags$set(MemorySegment seg, long index, short x) {
        tagMETHODDATA.wFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle vtReturn$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("vtReturn"));
    public static VarHandle vtReturn$VH() {
        return tagMETHODDATA.vtReturn$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VARTYPE vtReturn;
     * }
     */
    public static short vtReturn$get(MemorySegment seg) {
        return (short)tagMETHODDATA.vtReturn$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VARTYPE vtReturn;
     * }
     */
    public static void vtReturn$set(MemorySegment seg, short x) {
        tagMETHODDATA.vtReturn$VH.set(seg, x);
    }
    public static short vtReturn$get(MemorySegment seg, long index) {
        return (short)tagMETHODDATA.vtReturn$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void vtReturn$set(MemorySegment seg, long index, short x) {
        tagMETHODDATA.vtReturn$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


