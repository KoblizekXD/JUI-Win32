// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
final class constants$843 {

    // Suppresses default constructor, ensuring non-instantiability.
    private constants$843() {}
    static final FunctionDescriptor RpcSmClientFree$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle RpcSmClientFree$MH = RuntimeHelper.downcallHandle(
        "RpcSmClientFree",
        constants$843.RpcSmClientFree$FUNC
    );
    static final FunctionDescriptor RpcSmDestroyClientContext$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle RpcSmDestroyClientContext$MH = RuntimeHelper.downcallHandle(
        "RpcSmDestroyClientContext",
        constants$843.RpcSmDestroyClientContext$FUNC
    );
    static final FunctionDescriptor RpcSmDisableAllocate$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT);
    static final MethodHandle RpcSmDisableAllocate$MH = RuntimeHelper.downcallHandle(
        "RpcSmDisableAllocate",
        constants$843.RpcSmDisableAllocate$FUNC
    );
    static final FunctionDescriptor RpcSmEnableAllocate$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT);
    static final MethodHandle RpcSmEnableAllocate$MH = RuntimeHelper.downcallHandle(
        "RpcSmEnableAllocate",
        constants$843.RpcSmEnableAllocate$FUNC
    );
    static final FunctionDescriptor RpcSmFree$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle RpcSmFree$MH = RuntimeHelper.downcallHandle(
        "RpcSmFree",
        constants$843.RpcSmFree$FUNC
    );
    static final FunctionDescriptor RpcSmGetThreadHandle$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle RpcSmGetThreadHandle$MH = RuntimeHelper.downcallHandle(
        "RpcSmGetThreadHandle",
        constants$843.RpcSmGetThreadHandle$FUNC
    );
}


