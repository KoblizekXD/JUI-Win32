// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * long (*LPTOP_LEVEL_EXCEPTION_FILTER)(struct _EXCEPTION_POINTERS*);
 * }
 */
public interface LPTOP_LEVEL_EXCEPTION_FILTER {

    int apply(java.lang.foreign.MemorySegment pszPath);
    static MemorySegment allocate(LPTOP_LEVEL_EXCEPTION_FILTER fi, SegmentScope scope) {
        return RuntimeHelper.upcallStub(constants$139.LPTOP_LEVEL_EXCEPTION_FILTER_UP$MH, fi, constants$139.LPTOP_LEVEL_EXCEPTION_FILTER$FUNC, scope);
    }
    static LPTOP_LEVEL_EXCEPTION_FILTER ofAddress(MemorySegment addr, SegmentScope scope) {
        MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
        return (java.lang.foreign.MemorySegment _pszPath) -> {
            try {
                return (int)constants$139.LPTOP_LEVEL_EXCEPTION_FILTER_DOWN$MH.invokeExact(symbol, _pszPath);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


