// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct netent {
 *     char* n_name;
 *     char** n_aliases;
 *     short n_addrtype;
 *     u_long n_net;
 * };
 * }
 */
public class netent {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("n_name"),
        Constants$root.C_POINTER$LAYOUT.withName("n_aliases"),
        Constants$root.C_SHORT$LAYOUT.withName("n_addrtype"),
        MemoryLayout.paddingLayout(16),
        Constants$root.C_LONG$LAYOUT.withName("n_net")
    ).withName("netent");
    public static MemoryLayout $LAYOUT() {
        return netent.$struct$LAYOUT;
    }
    static final VarHandle n_name$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("n_name"));
    public static VarHandle n_name$VH() {
        return netent.n_name$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* n_name;
     * }
     */
    public static MemorySegment n_name$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)netent.n_name$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* n_name;
     * }
     */
    public static void n_name$set(MemorySegment seg, MemorySegment x) {
        netent.n_name$VH.set(seg, x);
    }
    public static MemorySegment n_name$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)netent.n_name$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void n_name$set(MemorySegment seg, long index, MemorySegment x) {
        netent.n_name$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle n_aliases$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("n_aliases"));
    public static VarHandle n_aliases$VH() {
        return netent.n_aliases$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char** n_aliases;
     * }
     */
    public static MemorySegment n_aliases$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)netent.n_aliases$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char** n_aliases;
     * }
     */
    public static void n_aliases$set(MemorySegment seg, MemorySegment x) {
        netent.n_aliases$VH.set(seg, x);
    }
    public static MemorySegment n_aliases$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)netent.n_aliases$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void n_aliases$set(MemorySegment seg, long index, MemorySegment x) {
        netent.n_aliases$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle n_addrtype$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("n_addrtype"));
    public static VarHandle n_addrtype$VH() {
        return netent.n_addrtype$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short n_addrtype;
     * }
     */
    public static short n_addrtype$get(MemorySegment seg) {
        return (short)netent.n_addrtype$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short n_addrtype;
     * }
     */
    public static void n_addrtype$set(MemorySegment seg, short x) {
        netent.n_addrtype$VH.set(seg, x);
    }
    public static short n_addrtype$get(MemorySegment seg, long index) {
        return (short)netent.n_addrtype$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void n_addrtype$set(MemorySegment seg, long index, short x) {
        netent.n_addrtype$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle n_net$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("n_net"));
    public static VarHandle n_net$VH() {
        return netent.n_net$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * u_long n_net;
     * }
     */
    public static int n_net$get(MemorySegment seg) {
        return (int)netent.n_net$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * u_long n_net;
     * }
     */
    public static void n_net$set(MemorySegment seg, int x) {
        netent.n_net$VH.set(seg, x);
    }
    public static int n_net$get(MemorySegment seg, long index) {
        return (int)netent.n_net$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void n_net$set(MemorySegment seg, long index, int x) {
        netent.n_net$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


