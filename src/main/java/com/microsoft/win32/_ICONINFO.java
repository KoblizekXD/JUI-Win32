// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _ICONINFO {
 *     BOOL fIcon;
 *     DWORD xHotspot;
 *     DWORD yHotspot;
 *     HBITMAP hbmMask;
 *     HBITMAP hbmColor;
 * };
 * }
 */
public class _ICONINFO {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("fIcon"),
        Constants$root.C_LONG$LAYOUT.withName("xHotspot"),
        Constants$root.C_LONG$LAYOUT.withName("yHotspot"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("hbmMask"),
        Constants$root.C_POINTER$LAYOUT.withName("hbmColor")
    ).withName("_ICONINFO");
    public static MemoryLayout $LAYOUT() {
        return _ICONINFO.$struct$LAYOUT;
    }
    static final VarHandle fIcon$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("fIcon"));
    public static VarHandle fIcon$VH() {
        return _ICONINFO.fIcon$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BOOL fIcon;
     * }
     */
    public static int fIcon$get(MemorySegment seg) {
        return (int)_ICONINFO.fIcon$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BOOL fIcon;
     * }
     */
    public static void fIcon$set(MemorySegment seg, int x) {
        _ICONINFO.fIcon$VH.set(seg, x);
    }
    public static int fIcon$get(MemorySegment seg, long index) {
        return (int)_ICONINFO.fIcon$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void fIcon$set(MemorySegment seg, long index, int x) {
        _ICONINFO.fIcon$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle xHotspot$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("xHotspot"));
    public static VarHandle xHotspot$VH() {
        return _ICONINFO.xHotspot$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD xHotspot;
     * }
     */
    public static int xHotspot$get(MemorySegment seg) {
        return (int)_ICONINFO.xHotspot$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD xHotspot;
     * }
     */
    public static void xHotspot$set(MemorySegment seg, int x) {
        _ICONINFO.xHotspot$VH.set(seg, x);
    }
    public static int xHotspot$get(MemorySegment seg, long index) {
        return (int)_ICONINFO.xHotspot$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void xHotspot$set(MemorySegment seg, long index, int x) {
        _ICONINFO.xHotspot$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle yHotspot$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("yHotspot"));
    public static VarHandle yHotspot$VH() {
        return _ICONINFO.yHotspot$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD yHotspot;
     * }
     */
    public static int yHotspot$get(MemorySegment seg) {
        return (int)_ICONINFO.yHotspot$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD yHotspot;
     * }
     */
    public static void yHotspot$set(MemorySegment seg, int x) {
        _ICONINFO.yHotspot$VH.set(seg, x);
    }
    public static int yHotspot$get(MemorySegment seg, long index) {
        return (int)_ICONINFO.yHotspot$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void yHotspot$set(MemorySegment seg, long index, int x) {
        _ICONINFO.yHotspot$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hbmMask$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hbmMask"));
    public static VarHandle hbmMask$VH() {
        return _ICONINFO.hbmMask$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HBITMAP hbmMask;
     * }
     */
    public static MemorySegment hbmMask$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_ICONINFO.hbmMask$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HBITMAP hbmMask;
     * }
     */
    public static void hbmMask$set(MemorySegment seg, MemorySegment x) {
        _ICONINFO.hbmMask$VH.set(seg, x);
    }
    public static MemorySegment hbmMask$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_ICONINFO.hbmMask$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hbmMask$set(MemorySegment seg, long index, MemorySegment x) {
        _ICONINFO.hbmMask$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hbmColor$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hbmColor"));
    public static VarHandle hbmColor$VH() {
        return _ICONINFO.hbmColor$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HBITMAP hbmColor;
     * }
     */
    public static MemorySegment hbmColor$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_ICONINFO.hbmColor$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HBITMAP hbmColor;
     * }
     */
    public static void hbmColor$set(MemorySegment seg, MemorySegment x) {
        _ICONINFO.hbmColor$VH.set(seg, x);
    }
    public static MemorySegment hbmColor$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_ICONINFO.hbmColor$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hbmColor$set(MemorySegment seg, long index, MemorySegment x) {
        _ICONINFO.hbmColor$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


