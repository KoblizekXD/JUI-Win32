// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct tagFINDREPLACEA {
 *     DWORD lStructSize;
 *     HWND hwndOwner;
 *     HINSTANCE hInstance;
 *     DWORD Flags;
 *     LPSTR lpstrFindWhat;
 *     LPSTR lpstrReplaceWith;
 *     WORD wFindWhatLen;
 *     WORD wReplaceWithLen;
 *     LPARAM lCustData;
 *     LPFRHOOKPROC lpfnHook;
 *     LPCSTR lpTemplateName;
 * };
 * }
 */
public class tagFINDREPLACEA {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("lStructSize"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("hwndOwner"),
        Constants$root.C_POINTER$LAYOUT.withName("hInstance"),
        Constants$root.C_LONG$LAYOUT.withName("Flags"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("lpstrFindWhat"),
        Constants$root.C_POINTER$LAYOUT.withName("lpstrReplaceWith"),
        Constants$root.C_SHORT$LAYOUT.withName("wFindWhatLen"),
        Constants$root.C_SHORT$LAYOUT.withName("wReplaceWithLen"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_LONG_LONG$LAYOUT.withName("lCustData"),
        Constants$root.C_POINTER$LAYOUT.withName("lpfnHook"),
        Constants$root.C_POINTER$LAYOUT.withName("lpTemplateName")
    ).withName("tagFINDREPLACEA");
    public static MemoryLayout $LAYOUT() {
        return tagFINDREPLACEA.$struct$LAYOUT;
    }
    static final VarHandle lStructSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lStructSize"));
    public static VarHandle lStructSize$VH() {
        return tagFINDREPLACEA.lStructSize$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD lStructSize;
     * }
     */
    public static int lStructSize$get(MemorySegment seg) {
        return (int)tagFINDREPLACEA.lStructSize$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD lStructSize;
     * }
     */
    public static void lStructSize$set(MemorySegment seg, int x) {
        tagFINDREPLACEA.lStructSize$VH.set(seg, x);
    }
    public static int lStructSize$get(MemorySegment seg, long index) {
        return (int)tagFINDREPLACEA.lStructSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lStructSize$set(MemorySegment seg, long index, int x) {
        tagFINDREPLACEA.lStructSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hwndOwner$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hwndOwner"));
    public static VarHandle hwndOwner$VH() {
        return tagFINDREPLACEA.hwndOwner$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HWND hwndOwner;
     * }
     */
    public static MemorySegment hwndOwner$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)tagFINDREPLACEA.hwndOwner$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HWND hwndOwner;
     * }
     */
    public static void hwndOwner$set(MemorySegment seg, MemorySegment x) {
        tagFINDREPLACEA.hwndOwner$VH.set(seg, x);
    }
    public static MemorySegment hwndOwner$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)tagFINDREPLACEA.hwndOwner$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hwndOwner$set(MemorySegment seg, long index, MemorySegment x) {
        tagFINDREPLACEA.hwndOwner$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hInstance$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hInstance"));
    public static VarHandle hInstance$VH() {
        return tagFINDREPLACEA.hInstance$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HINSTANCE hInstance;
     * }
     */
    public static MemorySegment hInstance$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)tagFINDREPLACEA.hInstance$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HINSTANCE hInstance;
     * }
     */
    public static void hInstance$set(MemorySegment seg, MemorySegment x) {
        tagFINDREPLACEA.hInstance$VH.set(seg, x);
    }
    public static MemorySegment hInstance$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)tagFINDREPLACEA.hInstance$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hInstance$set(MemorySegment seg, long index, MemorySegment x) {
        tagFINDREPLACEA.hInstance$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Flags"));
    public static VarHandle Flags$VH() {
        return tagFINDREPLACEA.Flags$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Flags;
     * }
     */
    public static int Flags$get(MemorySegment seg) {
        return (int)tagFINDREPLACEA.Flags$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Flags;
     * }
     */
    public static void Flags$set(MemorySegment seg, int x) {
        tagFINDREPLACEA.Flags$VH.set(seg, x);
    }
    public static int Flags$get(MemorySegment seg, long index) {
        return (int)tagFINDREPLACEA.Flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Flags$set(MemorySegment seg, long index, int x) {
        tagFINDREPLACEA.Flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lpstrFindWhat$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lpstrFindWhat"));
    public static VarHandle lpstrFindWhat$VH() {
        return tagFINDREPLACEA.lpstrFindWhat$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPSTR lpstrFindWhat;
     * }
     */
    public static MemorySegment lpstrFindWhat$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)tagFINDREPLACEA.lpstrFindWhat$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPSTR lpstrFindWhat;
     * }
     */
    public static void lpstrFindWhat$set(MemorySegment seg, MemorySegment x) {
        tagFINDREPLACEA.lpstrFindWhat$VH.set(seg, x);
    }
    public static MemorySegment lpstrFindWhat$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)tagFINDREPLACEA.lpstrFindWhat$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpstrFindWhat$set(MemorySegment seg, long index, MemorySegment x) {
        tagFINDREPLACEA.lpstrFindWhat$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lpstrReplaceWith$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lpstrReplaceWith"));
    public static VarHandle lpstrReplaceWith$VH() {
        return tagFINDREPLACEA.lpstrReplaceWith$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPSTR lpstrReplaceWith;
     * }
     */
    public static MemorySegment lpstrReplaceWith$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)tagFINDREPLACEA.lpstrReplaceWith$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPSTR lpstrReplaceWith;
     * }
     */
    public static void lpstrReplaceWith$set(MemorySegment seg, MemorySegment x) {
        tagFINDREPLACEA.lpstrReplaceWith$VH.set(seg, x);
    }
    public static MemorySegment lpstrReplaceWith$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)tagFINDREPLACEA.lpstrReplaceWith$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpstrReplaceWith$set(MemorySegment seg, long index, MemorySegment x) {
        tagFINDREPLACEA.lpstrReplaceWith$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle wFindWhatLen$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("wFindWhatLen"));
    public static VarHandle wFindWhatLen$VH() {
        return tagFINDREPLACEA.wFindWhatLen$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD wFindWhatLen;
     * }
     */
    public static short wFindWhatLen$get(MemorySegment seg) {
        return (short)tagFINDREPLACEA.wFindWhatLen$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD wFindWhatLen;
     * }
     */
    public static void wFindWhatLen$set(MemorySegment seg, short x) {
        tagFINDREPLACEA.wFindWhatLen$VH.set(seg, x);
    }
    public static short wFindWhatLen$get(MemorySegment seg, long index) {
        return (short)tagFINDREPLACEA.wFindWhatLen$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void wFindWhatLen$set(MemorySegment seg, long index, short x) {
        tagFINDREPLACEA.wFindWhatLen$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle wReplaceWithLen$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("wReplaceWithLen"));
    public static VarHandle wReplaceWithLen$VH() {
        return tagFINDREPLACEA.wReplaceWithLen$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD wReplaceWithLen;
     * }
     */
    public static short wReplaceWithLen$get(MemorySegment seg) {
        return (short)tagFINDREPLACEA.wReplaceWithLen$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD wReplaceWithLen;
     * }
     */
    public static void wReplaceWithLen$set(MemorySegment seg, short x) {
        tagFINDREPLACEA.wReplaceWithLen$VH.set(seg, x);
    }
    public static short wReplaceWithLen$get(MemorySegment seg, long index) {
        return (short)tagFINDREPLACEA.wReplaceWithLen$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void wReplaceWithLen$set(MemorySegment seg, long index, short x) {
        tagFINDREPLACEA.wReplaceWithLen$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lCustData$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lCustData"));
    public static VarHandle lCustData$VH() {
        return tagFINDREPLACEA.lCustData$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPARAM lCustData;
     * }
     */
    public static long lCustData$get(MemorySegment seg) {
        return (long)tagFINDREPLACEA.lCustData$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPARAM lCustData;
     * }
     */
    public static void lCustData$set(MemorySegment seg, long x) {
        tagFINDREPLACEA.lCustData$VH.set(seg, x);
    }
    public static long lCustData$get(MemorySegment seg, long index) {
        return (long)tagFINDREPLACEA.lCustData$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lCustData$set(MemorySegment seg, long index, long x) {
        tagFINDREPLACEA.lCustData$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lpfnHook$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lpfnHook"));
    public static VarHandle lpfnHook$VH() {
        return tagFINDREPLACEA.lpfnHook$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPFRHOOKPROC lpfnHook;
     * }
     */
    public static MemorySegment lpfnHook$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)tagFINDREPLACEA.lpfnHook$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPFRHOOKPROC lpfnHook;
     * }
     */
    public static void lpfnHook$set(MemorySegment seg, MemorySegment x) {
        tagFINDREPLACEA.lpfnHook$VH.set(seg, x);
    }
    public static MemorySegment lpfnHook$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)tagFINDREPLACEA.lpfnHook$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpfnHook$set(MemorySegment seg, long index, MemorySegment x) {
        tagFINDREPLACEA.lpfnHook$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static LPFRHOOKPROC lpfnHook(MemorySegment segment, SegmentScope scope) {
        return LPFRHOOKPROC.ofAddress(lpfnHook$get(segment), scope);
    }
    static final VarHandle lpTemplateName$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lpTemplateName"));
    public static VarHandle lpTemplateName$VH() {
        return tagFINDREPLACEA.lpTemplateName$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPCSTR lpTemplateName;
     * }
     */
    public static MemorySegment lpTemplateName$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)tagFINDREPLACEA.lpTemplateName$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPCSTR lpTemplateName;
     * }
     */
    public static void lpTemplateName$set(MemorySegment seg, MemorySegment x) {
        tagFINDREPLACEA.lpTemplateName$VH.set(seg, x);
    }
    public static MemorySegment lpTemplateName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)tagFINDREPLACEA.lpTemplateName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpTemplateName$set(MemorySegment seg, long index, MemorySegment x) {
        tagFINDREPLACEA.lpTemplateName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


