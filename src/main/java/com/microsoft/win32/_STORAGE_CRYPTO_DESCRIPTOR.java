// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _STORAGE_CRYPTO_DESCRIPTOR {
 *     DWORD Version;
 *     DWORD Size;
 *     DWORD NumKeysSupported;
 *     DWORD NumCryptoCapabilities;
 *     STORAGE_CRYPTO_CAPABILITY CryptoCapabilities[1];
 * };
 * }
 */
public class _STORAGE_CRYPTO_DESCRIPTOR {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("Version"),
        Constants$root.C_LONG$LAYOUT.withName("Size"),
        Constants$root.C_LONG$LAYOUT.withName("NumKeysSupported"),
        Constants$root.C_LONG$LAYOUT.withName("NumCryptoCapabilities"),
        MemoryLayout.sequenceLayout(1, MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("Version"),
            Constants$root.C_LONG$LAYOUT.withName("Size"),
            Constants$root.C_LONG$LAYOUT.withName("CryptoCapabilityIndex"),
            Constants$root.C_LONG$LAYOUT.withName("AlgorithmId"),
            Constants$root.C_LONG$LAYOUT.withName("KeySize"),
            Constants$root.C_LONG$LAYOUT.withName("DataUnitSizeBitmask")
        ).withName("_STORAGE_CRYPTO_CAPABILITY")).withName("CryptoCapabilities")
    ).withName("_STORAGE_CRYPTO_DESCRIPTOR");
    public static MemoryLayout $LAYOUT() {
        return _STORAGE_CRYPTO_DESCRIPTOR.$struct$LAYOUT;
    }
    static final VarHandle Version$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Version"));
    public static VarHandle Version$VH() {
        return _STORAGE_CRYPTO_DESCRIPTOR.Version$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Version;
     * }
     */
    public static int Version$get(MemorySegment seg) {
        return (int)_STORAGE_CRYPTO_DESCRIPTOR.Version$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Version;
     * }
     */
    public static void Version$set(MemorySegment seg, int x) {
        _STORAGE_CRYPTO_DESCRIPTOR.Version$VH.set(seg, x);
    }
    public static int Version$get(MemorySegment seg, long index) {
        return (int)_STORAGE_CRYPTO_DESCRIPTOR.Version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Version$set(MemorySegment seg, long index, int x) {
        _STORAGE_CRYPTO_DESCRIPTOR.Version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Size$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Size"));
    public static VarHandle Size$VH() {
        return _STORAGE_CRYPTO_DESCRIPTOR.Size$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Size;
     * }
     */
    public static int Size$get(MemorySegment seg) {
        return (int)_STORAGE_CRYPTO_DESCRIPTOR.Size$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Size;
     * }
     */
    public static void Size$set(MemorySegment seg, int x) {
        _STORAGE_CRYPTO_DESCRIPTOR.Size$VH.set(seg, x);
    }
    public static int Size$get(MemorySegment seg, long index) {
        return (int)_STORAGE_CRYPTO_DESCRIPTOR.Size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Size$set(MemorySegment seg, long index, int x) {
        _STORAGE_CRYPTO_DESCRIPTOR.Size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle NumKeysSupported$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("NumKeysSupported"));
    public static VarHandle NumKeysSupported$VH() {
        return _STORAGE_CRYPTO_DESCRIPTOR.NumKeysSupported$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD NumKeysSupported;
     * }
     */
    public static int NumKeysSupported$get(MemorySegment seg) {
        return (int)_STORAGE_CRYPTO_DESCRIPTOR.NumKeysSupported$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD NumKeysSupported;
     * }
     */
    public static void NumKeysSupported$set(MemorySegment seg, int x) {
        _STORAGE_CRYPTO_DESCRIPTOR.NumKeysSupported$VH.set(seg, x);
    }
    public static int NumKeysSupported$get(MemorySegment seg, long index) {
        return (int)_STORAGE_CRYPTO_DESCRIPTOR.NumKeysSupported$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void NumKeysSupported$set(MemorySegment seg, long index, int x) {
        _STORAGE_CRYPTO_DESCRIPTOR.NumKeysSupported$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle NumCryptoCapabilities$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("NumCryptoCapabilities"));
    public static VarHandle NumCryptoCapabilities$VH() {
        return _STORAGE_CRYPTO_DESCRIPTOR.NumCryptoCapabilities$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD NumCryptoCapabilities;
     * }
     */
    public static int NumCryptoCapabilities$get(MemorySegment seg) {
        return (int)_STORAGE_CRYPTO_DESCRIPTOR.NumCryptoCapabilities$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD NumCryptoCapabilities;
     * }
     */
    public static void NumCryptoCapabilities$set(MemorySegment seg, int x) {
        _STORAGE_CRYPTO_DESCRIPTOR.NumCryptoCapabilities$VH.set(seg, x);
    }
    public static int NumCryptoCapabilities$get(MemorySegment seg, long index) {
        return (int)_STORAGE_CRYPTO_DESCRIPTOR.NumCryptoCapabilities$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void NumCryptoCapabilities$set(MemorySegment seg, long index, int x) {
        _STORAGE_CRYPTO_DESCRIPTOR.NumCryptoCapabilities$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment CryptoCapabilities$slice(MemorySegment seg) {
        return seg.asSlice(16, 24);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


