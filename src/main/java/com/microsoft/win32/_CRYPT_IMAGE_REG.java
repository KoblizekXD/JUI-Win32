// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _CRYPT_IMAGE_REG {
 *     PWSTR pszImage;
 *     ULONG cInterfaces;
 *     PCRYPT_INTERFACE_REG* rgpInterfaces;
 * };
 * }
 */
public class _CRYPT_IMAGE_REG {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("pszImage"),
        Constants$root.C_LONG$LAYOUT.withName("cInterfaces"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("rgpInterfaces")
    ).withName("_CRYPT_IMAGE_REG");
    public static MemoryLayout $LAYOUT() {
        return _CRYPT_IMAGE_REG.$struct$LAYOUT;
    }
    static final VarHandle pszImage$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pszImage"));
    public static VarHandle pszImage$VH() {
        return _CRYPT_IMAGE_REG.pszImage$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PWSTR pszImage;
     * }
     */
    public static MemorySegment pszImage$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_CRYPT_IMAGE_REG.pszImage$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PWSTR pszImage;
     * }
     */
    public static void pszImage$set(MemorySegment seg, MemorySegment x) {
        _CRYPT_IMAGE_REG.pszImage$VH.set(seg, x);
    }
    public static MemorySegment pszImage$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_CRYPT_IMAGE_REG.pszImage$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pszImage$set(MemorySegment seg, long index, MemorySegment x) {
        _CRYPT_IMAGE_REG.pszImage$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cInterfaces$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cInterfaces"));
    public static VarHandle cInterfaces$VH() {
        return _CRYPT_IMAGE_REG.cInterfaces$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG cInterfaces;
     * }
     */
    public static int cInterfaces$get(MemorySegment seg) {
        return (int)_CRYPT_IMAGE_REG.cInterfaces$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG cInterfaces;
     * }
     */
    public static void cInterfaces$set(MemorySegment seg, int x) {
        _CRYPT_IMAGE_REG.cInterfaces$VH.set(seg, x);
    }
    public static int cInterfaces$get(MemorySegment seg, long index) {
        return (int)_CRYPT_IMAGE_REG.cInterfaces$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cInterfaces$set(MemorySegment seg, long index, int x) {
        _CRYPT_IMAGE_REG.cInterfaces$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle rgpInterfaces$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("rgpInterfaces"));
    public static VarHandle rgpInterfaces$VH() {
        return _CRYPT_IMAGE_REG.rgpInterfaces$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PCRYPT_INTERFACE_REG* rgpInterfaces;
     * }
     */
    public static MemorySegment rgpInterfaces$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_CRYPT_IMAGE_REG.rgpInterfaces$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PCRYPT_INTERFACE_REG* rgpInterfaces;
     * }
     */
    public static void rgpInterfaces$set(MemorySegment seg, MemorySegment x) {
        _CRYPT_IMAGE_REG.rgpInterfaces$VH.set(seg, x);
    }
    public static MemorySegment rgpInterfaces$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_CRYPT_IMAGE_REG.rgpInterfaces$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void rgpInterfaces$set(MemorySegment seg, long index, MemorySegment x) {
        _CRYPT_IMAGE_REG.rgpInterfaces$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


