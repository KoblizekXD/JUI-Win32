// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IErrorInfoVtbl {
 *     HRESULT (*QueryInterface)(IErrorInfo*,const IID*,void**);
 *     ULONG (*AddRef)(IErrorInfo*);
 *     ULONG (*Release)(IErrorInfo*);
 *     HRESULT (*GetGUID)(IErrorInfo*,GUID*);
 *     HRESULT (*GetSource)(IErrorInfo*,BSTR*);
 *     HRESULT (*GetDescription)(IErrorInfo*,BSTR*);
 *     HRESULT (*GetHelpFile)(IErrorInfo*,BSTR*);
 *     HRESULT (*GetHelpContext)(IErrorInfo*,DWORD*);
 * };
 * }
 */
public class IErrorInfoVtbl {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("GetGUID"),
        Constants$root.C_POINTER$LAYOUT.withName("GetSource"),
        Constants$root.C_POINTER$LAYOUT.withName("GetDescription"),
        Constants$root.C_POINTER$LAYOUT.withName("GetHelpFile"),
        Constants$root.C_POINTER$LAYOUT.withName("GetHelpContext")
    ).withName("IErrorInfoVtbl");
    public static MemoryLayout $LAYOUT() {
        return IErrorInfoVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor QueryInterface_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_UP$MH = RuntimeHelper.upcallHandle(QueryInterface.class, "apply", IErrorInfoVtbl.QueryInterface_UP$FUNC);
    static final FunctionDescriptor QueryInterface_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_DOWN$MH = RuntimeHelper.downcallHandle(
        IErrorInfoVtbl.QueryInterface_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(IErrorInfo*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IErrorInfoVtbl.QueryInterface_UP$MH, fi, IErrorInfoVtbl.QueryInterface$FUNC, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IErrorInfoVtbl.QueryInterface_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return IErrorInfoVtbl.QueryInterface$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IErrorInfo*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IErrorInfoVtbl.QueryInterface$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IErrorInfo*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        IErrorInfoVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IErrorInfoVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        IErrorInfoVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, SegmentScope scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor AddRef_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_UP$MH = RuntimeHelper.upcallHandle(AddRef.class, "apply", IErrorInfoVtbl.AddRef_UP$FUNC);
    static final FunctionDescriptor AddRef_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_DOWN$MH = RuntimeHelper.downcallHandle(
        IErrorInfoVtbl.AddRef_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*AddRef)(IErrorInfo*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IErrorInfoVtbl.AddRef_UP$MH, fi, IErrorInfoVtbl.AddRef$FUNC, scope);
        }
        static AddRef ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IErrorInfoVtbl.AddRef_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return IErrorInfoVtbl.AddRef$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(IErrorInfo*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IErrorInfoVtbl.AddRef$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(IErrorInfo*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        IErrorInfoVtbl.AddRef$VH.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IErrorInfoVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        IErrorInfoVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, SegmentScope scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Release_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_UP$MH = RuntimeHelper.upcallHandle(Release.class, "apply", IErrorInfoVtbl.Release_UP$FUNC);
    static final FunctionDescriptor Release_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_DOWN$MH = RuntimeHelper.downcallHandle(
        IErrorInfoVtbl.Release_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*Release)(IErrorInfo*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IErrorInfoVtbl.Release_UP$MH, fi, IErrorInfoVtbl.Release$FUNC, scope);
        }
        static Release ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IErrorInfoVtbl.Release_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return IErrorInfoVtbl.Release$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(IErrorInfo*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IErrorInfoVtbl.Release$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(IErrorInfo*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        IErrorInfoVtbl.Release$VH.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IErrorInfoVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        IErrorInfoVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, SegmentScope scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    static final FunctionDescriptor GetGUID$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetGUID_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetGUID_UP$MH = RuntimeHelper.upcallHandle(GetGUID.class, "apply", IErrorInfoVtbl.GetGUID_UP$FUNC);
    static final FunctionDescriptor GetGUID_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetGUID_DOWN$MH = RuntimeHelper.downcallHandle(
        IErrorInfoVtbl.GetGUID_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetGUID)(IErrorInfo*,GUID*);
     * }
     */
    public interface GetGUID {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetGUID fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IErrorInfoVtbl.GetGUID_UP$MH, fi, IErrorInfoVtbl.GetGUID$FUNC, scope);
        }
        static GetGUID ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IErrorInfoVtbl.GetGUID_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetGUID$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetGUID"));
    public static VarHandle GetGUID$VH() {
        return IErrorInfoVtbl.GetGUID$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetGUID)(IErrorInfo*,GUID*);
     * }
     */
    public static MemorySegment GetGUID$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IErrorInfoVtbl.GetGUID$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetGUID)(IErrorInfo*,GUID*);
     * }
     */
    public static void GetGUID$set(MemorySegment seg, MemorySegment x) {
        IErrorInfoVtbl.GetGUID$VH.set(seg, x);
    }
    public static MemorySegment GetGUID$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IErrorInfoVtbl.GetGUID$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetGUID$set(MemorySegment seg, long index, MemorySegment x) {
        IErrorInfoVtbl.GetGUID$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetGUID GetGUID(MemorySegment segment, SegmentScope scope) {
        return GetGUID.ofAddress(GetGUID$get(segment), scope);
    }
    static final FunctionDescriptor GetSource$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetSource_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetSource_UP$MH = RuntimeHelper.upcallHandle(GetSource.class, "apply", IErrorInfoVtbl.GetSource_UP$FUNC);
    static final FunctionDescriptor GetSource_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetSource_DOWN$MH = RuntimeHelper.downcallHandle(
        IErrorInfoVtbl.GetSource_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetSource)(IErrorInfo*,BSTR*);
     * }
     */
    public interface GetSource {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetSource fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IErrorInfoVtbl.GetSource_UP$MH, fi, IErrorInfoVtbl.GetSource$FUNC, scope);
        }
        static GetSource ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IErrorInfoVtbl.GetSource_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetSource$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetSource"));
    public static VarHandle GetSource$VH() {
        return IErrorInfoVtbl.GetSource$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetSource)(IErrorInfo*,BSTR*);
     * }
     */
    public static MemorySegment GetSource$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IErrorInfoVtbl.GetSource$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetSource)(IErrorInfo*,BSTR*);
     * }
     */
    public static void GetSource$set(MemorySegment seg, MemorySegment x) {
        IErrorInfoVtbl.GetSource$VH.set(seg, x);
    }
    public static MemorySegment GetSource$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IErrorInfoVtbl.GetSource$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetSource$set(MemorySegment seg, long index, MemorySegment x) {
        IErrorInfoVtbl.GetSource$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetSource GetSource(MemorySegment segment, SegmentScope scope) {
        return GetSource.ofAddress(GetSource$get(segment), scope);
    }
    static final FunctionDescriptor GetDescription$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetDescription_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetDescription_UP$MH = RuntimeHelper.upcallHandle(GetDescription.class, "apply", IErrorInfoVtbl.GetDescription_UP$FUNC);
    static final FunctionDescriptor GetDescription_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetDescription_DOWN$MH = RuntimeHelper.downcallHandle(
        IErrorInfoVtbl.GetDescription_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetDescription)(IErrorInfo*,BSTR*);
     * }
     */
    public interface GetDescription {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetDescription fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IErrorInfoVtbl.GetDescription_UP$MH, fi, IErrorInfoVtbl.GetDescription$FUNC, scope);
        }
        static GetDescription ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IErrorInfoVtbl.GetDescription_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetDescription$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetDescription"));
    public static VarHandle GetDescription$VH() {
        return IErrorInfoVtbl.GetDescription$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetDescription)(IErrorInfo*,BSTR*);
     * }
     */
    public static MemorySegment GetDescription$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IErrorInfoVtbl.GetDescription$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetDescription)(IErrorInfo*,BSTR*);
     * }
     */
    public static void GetDescription$set(MemorySegment seg, MemorySegment x) {
        IErrorInfoVtbl.GetDescription$VH.set(seg, x);
    }
    public static MemorySegment GetDescription$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IErrorInfoVtbl.GetDescription$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDescription$set(MemorySegment seg, long index, MemorySegment x) {
        IErrorInfoVtbl.GetDescription$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDescription GetDescription(MemorySegment segment, SegmentScope scope) {
        return GetDescription.ofAddress(GetDescription$get(segment), scope);
    }
    static final FunctionDescriptor GetHelpFile$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetHelpFile_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetHelpFile_UP$MH = RuntimeHelper.upcallHandle(GetHelpFile.class, "apply", IErrorInfoVtbl.GetHelpFile_UP$FUNC);
    static final FunctionDescriptor GetHelpFile_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetHelpFile_DOWN$MH = RuntimeHelper.downcallHandle(
        IErrorInfoVtbl.GetHelpFile_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetHelpFile)(IErrorInfo*,BSTR*);
     * }
     */
    public interface GetHelpFile {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetHelpFile fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IErrorInfoVtbl.GetHelpFile_UP$MH, fi, IErrorInfoVtbl.GetHelpFile$FUNC, scope);
        }
        static GetHelpFile ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IErrorInfoVtbl.GetHelpFile_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetHelpFile$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetHelpFile"));
    public static VarHandle GetHelpFile$VH() {
        return IErrorInfoVtbl.GetHelpFile$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetHelpFile)(IErrorInfo*,BSTR*);
     * }
     */
    public static MemorySegment GetHelpFile$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IErrorInfoVtbl.GetHelpFile$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetHelpFile)(IErrorInfo*,BSTR*);
     * }
     */
    public static void GetHelpFile$set(MemorySegment seg, MemorySegment x) {
        IErrorInfoVtbl.GetHelpFile$VH.set(seg, x);
    }
    public static MemorySegment GetHelpFile$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IErrorInfoVtbl.GetHelpFile$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetHelpFile$set(MemorySegment seg, long index, MemorySegment x) {
        IErrorInfoVtbl.GetHelpFile$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetHelpFile GetHelpFile(MemorySegment segment, SegmentScope scope) {
        return GetHelpFile.ofAddress(GetHelpFile$get(segment), scope);
    }
    static final FunctionDescriptor GetHelpContext$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetHelpContext_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetHelpContext_UP$MH = RuntimeHelper.upcallHandle(GetHelpContext.class, "apply", IErrorInfoVtbl.GetHelpContext_UP$FUNC);
    static final FunctionDescriptor GetHelpContext_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetHelpContext_DOWN$MH = RuntimeHelper.downcallHandle(
        IErrorInfoVtbl.GetHelpContext_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetHelpContext)(IErrorInfo*,DWORD*);
     * }
     */
    public interface GetHelpContext {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetHelpContext fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IErrorInfoVtbl.GetHelpContext_UP$MH, fi, IErrorInfoVtbl.GetHelpContext$FUNC, scope);
        }
        static GetHelpContext ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IErrorInfoVtbl.GetHelpContext_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetHelpContext$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetHelpContext"));
    public static VarHandle GetHelpContext$VH() {
        return IErrorInfoVtbl.GetHelpContext$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetHelpContext)(IErrorInfo*,DWORD*);
     * }
     */
    public static MemorySegment GetHelpContext$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IErrorInfoVtbl.GetHelpContext$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetHelpContext)(IErrorInfo*,DWORD*);
     * }
     */
    public static void GetHelpContext$set(MemorySegment seg, MemorySegment x) {
        IErrorInfoVtbl.GetHelpContext$VH.set(seg, x);
    }
    public static MemorySegment GetHelpContext$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IErrorInfoVtbl.GetHelpContext$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetHelpContext$set(MemorySegment seg, long index, MemorySegment x) {
        IErrorInfoVtbl.GetHelpContext$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetHelpContext GetHelpContext(MemorySegment segment, SegmentScope scope) {
        return GetHelpContext.ofAddress(GetHelpContext$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


