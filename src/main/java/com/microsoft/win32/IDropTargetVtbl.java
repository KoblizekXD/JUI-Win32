// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IDropTargetVtbl {
 *     HRESULT (*QueryInterface)(IDropTarget*,const IID*,void**);
 *     ULONG (*AddRef)(IDropTarget*);
 *     ULONG (*Release)(IDropTarget*);
 *     HRESULT (*DragEnter)(IDropTarget*,IDataObject*,DWORD,POINTL,DWORD*);
 *     HRESULT (*DragOver)(IDropTarget*,DWORD,POINTL,DWORD*);
 *     HRESULT (*DragLeave)(IDropTarget*);
 *     HRESULT (*Drop)(IDropTarget*,IDataObject*,DWORD,POINTL,DWORD*);
 * };
 * }
 */
public class IDropTargetVtbl {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("DragEnter"),
        Constants$root.C_POINTER$LAYOUT.withName("DragOver"),
        Constants$root.C_POINTER$LAYOUT.withName("DragLeave"),
        Constants$root.C_POINTER$LAYOUT.withName("Drop")
    ).withName("IDropTargetVtbl");
    public static MemoryLayout $LAYOUT() {
        return IDropTargetVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor QueryInterface_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_UP$MH = RuntimeHelper.upcallHandle(QueryInterface.class, "apply", IDropTargetVtbl.QueryInterface_UP$FUNC);
    static final FunctionDescriptor QueryInterface_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_DOWN$MH = RuntimeHelper.downcallHandle(
        IDropTargetVtbl.QueryInterface_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(IDropTarget*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IDropTargetVtbl.QueryInterface_UP$MH, fi, IDropTargetVtbl.QueryInterface$FUNC, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IDropTargetVtbl.QueryInterface_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return IDropTargetVtbl.QueryInterface$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IDropTarget*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IDropTargetVtbl.QueryInterface$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IDropTarget*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        IDropTargetVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IDropTargetVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        IDropTargetVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, SegmentScope scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor AddRef_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_UP$MH = RuntimeHelper.upcallHandle(AddRef.class, "apply", IDropTargetVtbl.AddRef_UP$FUNC);
    static final FunctionDescriptor AddRef_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_DOWN$MH = RuntimeHelper.downcallHandle(
        IDropTargetVtbl.AddRef_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*AddRef)(IDropTarget*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IDropTargetVtbl.AddRef_UP$MH, fi, IDropTargetVtbl.AddRef$FUNC, scope);
        }
        static AddRef ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IDropTargetVtbl.AddRef_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return IDropTargetVtbl.AddRef$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(IDropTarget*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IDropTargetVtbl.AddRef$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(IDropTarget*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        IDropTargetVtbl.AddRef$VH.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IDropTargetVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        IDropTargetVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, SegmentScope scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Release_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_UP$MH = RuntimeHelper.upcallHandle(Release.class, "apply", IDropTargetVtbl.Release_UP$FUNC);
    static final FunctionDescriptor Release_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_DOWN$MH = RuntimeHelper.downcallHandle(
        IDropTargetVtbl.Release_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*Release)(IDropTarget*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IDropTargetVtbl.Release_UP$MH, fi, IDropTargetVtbl.Release$FUNC, scope);
        }
        static Release ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IDropTargetVtbl.Release_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return IDropTargetVtbl.Release$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(IDropTarget*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IDropTargetVtbl.Release$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(IDropTarget*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        IDropTargetVtbl.Release$VH.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IDropTargetVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        IDropTargetVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, SegmentScope scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    static final FunctionDescriptor DragEnter$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("x"),
            Constants$root.C_LONG$LAYOUT.withName("y")
        ).withName("_POINTL"),
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor DragEnter_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("x"),
            Constants$root.C_LONG$LAYOUT.withName("y")
        ).withName("_POINTL"),
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle DragEnter_UP$MH = RuntimeHelper.upcallHandle(DragEnter.class, "apply", IDropTargetVtbl.DragEnter_UP$FUNC);
    static final FunctionDescriptor DragEnter_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("x"),
            Constants$root.C_LONG$LAYOUT.withName("y")
        ).withName("_POINTL"),
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle DragEnter_DOWN$MH = RuntimeHelper.downcallHandle(
        IDropTargetVtbl.DragEnter_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*DragEnter)(IDropTarget*,IDataObject*,DWORD,POINTL,DWORD*);
     * }
     */
    public interface DragEnter {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(DragEnter fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IDropTargetVtbl.DragEnter_UP$MH, fi, IDropTargetVtbl.DragEnter$FUNC, scope);
        }
        static DragEnter ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (int)IDropTargetVtbl.DragEnter_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle DragEnter$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("DragEnter"));
    public static VarHandle DragEnter$VH() {
        return IDropTargetVtbl.DragEnter$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*DragEnter)(IDropTarget*,IDataObject*,DWORD,POINTL,DWORD*);
     * }
     */
    public static MemorySegment DragEnter$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IDropTargetVtbl.DragEnter$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*DragEnter)(IDropTarget*,IDataObject*,DWORD,POINTL,DWORD*);
     * }
     */
    public static void DragEnter$set(MemorySegment seg, MemorySegment x) {
        IDropTargetVtbl.DragEnter$VH.set(seg, x);
    }
    public static MemorySegment DragEnter$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IDropTargetVtbl.DragEnter$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DragEnter$set(MemorySegment seg, long index, MemorySegment x) {
        IDropTargetVtbl.DragEnter$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static DragEnter DragEnter(MemorySegment segment, SegmentScope scope) {
        return DragEnter.ofAddress(DragEnter$get(segment), scope);
    }
    static final FunctionDescriptor DragOver$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("x"),
            Constants$root.C_LONG$LAYOUT.withName("y")
        ).withName("_POINTL"),
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor DragOver_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("x"),
            Constants$root.C_LONG$LAYOUT.withName("y")
        ).withName("_POINTL"),
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle DragOver_UP$MH = RuntimeHelper.upcallHandle(DragOver.class, "apply", IDropTargetVtbl.DragOver_UP$FUNC);
    static final FunctionDescriptor DragOver_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("x"),
            Constants$root.C_LONG$LAYOUT.withName("y")
        ).withName("_POINTL"),
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle DragOver_DOWN$MH = RuntimeHelper.downcallHandle(
        IDropTargetVtbl.DragOver_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*DragOver)(IDropTarget*,DWORD,POINTL,DWORD*);
     * }
     */
    public interface DragOver {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(DragOver fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IDropTargetVtbl.DragOver_UP$MH, fi, IDropTargetVtbl.DragOver$FUNC, scope);
        }
        static DragOver ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)IDropTargetVtbl.DragOver_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle DragOver$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("DragOver"));
    public static VarHandle DragOver$VH() {
        return IDropTargetVtbl.DragOver$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*DragOver)(IDropTarget*,DWORD,POINTL,DWORD*);
     * }
     */
    public static MemorySegment DragOver$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IDropTargetVtbl.DragOver$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*DragOver)(IDropTarget*,DWORD,POINTL,DWORD*);
     * }
     */
    public static void DragOver$set(MemorySegment seg, MemorySegment x) {
        IDropTargetVtbl.DragOver$VH.set(seg, x);
    }
    public static MemorySegment DragOver$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IDropTargetVtbl.DragOver$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DragOver$set(MemorySegment seg, long index, MemorySegment x) {
        IDropTargetVtbl.DragOver$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static DragOver DragOver(MemorySegment segment, SegmentScope scope) {
        return DragOver.ofAddress(DragOver$get(segment), scope);
    }
    static final FunctionDescriptor DragLeave$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor DragLeave_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle DragLeave_UP$MH = RuntimeHelper.upcallHandle(DragLeave.class, "apply", IDropTargetVtbl.DragLeave_UP$FUNC);
    static final FunctionDescriptor DragLeave_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle DragLeave_DOWN$MH = RuntimeHelper.downcallHandle(
        IDropTargetVtbl.DragLeave_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*DragLeave)(IDropTarget*);
     * }
     */
    public interface DragLeave {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(DragLeave fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IDropTargetVtbl.DragLeave_UP$MH, fi, IDropTargetVtbl.DragLeave$FUNC, scope);
        }
        static DragLeave ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IDropTargetVtbl.DragLeave_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle DragLeave$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("DragLeave"));
    public static VarHandle DragLeave$VH() {
        return IDropTargetVtbl.DragLeave$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*DragLeave)(IDropTarget*);
     * }
     */
    public static MemorySegment DragLeave$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IDropTargetVtbl.DragLeave$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*DragLeave)(IDropTarget*);
     * }
     */
    public static void DragLeave$set(MemorySegment seg, MemorySegment x) {
        IDropTargetVtbl.DragLeave$VH.set(seg, x);
    }
    public static MemorySegment DragLeave$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IDropTargetVtbl.DragLeave$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DragLeave$set(MemorySegment seg, long index, MemorySegment x) {
        IDropTargetVtbl.DragLeave$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static DragLeave DragLeave(MemorySegment segment, SegmentScope scope) {
        return DragLeave.ofAddress(DragLeave$get(segment), scope);
    }
    static final FunctionDescriptor Drop$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("x"),
            Constants$root.C_LONG$LAYOUT.withName("y")
        ).withName("_POINTL"),
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Drop_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("x"),
            Constants$root.C_LONG$LAYOUT.withName("y")
        ).withName("_POINTL"),
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Drop_UP$MH = RuntimeHelper.upcallHandle(Drop.class, "apply", IDropTargetVtbl.Drop_UP$FUNC);
    static final FunctionDescriptor Drop_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("x"),
            Constants$root.C_LONG$LAYOUT.withName("y")
        ).withName("_POINTL"),
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Drop_DOWN$MH = RuntimeHelper.downcallHandle(
        IDropTargetVtbl.Drop_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*Drop)(IDropTarget*,IDataObject*,DWORD,POINTL,DWORD*);
     * }
     */
    public interface Drop {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(Drop fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IDropTargetVtbl.Drop_UP$MH, fi, IDropTargetVtbl.Drop$FUNC, scope);
        }
        static Drop ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (int)IDropTargetVtbl.Drop_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Drop$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Drop"));
    public static VarHandle Drop$VH() {
        return IDropTargetVtbl.Drop$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Drop)(IDropTarget*,IDataObject*,DWORD,POINTL,DWORD*);
     * }
     */
    public static MemorySegment Drop$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IDropTargetVtbl.Drop$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Drop)(IDropTarget*,IDataObject*,DWORD,POINTL,DWORD*);
     * }
     */
    public static void Drop$set(MemorySegment seg, MemorySegment x) {
        IDropTargetVtbl.Drop$VH.set(seg, x);
    }
    public static MemorySegment Drop$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IDropTargetVtbl.Drop$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Drop$set(MemorySegment seg, long index, MemorySegment x) {
        IDropTargetVtbl.Drop$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Drop Drop(MemorySegment segment, SegmentScope scope) {
        return Drop.ofAddress(Drop$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


