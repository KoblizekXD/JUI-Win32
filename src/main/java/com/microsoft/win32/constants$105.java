// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
final class constants$105 {

    // Suppresses default constructor, ensuring non-instantiability.
    private constants$105() {}
    static final FunctionDescriptor RtlGetSystemGlobalData$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle RtlGetSystemGlobalData$MH = RuntimeHelper.downcallHandle(
        "RtlGetSystemGlobalData",
        constants$105.RtlGetSystemGlobalData$FUNC
    );
    static final FunctionDescriptor RtlSetSystemGlobalData$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle RtlSetSystemGlobalData$MH = RuntimeHelper.downcallHandle(
        "RtlSetSystemGlobalData",
        constants$105.RtlSetSystemGlobalData$FUNC
    );
    static final FunctionDescriptor PAPCFUNC$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final FunctionDescriptor PAPCFUNC_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final MethodHandle PAPCFUNC_UP$MH = RuntimeHelper.upcallHandle(PAPCFUNC.class, "apply", constants$105.PAPCFUNC_UP$FUNC);
    static final FunctionDescriptor PAPCFUNC_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final MethodHandle PAPCFUNC_DOWN$MH = RuntimeHelper.downcallHandle(
        constants$105.PAPCFUNC_DOWN$FUNC
    );
    static final FunctionDescriptor PVECTORED_EXCEPTION_HANDLER$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor PVECTORED_EXCEPTION_HANDLER_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle PVECTORED_EXCEPTION_HANDLER_UP$MH = RuntimeHelper.upcallHandle(PVECTORED_EXCEPTION_HANDLER.class, "apply", constants$105.PVECTORED_EXCEPTION_HANDLER_UP$FUNC);
    static final FunctionDescriptor PVECTORED_EXCEPTION_HANDLER_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle PVECTORED_EXCEPTION_HANDLER_DOWN$MH = RuntimeHelper.downcallHandle(
        constants$105.PVECTORED_EXCEPTION_HANDLER_DOWN$FUNC
    );
}


