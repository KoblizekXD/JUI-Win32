// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IAuthenticateExVtbl {
 *     HRESULT (*QueryInterface)(IAuthenticateEx*,const IID*,void**);
 *     ULONG (*AddRef)(IAuthenticateEx*);
 *     ULONG (*Release)(IAuthenticateEx*);
 *     HRESULT (*Authenticate)(IAuthenticateEx*,HWND*,LPWSTR*,LPWSTR*);
 *     HRESULT (*AuthenticateEx)(IAuthenticateEx*,HWND*,LPWSTR*,LPWSTR*,AUTHENTICATEINFO*);
 * };
 * }
 */
public class IAuthenticateExVtbl {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("Authenticate"),
        Constants$root.C_POINTER$LAYOUT.withName("AuthenticateEx")
    ).withName("IAuthenticateExVtbl");
    public static MemoryLayout $LAYOUT() {
        return IAuthenticateExVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor QueryInterface_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_UP$MH = RuntimeHelper.upcallHandle(QueryInterface.class, "apply", IAuthenticateExVtbl.QueryInterface_UP$FUNC);
    static final FunctionDescriptor QueryInterface_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_DOWN$MH = RuntimeHelper.downcallHandle(
        IAuthenticateExVtbl.QueryInterface_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(IAuthenticateEx*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IAuthenticateExVtbl.QueryInterface_UP$MH, fi, IAuthenticateExVtbl.QueryInterface$FUNC, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IAuthenticateExVtbl.QueryInterface_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return IAuthenticateExVtbl.QueryInterface$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IAuthenticateEx*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IAuthenticateExVtbl.QueryInterface$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IAuthenticateEx*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        IAuthenticateExVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IAuthenticateExVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        IAuthenticateExVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, SegmentScope scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor AddRef_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_UP$MH = RuntimeHelper.upcallHandle(AddRef.class, "apply", IAuthenticateExVtbl.AddRef_UP$FUNC);
    static final FunctionDescriptor AddRef_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_DOWN$MH = RuntimeHelper.downcallHandle(
        IAuthenticateExVtbl.AddRef_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*AddRef)(IAuthenticateEx*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IAuthenticateExVtbl.AddRef_UP$MH, fi, IAuthenticateExVtbl.AddRef$FUNC, scope);
        }
        static AddRef ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IAuthenticateExVtbl.AddRef_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return IAuthenticateExVtbl.AddRef$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(IAuthenticateEx*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IAuthenticateExVtbl.AddRef$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(IAuthenticateEx*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        IAuthenticateExVtbl.AddRef$VH.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IAuthenticateExVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        IAuthenticateExVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, SegmentScope scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Release_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_UP$MH = RuntimeHelper.upcallHandle(Release.class, "apply", IAuthenticateExVtbl.Release_UP$FUNC);
    static final FunctionDescriptor Release_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_DOWN$MH = RuntimeHelper.downcallHandle(
        IAuthenticateExVtbl.Release_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*Release)(IAuthenticateEx*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IAuthenticateExVtbl.Release_UP$MH, fi, IAuthenticateExVtbl.Release$FUNC, scope);
        }
        static Release ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IAuthenticateExVtbl.Release_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return IAuthenticateExVtbl.Release$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(IAuthenticateEx*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IAuthenticateExVtbl.Release$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(IAuthenticateEx*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        IAuthenticateExVtbl.Release$VH.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IAuthenticateExVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        IAuthenticateExVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, SegmentScope scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    static final FunctionDescriptor Authenticate$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Authenticate_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Authenticate_UP$MH = RuntimeHelper.upcallHandle(Authenticate.class, "apply", IAuthenticateExVtbl.Authenticate_UP$FUNC);
    static final FunctionDescriptor Authenticate_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Authenticate_DOWN$MH = RuntimeHelper.downcallHandle(
        IAuthenticateExVtbl.Authenticate_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*Authenticate)(IAuthenticateEx*,HWND*,LPWSTR*,LPWSTR*);
     * }
     */
    public interface Authenticate {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(Authenticate fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IAuthenticateExVtbl.Authenticate_UP$MH, fi, IAuthenticateExVtbl.Authenticate$FUNC, scope);
        }
        static Authenticate ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)IAuthenticateExVtbl.Authenticate_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Authenticate$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Authenticate"));
    public static VarHandle Authenticate$VH() {
        return IAuthenticateExVtbl.Authenticate$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Authenticate)(IAuthenticateEx*,HWND*,LPWSTR*,LPWSTR*);
     * }
     */
    public static MemorySegment Authenticate$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IAuthenticateExVtbl.Authenticate$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Authenticate)(IAuthenticateEx*,HWND*,LPWSTR*,LPWSTR*);
     * }
     */
    public static void Authenticate$set(MemorySegment seg, MemorySegment x) {
        IAuthenticateExVtbl.Authenticate$VH.set(seg, x);
    }
    public static MemorySegment Authenticate$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IAuthenticateExVtbl.Authenticate$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Authenticate$set(MemorySegment seg, long index, MemorySegment x) {
        IAuthenticateExVtbl.Authenticate$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Authenticate Authenticate(MemorySegment segment, SegmentScope scope) {
        return Authenticate.ofAddress(Authenticate$get(segment), scope);
    }
    static final FunctionDescriptor AuthenticateEx$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor AuthenticateEx_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AuthenticateEx_UP$MH = RuntimeHelper.upcallHandle(AuthenticateEx.class, "apply", IAuthenticateExVtbl.AuthenticateEx_UP$FUNC);
    static final FunctionDescriptor AuthenticateEx_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AuthenticateEx_DOWN$MH = RuntimeHelper.downcallHandle(
        IAuthenticateExVtbl.AuthenticateEx_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*AuthenticateEx)(IAuthenticateEx*,HWND*,LPWSTR*,LPWSTR*,AUTHENTICATEINFO*);
     * }
     */
    public interface AuthenticateEx {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(AuthenticateEx fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IAuthenticateExVtbl.AuthenticateEx_UP$MH, fi, IAuthenticateExVtbl.AuthenticateEx$FUNC, scope);
        }
        static AuthenticateEx ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (int)IAuthenticateExVtbl.AuthenticateEx_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AuthenticateEx$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AuthenticateEx"));
    public static VarHandle AuthenticateEx$VH() {
        return IAuthenticateExVtbl.AuthenticateEx$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*AuthenticateEx)(IAuthenticateEx*,HWND*,LPWSTR*,LPWSTR*,AUTHENTICATEINFO*);
     * }
     */
    public static MemorySegment AuthenticateEx$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IAuthenticateExVtbl.AuthenticateEx$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*AuthenticateEx)(IAuthenticateEx*,HWND*,LPWSTR*,LPWSTR*,AUTHENTICATEINFO*);
     * }
     */
    public static void AuthenticateEx$set(MemorySegment seg, MemorySegment x) {
        IAuthenticateExVtbl.AuthenticateEx$VH.set(seg, x);
    }
    public static MemorySegment AuthenticateEx$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IAuthenticateExVtbl.AuthenticateEx$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AuthenticateEx$set(MemorySegment seg, long index, MemorySegment x) {
        IAuthenticateExVtbl.AuthenticateEx$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AuthenticateEx AuthenticateEx(MemorySegment segment, SegmentScope scope) {
        return AuthenticateEx.ofAddress(AuthenticateEx$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


