// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct {
 *     RPC_NS_HANDLE LookupContext;
 *     RPC_BINDING_HANDLE ProposedHandle;
 *     RPC_BINDING_VECTOR* Bindings;
 * };
 * }
 */
public class RPC_IMPORT_CONTEXT_P {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("LookupContext"),
        Constants$root.C_POINTER$LAYOUT.withName("ProposedHandle"),
        Constants$root.C_POINTER$LAYOUT.withName("Bindings")
    );
    public static MemoryLayout $LAYOUT() {
        return RPC_IMPORT_CONTEXT_P.$struct$LAYOUT;
    }
    static final VarHandle LookupContext$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("LookupContext"));
    public static VarHandle LookupContext$VH() {
        return RPC_IMPORT_CONTEXT_P.LookupContext$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * RPC_NS_HANDLE LookupContext;
     * }
     */
    public static MemorySegment LookupContext$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)RPC_IMPORT_CONTEXT_P.LookupContext$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * RPC_NS_HANDLE LookupContext;
     * }
     */
    public static void LookupContext$set(MemorySegment seg, MemorySegment x) {
        RPC_IMPORT_CONTEXT_P.LookupContext$VH.set(seg, x);
    }
    public static MemorySegment LookupContext$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)RPC_IMPORT_CONTEXT_P.LookupContext$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void LookupContext$set(MemorySegment seg, long index, MemorySegment x) {
        RPC_IMPORT_CONTEXT_P.LookupContext$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ProposedHandle$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ProposedHandle"));
    public static VarHandle ProposedHandle$VH() {
        return RPC_IMPORT_CONTEXT_P.ProposedHandle$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * RPC_BINDING_HANDLE ProposedHandle;
     * }
     */
    public static MemorySegment ProposedHandle$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)RPC_IMPORT_CONTEXT_P.ProposedHandle$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * RPC_BINDING_HANDLE ProposedHandle;
     * }
     */
    public static void ProposedHandle$set(MemorySegment seg, MemorySegment x) {
        RPC_IMPORT_CONTEXT_P.ProposedHandle$VH.set(seg, x);
    }
    public static MemorySegment ProposedHandle$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)RPC_IMPORT_CONTEXT_P.ProposedHandle$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ProposedHandle$set(MemorySegment seg, long index, MemorySegment x) {
        RPC_IMPORT_CONTEXT_P.ProposedHandle$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Bindings$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Bindings"));
    public static VarHandle Bindings$VH() {
        return RPC_IMPORT_CONTEXT_P.Bindings$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * RPC_BINDING_VECTOR* Bindings;
     * }
     */
    public static MemorySegment Bindings$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)RPC_IMPORT_CONTEXT_P.Bindings$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * RPC_BINDING_VECTOR* Bindings;
     * }
     */
    public static void Bindings$set(MemorySegment seg, MemorySegment x) {
        RPC_IMPORT_CONTEXT_P.Bindings$VH.set(seg, x);
    }
    public static MemorySegment Bindings$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)RPC_IMPORT_CONTEXT_P.Bindings$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Bindings$set(MemorySegment seg, long index, MemorySegment x) {
        RPC_IMPORT_CONTEXT_P.Bindings$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


