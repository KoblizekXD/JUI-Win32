// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _IMAGE_HOT_PATCH_INFO {
 *     DWORD Version;
 *     DWORD Size;
 *     DWORD SequenceNumber;
 *     DWORD BaseImageList;
 *     DWORD BaseImageCount;
 *     DWORD BufferOffset;
 *     DWORD ExtraPatchSize;
 * };
 * }
 */
public class _IMAGE_HOT_PATCH_INFO {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("Version"),
        Constants$root.C_LONG$LAYOUT.withName("Size"),
        Constants$root.C_LONG$LAYOUT.withName("SequenceNumber"),
        Constants$root.C_LONG$LAYOUT.withName("BaseImageList"),
        Constants$root.C_LONG$LAYOUT.withName("BaseImageCount"),
        Constants$root.C_LONG$LAYOUT.withName("BufferOffset"),
        Constants$root.C_LONG$LAYOUT.withName("ExtraPatchSize")
    ).withName("_IMAGE_HOT_PATCH_INFO");
    public static MemoryLayout $LAYOUT() {
        return _IMAGE_HOT_PATCH_INFO.$struct$LAYOUT;
    }
    static final VarHandle Version$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Version"));
    public static VarHandle Version$VH() {
        return _IMAGE_HOT_PATCH_INFO.Version$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Version;
     * }
     */
    public static int Version$get(MemorySegment seg) {
        return (int)_IMAGE_HOT_PATCH_INFO.Version$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Version;
     * }
     */
    public static void Version$set(MemorySegment seg, int x) {
        _IMAGE_HOT_PATCH_INFO.Version$VH.set(seg, x);
    }
    public static int Version$get(MemorySegment seg, long index) {
        return (int)_IMAGE_HOT_PATCH_INFO.Version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Version$set(MemorySegment seg, long index, int x) {
        _IMAGE_HOT_PATCH_INFO.Version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Size$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Size"));
    public static VarHandle Size$VH() {
        return _IMAGE_HOT_PATCH_INFO.Size$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Size;
     * }
     */
    public static int Size$get(MemorySegment seg) {
        return (int)_IMAGE_HOT_PATCH_INFO.Size$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Size;
     * }
     */
    public static void Size$set(MemorySegment seg, int x) {
        _IMAGE_HOT_PATCH_INFO.Size$VH.set(seg, x);
    }
    public static int Size$get(MemorySegment seg, long index) {
        return (int)_IMAGE_HOT_PATCH_INFO.Size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Size$set(MemorySegment seg, long index, int x) {
        _IMAGE_HOT_PATCH_INFO.Size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle SequenceNumber$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SequenceNumber"));
    public static VarHandle SequenceNumber$VH() {
        return _IMAGE_HOT_PATCH_INFO.SequenceNumber$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD SequenceNumber;
     * }
     */
    public static int SequenceNumber$get(MemorySegment seg) {
        return (int)_IMAGE_HOT_PATCH_INFO.SequenceNumber$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD SequenceNumber;
     * }
     */
    public static void SequenceNumber$set(MemorySegment seg, int x) {
        _IMAGE_HOT_PATCH_INFO.SequenceNumber$VH.set(seg, x);
    }
    public static int SequenceNumber$get(MemorySegment seg, long index) {
        return (int)_IMAGE_HOT_PATCH_INFO.SequenceNumber$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SequenceNumber$set(MemorySegment seg, long index, int x) {
        _IMAGE_HOT_PATCH_INFO.SequenceNumber$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle BaseImageList$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("BaseImageList"));
    public static VarHandle BaseImageList$VH() {
        return _IMAGE_HOT_PATCH_INFO.BaseImageList$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD BaseImageList;
     * }
     */
    public static int BaseImageList$get(MemorySegment seg) {
        return (int)_IMAGE_HOT_PATCH_INFO.BaseImageList$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD BaseImageList;
     * }
     */
    public static void BaseImageList$set(MemorySegment seg, int x) {
        _IMAGE_HOT_PATCH_INFO.BaseImageList$VH.set(seg, x);
    }
    public static int BaseImageList$get(MemorySegment seg, long index) {
        return (int)_IMAGE_HOT_PATCH_INFO.BaseImageList$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void BaseImageList$set(MemorySegment seg, long index, int x) {
        _IMAGE_HOT_PATCH_INFO.BaseImageList$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle BaseImageCount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("BaseImageCount"));
    public static VarHandle BaseImageCount$VH() {
        return _IMAGE_HOT_PATCH_INFO.BaseImageCount$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD BaseImageCount;
     * }
     */
    public static int BaseImageCount$get(MemorySegment seg) {
        return (int)_IMAGE_HOT_PATCH_INFO.BaseImageCount$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD BaseImageCount;
     * }
     */
    public static void BaseImageCount$set(MemorySegment seg, int x) {
        _IMAGE_HOT_PATCH_INFO.BaseImageCount$VH.set(seg, x);
    }
    public static int BaseImageCount$get(MemorySegment seg, long index) {
        return (int)_IMAGE_HOT_PATCH_INFO.BaseImageCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void BaseImageCount$set(MemorySegment seg, long index, int x) {
        _IMAGE_HOT_PATCH_INFO.BaseImageCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle BufferOffset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("BufferOffset"));
    public static VarHandle BufferOffset$VH() {
        return _IMAGE_HOT_PATCH_INFO.BufferOffset$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD BufferOffset;
     * }
     */
    public static int BufferOffset$get(MemorySegment seg) {
        return (int)_IMAGE_HOT_PATCH_INFO.BufferOffset$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD BufferOffset;
     * }
     */
    public static void BufferOffset$set(MemorySegment seg, int x) {
        _IMAGE_HOT_PATCH_INFO.BufferOffset$VH.set(seg, x);
    }
    public static int BufferOffset$get(MemorySegment seg, long index) {
        return (int)_IMAGE_HOT_PATCH_INFO.BufferOffset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void BufferOffset$set(MemorySegment seg, long index, int x) {
        _IMAGE_HOT_PATCH_INFO.BufferOffset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ExtraPatchSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ExtraPatchSize"));
    public static VarHandle ExtraPatchSize$VH() {
        return _IMAGE_HOT_PATCH_INFO.ExtraPatchSize$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD ExtraPatchSize;
     * }
     */
    public static int ExtraPatchSize$get(MemorySegment seg) {
        return (int)_IMAGE_HOT_PATCH_INFO.ExtraPatchSize$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD ExtraPatchSize;
     * }
     */
    public static void ExtraPatchSize$set(MemorySegment seg, int x) {
        _IMAGE_HOT_PATCH_INFO.ExtraPatchSize$VH.set(seg, x);
    }
    public static int ExtraPatchSize$get(MemorySegment seg, long index) {
        return (int)_IMAGE_HOT_PATCH_INFO.ExtraPatchSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ExtraPatchSize$set(MemorySegment seg, long index, int x) {
        _IMAGE_HOT_PATCH_INFO.ExtraPatchSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


