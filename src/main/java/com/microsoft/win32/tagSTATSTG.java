// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct tagSTATSTG {
 *     LPOLESTR pwcsName;
 *     DWORD type;
 *     ULARGE_INTEGER cbSize;
 *     FILETIME mtime;
 *     FILETIME ctime;
 *     FILETIME atime;
 *     DWORD grfMode;
 *     DWORD grfLocksSupported;
 *     CLSID clsid;
 *     DWORD grfStateBits;
 *     DWORD reserved;
 * };
 * }
 */
public class tagSTATSTG {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("pwcsName"),
        Constants$root.C_LONG$LAYOUT.withName("type"),
        MemoryLayout.paddingLayout(32),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("cbSize"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("dwLowDateTime"),
            Constants$root.C_LONG$LAYOUT.withName("dwHighDateTime")
        ).withName("mtime"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("dwLowDateTime"),
            Constants$root.C_LONG$LAYOUT.withName("dwHighDateTime")
        ).withName("ctime"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("dwLowDateTime"),
            Constants$root.C_LONG$LAYOUT.withName("dwHighDateTime")
        ).withName("atime"),
        Constants$root.C_LONG$LAYOUT.withName("grfMode"),
        Constants$root.C_LONG$LAYOUT.withName("grfLocksSupported"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("Data1"),
            Constants$root.C_SHORT$LAYOUT.withName("Data2"),
            Constants$root.C_SHORT$LAYOUT.withName("Data3"),
            MemoryLayout.sequenceLayout(8, Constants$root.C_CHAR$LAYOUT).withName("Data4")
        ).withName("clsid"),
        Constants$root.C_LONG$LAYOUT.withName("grfStateBits"),
        Constants$root.C_LONG$LAYOUT.withName("reserved")
    ).withName("tagSTATSTG");
    public static MemoryLayout $LAYOUT() {
        return tagSTATSTG.$struct$LAYOUT;
    }
    static final VarHandle pwcsName$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pwcsName"));
    public static VarHandle pwcsName$VH() {
        return tagSTATSTG.pwcsName$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPOLESTR pwcsName;
     * }
     */
    public static MemorySegment pwcsName$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)tagSTATSTG.pwcsName$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPOLESTR pwcsName;
     * }
     */
    public static void pwcsName$set(MemorySegment seg, MemorySegment x) {
        tagSTATSTG.pwcsName$VH.set(seg, x);
    }
    public static MemorySegment pwcsName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)tagSTATSTG.pwcsName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pwcsName$set(MemorySegment seg, long index, MemorySegment x) {
        tagSTATSTG.pwcsName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle type$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("type"));
    public static VarHandle type$VH() {
        return tagSTATSTG.type$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD type;
     * }
     */
    public static int type$get(MemorySegment seg) {
        return (int)tagSTATSTG.type$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD type;
     * }
     */
    public static void type$set(MemorySegment seg, int x) {
        tagSTATSTG.type$VH.set(seg, x);
    }
    public static int type$get(MemorySegment seg, long index) {
        return (int)tagSTATSTG.type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void type$set(MemorySegment seg, long index, int x) {
        tagSTATSTG.type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment cbSize$slice(MemorySegment seg) {
        return seg.asSlice(16, 8);
    }
    public static MemorySegment mtime$slice(MemorySegment seg) {
        return seg.asSlice(24, 8);
    }
    public static MemorySegment ctime$slice(MemorySegment seg) {
        return seg.asSlice(32, 8);
    }
    public static MemorySegment atime$slice(MemorySegment seg) {
        return seg.asSlice(40, 8);
    }
    static final VarHandle grfMode$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("grfMode"));
    public static VarHandle grfMode$VH() {
        return tagSTATSTG.grfMode$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD grfMode;
     * }
     */
    public static int grfMode$get(MemorySegment seg) {
        return (int)tagSTATSTG.grfMode$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD grfMode;
     * }
     */
    public static void grfMode$set(MemorySegment seg, int x) {
        tagSTATSTG.grfMode$VH.set(seg, x);
    }
    public static int grfMode$get(MemorySegment seg, long index) {
        return (int)tagSTATSTG.grfMode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void grfMode$set(MemorySegment seg, long index, int x) {
        tagSTATSTG.grfMode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle grfLocksSupported$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("grfLocksSupported"));
    public static VarHandle grfLocksSupported$VH() {
        return tagSTATSTG.grfLocksSupported$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD grfLocksSupported;
     * }
     */
    public static int grfLocksSupported$get(MemorySegment seg) {
        return (int)tagSTATSTG.grfLocksSupported$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD grfLocksSupported;
     * }
     */
    public static void grfLocksSupported$set(MemorySegment seg, int x) {
        tagSTATSTG.grfLocksSupported$VH.set(seg, x);
    }
    public static int grfLocksSupported$get(MemorySegment seg, long index) {
        return (int)tagSTATSTG.grfLocksSupported$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void grfLocksSupported$set(MemorySegment seg, long index, int x) {
        tagSTATSTG.grfLocksSupported$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment clsid$slice(MemorySegment seg) {
        return seg.asSlice(56, 16);
    }
    static final VarHandle grfStateBits$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("grfStateBits"));
    public static VarHandle grfStateBits$VH() {
        return tagSTATSTG.grfStateBits$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD grfStateBits;
     * }
     */
    public static int grfStateBits$get(MemorySegment seg) {
        return (int)tagSTATSTG.grfStateBits$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD grfStateBits;
     * }
     */
    public static void grfStateBits$set(MemorySegment seg, int x) {
        tagSTATSTG.grfStateBits$VH.set(seg, x);
    }
    public static int grfStateBits$get(MemorySegment seg, long index) {
        return (int)tagSTATSTG.grfStateBits$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void grfStateBits$set(MemorySegment seg, long index, int x) {
        tagSTATSTG.grfStateBits$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle reserved$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("reserved"));
    public static VarHandle reserved$VH() {
        return tagSTATSTG.reserved$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD reserved;
     * }
     */
    public static int reserved$get(MemorySegment seg) {
        return (int)tagSTATSTG.reserved$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD reserved;
     * }
     */
    public static void reserved$set(MemorySegment seg, int x) {
        tagSTATSTG.reserved$VH.set(seg, x);
    }
    public static int reserved$get(MemorySegment seg, long index) {
        return (int)tagSTATSTG.reserved$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void reserved$set(MemorySegment seg, long index, int x) {
        tagSTATSTG.reserved$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


