// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * long (*I_RpcProxyFilterIfFn)(void* Context,struct _GUID* IfUuid,unsigned short IfMajorVersion,int* fAllow);
 * }
 */
public interface I_RpcProxyFilterIfFn {

    int apply(java.lang.foreign.MemorySegment Context, java.lang.foreign.MemorySegment IfUuid, short IfMajorVersion, java.lang.foreign.MemorySegment fAllow);
    static MemorySegment allocate(I_RpcProxyFilterIfFn fi, SegmentScope scope) {
        return RuntimeHelper.upcallStub(constants$677.I_RpcProxyFilterIfFn_UP$MH, fi, constants$677.I_RpcProxyFilterIfFn$FUNC, scope);
    }
    static I_RpcProxyFilterIfFn ofAddress(MemorySegment addr, SegmentScope scope) {
        MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
        return (java.lang.foreign.MemorySegment _Context, java.lang.foreign.MemorySegment _IfUuid, short _IfMajorVersion, java.lang.foreign.MemorySegment _fAllow) -> {
            try {
                return (int)constants$677.I_RpcProxyFilterIfFn_DOWN$MH.invokeExact(symbol, _Context, _IfUuid, _IfMajorVersion, _fAllow);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


