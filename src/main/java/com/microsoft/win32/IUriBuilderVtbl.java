// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IUriBuilderVtbl {
 *     HRESULT (*QueryInterface)(IUriBuilder*,const IID*,void**);
 *     ULONG (*AddRef)(IUriBuilder*);
 *     ULONG (*Release)(IUriBuilder*);
 *     HRESULT (*CreateUriSimple)(IUriBuilder*,DWORD,DWORD_PTR,IUri**);
 *     HRESULT (*CreateUri)(IUriBuilder*,DWORD,DWORD,DWORD_PTR,IUri**);
 *     HRESULT (*CreateUriWithFlags)(IUriBuilder*,DWORD,DWORD,DWORD,DWORD_PTR,IUri**);
 *     HRESULT (*GetIUri)(IUriBuilder*,IUri**);
 *     HRESULT (*SetIUri)(IUriBuilder*,IUri*);
 *     HRESULT (*GetFragment)(IUriBuilder*,DWORD*,LPCWSTR*);
 *     HRESULT (*GetHost)(IUriBuilder*,DWORD*,LPCWSTR*);
 *     HRESULT (*GetPassword)(IUriBuilder*,DWORD*,LPCWSTR*);
 *     HRESULT (*GetPath)(IUriBuilder*,DWORD*,LPCWSTR*);
 *     HRESULT (*GetPort)(IUriBuilder*,BOOL*,DWORD*);
 *     HRESULT (*GetQuery)(IUriBuilder*,DWORD*,LPCWSTR*);
 *     HRESULT (*GetSchemeName)(IUriBuilder*,DWORD*,LPCWSTR*);
 *     HRESULT (*GetUserNameA)(IUriBuilder*,DWORD*,LPCWSTR*);
 *     HRESULT (*SetFragment)(IUriBuilder*,LPCWSTR);
 *     HRESULT (*SetHost)(IUriBuilder*,LPCWSTR);
 *     HRESULT (*SetPassword)(IUriBuilder*,LPCWSTR);
 *     HRESULT (*SetPath)(IUriBuilder*,LPCWSTR);
 *     HRESULT (*SetPortA)(IUriBuilder*,BOOL,DWORD);
 *     HRESULT (*SetQuery)(IUriBuilder*,LPCWSTR);
 *     HRESULT (*SetSchemeName)(IUriBuilder*,LPCWSTR);
 *     HRESULT (*SetUserName)(IUriBuilder*,LPCWSTR);
 *     HRESULT (*RemoveProperties)(IUriBuilder*,DWORD);
 *     HRESULT (*HasBeenModified)(IUriBuilder*,BOOL*);
 * };
 * }
 */
public class IUriBuilderVtbl {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("CreateUriSimple"),
        Constants$root.C_POINTER$LAYOUT.withName("CreateUri"),
        Constants$root.C_POINTER$LAYOUT.withName("CreateUriWithFlags"),
        Constants$root.C_POINTER$LAYOUT.withName("GetIUri"),
        Constants$root.C_POINTER$LAYOUT.withName("SetIUri"),
        Constants$root.C_POINTER$LAYOUT.withName("GetFragment"),
        Constants$root.C_POINTER$LAYOUT.withName("GetHost"),
        Constants$root.C_POINTER$LAYOUT.withName("GetPassword"),
        Constants$root.C_POINTER$LAYOUT.withName("GetPath"),
        Constants$root.C_POINTER$LAYOUT.withName("GetPort"),
        Constants$root.C_POINTER$LAYOUT.withName("GetQuery"),
        Constants$root.C_POINTER$LAYOUT.withName("GetSchemeName"),
        Constants$root.C_POINTER$LAYOUT.withName("GetUserNameA"),
        Constants$root.C_POINTER$LAYOUT.withName("SetFragment"),
        Constants$root.C_POINTER$LAYOUT.withName("SetHost"),
        Constants$root.C_POINTER$LAYOUT.withName("SetPassword"),
        Constants$root.C_POINTER$LAYOUT.withName("SetPath"),
        Constants$root.C_POINTER$LAYOUT.withName("SetPortA"),
        Constants$root.C_POINTER$LAYOUT.withName("SetQuery"),
        Constants$root.C_POINTER$LAYOUT.withName("SetSchemeName"),
        Constants$root.C_POINTER$LAYOUT.withName("SetUserName"),
        Constants$root.C_POINTER$LAYOUT.withName("RemoveProperties"),
        Constants$root.C_POINTER$LAYOUT.withName("HasBeenModified")
    ).withName("IUriBuilderVtbl");
    public static MemoryLayout $LAYOUT() {
        return IUriBuilderVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor QueryInterface_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_UP$MH = RuntimeHelper.upcallHandle(QueryInterface.class, "apply", IUriBuilderVtbl.QueryInterface_UP$FUNC);
    static final FunctionDescriptor QueryInterface_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_DOWN$MH = RuntimeHelper.downcallHandle(
        IUriBuilderVtbl.QueryInterface_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(IUriBuilder*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IUriBuilderVtbl.QueryInterface_UP$MH, fi, IUriBuilderVtbl.QueryInterface$FUNC, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IUriBuilderVtbl.QueryInterface_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return IUriBuilderVtbl.QueryInterface$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IUriBuilder*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IUriBuilderVtbl.QueryInterface$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IUriBuilder*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        IUriBuilderVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IUriBuilderVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        IUriBuilderVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, SegmentScope scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor AddRef_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_UP$MH = RuntimeHelper.upcallHandle(AddRef.class, "apply", IUriBuilderVtbl.AddRef_UP$FUNC);
    static final FunctionDescriptor AddRef_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_DOWN$MH = RuntimeHelper.downcallHandle(
        IUriBuilderVtbl.AddRef_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*AddRef)(IUriBuilder*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IUriBuilderVtbl.AddRef_UP$MH, fi, IUriBuilderVtbl.AddRef$FUNC, scope);
        }
        static AddRef ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IUriBuilderVtbl.AddRef_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return IUriBuilderVtbl.AddRef$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(IUriBuilder*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IUriBuilderVtbl.AddRef$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(IUriBuilder*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        IUriBuilderVtbl.AddRef$VH.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IUriBuilderVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        IUriBuilderVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, SegmentScope scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Release_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_UP$MH = RuntimeHelper.upcallHandle(Release.class, "apply", IUriBuilderVtbl.Release_UP$FUNC);
    static final FunctionDescriptor Release_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_DOWN$MH = RuntimeHelper.downcallHandle(
        IUriBuilderVtbl.Release_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*Release)(IUriBuilder*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IUriBuilderVtbl.Release_UP$MH, fi, IUriBuilderVtbl.Release$FUNC, scope);
        }
        static Release ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IUriBuilderVtbl.Release_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return IUriBuilderVtbl.Release$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(IUriBuilder*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IUriBuilderVtbl.Release$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(IUriBuilder*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        IUriBuilderVtbl.Release$VH.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IUriBuilderVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        IUriBuilderVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, SegmentScope scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    static final FunctionDescriptor CreateUriSimple$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor CreateUriSimple_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle CreateUriSimple_UP$MH = RuntimeHelper.upcallHandle(CreateUriSimple.class, "apply", IUriBuilderVtbl.CreateUriSimple_UP$FUNC);
    static final FunctionDescriptor CreateUriSimple_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle CreateUriSimple_DOWN$MH = RuntimeHelper.downcallHandle(
        IUriBuilderVtbl.CreateUriSimple_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*CreateUriSimple)(IUriBuilder*,DWORD,DWORD_PTR,IUri**);
     * }
     */
    public interface CreateUriSimple {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, long _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(CreateUriSimple fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IUriBuilderVtbl.CreateUriSimple_UP$MH, fi, IUriBuilderVtbl.CreateUriSimple$FUNC, scope);
        }
        static CreateUriSimple ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, long __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)IUriBuilderVtbl.CreateUriSimple_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle CreateUriSimple$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("CreateUriSimple"));
    public static VarHandle CreateUriSimple$VH() {
        return IUriBuilderVtbl.CreateUriSimple$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*CreateUriSimple)(IUriBuilder*,DWORD,DWORD_PTR,IUri**);
     * }
     */
    public static MemorySegment CreateUriSimple$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IUriBuilderVtbl.CreateUriSimple$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*CreateUriSimple)(IUriBuilder*,DWORD,DWORD_PTR,IUri**);
     * }
     */
    public static void CreateUriSimple$set(MemorySegment seg, MemorySegment x) {
        IUriBuilderVtbl.CreateUriSimple$VH.set(seg, x);
    }
    public static MemorySegment CreateUriSimple$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IUriBuilderVtbl.CreateUriSimple$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CreateUriSimple$set(MemorySegment seg, long index, MemorySegment x) {
        IUriBuilderVtbl.CreateUriSimple$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static CreateUriSimple CreateUriSimple(MemorySegment segment, SegmentScope scope) {
        return CreateUriSimple.ofAddress(CreateUriSimple$get(segment), scope);
    }
    static final FunctionDescriptor CreateUri$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor CreateUri_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle CreateUri_UP$MH = RuntimeHelper.upcallHandle(CreateUri.class, "apply", IUriBuilderVtbl.CreateUri_UP$FUNC);
    static final FunctionDescriptor CreateUri_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle CreateUri_DOWN$MH = RuntimeHelper.downcallHandle(
        IUriBuilderVtbl.CreateUri_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*CreateUri)(IUriBuilder*,DWORD,DWORD,DWORD_PTR,IUri**);
     * }
     */
    public interface CreateUri {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, long _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(CreateUri fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IUriBuilderVtbl.CreateUri_UP$MH, fi, IUriBuilderVtbl.CreateUri$FUNC, scope);
        }
        static CreateUri ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, long __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (int)IUriBuilderVtbl.CreateUri_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle CreateUri$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("CreateUri"));
    public static VarHandle CreateUri$VH() {
        return IUriBuilderVtbl.CreateUri$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*CreateUri)(IUriBuilder*,DWORD,DWORD,DWORD_PTR,IUri**);
     * }
     */
    public static MemorySegment CreateUri$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IUriBuilderVtbl.CreateUri$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*CreateUri)(IUriBuilder*,DWORD,DWORD,DWORD_PTR,IUri**);
     * }
     */
    public static void CreateUri$set(MemorySegment seg, MemorySegment x) {
        IUriBuilderVtbl.CreateUri$VH.set(seg, x);
    }
    public static MemorySegment CreateUri$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IUriBuilderVtbl.CreateUri$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CreateUri$set(MemorySegment seg, long index, MemorySegment x) {
        IUriBuilderVtbl.CreateUri$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static CreateUri CreateUri(MemorySegment segment, SegmentScope scope) {
        return CreateUri.ofAddress(CreateUri$get(segment), scope);
    }
    static final FunctionDescriptor CreateUriWithFlags$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor CreateUriWithFlags_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle CreateUriWithFlags_UP$MH = RuntimeHelper.upcallHandle(CreateUriWithFlags.class, "apply", IUriBuilderVtbl.CreateUriWithFlags_UP$FUNC);
    static final FunctionDescriptor CreateUriWithFlags_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle CreateUriWithFlags_DOWN$MH = RuntimeHelper.downcallHandle(
        IUriBuilderVtbl.CreateUriWithFlags_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*CreateUriWithFlags)(IUriBuilder*,DWORD,DWORD,DWORD,DWORD_PTR,IUri**);
     * }
     */
    public interface CreateUriWithFlags {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, int _x3, long _x4, java.lang.foreign.MemorySegment _x5);
        static MemorySegment allocate(CreateUriWithFlags fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IUriBuilderVtbl.CreateUriWithFlags_UP$MH, fi, IUriBuilderVtbl.CreateUriWithFlags$FUNC, scope);
        }
        static CreateUriWithFlags ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, int __x3, long __x4, java.lang.foreign.MemorySegment __x5) -> {
                try {
                    return (int)IUriBuilderVtbl.CreateUriWithFlags_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle CreateUriWithFlags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("CreateUriWithFlags"));
    public static VarHandle CreateUriWithFlags$VH() {
        return IUriBuilderVtbl.CreateUriWithFlags$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*CreateUriWithFlags)(IUriBuilder*,DWORD,DWORD,DWORD,DWORD_PTR,IUri**);
     * }
     */
    public static MemorySegment CreateUriWithFlags$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IUriBuilderVtbl.CreateUriWithFlags$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*CreateUriWithFlags)(IUriBuilder*,DWORD,DWORD,DWORD,DWORD_PTR,IUri**);
     * }
     */
    public static void CreateUriWithFlags$set(MemorySegment seg, MemorySegment x) {
        IUriBuilderVtbl.CreateUriWithFlags$VH.set(seg, x);
    }
    public static MemorySegment CreateUriWithFlags$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IUriBuilderVtbl.CreateUriWithFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CreateUriWithFlags$set(MemorySegment seg, long index, MemorySegment x) {
        IUriBuilderVtbl.CreateUriWithFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static CreateUriWithFlags CreateUriWithFlags(MemorySegment segment, SegmentScope scope) {
        return CreateUriWithFlags.ofAddress(CreateUriWithFlags$get(segment), scope);
    }
    static final FunctionDescriptor GetIUri$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetIUri_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetIUri_UP$MH = RuntimeHelper.upcallHandle(GetIUri.class, "apply", IUriBuilderVtbl.GetIUri_UP$FUNC);
    static final FunctionDescriptor GetIUri_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetIUri_DOWN$MH = RuntimeHelper.downcallHandle(
        IUriBuilderVtbl.GetIUri_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetIUri)(IUriBuilder*,IUri**);
     * }
     */
    public interface GetIUri {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetIUri fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IUriBuilderVtbl.GetIUri_UP$MH, fi, IUriBuilderVtbl.GetIUri$FUNC, scope);
        }
        static GetIUri ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IUriBuilderVtbl.GetIUri_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetIUri$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetIUri"));
    public static VarHandle GetIUri$VH() {
        return IUriBuilderVtbl.GetIUri$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetIUri)(IUriBuilder*,IUri**);
     * }
     */
    public static MemorySegment GetIUri$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IUriBuilderVtbl.GetIUri$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetIUri)(IUriBuilder*,IUri**);
     * }
     */
    public static void GetIUri$set(MemorySegment seg, MemorySegment x) {
        IUriBuilderVtbl.GetIUri$VH.set(seg, x);
    }
    public static MemorySegment GetIUri$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IUriBuilderVtbl.GetIUri$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetIUri$set(MemorySegment seg, long index, MemorySegment x) {
        IUriBuilderVtbl.GetIUri$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetIUri GetIUri(MemorySegment segment, SegmentScope scope) {
        return GetIUri.ofAddress(GetIUri$get(segment), scope);
    }
    static final FunctionDescriptor SetIUri$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor SetIUri_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetIUri_UP$MH = RuntimeHelper.upcallHandle(SetIUri.class, "apply", IUriBuilderVtbl.SetIUri_UP$FUNC);
    static final FunctionDescriptor SetIUri_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetIUri_DOWN$MH = RuntimeHelper.downcallHandle(
        IUriBuilderVtbl.SetIUri_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetIUri)(IUriBuilder*,IUri*);
     * }
     */
    public interface SetIUri {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(SetIUri fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IUriBuilderVtbl.SetIUri_UP$MH, fi, IUriBuilderVtbl.SetIUri$FUNC, scope);
        }
        static SetIUri ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IUriBuilderVtbl.SetIUri_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetIUri$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetIUri"));
    public static VarHandle SetIUri$VH() {
        return IUriBuilderVtbl.SetIUri$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetIUri)(IUriBuilder*,IUri*);
     * }
     */
    public static MemorySegment SetIUri$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IUriBuilderVtbl.SetIUri$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetIUri)(IUriBuilder*,IUri*);
     * }
     */
    public static void SetIUri$set(MemorySegment seg, MemorySegment x) {
        IUriBuilderVtbl.SetIUri$VH.set(seg, x);
    }
    public static MemorySegment SetIUri$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IUriBuilderVtbl.SetIUri$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetIUri$set(MemorySegment seg, long index, MemorySegment x) {
        IUriBuilderVtbl.SetIUri$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetIUri SetIUri(MemorySegment segment, SegmentScope scope) {
        return SetIUri.ofAddress(SetIUri$get(segment), scope);
    }
    static final FunctionDescriptor GetFragment$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetFragment_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetFragment_UP$MH = RuntimeHelper.upcallHandle(GetFragment.class, "apply", IUriBuilderVtbl.GetFragment_UP$FUNC);
    static final FunctionDescriptor GetFragment_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetFragment_DOWN$MH = RuntimeHelper.downcallHandle(
        IUriBuilderVtbl.GetFragment_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetFragment)(IUriBuilder*,DWORD*,LPCWSTR*);
     * }
     */
    public interface GetFragment {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetFragment fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IUriBuilderVtbl.GetFragment_UP$MH, fi, IUriBuilderVtbl.GetFragment$FUNC, scope);
        }
        static GetFragment ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IUriBuilderVtbl.GetFragment_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetFragment$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetFragment"));
    public static VarHandle GetFragment$VH() {
        return IUriBuilderVtbl.GetFragment$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetFragment)(IUriBuilder*,DWORD*,LPCWSTR*);
     * }
     */
    public static MemorySegment GetFragment$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IUriBuilderVtbl.GetFragment$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetFragment)(IUriBuilder*,DWORD*,LPCWSTR*);
     * }
     */
    public static void GetFragment$set(MemorySegment seg, MemorySegment x) {
        IUriBuilderVtbl.GetFragment$VH.set(seg, x);
    }
    public static MemorySegment GetFragment$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IUriBuilderVtbl.GetFragment$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetFragment$set(MemorySegment seg, long index, MemorySegment x) {
        IUriBuilderVtbl.GetFragment$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetFragment GetFragment(MemorySegment segment, SegmentScope scope) {
        return GetFragment.ofAddress(GetFragment$get(segment), scope);
    }
    static final FunctionDescriptor GetHost$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetHost_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetHost_UP$MH = RuntimeHelper.upcallHandle(GetHost.class, "apply", IUriBuilderVtbl.GetHost_UP$FUNC);
    static final FunctionDescriptor GetHost_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetHost_DOWN$MH = RuntimeHelper.downcallHandle(
        IUriBuilderVtbl.GetHost_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetHost)(IUriBuilder*,DWORD*,LPCWSTR*);
     * }
     */
    public interface GetHost {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetHost fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IUriBuilderVtbl.GetHost_UP$MH, fi, IUriBuilderVtbl.GetHost$FUNC, scope);
        }
        static GetHost ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IUriBuilderVtbl.GetHost_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetHost$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetHost"));
    public static VarHandle GetHost$VH() {
        return IUriBuilderVtbl.GetHost$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetHost)(IUriBuilder*,DWORD*,LPCWSTR*);
     * }
     */
    public static MemorySegment GetHost$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IUriBuilderVtbl.GetHost$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetHost)(IUriBuilder*,DWORD*,LPCWSTR*);
     * }
     */
    public static void GetHost$set(MemorySegment seg, MemorySegment x) {
        IUriBuilderVtbl.GetHost$VH.set(seg, x);
    }
    public static MemorySegment GetHost$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IUriBuilderVtbl.GetHost$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetHost$set(MemorySegment seg, long index, MemorySegment x) {
        IUriBuilderVtbl.GetHost$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetHost GetHost(MemorySegment segment, SegmentScope scope) {
        return GetHost.ofAddress(GetHost$get(segment), scope);
    }
    static final FunctionDescriptor GetPassword$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetPassword_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetPassword_UP$MH = RuntimeHelper.upcallHandle(GetPassword.class, "apply", IUriBuilderVtbl.GetPassword_UP$FUNC);
    static final FunctionDescriptor GetPassword_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetPassword_DOWN$MH = RuntimeHelper.downcallHandle(
        IUriBuilderVtbl.GetPassword_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetPassword)(IUriBuilder*,DWORD*,LPCWSTR*);
     * }
     */
    public interface GetPassword {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetPassword fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IUriBuilderVtbl.GetPassword_UP$MH, fi, IUriBuilderVtbl.GetPassword$FUNC, scope);
        }
        static GetPassword ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IUriBuilderVtbl.GetPassword_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetPassword$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetPassword"));
    public static VarHandle GetPassword$VH() {
        return IUriBuilderVtbl.GetPassword$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetPassword)(IUriBuilder*,DWORD*,LPCWSTR*);
     * }
     */
    public static MemorySegment GetPassword$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IUriBuilderVtbl.GetPassword$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetPassword)(IUriBuilder*,DWORD*,LPCWSTR*);
     * }
     */
    public static void GetPassword$set(MemorySegment seg, MemorySegment x) {
        IUriBuilderVtbl.GetPassword$VH.set(seg, x);
    }
    public static MemorySegment GetPassword$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IUriBuilderVtbl.GetPassword$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetPassword$set(MemorySegment seg, long index, MemorySegment x) {
        IUriBuilderVtbl.GetPassword$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetPassword GetPassword(MemorySegment segment, SegmentScope scope) {
        return GetPassword.ofAddress(GetPassword$get(segment), scope);
    }
    static final FunctionDescriptor GetPath$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetPath_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetPath_UP$MH = RuntimeHelper.upcallHandle(GetPath.class, "apply", IUriBuilderVtbl.GetPath_UP$FUNC);
    static final FunctionDescriptor GetPath_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetPath_DOWN$MH = RuntimeHelper.downcallHandle(
        IUriBuilderVtbl.GetPath_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetPath)(IUriBuilder*,DWORD*,LPCWSTR*);
     * }
     */
    public interface GetPath {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetPath fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IUriBuilderVtbl.GetPath_UP$MH, fi, IUriBuilderVtbl.GetPath$FUNC, scope);
        }
        static GetPath ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IUriBuilderVtbl.GetPath_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetPath$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetPath"));
    public static VarHandle GetPath$VH() {
        return IUriBuilderVtbl.GetPath$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetPath)(IUriBuilder*,DWORD*,LPCWSTR*);
     * }
     */
    public static MemorySegment GetPath$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IUriBuilderVtbl.GetPath$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetPath)(IUriBuilder*,DWORD*,LPCWSTR*);
     * }
     */
    public static void GetPath$set(MemorySegment seg, MemorySegment x) {
        IUriBuilderVtbl.GetPath$VH.set(seg, x);
    }
    public static MemorySegment GetPath$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IUriBuilderVtbl.GetPath$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetPath$set(MemorySegment seg, long index, MemorySegment x) {
        IUriBuilderVtbl.GetPath$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetPath GetPath(MemorySegment segment, SegmentScope scope) {
        return GetPath.ofAddress(GetPath$get(segment), scope);
    }
    static final FunctionDescriptor GetPort$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetPort_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetPort_UP$MH = RuntimeHelper.upcallHandle(GetPort.class, "apply", IUriBuilderVtbl.GetPort_UP$FUNC);
    static final FunctionDescriptor GetPort_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetPort_DOWN$MH = RuntimeHelper.downcallHandle(
        IUriBuilderVtbl.GetPort_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetPort)(IUriBuilder*,BOOL*,DWORD*);
     * }
     */
    public interface GetPort {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetPort fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IUriBuilderVtbl.GetPort_UP$MH, fi, IUriBuilderVtbl.GetPort$FUNC, scope);
        }
        static GetPort ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IUriBuilderVtbl.GetPort_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetPort$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetPort"));
    public static VarHandle GetPort$VH() {
        return IUriBuilderVtbl.GetPort$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetPort)(IUriBuilder*,BOOL*,DWORD*);
     * }
     */
    public static MemorySegment GetPort$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IUriBuilderVtbl.GetPort$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetPort)(IUriBuilder*,BOOL*,DWORD*);
     * }
     */
    public static void GetPort$set(MemorySegment seg, MemorySegment x) {
        IUriBuilderVtbl.GetPort$VH.set(seg, x);
    }
    public static MemorySegment GetPort$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IUriBuilderVtbl.GetPort$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetPort$set(MemorySegment seg, long index, MemorySegment x) {
        IUriBuilderVtbl.GetPort$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetPort GetPort(MemorySegment segment, SegmentScope scope) {
        return GetPort.ofAddress(GetPort$get(segment), scope);
    }
    static final FunctionDescriptor GetQuery$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetQuery_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetQuery_UP$MH = RuntimeHelper.upcallHandle(GetQuery.class, "apply", IUriBuilderVtbl.GetQuery_UP$FUNC);
    static final FunctionDescriptor GetQuery_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetQuery_DOWN$MH = RuntimeHelper.downcallHandle(
        IUriBuilderVtbl.GetQuery_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetQuery)(IUriBuilder*,DWORD*,LPCWSTR*);
     * }
     */
    public interface GetQuery {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetQuery fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IUriBuilderVtbl.GetQuery_UP$MH, fi, IUriBuilderVtbl.GetQuery$FUNC, scope);
        }
        static GetQuery ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IUriBuilderVtbl.GetQuery_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetQuery$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetQuery"));
    public static VarHandle GetQuery$VH() {
        return IUriBuilderVtbl.GetQuery$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetQuery)(IUriBuilder*,DWORD*,LPCWSTR*);
     * }
     */
    public static MemorySegment GetQuery$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IUriBuilderVtbl.GetQuery$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetQuery)(IUriBuilder*,DWORD*,LPCWSTR*);
     * }
     */
    public static void GetQuery$set(MemorySegment seg, MemorySegment x) {
        IUriBuilderVtbl.GetQuery$VH.set(seg, x);
    }
    public static MemorySegment GetQuery$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IUriBuilderVtbl.GetQuery$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetQuery$set(MemorySegment seg, long index, MemorySegment x) {
        IUriBuilderVtbl.GetQuery$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetQuery GetQuery(MemorySegment segment, SegmentScope scope) {
        return GetQuery.ofAddress(GetQuery$get(segment), scope);
    }
    static final FunctionDescriptor GetSchemeName$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetSchemeName_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetSchemeName_UP$MH = RuntimeHelper.upcallHandle(GetSchemeName.class, "apply", IUriBuilderVtbl.GetSchemeName_UP$FUNC);
    static final FunctionDescriptor GetSchemeName_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetSchemeName_DOWN$MH = RuntimeHelper.downcallHandle(
        IUriBuilderVtbl.GetSchemeName_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetSchemeName)(IUriBuilder*,DWORD*,LPCWSTR*);
     * }
     */
    public interface GetSchemeName {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetSchemeName fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IUriBuilderVtbl.GetSchemeName_UP$MH, fi, IUriBuilderVtbl.GetSchemeName$FUNC, scope);
        }
        static GetSchemeName ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IUriBuilderVtbl.GetSchemeName_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetSchemeName$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetSchemeName"));
    public static VarHandle GetSchemeName$VH() {
        return IUriBuilderVtbl.GetSchemeName$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetSchemeName)(IUriBuilder*,DWORD*,LPCWSTR*);
     * }
     */
    public static MemorySegment GetSchemeName$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IUriBuilderVtbl.GetSchemeName$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetSchemeName)(IUriBuilder*,DWORD*,LPCWSTR*);
     * }
     */
    public static void GetSchemeName$set(MemorySegment seg, MemorySegment x) {
        IUriBuilderVtbl.GetSchemeName$VH.set(seg, x);
    }
    public static MemorySegment GetSchemeName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IUriBuilderVtbl.GetSchemeName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetSchemeName$set(MemorySegment seg, long index, MemorySegment x) {
        IUriBuilderVtbl.GetSchemeName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetSchemeName GetSchemeName(MemorySegment segment, SegmentScope scope) {
        return GetSchemeName.ofAddress(GetSchemeName$get(segment), scope);
    }
    static final FunctionDescriptor GetUserNameA$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetUserNameA_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetUserNameA_UP$MH = RuntimeHelper.upcallHandle(GetUserNameA.class, "apply", IUriBuilderVtbl.GetUserNameA_UP$FUNC);
    static final FunctionDescriptor GetUserNameA_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetUserNameA_DOWN$MH = RuntimeHelper.downcallHandle(
        IUriBuilderVtbl.GetUserNameA_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetUserNameA)(IUriBuilder*,DWORD*,LPCWSTR*);
     * }
     */
    public interface GetUserNameA {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetUserNameA fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IUriBuilderVtbl.GetUserNameA_UP$MH, fi, IUriBuilderVtbl.GetUserNameA$FUNC, scope);
        }
        static GetUserNameA ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IUriBuilderVtbl.GetUserNameA_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetUserNameA$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetUserNameA"));
    public static VarHandle GetUserNameA$VH() {
        return IUriBuilderVtbl.GetUserNameA$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetUserNameA)(IUriBuilder*,DWORD*,LPCWSTR*);
     * }
     */
    public static MemorySegment GetUserNameA$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IUriBuilderVtbl.GetUserNameA$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetUserNameA)(IUriBuilder*,DWORD*,LPCWSTR*);
     * }
     */
    public static void GetUserNameA$set(MemorySegment seg, MemorySegment x) {
        IUriBuilderVtbl.GetUserNameA$VH.set(seg, x);
    }
    public static MemorySegment GetUserNameA$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IUriBuilderVtbl.GetUserNameA$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetUserNameA$set(MemorySegment seg, long index, MemorySegment x) {
        IUriBuilderVtbl.GetUserNameA$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetUserNameA GetUserNameA(MemorySegment segment, SegmentScope scope) {
        return GetUserNameA.ofAddress(GetUserNameA$get(segment), scope);
    }
    static final FunctionDescriptor SetFragment$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor SetFragment_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetFragment_UP$MH = RuntimeHelper.upcallHandle(SetFragment.class, "apply", IUriBuilderVtbl.SetFragment_UP$FUNC);
    static final FunctionDescriptor SetFragment_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetFragment_DOWN$MH = RuntimeHelper.downcallHandle(
        IUriBuilderVtbl.SetFragment_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetFragment)(IUriBuilder*,LPCWSTR);
     * }
     */
    public interface SetFragment {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(SetFragment fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IUriBuilderVtbl.SetFragment_UP$MH, fi, IUriBuilderVtbl.SetFragment$FUNC, scope);
        }
        static SetFragment ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IUriBuilderVtbl.SetFragment_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetFragment$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetFragment"));
    public static VarHandle SetFragment$VH() {
        return IUriBuilderVtbl.SetFragment$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetFragment)(IUriBuilder*,LPCWSTR);
     * }
     */
    public static MemorySegment SetFragment$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IUriBuilderVtbl.SetFragment$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetFragment)(IUriBuilder*,LPCWSTR);
     * }
     */
    public static void SetFragment$set(MemorySegment seg, MemorySegment x) {
        IUriBuilderVtbl.SetFragment$VH.set(seg, x);
    }
    public static MemorySegment SetFragment$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IUriBuilderVtbl.SetFragment$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetFragment$set(MemorySegment seg, long index, MemorySegment x) {
        IUriBuilderVtbl.SetFragment$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetFragment SetFragment(MemorySegment segment, SegmentScope scope) {
        return SetFragment.ofAddress(SetFragment$get(segment), scope);
    }
    static final FunctionDescriptor SetHost$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor SetHost_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetHost_UP$MH = RuntimeHelper.upcallHandle(SetHost.class, "apply", IUriBuilderVtbl.SetHost_UP$FUNC);
    static final FunctionDescriptor SetHost_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetHost_DOWN$MH = RuntimeHelper.downcallHandle(
        IUriBuilderVtbl.SetHost_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetHost)(IUriBuilder*,LPCWSTR);
     * }
     */
    public interface SetHost {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(SetHost fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IUriBuilderVtbl.SetHost_UP$MH, fi, IUriBuilderVtbl.SetHost$FUNC, scope);
        }
        static SetHost ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IUriBuilderVtbl.SetHost_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetHost$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetHost"));
    public static VarHandle SetHost$VH() {
        return IUriBuilderVtbl.SetHost$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetHost)(IUriBuilder*,LPCWSTR);
     * }
     */
    public static MemorySegment SetHost$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IUriBuilderVtbl.SetHost$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetHost)(IUriBuilder*,LPCWSTR);
     * }
     */
    public static void SetHost$set(MemorySegment seg, MemorySegment x) {
        IUriBuilderVtbl.SetHost$VH.set(seg, x);
    }
    public static MemorySegment SetHost$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IUriBuilderVtbl.SetHost$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetHost$set(MemorySegment seg, long index, MemorySegment x) {
        IUriBuilderVtbl.SetHost$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetHost SetHost(MemorySegment segment, SegmentScope scope) {
        return SetHost.ofAddress(SetHost$get(segment), scope);
    }
    static final FunctionDescriptor SetPassword$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor SetPassword_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetPassword_UP$MH = RuntimeHelper.upcallHandle(SetPassword.class, "apply", IUriBuilderVtbl.SetPassword_UP$FUNC);
    static final FunctionDescriptor SetPassword_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetPassword_DOWN$MH = RuntimeHelper.downcallHandle(
        IUriBuilderVtbl.SetPassword_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetPassword)(IUriBuilder*,LPCWSTR);
     * }
     */
    public interface SetPassword {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(SetPassword fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IUriBuilderVtbl.SetPassword_UP$MH, fi, IUriBuilderVtbl.SetPassword$FUNC, scope);
        }
        static SetPassword ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IUriBuilderVtbl.SetPassword_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetPassword$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetPassword"));
    public static VarHandle SetPassword$VH() {
        return IUriBuilderVtbl.SetPassword$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetPassword)(IUriBuilder*,LPCWSTR);
     * }
     */
    public static MemorySegment SetPassword$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IUriBuilderVtbl.SetPassword$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetPassword)(IUriBuilder*,LPCWSTR);
     * }
     */
    public static void SetPassword$set(MemorySegment seg, MemorySegment x) {
        IUriBuilderVtbl.SetPassword$VH.set(seg, x);
    }
    public static MemorySegment SetPassword$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IUriBuilderVtbl.SetPassword$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetPassword$set(MemorySegment seg, long index, MemorySegment x) {
        IUriBuilderVtbl.SetPassword$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetPassword SetPassword(MemorySegment segment, SegmentScope scope) {
        return SetPassword.ofAddress(SetPassword$get(segment), scope);
    }
    static final FunctionDescriptor SetPath$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor SetPath_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetPath_UP$MH = RuntimeHelper.upcallHandle(SetPath.class, "apply", IUriBuilderVtbl.SetPath_UP$FUNC);
    static final FunctionDescriptor SetPath_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetPath_DOWN$MH = RuntimeHelper.downcallHandle(
        IUriBuilderVtbl.SetPath_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetPath)(IUriBuilder*,LPCWSTR);
     * }
     */
    public interface SetPath {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(SetPath fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IUriBuilderVtbl.SetPath_UP$MH, fi, IUriBuilderVtbl.SetPath$FUNC, scope);
        }
        static SetPath ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IUriBuilderVtbl.SetPath_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetPath$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetPath"));
    public static VarHandle SetPath$VH() {
        return IUriBuilderVtbl.SetPath$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetPath)(IUriBuilder*,LPCWSTR);
     * }
     */
    public static MemorySegment SetPath$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IUriBuilderVtbl.SetPath$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetPath)(IUriBuilder*,LPCWSTR);
     * }
     */
    public static void SetPath$set(MemorySegment seg, MemorySegment x) {
        IUriBuilderVtbl.SetPath$VH.set(seg, x);
    }
    public static MemorySegment SetPath$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IUriBuilderVtbl.SetPath$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetPath$set(MemorySegment seg, long index, MemorySegment x) {
        IUriBuilderVtbl.SetPath$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetPath SetPath(MemorySegment segment, SegmentScope scope) {
        return SetPath.ofAddress(SetPath$get(segment), scope);
    }
    static final FunctionDescriptor SetPortA$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor SetPortA_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle SetPortA_UP$MH = RuntimeHelper.upcallHandle(SetPortA.class, "apply", IUriBuilderVtbl.SetPortA_UP$FUNC);
    static final FunctionDescriptor SetPortA_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle SetPortA_DOWN$MH = RuntimeHelper.downcallHandle(
        IUriBuilderVtbl.SetPortA_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetPortA)(IUriBuilder*,BOOL,DWORD);
     * }
     */
    public interface SetPortA {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2);
        static MemorySegment allocate(SetPortA fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IUriBuilderVtbl.SetPortA_UP$MH, fi, IUriBuilderVtbl.SetPortA$FUNC, scope);
        }
        static SetPortA ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2) -> {
                try {
                    return (int)IUriBuilderVtbl.SetPortA_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetPortA$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetPortA"));
    public static VarHandle SetPortA$VH() {
        return IUriBuilderVtbl.SetPortA$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetPortA)(IUriBuilder*,BOOL,DWORD);
     * }
     */
    public static MemorySegment SetPortA$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IUriBuilderVtbl.SetPortA$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetPortA)(IUriBuilder*,BOOL,DWORD);
     * }
     */
    public static void SetPortA$set(MemorySegment seg, MemorySegment x) {
        IUriBuilderVtbl.SetPortA$VH.set(seg, x);
    }
    public static MemorySegment SetPortA$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IUriBuilderVtbl.SetPortA$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetPortA$set(MemorySegment seg, long index, MemorySegment x) {
        IUriBuilderVtbl.SetPortA$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetPortA SetPortA(MemorySegment segment, SegmentScope scope) {
        return SetPortA.ofAddress(SetPortA$get(segment), scope);
    }
    static final FunctionDescriptor SetQuery$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor SetQuery_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetQuery_UP$MH = RuntimeHelper.upcallHandle(SetQuery.class, "apply", IUriBuilderVtbl.SetQuery_UP$FUNC);
    static final FunctionDescriptor SetQuery_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetQuery_DOWN$MH = RuntimeHelper.downcallHandle(
        IUriBuilderVtbl.SetQuery_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetQuery)(IUriBuilder*,LPCWSTR);
     * }
     */
    public interface SetQuery {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(SetQuery fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IUriBuilderVtbl.SetQuery_UP$MH, fi, IUriBuilderVtbl.SetQuery$FUNC, scope);
        }
        static SetQuery ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IUriBuilderVtbl.SetQuery_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetQuery$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetQuery"));
    public static VarHandle SetQuery$VH() {
        return IUriBuilderVtbl.SetQuery$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetQuery)(IUriBuilder*,LPCWSTR);
     * }
     */
    public static MemorySegment SetQuery$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IUriBuilderVtbl.SetQuery$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetQuery)(IUriBuilder*,LPCWSTR);
     * }
     */
    public static void SetQuery$set(MemorySegment seg, MemorySegment x) {
        IUriBuilderVtbl.SetQuery$VH.set(seg, x);
    }
    public static MemorySegment SetQuery$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IUriBuilderVtbl.SetQuery$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetQuery$set(MemorySegment seg, long index, MemorySegment x) {
        IUriBuilderVtbl.SetQuery$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetQuery SetQuery(MemorySegment segment, SegmentScope scope) {
        return SetQuery.ofAddress(SetQuery$get(segment), scope);
    }
    static final FunctionDescriptor SetSchemeName$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor SetSchemeName_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetSchemeName_UP$MH = RuntimeHelper.upcallHandle(SetSchemeName.class, "apply", IUriBuilderVtbl.SetSchemeName_UP$FUNC);
    static final FunctionDescriptor SetSchemeName_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetSchemeName_DOWN$MH = RuntimeHelper.downcallHandle(
        IUriBuilderVtbl.SetSchemeName_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetSchemeName)(IUriBuilder*,LPCWSTR);
     * }
     */
    public interface SetSchemeName {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(SetSchemeName fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IUriBuilderVtbl.SetSchemeName_UP$MH, fi, IUriBuilderVtbl.SetSchemeName$FUNC, scope);
        }
        static SetSchemeName ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IUriBuilderVtbl.SetSchemeName_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetSchemeName$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetSchemeName"));
    public static VarHandle SetSchemeName$VH() {
        return IUriBuilderVtbl.SetSchemeName$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetSchemeName)(IUriBuilder*,LPCWSTR);
     * }
     */
    public static MemorySegment SetSchemeName$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IUriBuilderVtbl.SetSchemeName$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetSchemeName)(IUriBuilder*,LPCWSTR);
     * }
     */
    public static void SetSchemeName$set(MemorySegment seg, MemorySegment x) {
        IUriBuilderVtbl.SetSchemeName$VH.set(seg, x);
    }
    public static MemorySegment SetSchemeName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IUriBuilderVtbl.SetSchemeName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetSchemeName$set(MemorySegment seg, long index, MemorySegment x) {
        IUriBuilderVtbl.SetSchemeName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetSchemeName SetSchemeName(MemorySegment segment, SegmentScope scope) {
        return SetSchemeName.ofAddress(SetSchemeName$get(segment), scope);
    }
    static final FunctionDescriptor SetUserName$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor SetUserName_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetUserName_UP$MH = RuntimeHelper.upcallHandle(SetUserName.class, "apply", IUriBuilderVtbl.SetUserName_UP$FUNC);
    static final FunctionDescriptor SetUserName_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetUserName_DOWN$MH = RuntimeHelper.downcallHandle(
        IUriBuilderVtbl.SetUserName_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetUserName)(IUriBuilder*,LPCWSTR);
     * }
     */
    public interface SetUserName {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(SetUserName fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IUriBuilderVtbl.SetUserName_UP$MH, fi, IUriBuilderVtbl.SetUserName$FUNC, scope);
        }
        static SetUserName ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IUriBuilderVtbl.SetUserName_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetUserName$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetUserName"));
    public static VarHandle SetUserName$VH() {
        return IUriBuilderVtbl.SetUserName$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetUserName)(IUriBuilder*,LPCWSTR);
     * }
     */
    public static MemorySegment SetUserName$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IUriBuilderVtbl.SetUserName$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetUserName)(IUriBuilder*,LPCWSTR);
     * }
     */
    public static void SetUserName$set(MemorySegment seg, MemorySegment x) {
        IUriBuilderVtbl.SetUserName$VH.set(seg, x);
    }
    public static MemorySegment SetUserName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IUriBuilderVtbl.SetUserName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetUserName$set(MemorySegment seg, long index, MemorySegment x) {
        IUriBuilderVtbl.SetUserName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetUserName SetUserName(MemorySegment segment, SegmentScope scope) {
        return SetUserName.ofAddress(SetUserName$get(segment), scope);
    }
    static final FunctionDescriptor RemoveProperties$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor RemoveProperties_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle RemoveProperties_UP$MH = RuntimeHelper.upcallHandle(RemoveProperties.class, "apply", IUriBuilderVtbl.RemoveProperties_UP$FUNC);
    static final FunctionDescriptor RemoveProperties_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle RemoveProperties_DOWN$MH = RuntimeHelper.downcallHandle(
        IUriBuilderVtbl.RemoveProperties_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*RemoveProperties)(IUriBuilder*,DWORD);
     * }
     */
    public interface RemoveProperties {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(RemoveProperties fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IUriBuilderVtbl.RemoveProperties_UP$MH, fi, IUriBuilderVtbl.RemoveProperties$FUNC, scope);
        }
        static RemoveProperties ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)IUriBuilderVtbl.RemoveProperties_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle RemoveProperties$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("RemoveProperties"));
    public static VarHandle RemoveProperties$VH() {
        return IUriBuilderVtbl.RemoveProperties$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*RemoveProperties)(IUriBuilder*,DWORD);
     * }
     */
    public static MemorySegment RemoveProperties$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IUriBuilderVtbl.RemoveProperties$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*RemoveProperties)(IUriBuilder*,DWORD);
     * }
     */
    public static void RemoveProperties$set(MemorySegment seg, MemorySegment x) {
        IUriBuilderVtbl.RemoveProperties$VH.set(seg, x);
    }
    public static MemorySegment RemoveProperties$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IUriBuilderVtbl.RemoveProperties$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void RemoveProperties$set(MemorySegment seg, long index, MemorySegment x) {
        IUriBuilderVtbl.RemoveProperties$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static RemoveProperties RemoveProperties(MemorySegment segment, SegmentScope scope) {
        return RemoveProperties.ofAddress(RemoveProperties$get(segment), scope);
    }
    static final FunctionDescriptor HasBeenModified$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor HasBeenModified_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle HasBeenModified_UP$MH = RuntimeHelper.upcallHandle(HasBeenModified.class, "apply", IUriBuilderVtbl.HasBeenModified_UP$FUNC);
    static final FunctionDescriptor HasBeenModified_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle HasBeenModified_DOWN$MH = RuntimeHelper.downcallHandle(
        IUriBuilderVtbl.HasBeenModified_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*HasBeenModified)(IUriBuilder*,BOOL*);
     * }
     */
    public interface HasBeenModified {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(HasBeenModified fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IUriBuilderVtbl.HasBeenModified_UP$MH, fi, IUriBuilderVtbl.HasBeenModified$FUNC, scope);
        }
        static HasBeenModified ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IUriBuilderVtbl.HasBeenModified_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle HasBeenModified$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("HasBeenModified"));
    public static VarHandle HasBeenModified$VH() {
        return IUriBuilderVtbl.HasBeenModified$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*HasBeenModified)(IUriBuilder*,BOOL*);
     * }
     */
    public static MemorySegment HasBeenModified$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IUriBuilderVtbl.HasBeenModified$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*HasBeenModified)(IUriBuilder*,BOOL*);
     * }
     */
    public static void HasBeenModified$set(MemorySegment seg, MemorySegment x) {
        IUriBuilderVtbl.HasBeenModified$VH.set(seg, x);
    }
    public static MemorySegment HasBeenModified$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IUriBuilderVtbl.HasBeenModified$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void HasBeenModified$set(MemorySegment seg, long index, MemorySegment x) {
        IUriBuilderVtbl.HasBeenModified$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static HasBeenModified HasBeenModified(MemorySegment segment, SegmentScope scope) {
        return HasBeenModified.ofAddress(HasBeenModified$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


