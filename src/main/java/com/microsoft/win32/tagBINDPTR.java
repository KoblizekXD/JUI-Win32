// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * union tagBINDPTR {
 *     FUNCDESC* lpfuncdesc;
 *     VARDESC* lpvardesc;
 *     ITypeComp* lptcomp;
 * };
 * }
 */
public class tagBINDPTR {

    static final UnionLayout $union$LAYOUT = MemoryLayout.unionLayout(
        Constants$root.C_POINTER$LAYOUT.withName("lpfuncdesc"),
        Constants$root.C_POINTER$LAYOUT.withName("lpvardesc"),
        Constants$root.C_POINTER$LAYOUT.withName("lptcomp")
    ).withName("tagBINDPTR");
    public static MemoryLayout $LAYOUT() {
        return tagBINDPTR.$union$LAYOUT;
    }
    static final VarHandle lpfuncdesc$VH = $union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lpfuncdesc"));
    public static VarHandle lpfuncdesc$VH() {
        return tagBINDPTR.lpfuncdesc$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * FUNCDESC* lpfuncdesc;
     * }
     */
    public static MemorySegment lpfuncdesc$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)tagBINDPTR.lpfuncdesc$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * FUNCDESC* lpfuncdesc;
     * }
     */
    public static void lpfuncdesc$set(MemorySegment seg, MemorySegment x) {
        tagBINDPTR.lpfuncdesc$VH.set(seg, x);
    }
    public static MemorySegment lpfuncdesc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)tagBINDPTR.lpfuncdesc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpfuncdesc$set(MemorySegment seg, long index, MemorySegment x) {
        tagBINDPTR.lpfuncdesc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lpvardesc$VH = $union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lpvardesc"));
    public static VarHandle lpvardesc$VH() {
        return tagBINDPTR.lpvardesc$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * VARDESC* lpvardesc;
     * }
     */
    public static MemorySegment lpvardesc$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)tagBINDPTR.lpvardesc$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * VARDESC* lpvardesc;
     * }
     */
    public static void lpvardesc$set(MemorySegment seg, MemorySegment x) {
        tagBINDPTR.lpvardesc$VH.set(seg, x);
    }
    public static MemorySegment lpvardesc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)tagBINDPTR.lpvardesc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpvardesc$set(MemorySegment seg, long index, MemorySegment x) {
        tagBINDPTR.lpvardesc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lptcomp$VH = $union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lptcomp"));
    public static VarHandle lptcomp$VH() {
        return tagBINDPTR.lptcomp$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ITypeComp* lptcomp;
     * }
     */
    public static MemorySegment lptcomp$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)tagBINDPTR.lptcomp$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ITypeComp* lptcomp;
     * }
     */
    public static void lptcomp$set(MemorySegment seg, MemorySegment x) {
        tagBINDPTR.lptcomp$VH.set(seg, x);
    }
    public static MemorySegment lptcomp$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)tagBINDPTR.lptcomp$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lptcomp$set(MemorySegment seg, long index, MemorySegment x) {
        tagBINDPTR.lptcomp$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


