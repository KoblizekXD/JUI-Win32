// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IOleInPlaceUIWindowVtbl {
 *     HRESULT (*QueryInterface)(IOleInPlaceUIWindow*,const IID*,void**);
 *     ULONG (*AddRef)(IOleInPlaceUIWindow*);
 *     ULONG (*Release)(IOleInPlaceUIWindow*);
 *     HRESULT (*GetWindow)(IOleInPlaceUIWindow*,HWND*);
 *     HRESULT (*ContextSensitiveHelp)(IOleInPlaceUIWindow*,BOOL);
 *     HRESULT (*GetBorder)(IOleInPlaceUIWindow*,LPRECT);
 *     HRESULT (*RequestBorderSpace)(IOleInPlaceUIWindow*,LPCBORDERWIDTHS);
 *     HRESULT (*SetBorderSpace)(IOleInPlaceUIWindow*,LPCBORDERWIDTHS);
 *     HRESULT (*SetActiveObject)(IOleInPlaceUIWindow*,IOleInPlaceActiveObject*,LPCOLESTR);
 * };
 * }
 */
public class IOleInPlaceUIWindowVtbl {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("GetWindow"),
        Constants$root.C_POINTER$LAYOUT.withName("ContextSensitiveHelp"),
        Constants$root.C_POINTER$LAYOUT.withName("GetBorder"),
        Constants$root.C_POINTER$LAYOUT.withName("RequestBorderSpace"),
        Constants$root.C_POINTER$LAYOUT.withName("SetBorderSpace"),
        Constants$root.C_POINTER$LAYOUT.withName("SetActiveObject")
    ).withName("IOleInPlaceUIWindowVtbl");
    public static MemoryLayout $LAYOUT() {
        return IOleInPlaceUIWindowVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor QueryInterface_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_UP$MH = RuntimeHelper.upcallHandle(QueryInterface.class, "apply", IOleInPlaceUIWindowVtbl.QueryInterface_UP$FUNC);
    static final FunctionDescriptor QueryInterface_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_DOWN$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceUIWindowVtbl.QueryInterface_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(IOleInPlaceUIWindow*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IOleInPlaceUIWindowVtbl.QueryInterface_UP$MH, fi, IOleInPlaceUIWindowVtbl.QueryInterface$FUNC, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IOleInPlaceUIWindowVtbl.QueryInterface_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return IOleInPlaceUIWindowVtbl.QueryInterface$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IOleInPlaceUIWindow*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceUIWindowVtbl.QueryInterface$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IOleInPlaceUIWindow*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        IOleInPlaceUIWindowVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceUIWindowVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        IOleInPlaceUIWindowVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, SegmentScope scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor AddRef_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_UP$MH = RuntimeHelper.upcallHandle(AddRef.class, "apply", IOleInPlaceUIWindowVtbl.AddRef_UP$FUNC);
    static final FunctionDescriptor AddRef_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_DOWN$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceUIWindowVtbl.AddRef_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*AddRef)(IOleInPlaceUIWindow*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IOleInPlaceUIWindowVtbl.AddRef_UP$MH, fi, IOleInPlaceUIWindowVtbl.AddRef$FUNC, scope);
        }
        static AddRef ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IOleInPlaceUIWindowVtbl.AddRef_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return IOleInPlaceUIWindowVtbl.AddRef$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(IOleInPlaceUIWindow*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceUIWindowVtbl.AddRef$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(IOleInPlaceUIWindow*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        IOleInPlaceUIWindowVtbl.AddRef$VH.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceUIWindowVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        IOleInPlaceUIWindowVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, SegmentScope scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Release_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_UP$MH = RuntimeHelper.upcallHandle(Release.class, "apply", IOleInPlaceUIWindowVtbl.Release_UP$FUNC);
    static final FunctionDescriptor Release_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_DOWN$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceUIWindowVtbl.Release_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*Release)(IOleInPlaceUIWindow*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IOleInPlaceUIWindowVtbl.Release_UP$MH, fi, IOleInPlaceUIWindowVtbl.Release$FUNC, scope);
        }
        static Release ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IOleInPlaceUIWindowVtbl.Release_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return IOleInPlaceUIWindowVtbl.Release$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(IOleInPlaceUIWindow*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceUIWindowVtbl.Release$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(IOleInPlaceUIWindow*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        IOleInPlaceUIWindowVtbl.Release$VH.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceUIWindowVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        IOleInPlaceUIWindowVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, SegmentScope scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    static final FunctionDescriptor GetWindow$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetWindow_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetWindow_UP$MH = RuntimeHelper.upcallHandle(GetWindow.class, "apply", IOleInPlaceUIWindowVtbl.GetWindow_UP$FUNC);
    static final FunctionDescriptor GetWindow_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetWindow_DOWN$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceUIWindowVtbl.GetWindow_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetWindow)(IOleInPlaceUIWindow*,HWND*);
     * }
     */
    public interface GetWindow {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetWindow fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IOleInPlaceUIWindowVtbl.GetWindow_UP$MH, fi, IOleInPlaceUIWindowVtbl.GetWindow$FUNC, scope);
        }
        static GetWindow ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IOleInPlaceUIWindowVtbl.GetWindow_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetWindow$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetWindow"));
    public static VarHandle GetWindow$VH() {
        return IOleInPlaceUIWindowVtbl.GetWindow$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetWindow)(IOleInPlaceUIWindow*,HWND*);
     * }
     */
    public static MemorySegment GetWindow$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceUIWindowVtbl.GetWindow$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetWindow)(IOleInPlaceUIWindow*,HWND*);
     * }
     */
    public static void GetWindow$set(MemorySegment seg, MemorySegment x) {
        IOleInPlaceUIWindowVtbl.GetWindow$VH.set(seg, x);
    }
    public static MemorySegment GetWindow$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceUIWindowVtbl.GetWindow$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetWindow$set(MemorySegment seg, long index, MemorySegment x) {
        IOleInPlaceUIWindowVtbl.GetWindow$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetWindow GetWindow(MemorySegment segment, SegmentScope scope) {
        return GetWindow.ofAddress(GetWindow$get(segment), scope);
    }
    static final FunctionDescriptor ContextSensitiveHelp$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor ContextSensitiveHelp_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle ContextSensitiveHelp_UP$MH = RuntimeHelper.upcallHandle(ContextSensitiveHelp.class, "apply", IOleInPlaceUIWindowVtbl.ContextSensitiveHelp_UP$FUNC);
    static final FunctionDescriptor ContextSensitiveHelp_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle ContextSensitiveHelp_DOWN$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceUIWindowVtbl.ContextSensitiveHelp_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*ContextSensitiveHelp)(IOleInPlaceUIWindow*,BOOL);
     * }
     */
    public interface ContextSensitiveHelp {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(ContextSensitiveHelp fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IOleInPlaceUIWindowVtbl.ContextSensitiveHelp_UP$MH, fi, IOleInPlaceUIWindowVtbl.ContextSensitiveHelp$FUNC, scope);
        }
        static ContextSensitiveHelp ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)IOleInPlaceUIWindowVtbl.ContextSensitiveHelp_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ContextSensitiveHelp$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ContextSensitiveHelp"));
    public static VarHandle ContextSensitiveHelp$VH() {
        return IOleInPlaceUIWindowVtbl.ContextSensitiveHelp$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*ContextSensitiveHelp)(IOleInPlaceUIWindow*,BOOL);
     * }
     */
    public static MemorySegment ContextSensitiveHelp$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceUIWindowVtbl.ContextSensitiveHelp$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*ContextSensitiveHelp)(IOleInPlaceUIWindow*,BOOL);
     * }
     */
    public static void ContextSensitiveHelp$set(MemorySegment seg, MemorySegment x) {
        IOleInPlaceUIWindowVtbl.ContextSensitiveHelp$VH.set(seg, x);
    }
    public static MemorySegment ContextSensitiveHelp$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceUIWindowVtbl.ContextSensitiveHelp$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ContextSensitiveHelp$set(MemorySegment seg, long index, MemorySegment x) {
        IOleInPlaceUIWindowVtbl.ContextSensitiveHelp$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ContextSensitiveHelp ContextSensitiveHelp(MemorySegment segment, SegmentScope scope) {
        return ContextSensitiveHelp.ofAddress(ContextSensitiveHelp$get(segment), scope);
    }
    static final FunctionDescriptor GetBorder$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetBorder_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetBorder_UP$MH = RuntimeHelper.upcallHandle(GetBorder.class, "apply", IOleInPlaceUIWindowVtbl.GetBorder_UP$FUNC);
    static final FunctionDescriptor GetBorder_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetBorder_DOWN$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceUIWindowVtbl.GetBorder_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetBorder)(IOleInPlaceUIWindow*,LPRECT);
     * }
     */
    public interface GetBorder {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetBorder fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IOleInPlaceUIWindowVtbl.GetBorder_UP$MH, fi, IOleInPlaceUIWindowVtbl.GetBorder$FUNC, scope);
        }
        static GetBorder ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IOleInPlaceUIWindowVtbl.GetBorder_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetBorder$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetBorder"));
    public static VarHandle GetBorder$VH() {
        return IOleInPlaceUIWindowVtbl.GetBorder$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetBorder)(IOleInPlaceUIWindow*,LPRECT);
     * }
     */
    public static MemorySegment GetBorder$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceUIWindowVtbl.GetBorder$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetBorder)(IOleInPlaceUIWindow*,LPRECT);
     * }
     */
    public static void GetBorder$set(MemorySegment seg, MemorySegment x) {
        IOleInPlaceUIWindowVtbl.GetBorder$VH.set(seg, x);
    }
    public static MemorySegment GetBorder$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceUIWindowVtbl.GetBorder$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetBorder$set(MemorySegment seg, long index, MemorySegment x) {
        IOleInPlaceUIWindowVtbl.GetBorder$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetBorder GetBorder(MemorySegment segment, SegmentScope scope) {
        return GetBorder.ofAddress(GetBorder$get(segment), scope);
    }
    static final FunctionDescriptor RequestBorderSpace$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor RequestBorderSpace_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle RequestBorderSpace_UP$MH = RuntimeHelper.upcallHandle(RequestBorderSpace.class, "apply", IOleInPlaceUIWindowVtbl.RequestBorderSpace_UP$FUNC);
    static final FunctionDescriptor RequestBorderSpace_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle RequestBorderSpace_DOWN$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceUIWindowVtbl.RequestBorderSpace_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*RequestBorderSpace)(IOleInPlaceUIWindow*,LPCBORDERWIDTHS);
     * }
     */
    public interface RequestBorderSpace {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(RequestBorderSpace fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IOleInPlaceUIWindowVtbl.RequestBorderSpace_UP$MH, fi, IOleInPlaceUIWindowVtbl.RequestBorderSpace$FUNC, scope);
        }
        static RequestBorderSpace ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IOleInPlaceUIWindowVtbl.RequestBorderSpace_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle RequestBorderSpace$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("RequestBorderSpace"));
    public static VarHandle RequestBorderSpace$VH() {
        return IOleInPlaceUIWindowVtbl.RequestBorderSpace$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*RequestBorderSpace)(IOleInPlaceUIWindow*,LPCBORDERWIDTHS);
     * }
     */
    public static MemorySegment RequestBorderSpace$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceUIWindowVtbl.RequestBorderSpace$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*RequestBorderSpace)(IOleInPlaceUIWindow*,LPCBORDERWIDTHS);
     * }
     */
    public static void RequestBorderSpace$set(MemorySegment seg, MemorySegment x) {
        IOleInPlaceUIWindowVtbl.RequestBorderSpace$VH.set(seg, x);
    }
    public static MemorySegment RequestBorderSpace$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceUIWindowVtbl.RequestBorderSpace$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void RequestBorderSpace$set(MemorySegment seg, long index, MemorySegment x) {
        IOleInPlaceUIWindowVtbl.RequestBorderSpace$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static RequestBorderSpace RequestBorderSpace(MemorySegment segment, SegmentScope scope) {
        return RequestBorderSpace.ofAddress(RequestBorderSpace$get(segment), scope);
    }
    static final FunctionDescriptor SetBorderSpace$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor SetBorderSpace_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetBorderSpace_UP$MH = RuntimeHelper.upcallHandle(SetBorderSpace.class, "apply", IOleInPlaceUIWindowVtbl.SetBorderSpace_UP$FUNC);
    static final FunctionDescriptor SetBorderSpace_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetBorderSpace_DOWN$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceUIWindowVtbl.SetBorderSpace_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetBorderSpace)(IOleInPlaceUIWindow*,LPCBORDERWIDTHS);
     * }
     */
    public interface SetBorderSpace {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(SetBorderSpace fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IOleInPlaceUIWindowVtbl.SetBorderSpace_UP$MH, fi, IOleInPlaceUIWindowVtbl.SetBorderSpace$FUNC, scope);
        }
        static SetBorderSpace ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IOleInPlaceUIWindowVtbl.SetBorderSpace_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetBorderSpace$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetBorderSpace"));
    public static VarHandle SetBorderSpace$VH() {
        return IOleInPlaceUIWindowVtbl.SetBorderSpace$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetBorderSpace)(IOleInPlaceUIWindow*,LPCBORDERWIDTHS);
     * }
     */
    public static MemorySegment SetBorderSpace$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceUIWindowVtbl.SetBorderSpace$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetBorderSpace)(IOleInPlaceUIWindow*,LPCBORDERWIDTHS);
     * }
     */
    public static void SetBorderSpace$set(MemorySegment seg, MemorySegment x) {
        IOleInPlaceUIWindowVtbl.SetBorderSpace$VH.set(seg, x);
    }
    public static MemorySegment SetBorderSpace$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceUIWindowVtbl.SetBorderSpace$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetBorderSpace$set(MemorySegment seg, long index, MemorySegment x) {
        IOleInPlaceUIWindowVtbl.SetBorderSpace$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetBorderSpace SetBorderSpace(MemorySegment segment, SegmentScope scope) {
        return SetBorderSpace.ofAddress(SetBorderSpace$get(segment), scope);
    }
    static final FunctionDescriptor SetActiveObject$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor SetActiveObject_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetActiveObject_UP$MH = RuntimeHelper.upcallHandle(SetActiveObject.class, "apply", IOleInPlaceUIWindowVtbl.SetActiveObject_UP$FUNC);
    static final FunctionDescriptor SetActiveObject_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetActiveObject_DOWN$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceUIWindowVtbl.SetActiveObject_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetActiveObject)(IOleInPlaceUIWindow*,IOleInPlaceActiveObject*,LPCOLESTR);
     * }
     */
    public interface SetActiveObject {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(SetActiveObject fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IOleInPlaceUIWindowVtbl.SetActiveObject_UP$MH, fi, IOleInPlaceUIWindowVtbl.SetActiveObject$FUNC, scope);
        }
        static SetActiveObject ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IOleInPlaceUIWindowVtbl.SetActiveObject_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetActiveObject$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetActiveObject"));
    public static VarHandle SetActiveObject$VH() {
        return IOleInPlaceUIWindowVtbl.SetActiveObject$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetActiveObject)(IOleInPlaceUIWindow*,IOleInPlaceActiveObject*,LPCOLESTR);
     * }
     */
    public static MemorySegment SetActiveObject$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceUIWindowVtbl.SetActiveObject$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetActiveObject)(IOleInPlaceUIWindow*,IOleInPlaceActiveObject*,LPCOLESTR);
     * }
     */
    public static void SetActiveObject$set(MemorySegment seg, MemorySegment x) {
        IOleInPlaceUIWindowVtbl.SetActiveObject$VH.set(seg, x);
    }
    public static MemorySegment SetActiveObject$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceUIWindowVtbl.SetActiveObject$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetActiveObject$set(MemorySegment seg, long index, MemorySegment x) {
        IOleInPlaceUIWindowVtbl.SetActiveObject$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetActiveObject SetActiveObject(MemorySegment segment, SegmentScope scope) {
        return SetActiveObject.ofAddress(SetActiveObject$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


