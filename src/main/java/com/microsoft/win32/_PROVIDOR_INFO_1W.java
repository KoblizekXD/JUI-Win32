// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _PROVIDOR_INFO_1W {
 *     LPWSTR pName;
 *     LPWSTR pEnvironment;
 *     LPWSTR pDLLName;
 * };
 * }
 */
public class _PROVIDOR_INFO_1W {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("pName"),
        Constants$root.C_POINTER$LAYOUT.withName("pEnvironment"),
        Constants$root.C_POINTER$LAYOUT.withName("pDLLName")
    ).withName("_PROVIDOR_INFO_1W");
    public static MemoryLayout $LAYOUT() {
        return _PROVIDOR_INFO_1W.$struct$LAYOUT;
    }
    static final VarHandle pName$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pName"));
    public static VarHandle pName$VH() {
        return _PROVIDOR_INFO_1W.pName$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPWSTR pName;
     * }
     */
    public static MemorySegment pName$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_PROVIDOR_INFO_1W.pName$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPWSTR pName;
     * }
     */
    public static void pName$set(MemorySegment seg, MemorySegment x) {
        _PROVIDOR_INFO_1W.pName$VH.set(seg, x);
    }
    public static MemorySegment pName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_PROVIDOR_INFO_1W.pName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pName$set(MemorySegment seg, long index, MemorySegment x) {
        _PROVIDOR_INFO_1W.pName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pEnvironment$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pEnvironment"));
    public static VarHandle pEnvironment$VH() {
        return _PROVIDOR_INFO_1W.pEnvironment$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPWSTR pEnvironment;
     * }
     */
    public static MemorySegment pEnvironment$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_PROVIDOR_INFO_1W.pEnvironment$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPWSTR pEnvironment;
     * }
     */
    public static void pEnvironment$set(MemorySegment seg, MemorySegment x) {
        _PROVIDOR_INFO_1W.pEnvironment$VH.set(seg, x);
    }
    public static MemorySegment pEnvironment$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_PROVIDOR_INFO_1W.pEnvironment$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pEnvironment$set(MemorySegment seg, long index, MemorySegment x) {
        _PROVIDOR_INFO_1W.pEnvironment$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pDLLName$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pDLLName"));
    public static VarHandle pDLLName$VH() {
        return _PROVIDOR_INFO_1W.pDLLName$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPWSTR pDLLName;
     * }
     */
    public static MemorySegment pDLLName$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_PROVIDOR_INFO_1W.pDLLName$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPWSTR pDLLName;
     * }
     */
    public static void pDLLName$set(MemorySegment seg, MemorySegment x) {
        _PROVIDOR_INFO_1W.pDLLName$VH.set(seg, x);
    }
    public static MemorySegment pDLLName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_PROVIDOR_INFO_1W.pDLLName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pDLLName$set(MemorySegment seg, long index, MemorySegment x) {
        _PROVIDOR_INFO_1W.pDLLName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


