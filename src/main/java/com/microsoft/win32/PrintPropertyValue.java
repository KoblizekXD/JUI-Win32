// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct {
 *     EPrintPropertyType ePropertyType;
 *     union  value;
 * };
 * }
 */
public class PrintPropertyValue {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("ePropertyType"),
        MemoryLayout.paddingLayout(32),
        MemoryLayout.unionLayout(
            Constants$root.C_CHAR$LAYOUT.withName("propertyByte"),
            Constants$root.C_POINTER$LAYOUT.withName("propertyString"),
            Constants$root.C_LONG$LAYOUT.withName("propertyInt32"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("propertyInt64"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("cbBuf"),
                MemoryLayout.paddingLayout(32),
                Constants$root.C_POINTER$LAYOUT.withName("pBuf")
            ).withName("propertyBlob")
        ).withName("value")
    );
    public static MemoryLayout $LAYOUT() {
        return PrintPropertyValue.$struct$LAYOUT;
    }
    static final VarHandle ePropertyType$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ePropertyType"));
    public static VarHandle ePropertyType$VH() {
        return PrintPropertyValue.ePropertyType$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * EPrintPropertyType ePropertyType;
     * }
     */
    public static int ePropertyType$get(MemorySegment seg) {
        return (int)PrintPropertyValue.ePropertyType$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * EPrintPropertyType ePropertyType;
     * }
     */
    public static void ePropertyType$set(MemorySegment seg, int x) {
        PrintPropertyValue.ePropertyType$VH.set(seg, x);
    }
    public static int ePropertyType$get(MemorySegment seg, long index) {
        return (int)PrintPropertyValue.ePropertyType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ePropertyType$set(MemorySegment seg, long index, int x) {
        PrintPropertyValue.ePropertyType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
     * union {
     *     BYTE propertyByte;
     *     PWSTR propertyString;
     *     LONG propertyInt32;
     *     LONGLONG propertyInt64;
     *     struct  propertyBlob;
     * };
     * }
     */
    public static final class value {

        // Suppresses default constructor, ensuring non-instantiability.
        private value() {}
        static final UnionLayout value$union$LAYOUT = MemoryLayout.unionLayout(
            Constants$root.C_CHAR$LAYOUT.withName("propertyByte"),
            Constants$root.C_POINTER$LAYOUT.withName("propertyString"),
            Constants$root.C_LONG$LAYOUT.withName("propertyInt32"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("propertyInt64"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("cbBuf"),
                MemoryLayout.paddingLayout(32),
                Constants$root.C_POINTER$LAYOUT.withName("pBuf")
            ).withName("propertyBlob")
        );
        public static MemoryLayout $LAYOUT() {
            return value.value$union$LAYOUT;
        }
        static final VarHandle propertyByte$VH = value$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("propertyByte"));
        public static VarHandle propertyByte$VH() {
            return value.propertyByte$VH;
        }
        /**
         * Getter for field:
         * {@snippet :
         * BYTE propertyByte;
         * }
         */
        public static byte propertyByte$get(MemorySegment seg) {
            return (byte)value.propertyByte$VH.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * BYTE propertyByte;
         * }
         */
        public static void propertyByte$set(MemorySegment seg, byte x) {
            value.propertyByte$VH.set(seg, x);
        }
        public static byte propertyByte$get(MemorySegment seg, long index) {
            return (byte)value.propertyByte$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void propertyByte$set(MemorySegment seg, long index, byte x) {
            value.propertyByte$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle propertyString$VH = value$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("propertyString"));
        public static VarHandle propertyString$VH() {
            return value.propertyString$VH;
        }
        /**
         * Getter for field:
         * {@snippet :
         * PWSTR propertyString;
         * }
         */
        public static MemorySegment propertyString$get(MemorySegment seg) {
            return (java.lang.foreign.MemorySegment)value.propertyString$VH.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * PWSTR propertyString;
         * }
         */
        public static void propertyString$set(MemorySegment seg, MemorySegment x) {
            value.propertyString$VH.set(seg, x);
        }
        public static MemorySegment propertyString$get(MemorySegment seg, long index) {
            return (java.lang.foreign.MemorySegment)value.propertyString$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void propertyString$set(MemorySegment seg, long index, MemorySegment x) {
            value.propertyString$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle propertyInt32$VH = value$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("propertyInt32"));
        public static VarHandle propertyInt32$VH() {
            return value.propertyInt32$VH;
        }
        /**
         * Getter for field:
         * {@snippet :
         * LONG propertyInt32;
         * }
         */
        public static int propertyInt32$get(MemorySegment seg) {
            return (int)value.propertyInt32$VH.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * LONG propertyInt32;
         * }
         */
        public static void propertyInt32$set(MemorySegment seg, int x) {
            value.propertyInt32$VH.set(seg, x);
        }
        public static int propertyInt32$get(MemorySegment seg, long index) {
            return (int)value.propertyInt32$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void propertyInt32$set(MemorySegment seg, long index, int x) {
            value.propertyInt32$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle propertyInt64$VH = value$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("propertyInt64"));
        public static VarHandle propertyInt64$VH() {
            return value.propertyInt64$VH;
        }
        /**
         * Getter for field:
         * {@snippet :
         * LONGLONG propertyInt64;
         * }
         */
        public static long propertyInt64$get(MemorySegment seg) {
            return (long)value.propertyInt64$VH.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * LONGLONG propertyInt64;
         * }
         */
        public static void propertyInt64$set(MemorySegment seg, long x) {
            value.propertyInt64$VH.set(seg, x);
        }
        public static long propertyInt64$get(MemorySegment seg, long index) {
            return (long)value.propertyInt64$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void propertyInt64$set(MemorySegment seg, long index, long x) {
            value.propertyInt64$VH.set(seg.asSlice(index*sizeof()), x);
        }
        /**
         * {@snippet :
         * struct {
         *     DWORD cbBuf;
         *     LPVOID pBuf;
         * };
         * }
         */
        public static final class propertyBlob {

            // Suppresses default constructor, ensuring non-instantiability.
            private propertyBlob() {}
            static final StructLayout value$propertyBlob$struct$LAYOUT = MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("cbBuf"),
                MemoryLayout.paddingLayout(32),
                Constants$root.C_POINTER$LAYOUT.withName("pBuf")
            );
            public static MemoryLayout $LAYOUT() {
                return propertyBlob.value$propertyBlob$struct$LAYOUT;
            }
            static final VarHandle cbBuf$VH = value$propertyBlob$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cbBuf"));
            public static VarHandle cbBuf$VH() {
                return propertyBlob.cbBuf$VH;
            }
            /**
             * Getter for field:
             * {@snippet :
             * DWORD cbBuf;
             * }
             */
            public static int cbBuf$get(MemorySegment seg) {
                return (int)propertyBlob.cbBuf$VH.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * DWORD cbBuf;
             * }
             */
            public static void cbBuf$set(MemorySegment seg, int x) {
                propertyBlob.cbBuf$VH.set(seg, x);
            }
            public static int cbBuf$get(MemorySegment seg, long index) {
                return (int)propertyBlob.cbBuf$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void cbBuf$set(MemorySegment seg, long index, int x) {
                propertyBlob.cbBuf$VH.set(seg.asSlice(index*sizeof()), x);
            }
            static final VarHandle pBuf$VH = value$propertyBlob$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pBuf"));
            public static VarHandle pBuf$VH() {
                return propertyBlob.pBuf$VH;
            }
            /**
             * Getter for field:
             * {@snippet :
             * LPVOID pBuf;
             * }
             */
            public static MemorySegment pBuf$get(MemorySegment seg) {
                return (java.lang.foreign.MemorySegment)propertyBlob.pBuf$VH.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * LPVOID pBuf;
             * }
             */
            public static void pBuf$set(MemorySegment seg, MemorySegment x) {
                propertyBlob.pBuf$VH.set(seg, x);
            }
            public static MemorySegment pBuf$get(MemorySegment seg, long index) {
                return (java.lang.foreign.MemorySegment)propertyBlob.pBuf$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void pBuf$set(MemorySegment seg, long index, MemorySegment x) {
                propertyBlob.pBuf$VH.set(seg.asSlice(index*sizeof()), x);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
            public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
            }
            public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
        }

        public static MemorySegment propertyBlob$slice(MemorySegment seg) {
            return seg.asSlice(0, 16);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
    }

    public static MemorySegment value$slice(MemorySegment seg) {
        return seg.asSlice(8, 16);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


