// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD {
 *     BYTE Cdb[16];
 *     BYTE Command[16];
 *     DWORDLONG StartTime;
 *     DWORDLONG EndTime;
 *     DWORD OperationStatus;
 *     DWORD OperationError;
 *     union  StackSpecific;
 * };
 * }
 */
public class _DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(16, Constants$root.C_CHAR$LAYOUT).withName("Cdb"),
        MemoryLayout.sequenceLayout(16, Constants$root.C_CHAR$LAYOUT).withName("Command"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("StartTime"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("EndTime"),
        Constants$root.C_LONG$LAYOUT.withName("OperationStatus"),
        Constants$root.C_LONG$LAYOUT.withName("OperationError"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("dwReserved")
            ).withName("ExternalStack"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("dwAtaPortSpecific")
            ).withName("AtaPort"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("SrbTag")
            ).withName("StorPort")
        ).withName("StackSpecific")
    ).withName("_DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD");
    public static MemoryLayout $LAYOUT() {
        return _DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD.$struct$LAYOUT;
    }
    public static MemorySegment Cdb$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    public static MemorySegment Command$slice(MemorySegment seg) {
        return seg.asSlice(16, 16);
    }
    static final VarHandle StartTime$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("StartTime"));
    public static VarHandle StartTime$VH() {
        return _DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD.StartTime$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORDLONG StartTime;
     * }
     */
    public static long StartTime$get(MemorySegment seg) {
        return (long)_DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD.StartTime$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORDLONG StartTime;
     * }
     */
    public static void StartTime$set(MemorySegment seg, long x) {
        _DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD.StartTime$VH.set(seg, x);
    }
    public static long StartTime$get(MemorySegment seg, long index) {
        return (long)_DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD.StartTime$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void StartTime$set(MemorySegment seg, long index, long x) {
        _DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD.StartTime$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle EndTime$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("EndTime"));
    public static VarHandle EndTime$VH() {
        return _DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD.EndTime$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORDLONG EndTime;
     * }
     */
    public static long EndTime$get(MemorySegment seg) {
        return (long)_DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD.EndTime$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORDLONG EndTime;
     * }
     */
    public static void EndTime$set(MemorySegment seg, long x) {
        _DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD.EndTime$VH.set(seg, x);
    }
    public static long EndTime$get(MemorySegment seg, long index) {
        return (long)_DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD.EndTime$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void EndTime$set(MemorySegment seg, long index, long x) {
        _DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD.EndTime$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle OperationStatus$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("OperationStatus"));
    public static VarHandle OperationStatus$VH() {
        return _DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD.OperationStatus$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD OperationStatus;
     * }
     */
    public static int OperationStatus$get(MemorySegment seg) {
        return (int)_DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD.OperationStatus$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD OperationStatus;
     * }
     */
    public static void OperationStatus$set(MemorySegment seg, int x) {
        _DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD.OperationStatus$VH.set(seg, x);
    }
    public static int OperationStatus$get(MemorySegment seg, long index) {
        return (int)_DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD.OperationStatus$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void OperationStatus$set(MemorySegment seg, long index, int x) {
        _DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD.OperationStatus$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle OperationError$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("OperationError"));
    public static VarHandle OperationError$VH() {
        return _DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD.OperationError$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD OperationError;
     * }
     */
    public static int OperationError$get(MemorySegment seg) {
        return (int)_DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD.OperationError$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD OperationError;
     * }
     */
    public static void OperationError$set(MemorySegment seg, int x) {
        _DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD.OperationError$VH.set(seg, x);
    }
    public static int OperationError$get(MemorySegment seg, long index) {
        return (int)_DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD.OperationError$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void OperationError$set(MemorySegment seg, long index, int x) {
        _DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD.OperationError$VH.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
     * union {
     *     struct  ExternalStack;
     *     struct  AtaPort;
     *     struct  StorPort;
     * };
     * }
     */
    public static final class StackSpecific {

        // Suppresses default constructor, ensuring non-instantiability.
        private StackSpecific() {}
        static final UnionLayout StackSpecific$union$LAYOUT = MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("dwReserved")
            ).withName("ExternalStack"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("dwAtaPortSpecific")
            ).withName("AtaPort"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("SrbTag")
            ).withName("StorPort")
        );
        public static MemoryLayout $LAYOUT() {
            return StackSpecific.StackSpecific$union$LAYOUT;
        }
        /**
         * {@snippet :
         * struct {
         *     DWORD dwReserved;
         * };
         * }
         */
        public static final class ExternalStack {

            // Suppresses default constructor, ensuring non-instantiability.
            private ExternalStack() {}
            static final StructLayout StackSpecific$ExternalStack$struct$LAYOUT = MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("dwReserved")
            );
            public static MemoryLayout $LAYOUT() {
                return ExternalStack.StackSpecific$ExternalStack$struct$LAYOUT;
            }
            static final VarHandle dwReserved$VH = StackSpecific$ExternalStack$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwReserved"));
            public static VarHandle dwReserved$VH() {
                return ExternalStack.dwReserved$VH;
            }
            /**
             * Getter for field:
             * {@snippet :
             * DWORD dwReserved;
             * }
             */
            public static int dwReserved$get(MemorySegment seg) {
                return (int)ExternalStack.dwReserved$VH.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * DWORD dwReserved;
             * }
             */
            public static void dwReserved$set(MemorySegment seg, int x) {
                ExternalStack.dwReserved$VH.set(seg, x);
            }
            public static int dwReserved$get(MemorySegment seg, long index) {
                return (int)ExternalStack.dwReserved$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void dwReserved$set(MemorySegment seg, long index, int x) {
                ExternalStack.dwReserved$VH.set(seg.asSlice(index*sizeof()), x);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
            public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
            }
            public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
        }

        public static MemorySegment ExternalStack$slice(MemorySegment seg) {
            return seg.asSlice(0, 4);
        }
        /**
         * {@snippet :
         * struct {
         *     DWORD dwAtaPortSpecific;
         * };
         * }
         */
        public static final class AtaPort {

            // Suppresses default constructor, ensuring non-instantiability.
            private AtaPort() {}
            static final StructLayout StackSpecific$AtaPort$struct$LAYOUT = MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("dwAtaPortSpecific")
            );
            public static MemoryLayout $LAYOUT() {
                return AtaPort.StackSpecific$AtaPort$struct$LAYOUT;
            }
            static final VarHandle dwAtaPortSpecific$VH = StackSpecific$AtaPort$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwAtaPortSpecific"));
            public static VarHandle dwAtaPortSpecific$VH() {
                return AtaPort.dwAtaPortSpecific$VH;
            }
            /**
             * Getter for field:
             * {@snippet :
             * DWORD dwAtaPortSpecific;
             * }
             */
            public static int dwAtaPortSpecific$get(MemorySegment seg) {
                return (int)AtaPort.dwAtaPortSpecific$VH.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * DWORD dwAtaPortSpecific;
             * }
             */
            public static void dwAtaPortSpecific$set(MemorySegment seg, int x) {
                AtaPort.dwAtaPortSpecific$VH.set(seg, x);
            }
            public static int dwAtaPortSpecific$get(MemorySegment seg, long index) {
                return (int)AtaPort.dwAtaPortSpecific$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void dwAtaPortSpecific$set(MemorySegment seg, long index, int x) {
                AtaPort.dwAtaPortSpecific$VH.set(seg.asSlice(index*sizeof()), x);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
            public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
            }
            public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
        }

        public static MemorySegment AtaPort$slice(MemorySegment seg) {
            return seg.asSlice(0, 4);
        }
        /**
         * {@snippet :
         * struct {
         *     DWORD SrbTag;
         * };
         * }
         */
        public static final class StorPort {

            // Suppresses default constructor, ensuring non-instantiability.
            private StorPort() {}
            static final StructLayout StackSpecific$StorPort$struct$LAYOUT = MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("SrbTag")
            );
            public static MemoryLayout $LAYOUT() {
                return StorPort.StackSpecific$StorPort$struct$LAYOUT;
            }
            static final VarHandle SrbTag$VH = StackSpecific$StorPort$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SrbTag"));
            public static VarHandle SrbTag$VH() {
                return StorPort.SrbTag$VH;
            }
            /**
             * Getter for field:
             * {@snippet :
             * DWORD SrbTag;
             * }
             */
            public static int SrbTag$get(MemorySegment seg) {
                return (int)StorPort.SrbTag$VH.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * DWORD SrbTag;
             * }
             */
            public static void SrbTag$set(MemorySegment seg, int x) {
                StorPort.SrbTag$VH.set(seg, x);
            }
            public static int SrbTag$get(MemorySegment seg, long index) {
                return (int)StorPort.SrbTag$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void SrbTag$set(MemorySegment seg, long index, int x) {
                StorPort.SrbTag$VH.set(seg.asSlice(index*sizeof()), x);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
            public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
            }
            public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
        }

        public static MemorySegment StorPort$slice(MemorySegment seg) {
            return seg.asSlice(0, 4);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
    }

    public static MemorySegment StackSpecific$slice(MemorySegment seg) {
        return seg.asSlice(56, 4);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


