// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct tagSOLE_AUTHENTICATION_INFO {
 *     DWORD dwAuthnSvc;
 *     DWORD dwAuthzSvc;
 *     void* pAuthInfo;
 * };
 * }
 */
public class tagSOLE_AUTHENTICATION_INFO {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("dwAuthnSvc"),
        Constants$root.C_LONG$LAYOUT.withName("dwAuthzSvc"),
        Constants$root.C_POINTER$LAYOUT.withName("pAuthInfo")
    ).withName("tagSOLE_AUTHENTICATION_INFO");
    public static MemoryLayout $LAYOUT() {
        return tagSOLE_AUTHENTICATION_INFO.$struct$LAYOUT;
    }
    static final VarHandle dwAuthnSvc$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwAuthnSvc"));
    public static VarHandle dwAuthnSvc$VH() {
        return tagSOLE_AUTHENTICATION_INFO.dwAuthnSvc$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwAuthnSvc;
     * }
     */
    public static int dwAuthnSvc$get(MemorySegment seg) {
        return (int)tagSOLE_AUTHENTICATION_INFO.dwAuthnSvc$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwAuthnSvc;
     * }
     */
    public static void dwAuthnSvc$set(MemorySegment seg, int x) {
        tagSOLE_AUTHENTICATION_INFO.dwAuthnSvc$VH.set(seg, x);
    }
    public static int dwAuthnSvc$get(MemorySegment seg, long index) {
        return (int)tagSOLE_AUTHENTICATION_INFO.dwAuthnSvc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwAuthnSvc$set(MemorySegment seg, long index, int x) {
        tagSOLE_AUTHENTICATION_INFO.dwAuthnSvc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwAuthzSvc$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwAuthzSvc"));
    public static VarHandle dwAuthzSvc$VH() {
        return tagSOLE_AUTHENTICATION_INFO.dwAuthzSvc$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwAuthzSvc;
     * }
     */
    public static int dwAuthzSvc$get(MemorySegment seg) {
        return (int)tagSOLE_AUTHENTICATION_INFO.dwAuthzSvc$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwAuthzSvc;
     * }
     */
    public static void dwAuthzSvc$set(MemorySegment seg, int x) {
        tagSOLE_AUTHENTICATION_INFO.dwAuthzSvc$VH.set(seg, x);
    }
    public static int dwAuthzSvc$get(MemorySegment seg, long index) {
        return (int)tagSOLE_AUTHENTICATION_INFO.dwAuthzSvc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwAuthzSvc$set(MemorySegment seg, long index, int x) {
        tagSOLE_AUTHENTICATION_INFO.dwAuthzSvc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pAuthInfo$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pAuthInfo"));
    public static VarHandle pAuthInfo$VH() {
        return tagSOLE_AUTHENTICATION_INFO.pAuthInfo$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* pAuthInfo;
     * }
     */
    public static MemorySegment pAuthInfo$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)tagSOLE_AUTHENTICATION_INFO.pAuthInfo$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* pAuthInfo;
     * }
     */
    public static void pAuthInfo$set(MemorySegment seg, MemorySegment x) {
        tagSOLE_AUTHENTICATION_INFO.pAuthInfo$VH.set(seg, x);
    }
    public static MemorySegment pAuthInfo$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)tagSOLE_AUTHENTICATION_INFO.pAuthInfo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pAuthInfo$set(MemorySegment seg, long index, MemorySegment x) {
        tagSOLE_AUTHENTICATION_INFO.pAuthInfo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


