// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct WIN32_MEMORY_PARTITION_INFORMATION {
 *     ULONG Flags;
 *     ULONG NumaNode;
 *     ULONG Channel;
 *     ULONG NumberOfNumaNodes;
 *     ULONG64 ResidentAvailablePages;
 *     ULONG64 CommittedPages;
 *     ULONG64 CommitLimit;
 *     ULONG64 PeakCommitment;
 *     ULONG64 TotalNumberOfPages;
 *     ULONG64 AvailablePages;
 *     ULONG64 ZeroPages;
 *     ULONG64 FreePages;
 *     ULONG64 StandbyPages;
 *     ULONG64 Reserved[16];
 *     ULONG64 MaximumCommitLimit;
 *     ULONG64 Reserved2;
 *     ULONG PartitionId;
 * };
 * }
 */
public class WIN32_MEMORY_PARTITION_INFORMATION {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("Flags"),
        Constants$root.C_LONG$LAYOUT.withName("NumaNode"),
        Constants$root.C_LONG$LAYOUT.withName("Channel"),
        Constants$root.C_LONG$LAYOUT.withName("NumberOfNumaNodes"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("ResidentAvailablePages"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("CommittedPages"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("CommitLimit"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("PeakCommitment"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("TotalNumberOfPages"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("AvailablePages"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("ZeroPages"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("FreePages"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("StandbyPages"),
        MemoryLayout.sequenceLayout(16, Constants$root.C_LONG_LONG$LAYOUT).withName("Reserved"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("MaximumCommitLimit"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("Reserved2"),
        Constants$root.C_LONG$LAYOUT.withName("PartitionId"),
        MemoryLayout.paddingLayout(32)
    ).withName("WIN32_MEMORY_PARTITION_INFORMATION");
    public static MemoryLayout $LAYOUT() {
        return WIN32_MEMORY_PARTITION_INFORMATION.$struct$LAYOUT;
    }
    static final VarHandle Flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Flags"));
    public static VarHandle Flags$VH() {
        return WIN32_MEMORY_PARTITION_INFORMATION.Flags$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG Flags;
     * }
     */
    public static int Flags$get(MemorySegment seg) {
        return (int)WIN32_MEMORY_PARTITION_INFORMATION.Flags$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG Flags;
     * }
     */
    public static void Flags$set(MemorySegment seg, int x) {
        WIN32_MEMORY_PARTITION_INFORMATION.Flags$VH.set(seg, x);
    }
    public static int Flags$get(MemorySegment seg, long index) {
        return (int)WIN32_MEMORY_PARTITION_INFORMATION.Flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Flags$set(MemorySegment seg, long index, int x) {
        WIN32_MEMORY_PARTITION_INFORMATION.Flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle NumaNode$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("NumaNode"));
    public static VarHandle NumaNode$VH() {
        return WIN32_MEMORY_PARTITION_INFORMATION.NumaNode$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG NumaNode;
     * }
     */
    public static int NumaNode$get(MemorySegment seg) {
        return (int)WIN32_MEMORY_PARTITION_INFORMATION.NumaNode$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG NumaNode;
     * }
     */
    public static void NumaNode$set(MemorySegment seg, int x) {
        WIN32_MEMORY_PARTITION_INFORMATION.NumaNode$VH.set(seg, x);
    }
    public static int NumaNode$get(MemorySegment seg, long index) {
        return (int)WIN32_MEMORY_PARTITION_INFORMATION.NumaNode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void NumaNode$set(MemorySegment seg, long index, int x) {
        WIN32_MEMORY_PARTITION_INFORMATION.NumaNode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Channel$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Channel"));
    public static VarHandle Channel$VH() {
        return WIN32_MEMORY_PARTITION_INFORMATION.Channel$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG Channel;
     * }
     */
    public static int Channel$get(MemorySegment seg) {
        return (int)WIN32_MEMORY_PARTITION_INFORMATION.Channel$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG Channel;
     * }
     */
    public static void Channel$set(MemorySegment seg, int x) {
        WIN32_MEMORY_PARTITION_INFORMATION.Channel$VH.set(seg, x);
    }
    public static int Channel$get(MemorySegment seg, long index) {
        return (int)WIN32_MEMORY_PARTITION_INFORMATION.Channel$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Channel$set(MemorySegment seg, long index, int x) {
        WIN32_MEMORY_PARTITION_INFORMATION.Channel$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle NumberOfNumaNodes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("NumberOfNumaNodes"));
    public static VarHandle NumberOfNumaNodes$VH() {
        return WIN32_MEMORY_PARTITION_INFORMATION.NumberOfNumaNodes$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG NumberOfNumaNodes;
     * }
     */
    public static int NumberOfNumaNodes$get(MemorySegment seg) {
        return (int)WIN32_MEMORY_PARTITION_INFORMATION.NumberOfNumaNodes$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG NumberOfNumaNodes;
     * }
     */
    public static void NumberOfNumaNodes$set(MemorySegment seg, int x) {
        WIN32_MEMORY_PARTITION_INFORMATION.NumberOfNumaNodes$VH.set(seg, x);
    }
    public static int NumberOfNumaNodes$get(MemorySegment seg, long index) {
        return (int)WIN32_MEMORY_PARTITION_INFORMATION.NumberOfNumaNodes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void NumberOfNumaNodes$set(MemorySegment seg, long index, int x) {
        WIN32_MEMORY_PARTITION_INFORMATION.NumberOfNumaNodes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ResidentAvailablePages$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ResidentAvailablePages"));
    public static VarHandle ResidentAvailablePages$VH() {
        return WIN32_MEMORY_PARTITION_INFORMATION.ResidentAvailablePages$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG64 ResidentAvailablePages;
     * }
     */
    public static long ResidentAvailablePages$get(MemorySegment seg) {
        return (long)WIN32_MEMORY_PARTITION_INFORMATION.ResidentAvailablePages$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG64 ResidentAvailablePages;
     * }
     */
    public static void ResidentAvailablePages$set(MemorySegment seg, long x) {
        WIN32_MEMORY_PARTITION_INFORMATION.ResidentAvailablePages$VH.set(seg, x);
    }
    public static long ResidentAvailablePages$get(MemorySegment seg, long index) {
        return (long)WIN32_MEMORY_PARTITION_INFORMATION.ResidentAvailablePages$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ResidentAvailablePages$set(MemorySegment seg, long index, long x) {
        WIN32_MEMORY_PARTITION_INFORMATION.ResidentAvailablePages$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle CommittedPages$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("CommittedPages"));
    public static VarHandle CommittedPages$VH() {
        return WIN32_MEMORY_PARTITION_INFORMATION.CommittedPages$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG64 CommittedPages;
     * }
     */
    public static long CommittedPages$get(MemorySegment seg) {
        return (long)WIN32_MEMORY_PARTITION_INFORMATION.CommittedPages$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG64 CommittedPages;
     * }
     */
    public static void CommittedPages$set(MemorySegment seg, long x) {
        WIN32_MEMORY_PARTITION_INFORMATION.CommittedPages$VH.set(seg, x);
    }
    public static long CommittedPages$get(MemorySegment seg, long index) {
        return (long)WIN32_MEMORY_PARTITION_INFORMATION.CommittedPages$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CommittedPages$set(MemorySegment seg, long index, long x) {
        WIN32_MEMORY_PARTITION_INFORMATION.CommittedPages$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle CommitLimit$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("CommitLimit"));
    public static VarHandle CommitLimit$VH() {
        return WIN32_MEMORY_PARTITION_INFORMATION.CommitLimit$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG64 CommitLimit;
     * }
     */
    public static long CommitLimit$get(MemorySegment seg) {
        return (long)WIN32_MEMORY_PARTITION_INFORMATION.CommitLimit$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG64 CommitLimit;
     * }
     */
    public static void CommitLimit$set(MemorySegment seg, long x) {
        WIN32_MEMORY_PARTITION_INFORMATION.CommitLimit$VH.set(seg, x);
    }
    public static long CommitLimit$get(MemorySegment seg, long index) {
        return (long)WIN32_MEMORY_PARTITION_INFORMATION.CommitLimit$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CommitLimit$set(MemorySegment seg, long index, long x) {
        WIN32_MEMORY_PARTITION_INFORMATION.CommitLimit$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle PeakCommitment$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("PeakCommitment"));
    public static VarHandle PeakCommitment$VH() {
        return WIN32_MEMORY_PARTITION_INFORMATION.PeakCommitment$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG64 PeakCommitment;
     * }
     */
    public static long PeakCommitment$get(MemorySegment seg) {
        return (long)WIN32_MEMORY_PARTITION_INFORMATION.PeakCommitment$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG64 PeakCommitment;
     * }
     */
    public static void PeakCommitment$set(MemorySegment seg, long x) {
        WIN32_MEMORY_PARTITION_INFORMATION.PeakCommitment$VH.set(seg, x);
    }
    public static long PeakCommitment$get(MemorySegment seg, long index) {
        return (long)WIN32_MEMORY_PARTITION_INFORMATION.PeakCommitment$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void PeakCommitment$set(MemorySegment seg, long index, long x) {
        WIN32_MEMORY_PARTITION_INFORMATION.PeakCommitment$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle TotalNumberOfPages$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("TotalNumberOfPages"));
    public static VarHandle TotalNumberOfPages$VH() {
        return WIN32_MEMORY_PARTITION_INFORMATION.TotalNumberOfPages$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG64 TotalNumberOfPages;
     * }
     */
    public static long TotalNumberOfPages$get(MemorySegment seg) {
        return (long)WIN32_MEMORY_PARTITION_INFORMATION.TotalNumberOfPages$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG64 TotalNumberOfPages;
     * }
     */
    public static void TotalNumberOfPages$set(MemorySegment seg, long x) {
        WIN32_MEMORY_PARTITION_INFORMATION.TotalNumberOfPages$VH.set(seg, x);
    }
    public static long TotalNumberOfPages$get(MemorySegment seg, long index) {
        return (long)WIN32_MEMORY_PARTITION_INFORMATION.TotalNumberOfPages$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void TotalNumberOfPages$set(MemorySegment seg, long index, long x) {
        WIN32_MEMORY_PARTITION_INFORMATION.TotalNumberOfPages$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle AvailablePages$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AvailablePages"));
    public static VarHandle AvailablePages$VH() {
        return WIN32_MEMORY_PARTITION_INFORMATION.AvailablePages$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG64 AvailablePages;
     * }
     */
    public static long AvailablePages$get(MemorySegment seg) {
        return (long)WIN32_MEMORY_PARTITION_INFORMATION.AvailablePages$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG64 AvailablePages;
     * }
     */
    public static void AvailablePages$set(MemorySegment seg, long x) {
        WIN32_MEMORY_PARTITION_INFORMATION.AvailablePages$VH.set(seg, x);
    }
    public static long AvailablePages$get(MemorySegment seg, long index) {
        return (long)WIN32_MEMORY_PARTITION_INFORMATION.AvailablePages$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AvailablePages$set(MemorySegment seg, long index, long x) {
        WIN32_MEMORY_PARTITION_INFORMATION.AvailablePages$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ZeroPages$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ZeroPages"));
    public static VarHandle ZeroPages$VH() {
        return WIN32_MEMORY_PARTITION_INFORMATION.ZeroPages$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG64 ZeroPages;
     * }
     */
    public static long ZeroPages$get(MemorySegment seg) {
        return (long)WIN32_MEMORY_PARTITION_INFORMATION.ZeroPages$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG64 ZeroPages;
     * }
     */
    public static void ZeroPages$set(MemorySegment seg, long x) {
        WIN32_MEMORY_PARTITION_INFORMATION.ZeroPages$VH.set(seg, x);
    }
    public static long ZeroPages$get(MemorySegment seg, long index) {
        return (long)WIN32_MEMORY_PARTITION_INFORMATION.ZeroPages$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ZeroPages$set(MemorySegment seg, long index, long x) {
        WIN32_MEMORY_PARTITION_INFORMATION.ZeroPages$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle FreePages$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("FreePages"));
    public static VarHandle FreePages$VH() {
        return WIN32_MEMORY_PARTITION_INFORMATION.FreePages$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG64 FreePages;
     * }
     */
    public static long FreePages$get(MemorySegment seg) {
        return (long)WIN32_MEMORY_PARTITION_INFORMATION.FreePages$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG64 FreePages;
     * }
     */
    public static void FreePages$set(MemorySegment seg, long x) {
        WIN32_MEMORY_PARTITION_INFORMATION.FreePages$VH.set(seg, x);
    }
    public static long FreePages$get(MemorySegment seg, long index) {
        return (long)WIN32_MEMORY_PARTITION_INFORMATION.FreePages$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void FreePages$set(MemorySegment seg, long index, long x) {
        WIN32_MEMORY_PARTITION_INFORMATION.FreePages$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle StandbyPages$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("StandbyPages"));
    public static VarHandle StandbyPages$VH() {
        return WIN32_MEMORY_PARTITION_INFORMATION.StandbyPages$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG64 StandbyPages;
     * }
     */
    public static long StandbyPages$get(MemorySegment seg) {
        return (long)WIN32_MEMORY_PARTITION_INFORMATION.StandbyPages$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG64 StandbyPages;
     * }
     */
    public static void StandbyPages$set(MemorySegment seg, long x) {
        WIN32_MEMORY_PARTITION_INFORMATION.StandbyPages$VH.set(seg, x);
    }
    public static long StandbyPages$get(MemorySegment seg, long index) {
        return (long)WIN32_MEMORY_PARTITION_INFORMATION.StandbyPages$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void StandbyPages$set(MemorySegment seg, long index, long x) {
        WIN32_MEMORY_PARTITION_INFORMATION.StandbyPages$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Reserved$slice(MemorySegment seg) {
        return seg.asSlice(88, 128);
    }
    static final VarHandle MaximumCommitLimit$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("MaximumCommitLimit"));
    public static VarHandle MaximumCommitLimit$VH() {
        return WIN32_MEMORY_PARTITION_INFORMATION.MaximumCommitLimit$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG64 MaximumCommitLimit;
     * }
     */
    public static long MaximumCommitLimit$get(MemorySegment seg) {
        return (long)WIN32_MEMORY_PARTITION_INFORMATION.MaximumCommitLimit$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG64 MaximumCommitLimit;
     * }
     */
    public static void MaximumCommitLimit$set(MemorySegment seg, long x) {
        WIN32_MEMORY_PARTITION_INFORMATION.MaximumCommitLimit$VH.set(seg, x);
    }
    public static long MaximumCommitLimit$get(MemorySegment seg, long index) {
        return (long)WIN32_MEMORY_PARTITION_INFORMATION.MaximumCommitLimit$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MaximumCommitLimit$set(MemorySegment seg, long index, long x) {
        WIN32_MEMORY_PARTITION_INFORMATION.MaximumCommitLimit$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Reserved2$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Reserved2"));
    public static VarHandle Reserved2$VH() {
        return WIN32_MEMORY_PARTITION_INFORMATION.Reserved2$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG64 Reserved2;
     * }
     */
    public static long Reserved2$get(MemorySegment seg) {
        return (long)WIN32_MEMORY_PARTITION_INFORMATION.Reserved2$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG64 Reserved2;
     * }
     */
    public static void Reserved2$set(MemorySegment seg, long x) {
        WIN32_MEMORY_PARTITION_INFORMATION.Reserved2$VH.set(seg, x);
    }
    public static long Reserved2$get(MemorySegment seg, long index) {
        return (long)WIN32_MEMORY_PARTITION_INFORMATION.Reserved2$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Reserved2$set(MemorySegment seg, long index, long x) {
        WIN32_MEMORY_PARTITION_INFORMATION.Reserved2$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle PartitionId$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("PartitionId"));
    public static VarHandle PartitionId$VH() {
        return WIN32_MEMORY_PARTITION_INFORMATION.PartitionId$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG PartitionId;
     * }
     */
    public static int PartitionId$get(MemorySegment seg) {
        return (int)WIN32_MEMORY_PARTITION_INFORMATION.PartitionId$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG PartitionId;
     * }
     */
    public static void PartitionId$set(MemorySegment seg, int x) {
        WIN32_MEMORY_PARTITION_INFORMATION.PartitionId$VH.set(seg, x);
    }
    public static int PartitionId$get(MemorySegment seg, long index) {
        return (int)WIN32_MEMORY_PARTITION_INFORMATION.PartitionId$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void PartitionId$set(MemorySegment seg, long index, int x) {
        WIN32_MEMORY_PARTITION_INFORMATION.PartitionId$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


