// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _THREAD_POWER_THROTTLING_STATE {
 *     ULONG Version;
 *     ULONG ControlMask;
 *     ULONG StateMask;
 * };
 * }
 */
public class _THREAD_POWER_THROTTLING_STATE {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("Version"),
        Constants$root.C_LONG$LAYOUT.withName("ControlMask"),
        Constants$root.C_LONG$LAYOUT.withName("StateMask")
    ).withName("_THREAD_POWER_THROTTLING_STATE");
    public static MemoryLayout $LAYOUT() {
        return _THREAD_POWER_THROTTLING_STATE.$struct$LAYOUT;
    }
    static final VarHandle Version$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Version"));
    public static VarHandle Version$VH() {
        return _THREAD_POWER_THROTTLING_STATE.Version$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG Version;
     * }
     */
    public static int Version$get(MemorySegment seg) {
        return (int)_THREAD_POWER_THROTTLING_STATE.Version$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG Version;
     * }
     */
    public static void Version$set(MemorySegment seg, int x) {
        _THREAD_POWER_THROTTLING_STATE.Version$VH.set(seg, x);
    }
    public static int Version$get(MemorySegment seg, long index) {
        return (int)_THREAD_POWER_THROTTLING_STATE.Version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Version$set(MemorySegment seg, long index, int x) {
        _THREAD_POWER_THROTTLING_STATE.Version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ControlMask$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ControlMask"));
    public static VarHandle ControlMask$VH() {
        return _THREAD_POWER_THROTTLING_STATE.ControlMask$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG ControlMask;
     * }
     */
    public static int ControlMask$get(MemorySegment seg) {
        return (int)_THREAD_POWER_THROTTLING_STATE.ControlMask$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG ControlMask;
     * }
     */
    public static void ControlMask$set(MemorySegment seg, int x) {
        _THREAD_POWER_THROTTLING_STATE.ControlMask$VH.set(seg, x);
    }
    public static int ControlMask$get(MemorySegment seg, long index) {
        return (int)_THREAD_POWER_THROTTLING_STATE.ControlMask$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ControlMask$set(MemorySegment seg, long index, int x) {
        _THREAD_POWER_THROTTLING_STATE.ControlMask$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle StateMask$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("StateMask"));
    public static VarHandle StateMask$VH() {
        return _THREAD_POWER_THROTTLING_STATE.StateMask$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG StateMask;
     * }
     */
    public static int StateMask$get(MemorySegment seg) {
        return (int)_THREAD_POWER_THROTTLING_STATE.StateMask$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG StateMask;
     * }
     */
    public static void StateMask$set(MemorySegment seg, int x) {
        _THREAD_POWER_THROTTLING_STATE.StateMask$VH.set(seg, x);
    }
    public static int StateMask$get(MemorySegment seg, long index) {
        return (int)_THREAD_POWER_THROTTLING_STATE.StateMask$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void StateMask$set(MemorySegment seg, long index, int x) {
        _THREAD_POWER_THROTTLING_STATE.StateMask$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


