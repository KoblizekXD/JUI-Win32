// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _REASON_CONTEXT {
 *     ULONG Version;
 *     DWORD Flags;
 *     union  Reason;
 * };
 * }
 */
public class _REASON_CONTEXT {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("Version"),
        Constants$root.C_LONG$LAYOUT.withName("Flags"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_POINTER$LAYOUT.withName("LocalizedReasonModule"),
                Constants$root.C_LONG$LAYOUT.withName("LocalizedReasonId"),
                Constants$root.C_LONG$LAYOUT.withName("ReasonStringCount"),
                Constants$root.C_POINTER$LAYOUT.withName("ReasonStrings")
            ).withName("Detailed"),
            Constants$root.C_POINTER$LAYOUT.withName("SimpleReasonString")
        ).withName("Reason")
    ).withName("_REASON_CONTEXT");
    public static MemoryLayout $LAYOUT() {
        return _REASON_CONTEXT.$struct$LAYOUT;
    }
    static final VarHandle Version$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Version"));
    public static VarHandle Version$VH() {
        return _REASON_CONTEXT.Version$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG Version;
     * }
     */
    public static int Version$get(MemorySegment seg) {
        return (int)_REASON_CONTEXT.Version$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG Version;
     * }
     */
    public static void Version$set(MemorySegment seg, int x) {
        _REASON_CONTEXT.Version$VH.set(seg, x);
    }
    public static int Version$get(MemorySegment seg, long index) {
        return (int)_REASON_CONTEXT.Version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Version$set(MemorySegment seg, long index, int x) {
        _REASON_CONTEXT.Version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Flags"));
    public static VarHandle Flags$VH() {
        return _REASON_CONTEXT.Flags$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Flags;
     * }
     */
    public static int Flags$get(MemorySegment seg) {
        return (int)_REASON_CONTEXT.Flags$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Flags;
     * }
     */
    public static void Flags$set(MemorySegment seg, int x) {
        _REASON_CONTEXT.Flags$VH.set(seg, x);
    }
    public static int Flags$get(MemorySegment seg, long index) {
        return (int)_REASON_CONTEXT.Flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Flags$set(MemorySegment seg, long index, int x) {
        _REASON_CONTEXT.Flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
     * union {
     *     struct  Detailed;
     *     LPWSTR SimpleReasonString;
     * };
     * }
     */
    public static final class Reason {

        // Suppresses default constructor, ensuring non-instantiability.
        private Reason() {}
        static final UnionLayout Reason$union$LAYOUT = MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_POINTER$LAYOUT.withName("LocalizedReasonModule"),
                Constants$root.C_LONG$LAYOUT.withName("LocalizedReasonId"),
                Constants$root.C_LONG$LAYOUT.withName("ReasonStringCount"),
                Constants$root.C_POINTER$LAYOUT.withName("ReasonStrings")
            ).withName("Detailed"),
            Constants$root.C_POINTER$LAYOUT.withName("SimpleReasonString")
        );
        public static MemoryLayout $LAYOUT() {
            return Reason.Reason$union$LAYOUT;
        }
        /**
         * {@snippet :
         * struct {
         *     HMODULE LocalizedReasonModule;
         *     ULONG LocalizedReasonId;
         *     ULONG ReasonStringCount;
         *     LPWSTR* ReasonStrings;
         * };
         * }
         */
        public static final class Detailed {

            // Suppresses default constructor, ensuring non-instantiability.
            private Detailed() {}
            static final StructLayout Reason$Detailed$struct$LAYOUT = MemoryLayout.structLayout(
                Constants$root.C_POINTER$LAYOUT.withName("LocalizedReasonModule"),
                Constants$root.C_LONG$LAYOUT.withName("LocalizedReasonId"),
                Constants$root.C_LONG$LAYOUT.withName("ReasonStringCount"),
                Constants$root.C_POINTER$LAYOUT.withName("ReasonStrings")
            );
            public static MemoryLayout $LAYOUT() {
                return Detailed.Reason$Detailed$struct$LAYOUT;
            }
            static final VarHandle LocalizedReasonModule$VH = Reason$Detailed$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("LocalizedReasonModule"));
            public static VarHandle LocalizedReasonModule$VH() {
                return Detailed.LocalizedReasonModule$VH;
            }
            /**
             * Getter for field:
             * {@snippet :
             * HMODULE LocalizedReasonModule;
             * }
             */
            public static MemorySegment LocalizedReasonModule$get(MemorySegment seg) {
                return (java.lang.foreign.MemorySegment)Detailed.LocalizedReasonModule$VH.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * HMODULE LocalizedReasonModule;
             * }
             */
            public static void LocalizedReasonModule$set(MemorySegment seg, MemorySegment x) {
                Detailed.LocalizedReasonModule$VH.set(seg, x);
            }
            public static MemorySegment LocalizedReasonModule$get(MemorySegment seg, long index) {
                return (java.lang.foreign.MemorySegment)Detailed.LocalizedReasonModule$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void LocalizedReasonModule$set(MemorySegment seg, long index, MemorySegment x) {
                Detailed.LocalizedReasonModule$VH.set(seg.asSlice(index*sizeof()), x);
            }
            static final VarHandle LocalizedReasonId$VH = Reason$Detailed$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("LocalizedReasonId"));
            public static VarHandle LocalizedReasonId$VH() {
                return Detailed.LocalizedReasonId$VH;
            }
            /**
             * Getter for field:
             * {@snippet :
             * ULONG LocalizedReasonId;
             * }
             */
            public static int LocalizedReasonId$get(MemorySegment seg) {
                return (int)Detailed.LocalizedReasonId$VH.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * ULONG LocalizedReasonId;
             * }
             */
            public static void LocalizedReasonId$set(MemorySegment seg, int x) {
                Detailed.LocalizedReasonId$VH.set(seg, x);
            }
            public static int LocalizedReasonId$get(MemorySegment seg, long index) {
                return (int)Detailed.LocalizedReasonId$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void LocalizedReasonId$set(MemorySegment seg, long index, int x) {
                Detailed.LocalizedReasonId$VH.set(seg.asSlice(index*sizeof()), x);
            }
            static final VarHandle ReasonStringCount$VH = Reason$Detailed$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ReasonStringCount"));
            public static VarHandle ReasonStringCount$VH() {
                return Detailed.ReasonStringCount$VH;
            }
            /**
             * Getter for field:
             * {@snippet :
             * ULONG ReasonStringCount;
             * }
             */
            public static int ReasonStringCount$get(MemorySegment seg) {
                return (int)Detailed.ReasonStringCount$VH.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * ULONG ReasonStringCount;
             * }
             */
            public static void ReasonStringCount$set(MemorySegment seg, int x) {
                Detailed.ReasonStringCount$VH.set(seg, x);
            }
            public static int ReasonStringCount$get(MemorySegment seg, long index) {
                return (int)Detailed.ReasonStringCount$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void ReasonStringCount$set(MemorySegment seg, long index, int x) {
                Detailed.ReasonStringCount$VH.set(seg.asSlice(index*sizeof()), x);
            }
            static final VarHandle ReasonStrings$VH = Reason$Detailed$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ReasonStrings"));
            public static VarHandle ReasonStrings$VH() {
                return Detailed.ReasonStrings$VH;
            }
            /**
             * Getter for field:
             * {@snippet :
             * LPWSTR* ReasonStrings;
             * }
             */
            public static MemorySegment ReasonStrings$get(MemorySegment seg) {
                return (java.lang.foreign.MemorySegment)Detailed.ReasonStrings$VH.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * LPWSTR* ReasonStrings;
             * }
             */
            public static void ReasonStrings$set(MemorySegment seg, MemorySegment x) {
                Detailed.ReasonStrings$VH.set(seg, x);
            }
            public static MemorySegment ReasonStrings$get(MemorySegment seg, long index) {
                return (java.lang.foreign.MemorySegment)Detailed.ReasonStrings$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void ReasonStrings$set(MemorySegment seg, long index, MemorySegment x) {
                Detailed.ReasonStrings$VH.set(seg.asSlice(index*sizeof()), x);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
            public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
            }
            public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
        }

        public static MemorySegment Detailed$slice(MemorySegment seg) {
            return seg.asSlice(0, 24);
        }
        static final VarHandle SimpleReasonString$VH = Reason$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SimpleReasonString"));
        public static VarHandle SimpleReasonString$VH() {
            return Reason.SimpleReasonString$VH;
        }
        /**
         * Getter for field:
         * {@snippet :
         * LPWSTR SimpleReasonString;
         * }
         */
        public static MemorySegment SimpleReasonString$get(MemorySegment seg) {
            return (java.lang.foreign.MemorySegment)Reason.SimpleReasonString$VH.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * LPWSTR SimpleReasonString;
         * }
         */
        public static void SimpleReasonString$set(MemorySegment seg, MemorySegment x) {
            Reason.SimpleReasonString$VH.set(seg, x);
        }
        public static MemorySegment SimpleReasonString$get(MemorySegment seg, long index) {
            return (java.lang.foreign.MemorySegment)Reason.SimpleReasonString$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void SimpleReasonString$set(MemorySegment seg, long index, MemorySegment x) {
            Reason.SimpleReasonString$VH.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
    }

    public static MemorySegment Reason$slice(MemorySegment seg) {
        return seg.asSlice(8, 24);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


