// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * int (*PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_INITIALIZE)(int (*pfnFlush)(void*,struct _CRYPTOAPI_BLOB**,unsigned long),void* pContext,unsigned long* pdwExpectedObjectCount,struct _CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE** ppFuncTable,void** ppPluginContext);
 * }
 */
public interface PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_INITIALIZE {

    int apply(java.lang.foreign.MemorySegment pfnFlush, java.lang.foreign.MemorySegment pContext, java.lang.foreign.MemorySegment pdwExpectedObjectCount, java.lang.foreign.MemorySegment ppFuncTable, java.lang.foreign.MemorySegment ppPluginContext);
    static MemorySegment allocate(PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_INITIALIZE fi, SegmentScope scope) {
        return RuntimeHelper.upcallStub(constants$800.PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_INITIALIZE_UP$MH, fi, constants$800.PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_INITIALIZE$FUNC, scope);
    }
    static PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_INITIALIZE ofAddress(MemorySegment addr, SegmentScope scope) {
        MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
        return (java.lang.foreign.MemorySegment _pfnFlush, java.lang.foreign.MemorySegment _pContext, java.lang.foreign.MemorySegment _pdwExpectedObjectCount, java.lang.foreign.MemorySegment _ppFuncTable, java.lang.foreign.MemorySegment _ppPluginContext) -> {
            try {
                return (int)constants$800.PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_INITIALIZE_DOWN$MH.invokeExact(symbol, _pfnFlush, _pContext, _pdwExpectedObjectCount, _ppFuncTable, _ppPluginContext);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


