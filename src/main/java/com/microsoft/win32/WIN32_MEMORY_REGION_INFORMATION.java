// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct WIN32_MEMORY_REGION_INFORMATION {
 *     PVOID AllocationBase;
 *     ULONG AllocationProtect;
 *     union {
 *         ULONG Flags;
 *         struct {
 *              *             ULONG Private;
 *             ULONG MappedDataFile;
 *             ULONG MappedImage;
 *             ULONG MappedPageFile;
 *             ULONG MappedPhysical;
 *             ULONG DirectMapped;
 *             ULONG Reserved;
 *         };
 *     };
 *     SIZE_T RegionSize;
 *     SIZE_T CommitSize;
 * };
 * }
 */
public class WIN32_MEMORY_REGION_INFORMATION {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("AllocationBase"),
        Constants$root.C_LONG$LAYOUT.withName("AllocationProtect"),
        MemoryLayout.unionLayout(
            Constants$root.C_LONG$LAYOUT.withName("Flags"),
            MemoryLayout.structLayout(
                MemoryLayout.paddingLayout(32)
            ).withName("$anon$0")
        ).withName("$anon$0"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("RegionSize"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("CommitSize")
    ).withName("WIN32_MEMORY_REGION_INFORMATION");
    public static MemoryLayout $LAYOUT() {
        return WIN32_MEMORY_REGION_INFORMATION.$struct$LAYOUT;
    }
    static final VarHandle AllocationBase$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AllocationBase"));
    public static VarHandle AllocationBase$VH() {
        return WIN32_MEMORY_REGION_INFORMATION.AllocationBase$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PVOID AllocationBase;
     * }
     */
    public static MemorySegment AllocationBase$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)WIN32_MEMORY_REGION_INFORMATION.AllocationBase$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PVOID AllocationBase;
     * }
     */
    public static void AllocationBase$set(MemorySegment seg, MemorySegment x) {
        WIN32_MEMORY_REGION_INFORMATION.AllocationBase$VH.set(seg, x);
    }
    public static MemorySegment AllocationBase$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)WIN32_MEMORY_REGION_INFORMATION.AllocationBase$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AllocationBase$set(MemorySegment seg, long index, MemorySegment x) {
        WIN32_MEMORY_REGION_INFORMATION.AllocationBase$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle AllocationProtect$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AllocationProtect"));
    public static VarHandle AllocationProtect$VH() {
        return WIN32_MEMORY_REGION_INFORMATION.AllocationProtect$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG AllocationProtect;
     * }
     */
    public static int AllocationProtect$get(MemorySegment seg) {
        return (int)WIN32_MEMORY_REGION_INFORMATION.AllocationProtect$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG AllocationProtect;
     * }
     */
    public static void AllocationProtect$set(MemorySegment seg, int x) {
        WIN32_MEMORY_REGION_INFORMATION.AllocationProtect$VH.set(seg, x);
    }
    public static int AllocationProtect$get(MemorySegment seg, long index) {
        return (int)WIN32_MEMORY_REGION_INFORMATION.AllocationProtect$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AllocationProtect$set(MemorySegment seg, long index, int x) {
        WIN32_MEMORY_REGION_INFORMATION.AllocationProtect$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("Flags"));
    public static VarHandle Flags$VH() {
        return WIN32_MEMORY_REGION_INFORMATION.Flags$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG Flags;
     * }
     */
    public static int Flags$get(MemorySegment seg) {
        return (int)WIN32_MEMORY_REGION_INFORMATION.Flags$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG Flags;
     * }
     */
    public static void Flags$set(MemorySegment seg, int x) {
        WIN32_MEMORY_REGION_INFORMATION.Flags$VH.set(seg, x);
    }
    public static int Flags$get(MemorySegment seg, long index) {
        return (int)WIN32_MEMORY_REGION_INFORMATION.Flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Flags$set(MemorySegment seg, long index, int x) {
        WIN32_MEMORY_REGION_INFORMATION.Flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle RegionSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("RegionSize"));
    public static VarHandle RegionSize$VH() {
        return WIN32_MEMORY_REGION_INFORMATION.RegionSize$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * SIZE_T RegionSize;
     * }
     */
    public static long RegionSize$get(MemorySegment seg) {
        return (long)WIN32_MEMORY_REGION_INFORMATION.RegionSize$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * SIZE_T RegionSize;
     * }
     */
    public static void RegionSize$set(MemorySegment seg, long x) {
        WIN32_MEMORY_REGION_INFORMATION.RegionSize$VH.set(seg, x);
    }
    public static long RegionSize$get(MemorySegment seg, long index) {
        return (long)WIN32_MEMORY_REGION_INFORMATION.RegionSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void RegionSize$set(MemorySegment seg, long index, long x) {
        WIN32_MEMORY_REGION_INFORMATION.RegionSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle CommitSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("CommitSize"));
    public static VarHandle CommitSize$VH() {
        return WIN32_MEMORY_REGION_INFORMATION.CommitSize$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * SIZE_T CommitSize;
     * }
     */
    public static long CommitSize$get(MemorySegment seg) {
        return (long)WIN32_MEMORY_REGION_INFORMATION.CommitSize$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * SIZE_T CommitSize;
     * }
     */
    public static void CommitSize$set(MemorySegment seg, long x) {
        WIN32_MEMORY_REGION_INFORMATION.CommitSize$VH.set(seg, x);
    }
    public static long CommitSize$get(MemorySegment seg, long index) {
        return (long)WIN32_MEMORY_REGION_INFORMATION.CommitSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CommitSize$set(MemorySegment seg, long index, long x) {
        WIN32_MEMORY_REGION_INFORMATION.CommitSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


