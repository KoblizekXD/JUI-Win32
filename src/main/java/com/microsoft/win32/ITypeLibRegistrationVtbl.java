// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct ITypeLibRegistrationVtbl {
 *     HRESULT (*QueryInterface)(ITypeLibRegistration*,const IID*,void**);
 *     ULONG (*AddRef)(ITypeLibRegistration*);
 *     ULONG (*Release)(ITypeLibRegistration*);
 *     HRESULT (*GetGuid)(ITypeLibRegistration*,GUID*);
 *     HRESULT (*GetVersion)(ITypeLibRegistration*,BSTR*);
 *     HRESULT (*GetLcid)(ITypeLibRegistration*,LCID*);
 *     HRESULT (*GetWin32Path)(ITypeLibRegistration*,BSTR*);
 *     HRESULT (*GetWin64Path)(ITypeLibRegistration*,BSTR*);
 *     HRESULT (*GetDisplayName)(ITypeLibRegistration*,BSTR*);
 *     HRESULT (*GetFlags)(ITypeLibRegistration*,DWORD*);
 *     HRESULT (*GetHelpDir)(ITypeLibRegistration*,BSTR*);
 * };
 * }
 */
public class ITypeLibRegistrationVtbl {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("GetGuid"),
        Constants$root.C_POINTER$LAYOUT.withName("GetVersion"),
        Constants$root.C_POINTER$LAYOUT.withName("GetLcid"),
        Constants$root.C_POINTER$LAYOUT.withName("GetWin32Path"),
        Constants$root.C_POINTER$LAYOUT.withName("GetWin64Path"),
        Constants$root.C_POINTER$LAYOUT.withName("GetDisplayName"),
        Constants$root.C_POINTER$LAYOUT.withName("GetFlags"),
        Constants$root.C_POINTER$LAYOUT.withName("GetHelpDir")
    ).withName("ITypeLibRegistrationVtbl");
    public static MemoryLayout $LAYOUT() {
        return ITypeLibRegistrationVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor QueryInterface_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_UP$MH = RuntimeHelper.upcallHandle(QueryInterface.class, "apply", ITypeLibRegistrationVtbl.QueryInterface_UP$FUNC);
    static final FunctionDescriptor QueryInterface_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_DOWN$MH = RuntimeHelper.downcallHandle(
        ITypeLibRegistrationVtbl.QueryInterface_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(ITypeLibRegistration*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ITypeLibRegistrationVtbl.QueryInterface_UP$MH, fi, ITypeLibRegistrationVtbl.QueryInterface$FUNC, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)ITypeLibRegistrationVtbl.QueryInterface_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return ITypeLibRegistrationVtbl.QueryInterface$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(ITypeLibRegistration*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ITypeLibRegistrationVtbl.QueryInterface$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(ITypeLibRegistration*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        ITypeLibRegistrationVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ITypeLibRegistrationVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        ITypeLibRegistrationVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, SegmentScope scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor AddRef_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_UP$MH = RuntimeHelper.upcallHandle(AddRef.class, "apply", ITypeLibRegistrationVtbl.AddRef_UP$FUNC);
    static final FunctionDescriptor AddRef_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_DOWN$MH = RuntimeHelper.downcallHandle(
        ITypeLibRegistrationVtbl.AddRef_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*AddRef)(ITypeLibRegistration*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ITypeLibRegistrationVtbl.AddRef_UP$MH, fi, ITypeLibRegistrationVtbl.AddRef$FUNC, scope);
        }
        static AddRef ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)ITypeLibRegistrationVtbl.AddRef_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return ITypeLibRegistrationVtbl.AddRef$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(ITypeLibRegistration*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ITypeLibRegistrationVtbl.AddRef$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(ITypeLibRegistration*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        ITypeLibRegistrationVtbl.AddRef$VH.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ITypeLibRegistrationVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        ITypeLibRegistrationVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, SegmentScope scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Release_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_UP$MH = RuntimeHelper.upcallHandle(Release.class, "apply", ITypeLibRegistrationVtbl.Release_UP$FUNC);
    static final FunctionDescriptor Release_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_DOWN$MH = RuntimeHelper.downcallHandle(
        ITypeLibRegistrationVtbl.Release_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*Release)(ITypeLibRegistration*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ITypeLibRegistrationVtbl.Release_UP$MH, fi, ITypeLibRegistrationVtbl.Release$FUNC, scope);
        }
        static Release ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)ITypeLibRegistrationVtbl.Release_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return ITypeLibRegistrationVtbl.Release$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(ITypeLibRegistration*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ITypeLibRegistrationVtbl.Release$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(ITypeLibRegistration*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        ITypeLibRegistrationVtbl.Release$VH.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ITypeLibRegistrationVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        ITypeLibRegistrationVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, SegmentScope scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    static final FunctionDescriptor GetGuid$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetGuid_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetGuid_UP$MH = RuntimeHelper.upcallHandle(GetGuid.class, "apply", ITypeLibRegistrationVtbl.GetGuid_UP$FUNC);
    static final FunctionDescriptor GetGuid_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetGuid_DOWN$MH = RuntimeHelper.downcallHandle(
        ITypeLibRegistrationVtbl.GetGuid_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetGuid)(ITypeLibRegistration*,GUID*);
     * }
     */
    public interface GetGuid {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetGuid fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ITypeLibRegistrationVtbl.GetGuid_UP$MH, fi, ITypeLibRegistrationVtbl.GetGuid$FUNC, scope);
        }
        static GetGuid ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)ITypeLibRegistrationVtbl.GetGuid_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetGuid$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetGuid"));
    public static VarHandle GetGuid$VH() {
        return ITypeLibRegistrationVtbl.GetGuid$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetGuid)(ITypeLibRegistration*,GUID*);
     * }
     */
    public static MemorySegment GetGuid$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ITypeLibRegistrationVtbl.GetGuid$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetGuid)(ITypeLibRegistration*,GUID*);
     * }
     */
    public static void GetGuid$set(MemorySegment seg, MemorySegment x) {
        ITypeLibRegistrationVtbl.GetGuid$VH.set(seg, x);
    }
    public static MemorySegment GetGuid$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ITypeLibRegistrationVtbl.GetGuid$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetGuid$set(MemorySegment seg, long index, MemorySegment x) {
        ITypeLibRegistrationVtbl.GetGuid$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetGuid GetGuid(MemorySegment segment, SegmentScope scope) {
        return GetGuid.ofAddress(GetGuid$get(segment), scope);
    }
    static final FunctionDescriptor GetVersion$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetVersion_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetVersion_UP$MH = RuntimeHelper.upcallHandle(GetVersion.class, "apply", ITypeLibRegistrationVtbl.GetVersion_UP$FUNC);
    static final FunctionDescriptor GetVersion_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetVersion_DOWN$MH = RuntimeHelper.downcallHandle(
        ITypeLibRegistrationVtbl.GetVersion_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetVersion)(ITypeLibRegistration*,BSTR*);
     * }
     */
    public interface GetVersion {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetVersion fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ITypeLibRegistrationVtbl.GetVersion_UP$MH, fi, ITypeLibRegistrationVtbl.GetVersion$FUNC, scope);
        }
        static GetVersion ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)ITypeLibRegistrationVtbl.GetVersion_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetVersion$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetVersion"));
    public static VarHandle GetVersion$VH() {
        return ITypeLibRegistrationVtbl.GetVersion$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetVersion)(ITypeLibRegistration*,BSTR*);
     * }
     */
    public static MemorySegment GetVersion$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ITypeLibRegistrationVtbl.GetVersion$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetVersion)(ITypeLibRegistration*,BSTR*);
     * }
     */
    public static void GetVersion$set(MemorySegment seg, MemorySegment x) {
        ITypeLibRegistrationVtbl.GetVersion$VH.set(seg, x);
    }
    public static MemorySegment GetVersion$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ITypeLibRegistrationVtbl.GetVersion$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetVersion$set(MemorySegment seg, long index, MemorySegment x) {
        ITypeLibRegistrationVtbl.GetVersion$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetVersion GetVersion(MemorySegment segment, SegmentScope scope) {
        return GetVersion.ofAddress(GetVersion$get(segment), scope);
    }
    static final FunctionDescriptor GetLcid$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetLcid_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetLcid_UP$MH = RuntimeHelper.upcallHandle(GetLcid.class, "apply", ITypeLibRegistrationVtbl.GetLcid_UP$FUNC);
    static final FunctionDescriptor GetLcid_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetLcid_DOWN$MH = RuntimeHelper.downcallHandle(
        ITypeLibRegistrationVtbl.GetLcid_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetLcid)(ITypeLibRegistration*,LCID*);
     * }
     */
    public interface GetLcid {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetLcid fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ITypeLibRegistrationVtbl.GetLcid_UP$MH, fi, ITypeLibRegistrationVtbl.GetLcid$FUNC, scope);
        }
        static GetLcid ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)ITypeLibRegistrationVtbl.GetLcid_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetLcid$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetLcid"));
    public static VarHandle GetLcid$VH() {
        return ITypeLibRegistrationVtbl.GetLcid$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetLcid)(ITypeLibRegistration*,LCID*);
     * }
     */
    public static MemorySegment GetLcid$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ITypeLibRegistrationVtbl.GetLcid$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetLcid)(ITypeLibRegistration*,LCID*);
     * }
     */
    public static void GetLcid$set(MemorySegment seg, MemorySegment x) {
        ITypeLibRegistrationVtbl.GetLcid$VH.set(seg, x);
    }
    public static MemorySegment GetLcid$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ITypeLibRegistrationVtbl.GetLcid$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetLcid$set(MemorySegment seg, long index, MemorySegment x) {
        ITypeLibRegistrationVtbl.GetLcid$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetLcid GetLcid(MemorySegment segment, SegmentScope scope) {
        return GetLcid.ofAddress(GetLcid$get(segment), scope);
    }
    static final FunctionDescriptor GetWin32Path$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetWin32Path_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetWin32Path_UP$MH = RuntimeHelper.upcallHandle(GetWin32Path.class, "apply", ITypeLibRegistrationVtbl.GetWin32Path_UP$FUNC);
    static final FunctionDescriptor GetWin32Path_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetWin32Path_DOWN$MH = RuntimeHelper.downcallHandle(
        ITypeLibRegistrationVtbl.GetWin32Path_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetWin32Path)(ITypeLibRegistration*,BSTR*);
     * }
     */
    public interface GetWin32Path {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetWin32Path fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ITypeLibRegistrationVtbl.GetWin32Path_UP$MH, fi, ITypeLibRegistrationVtbl.GetWin32Path$FUNC, scope);
        }
        static GetWin32Path ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)ITypeLibRegistrationVtbl.GetWin32Path_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetWin32Path$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetWin32Path"));
    public static VarHandle GetWin32Path$VH() {
        return ITypeLibRegistrationVtbl.GetWin32Path$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetWin32Path)(ITypeLibRegistration*,BSTR*);
     * }
     */
    public static MemorySegment GetWin32Path$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ITypeLibRegistrationVtbl.GetWin32Path$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetWin32Path)(ITypeLibRegistration*,BSTR*);
     * }
     */
    public static void GetWin32Path$set(MemorySegment seg, MemorySegment x) {
        ITypeLibRegistrationVtbl.GetWin32Path$VH.set(seg, x);
    }
    public static MemorySegment GetWin32Path$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ITypeLibRegistrationVtbl.GetWin32Path$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetWin32Path$set(MemorySegment seg, long index, MemorySegment x) {
        ITypeLibRegistrationVtbl.GetWin32Path$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetWin32Path GetWin32Path(MemorySegment segment, SegmentScope scope) {
        return GetWin32Path.ofAddress(GetWin32Path$get(segment), scope);
    }
    static final FunctionDescriptor GetWin64Path$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetWin64Path_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetWin64Path_UP$MH = RuntimeHelper.upcallHandle(GetWin64Path.class, "apply", ITypeLibRegistrationVtbl.GetWin64Path_UP$FUNC);
    static final FunctionDescriptor GetWin64Path_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetWin64Path_DOWN$MH = RuntimeHelper.downcallHandle(
        ITypeLibRegistrationVtbl.GetWin64Path_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetWin64Path)(ITypeLibRegistration*,BSTR*);
     * }
     */
    public interface GetWin64Path {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetWin64Path fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ITypeLibRegistrationVtbl.GetWin64Path_UP$MH, fi, ITypeLibRegistrationVtbl.GetWin64Path$FUNC, scope);
        }
        static GetWin64Path ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)ITypeLibRegistrationVtbl.GetWin64Path_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetWin64Path$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetWin64Path"));
    public static VarHandle GetWin64Path$VH() {
        return ITypeLibRegistrationVtbl.GetWin64Path$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetWin64Path)(ITypeLibRegistration*,BSTR*);
     * }
     */
    public static MemorySegment GetWin64Path$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ITypeLibRegistrationVtbl.GetWin64Path$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetWin64Path)(ITypeLibRegistration*,BSTR*);
     * }
     */
    public static void GetWin64Path$set(MemorySegment seg, MemorySegment x) {
        ITypeLibRegistrationVtbl.GetWin64Path$VH.set(seg, x);
    }
    public static MemorySegment GetWin64Path$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ITypeLibRegistrationVtbl.GetWin64Path$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetWin64Path$set(MemorySegment seg, long index, MemorySegment x) {
        ITypeLibRegistrationVtbl.GetWin64Path$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetWin64Path GetWin64Path(MemorySegment segment, SegmentScope scope) {
        return GetWin64Path.ofAddress(GetWin64Path$get(segment), scope);
    }
    static final FunctionDescriptor GetDisplayName$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetDisplayName_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetDisplayName_UP$MH = RuntimeHelper.upcallHandle(GetDisplayName.class, "apply", ITypeLibRegistrationVtbl.GetDisplayName_UP$FUNC);
    static final FunctionDescriptor GetDisplayName_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetDisplayName_DOWN$MH = RuntimeHelper.downcallHandle(
        ITypeLibRegistrationVtbl.GetDisplayName_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetDisplayName)(ITypeLibRegistration*,BSTR*);
     * }
     */
    public interface GetDisplayName {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetDisplayName fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ITypeLibRegistrationVtbl.GetDisplayName_UP$MH, fi, ITypeLibRegistrationVtbl.GetDisplayName$FUNC, scope);
        }
        static GetDisplayName ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)ITypeLibRegistrationVtbl.GetDisplayName_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetDisplayName$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetDisplayName"));
    public static VarHandle GetDisplayName$VH() {
        return ITypeLibRegistrationVtbl.GetDisplayName$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetDisplayName)(ITypeLibRegistration*,BSTR*);
     * }
     */
    public static MemorySegment GetDisplayName$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ITypeLibRegistrationVtbl.GetDisplayName$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetDisplayName)(ITypeLibRegistration*,BSTR*);
     * }
     */
    public static void GetDisplayName$set(MemorySegment seg, MemorySegment x) {
        ITypeLibRegistrationVtbl.GetDisplayName$VH.set(seg, x);
    }
    public static MemorySegment GetDisplayName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ITypeLibRegistrationVtbl.GetDisplayName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDisplayName$set(MemorySegment seg, long index, MemorySegment x) {
        ITypeLibRegistrationVtbl.GetDisplayName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDisplayName GetDisplayName(MemorySegment segment, SegmentScope scope) {
        return GetDisplayName.ofAddress(GetDisplayName$get(segment), scope);
    }
    static final FunctionDescriptor GetFlags$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetFlags_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetFlags_UP$MH = RuntimeHelper.upcallHandle(GetFlags.class, "apply", ITypeLibRegistrationVtbl.GetFlags_UP$FUNC);
    static final FunctionDescriptor GetFlags_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetFlags_DOWN$MH = RuntimeHelper.downcallHandle(
        ITypeLibRegistrationVtbl.GetFlags_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetFlags)(ITypeLibRegistration*,DWORD*);
     * }
     */
    public interface GetFlags {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetFlags fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ITypeLibRegistrationVtbl.GetFlags_UP$MH, fi, ITypeLibRegistrationVtbl.GetFlags$FUNC, scope);
        }
        static GetFlags ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)ITypeLibRegistrationVtbl.GetFlags_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetFlags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetFlags"));
    public static VarHandle GetFlags$VH() {
        return ITypeLibRegistrationVtbl.GetFlags$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetFlags)(ITypeLibRegistration*,DWORD*);
     * }
     */
    public static MemorySegment GetFlags$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ITypeLibRegistrationVtbl.GetFlags$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetFlags)(ITypeLibRegistration*,DWORD*);
     * }
     */
    public static void GetFlags$set(MemorySegment seg, MemorySegment x) {
        ITypeLibRegistrationVtbl.GetFlags$VH.set(seg, x);
    }
    public static MemorySegment GetFlags$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ITypeLibRegistrationVtbl.GetFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetFlags$set(MemorySegment seg, long index, MemorySegment x) {
        ITypeLibRegistrationVtbl.GetFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetFlags GetFlags(MemorySegment segment, SegmentScope scope) {
        return GetFlags.ofAddress(GetFlags$get(segment), scope);
    }
    static final FunctionDescriptor GetHelpDir$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetHelpDir_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetHelpDir_UP$MH = RuntimeHelper.upcallHandle(GetHelpDir.class, "apply", ITypeLibRegistrationVtbl.GetHelpDir_UP$FUNC);
    static final FunctionDescriptor GetHelpDir_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetHelpDir_DOWN$MH = RuntimeHelper.downcallHandle(
        ITypeLibRegistrationVtbl.GetHelpDir_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetHelpDir)(ITypeLibRegistration*,BSTR*);
     * }
     */
    public interface GetHelpDir {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetHelpDir fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ITypeLibRegistrationVtbl.GetHelpDir_UP$MH, fi, ITypeLibRegistrationVtbl.GetHelpDir$FUNC, scope);
        }
        static GetHelpDir ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)ITypeLibRegistrationVtbl.GetHelpDir_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetHelpDir$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetHelpDir"));
    public static VarHandle GetHelpDir$VH() {
        return ITypeLibRegistrationVtbl.GetHelpDir$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetHelpDir)(ITypeLibRegistration*,BSTR*);
     * }
     */
    public static MemorySegment GetHelpDir$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ITypeLibRegistrationVtbl.GetHelpDir$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetHelpDir)(ITypeLibRegistration*,BSTR*);
     * }
     */
    public static void GetHelpDir$set(MemorySegment seg, MemorySegment x) {
        ITypeLibRegistrationVtbl.GetHelpDir$VH.set(seg, x);
    }
    public static MemorySegment GetHelpDir$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ITypeLibRegistrationVtbl.GetHelpDir$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetHelpDir$set(MemorySegment seg, long index, MemorySegment x) {
        ITypeLibRegistrationVtbl.GetHelpDir$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetHelpDir GetHelpDir(MemorySegment segment, SegmentScope scope) {
        return GetHelpDir.ofAddress(GetHelpDir$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


