// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _NT_TIB64 {
 *     DWORD64 ExceptionList;
 *     DWORD64 StackBase;
 *     DWORD64 StackLimit;
 *     DWORD64 SubSystemTib;
 *     union {
 *         DWORD64 FiberData;
 *         DWORD Version;
 *     };
 *     DWORD64 ArbitraryUserPointer;
 *     DWORD64 Self;
 * };
 * }
 */
public class _NT_TIB64 {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG_LONG$LAYOUT.withName("ExceptionList"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("StackBase"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("StackLimit"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("SubSystemTib"),
        MemoryLayout.unionLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("FiberData"),
            Constants$root.C_LONG$LAYOUT.withName("Version")
        ).withName("$anon$0"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("ArbitraryUserPointer"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("Self")
    ).withName("_NT_TIB64");
    public static MemoryLayout $LAYOUT() {
        return _NT_TIB64.$struct$LAYOUT;
    }
    static final VarHandle ExceptionList$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ExceptionList"));
    public static VarHandle ExceptionList$VH() {
        return _NT_TIB64.ExceptionList$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD64 ExceptionList;
     * }
     */
    public static long ExceptionList$get(MemorySegment seg) {
        return (long)_NT_TIB64.ExceptionList$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD64 ExceptionList;
     * }
     */
    public static void ExceptionList$set(MemorySegment seg, long x) {
        _NT_TIB64.ExceptionList$VH.set(seg, x);
    }
    public static long ExceptionList$get(MemorySegment seg, long index) {
        return (long)_NT_TIB64.ExceptionList$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ExceptionList$set(MemorySegment seg, long index, long x) {
        _NT_TIB64.ExceptionList$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle StackBase$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("StackBase"));
    public static VarHandle StackBase$VH() {
        return _NT_TIB64.StackBase$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD64 StackBase;
     * }
     */
    public static long StackBase$get(MemorySegment seg) {
        return (long)_NT_TIB64.StackBase$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD64 StackBase;
     * }
     */
    public static void StackBase$set(MemorySegment seg, long x) {
        _NT_TIB64.StackBase$VH.set(seg, x);
    }
    public static long StackBase$get(MemorySegment seg, long index) {
        return (long)_NT_TIB64.StackBase$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void StackBase$set(MemorySegment seg, long index, long x) {
        _NT_TIB64.StackBase$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle StackLimit$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("StackLimit"));
    public static VarHandle StackLimit$VH() {
        return _NT_TIB64.StackLimit$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD64 StackLimit;
     * }
     */
    public static long StackLimit$get(MemorySegment seg) {
        return (long)_NT_TIB64.StackLimit$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD64 StackLimit;
     * }
     */
    public static void StackLimit$set(MemorySegment seg, long x) {
        _NT_TIB64.StackLimit$VH.set(seg, x);
    }
    public static long StackLimit$get(MemorySegment seg, long index) {
        return (long)_NT_TIB64.StackLimit$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void StackLimit$set(MemorySegment seg, long index, long x) {
        _NT_TIB64.StackLimit$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle SubSystemTib$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SubSystemTib"));
    public static VarHandle SubSystemTib$VH() {
        return _NT_TIB64.SubSystemTib$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD64 SubSystemTib;
     * }
     */
    public static long SubSystemTib$get(MemorySegment seg) {
        return (long)_NT_TIB64.SubSystemTib$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD64 SubSystemTib;
     * }
     */
    public static void SubSystemTib$set(MemorySegment seg, long x) {
        _NT_TIB64.SubSystemTib$VH.set(seg, x);
    }
    public static long SubSystemTib$get(MemorySegment seg, long index) {
        return (long)_NT_TIB64.SubSystemTib$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SubSystemTib$set(MemorySegment seg, long index, long x) {
        _NT_TIB64.SubSystemTib$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle FiberData$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("FiberData"));
    public static VarHandle FiberData$VH() {
        return _NT_TIB64.FiberData$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD64 FiberData;
     * }
     */
    public static long FiberData$get(MemorySegment seg) {
        return (long)_NT_TIB64.FiberData$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD64 FiberData;
     * }
     */
    public static void FiberData$set(MemorySegment seg, long x) {
        _NT_TIB64.FiberData$VH.set(seg, x);
    }
    public static long FiberData$get(MemorySegment seg, long index) {
        return (long)_NT_TIB64.FiberData$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void FiberData$set(MemorySegment seg, long index, long x) {
        _NT_TIB64.FiberData$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Version$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("Version"));
    public static VarHandle Version$VH() {
        return _NT_TIB64.Version$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Version;
     * }
     */
    public static int Version$get(MemorySegment seg) {
        return (int)_NT_TIB64.Version$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Version;
     * }
     */
    public static void Version$set(MemorySegment seg, int x) {
        _NT_TIB64.Version$VH.set(seg, x);
    }
    public static int Version$get(MemorySegment seg, long index) {
        return (int)_NT_TIB64.Version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Version$set(MemorySegment seg, long index, int x) {
        _NT_TIB64.Version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ArbitraryUserPointer$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ArbitraryUserPointer"));
    public static VarHandle ArbitraryUserPointer$VH() {
        return _NT_TIB64.ArbitraryUserPointer$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD64 ArbitraryUserPointer;
     * }
     */
    public static long ArbitraryUserPointer$get(MemorySegment seg) {
        return (long)_NT_TIB64.ArbitraryUserPointer$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD64 ArbitraryUserPointer;
     * }
     */
    public static void ArbitraryUserPointer$set(MemorySegment seg, long x) {
        _NT_TIB64.ArbitraryUserPointer$VH.set(seg, x);
    }
    public static long ArbitraryUserPointer$get(MemorySegment seg, long index) {
        return (long)_NT_TIB64.ArbitraryUserPointer$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ArbitraryUserPointer$set(MemorySegment seg, long index, long x) {
        _NT_TIB64.ArbitraryUserPointer$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Self$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Self"));
    public static VarHandle Self$VH() {
        return _NT_TIB64.Self$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD64 Self;
     * }
     */
    public static long Self$get(MemorySegment seg) {
        return (long)_NT_TIB64.Self$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD64 Self;
     * }
     */
    public static void Self$set(MemorySegment seg, long x) {
        _NT_TIB64.Self$VH.set(seg, x);
    }
    public static long Self$get(MemorySegment seg, long index) {
        return (long)_NT_TIB64.Self$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Self$set(MemorySegment seg, long index, long x) {
        _NT_TIB64.Self$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


