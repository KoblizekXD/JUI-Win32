// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _REFS_SMR_VOLUME_GC_PARAMETERS {
 *     DWORD Version;
 *     DWORD Flags;
 *     REFS_SMR_VOLUME_GC_ACTION Action;
 *     REFS_SMR_VOLUME_GC_METHOD Method;
 *     DWORD IoGranularity;
 *     DWORD CompressionFormat;
 *     DWORDLONG Unused[8];
 * };
 * }
 */
public class _REFS_SMR_VOLUME_GC_PARAMETERS {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("Version"),
        Constants$root.C_LONG$LAYOUT.withName("Flags"),
        Constants$root.C_LONG$LAYOUT.withName("Action"),
        Constants$root.C_LONG$LAYOUT.withName("Method"),
        Constants$root.C_LONG$LAYOUT.withName("IoGranularity"),
        Constants$root.C_LONG$LAYOUT.withName("CompressionFormat"),
        MemoryLayout.sequenceLayout(8, Constants$root.C_LONG_LONG$LAYOUT).withName("Unused")
    ).withName("_REFS_SMR_VOLUME_GC_PARAMETERS");
    public static MemoryLayout $LAYOUT() {
        return _REFS_SMR_VOLUME_GC_PARAMETERS.$struct$LAYOUT;
    }
    static final VarHandle Version$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Version"));
    public static VarHandle Version$VH() {
        return _REFS_SMR_VOLUME_GC_PARAMETERS.Version$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Version;
     * }
     */
    public static int Version$get(MemorySegment seg) {
        return (int)_REFS_SMR_VOLUME_GC_PARAMETERS.Version$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Version;
     * }
     */
    public static void Version$set(MemorySegment seg, int x) {
        _REFS_SMR_VOLUME_GC_PARAMETERS.Version$VH.set(seg, x);
    }
    public static int Version$get(MemorySegment seg, long index) {
        return (int)_REFS_SMR_VOLUME_GC_PARAMETERS.Version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Version$set(MemorySegment seg, long index, int x) {
        _REFS_SMR_VOLUME_GC_PARAMETERS.Version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Flags"));
    public static VarHandle Flags$VH() {
        return _REFS_SMR_VOLUME_GC_PARAMETERS.Flags$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Flags;
     * }
     */
    public static int Flags$get(MemorySegment seg) {
        return (int)_REFS_SMR_VOLUME_GC_PARAMETERS.Flags$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Flags;
     * }
     */
    public static void Flags$set(MemorySegment seg, int x) {
        _REFS_SMR_VOLUME_GC_PARAMETERS.Flags$VH.set(seg, x);
    }
    public static int Flags$get(MemorySegment seg, long index) {
        return (int)_REFS_SMR_VOLUME_GC_PARAMETERS.Flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Flags$set(MemorySegment seg, long index, int x) {
        _REFS_SMR_VOLUME_GC_PARAMETERS.Flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Action$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Action"));
    public static VarHandle Action$VH() {
        return _REFS_SMR_VOLUME_GC_PARAMETERS.Action$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * REFS_SMR_VOLUME_GC_ACTION Action;
     * }
     */
    public static int Action$get(MemorySegment seg) {
        return (int)_REFS_SMR_VOLUME_GC_PARAMETERS.Action$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * REFS_SMR_VOLUME_GC_ACTION Action;
     * }
     */
    public static void Action$set(MemorySegment seg, int x) {
        _REFS_SMR_VOLUME_GC_PARAMETERS.Action$VH.set(seg, x);
    }
    public static int Action$get(MemorySegment seg, long index) {
        return (int)_REFS_SMR_VOLUME_GC_PARAMETERS.Action$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Action$set(MemorySegment seg, long index, int x) {
        _REFS_SMR_VOLUME_GC_PARAMETERS.Action$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Method$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Method"));
    public static VarHandle Method$VH() {
        return _REFS_SMR_VOLUME_GC_PARAMETERS.Method$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * REFS_SMR_VOLUME_GC_METHOD Method;
     * }
     */
    public static int Method$get(MemorySegment seg) {
        return (int)_REFS_SMR_VOLUME_GC_PARAMETERS.Method$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * REFS_SMR_VOLUME_GC_METHOD Method;
     * }
     */
    public static void Method$set(MemorySegment seg, int x) {
        _REFS_SMR_VOLUME_GC_PARAMETERS.Method$VH.set(seg, x);
    }
    public static int Method$get(MemorySegment seg, long index) {
        return (int)_REFS_SMR_VOLUME_GC_PARAMETERS.Method$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Method$set(MemorySegment seg, long index, int x) {
        _REFS_SMR_VOLUME_GC_PARAMETERS.Method$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle IoGranularity$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("IoGranularity"));
    public static VarHandle IoGranularity$VH() {
        return _REFS_SMR_VOLUME_GC_PARAMETERS.IoGranularity$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD IoGranularity;
     * }
     */
    public static int IoGranularity$get(MemorySegment seg) {
        return (int)_REFS_SMR_VOLUME_GC_PARAMETERS.IoGranularity$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD IoGranularity;
     * }
     */
    public static void IoGranularity$set(MemorySegment seg, int x) {
        _REFS_SMR_VOLUME_GC_PARAMETERS.IoGranularity$VH.set(seg, x);
    }
    public static int IoGranularity$get(MemorySegment seg, long index) {
        return (int)_REFS_SMR_VOLUME_GC_PARAMETERS.IoGranularity$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void IoGranularity$set(MemorySegment seg, long index, int x) {
        _REFS_SMR_VOLUME_GC_PARAMETERS.IoGranularity$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle CompressionFormat$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("CompressionFormat"));
    public static VarHandle CompressionFormat$VH() {
        return _REFS_SMR_VOLUME_GC_PARAMETERS.CompressionFormat$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD CompressionFormat;
     * }
     */
    public static int CompressionFormat$get(MemorySegment seg) {
        return (int)_REFS_SMR_VOLUME_GC_PARAMETERS.CompressionFormat$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD CompressionFormat;
     * }
     */
    public static void CompressionFormat$set(MemorySegment seg, int x) {
        _REFS_SMR_VOLUME_GC_PARAMETERS.CompressionFormat$VH.set(seg, x);
    }
    public static int CompressionFormat$get(MemorySegment seg, long index) {
        return (int)_REFS_SMR_VOLUME_GC_PARAMETERS.CompressionFormat$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CompressionFormat$set(MemorySegment seg, long index, int x) {
        _REFS_SMR_VOLUME_GC_PARAMETERS.CompressionFormat$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Unused$slice(MemorySegment seg) {
        return seg.asSlice(24, 64);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


