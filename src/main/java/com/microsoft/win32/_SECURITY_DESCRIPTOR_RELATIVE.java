// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _SECURITY_DESCRIPTOR_RELATIVE {
 *     BYTE Revision;
 *     BYTE Sbz1;
 *     SECURITY_DESCRIPTOR_CONTROL Control;
 *     DWORD Owner;
 *     DWORD Group;
 *     DWORD Sacl;
 *     DWORD Dacl;
 * };
 * }
 */
public class _SECURITY_DESCRIPTOR_RELATIVE {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_CHAR$LAYOUT.withName("Revision"),
        Constants$root.C_CHAR$LAYOUT.withName("Sbz1"),
        Constants$root.C_SHORT$LAYOUT.withName("Control"),
        Constants$root.C_LONG$LAYOUT.withName("Owner"),
        Constants$root.C_LONG$LAYOUT.withName("Group"),
        Constants$root.C_LONG$LAYOUT.withName("Sacl"),
        Constants$root.C_LONG$LAYOUT.withName("Dacl")
    ).withName("_SECURITY_DESCRIPTOR_RELATIVE");
    public static MemoryLayout $LAYOUT() {
        return _SECURITY_DESCRIPTOR_RELATIVE.$struct$LAYOUT;
    }
    static final VarHandle Revision$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Revision"));
    public static VarHandle Revision$VH() {
        return _SECURITY_DESCRIPTOR_RELATIVE.Revision$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE Revision;
     * }
     */
    public static byte Revision$get(MemorySegment seg) {
        return (byte)_SECURITY_DESCRIPTOR_RELATIVE.Revision$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE Revision;
     * }
     */
    public static void Revision$set(MemorySegment seg, byte x) {
        _SECURITY_DESCRIPTOR_RELATIVE.Revision$VH.set(seg, x);
    }
    public static byte Revision$get(MemorySegment seg, long index) {
        return (byte)_SECURITY_DESCRIPTOR_RELATIVE.Revision$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Revision$set(MemorySegment seg, long index, byte x) {
        _SECURITY_DESCRIPTOR_RELATIVE.Revision$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Sbz1$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Sbz1"));
    public static VarHandle Sbz1$VH() {
        return _SECURITY_DESCRIPTOR_RELATIVE.Sbz1$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE Sbz1;
     * }
     */
    public static byte Sbz1$get(MemorySegment seg) {
        return (byte)_SECURITY_DESCRIPTOR_RELATIVE.Sbz1$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE Sbz1;
     * }
     */
    public static void Sbz1$set(MemorySegment seg, byte x) {
        _SECURITY_DESCRIPTOR_RELATIVE.Sbz1$VH.set(seg, x);
    }
    public static byte Sbz1$get(MemorySegment seg, long index) {
        return (byte)_SECURITY_DESCRIPTOR_RELATIVE.Sbz1$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Sbz1$set(MemorySegment seg, long index, byte x) {
        _SECURITY_DESCRIPTOR_RELATIVE.Sbz1$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Control$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Control"));
    public static VarHandle Control$VH() {
        return _SECURITY_DESCRIPTOR_RELATIVE.Control$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * SECURITY_DESCRIPTOR_CONTROL Control;
     * }
     */
    public static short Control$get(MemorySegment seg) {
        return (short)_SECURITY_DESCRIPTOR_RELATIVE.Control$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * SECURITY_DESCRIPTOR_CONTROL Control;
     * }
     */
    public static void Control$set(MemorySegment seg, short x) {
        _SECURITY_DESCRIPTOR_RELATIVE.Control$VH.set(seg, x);
    }
    public static short Control$get(MemorySegment seg, long index) {
        return (short)_SECURITY_DESCRIPTOR_RELATIVE.Control$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Control$set(MemorySegment seg, long index, short x) {
        _SECURITY_DESCRIPTOR_RELATIVE.Control$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Owner$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Owner"));
    public static VarHandle Owner$VH() {
        return _SECURITY_DESCRIPTOR_RELATIVE.Owner$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Owner;
     * }
     */
    public static int Owner$get(MemorySegment seg) {
        return (int)_SECURITY_DESCRIPTOR_RELATIVE.Owner$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Owner;
     * }
     */
    public static void Owner$set(MemorySegment seg, int x) {
        _SECURITY_DESCRIPTOR_RELATIVE.Owner$VH.set(seg, x);
    }
    public static int Owner$get(MemorySegment seg, long index) {
        return (int)_SECURITY_DESCRIPTOR_RELATIVE.Owner$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Owner$set(MemorySegment seg, long index, int x) {
        _SECURITY_DESCRIPTOR_RELATIVE.Owner$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Group$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Group"));
    public static VarHandle Group$VH() {
        return _SECURITY_DESCRIPTOR_RELATIVE.Group$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Group;
     * }
     */
    public static int Group$get(MemorySegment seg) {
        return (int)_SECURITY_DESCRIPTOR_RELATIVE.Group$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Group;
     * }
     */
    public static void Group$set(MemorySegment seg, int x) {
        _SECURITY_DESCRIPTOR_RELATIVE.Group$VH.set(seg, x);
    }
    public static int Group$get(MemorySegment seg, long index) {
        return (int)_SECURITY_DESCRIPTOR_RELATIVE.Group$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Group$set(MemorySegment seg, long index, int x) {
        _SECURITY_DESCRIPTOR_RELATIVE.Group$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Sacl$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Sacl"));
    public static VarHandle Sacl$VH() {
        return _SECURITY_DESCRIPTOR_RELATIVE.Sacl$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Sacl;
     * }
     */
    public static int Sacl$get(MemorySegment seg) {
        return (int)_SECURITY_DESCRIPTOR_RELATIVE.Sacl$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Sacl;
     * }
     */
    public static void Sacl$set(MemorySegment seg, int x) {
        _SECURITY_DESCRIPTOR_RELATIVE.Sacl$VH.set(seg, x);
    }
    public static int Sacl$get(MemorySegment seg, long index) {
        return (int)_SECURITY_DESCRIPTOR_RELATIVE.Sacl$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Sacl$set(MemorySegment seg, long index, int x) {
        _SECURITY_DESCRIPTOR_RELATIVE.Sacl$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Dacl$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Dacl"));
    public static VarHandle Dacl$VH() {
        return _SECURITY_DESCRIPTOR_RELATIVE.Dacl$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Dacl;
     * }
     */
    public static int Dacl$get(MemorySegment seg) {
        return (int)_SECURITY_DESCRIPTOR_RELATIVE.Dacl$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Dacl;
     * }
     */
    public static void Dacl$set(MemorySegment seg, int x) {
        _SECURITY_DESCRIPTOR_RELATIVE.Dacl$VH.set(seg, x);
    }
    public static int Dacl$get(MemorySegment seg, long index) {
        return (int)_SECURITY_DESCRIPTOR_RELATIVE.Dacl$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Dacl$set(MemorySegment seg, long index, int x) {
        _SECURITY_DESCRIPTOR_RELATIVE.Dacl$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


