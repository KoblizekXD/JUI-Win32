// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IBindCtxVtbl {
 *     HRESULT (*QueryInterface)(IBindCtx*,const IID*,void**);
 *     ULONG (*AddRef)(IBindCtx*);
 *     ULONG (*Release)(IBindCtx*);
 *     HRESULT (*RegisterObjectBound)(IBindCtx*,IUnknown*);
 *     HRESULT (*RevokeObjectBound)(IBindCtx*,IUnknown*);
 *     HRESULT (*ReleaseBoundObjects)(IBindCtx*);
 *     HRESULT (*SetBindOptions)(IBindCtx*,BIND_OPTS*);
 *     HRESULT (*GetBindOptions)(IBindCtx*,BIND_OPTS*);
 *     HRESULT (*GetRunningObjectTable)(IBindCtx*,IRunningObjectTable**);
 *     HRESULT (*RegisterObjectParam)(IBindCtx*,LPOLESTR,IUnknown*);
 *     HRESULT (*GetObjectParam)(IBindCtx*,LPOLESTR,IUnknown**);
 *     HRESULT (*EnumObjectParam)(IBindCtx*,IEnumString**);
 *     HRESULT (*RevokeObjectParam)(IBindCtx*,LPOLESTR);
 * };
 * }
 */
public class IBindCtxVtbl {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("RegisterObjectBound"),
        Constants$root.C_POINTER$LAYOUT.withName("RevokeObjectBound"),
        Constants$root.C_POINTER$LAYOUT.withName("ReleaseBoundObjects"),
        Constants$root.C_POINTER$LAYOUT.withName("SetBindOptions"),
        Constants$root.C_POINTER$LAYOUT.withName("GetBindOptions"),
        Constants$root.C_POINTER$LAYOUT.withName("GetRunningObjectTable"),
        Constants$root.C_POINTER$LAYOUT.withName("RegisterObjectParam"),
        Constants$root.C_POINTER$LAYOUT.withName("GetObjectParam"),
        Constants$root.C_POINTER$LAYOUT.withName("EnumObjectParam"),
        Constants$root.C_POINTER$LAYOUT.withName("RevokeObjectParam")
    ).withName("IBindCtxVtbl");
    public static MemoryLayout $LAYOUT() {
        return IBindCtxVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor QueryInterface_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_UP$MH = RuntimeHelper.upcallHandle(QueryInterface.class, "apply", IBindCtxVtbl.QueryInterface_UP$FUNC);
    static final FunctionDescriptor QueryInterface_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_DOWN$MH = RuntimeHelper.downcallHandle(
        IBindCtxVtbl.QueryInterface_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(IBindCtx*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IBindCtxVtbl.QueryInterface_UP$MH, fi, IBindCtxVtbl.QueryInterface$FUNC, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IBindCtxVtbl.QueryInterface_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return IBindCtxVtbl.QueryInterface$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IBindCtx*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IBindCtxVtbl.QueryInterface$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IBindCtx*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        IBindCtxVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IBindCtxVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        IBindCtxVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, SegmentScope scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor AddRef_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_UP$MH = RuntimeHelper.upcallHandle(AddRef.class, "apply", IBindCtxVtbl.AddRef_UP$FUNC);
    static final FunctionDescriptor AddRef_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_DOWN$MH = RuntimeHelper.downcallHandle(
        IBindCtxVtbl.AddRef_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*AddRef)(IBindCtx*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IBindCtxVtbl.AddRef_UP$MH, fi, IBindCtxVtbl.AddRef$FUNC, scope);
        }
        static AddRef ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IBindCtxVtbl.AddRef_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return IBindCtxVtbl.AddRef$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(IBindCtx*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IBindCtxVtbl.AddRef$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(IBindCtx*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        IBindCtxVtbl.AddRef$VH.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IBindCtxVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        IBindCtxVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, SegmentScope scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Release_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_UP$MH = RuntimeHelper.upcallHandle(Release.class, "apply", IBindCtxVtbl.Release_UP$FUNC);
    static final FunctionDescriptor Release_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_DOWN$MH = RuntimeHelper.downcallHandle(
        IBindCtxVtbl.Release_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*Release)(IBindCtx*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IBindCtxVtbl.Release_UP$MH, fi, IBindCtxVtbl.Release$FUNC, scope);
        }
        static Release ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IBindCtxVtbl.Release_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return IBindCtxVtbl.Release$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(IBindCtx*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IBindCtxVtbl.Release$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(IBindCtx*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        IBindCtxVtbl.Release$VH.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IBindCtxVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        IBindCtxVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, SegmentScope scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    static final FunctionDescriptor RegisterObjectBound$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor RegisterObjectBound_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle RegisterObjectBound_UP$MH = RuntimeHelper.upcallHandle(RegisterObjectBound.class, "apply", IBindCtxVtbl.RegisterObjectBound_UP$FUNC);
    static final FunctionDescriptor RegisterObjectBound_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle RegisterObjectBound_DOWN$MH = RuntimeHelper.downcallHandle(
        IBindCtxVtbl.RegisterObjectBound_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*RegisterObjectBound)(IBindCtx*,IUnknown*);
     * }
     */
    public interface RegisterObjectBound {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(RegisterObjectBound fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IBindCtxVtbl.RegisterObjectBound_UP$MH, fi, IBindCtxVtbl.RegisterObjectBound$FUNC, scope);
        }
        static RegisterObjectBound ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IBindCtxVtbl.RegisterObjectBound_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle RegisterObjectBound$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("RegisterObjectBound"));
    public static VarHandle RegisterObjectBound$VH() {
        return IBindCtxVtbl.RegisterObjectBound$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*RegisterObjectBound)(IBindCtx*,IUnknown*);
     * }
     */
    public static MemorySegment RegisterObjectBound$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IBindCtxVtbl.RegisterObjectBound$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*RegisterObjectBound)(IBindCtx*,IUnknown*);
     * }
     */
    public static void RegisterObjectBound$set(MemorySegment seg, MemorySegment x) {
        IBindCtxVtbl.RegisterObjectBound$VH.set(seg, x);
    }
    public static MemorySegment RegisterObjectBound$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IBindCtxVtbl.RegisterObjectBound$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void RegisterObjectBound$set(MemorySegment seg, long index, MemorySegment x) {
        IBindCtxVtbl.RegisterObjectBound$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static RegisterObjectBound RegisterObjectBound(MemorySegment segment, SegmentScope scope) {
        return RegisterObjectBound.ofAddress(RegisterObjectBound$get(segment), scope);
    }
    static final FunctionDescriptor RevokeObjectBound$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor RevokeObjectBound_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle RevokeObjectBound_UP$MH = RuntimeHelper.upcallHandle(RevokeObjectBound.class, "apply", IBindCtxVtbl.RevokeObjectBound_UP$FUNC);
    static final FunctionDescriptor RevokeObjectBound_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle RevokeObjectBound_DOWN$MH = RuntimeHelper.downcallHandle(
        IBindCtxVtbl.RevokeObjectBound_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*RevokeObjectBound)(IBindCtx*,IUnknown*);
     * }
     */
    public interface RevokeObjectBound {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(RevokeObjectBound fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IBindCtxVtbl.RevokeObjectBound_UP$MH, fi, IBindCtxVtbl.RevokeObjectBound$FUNC, scope);
        }
        static RevokeObjectBound ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IBindCtxVtbl.RevokeObjectBound_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle RevokeObjectBound$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("RevokeObjectBound"));
    public static VarHandle RevokeObjectBound$VH() {
        return IBindCtxVtbl.RevokeObjectBound$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*RevokeObjectBound)(IBindCtx*,IUnknown*);
     * }
     */
    public static MemorySegment RevokeObjectBound$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IBindCtxVtbl.RevokeObjectBound$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*RevokeObjectBound)(IBindCtx*,IUnknown*);
     * }
     */
    public static void RevokeObjectBound$set(MemorySegment seg, MemorySegment x) {
        IBindCtxVtbl.RevokeObjectBound$VH.set(seg, x);
    }
    public static MemorySegment RevokeObjectBound$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IBindCtxVtbl.RevokeObjectBound$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void RevokeObjectBound$set(MemorySegment seg, long index, MemorySegment x) {
        IBindCtxVtbl.RevokeObjectBound$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static RevokeObjectBound RevokeObjectBound(MemorySegment segment, SegmentScope scope) {
        return RevokeObjectBound.ofAddress(RevokeObjectBound$get(segment), scope);
    }
    static final FunctionDescriptor ReleaseBoundObjects$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor ReleaseBoundObjects_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ReleaseBoundObjects_UP$MH = RuntimeHelper.upcallHandle(ReleaseBoundObjects.class, "apply", IBindCtxVtbl.ReleaseBoundObjects_UP$FUNC);
    static final FunctionDescriptor ReleaseBoundObjects_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ReleaseBoundObjects_DOWN$MH = RuntimeHelper.downcallHandle(
        IBindCtxVtbl.ReleaseBoundObjects_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*ReleaseBoundObjects)(IBindCtx*);
     * }
     */
    public interface ReleaseBoundObjects {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(ReleaseBoundObjects fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IBindCtxVtbl.ReleaseBoundObjects_UP$MH, fi, IBindCtxVtbl.ReleaseBoundObjects$FUNC, scope);
        }
        static ReleaseBoundObjects ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IBindCtxVtbl.ReleaseBoundObjects_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ReleaseBoundObjects$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ReleaseBoundObjects"));
    public static VarHandle ReleaseBoundObjects$VH() {
        return IBindCtxVtbl.ReleaseBoundObjects$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*ReleaseBoundObjects)(IBindCtx*);
     * }
     */
    public static MemorySegment ReleaseBoundObjects$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IBindCtxVtbl.ReleaseBoundObjects$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*ReleaseBoundObjects)(IBindCtx*);
     * }
     */
    public static void ReleaseBoundObjects$set(MemorySegment seg, MemorySegment x) {
        IBindCtxVtbl.ReleaseBoundObjects$VH.set(seg, x);
    }
    public static MemorySegment ReleaseBoundObjects$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IBindCtxVtbl.ReleaseBoundObjects$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ReleaseBoundObjects$set(MemorySegment seg, long index, MemorySegment x) {
        IBindCtxVtbl.ReleaseBoundObjects$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ReleaseBoundObjects ReleaseBoundObjects(MemorySegment segment, SegmentScope scope) {
        return ReleaseBoundObjects.ofAddress(ReleaseBoundObjects$get(segment), scope);
    }
    static final FunctionDescriptor SetBindOptions$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor SetBindOptions_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetBindOptions_UP$MH = RuntimeHelper.upcallHandle(SetBindOptions.class, "apply", IBindCtxVtbl.SetBindOptions_UP$FUNC);
    static final FunctionDescriptor SetBindOptions_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetBindOptions_DOWN$MH = RuntimeHelper.downcallHandle(
        IBindCtxVtbl.SetBindOptions_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetBindOptions)(IBindCtx*,BIND_OPTS*);
     * }
     */
    public interface SetBindOptions {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(SetBindOptions fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IBindCtxVtbl.SetBindOptions_UP$MH, fi, IBindCtxVtbl.SetBindOptions$FUNC, scope);
        }
        static SetBindOptions ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IBindCtxVtbl.SetBindOptions_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetBindOptions$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetBindOptions"));
    public static VarHandle SetBindOptions$VH() {
        return IBindCtxVtbl.SetBindOptions$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetBindOptions)(IBindCtx*,BIND_OPTS*);
     * }
     */
    public static MemorySegment SetBindOptions$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IBindCtxVtbl.SetBindOptions$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetBindOptions)(IBindCtx*,BIND_OPTS*);
     * }
     */
    public static void SetBindOptions$set(MemorySegment seg, MemorySegment x) {
        IBindCtxVtbl.SetBindOptions$VH.set(seg, x);
    }
    public static MemorySegment SetBindOptions$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IBindCtxVtbl.SetBindOptions$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetBindOptions$set(MemorySegment seg, long index, MemorySegment x) {
        IBindCtxVtbl.SetBindOptions$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetBindOptions SetBindOptions(MemorySegment segment, SegmentScope scope) {
        return SetBindOptions.ofAddress(SetBindOptions$get(segment), scope);
    }
    static final FunctionDescriptor GetBindOptions$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetBindOptions_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetBindOptions_UP$MH = RuntimeHelper.upcallHandle(GetBindOptions.class, "apply", IBindCtxVtbl.GetBindOptions_UP$FUNC);
    static final FunctionDescriptor GetBindOptions_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetBindOptions_DOWN$MH = RuntimeHelper.downcallHandle(
        IBindCtxVtbl.GetBindOptions_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetBindOptions)(IBindCtx*,BIND_OPTS*);
     * }
     */
    public interface GetBindOptions {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetBindOptions fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IBindCtxVtbl.GetBindOptions_UP$MH, fi, IBindCtxVtbl.GetBindOptions$FUNC, scope);
        }
        static GetBindOptions ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IBindCtxVtbl.GetBindOptions_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetBindOptions$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetBindOptions"));
    public static VarHandle GetBindOptions$VH() {
        return IBindCtxVtbl.GetBindOptions$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetBindOptions)(IBindCtx*,BIND_OPTS*);
     * }
     */
    public static MemorySegment GetBindOptions$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IBindCtxVtbl.GetBindOptions$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetBindOptions)(IBindCtx*,BIND_OPTS*);
     * }
     */
    public static void GetBindOptions$set(MemorySegment seg, MemorySegment x) {
        IBindCtxVtbl.GetBindOptions$VH.set(seg, x);
    }
    public static MemorySegment GetBindOptions$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IBindCtxVtbl.GetBindOptions$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetBindOptions$set(MemorySegment seg, long index, MemorySegment x) {
        IBindCtxVtbl.GetBindOptions$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetBindOptions GetBindOptions(MemorySegment segment, SegmentScope scope) {
        return GetBindOptions.ofAddress(GetBindOptions$get(segment), scope);
    }
    static final FunctionDescriptor GetRunningObjectTable$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetRunningObjectTable_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetRunningObjectTable_UP$MH = RuntimeHelper.upcallHandle(GetRunningObjectTable.class, "apply", IBindCtxVtbl.GetRunningObjectTable_UP$FUNC);
    static final FunctionDescriptor GetRunningObjectTable_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetRunningObjectTable_DOWN$MH = RuntimeHelper.downcallHandle(
        IBindCtxVtbl.GetRunningObjectTable_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetRunningObjectTable)(IBindCtx*,IRunningObjectTable**);
     * }
     */
    public interface GetRunningObjectTable {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetRunningObjectTable fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IBindCtxVtbl.GetRunningObjectTable_UP$MH, fi, IBindCtxVtbl.GetRunningObjectTable$FUNC, scope);
        }
        static GetRunningObjectTable ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IBindCtxVtbl.GetRunningObjectTable_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetRunningObjectTable$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetRunningObjectTable"));
    public static VarHandle GetRunningObjectTable$VH() {
        return IBindCtxVtbl.GetRunningObjectTable$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetRunningObjectTable)(IBindCtx*,IRunningObjectTable**);
     * }
     */
    public static MemorySegment GetRunningObjectTable$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IBindCtxVtbl.GetRunningObjectTable$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetRunningObjectTable)(IBindCtx*,IRunningObjectTable**);
     * }
     */
    public static void GetRunningObjectTable$set(MemorySegment seg, MemorySegment x) {
        IBindCtxVtbl.GetRunningObjectTable$VH.set(seg, x);
    }
    public static MemorySegment GetRunningObjectTable$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IBindCtxVtbl.GetRunningObjectTable$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetRunningObjectTable$set(MemorySegment seg, long index, MemorySegment x) {
        IBindCtxVtbl.GetRunningObjectTable$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetRunningObjectTable GetRunningObjectTable(MemorySegment segment, SegmentScope scope) {
        return GetRunningObjectTable.ofAddress(GetRunningObjectTable$get(segment), scope);
    }
    static final FunctionDescriptor RegisterObjectParam$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor RegisterObjectParam_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle RegisterObjectParam_UP$MH = RuntimeHelper.upcallHandle(RegisterObjectParam.class, "apply", IBindCtxVtbl.RegisterObjectParam_UP$FUNC);
    static final FunctionDescriptor RegisterObjectParam_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle RegisterObjectParam_DOWN$MH = RuntimeHelper.downcallHandle(
        IBindCtxVtbl.RegisterObjectParam_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*RegisterObjectParam)(IBindCtx*,LPOLESTR,IUnknown*);
     * }
     */
    public interface RegisterObjectParam {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(RegisterObjectParam fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IBindCtxVtbl.RegisterObjectParam_UP$MH, fi, IBindCtxVtbl.RegisterObjectParam$FUNC, scope);
        }
        static RegisterObjectParam ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IBindCtxVtbl.RegisterObjectParam_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle RegisterObjectParam$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("RegisterObjectParam"));
    public static VarHandle RegisterObjectParam$VH() {
        return IBindCtxVtbl.RegisterObjectParam$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*RegisterObjectParam)(IBindCtx*,LPOLESTR,IUnknown*);
     * }
     */
    public static MemorySegment RegisterObjectParam$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IBindCtxVtbl.RegisterObjectParam$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*RegisterObjectParam)(IBindCtx*,LPOLESTR,IUnknown*);
     * }
     */
    public static void RegisterObjectParam$set(MemorySegment seg, MemorySegment x) {
        IBindCtxVtbl.RegisterObjectParam$VH.set(seg, x);
    }
    public static MemorySegment RegisterObjectParam$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IBindCtxVtbl.RegisterObjectParam$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void RegisterObjectParam$set(MemorySegment seg, long index, MemorySegment x) {
        IBindCtxVtbl.RegisterObjectParam$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static RegisterObjectParam RegisterObjectParam(MemorySegment segment, SegmentScope scope) {
        return RegisterObjectParam.ofAddress(RegisterObjectParam$get(segment), scope);
    }
    static final FunctionDescriptor GetObjectParam$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetObjectParam_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetObjectParam_UP$MH = RuntimeHelper.upcallHandle(GetObjectParam.class, "apply", IBindCtxVtbl.GetObjectParam_UP$FUNC);
    static final FunctionDescriptor GetObjectParam_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetObjectParam_DOWN$MH = RuntimeHelper.downcallHandle(
        IBindCtxVtbl.GetObjectParam_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetObjectParam)(IBindCtx*,LPOLESTR,IUnknown**);
     * }
     */
    public interface GetObjectParam {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetObjectParam fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IBindCtxVtbl.GetObjectParam_UP$MH, fi, IBindCtxVtbl.GetObjectParam$FUNC, scope);
        }
        static GetObjectParam ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IBindCtxVtbl.GetObjectParam_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetObjectParam$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetObjectParam"));
    public static VarHandle GetObjectParam$VH() {
        return IBindCtxVtbl.GetObjectParam$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetObjectParam)(IBindCtx*,LPOLESTR,IUnknown**);
     * }
     */
    public static MemorySegment GetObjectParam$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IBindCtxVtbl.GetObjectParam$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetObjectParam)(IBindCtx*,LPOLESTR,IUnknown**);
     * }
     */
    public static void GetObjectParam$set(MemorySegment seg, MemorySegment x) {
        IBindCtxVtbl.GetObjectParam$VH.set(seg, x);
    }
    public static MemorySegment GetObjectParam$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IBindCtxVtbl.GetObjectParam$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetObjectParam$set(MemorySegment seg, long index, MemorySegment x) {
        IBindCtxVtbl.GetObjectParam$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetObjectParam GetObjectParam(MemorySegment segment, SegmentScope scope) {
        return GetObjectParam.ofAddress(GetObjectParam$get(segment), scope);
    }
    static final FunctionDescriptor EnumObjectParam$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor EnumObjectParam_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle EnumObjectParam_UP$MH = RuntimeHelper.upcallHandle(EnumObjectParam.class, "apply", IBindCtxVtbl.EnumObjectParam_UP$FUNC);
    static final FunctionDescriptor EnumObjectParam_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle EnumObjectParam_DOWN$MH = RuntimeHelper.downcallHandle(
        IBindCtxVtbl.EnumObjectParam_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*EnumObjectParam)(IBindCtx*,IEnumString**);
     * }
     */
    public interface EnumObjectParam {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(EnumObjectParam fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IBindCtxVtbl.EnumObjectParam_UP$MH, fi, IBindCtxVtbl.EnumObjectParam$FUNC, scope);
        }
        static EnumObjectParam ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IBindCtxVtbl.EnumObjectParam_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle EnumObjectParam$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("EnumObjectParam"));
    public static VarHandle EnumObjectParam$VH() {
        return IBindCtxVtbl.EnumObjectParam$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*EnumObjectParam)(IBindCtx*,IEnumString**);
     * }
     */
    public static MemorySegment EnumObjectParam$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IBindCtxVtbl.EnumObjectParam$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*EnumObjectParam)(IBindCtx*,IEnumString**);
     * }
     */
    public static void EnumObjectParam$set(MemorySegment seg, MemorySegment x) {
        IBindCtxVtbl.EnumObjectParam$VH.set(seg, x);
    }
    public static MemorySegment EnumObjectParam$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IBindCtxVtbl.EnumObjectParam$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void EnumObjectParam$set(MemorySegment seg, long index, MemorySegment x) {
        IBindCtxVtbl.EnumObjectParam$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static EnumObjectParam EnumObjectParam(MemorySegment segment, SegmentScope scope) {
        return EnumObjectParam.ofAddress(EnumObjectParam$get(segment), scope);
    }
    static final FunctionDescriptor RevokeObjectParam$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor RevokeObjectParam_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle RevokeObjectParam_UP$MH = RuntimeHelper.upcallHandle(RevokeObjectParam.class, "apply", IBindCtxVtbl.RevokeObjectParam_UP$FUNC);
    static final FunctionDescriptor RevokeObjectParam_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle RevokeObjectParam_DOWN$MH = RuntimeHelper.downcallHandle(
        IBindCtxVtbl.RevokeObjectParam_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*RevokeObjectParam)(IBindCtx*,LPOLESTR);
     * }
     */
    public interface RevokeObjectParam {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(RevokeObjectParam fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IBindCtxVtbl.RevokeObjectParam_UP$MH, fi, IBindCtxVtbl.RevokeObjectParam$FUNC, scope);
        }
        static RevokeObjectParam ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IBindCtxVtbl.RevokeObjectParam_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle RevokeObjectParam$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("RevokeObjectParam"));
    public static VarHandle RevokeObjectParam$VH() {
        return IBindCtxVtbl.RevokeObjectParam$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*RevokeObjectParam)(IBindCtx*,LPOLESTR);
     * }
     */
    public static MemorySegment RevokeObjectParam$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IBindCtxVtbl.RevokeObjectParam$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*RevokeObjectParam)(IBindCtx*,LPOLESTR);
     * }
     */
    public static void RevokeObjectParam$set(MemorySegment seg, MemorySegment x) {
        IBindCtxVtbl.RevokeObjectParam$VH.set(seg, x);
    }
    public static MemorySegment RevokeObjectParam$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IBindCtxVtbl.RevokeObjectParam$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void RevokeObjectParam$set(MemorySegment seg, long index, MemorySegment x) {
        IBindCtxVtbl.RevokeObjectParam$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static RevokeObjectParam RevokeObjectParam(MemorySegment segment, SegmentScope scope) {
        return RevokeObjectParam.ofAddress(RevokeObjectParam$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


