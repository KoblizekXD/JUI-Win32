// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct tagMONMSGSTRUCT {
 *     UINT cb;
 *     HWND hwndTo;
 *     DWORD dwTime;
 *     HANDLE hTask;
 *     UINT wMsg;
 *     WPARAM wParam;
 *     LPARAM lParam;
 *     DDEML_MSG_HOOK_DATA dmhd;
 * };
 * }
 */
public class tagMONMSGSTRUCT {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("cb"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("hwndTo"),
        Constants$root.C_LONG$LAYOUT.withName("dwTime"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("hTask"),
        Constants$root.C_LONG$LAYOUT.withName("wMsg"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_LONG_LONG$LAYOUT.withName("wParam"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("lParam"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("uiLo"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("uiHi"),
            Constants$root.C_LONG$LAYOUT.withName("cbData"),
            MemoryLayout.sequenceLayout(8, Constants$root.C_LONG$LAYOUT).withName("Data"),
            MemoryLayout.paddingLayout(32)
        ).withName("dmhd")
    ).withName("tagMONMSGSTRUCT");
    public static MemoryLayout $LAYOUT() {
        return tagMONMSGSTRUCT.$struct$LAYOUT;
    }
    static final VarHandle cb$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cb"));
    public static VarHandle cb$VH() {
        return tagMONMSGSTRUCT.cb$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * UINT cb;
     * }
     */
    public static int cb$get(MemorySegment seg) {
        return (int)tagMONMSGSTRUCT.cb$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * UINT cb;
     * }
     */
    public static void cb$set(MemorySegment seg, int x) {
        tagMONMSGSTRUCT.cb$VH.set(seg, x);
    }
    public static int cb$get(MemorySegment seg, long index) {
        return (int)tagMONMSGSTRUCT.cb$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cb$set(MemorySegment seg, long index, int x) {
        tagMONMSGSTRUCT.cb$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hwndTo$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hwndTo"));
    public static VarHandle hwndTo$VH() {
        return tagMONMSGSTRUCT.hwndTo$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HWND hwndTo;
     * }
     */
    public static MemorySegment hwndTo$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)tagMONMSGSTRUCT.hwndTo$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HWND hwndTo;
     * }
     */
    public static void hwndTo$set(MemorySegment seg, MemorySegment x) {
        tagMONMSGSTRUCT.hwndTo$VH.set(seg, x);
    }
    public static MemorySegment hwndTo$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)tagMONMSGSTRUCT.hwndTo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hwndTo$set(MemorySegment seg, long index, MemorySegment x) {
        tagMONMSGSTRUCT.hwndTo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwTime$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwTime"));
    public static VarHandle dwTime$VH() {
        return tagMONMSGSTRUCT.dwTime$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwTime;
     * }
     */
    public static int dwTime$get(MemorySegment seg) {
        return (int)tagMONMSGSTRUCT.dwTime$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwTime;
     * }
     */
    public static void dwTime$set(MemorySegment seg, int x) {
        tagMONMSGSTRUCT.dwTime$VH.set(seg, x);
    }
    public static int dwTime$get(MemorySegment seg, long index) {
        return (int)tagMONMSGSTRUCT.dwTime$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwTime$set(MemorySegment seg, long index, int x) {
        tagMONMSGSTRUCT.dwTime$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hTask$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hTask"));
    public static VarHandle hTask$VH() {
        return tagMONMSGSTRUCT.hTask$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HANDLE hTask;
     * }
     */
    public static MemorySegment hTask$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)tagMONMSGSTRUCT.hTask$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HANDLE hTask;
     * }
     */
    public static void hTask$set(MemorySegment seg, MemorySegment x) {
        tagMONMSGSTRUCT.hTask$VH.set(seg, x);
    }
    public static MemorySegment hTask$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)tagMONMSGSTRUCT.hTask$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hTask$set(MemorySegment seg, long index, MemorySegment x) {
        tagMONMSGSTRUCT.hTask$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle wMsg$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("wMsg"));
    public static VarHandle wMsg$VH() {
        return tagMONMSGSTRUCT.wMsg$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * UINT wMsg;
     * }
     */
    public static int wMsg$get(MemorySegment seg) {
        return (int)tagMONMSGSTRUCT.wMsg$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * UINT wMsg;
     * }
     */
    public static void wMsg$set(MemorySegment seg, int x) {
        tagMONMSGSTRUCT.wMsg$VH.set(seg, x);
    }
    public static int wMsg$get(MemorySegment seg, long index) {
        return (int)tagMONMSGSTRUCT.wMsg$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void wMsg$set(MemorySegment seg, long index, int x) {
        tagMONMSGSTRUCT.wMsg$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle wParam$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("wParam"));
    public static VarHandle wParam$VH() {
        return tagMONMSGSTRUCT.wParam$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WPARAM wParam;
     * }
     */
    public static long wParam$get(MemorySegment seg) {
        return (long)tagMONMSGSTRUCT.wParam$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WPARAM wParam;
     * }
     */
    public static void wParam$set(MemorySegment seg, long x) {
        tagMONMSGSTRUCT.wParam$VH.set(seg, x);
    }
    public static long wParam$get(MemorySegment seg, long index) {
        return (long)tagMONMSGSTRUCT.wParam$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void wParam$set(MemorySegment seg, long index, long x) {
        tagMONMSGSTRUCT.wParam$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lParam$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lParam"));
    public static VarHandle lParam$VH() {
        return tagMONMSGSTRUCT.lParam$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPARAM lParam;
     * }
     */
    public static long lParam$get(MemorySegment seg) {
        return (long)tagMONMSGSTRUCT.lParam$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPARAM lParam;
     * }
     */
    public static void lParam$set(MemorySegment seg, long x) {
        tagMONMSGSTRUCT.lParam$VH.set(seg, x);
    }
    public static long lParam$get(MemorySegment seg, long index) {
        return (long)tagMONMSGSTRUCT.lParam$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lParam$set(MemorySegment seg, long index, long x) {
        tagMONMSGSTRUCT.lParam$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment dmhd$slice(MemorySegment seg) {
        return seg.asSlice(56, 56);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


