// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _SCM_BUS_DEDICATED_MEMORY_DEVICE_INFO {
 *     GUID DeviceGuid;
 *     DWORD DeviceNumber;
 *     struct  Flags;
 *     DWORDLONG DeviceSize;
 * };
 * }
 */
public class _SCM_BUS_DEDICATED_MEMORY_DEVICE_INFO {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("Data1"),
            Constants$root.C_SHORT$LAYOUT.withName("Data2"),
            Constants$root.C_SHORT$LAYOUT.withName("Data3"),
            MemoryLayout.sequenceLayout(8, Constants$root.C_CHAR$LAYOUT).withName("Data4")
        ).withName("DeviceGuid"),
        Constants$root.C_LONG$LAYOUT.withName("DeviceNumber"),
        MemoryLayout.structLayout(
            MemoryLayout.paddingLayout(32)
        ).withName("Flags"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("DeviceSize")
    ).withName("_SCM_BUS_DEDICATED_MEMORY_DEVICE_INFO");
    public static MemoryLayout $LAYOUT() {
        return _SCM_BUS_DEDICATED_MEMORY_DEVICE_INFO.$struct$LAYOUT;
    }
    public static MemorySegment DeviceGuid$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    static final VarHandle DeviceNumber$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("DeviceNumber"));
    public static VarHandle DeviceNumber$VH() {
        return _SCM_BUS_DEDICATED_MEMORY_DEVICE_INFO.DeviceNumber$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD DeviceNumber;
     * }
     */
    public static int DeviceNumber$get(MemorySegment seg) {
        return (int)_SCM_BUS_DEDICATED_MEMORY_DEVICE_INFO.DeviceNumber$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD DeviceNumber;
     * }
     */
    public static void DeviceNumber$set(MemorySegment seg, int x) {
        _SCM_BUS_DEDICATED_MEMORY_DEVICE_INFO.DeviceNumber$VH.set(seg, x);
    }
    public static int DeviceNumber$get(MemorySegment seg, long index) {
        return (int)_SCM_BUS_DEDICATED_MEMORY_DEVICE_INFO.DeviceNumber$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DeviceNumber$set(MemorySegment seg, long index, int x) {
        _SCM_BUS_DEDICATED_MEMORY_DEVICE_INFO.DeviceNumber$VH.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
     * struct {
     *          *     DWORD ForcedByRegistry;
     *     DWORD Initialized;
     *     DWORD Reserved;
     * };
     * }
     */
    public static final class Flags {

        // Suppresses default constructor, ensuring non-instantiability.
        private Flags() {}
        static final StructLayout Flags$struct$LAYOUT = MemoryLayout.structLayout(
            MemoryLayout.paddingLayout(32)
        );
        public static MemoryLayout $LAYOUT() {
            return Flags.Flags$struct$LAYOUT;
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
    }

    public static MemorySegment Flags$slice(MemorySegment seg) {
        return seg.asSlice(20, 4);
    }
    static final VarHandle DeviceSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("DeviceSize"));
    public static VarHandle DeviceSize$VH() {
        return _SCM_BUS_DEDICATED_MEMORY_DEVICE_INFO.DeviceSize$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORDLONG DeviceSize;
     * }
     */
    public static long DeviceSize$get(MemorySegment seg) {
        return (long)_SCM_BUS_DEDICATED_MEMORY_DEVICE_INFO.DeviceSize$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORDLONG DeviceSize;
     * }
     */
    public static void DeviceSize$set(MemorySegment seg, long x) {
        _SCM_BUS_DEDICATED_MEMORY_DEVICE_INFO.DeviceSize$VH.set(seg, x);
    }
    public static long DeviceSize$get(MemorySegment seg, long index) {
        return (long)_SCM_BUS_DEDICATED_MEMORY_DEVICE_INFO.DeviceSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DeviceSize$set(MemorySegment seg, long index, long x) {
        _SCM_BUS_DEDICATED_MEMORY_DEVICE_INFO.DeviceSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


