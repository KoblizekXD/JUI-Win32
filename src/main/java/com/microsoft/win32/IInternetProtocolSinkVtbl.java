// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IInternetProtocolSinkVtbl {
 *     HRESULT (*QueryInterface)(IInternetProtocolSink*,const IID*,void**);
 *     ULONG (*AddRef)(IInternetProtocolSink*);
 *     ULONG (*Release)(IInternetProtocolSink*);
 *     HRESULT (*Switch)(IInternetProtocolSink*,PROTOCOLDATA*);
 *     HRESULT (*ReportProgress)(IInternetProtocolSink*,ULONG,LPCWSTR);
 *     HRESULT (*ReportData)(IInternetProtocolSink*,DWORD,ULONG,ULONG);
 *     HRESULT (*ReportResult)(IInternetProtocolSink*,HRESULT,DWORD,LPCWSTR);
 * };
 * }
 */
public class IInternetProtocolSinkVtbl {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("Switch"),
        Constants$root.C_POINTER$LAYOUT.withName("ReportProgress"),
        Constants$root.C_POINTER$LAYOUT.withName("ReportData"),
        Constants$root.C_POINTER$LAYOUT.withName("ReportResult")
    ).withName("IInternetProtocolSinkVtbl");
    public static MemoryLayout $LAYOUT() {
        return IInternetProtocolSinkVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor QueryInterface_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_UP$MH = RuntimeHelper.upcallHandle(QueryInterface.class, "apply", IInternetProtocolSinkVtbl.QueryInterface_UP$FUNC);
    static final FunctionDescriptor QueryInterface_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_DOWN$MH = RuntimeHelper.downcallHandle(
        IInternetProtocolSinkVtbl.QueryInterface_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(IInternetProtocolSink*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IInternetProtocolSinkVtbl.QueryInterface_UP$MH, fi, IInternetProtocolSinkVtbl.QueryInterface$FUNC, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IInternetProtocolSinkVtbl.QueryInterface_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return IInternetProtocolSinkVtbl.QueryInterface$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IInternetProtocolSink*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IInternetProtocolSinkVtbl.QueryInterface$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IInternetProtocolSink*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        IInternetProtocolSinkVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IInternetProtocolSinkVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        IInternetProtocolSinkVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, SegmentScope scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor AddRef_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_UP$MH = RuntimeHelper.upcallHandle(AddRef.class, "apply", IInternetProtocolSinkVtbl.AddRef_UP$FUNC);
    static final FunctionDescriptor AddRef_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_DOWN$MH = RuntimeHelper.downcallHandle(
        IInternetProtocolSinkVtbl.AddRef_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*AddRef)(IInternetProtocolSink*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IInternetProtocolSinkVtbl.AddRef_UP$MH, fi, IInternetProtocolSinkVtbl.AddRef$FUNC, scope);
        }
        static AddRef ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IInternetProtocolSinkVtbl.AddRef_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return IInternetProtocolSinkVtbl.AddRef$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(IInternetProtocolSink*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IInternetProtocolSinkVtbl.AddRef$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(IInternetProtocolSink*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        IInternetProtocolSinkVtbl.AddRef$VH.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IInternetProtocolSinkVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        IInternetProtocolSinkVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, SegmentScope scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Release_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_UP$MH = RuntimeHelper.upcallHandle(Release.class, "apply", IInternetProtocolSinkVtbl.Release_UP$FUNC);
    static final FunctionDescriptor Release_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_DOWN$MH = RuntimeHelper.downcallHandle(
        IInternetProtocolSinkVtbl.Release_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*Release)(IInternetProtocolSink*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IInternetProtocolSinkVtbl.Release_UP$MH, fi, IInternetProtocolSinkVtbl.Release$FUNC, scope);
        }
        static Release ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IInternetProtocolSinkVtbl.Release_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return IInternetProtocolSinkVtbl.Release$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(IInternetProtocolSink*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IInternetProtocolSinkVtbl.Release$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(IInternetProtocolSink*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        IInternetProtocolSinkVtbl.Release$VH.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IInternetProtocolSinkVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        IInternetProtocolSinkVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, SegmentScope scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    static final FunctionDescriptor Switch$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Switch_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Switch_UP$MH = RuntimeHelper.upcallHandle(Switch.class, "apply", IInternetProtocolSinkVtbl.Switch_UP$FUNC);
    static final FunctionDescriptor Switch_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Switch_DOWN$MH = RuntimeHelper.downcallHandle(
        IInternetProtocolSinkVtbl.Switch_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*Switch)(IInternetProtocolSink*,PROTOCOLDATA*);
     * }
     */
    public interface Switch {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(Switch fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IInternetProtocolSinkVtbl.Switch_UP$MH, fi, IInternetProtocolSinkVtbl.Switch$FUNC, scope);
        }
        static Switch ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IInternetProtocolSinkVtbl.Switch_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Switch$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Switch"));
    public static VarHandle Switch$VH() {
        return IInternetProtocolSinkVtbl.Switch$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Switch)(IInternetProtocolSink*,PROTOCOLDATA*);
     * }
     */
    public static MemorySegment Switch$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IInternetProtocolSinkVtbl.Switch$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Switch)(IInternetProtocolSink*,PROTOCOLDATA*);
     * }
     */
    public static void Switch$set(MemorySegment seg, MemorySegment x) {
        IInternetProtocolSinkVtbl.Switch$VH.set(seg, x);
    }
    public static MemorySegment Switch$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IInternetProtocolSinkVtbl.Switch$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Switch$set(MemorySegment seg, long index, MemorySegment x) {
        IInternetProtocolSinkVtbl.Switch$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Switch Switch(MemorySegment segment, SegmentScope scope) {
        return Switch.ofAddress(Switch$get(segment), scope);
    }
    static final FunctionDescriptor ReportProgress$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor ReportProgress_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ReportProgress_UP$MH = RuntimeHelper.upcallHandle(ReportProgress.class, "apply", IInternetProtocolSinkVtbl.ReportProgress_UP$FUNC);
    static final FunctionDescriptor ReportProgress_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ReportProgress_DOWN$MH = RuntimeHelper.downcallHandle(
        IInternetProtocolSinkVtbl.ReportProgress_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*ReportProgress)(IInternetProtocolSink*,ULONG,LPCWSTR);
     * }
     */
    public interface ReportProgress {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(ReportProgress fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IInternetProtocolSinkVtbl.ReportProgress_UP$MH, fi, IInternetProtocolSinkVtbl.ReportProgress$FUNC, scope);
        }
        static ReportProgress ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IInternetProtocolSinkVtbl.ReportProgress_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ReportProgress$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ReportProgress"));
    public static VarHandle ReportProgress$VH() {
        return IInternetProtocolSinkVtbl.ReportProgress$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*ReportProgress)(IInternetProtocolSink*,ULONG,LPCWSTR);
     * }
     */
    public static MemorySegment ReportProgress$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IInternetProtocolSinkVtbl.ReportProgress$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*ReportProgress)(IInternetProtocolSink*,ULONG,LPCWSTR);
     * }
     */
    public static void ReportProgress$set(MemorySegment seg, MemorySegment x) {
        IInternetProtocolSinkVtbl.ReportProgress$VH.set(seg, x);
    }
    public static MemorySegment ReportProgress$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IInternetProtocolSinkVtbl.ReportProgress$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ReportProgress$set(MemorySegment seg, long index, MemorySegment x) {
        IInternetProtocolSinkVtbl.ReportProgress$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ReportProgress ReportProgress(MemorySegment segment, SegmentScope scope) {
        return ReportProgress.ofAddress(ReportProgress$get(segment), scope);
    }
    static final FunctionDescriptor ReportData$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor ReportData_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle ReportData_UP$MH = RuntimeHelper.upcallHandle(ReportData.class, "apply", IInternetProtocolSinkVtbl.ReportData_UP$FUNC);
    static final FunctionDescriptor ReportData_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle ReportData_DOWN$MH = RuntimeHelper.downcallHandle(
        IInternetProtocolSinkVtbl.ReportData_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*ReportData)(IInternetProtocolSink*,DWORD,ULONG,ULONG);
     * }
     */
    public interface ReportData {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, int _x3);
        static MemorySegment allocate(ReportData fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IInternetProtocolSinkVtbl.ReportData_UP$MH, fi, IInternetProtocolSinkVtbl.ReportData$FUNC, scope);
        }
        static ReportData ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, int __x3) -> {
                try {
                    return (int)IInternetProtocolSinkVtbl.ReportData_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ReportData$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ReportData"));
    public static VarHandle ReportData$VH() {
        return IInternetProtocolSinkVtbl.ReportData$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*ReportData)(IInternetProtocolSink*,DWORD,ULONG,ULONG);
     * }
     */
    public static MemorySegment ReportData$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IInternetProtocolSinkVtbl.ReportData$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*ReportData)(IInternetProtocolSink*,DWORD,ULONG,ULONG);
     * }
     */
    public static void ReportData$set(MemorySegment seg, MemorySegment x) {
        IInternetProtocolSinkVtbl.ReportData$VH.set(seg, x);
    }
    public static MemorySegment ReportData$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IInternetProtocolSinkVtbl.ReportData$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ReportData$set(MemorySegment seg, long index, MemorySegment x) {
        IInternetProtocolSinkVtbl.ReportData$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ReportData ReportData(MemorySegment segment, SegmentScope scope) {
        return ReportData.ofAddress(ReportData$get(segment), scope);
    }
    static final FunctionDescriptor ReportResult$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor ReportResult_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ReportResult_UP$MH = RuntimeHelper.upcallHandle(ReportResult.class, "apply", IInternetProtocolSinkVtbl.ReportResult_UP$FUNC);
    static final FunctionDescriptor ReportResult_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ReportResult_DOWN$MH = RuntimeHelper.downcallHandle(
        IInternetProtocolSinkVtbl.ReportResult_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*ReportResult)(IInternetProtocolSink*,HRESULT,DWORD,LPCWSTR);
     * }
     */
    public interface ReportResult {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(ReportResult fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IInternetProtocolSinkVtbl.ReportResult_UP$MH, fi, IInternetProtocolSinkVtbl.ReportResult$FUNC, scope);
        }
        static ReportResult ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)IInternetProtocolSinkVtbl.ReportResult_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ReportResult$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ReportResult"));
    public static VarHandle ReportResult$VH() {
        return IInternetProtocolSinkVtbl.ReportResult$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*ReportResult)(IInternetProtocolSink*,HRESULT,DWORD,LPCWSTR);
     * }
     */
    public static MemorySegment ReportResult$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IInternetProtocolSinkVtbl.ReportResult$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*ReportResult)(IInternetProtocolSink*,HRESULT,DWORD,LPCWSTR);
     * }
     */
    public static void ReportResult$set(MemorySegment seg, MemorySegment x) {
        IInternetProtocolSinkVtbl.ReportResult$VH.set(seg, x);
    }
    public static MemorySegment ReportResult$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IInternetProtocolSinkVtbl.ReportResult$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ReportResult$set(MemorySegment seg, long index, MemorySegment x) {
        IInternetProtocolSinkVtbl.ReportResult$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ReportResult ReportResult(MemorySegment segment, SegmentScope scope) {
        return ReportResult.ofAddress(ReportResult$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


