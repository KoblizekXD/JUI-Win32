// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
final class constants$159 {

    // Suppresses default constructor, ensuring non-instantiability.
    private constants$159() {}
    static final FunctionDescriptor InitializeSynchronizationBarrier$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle InitializeSynchronizationBarrier$MH = RuntimeHelper.downcallHandle(
        "InitializeSynchronizationBarrier",
        constants$159.InitializeSynchronizationBarrier$FUNC
    );
    static final FunctionDescriptor DeleteSynchronizationBarrier$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle DeleteSynchronizationBarrier$MH = RuntimeHelper.downcallHandle(
        "DeleteSynchronizationBarrier",
        constants$159.DeleteSynchronizationBarrier$FUNC
    );
    static final FunctionDescriptor Sleep$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle Sleep$MH = RuntimeHelper.downcallHandle(
        "Sleep",
        constants$159.Sleep$FUNC
    );
    static final FunctionDescriptor WaitOnAddress$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle WaitOnAddress$MH = RuntimeHelper.downcallHandle(
        "WaitOnAddress",
        constants$159.WaitOnAddress$FUNC
    );
    static final FunctionDescriptor WakeByAddressSingle$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle WakeByAddressSingle$MH = RuntimeHelper.downcallHandle(
        "WakeByAddressSingle",
        constants$159.WakeByAddressSingle$FUNC
    );
    static final FunctionDescriptor WakeByAddressAll$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle WakeByAddressAll$MH = RuntimeHelper.downcallHandle(
        "WakeByAddressAll",
        constants$159.WakeByAddressAll$FUNC
    );
}


