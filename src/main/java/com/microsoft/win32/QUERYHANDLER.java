// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * DWORD (*QUERYHANDLER)(LPVOID keycontext,PVALCONTEXT val_list,DWORD num_vals,LPVOID outputbuffer,DWORD* total_outlen,DWORD input_blen);
 * }
 */
public interface QUERYHANDLER {

    int apply(java.lang.foreign.MemorySegment keycontext, java.lang.foreign.MemorySegment val_list, int num_vals, java.lang.foreign.MemorySegment outputbuffer, java.lang.foreign.MemorySegment total_outlen, int input_blen);
    static MemorySegment allocate(QUERYHANDLER fi, SegmentScope scope) {
        return RuntimeHelper.upcallStub(constants$565.QUERYHANDLER_UP$MH, fi, constants$565.QUERYHANDLER$FUNC, scope);
    }
    static QUERYHANDLER ofAddress(MemorySegment addr, SegmentScope scope) {
        MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
        return (java.lang.foreign.MemorySegment _keycontext, java.lang.foreign.MemorySegment _val_list, int _num_vals, java.lang.foreign.MemorySegment _outputbuffer, java.lang.foreign.MemorySegment _total_outlen, int _input_blen) -> {
            try {
                return (int)constants$565.QUERYHANDLER_DOWN$MH.invokeExact(symbol, _keycontext, _val_list, _num_vals, _outputbuffer, _total_outlen, _input_blen);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


