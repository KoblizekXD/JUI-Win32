// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _ENCRYPTION_BUFFER {
 *     DWORD EncryptionOperation;
 *     BYTE Private[1];
 * };
 * }
 */
public class _ENCRYPTION_BUFFER {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("EncryptionOperation"),
        MemoryLayout.sequenceLayout(1, Constants$root.C_CHAR$LAYOUT).withName("Private"),
        MemoryLayout.paddingLayout(24)
    ).withName("_ENCRYPTION_BUFFER");
    public static MemoryLayout $LAYOUT() {
        return _ENCRYPTION_BUFFER.$struct$LAYOUT;
    }
    static final VarHandle EncryptionOperation$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("EncryptionOperation"));
    public static VarHandle EncryptionOperation$VH() {
        return _ENCRYPTION_BUFFER.EncryptionOperation$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD EncryptionOperation;
     * }
     */
    public static int EncryptionOperation$get(MemorySegment seg) {
        return (int)_ENCRYPTION_BUFFER.EncryptionOperation$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD EncryptionOperation;
     * }
     */
    public static void EncryptionOperation$set(MemorySegment seg, int x) {
        _ENCRYPTION_BUFFER.EncryptionOperation$VH.set(seg, x);
    }
    public static int EncryptionOperation$get(MemorySegment seg, long index) {
        return (int)_ENCRYPTION_BUFFER.EncryptionOperation$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void EncryptionOperation$set(MemorySegment seg, long index, int x) {
        _ENCRYPTION_BUFFER.EncryptionOperation$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Private$slice(MemorySegment seg) {
        return seg.asSlice(4, 1);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


