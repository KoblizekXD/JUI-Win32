// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _DUPLICATE_EXTENTS_DATA_EX {
 *     SIZE_T Size;
 *     HANDLE FileHandle;
 *     LARGE_INTEGER SourceFileOffset;
 *     LARGE_INTEGER TargetFileOffset;
 *     LARGE_INTEGER ByteCount;
 *     DWORD Flags;
 * };
 * }
 */
public class _DUPLICATE_EXTENTS_DATA_EX {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG_LONG$LAYOUT.withName("Size"),
        Constants$root.C_POINTER$LAYOUT.withName("FileHandle"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("SourceFileOffset"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("TargetFileOffset"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("ByteCount"),
        Constants$root.C_LONG$LAYOUT.withName("Flags"),
        MemoryLayout.paddingLayout(32)
    ).withName("_DUPLICATE_EXTENTS_DATA_EX");
    public static MemoryLayout $LAYOUT() {
        return _DUPLICATE_EXTENTS_DATA_EX.$struct$LAYOUT;
    }
    static final VarHandle Size$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Size"));
    public static VarHandle Size$VH() {
        return _DUPLICATE_EXTENTS_DATA_EX.Size$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * SIZE_T Size;
     * }
     */
    public static long Size$get(MemorySegment seg) {
        return (long)_DUPLICATE_EXTENTS_DATA_EX.Size$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * SIZE_T Size;
     * }
     */
    public static void Size$set(MemorySegment seg, long x) {
        _DUPLICATE_EXTENTS_DATA_EX.Size$VH.set(seg, x);
    }
    public static long Size$get(MemorySegment seg, long index) {
        return (long)_DUPLICATE_EXTENTS_DATA_EX.Size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Size$set(MemorySegment seg, long index, long x) {
        _DUPLICATE_EXTENTS_DATA_EX.Size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle FileHandle$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("FileHandle"));
    public static VarHandle FileHandle$VH() {
        return _DUPLICATE_EXTENTS_DATA_EX.FileHandle$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HANDLE FileHandle;
     * }
     */
    public static MemorySegment FileHandle$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_DUPLICATE_EXTENTS_DATA_EX.FileHandle$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HANDLE FileHandle;
     * }
     */
    public static void FileHandle$set(MemorySegment seg, MemorySegment x) {
        _DUPLICATE_EXTENTS_DATA_EX.FileHandle$VH.set(seg, x);
    }
    public static MemorySegment FileHandle$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_DUPLICATE_EXTENTS_DATA_EX.FileHandle$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void FileHandle$set(MemorySegment seg, long index, MemorySegment x) {
        _DUPLICATE_EXTENTS_DATA_EX.FileHandle$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment SourceFileOffset$slice(MemorySegment seg) {
        return seg.asSlice(16, 8);
    }
    public static MemorySegment TargetFileOffset$slice(MemorySegment seg) {
        return seg.asSlice(24, 8);
    }
    public static MemorySegment ByteCount$slice(MemorySegment seg) {
        return seg.asSlice(32, 8);
    }
    static final VarHandle Flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Flags"));
    public static VarHandle Flags$VH() {
        return _DUPLICATE_EXTENTS_DATA_EX.Flags$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Flags;
     * }
     */
    public static int Flags$get(MemorySegment seg) {
        return (int)_DUPLICATE_EXTENTS_DATA_EX.Flags$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Flags;
     * }
     */
    public static void Flags$set(MemorySegment seg, int x) {
        _DUPLICATE_EXTENTS_DATA_EX.Flags$VH.set(seg, x);
    }
    public static int Flags$get(MemorySegment seg, long index) {
        return (int)_DUPLICATE_EXTENTS_DATA_EX.Flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Flags$set(MemorySegment seg, long index, int x) {
        _DUPLICATE_EXTENTS_DATA_EX.Flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


