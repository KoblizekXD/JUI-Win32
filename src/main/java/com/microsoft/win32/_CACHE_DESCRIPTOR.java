// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _CACHE_DESCRIPTOR {
 *     BYTE Level;
 *     BYTE Associativity;
 *     WORD LineSize;
 *     DWORD Size;
 *     PROCESSOR_CACHE_TYPE Type;
 * };
 * }
 */
public class _CACHE_DESCRIPTOR {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_CHAR$LAYOUT.withName("Level"),
        Constants$root.C_CHAR$LAYOUT.withName("Associativity"),
        Constants$root.C_SHORT$LAYOUT.withName("LineSize"),
        Constants$root.C_LONG$LAYOUT.withName("Size"),
        Constants$root.C_LONG$LAYOUT.withName("Type")
    ).withName("_CACHE_DESCRIPTOR");
    public static MemoryLayout $LAYOUT() {
        return _CACHE_DESCRIPTOR.$struct$LAYOUT;
    }
    static final VarHandle Level$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Level"));
    public static VarHandle Level$VH() {
        return _CACHE_DESCRIPTOR.Level$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE Level;
     * }
     */
    public static byte Level$get(MemorySegment seg) {
        return (byte)_CACHE_DESCRIPTOR.Level$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE Level;
     * }
     */
    public static void Level$set(MemorySegment seg, byte x) {
        _CACHE_DESCRIPTOR.Level$VH.set(seg, x);
    }
    public static byte Level$get(MemorySegment seg, long index) {
        return (byte)_CACHE_DESCRIPTOR.Level$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Level$set(MemorySegment seg, long index, byte x) {
        _CACHE_DESCRIPTOR.Level$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Associativity$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Associativity"));
    public static VarHandle Associativity$VH() {
        return _CACHE_DESCRIPTOR.Associativity$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE Associativity;
     * }
     */
    public static byte Associativity$get(MemorySegment seg) {
        return (byte)_CACHE_DESCRIPTOR.Associativity$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE Associativity;
     * }
     */
    public static void Associativity$set(MemorySegment seg, byte x) {
        _CACHE_DESCRIPTOR.Associativity$VH.set(seg, x);
    }
    public static byte Associativity$get(MemorySegment seg, long index) {
        return (byte)_CACHE_DESCRIPTOR.Associativity$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Associativity$set(MemorySegment seg, long index, byte x) {
        _CACHE_DESCRIPTOR.Associativity$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle LineSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("LineSize"));
    public static VarHandle LineSize$VH() {
        return _CACHE_DESCRIPTOR.LineSize$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD LineSize;
     * }
     */
    public static short LineSize$get(MemorySegment seg) {
        return (short)_CACHE_DESCRIPTOR.LineSize$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD LineSize;
     * }
     */
    public static void LineSize$set(MemorySegment seg, short x) {
        _CACHE_DESCRIPTOR.LineSize$VH.set(seg, x);
    }
    public static short LineSize$get(MemorySegment seg, long index) {
        return (short)_CACHE_DESCRIPTOR.LineSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void LineSize$set(MemorySegment seg, long index, short x) {
        _CACHE_DESCRIPTOR.LineSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Size$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Size"));
    public static VarHandle Size$VH() {
        return _CACHE_DESCRIPTOR.Size$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Size;
     * }
     */
    public static int Size$get(MemorySegment seg) {
        return (int)_CACHE_DESCRIPTOR.Size$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Size;
     * }
     */
    public static void Size$set(MemorySegment seg, int x) {
        _CACHE_DESCRIPTOR.Size$VH.set(seg, x);
    }
    public static int Size$get(MemorySegment seg, long index) {
        return (int)_CACHE_DESCRIPTOR.Size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Size$set(MemorySegment seg, long index, int x) {
        _CACHE_DESCRIPTOR.Size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Type$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Type"));
    public static VarHandle Type$VH() {
        return _CACHE_DESCRIPTOR.Type$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PROCESSOR_CACHE_TYPE Type;
     * }
     */
    public static int Type$get(MemorySegment seg) {
        return (int)_CACHE_DESCRIPTOR.Type$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PROCESSOR_CACHE_TYPE Type;
     * }
     */
    public static void Type$set(MemorySegment seg, int x) {
        _CACHE_DESCRIPTOR.Type$VH.set(seg, x);
    }
    public static int Type$get(MemorySegment seg, long index) {
        return (int)_CACHE_DESCRIPTOR.Type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Type$set(MemorySegment seg, long index, int x) {
        _CACHE_DESCRIPTOR.Type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


