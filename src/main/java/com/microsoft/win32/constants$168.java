// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
final class constants$168 {

    // Suppresses default constructor, ensuring non-instantiability.
    private constants$168() {}
    static final FunctionDescriptor SetThreadStackGuarantee$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetThreadStackGuarantee$MH = RuntimeHelper.downcallHandle(
        "SetThreadStackGuarantee",
        constants$168.SetThreadStackGuarantee$FUNC
    );
    static final FunctionDescriptor ProcessIdToSessionId$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ProcessIdToSessionId$MH = RuntimeHelper.downcallHandle(
        "ProcessIdToSessionId",
        constants$168.ProcessIdToSessionId$FUNC
    );
    static final FunctionDescriptor GetProcessId$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetProcessId$MH = RuntimeHelper.downcallHandle(
        "GetProcessId",
        constants$168.GetProcessId$FUNC
    );
    static final FunctionDescriptor GetThreadId$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetThreadId$MH = RuntimeHelper.downcallHandle(
        "GetThreadId",
        constants$168.GetThreadId$FUNC
    );
    static final FunctionDescriptor FlushProcessWriteBuffers$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle FlushProcessWriteBuffers$MH = RuntimeHelper.downcallHandle(
        "FlushProcessWriteBuffers",
        constants$168.FlushProcessWriteBuffers$FUNC
    );
    static final FunctionDescriptor GetProcessIdOfThread$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetProcessIdOfThread$MH = RuntimeHelper.downcallHandle(
        "GetProcessIdOfThread",
        constants$168.GetProcessIdOfThread$FUNC
    );
}


