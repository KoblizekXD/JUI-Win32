// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IXMLElementVtbl {
 *     HRESULT (*QueryInterface)(IXMLElement*,const IID*,void**);
 *     ULONG (*AddRef)(IXMLElement*);
 *     ULONG (*Release)(IXMLElement*);
 *     HRESULT (*GetTypeInfoCount)(IXMLElement*,UINT*);
 *     HRESULT (*GetTypeInfo)(IXMLElement*,UINT,LCID,ITypeInfo**);
 *     HRESULT (*GetIDsOfNames)(IXMLElement*,const IID*,LPOLESTR*,UINT,LCID,DISPID*);
 *     HRESULT (*Invoke)(IXMLElement*,DISPID,const IID*,LCID,WORD,DISPPARAMS*,VARIANT*,EXCEPINFO*,UINT*);
 *     HRESULT (*get_tagName)(IXMLElement*,BSTR*);
 *     HRESULT (*put_tagName)(IXMLElement*,BSTR);
 *     HRESULT (*get_parent)(IXMLElement*,IXMLElement**);
 *     HRESULT (*setAttribute)(IXMLElement*,BSTR,VARIANT);
 *     HRESULT (*getAttribute)(IXMLElement*,BSTR,VARIANT*);
 *     HRESULT (*removeAttribute)(IXMLElement*,BSTR);
 *     HRESULT (*get_children)(IXMLElement*,IXMLElementCollection**);
 *     HRESULT (*get_type)(IXMLElement*,long*);
 *     HRESULT (*get_text)(IXMLElement*,BSTR*);
 *     HRESULT (*put_text)(IXMLElement*,BSTR);
 *     HRESULT (*addChild)(IXMLElement*,IXMLElement*,long,long);
 *     HRESULT (*removeChild)(IXMLElement*,IXMLElement*);
 * };
 * }
 */
public class IXMLElementVtbl {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("GetTypeInfoCount"),
        Constants$root.C_POINTER$LAYOUT.withName("GetTypeInfo"),
        Constants$root.C_POINTER$LAYOUT.withName("GetIDsOfNames"),
        Constants$root.C_POINTER$LAYOUT.withName("Invoke"),
        Constants$root.C_POINTER$LAYOUT.withName("get_tagName"),
        Constants$root.C_POINTER$LAYOUT.withName("put_tagName"),
        Constants$root.C_POINTER$LAYOUT.withName("get_parent"),
        Constants$root.C_POINTER$LAYOUT.withName("setAttribute"),
        Constants$root.C_POINTER$LAYOUT.withName("getAttribute"),
        Constants$root.C_POINTER$LAYOUT.withName("removeAttribute"),
        Constants$root.C_POINTER$LAYOUT.withName("get_children"),
        Constants$root.C_POINTER$LAYOUT.withName("get_type"),
        Constants$root.C_POINTER$LAYOUT.withName("get_text"),
        Constants$root.C_POINTER$LAYOUT.withName("put_text"),
        Constants$root.C_POINTER$LAYOUT.withName("addChild"),
        Constants$root.C_POINTER$LAYOUT.withName("removeChild")
    ).withName("IXMLElementVtbl");
    public static MemoryLayout $LAYOUT() {
        return IXMLElementVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor QueryInterface_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_UP$MH = RuntimeHelper.upcallHandle(QueryInterface.class, "apply", IXMLElementVtbl.QueryInterface_UP$FUNC);
    static final FunctionDescriptor QueryInterface_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLElementVtbl.QueryInterface_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(IXMLElement*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLElementVtbl.QueryInterface_UP$MH, fi, IXMLElementVtbl.QueryInterface$FUNC, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IXMLElementVtbl.QueryInterface_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return IXMLElementVtbl.QueryInterface$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IXMLElement*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLElementVtbl.QueryInterface$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IXMLElement*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        IXMLElementVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLElementVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLElementVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, SegmentScope scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor AddRef_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_UP$MH = RuntimeHelper.upcallHandle(AddRef.class, "apply", IXMLElementVtbl.AddRef_UP$FUNC);
    static final FunctionDescriptor AddRef_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLElementVtbl.AddRef_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*AddRef)(IXMLElement*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLElementVtbl.AddRef_UP$MH, fi, IXMLElementVtbl.AddRef$FUNC, scope);
        }
        static AddRef ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IXMLElementVtbl.AddRef_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return IXMLElementVtbl.AddRef$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(IXMLElement*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLElementVtbl.AddRef$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(IXMLElement*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        IXMLElementVtbl.AddRef$VH.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLElementVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLElementVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, SegmentScope scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Release_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_UP$MH = RuntimeHelper.upcallHandle(Release.class, "apply", IXMLElementVtbl.Release_UP$FUNC);
    static final FunctionDescriptor Release_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLElementVtbl.Release_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*Release)(IXMLElement*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLElementVtbl.Release_UP$MH, fi, IXMLElementVtbl.Release$FUNC, scope);
        }
        static Release ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IXMLElementVtbl.Release_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return IXMLElementVtbl.Release$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(IXMLElement*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLElementVtbl.Release$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(IXMLElement*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        IXMLElementVtbl.Release$VH.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLElementVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLElementVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, SegmentScope scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    static final FunctionDescriptor GetTypeInfoCount$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetTypeInfoCount_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetTypeInfoCount_UP$MH = RuntimeHelper.upcallHandle(GetTypeInfoCount.class, "apply", IXMLElementVtbl.GetTypeInfoCount_UP$FUNC);
    static final FunctionDescriptor GetTypeInfoCount_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetTypeInfoCount_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLElementVtbl.GetTypeInfoCount_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetTypeInfoCount)(IXMLElement*,UINT*);
     * }
     */
    public interface GetTypeInfoCount {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetTypeInfoCount fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLElementVtbl.GetTypeInfoCount_UP$MH, fi, IXMLElementVtbl.GetTypeInfoCount$FUNC, scope);
        }
        static GetTypeInfoCount ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IXMLElementVtbl.GetTypeInfoCount_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetTypeInfoCount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetTypeInfoCount"));
    public static VarHandle GetTypeInfoCount$VH() {
        return IXMLElementVtbl.GetTypeInfoCount$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetTypeInfoCount)(IXMLElement*,UINT*);
     * }
     */
    public static MemorySegment GetTypeInfoCount$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLElementVtbl.GetTypeInfoCount$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetTypeInfoCount)(IXMLElement*,UINT*);
     * }
     */
    public static void GetTypeInfoCount$set(MemorySegment seg, MemorySegment x) {
        IXMLElementVtbl.GetTypeInfoCount$VH.set(seg, x);
    }
    public static MemorySegment GetTypeInfoCount$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLElementVtbl.GetTypeInfoCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTypeInfoCount$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLElementVtbl.GetTypeInfoCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTypeInfoCount GetTypeInfoCount(MemorySegment segment, SegmentScope scope) {
        return GetTypeInfoCount.ofAddress(GetTypeInfoCount$get(segment), scope);
    }
    static final FunctionDescriptor GetTypeInfo$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetTypeInfo_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetTypeInfo_UP$MH = RuntimeHelper.upcallHandle(GetTypeInfo.class, "apply", IXMLElementVtbl.GetTypeInfo_UP$FUNC);
    static final FunctionDescriptor GetTypeInfo_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetTypeInfo_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLElementVtbl.GetTypeInfo_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetTypeInfo)(IXMLElement*,UINT,LCID,ITypeInfo**);
     * }
     */
    public interface GetTypeInfo {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(GetTypeInfo fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLElementVtbl.GetTypeInfo_UP$MH, fi, IXMLElementVtbl.GetTypeInfo$FUNC, scope);
        }
        static GetTypeInfo ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)IXMLElementVtbl.GetTypeInfo_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetTypeInfo$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetTypeInfo"));
    public static VarHandle GetTypeInfo$VH() {
        return IXMLElementVtbl.GetTypeInfo$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetTypeInfo)(IXMLElement*,UINT,LCID,ITypeInfo**);
     * }
     */
    public static MemorySegment GetTypeInfo$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLElementVtbl.GetTypeInfo$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetTypeInfo)(IXMLElement*,UINT,LCID,ITypeInfo**);
     * }
     */
    public static void GetTypeInfo$set(MemorySegment seg, MemorySegment x) {
        IXMLElementVtbl.GetTypeInfo$VH.set(seg, x);
    }
    public static MemorySegment GetTypeInfo$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLElementVtbl.GetTypeInfo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTypeInfo$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLElementVtbl.GetTypeInfo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTypeInfo GetTypeInfo(MemorySegment segment, SegmentScope scope) {
        return GetTypeInfo.ofAddress(GetTypeInfo$get(segment), scope);
    }
    static final FunctionDescriptor GetIDsOfNames$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetIDsOfNames_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetIDsOfNames_UP$MH = RuntimeHelper.upcallHandle(GetIDsOfNames.class, "apply", IXMLElementVtbl.GetIDsOfNames_UP$FUNC);
    static final FunctionDescriptor GetIDsOfNames_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetIDsOfNames_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLElementVtbl.GetIDsOfNames_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetIDsOfNames)(IXMLElement*,const IID*,LPOLESTR*,UINT,LCID,DISPID*);
     * }
     */
    public interface GetIDsOfNames {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3, int _x4, java.lang.foreign.MemorySegment _x5);
        static MemorySegment allocate(GetIDsOfNames fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLElementVtbl.GetIDsOfNames_UP$MH, fi, IXMLElementVtbl.GetIDsOfNames$FUNC, scope);
        }
        static GetIDsOfNames ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3, int __x4, java.lang.foreign.MemorySegment __x5) -> {
                try {
                    return (int)IXMLElementVtbl.GetIDsOfNames_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetIDsOfNames$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetIDsOfNames"));
    public static VarHandle GetIDsOfNames$VH() {
        return IXMLElementVtbl.GetIDsOfNames$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetIDsOfNames)(IXMLElement*,const IID*,LPOLESTR*,UINT,LCID,DISPID*);
     * }
     */
    public static MemorySegment GetIDsOfNames$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLElementVtbl.GetIDsOfNames$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetIDsOfNames)(IXMLElement*,const IID*,LPOLESTR*,UINT,LCID,DISPID*);
     * }
     */
    public static void GetIDsOfNames$set(MemorySegment seg, MemorySegment x) {
        IXMLElementVtbl.GetIDsOfNames$VH.set(seg, x);
    }
    public static MemorySegment GetIDsOfNames$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLElementVtbl.GetIDsOfNames$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetIDsOfNames$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLElementVtbl.GetIDsOfNames$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetIDsOfNames GetIDsOfNames(MemorySegment segment, SegmentScope scope) {
        return GetIDsOfNames.ofAddress(GetIDsOfNames$get(segment), scope);
    }
    static final FunctionDescriptor Invoke$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_SHORT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Invoke_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_SHORT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Invoke_UP$MH = RuntimeHelper.upcallHandle(Invoke.class, "apply", IXMLElementVtbl.Invoke_UP$FUNC);
    static final FunctionDescriptor Invoke_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_SHORT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Invoke_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLElementVtbl.Invoke_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*Invoke)(IXMLElement*,DISPID,const IID*,LCID,WORD,DISPPARAMS*,VARIANT*,EXCEPINFO*,UINT*);
     * }
     */
    public interface Invoke {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, int _x3, short _x4, java.lang.foreign.MemorySegment _x5, java.lang.foreign.MemorySegment _x6, java.lang.foreign.MemorySegment _x7, java.lang.foreign.MemorySegment _x8);
        static MemorySegment allocate(Invoke fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLElementVtbl.Invoke_UP$MH, fi, IXMLElementVtbl.Invoke$FUNC, scope);
        }
        static Invoke ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, int __x3, short __x4, java.lang.foreign.MemorySegment __x5, java.lang.foreign.MemorySegment __x6, java.lang.foreign.MemorySegment __x7, java.lang.foreign.MemorySegment __x8) -> {
                try {
                    return (int)IXMLElementVtbl.Invoke_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6, __x7, __x8);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Invoke$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Invoke"));
    public static VarHandle Invoke$VH() {
        return IXMLElementVtbl.Invoke$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Invoke)(IXMLElement*,DISPID,const IID*,LCID,WORD,DISPPARAMS*,VARIANT*,EXCEPINFO*,UINT*);
     * }
     */
    public static MemorySegment Invoke$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLElementVtbl.Invoke$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Invoke)(IXMLElement*,DISPID,const IID*,LCID,WORD,DISPPARAMS*,VARIANT*,EXCEPINFO*,UINT*);
     * }
     */
    public static void Invoke$set(MemorySegment seg, MemorySegment x) {
        IXMLElementVtbl.Invoke$VH.set(seg, x);
    }
    public static MemorySegment Invoke$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLElementVtbl.Invoke$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Invoke$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLElementVtbl.Invoke$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Invoke Invoke(MemorySegment segment, SegmentScope scope) {
        return Invoke.ofAddress(Invoke$get(segment), scope);
    }
    static final FunctionDescriptor get_tagName$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_tagName_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_tagName_UP$MH = RuntimeHelper.upcallHandle(get_tagName.class, "apply", IXMLElementVtbl.get_tagName_UP$FUNC);
    static final FunctionDescriptor get_tagName_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_tagName_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLElementVtbl.get_tagName_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*get_tagName)(IXMLElement*,BSTR*);
     * }
     */
    public interface get_tagName {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_tagName fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLElementVtbl.get_tagName_UP$MH, fi, IXMLElementVtbl.get_tagName$FUNC, scope);
        }
        static get_tagName ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IXMLElementVtbl.get_tagName_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_tagName$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_tagName"));
    public static VarHandle get_tagName$VH() {
        return IXMLElementVtbl.get_tagName$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_tagName)(IXMLElement*,BSTR*);
     * }
     */
    public static MemorySegment get_tagName$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLElementVtbl.get_tagName$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_tagName)(IXMLElement*,BSTR*);
     * }
     */
    public static void get_tagName$set(MemorySegment seg, MemorySegment x) {
        IXMLElementVtbl.get_tagName$VH.set(seg, x);
    }
    public static MemorySegment get_tagName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLElementVtbl.get_tagName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_tagName$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLElementVtbl.get_tagName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_tagName get_tagName(MemorySegment segment, SegmentScope scope) {
        return get_tagName.ofAddress(get_tagName$get(segment), scope);
    }
    static final FunctionDescriptor put_tagName$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor put_tagName_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle put_tagName_UP$MH = RuntimeHelper.upcallHandle(put_tagName.class, "apply", IXMLElementVtbl.put_tagName_UP$FUNC);
    static final FunctionDescriptor put_tagName_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle put_tagName_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLElementVtbl.put_tagName_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*put_tagName)(IXMLElement*,BSTR);
     * }
     */
    public interface put_tagName {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(put_tagName fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLElementVtbl.put_tagName_UP$MH, fi, IXMLElementVtbl.put_tagName$FUNC, scope);
        }
        static put_tagName ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IXMLElementVtbl.put_tagName_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle put_tagName$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("put_tagName"));
    public static VarHandle put_tagName$VH() {
        return IXMLElementVtbl.put_tagName$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*put_tagName)(IXMLElement*,BSTR);
     * }
     */
    public static MemorySegment put_tagName$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLElementVtbl.put_tagName$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*put_tagName)(IXMLElement*,BSTR);
     * }
     */
    public static void put_tagName$set(MemorySegment seg, MemorySegment x) {
        IXMLElementVtbl.put_tagName$VH.set(seg, x);
    }
    public static MemorySegment put_tagName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLElementVtbl.put_tagName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void put_tagName$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLElementVtbl.put_tagName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static put_tagName put_tagName(MemorySegment segment, SegmentScope scope) {
        return put_tagName.ofAddress(put_tagName$get(segment), scope);
    }
    static final FunctionDescriptor get_parent$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_parent_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_parent_UP$MH = RuntimeHelper.upcallHandle(get_parent.class, "apply", IXMLElementVtbl.get_parent_UP$FUNC);
    static final FunctionDescriptor get_parent_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_parent_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLElementVtbl.get_parent_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*get_parent)(IXMLElement*,IXMLElement**);
     * }
     */
    public interface get_parent {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_parent fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLElementVtbl.get_parent_UP$MH, fi, IXMLElementVtbl.get_parent$FUNC, scope);
        }
        static get_parent ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IXMLElementVtbl.get_parent_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_parent$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_parent"));
    public static VarHandle get_parent$VH() {
        return IXMLElementVtbl.get_parent$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_parent)(IXMLElement*,IXMLElement**);
     * }
     */
    public static MemorySegment get_parent$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLElementVtbl.get_parent$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_parent)(IXMLElement*,IXMLElement**);
     * }
     */
    public static void get_parent$set(MemorySegment seg, MemorySegment x) {
        IXMLElementVtbl.get_parent$VH.set(seg, x);
    }
    public static MemorySegment get_parent$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLElementVtbl.get_parent$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_parent$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLElementVtbl.get_parent$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_parent get_parent(MemorySegment segment, SegmentScope scope) {
        return get_parent.ofAddress(get_parent$get(segment), scope);
    }
    static final FunctionDescriptor setAttribute$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        MemoryLayout.structLayout(
            MemoryLayout.unionLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_SHORT$LAYOUT.withName("vt"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved1"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved2"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved3"),
                    MemoryLayout.unionLayout(
                        Constants$root.C_LONG_LONG$LAYOUT.withName("llVal"),
                        Constants$root.C_LONG$LAYOUT.withName("lVal"),
                        Constants$root.C_CHAR$LAYOUT.withName("bVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("iVal"),
                        Constants$root.C_FLOAT$LAYOUT.withName("fltVal"),
                        Constants$root.C_DOUBLE$LAYOUT.withName("dblVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("boolVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("__OBSOLETE__VARIANT_BOOL"),
                        Constants$root.C_LONG$LAYOUT.withName("scode"),
                        MemoryLayout.unionLayout(
                            MemoryLayout.structLayout(
                                Constants$root.C_LONG$LAYOUT.withName("Lo"),
                                Constants$root.C_LONG$LAYOUT.withName("Hi")
                            ).withName("$anon$0"),
                            Constants$root.C_LONG_LONG$LAYOUT.withName("int64")
                        ).withName("cyVal"),
                        Constants$root.C_DOUBLE$LAYOUT.withName("date"),
                        Constants$root.C_POINTER$LAYOUT.withName("bstrVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("punkVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdispVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("parray"),
                        Constants$root.C_POINTER$LAYOUT.withName("pbVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("piVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("plVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pllVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pfltVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdblVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pboolVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("__OBSOLETE__VARIANT_PBOOL"),
                        Constants$root.C_POINTER$LAYOUT.withName("pscode"),
                        Constants$root.C_POINTER$LAYOUT.withName("pcyVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdate"),
                        Constants$root.C_POINTER$LAYOUT.withName("pbstrVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("ppunkVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("ppdispVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pparray"),
                        Constants$root.C_POINTER$LAYOUT.withName("pvarVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("byref"),
                        Constants$root.C_CHAR$LAYOUT.withName("cVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("uiVal"),
                        Constants$root.C_LONG$LAYOUT.withName("ulVal"),
                        Constants$root.C_LONG_LONG$LAYOUT.withName("ullVal"),
                        Constants$root.C_LONG$LAYOUT.withName("intVal"),
                        Constants$root.C_LONG$LAYOUT.withName("uintVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdecVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pcVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("puiVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pulVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pullVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pintVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("puintVal"),
                        MemoryLayout.structLayout(
                            Constants$root.C_POINTER$LAYOUT.withName("pvRecord"),
                            Constants$root.C_POINTER$LAYOUT.withName("pRecInfo")
                        ).withName("$anon$0")
                    ).withName("$anon$0")
                ).withName("$anon$0"),
                MemoryLayout.structLayout(
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            Constants$root.C_CHAR$LAYOUT.withName("scale"),
                            Constants$root.C_CHAR$LAYOUT.withName("sign")
                        ).withName("$anon$0"),
                        Constants$root.C_SHORT$LAYOUT.withName("signscale")
                    ).withName("$anon$0"),
                    Constants$root.C_LONG$LAYOUT.withName("Hi32"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            Constants$root.C_LONG$LAYOUT.withName("Lo32"),
                            Constants$root.C_LONG$LAYOUT.withName("Mid32")
                        ).withName("$anon$0"),
                        Constants$root.C_LONG_LONG$LAYOUT.withName("Lo64")
                    ).withName("$anon$1")
                ).withName("decVal")
            ).withName("$anon$0")
        ).withName("tagVARIANT")
    );
    static final FunctionDescriptor setAttribute_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        MemoryLayout.structLayout(
            MemoryLayout.unionLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_SHORT$LAYOUT.withName("vt"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved1"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved2"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved3"),
                    MemoryLayout.unionLayout(
                        Constants$root.C_LONG_LONG$LAYOUT.withName("llVal"),
                        Constants$root.C_LONG$LAYOUT.withName("lVal"),
                        Constants$root.C_CHAR$LAYOUT.withName("bVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("iVal"),
                        Constants$root.C_FLOAT$LAYOUT.withName("fltVal"),
                        Constants$root.C_DOUBLE$LAYOUT.withName("dblVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("boolVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("__OBSOLETE__VARIANT_BOOL"),
                        Constants$root.C_LONG$LAYOUT.withName("scode"),
                        MemoryLayout.unionLayout(
                            MemoryLayout.structLayout(
                                Constants$root.C_LONG$LAYOUT.withName("Lo"),
                                Constants$root.C_LONG$LAYOUT.withName("Hi")
                            ).withName("$anon$0"),
                            Constants$root.C_LONG_LONG$LAYOUT.withName("int64")
                        ).withName("cyVal"),
                        Constants$root.C_DOUBLE$LAYOUT.withName("date"),
                        Constants$root.C_POINTER$LAYOUT.withName("bstrVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("punkVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdispVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("parray"),
                        Constants$root.C_POINTER$LAYOUT.withName("pbVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("piVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("plVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pllVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pfltVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdblVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pboolVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("__OBSOLETE__VARIANT_PBOOL"),
                        Constants$root.C_POINTER$LAYOUT.withName("pscode"),
                        Constants$root.C_POINTER$LAYOUT.withName("pcyVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdate"),
                        Constants$root.C_POINTER$LAYOUT.withName("pbstrVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("ppunkVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("ppdispVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pparray"),
                        Constants$root.C_POINTER$LAYOUT.withName("pvarVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("byref"),
                        Constants$root.C_CHAR$LAYOUT.withName("cVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("uiVal"),
                        Constants$root.C_LONG$LAYOUT.withName("ulVal"),
                        Constants$root.C_LONG_LONG$LAYOUT.withName("ullVal"),
                        Constants$root.C_LONG$LAYOUT.withName("intVal"),
                        Constants$root.C_LONG$LAYOUT.withName("uintVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdecVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pcVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("puiVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pulVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pullVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pintVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("puintVal"),
                        MemoryLayout.structLayout(
                            Constants$root.C_POINTER$LAYOUT.withName("pvRecord"),
                            Constants$root.C_POINTER$LAYOUT.withName("pRecInfo")
                        ).withName("$anon$0")
                    ).withName("$anon$0")
                ).withName("$anon$0"),
                MemoryLayout.structLayout(
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            Constants$root.C_CHAR$LAYOUT.withName("scale"),
                            Constants$root.C_CHAR$LAYOUT.withName("sign")
                        ).withName("$anon$0"),
                        Constants$root.C_SHORT$LAYOUT.withName("signscale")
                    ).withName("$anon$0"),
                    Constants$root.C_LONG$LAYOUT.withName("Hi32"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            Constants$root.C_LONG$LAYOUT.withName("Lo32"),
                            Constants$root.C_LONG$LAYOUT.withName("Mid32")
                        ).withName("$anon$0"),
                        Constants$root.C_LONG_LONG$LAYOUT.withName("Lo64")
                    ).withName("$anon$1")
                ).withName("decVal")
            ).withName("$anon$0")
        ).withName("tagVARIANT")
    );
    static final MethodHandle setAttribute_UP$MH = RuntimeHelper.upcallHandle(setAttribute.class, "apply", IXMLElementVtbl.setAttribute_UP$FUNC);
    static final FunctionDescriptor setAttribute_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        MemoryLayout.structLayout(
            MemoryLayout.unionLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_SHORT$LAYOUT.withName("vt"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved1"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved2"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved3"),
                    MemoryLayout.unionLayout(
                        Constants$root.C_LONG_LONG$LAYOUT.withName("llVal"),
                        Constants$root.C_LONG$LAYOUT.withName("lVal"),
                        Constants$root.C_CHAR$LAYOUT.withName("bVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("iVal"),
                        Constants$root.C_FLOAT$LAYOUT.withName("fltVal"),
                        Constants$root.C_DOUBLE$LAYOUT.withName("dblVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("boolVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("__OBSOLETE__VARIANT_BOOL"),
                        Constants$root.C_LONG$LAYOUT.withName("scode"),
                        MemoryLayout.unionLayout(
                            MemoryLayout.structLayout(
                                Constants$root.C_LONG$LAYOUT.withName("Lo"),
                                Constants$root.C_LONG$LAYOUT.withName("Hi")
                            ).withName("$anon$0"),
                            Constants$root.C_LONG_LONG$LAYOUT.withName("int64")
                        ).withName("cyVal"),
                        Constants$root.C_DOUBLE$LAYOUT.withName("date"),
                        Constants$root.C_POINTER$LAYOUT.withName("bstrVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("punkVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdispVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("parray"),
                        Constants$root.C_POINTER$LAYOUT.withName("pbVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("piVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("plVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pllVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pfltVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdblVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pboolVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("__OBSOLETE__VARIANT_PBOOL"),
                        Constants$root.C_POINTER$LAYOUT.withName("pscode"),
                        Constants$root.C_POINTER$LAYOUT.withName("pcyVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdate"),
                        Constants$root.C_POINTER$LAYOUT.withName("pbstrVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("ppunkVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("ppdispVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pparray"),
                        Constants$root.C_POINTER$LAYOUT.withName("pvarVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("byref"),
                        Constants$root.C_CHAR$LAYOUT.withName("cVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("uiVal"),
                        Constants$root.C_LONG$LAYOUT.withName("ulVal"),
                        Constants$root.C_LONG_LONG$LAYOUT.withName("ullVal"),
                        Constants$root.C_LONG$LAYOUT.withName("intVal"),
                        Constants$root.C_LONG$LAYOUT.withName("uintVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdecVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pcVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("puiVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pulVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pullVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pintVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("puintVal"),
                        MemoryLayout.structLayout(
                            Constants$root.C_POINTER$LAYOUT.withName("pvRecord"),
                            Constants$root.C_POINTER$LAYOUT.withName("pRecInfo")
                        ).withName("$anon$0")
                    ).withName("$anon$0")
                ).withName("$anon$0"),
                MemoryLayout.structLayout(
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            Constants$root.C_CHAR$LAYOUT.withName("scale"),
                            Constants$root.C_CHAR$LAYOUT.withName("sign")
                        ).withName("$anon$0"),
                        Constants$root.C_SHORT$LAYOUT.withName("signscale")
                    ).withName("$anon$0"),
                    Constants$root.C_LONG$LAYOUT.withName("Hi32"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            Constants$root.C_LONG$LAYOUT.withName("Lo32"),
                            Constants$root.C_LONG$LAYOUT.withName("Mid32")
                        ).withName("$anon$0"),
                        Constants$root.C_LONG_LONG$LAYOUT.withName("Lo64")
                    ).withName("$anon$1")
                ).withName("decVal")
            ).withName("$anon$0")
        ).withName("tagVARIANT")
    );
    static final MethodHandle setAttribute_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLElementVtbl.setAttribute_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*setAttribute)(IXMLElement*,BSTR,VARIANT);
     * }
     */
    public interface setAttribute {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(setAttribute fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLElementVtbl.setAttribute_UP$MH, fi, IXMLElementVtbl.setAttribute$FUNC, scope);
        }
        static setAttribute ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IXMLElementVtbl.setAttribute_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle setAttribute$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("setAttribute"));
    public static VarHandle setAttribute$VH() {
        return IXMLElementVtbl.setAttribute$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*setAttribute)(IXMLElement*,BSTR,VARIANT);
     * }
     */
    public static MemorySegment setAttribute$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLElementVtbl.setAttribute$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*setAttribute)(IXMLElement*,BSTR,VARIANT);
     * }
     */
    public static void setAttribute$set(MemorySegment seg, MemorySegment x) {
        IXMLElementVtbl.setAttribute$VH.set(seg, x);
    }
    public static MemorySegment setAttribute$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLElementVtbl.setAttribute$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void setAttribute$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLElementVtbl.setAttribute$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static setAttribute setAttribute(MemorySegment segment, SegmentScope scope) {
        return setAttribute.ofAddress(setAttribute$get(segment), scope);
    }
    static final FunctionDescriptor getAttribute$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor getAttribute_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle getAttribute_UP$MH = RuntimeHelper.upcallHandle(getAttribute.class, "apply", IXMLElementVtbl.getAttribute_UP$FUNC);
    static final FunctionDescriptor getAttribute_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle getAttribute_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLElementVtbl.getAttribute_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*getAttribute)(IXMLElement*,BSTR,VARIANT*);
     * }
     */
    public interface getAttribute {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(getAttribute fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLElementVtbl.getAttribute_UP$MH, fi, IXMLElementVtbl.getAttribute$FUNC, scope);
        }
        static getAttribute ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IXMLElementVtbl.getAttribute_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle getAttribute$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("getAttribute"));
    public static VarHandle getAttribute$VH() {
        return IXMLElementVtbl.getAttribute$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*getAttribute)(IXMLElement*,BSTR,VARIANT*);
     * }
     */
    public static MemorySegment getAttribute$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLElementVtbl.getAttribute$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*getAttribute)(IXMLElement*,BSTR,VARIANT*);
     * }
     */
    public static void getAttribute$set(MemorySegment seg, MemorySegment x) {
        IXMLElementVtbl.getAttribute$VH.set(seg, x);
    }
    public static MemorySegment getAttribute$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLElementVtbl.getAttribute$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void getAttribute$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLElementVtbl.getAttribute$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static getAttribute getAttribute(MemorySegment segment, SegmentScope scope) {
        return getAttribute.ofAddress(getAttribute$get(segment), scope);
    }
    static final FunctionDescriptor removeAttribute$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor removeAttribute_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle removeAttribute_UP$MH = RuntimeHelper.upcallHandle(removeAttribute.class, "apply", IXMLElementVtbl.removeAttribute_UP$FUNC);
    static final FunctionDescriptor removeAttribute_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle removeAttribute_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLElementVtbl.removeAttribute_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*removeAttribute)(IXMLElement*,BSTR);
     * }
     */
    public interface removeAttribute {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(removeAttribute fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLElementVtbl.removeAttribute_UP$MH, fi, IXMLElementVtbl.removeAttribute$FUNC, scope);
        }
        static removeAttribute ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IXMLElementVtbl.removeAttribute_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle removeAttribute$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("removeAttribute"));
    public static VarHandle removeAttribute$VH() {
        return IXMLElementVtbl.removeAttribute$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*removeAttribute)(IXMLElement*,BSTR);
     * }
     */
    public static MemorySegment removeAttribute$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLElementVtbl.removeAttribute$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*removeAttribute)(IXMLElement*,BSTR);
     * }
     */
    public static void removeAttribute$set(MemorySegment seg, MemorySegment x) {
        IXMLElementVtbl.removeAttribute$VH.set(seg, x);
    }
    public static MemorySegment removeAttribute$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLElementVtbl.removeAttribute$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void removeAttribute$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLElementVtbl.removeAttribute$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static removeAttribute removeAttribute(MemorySegment segment, SegmentScope scope) {
        return removeAttribute.ofAddress(removeAttribute$get(segment), scope);
    }
    static final FunctionDescriptor get_children$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_children_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_children_UP$MH = RuntimeHelper.upcallHandle(get_children.class, "apply", IXMLElementVtbl.get_children_UP$FUNC);
    static final FunctionDescriptor get_children_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_children_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLElementVtbl.get_children_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*get_children)(IXMLElement*,IXMLElementCollection**);
     * }
     */
    public interface get_children {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_children fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLElementVtbl.get_children_UP$MH, fi, IXMLElementVtbl.get_children$FUNC, scope);
        }
        static get_children ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IXMLElementVtbl.get_children_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_children$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_children"));
    public static VarHandle get_children$VH() {
        return IXMLElementVtbl.get_children$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_children)(IXMLElement*,IXMLElementCollection**);
     * }
     */
    public static MemorySegment get_children$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLElementVtbl.get_children$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_children)(IXMLElement*,IXMLElementCollection**);
     * }
     */
    public static void get_children$set(MemorySegment seg, MemorySegment x) {
        IXMLElementVtbl.get_children$VH.set(seg, x);
    }
    public static MemorySegment get_children$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLElementVtbl.get_children$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_children$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLElementVtbl.get_children$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_children get_children(MemorySegment segment, SegmentScope scope) {
        return get_children.ofAddress(get_children$get(segment), scope);
    }
    static final FunctionDescriptor get_type$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_type_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_type_UP$MH = RuntimeHelper.upcallHandle(get_type.class, "apply", IXMLElementVtbl.get_type_UP$FUNC);
    static final FunctionDescriptor get_type_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_type_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLElementVtbl.get_type_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*get_type)(IXMLElement*,long*);
     * }
     */
    public interface get_type {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_type fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLElementVtbl.get_type_UP$MH, fi, IXMLElementVtbl.get_type$FUNC, scope);
        }
        static get_type ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IXMLElementVtbl.get_type_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_type$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_type"));
    public static VarHandle get_type$VH() {
        return IXMLElementVtbl.get_type$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_type)(IXMLElement*,long*);
     * }
     */
    public static MemorySegment get_type$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLElementVtbl.get_type$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_type)(IXMLElement*,long*);
     * }
     */
    public static void get_type$set(MemorySegment seg, MemorySegment x) {
        IXMLElementVtbl.get_type$VH.set(seg, x);
    }
    public static MemorySegment get_type$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLElementVtbl.get_type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_type$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLElementVtbl.get_type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_type get_type(MemorySegment segment, SegmentScope scope) {
        return get_type.ofAddress(get_type$get(segment), scope);
    }
    static final FunctionDescriptor get_text$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_text_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_text_UP$MH = RuntimeHelper.upcallHandle(get_text.class, "apply", IXMLElementVtbl.get_text_UP$FUNC);
    static final FunctionDescriptor get_text_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_text_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLElementVtbl.get_text_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*get_text)(IXMLElement*,BSTR*);
     * }
     */
    public interface get_text {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_text fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLElementVtbl.get_text_UP$MH, fi, IXMLElementVtbl.get_text$FUNC, scope);
        }
        static get_text ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IXMLElementVtbl.get_text_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_text$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_text"));
    public static VarHandle get_text$VH() {
        return IXMLElementVtbl.get_text$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_text)(IXMLElement*,BSTR*);
     * }
     */
    public static MemorySegment get_text$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLElementVtbl.get_text$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_text)(IXMLElement*,BSTR*);
     * }
     */
    public static void get_text$set(MemorySegment seg, MemorySegment x) {
        IXMLElementVtbl.get_text$VH.set(seg, x);
    }
    public static MemorySegment get_text$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLElementVtbl.get_text$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_text$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLElementVtbl.get_text$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_text get_text(MemorySegment segment, SegmentScope scope) {
        return get_text.ofAddress(get_text$get(segment), scope);
    }
    static final FunctionDescriptor put_text$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor put_text_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle put_text_UP$MH = RuntimeHelper.upcallHandle(put_text.class, "apply", IXMLElementVtbl.put_text_UP$FUNC);
    static final FunctionDescriptor put_text_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle put_text_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLElementVtbl.put_text_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*put_text)(IXMLElement*,BSTR);
     * }
     */
    public interface put_text {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(put_text fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLElementVtbl.put_text_UP$MH, fi, IXMLElementVtbl.put_text$FUNC, scope);
        }
        static put_text ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IXMLElementVtbl.put_text_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle put_text$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("put_text"));
    public static VarHandle put_text$VH() {
        return IXMLElementVtbl.put_text$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*put_text)(IXMLElement*,BSTR);
     * }
     */
    public static MemorySegment put_text$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLElementVtbl.put_text$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*put_text)(IXMLElement*,BSTR);
     * }
     */
    public static void put_text$set(MemorySegment seg, MemorySegment x) {
        IXMLElementVtbl.put_text$VH.set(seg, x);
    }
    public static MemorySegment put_text$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLElementVtbl.put_text$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void put_text$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLElementVtbl.put_text$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static put_text put_text(MemorySegment segment, SegmentScope scope) {
        return put_text.ofAddress(put_text$get(segment), scope);
    }
    static final FunctionDescriptor addChild$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor addChild_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle addChild_UP$MH = RuntimeHelper.upcallHandle(addChild.class, "apply", IXMLElementVtbl.addChild_UP$FUNC);
    static final FunctionDescriptor addChild_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle addChild_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLElementVtbl.addChild_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*addChild)(IXMLElement*,IXMLElement*,long,long);
     * }
     */
    public interface addChild {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, int _x3);
        static MemorySegment allocate(addChild fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLElementVtbl.addChild_UP$MH, fi, IXMLElementVtbl.addChild$FUNC, scope);
        }
        static addChild ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, int __x3) -> {
                try {
                    return (int)IXMLElementVtbl.addChild_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle addChild$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("addChild"));
    public static VarHandle addChild$VH() {
        return IXMLElementVtbl.addChild$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*addChild)(IXMLElement*,IXMLElement*,long,long);
     * }
     */
    public static MemorySegment addChild$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLElementVtbl.addChild$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*addChild)(IXMLElement*,IXMLElement*,long,long);
     * }
     */
    public static void addChild$set(MemorySegment seg, MemorySegment x) {
        IXMLElementVtbl.addChild$VH.set(seg, x);
    }
    public static MemorySegment addChild$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLElementVtbl.addChild$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void addChild$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLElementVtbl.addChild$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static addChild addChild(MemorySegment segment, SegmentScope scope) {
        return addChild.ofAddress(addChild$get(segment), scope);
    }
    static final FunctionDescriptor removeChild$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor removeChild_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle removeChild_UP$MH = RuntimeHelper.upcallHandle(removeChild.class, "apply", IXMLElementVtbl.removeChild_UP$FUNC);
    static final FunctionDescriptor removeChild_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle removeChild_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLElementVtbl.removeChild_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*removeChild)(IXMLElement*,IXMLElement*);
     * }
     */
    public interface removeChild {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(removeChild fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLElementVtbl.removeChild_UP$MH, fi, IXMLElementVtbl.removeChild$FUNC, scope);
        }
        static removeChild ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IXMLElementVtbl.removeChild_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle removeChild$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("removeChild"));
    public static VarHandle removeChild$VH() {
        return IXMLElementVtbl.removeChild$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*removeChild)(IXMLElement*,IXMLElement*);
     * }
     */
    public static MemorySegment removeChild$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLElementVtbl.removeChild$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*removeChild)(IXMLElement*,IXMLElement*);
     * }
     */
    public static void removeChild$set(MemorySegment seg, MemorySegment x) {
        IXMLElementVtbl.removeChild$VH.set(seg, x);
    }
    public static MemorySegment removeChild$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLElementVtbl.removeChild$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void removeChild$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLElementVtbl.removeChild$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static removeChild removeChild(MemorySegment segment, SegmentScope scope) {
        return removeChild.ofAddress(removeChild$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


