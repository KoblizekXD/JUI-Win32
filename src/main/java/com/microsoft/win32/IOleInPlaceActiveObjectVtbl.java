// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IOleInPlaceActiveObjectVtbl {
 *     HRESULT (*QueryInterface)(IOleInPlaceActiveObject*,const IID*,void**);
 *     ULONG (*AddRef)(IOleInPlaceActiveObject*);
 *     ULONG (*Release)(IOleInPlaceActiveObject*);
 *     HRESULT (*GetWindow)(IOleInPlaceActiveObject*,HWND*);
 *     HRESULT (*ContextSensitiveHelp)(IOleInPlaceActiveObject*,BOOL);
 *     HRESULT (*TranslateAcceleratorA)(IOleInPlaceActiveObject*,LPMSG);
 *     HRESULT (*OnFrameWindowActivate)(IOleInPlaceActiveObject*,BOOL);
 *     HRESULT (*OnDocWindowActivate)(IOleInPlaceActiveObject*,BOOL);
 *     HRESULT (*ResizeBorder)(IOleInPlaceActiveObject*,LPCRECT,IOleInPlaceUIWindow*,BOOL);
 *     HRESULT (*EnableModeless)(IOleInPlaceActiveObject*,BOOL);
 * };
 * }
 */
public class IOleInPlaceActiveObjectVtbl {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("GetWindow"),
        Constants$root.C_POINTER$LAYOUT.withName("ContextSensitiveHelp"),
        Constants$root.C_POINTER$LAYOUT.withName("TranslateAcceleratorA"),
        Constants$root.C_POINTER$LAYOUT.withName("OnFrameWindowActivate"),
        Constants$root.C_POINTER$LAYOUT.withName("OnDocWindowActivate"),
        Constants$root.C_POINTER$LAYOUT.withName("ResizeBorder"),
        Constants$root.C_POINTER$LAYOUT.withName("EnableModeless")
    ).withName("IOleInPlaceActiveObjectVtbl");
    public static MemoryLayout $LAYOUT() {
        return IOleInPlaceActiveObjectVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor QueryInterface_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_UP$MH = RuntimeHelper.upcallHandle(QueryInterface.class, "apply", IOleInPlaceActiveObjectVtbl.QueryInterface_UP$FUNC);
    static final FunctionDescriptor QueryInterface_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_DOWN$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceActiveObjectVtbl.QueryInterface_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(IOleInPlaceActiveObject*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IOleInPlaceActiveObjectVtbl.QueryInterface_UP$MH, fi, IOleInPlaceActiveObjectVtbl.QueryInterface$FUNC, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IOleInPlaceActiveObjectVtbl.QueryInterface_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return IOleInPlaceActiveObjectVtbl.QueryInterface$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IOleInPlaceActiveObject*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceActiveObjectVtbl.QueryInterface$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IOleInPlaceActiveObject*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        IOleInPlaceActiveObjectVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceActiveObjectVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        IOleInPlaceActiveObjectVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, SegmentScope scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor AddRef_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_UP$MH = RuntimeHelper.upcallHandle(AddRef.class, "apply", IOleInPlaceActiveObjectVtbl.AddRef_UP$FUNC);
    static final FunctionDescriptor AddRef_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_DOWN$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceActiveObjectVtbl.AddRef_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*AddRef)(IOleInPlaceActiveObject*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IOleInPlaceActiveObjectVtbl.AddRef_UP$MH, fi, IOleInPlaceActiveObjectVtbl.AddRef$FUNC, scope);
        }
        static AddRef ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IOleInPlaceActiveObjectVtbl.AddRef_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return IOleInPlaceActiveObjectVtbl.AddRef$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(IOleInPlaceActiveObject*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceActiveObjectVtbl.AddRef$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(IOleInPlaceActiveObject*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        IOleInPlaceActiveObjectVtbl.AddRef$VH.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceActiveObjectVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        IOleInPlaceActiveObjectVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, SegmentScope scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Release_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_UP$MH = RuntimeHelper.upcallHandle(Release.class, "apply", IOleInPlaceActiveObjectVtbl.Release_UP$FUNC);
    static final FunctionDescriptor Release_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_DOWN$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceActiveObjectVtbl.Release_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*Release)(IOleInPlaceActiveObject*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IOleInPlaceActiveObjectVtbl.Release_UP$MH, fi, IOleInPlaceActiveObjectVtbl.Release$FUNC, scope);
        }
        static Release ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IOleInPlaceActiveObjectVtbl.Release_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return IOleInPlaceActiveObjectVtbl.Release$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(IOleInPlaceActiveObject*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceActiveObjectVtbl.Release$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(IOleInPlaceActiveObject*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        IOleInPlaceActiveObjectVtbl.Release$VH.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceActiveObjectVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        IOleInPlaceActiveObjectVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, SegmentScope scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    static final FunctionDescriptor GetWindow$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetWindow_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetWindow_UP$MH = RuntimeHelper.upcallHandle(GetWindow.class, "apply", IOleInPlaceActiveObjectVtbl.GetWindow_UP$FUNC);
    static final FunctionDescriptor GetWindow_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetWindow_DOWN$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceActiveObjectVtbl.GetWindow_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetWindow)(IOleInPlaceActiveObject*,HWND*);
     * }
     */
    public interface GetWindow {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetWindow fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IOleInPlaceActiveObjectVtbl.GetWindow_UP$MH, fi, IOleInPlaceActiveObjectVtbl.GetWindow$FUNC, scope);
        }
        static GetWindow ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IOleInPlaceActiveObjectVtbl.GetWindow_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetWindow$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetWindow"));
    public static VarHandle GetWindow$VH() {
        return IOleInPlaceActiveObjectVtbl.GetWindow$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetWindow)(IOleInPlaceActiveObject*,HWND*);
     * }
     */
    public static MemorySegment GetWindow$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceActiveObjectVtbl.GetWindow$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetWindow)(IOleInPlaceActiveObject*,HWND*);
     * }
     */
    public static void GetWindow$set(MemorySegment seg, MemorySegment x) {
        IOleInPlaceActiveObjectVtbl.GetWindow$VH.set(seg, x);
    }
    public static MemorySegment GetWindow$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceActiveObjectVtbl.GetWindow$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetWindow$set(MemorySegment seg, long index, MemorySegment x) {
        IOleInPlaceActiveObjectVtbl.GetWindow$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetWindow GetWindow(MemorySegment segment, SegmentScope scope) {
        return GetWindow.ofAddress(GetWindow$get(segment), scope);
    }
    static final FunctionDescriptor ContextSensitiveHelp$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor ContextSensitiveHelp_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle ContextSensitiveHelp_UP$MH = RuntimeHelper.upcallHandle(ContextSensitiveHelp.class, "apply", IOleInPlaceActiveObjectVtbl.ContextSensitiveHelp_UP$FUNC);
    static final FunctionDescriptor ContextSensitiveHelp_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle ContextSensitiveHelp_DOWN$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceActiveObjectVtbl.ContextSensitiveHelp_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*ContextSensitiveHelp)(IOleInPlaceActiveObject*,BOOL);
     * }
     */
    public interface ContextSensitiveHelp {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(ContextSensitiveHelp fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IOleInPlaceActiveObjectVtbl.ContextSensitiveHelp_UP$MH, fi, IOleInPlaceActiveObjectVtbl.ContextSensitiveHelp$FUNC, scope);
        }
        static ContextSensitiveHelp ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)IOleInPlaceActiveObjectVtbl.ContextSensitiveHelp_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ContextSensitiveHelp$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ContextSensitiveHelp"));
    public static VarHandle ContextSensitiveHelp$VH() {
        return IOleInPlaceActiveObjectVtbl.ContextSensitiveHelp$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*ContextSensitiveHelp)(IOleInPlaceActiveObject*,BOOL);
     * }
     */
    public static MemorySegment ContextSensitiveHelp$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceActiveObjectVtbl.ContextSensitiveHelp$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*ContextSensitiveHelp)(IOleInPlaceActiveObject*,BOOL);
     * }
     */
    public static void ContextSensitiveHelp$set(MemorySegment seg, MemorySegment x) {
        IOleInPlaceActiveObjectVtbl.ContextSensitiveHelp$VH.set(seg, x);
    }
    public static MemorySegment ContextSensitiveHelp$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceActiveObjectVtbl.ContextSensitiveHelp$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ContextSensitiveHelp$set(MemorySegment seg, long index, MemorySegment x) {
        IOleInPlaceActiveObjectVtbl.ContextSensitiveHelp$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ContextSensitiveHelp ContextSensitiveHelp(MemorySegment segment, SegmentScope scope) {
        return ContextSensitiveHelp.ofAddress(ContextSensitiveHelp$get(segment), scope);
    }
    static final FunctionDescriptor TranslateAcceleratorA$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor TranslateAcceleratorA_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle TranslateAcceleratorA_UP$MH = RuntimeHelper.upcallHandle(TranslateAcceleratorA.class, "apply", IOleInPlaceActiveObjectVtbl.TranslateAcceleratorA_UP$FUNC);
    static final FunctionDescriptor TranslateAcceleratorA_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle TranslateAcceleratorA_DOWN$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceActiveObjectVtbl.TranslateAcceleratorA_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*TranslateAcceleratorA)(IOleInPlaceActiveObject*,LPMSG);
     * }
     */
    public interface TranslateAcceleratorA {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(TranslateAcceleratorA fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IOleInPlaceActiveObjectVtbl.TranslateAcceleratorA_UP$MH, fi, IOleInPlaceActiveObjectVtbl.TranslateAcceleratorA$FUNC, scope);
        }
        static TranslateAcceleratorA ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IOleInPlaceActiveObjectVtbl.TranslateAcceleratorA_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle TranslateAcceleratorA$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("TranslateAcceleratorA"));
    public static VarHandle TranslateAcceleratorA$VH() {
        return IOleInPlaceActiveObjectVtbl.TranslateAcceleratorA$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*TranslateAcceleratorA)(IOleInPlaceActiveObject*,LPMSG);
     * }
     */
    public static MemorySegment TranslateAcceleratorA$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceActiveObjectVtbl.TranslateAcceleratorA$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*TranslateAcceleratorA)(IOleInPlaceActiveObject*,LPMSG);
     * }
     */
    public static void TranslateAcceleratorA$set(MemorySegment seg, MemorySegment x) {
        IOleInPlaceActiveObjectVtbl.TranslateAcceleratorA$VH.set(seg, x);
    }
    public static MemorySegment TranslateAcceleratorA$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceActiveObjectVtbl.TranslateAcceleratorA$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void TranslateAcceleratorA$set(MemorySegment seg, long index, MemorySegment x) {
        IOleInPlaceActiveObjectVtbl.TranslateAcceleratorA$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static TranslateAcceleratorA TranslateAcceleratorA(MemorySegment segment, SegmentScope scope) {
        return TranslateAcceleratorA.ofAddress(TranslateAcceleratorA$get(segment), scope);
    }
    static final FunctionDescriptor OnFrameWindowActivate$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor OnFrameWindowActivate_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle OnFrameWindowActivate_UP$MH = RuntimeHelper.upcallHandle(OnFrameWindowActivate.class, "apply", IOleInPlaceActiveObjectVtbl.OnFrameWindowActivate_UP$FUNC);
    static final FunctionDescriptor OnFrameWindowActivate_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle OnFrameWindowActivate_DOWN$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceActiveObjectVtbl.OnFrameWindowActivate_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*OnFrameWindowActivate)(IOleInPlaceActiveObject*,BOOL);
     * }
     */
    public interface OnFrameWindowActivate {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(OnFrameWindowActivate fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IOleInPlaceActiveObjectVtbl.OnFrameWindowActivate_UP$MH, fi, IOleInPlaceActiveObjectVtbl.OnFrameWindowActivate$FUNC, scope);
        }
        static OnFrameWindowActivate ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)IOleInPlaceActiveObjectVtbl.OnFrameWindowActivate_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle OnFrameWindowActivate$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("OnFrameWindowActivate"));
    public static VarHandle OnFrameWindowActivate$VH() {
        return IOleInPlaceActiveObjectVtbl.OnFrameWindowActivate$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*OnFrameWindowActivate)(IOleInPlaceActiveObject*,BOOL);
     * }
     */
    public static MemorySegment OnFrameWindowActivate$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceActiveObjectVtbl.OnFrameWindowActivate$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*OnFrameWindowActivate)(IOleInPlaceActiveObject*,BOOL);
     * }
     */
    public static void OnFrameWindowActivate$set(MemorySegment seg, MemorySegment x) {
        IOleInPlaceActiveObjectVtbl.OnFrameWindowActivate$VH.set(seg, x);
    }
    public static MemorySegment OnFrameWindowActivate$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceActiveObjectVtbl.OnFrameWindowActivate$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void OnFrameWindowActivate$set(MemorySegment seg, long index, MemorySegment x) {
        IOleInPlaceActiveObjectVtbl.OnFrameWindowActivate$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static OnFrameWindowActivate OnFrameWindowActivate(MemorySegment segment, SegmentScope scope) {
        return OnFrameWindowActivate.ofAddress(OnFrameWindowActivate$get(segment), scope);
    }
    static final FunctionDescriptor OnDocWindowActivate$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor OnDocWindowActivate_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle OnDocWindowActivate_UP$MH = RuntimeHelper.upcallHandle(OnDocWindowActivate.class, "apply", IOleInPlaceActiveObjectVtbl.OnDocWindowActivate_UP$FUNC);
    static final FunctionDescriptor OnDocWindowActivate_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle OnDocWindowActivate_DOWN$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceActiveObjectVtbl.OnDocWindowActivate_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*OnDocWindowActivate)(IOleInPlaceActiveObject*,BOOL);
     * }
     */
    public interface OnDocWindowActivate {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(OnDocWindowActivate fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IOleInPlaceActiveObjectVtbl.OnDocWindowActivate_UP$MH, fi, IOleInPlaceActiveObjectVtbl.OnDocWindowActivate$FUNC, scope);
        }
        static OnDocWindowActivate ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)IOleInPlaceActiveObjectVtbl.OnDocWindowActivate_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle OnDocWindowActivate$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("OnDocWindowActivate"));
    public static VarHandle OnDocWindowActivate$VH() {
        return IOleInPlaceActiveObjectVtbl.OnDocWindowActivate$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*OnDocWindowActivate)(IOleInPlaceActiveObject*,BOOL);
     * }
     */
    public static MemorySegment OnDocWindowActivate$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceActiveObjectVtbl.OnDocWindowActivate$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*OnDocWindowActivate)(IOleInPlaceActiveObject*,BOOL);
     * }
     */
    public static void OnDocWindowActivate$set(MemorySegment seg, MemorySegment x) {
        IOleInPlaceActiveObjectVtbl.OnDocWindowActivate$VH.set(seg, x);
    }
    public static MemorySegment OnDocWindowActivate$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceActiveObjectVtbl.OnDocWindowActivate$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void OnDocWindowActivate$set(MemorySegment seg, long index, MemorySegment x) {
        IOleInPlaceActiveObjectVtbl.OnDocWindowActivate$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static OnDocWindowActivate OnDocWindowActivate(MemorySegment segment, SegmentScope scope) {
        return OnDocWindowActivate.ofAddress(OnDocWindowActivate$get(segment), scope);
    }
    static final FunctionDescriptor ResizeBorder$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor ResizeBorder_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle ResizeBorder_UP$MH = RuntimeHelper.upcallHandle(ResizeBorder.class, "apply", IOleInPlaceActiveObjectVtbl.ResizeBorder_UP$FUNC);
    static final FunctionDescriptor ResizeBorder_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle ResizeBorder_DOWN$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceActiveObjectVtbl.ResizeBorder_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*ResizeBorder)(IOleInPlaceActiveObject*,LPCRECT,IOleInPlaceUIWindow*,BOOL);
     * }
     */
    public interface ResizeBorder {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3);
        static MemorySegment allocate(ResizeBorder fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IOleInPlaceActiveObjectVtbl.ResizeBorder_UP$MH, fi, IOleInPlaceActiveObjectVtbl.ResizeBorder$FUNC, scope);
        }
        static ResizeBorder ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3) -> {
                try {
                    return (int)IOleInPlaceActiveObjectVtbl.ResizeBorder_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ResizeBorder$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ResizeBorder"));
    public static VarHandle ResizeBorder$VH() {
        return IOleInPlaceActiveObjectVtbl.ResizeBorder$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*ResizeBorder)(IOleInPlaceActiveObject*,LPCRECT,IOleInPlaceUIWindow*,BOOL);
     * }
     */
    public static MemorySegment ResizeBorder$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceActiveObjectVtbl.ResizeBorder$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*ResizeBorder)(IOleInPlaceActiveObject*,LPCRECT,IOleInPlaceUIWindow*,BOOL);
     * }
     */
    public static void ResizeBorder$set(MemorySegment seg, MemorySegment x) {
        IOleInPlaceActiveObjectVtbl.ResizeBorder$VH.set(seg, x);
    }
    public static MemorySegment ResizeBorder$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceActiveObjectVtbl.ResizeBorder$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ResizeBorder$set(MemorySegment seg, long index, MemorySegment x) {
        IOleInPlaceActiveObjectVtbl.ResizeBorder$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ResizeBorder ResizeBorder(MemorySegment segment, SegmentScope scope) {
        return ResizeBorder.ofAddress(ResizeBorder$get(segment), scope);
    }
    static final FunctionDescriptor EnableModeless$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor EnableModeless_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle EnableModeless_UP$MH = RuntimeHelper.upcallHandle(EnableModeless.class, "apply", IOleInPlaceActiveObjectVtbl.EnableModeless_UP$FUNC);
    static final FunctionDescriptor EnableModeless_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle EnableModeless_DOWN$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceActiveObjectVtbl.EnableModeless_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*EnableModeless)(IOleInPlaceActiveObject*,BOOL);
     * }
     */
    public interface EnableModeless {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(EnableModeless fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IOleInPlaceActiveObjectVtbl.EnableModeless_UP$MH, fi, IOleInPlaceActiveObjectVtbl.EnableModeless$FUNC, scope);
        }
        static EnableModeless ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)IOleInPlaceActiveObjectVtbl.EnableModeless_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle EnableModeless$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("EnableModeless"));
    public static VarHandle EnableModeless$VH() {
        return IOleInPlaceActiveObjectVtbl.EnableModeless$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*EnableModeless)(IOleInPlaceActiveObject*,BOOL);
     * }
     */
    public static MemorySegment EnableModeless$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceActiveObjectVtbl.EnableModeless$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*EnableModeless)(IOleInPlaceActiveObject*,BOOL);
     * }
     */
    public static void EnableModeless$set(MemorySegment seg, MemorySegment x) {
        IOleInPlaceActiveObjectVtbl.EnableModeless$VH.set(seg, x);
    }
    public static MemorySegment EnableModeless$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceActiveObjectVtbl.EnableModeless$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void EnableModeless$set(MemorySegment seg, long index, MemorySegment x) {
        IOleInPlaceActiveObjectVtbl.EnableModeless$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static EnableModeless EnableModeless(MemorySegment segment, SegmentScope scope) {
        return EnableModeless.ofAddress(EnableModeless$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


