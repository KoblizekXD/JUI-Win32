// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct tagSERIALKEYSA {
 *     UINT cbSize;
 *     DWORD dwFlags;
 *     LPSTR lpszActivePort;
 *     LPSTR lpszPort;
 *     UINT iBaudRate;
 *     UINT iPortState;
 *     UINT iActive;
 * };
 * }
 */
public class tagSERIALKEYSA {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("cbSize"),
        Constants$root.C_LONG$LAYOUT.withName("dwFlags"),
        Constants$root.C_POINTER$LAYOUT.withName("lpszActivePort"),
        Constants$root.C_POINTER$LAYOUT.withName("lpszPort"),
        Constants$root.C_LONG$LAYOUT.withName("iBaudRate"),
        Constants$root.C_LONG$LAYOUT.withName("iPortState"),
        Constants$root.C_LONG$LAYOUT.withName("iActive"),
        MemoryLayout.paddingLayout(32)
    ).withName("tagSERIALKEYSA");
    public static MemoryLayout $LAYOUT() {
        return tagSERIALKEYSA.$struct$LAYOUT;
    }
    static final VarHandle cbSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cbSize"));
    public static VarHandle cbSize$VH() {
        return tagSERIALKEYSA.cbSize$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * UINT cbSize;
     * }
     */
    public static int cbSize$get(MemorySegment seg) {
        return (int)tagSERIALKEYSA.cbSize$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * UINT cbSize;
     * }
     */
    public static void cbSize$set(MemorySegment seg, int x) {
        tagSERIALKEYSA.cbSize$VH.set(seg, x);
    }
    public static int cbSize$get(MemorySegment seg, long index) {
        return (int)tagSERIALKEYSA.cbSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cbSize$set(MemorySegment seg, long index, int x) {
        tagSERIALKEYSA.cbSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwFlags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwFlags"));
    public static VarHandle dwFlags$VH() {
        return tagSERIALKEYSA.dwFlags$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwFlags;
     * }
     */
    public static int dwFlags$get(MemorySegment seg) {
        return (int)tagSERIALKEYSA.dwFlags$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwFlags;
     * }
     */
    public static void dwFlags$set(MemorySegment seg, int x) {
        tagSERIALKEYSA.dwFlags$VH.set(seg, x);
    }
    public static int dwFlags$get(MemorySegment seg, long index) {
        return (int)tagSERIALKEYSA.dwFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwFlags$set(MemorySegment seg, long index, int x) {
        tagSERIALKEYSA.dwFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lpszActivePort$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lpszActivePort"));
    public static VarHandle lpszActivePort$VH() {
        return tagSERIALKEYSA.lpszActivePort$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPSTR lpszActivePort;
     * }
     */
    public static MemorySegment lpszActivePort$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)tagSERIALKEYSA.lpszActivePort$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPSTR lpszActivePort;
     * }
     */
    public static void lpszActivePort$set(MemorySegment seg, MemorySegment x) {
        tagSERIALKEYSA.lpszActivePort$VH.set(seg, x);
    }
    public static MemorySegment lpszActivePort$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)tagSERIALKEYSA.lpszActivePort$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpszActivePort$set(MemorySegment seg, long index, MemorySegment x) {
        tagSERIALKEYSA.lpszActivePort$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lpszPort$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lpszPort"));
    public static VarHandle lpszPort$VH() {
        return tagSERIALKEYSA.lpszPort$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPSTR lpszPort;
     * }
     */
    public static MemorySegment lpszPort$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)tagSERIALKEYSA.lpszPort$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPSTR lpszPort;
     * }
     */
    public static void lpszPort$set(MemorySegment seg, MemorySegment x) {
        tagSERIALKEYSA.lpszPort$VH.set(seg, x);
    }
    public static MemorySegment lpszPort$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)tagSERIALKEYSA.lpszPort$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpszPort$set(MemorySegment seg, long index, MemorySegment x) {
        tagSERIALKEYSA.lpszPort$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle iBaudRate$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("iBaudRate"));
    public static VarHandle iBaudRate$VH() {
        return tagSERIALKEYSA.iBaudRate$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * UINT iBaudRate;
     * }
     */
    public static int iBaudRate$get(MemorySegment seg) {
        return (int)tagSERIALKEYSA.iBaudRate$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * UINT iBaudRate;
     * }
     */
    public static void iBaudRate$set(MemorySegment seg, int x) {
        tagSERIALKEYSA.iBaudRate$VH.set(seg, x);
    }
    public static int iBaudRate$get(MemorySegment seg, long index) {
        return (int)tagSERIALKEYSA.iBaudRate$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void iBaudRate$set(MemorySegment seg, long index, int x) {
        tagSERIALKEYSA.iBaudRate$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle iPortState$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("iPortState"));
    public static VarHandle iPortState$VH() {
        return tagSERIALKEYSA.iPortState$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * UINT iPortState;
     * }
     */
    public static int iPortState$get(MemorySegment seg) {
        return (int)tagSERIALKEYSA.iPortState$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * UINT iPortState;
     * }
     */
    public static void iPortState$set(MemorySegment seg, int x) {
        tagSERIALKEYSA.iPortState$VH.set(seg, x);
    }
    public static int iPortState$get(MemorySegment seg, long index) {
        return (int)tagSERIALKEYSA.iPortState$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void iPortState$set(MemorySegment seg, long index, int x) {
        tagSERIALKEYSA.iPortState$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle iActive$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("iActive"));
    public static VarHandle iActive$VH() {
        return tagSERIALKEYSA.iActive$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * UINT iActive;
     * }
     */
    public static int iActive$get(MemorySegment seg) {
        return (int)tagSERIALKEYSA.iActive$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * UINT iActive;
     * }
     */
    public static void iActive$set(MemorySegment seg, int x) {
        tagSERIALKEYSA.iActive$VH.set(seg, x);
    }
    public static int iActive$get(MemorySegment seg, long index) {
        return (int)tagSERIALKEYSA.iActive$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void iActive$set(MemorySegment seg, long index, int x) {
        tagSERIALKEYSA.iActive$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


