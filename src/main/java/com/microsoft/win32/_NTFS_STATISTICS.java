// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _NTFS_STATISTICS {
 *     DWORD LogFileFullExceptions;
 *     DWORD OtherExceptions;
 *     DWORD MftReads;
 *     DWORD MftReadBytes;
 *     DWORD MftWrites;
 *     DWORD MftWriteBytes;
 *     struct  MftWritesUserLevel;
 *     WORD MftWritesFlushForLogFileFull;
 *     WORD MftWritesLazyWriter;
 *     WORD MftWritesUserRequest;
 *     DWORD Mft2Writes;
 *     DWORD Mft2WriteBytes;
 *     struct  Mft2WritesUserLevel;
 *     WORD Mft2WritesFlushForLogFileFull;
 *     WORD Mft2WritesLazyWriter;
 *     WORD Mft2WritesUserRequest;
 *     DWORD RootIndexReads;
 *     DWORD RootIndexReadBytes;
 *     DWORD RootIndexWrites;
 *     DWORD RootIndexWriteBytes;
 *     DWORD BitmapReads;
 *     DWORD BitmapReadBytes;
 *     DWORD BitmapWrites;
 *     DWORD BitmapWriteBytes;
 *     WORD BitmapWritesFlushForLogFileFull;
 *     WORD BitmapWritesLazyWriter;
 *     WORD BitmapWritesUserRequest;
 *     struct  BitmapWritesUserLevel;
 *     DWORD MftBitmapReads;
 *     DWORD MftBitmapReadBytes;
 *     DWORD MftBitmapWrites;
 *     DWORD MftBitmapWriteBytes;
 *     WORD MftBitmapWritesFlushForLogFileFull;
 *     WORD MftBitmapWritesLazyWriter;
 *     WORD MftBitmapWritesUserRequest;
 *     struct  MftBitmapWritesUserLevel;
 *     DWORD UserIndexReads;
 *     DWORD UserIndexReadBytes;
 *     DWORD UserIndexWrites;
 *     DWORD UserIndexWriteBytes;
 *     DWORD LogFileReads;
 *     DWORD LogFileReadBytes;
 *     DWORD LogFileWrites;
 *     DWORD LogFileWriteBytes;
 *     struct  Allocate;
 *     DWORD DiskResourcesExhausted;
 * };
 * }
 */
public class _NTFS_STATISTICS {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("LogFileFullExceptions"),
        Constants$root.C_LONG$LAYOUT.withName("OtherExceptions"),
        Constants$root.C_LONG$LAYOUT.withName("MftReads"),
        Constants$root.C_LONG$LAYOUT.withName("MftReadBytes"),
        Constants$root.C_LONG$LAYOUT.withName("MftWrites"),
        Constants$root.C_LONG$LAYOUT.withName("MftWriteBytes"),
        MemoryLayout.structLayout(
            Constants$root.C_SHORT$LAYOUT.withName("Write"),
            Constants$root.C_SHORT$LAYOUT.withName("Create"),
            Constants$root.C_SHORT$LAYOUT.withName("SetInfo"),
            Constants$root.C_SHORT$LAYOUT.withName("Flush")
        ).withName("MftWritesUserLevel"),
        Constants$root.C_SHORT$LAYOUT.withName("MftWritesFlushForLogFileFull"),
        Constants$root.C_SHORT$LAYOUT.withName("MftWritesLazyWriter"),
        Constants$root.C_SHORT$LAYOUT.withName("MftWritesUserRequest"),
        MemoryLayout.paddingLayout(16),
        Constants$root.C_LONG$LAYOUT.withName("Mft2Writes"),
        Constants$root.C_LONG$LAYOUT.withName("Mft2WriteBytes"),
        MemoryLayout.structLayout(
            Constants$root.C_SHORT$LAYOUT.withName("Write"),
            Constants$root.C_SHORT$LAYOUT.withName("Create"),
            Constants$root.C_SHORT$LAYOUT.withName("SetInfo"),
            Constants$root.C_SHORT$LAYOUT.withName("Flush")
        ).withName("Mft2WritesUserLevel"),
        Constants$root.C_SHORT$LAYOUT.withName("Mft2WritesFlushForLogFileFull"),
        Constants$root.C_SHORT$LAYOUT.withName("Mft2WritesLazyWriter"),
        Constants$root.C_SHORT$LAYOUT.withName("Mft2WritesUserRequest"),
        MemoryLayout.paddingLayout(16),
        Constants$root.C_LONG$LAYOUT.withName("RootIndexReads"),
        Constants$root.C_LONG$LAYOUT.withName("RootIndexReadBytes"),
        Constants$root.C_LONG$LAYOUT.withName("RootIndexWrites"),
        Constants$root.C_LONG$LAYOUT.withName("RootIndexWriteBytes"),
        Constants$root.C_LONG$LAYOUT.withName("BitmapReads"),
        Constants$root.C_LONG$LAYOUT.withName("BitmapReadBytes"),
        Constants$root.C_LONG$LAYOUT.withName("BitmapWrites"),
        Constants$root.C_LONG$LAYOUT.withName("BitmapWriteBytes"),
        Constants$root.C_SHORT$LAYOUT.withName("BitmapWritesFlushForLogFileFull"),
        Constants$root.C_SHORT$LAYOUT.withName("BitmapWritesLazyWriter"),
        Constants$root.C_SHORT$LAYOUT.withName("BitmapWritesUserRequest"),
        MemoryLayout.structLayout(
            Constants$root.C_SHORT$LAYOUT.withName("Write"),
            Constants$root.C_SHORT$LAYOUT.withName("Create"),
            Constants$root.C_SHORT$LAYOUT.withName("SetInfo")
        ).withName("BitmapWritesUserLevel"),
        Constants$root.C_LONG$LAYOUT.withName("MftBitmapReads"),
        Constants$root.C_LONG$LAYOUT.withName("MftBitmapReadBytes"),
        Constants$root.C_LONG$LAYOUT.withName("MftBitmapWrites"),
        Constants$root.C_LONG$LAYOUT.withName("MftBitmapWriteBytes"),
        Constants$root.C_SHORT$LAYOUT.withName("MftBitmapWritesFlushForLogFileFull"),
        Constants$root.C_SHORT$LAYOUT.withName("MftBitmapWritesLazyWriter"),
        Constants$root.C_SHORT$LAYOUT.withName("MftBitmapWritesUserRequest"),
        MemoryLayout.structLayout(
            Constants$root.C_SHORT$LAYOUT.withName("Write"),
            Constants$root.C_SHORT$LAYOUT.withName("Create"),
            Constants$root.C_SHORT$LAYOUT.withName("SetInfo"),
            Constants$root.C_SHORT$LAYOUT.withName("Flush")
        ).withName("MftBitmapWritesUserLevel"),
        MemoryLayout.paddingLayout(16),
        Constants$root.C_LONG$LAYOUT.withName("UserIndexReads"),
        Constants$root.C_LONG$LAYOUT.withName("UserIndexReadBytes"),
        Constants$root.C_LONG$LAYOUT.withName("UserIndexWrites"),
        Constants$root.C_LONG$LAYOUT.withName("UserIndexWriteBytes"),
        Constants$root.C_LONG$LAYOUT.withName("LogFileReads"),
        Constants$root.C_LONG$LAYOUT.withName("LogFileReadBytes"),
        Constants$root.C_LONG$LAYOUT.withName("LogFileWrites"),
        Constants$root.C_LONG$LAYOUT.withName("LogFileWriteBytes"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("Calls"),
            Constants$root.C_LONG$LAYOUT.withName("Clusters"),
            Constants$root.C_LONG$LAYOUT.withName("Hints"),
            Constants$root.C_LONG$LAYOUT.withName("RunsReturned"),
            Constants$root.C_LONG$LAYOUT.withName("HintsHonored"),
            Constants$root.C_LONG$LAYOUT.withName("HintsClusters"),
            Constants$root.C_LONG$LAYOUT.withName("Cache"),
            Constants$root.C_LONG$LAYOUT.withName("CacheClusters"),
            Constants$root.C_LONG$LAYOUT.withName("CacheMiss"),
            Constants$root.C_LONG$LAYOUT.withName("CacheMissClusters")
        ).withName("Allocate"),
        Constants$root.C_LONG$LAYOUT.withName("DiskResourcesExhausted")
    ).withName("_NTFS_STATISTICS");
    public static MemoryLayout $LAYOUT() {
        return _NTFS_STATISTICS.$struct$LAYOUT;
    }
    static final VarHandle LogFileFullExceptions$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("LogFileFullExceptions"));
    public static VarHandle LogFileFullExceptions$VH() {
        return _NTFS_STATISTICS.LogFileFullExceptions$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD LogFileFullExceptions;
     * }
     */
    public static int LogFileFullExceptions$get(MemorySegment seg) {
        return (int)_NTFS_STATISTICS.LogFileFullExceptions$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD LogFileFullExceptions;
     * }
     */
    public static void LogFileFullExceptions$set(MemorySegment seg, int x) {
        _NTFS_STATISTICS.LogFileFullExceptions$VH.set(seg, x);
    }
    public static int LogFileFullExceptions$get(MemorySegment seg, long index) {
        return (int)_NTFS_STATISTICS.LogFileFullExceptions$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void LogFileFullExceptions$set(MemorySegment seg, long index, int x) {
        _NTFS_STATISTICS.LogFileFullExceptions$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle OtherExceptions$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("OtherExceptions"));
    public static VarHandle OtherExceptions$VH() {
        return _NTFS_STATISTICS.OtherExceptions$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD OtherExceptions;
     * }
     */
    public static int OtherExceptions$get(MemorySegment seg) {
        return (int)_NTFS_STATISTICS.OtherExceptions$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD OtherExceptions;
     * }
     */
    public static void OtherExceptions$set(MemorySegment seg, int x) {
        _NTFS_STATISTICS.OtherExceptions$VH.set(seg, x);
    }
    public static int OtherExceptions$get(MemorySegment seg, long index) {
        return (int)_NTFS_STATISTICS.OtherExceptions$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void OtherExceptions$set(MemorySegment seg, long index, int x) {
        _NTFS_STATISTICS.OtherExceptions$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MftReads$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("MftReads"));
    public static VarHandle MftReads$VH() {
        return _NTFS_STATISTICS.MftReads$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD MftReads;
     * }
     */
    public static int MftReads$get(MemorySegment seg) {
        return (int)_NTFS_STATISTICS.MftReads$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD MftReads;
     * }
     */
    public static void MftReads$set(MemorySegment seg, int x) {
        _NTFS_STATISTICS.MftReads$VH.set(seg, x);
    }
    public static int MftReads$get(MemorySegment seg, long index) {
        return (int)_NTFS_STATISTICS.MftReads$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MftReads$set(MemorySegment seg, long index, int x) {
        _NTFS_STATISTICS.MftReads$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MftReadBytes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("MftReadBytes"));
    public static VarHandle MftReadBytes$VH() {
        return _NTFS_STATISTICS.MftReadBytes$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD MftReadBytes;
     * }
     */
    public static int MftReadBytes$get(MemorySegment seg) {
        return (int)_NTFS_STATISTICS.MftReadBytes$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD MftReadBytes;
     * }
     */
    public static void MftReadBytes$set(MemorySegment seg, int x) {
        _NTFS_STATISTICS.MftReadBytes$VH.set(seg, x);
    }
    public static int MftReadBytes$get(MemorySegment seg, long index) {
        return (int)_NTFS_STATISTICS.MftReadBytes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MftReadBytes$set(MemorySegment seg, long index, int x) {
        _NTFS_STATISTICS.MftReadBytes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MftWrites$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("MftWrites"));
    public static VarHandle MftWrites$VH() {
        return _NTFS_STATISTICS.MftWrites$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD MftWrites;
     * }
     */
    public static int MftWrites$get(MemorySegment seg) {
        return (int)_NTFS_STATISTICS.MftWrites$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD MftWrites;
     * }
     */
    public static void MftWrites$set(MemorySegment seg, int x) {
        _NTFS_STATISTICS.MftWrites$VH.set(seg, x);
    }
    public static int MftWrites$get(MemorySegment seg, long index) {
        return (int)_NTFS_STATISTICS.MftWrites$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MftWrites$set(MemorySegment seg, long index, int x) {
        _NTFS_STATISTICS.MftWrites$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MftWriteBytes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("MftWriteBytes"));
    public static VarHandle MftWriteBytes$VH() {
        return _NTFS_STATISTICS.MftWriteBytes$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD MftWriteBytes;
     * }
     */
    public static int MftWriteBytes$get(MemorySegment seg) {
        return (int)_NTFS_STATISTICS.MftWriteBytes$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD MftWriteBytes;
     * }
     */
    public static void MftWriteBytes$set(MemorySegment seg, int x) {
        _NTFS_STATISTICS.MftWriteBytes$VH.set(seg, x);
    }
    public static int MftWriteBytes$get(MemorySegment seg, long index) {
        return (int)_NTFS_STATISTICS.MftWriteBytes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MftWriteBytes$set(MemorySegment seg, long index, int x) {
        _NTFS_STATISTICS.MftWriteBytes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
     * struct {
     *     WORD Write;
     *     WORD Create;
     *     WORD SetInfo;
     *     WORD Flush;
     * };
     * }
     */
    public static final class MftWritesUserLevel {

        // Suppresses default constructor, ensuring non-instantiability.
        private MftWritesUserLevel() {}
        static final StructLayout MftWritesUserLevel$struct$LAYOUT = MemoryLayout.structLayout(
            Constants$root.C_SHORT$LAYOUT.withName("Write"),
            Constants$root.C_SHORT$LAYOUT.withName("Create"),
            Constants$root.C_SHORT$LAYOUT.withName("SetInfo"),
            Constants$root.C_SHORT$LAYOUT.withName("Flush")
        );
        public static MemoryLayout $LAYOUT() {
            return MftWritesUserLevel.MftWritesUserLevel$struct$LAYOUT;
        }
        static final VarHandle Write$VH = MftWritesUserLevel$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Write"));
        public static VarHandle Write$VH() {
            return MftWritesUserLevel.Write$VH;
        }
        /**
         * Getter for field:
         * {@snippet :
         * WORD Write;
         * }
         */
        public static short Write$get(MemorySegment seg) {
            return (short)MftWritesUserLevel.Write$VH.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * WORD Write;
         * }
         */
        public static void Write$set(MemorySegment seg, short x) {
            MftWritesUserLevel.Write$VH.set(seg, x);
        }
        public static short Write$get(MemorySegment seg, long index) {
            return (short)MftWritesUserLevel.Write$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void Write$set(MemorySegment seg, long index, short x) {
            MftWritesUserLevel.Write$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle Create$VH = MftWritesUserLevel$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Create"));
        public static VarHandle Create$VH() {
            return MftWritesUserLevel.Create$VH;
        }
        /**
         * Getter for field:
         * {@snippet :
         * WORD Create;
         * }
         */
        public static short Create$get(MemorySegment seg) {
            return (short)MftWritesUserLevel.Create$VH.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * WORD Create;
         * }
         */
        public static void Create$set(MemorySegment seg, short x) {
            MftWritesUserLevel.Create$VH.set(seg, x);
        }
        public static short Create$get(MemorySegment seg, long index) {
            return (short)MftWritesUserLevel.Create$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void Create$set(MemorySegment seg, long index, short x) {
            MftWritesUserLevel.Create$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle SetInfo$VH = MftWritesUserLevel$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetInfo"));
        public static VarHandle SetInfo$VH() {
            return MftWritesUserLevel.SetInfo$VH;
        }
        /**
         * Getter for field:
         * {@snippet :
         * WORD SetInfo;
         * }
         */
        public static short SetInfo$get(MemorySegment seg) {
            return (short)MftWritesUserLevel.SetInfo$VH.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * WORD SetInfo;
         * }
         */
        public static void SetInfo$set(MemorySegment seg, short x) {
            MftWritesUserLevel.SetInfo$VH.set(seg, x);
        }
        public static short SetInfo$get(MemorySegment seg, long index) {
            return (short)MftWritesUserLevel.SetInfo$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void SetInfo$set(MemorySegment seg, long index, short x) {
            MftWritesUserLevel.SetInfo$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle Flush$VH = MftWritesUserLevel$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Flush"));
        public static VarHandle Flush$VH() {
            return MftWritesUserLevel.Flush$VH;
        }
        /**
         * Getter for field:
         * {@snippet :
         * WORD Flush;
         * }
         */
        public static short Flush$get(MemorySegment seg) {
            return (short)MftWritesUserLevel.Flush$VH.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * WORD Flush;
         * }
         */
        public static void Flush$set(MemorySegment seg, short x) {
            MftWritesUserLevel.Flush$VH.set(seg, x);
        }
        public static short Flush$get(MemorySegment seg, long index) {
            return (short)MftWritesUserLevel.Flush$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void Flush$set(MemorySegment seg, long index, short x) {
            MftWritesUserLevel.Flush$VH.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
    }

    public static MemorySegment MftWritesUserLevel$slice(MemorySegment seg) {
        return seg.asSlice(24, 8);
    }
    static final VarHandle MftWritesFlushForLogFileFull$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("MftWritesFlushForLogFileFull"));
    public static VarHandle MftWritesFlushForLogFileFull$VH() {
        return _NTFS_STATISTICS.MftWritesFlushForLogFileFull$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD MftWritesFlushForLogFileFull;
     * }
     */
    public static short MftWritesFlushForLogFileFull$get(MemorySegment seg) {
        return (short)_NTFS_STATISTICS.MftWritesFlushForLogFileFull$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD MftWritesFlushForLogFileFull;
     * }
     */
    public static void MftWritesFlushForLogFileFull$set(MemorySegment seg, short x) {
        _NTFS_STATISTICS.MftWritesFlushForLogFileFull$VH.set(seg, x);
    }
    public static short MftWritesFlushForLogFileFull$get(MemorySegment seg, long index) {
        return (short)_NTFS_STATISTICS.MftWritesFlushForLogFileFull$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MftWritesFlushForLogFileFull$set(MemorySegment seg, long index, short x) {
        _NTFS_STATISTICS.MftWritesFlushForLogFileFull$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MftWritesLazyWriter$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("MftWritesLazyWriter"));
    public static VarHandle MftWritesLazyWriter$VH() {
        return _NTFS_STATISTICS.MftWritesLazyWriter$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD MftWritesLazyWriter;
     * }
     */
    public static short MftWritesLazyWriter$get(MemorySegment seg) {
        return (short)_NTFS_STATISTICS.MftWritesLazyWriter$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD MftWritesLazyWriter;
     * }
     */
    public static void MftWritesLazyWriter$set(MemorySegment seg, short x) {
        _NTFS_STATISTICS.MftWritesLazyWriter$VH.set(seg, x);
    }
    public static short MftWritesLazyWriter$get(MemorySegment seg, long index) {
        return (short)_NTFS_STATISTICS.MftWritesLazyWriter$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MftWritesLazyWriter$set(MemorySegment seg, long index, short x) {
        _NTFS_STATISTICS.MftWritesLazyWriter$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MftWritesUserRequest$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("MftWritesUserRequest"));
    public static VarHandle MftWritesUserRequest$VH() {
        return _NTFS_STATISTICS.MftWritesUserRequest$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD MftWritesUserRequest;
     * }
     */
    public static short MftWritesUserRequest$get(MemorySegment seg) {
        return (short)_NTFS_STATISTICS.MftWritesUserRequest$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD MftWritesUserRequest;
     * }
     */
    public static void MftWritesUserRequest$set(MemorySegment seg, short x) {
        _NTFS_STATISTICS.MftWritesUserRequest$VH.set(seg, x);
    }
    public static short MftWritesUserRequest$get(MemorySegment seg, long index) {
        return (short)_NTFS_STATISTICS.MftWritesUserRequest$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MftWritesUserRequest$set(MemorySegment seg, long index, short x) {
        _NTFS_STATISTICS.MftWritesUserRequest$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Mft2Writes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Mft2Writes"));
    public static VarHandle Mft2Writes$VH() {
        return _NTFS_STATISTICS.Mft2Writes$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Mft2Writes;
     * }
     */
    public static int Mft2Writes$get(MemorySegment seg) {
        return (int)_NTFS_STATISTICS.Mft2Writes$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Mft2Writes;
     * }
     */
    public static void Mft2Writes$set(MemorySegment seg, int x) {
        _NTFS_STATISTICS.Mft2Writes$VH.set(seg, x);
    }
    public static int Mft2Writes$get(MemorySegment seg, long index) {
        return (int)_NTFS_STATISTICS.Mft2Writes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Mft2Writes$set(MemorySegment seg, long index, int x) {
        _NTFS_STATISTICS.Mft2Writes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Mft2WriteBytes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Mft2WriteBytes"));
    public static VarHandle Mft2WriteBytes$VH() {
        return _NTFS_STATISTICS.Mft2WriteBytes$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Mft2WriteBytes;
     * }
     */
    public static int Mft2WriteBytes$get(MemorySegment seg) {
        return (int)_NTFS_STATISTICS.Mft2WriteBytes$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Mft2WriteBytes;
     * }
     */
    public static void Mft2WriteBytes$set(MemorySegment seg, int x) {
        _NTFS_STATISTICS.Mft2WriteBytes$VH.set(seg, x);
    }
    public static int Mft2WriteBytes$get(MemorySegment seg, long index) {
        return (int)_NTFS_STATISTICS.Mft2WriteBytes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Mft2WriteBytes$set(MemorySegment seg, long index, int x) {
        _NTFS_STATISTICS.Mft2WriteBytes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
     * struct {
     *     WORD Write;
     *     WORD Create;
     *     WORD SetInfo;
     *     WORD Flush;
     * };
     * }
     */
    public static final class Mft2WritesUserLevel {

        // Suppresses default constructor, ensuring non-instantiability.
        private Mft2WritesUserLevel() {}
        static final StructLayout Mft2WritesUserLevel$struct$LAYOUT = MemoryLayout.structLayout(
            Constants$root.C_SHORT$LAYOUT.withName("Write"),
            Constants$root.C_SHORT$LAYOUT.withName("Create"),
            Constants$root.C_SHORT$LAYOUT.withName("SetInfo"),
            Constants$root.C_SHORT$LAYOUT.withName("Flush")
        );
        public static MemoryLayout $LAYOUT() {
            return Mft2WritesUserLevel.Mft2WritesUserLevel$struct$LAYOUT;
        }
        static final VarHandle Write$VH = Mft2WritesUserLevel$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Write"));
        public static VarHandle Write$VH() {
            return Mft2WritesUserLevel.Write$VH;
        }
        /**
         * Getter for field:
         * {@snippet :
         * WORD Write;
         * }
         */
        public static short Write$get(MemorySegment seg) {
            return (short)Mft2WritesUserLevel.Write$VH.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * WORD Write;
         * }
         */
        public static void Write$set(MemorySegment seg, short x) {
            Mft2WritesUserLevel.Write$VH.set(seg, x);
        }
        public static short Write$get(MemorySegment seg, long index) {
            return (short)Mft2WritesUserLevel.Write$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void Write$set(MemorySegment seg, long index, short x) {
            Mft2WritesUserLevel.Write$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle Create$VH = Mft2WritesUserLevel$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Create"));
        public static VarHandle Create$VH() {
            return Mft2WritesUserLevel.Create$VH;
        }
        /**
         * Getter for field:
         * {@snippet :
         * WORD Create;
         * }
         */
        public static short Create$get(MemorySegment seg) {
            return (short)Mft2WritesUserLevel.Create$VH.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * WORD Create;
         * }
         */
        public static void Create$set(MemorySegment seg, short x) {
            Mft2WritesUserLevel.Create$VH.set(seg, x);
        }
        public static short Create$get(MemorySegment seg, long index) {
            return (short)Mft2WritesUserLevel.Create$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void Create$set(MemorySegment seg, long index, short x) {
            Mft2WritesUserLevel.Create$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle SetInfo$VH = Mft2WritesUserLevel$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetInfo"));
        public static VarHandle SetInfo$VH() {
            return Mft2WritesUserLevel.SetInfo$VH;
        }
        /**
         * Getter for field:
         * {@snippet :
         * WORD SetInfo;
         * }
         */
        public static short SetInfo$get(MemorySegment seg) {
            return (short)Mft2WritesUserLevel.SetInfo$VH.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * WORD SetInfo;
         * }
         */
        public static void SetInfo$set(MemorySegment seg, short x) {
            Mft2WritesUserLevel.SetInfo$VH.set(seg, x);
        }
        public static short SetInfo$get(MemorySegment seg, long index) {
            return (short)Mft2WritesUserLevel.SetInfo$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void SetInfo$set(MemorySegment seg, long index, short x) {
            Mft2WritesUserLevel.SetInfo$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle Flush$VH = Mft2WritesUserLevel$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Flush"));
        public static VarHandle Flush$VH() {
            return Mft2WritesUserLevel.Flush$VH;
        }
        /**
         * Getter for field:
         * {@snippet :
         * WORD Flush;
         * }
         */
        public static short Flush$get(MemorySegment seg) {
            return (short)Mft2WritesUserLevel.Flush$VH.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * WORD Flush;
         * }
         */
        public static void Flush$set(MemorySegment seg, short x) {
            Mft2WritesUserLevel.Flush$VH.set(seg, x);
        }
        public static short Flush$get(MemorySegment seg, long index) {
            return (short)Mft2WritesUserLevel.Flush$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void Flush$set(MemorySegment seg, long index, short x) {
            Mft2WritesUserLevel.Flush$VH.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
    }

    public static MemorySegment Mft2WritesUserLevel$slice(MemorySegment seg) {
        return seg.asSlice(48, 8);
    }
    static final VarHandle Mft2WritesFlushForLogFileFull$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Mft2WritesFlushForLogFileFull"));
    public static VarHandle Mft2WritesFlushForLogFileFull$VH() {
        return _NTFS_STATISTICS.Mft2WritesFlushForLogFileFull$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD Mft2WritesFlushForLogFileFull;
     * }
     */
    public static short Mft2WritesFlushForLogFileFull$get(MemorySegment seg) {
        return (short)_NTFS_STATISTICS.Mft2WritesFlushForLogFileFull$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD Mft2WritesFlushForLogFileFull;
     * }
     */
    public static void Mft2WritesFlushForLogFileFull$set(MemorySegment seg, short x) {
        _NTFS_STATISTICS.Mft2WritesFlushForLogFileFull$VH.set(seg, x);
    }
    public static short Mft2WritesFlushForLogFileFull$get(MemorySegment seg, long index) {
        return (short)_NTFS_STATISTICS.Mft2WritesFlushForLogFileFull$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Mft2WritesFlushForLogFileFull$set(MemorySegment seg, long index, short x) {
        _NTFS_STATISTICS.Mft2WritesFlushForLogFileFull$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Mft2WritesLazyWriter$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Mft2WritesLazyWriter"));
    public static VarHandle Mft2WritesLazyWriter$VH() {
        return _NTFS_STATISTICS.Mft2WritesLazyWriter$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD Mft2WritesLazyWriter;
     * }
     */
    public static short Mft2WritesLazyWriter$get(MemorySegment seg) {
        return (short)_NTFS_STATISTICS.Mft2WritesLazyWriter$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD Mft2WritesLazyWriter;
     * }
     */
    public static void Mft2WritesLazyWriter$set(MemorySegment seg, short x) {
        _NTFS_STATISTICS.Mft2WritesLazyWriter$VH.set(seg, x);
    }
    public static short Mft2WritesLazyWriter$get(MemorySegment seg, long index) {
        return (short)_NTFS_STATISTICS.Mft2WritesLazyWriter$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Mft2WritesLazyWriter$set(MemorySegment seg, long index, short x) {
        _NTFS_STATISTICS.Mft2WritesLazyWriter$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Mft2WritesUserRequest$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Mft2WritesUserRequest"));
    public static VarHandle Mft2WritesUserRequest$VH() {
        return _NTFS_STATISTICS.Mft2WritesUserRequest$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD Mft2WritesUserRequest;
     * }
     */
    public static short Mft2WritesUserRequest$get(MemorySegment seg) {
        return (short)_NTFS_STATISTICS.Mft2WritesUserRequest$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD Mft2WritesUserRequest;
     * }
     */
    public static void Mft2WritesUserRequest$set(MemorySegment seg, short x) {
        _NTFS_STATISTICS.Mft2WritesUserRequest$VH.set(seg, x);
    }
    public static short Mft2WritesUserRequest$get(MemorySegment seg, long index) {
        return (short)_NTFS_STATISTICS.Mft2WritesUserRequest$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Mft2WritesUserRequest$set(MemorySegment seg, long index, short x) {
        _NTFS_STATISTICS.Mft2WritesUserRequest$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle RootIndexReads$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("RootIndexReads"));
    public static VarHandle RootIndexReads$VH() {
        return _NTFS_STATISTICS.RootIndexReads$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD RootIndexReads;
     * }
     */
    public static int RootIndexReads$get(MemorySegment seg) {
        return (int)_NTFS_STATISTICS.RootIndexReads$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD RootIndexReads;
     * }
     */
    public static void RootIndexReads$set(MemorySegment seg, int x) {
        _NTFS_STATISTICS.RootIndexReads$VH.set(seg, x);
    }
    public static int RootIndexReads$get(MemorySegment seg, long index) {
        return (int)_NTFS_STATISTICS.RootIndexReads$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void RootIndexReads$set(MemorySegment seg, long index, int x) {
        _NTFS_STATISTICS.RootIndexReads$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle RootIndexReadBytes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("RootIndexReadBytes"));
    public static VarHandle RootIndexReadBytes$VH() {
        return _NTFS_STATISTICS.RootIndexReadBytes$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD RootIndexReadBytes;
     * }
     */
    public static int RootIndexReadBytes$get(MemorySegment seg) {
        return (int)_NTFS_STATISTICS.RootIndexReadBytes$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD RootIndexReadBytes;
     * }
     */
    public static void RootIndexReadBytes$set(MemorySegment seg, int x) {
        _NTFS_STATISTICS.RootIndexReadBytes$VH.set(seg, x);
    }
    public static int RootIndexReadBytes$get(MemorySegment seg, long index) {
        return (int)_NTFS_STATISTICS.RootIndexReadBytes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void RootIndexReadBytes$set(MemorySegment seg, long index, int x) {
        _NTFS_STATISTICS.RootIndexReadBytes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle RootIndexWrites$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("RootIndexWrites"));
    public static VarHandle RootIndexWrites$VH() {
        return _NTFS_STATISTICS.RootIndexWrites$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD RootIndexWrites;
     * }
     */
    public static int RootIndexWrites$get(MemorySegment seg) {
        return (int)_NTFS_STATISTICS.RootIndexWrites$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD RootIndexWrites;
     * }
     */
    public static void RootIndexWrites$set(MemorySegment seg, int x) {
        _NTFS_STATISTICS.RootIndexWrites$VH.set(seg, x);
    }
    public static int RootIndexWrites$get(MemorySegment seg, long index) {
        return (int)_NTFS_STATISTICS.RootIndexWrites$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void RootIndexWrites$set(MemorySegment seg, long index, int x) {
        _NTFS_STATISTICS.RootIndexWrites$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle RootIndexWriteBytes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("RootIndexWriteBytes"));
    public static VarHandle RootIndexWriteBytes$VH() {
        return _NTFS_STATISTICS.RootIndexWriteBytes$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD RootIndexWriteBytes;
     * }
     */
    public static int RootIndexWriteBytes$get(MemorySegment seg) {
        return (int)_NTFS_STATISTICS.RootIndexWriteBytes$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD RootIndexWriteBytes;
     * }
     */
    public static void RootIndexWriteBytes$set(MemorySegment seg, int x) {
        _NTFS_STATISTICS.RootIndexWriteBytes$VH.set(seg, x);
    }
    public static int RootIndexWriteBytes$get(MemorySegment seg, long index) {
        return (int)_NTFS_STATISTICS.RootIndexWriteBytes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void RootIndexWriteBytes$set(MemorySegment seg, long index, int x) {
        _NTFS_STATISTICS.RootIndexWriteBytes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle BitmapReads$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("BitmapReads"));
    public static VarHandle BitmapReads$VH() {
        return _NTFS_STATISTICS.BitmapReads$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD BitmapReads;
     * }
     */
    public static int BitmapReads$get(MemorySegment seg) {
        return (int)_NTFS_STATISTICS.BitmapReads$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD BitmapReads;
     * }
     */
    public static void BitmapReads$set(MemorySegment seg, int x) {
        _NTFS_STATISTICS.BitmapReads$VH.set(seg, x);
    }
    public static int BitmapReads$get(MemorySegment seg, long index) {
        return (int)_NTFS_STATISTICS.BitmapReads$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void BitmapReads$set(MemorySegment seg, long index, int x) {
        _NTFS_STATISTICS.BitmapReads$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle BitmapReadBytes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("BitmapReadBytes"));
    public static VarHandle BitmapReadBytes$VH() {
        return _NTFS_STATISTICS.BitmapReadBytes$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD BitmapReadBytes;
     * }
     */
    public static int BitmapReadBytes$get(MemorySegment seg) {
        return (int)_NTFS_STATISTICS.BitmapReadBytes$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD BitmapReadBytes;
     * }
     */
    public static void BitmapReadBytes$set(MemorySegment seg, int x) {
        _NTFS_STATISTICS.BitmapReadBytes$VH.set(seg, x);
    }
    public static int BitmapReadBytes$get(MemorySegment seg, long index) {
        return (int)_NTFS_STATISTICS.BitmapReadBytes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void BitmapReadBytes$set(MemorySegment seg, long index, int x) {
        _NTFS_STATISTICS.BitmapReadBytes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle BitmapWrites$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("BitmapWrites"));
    public static VarHandle BitmapWrites$VH() {
        return _NTFS_STATISTICS.BitmapWrites$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD BitmapWrites;
     * }
     */
    public static int BitmapWrites$get(MemorySegment seg) {
        return (int)_NTFS_STATISTICS.BitmapWrites$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD BitmapWrites;
     * }
     */
    public static void BitmapWrites$set(MemorySegment seg, int x) {
        _NTFS_STATISTICS.BitmapWrites$VH.set(seg, x);
    }
    public static int BitmapWrites$get(MemorySegment seg, long index) {
        return (int)_NTFS_STATISTICS.BitmapWrites$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void BitmapWrites$set(MemorySegment seg, long index, int x) {
        _NTFS_STATISTICS.BitmapWrites$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle BitmapWriteBytes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("BitmapWriteBytes"));
    public static VarHandle BitmapWriteBytes$VH() {
        return _NTFS_STATISTICS.BitmapWriteBytes$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD BitmapWriteBytes;
     * }
     */
    public static int BitmapWriteBytes$get(MemorySegment seg) {
        return (int)_NTFS_STATISTICS.BitmapWriteBytes$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD BitmapWriteBytes;
     * }
     */
    public static void BitmapWriteBytes$set(MemorySegment seg, int x) {
        _NTFS_STATISTICS.BitmapWriteBytes$VH.set(seg, x);
    }
    public static int BitmapWriteBytes$get(MemorySegment seg, long index) {
        return (int)_NTFS_STATISTICS.BitmapWriteBytes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void BitmapWriteBytes$set(MemorySegment seg, long index, int x) {
        _NTFS_STATISTICS.BitmapWriteBytes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle BitmapWritesFlushForLogFileFull$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("BitmapWritesFlushForLogFileFull"));
    public static VarHandle BitmapWritesFlushForLogFileFull$VH() {
        return _NTFS_STATISTICS.BitmapWritesFlushForLogFileFull$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD BitmapWritesFlushForLogFileFull;
     * }
     */
    public static short BitmapWritesFlushForLogFileFull$get(MemorySegment seg) {
        return (short)_NTFS_STATISTICS.BitmapWritesFlushForLogFileFull$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD BitmapWritesFlushForLogFileFull;
     * }
     */
    public static void BitmapWritesFlushForLogFileFull$set(MemorySegment seg, short x) {
        _NTFS_STATISTICS.BitmapWritesFlushForLogFileFull$VH.set(seg, x);
    }
    public static short BitmapWritesFlushForLogFileFull$get(MemorySegment seg, long index) {
        return (short)_NTFS_STATISTICS.BitmapWritesFlushForLogFileFull$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void BitmapWritesFlushForLogFileFull$set(MemorySegment seg, long index, short x) {
        _NTFS_STATISTICS.BitmapWritesFlushForLogFileFull$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle BitmapWritesLazyWriter$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("BitmapWritesLazyWriter"));
    public static VarHandle BitmapWritesLazyWriter$VH() {
        return _NTFS_STATISTICS.BitmapWritesLazyWriter$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD BitmapWritesLazyWriter;
     * }
     */
    public static short BitmapWritesLazyWriter$get(MemorySegment seg) {
        return (short)_NTFS_STATISTICS.BitmapWritesLazyWriter$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD BitmapWritesLazyWriter;
     * }
     */
    public static void BitmapWritesLazyWriter$set(MemorySegment seg, short x) {
        _NTFS_STATISTICS.BitmapWritesLazyWriter$VH.set(seg, x);
    }
    public static short BitmapWritesLazyWriter$get(MemorySegment seg, long index) {
        return (short)_NTFS_STATISTICS.BitmapWritesLazyWriter$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void BitmapWritesLazyWriter$set(MemorySegment seg, long index, short x) {
        _NTFS_STATISTICS.BitmapWritesLazyWriter$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle BitmapWritesUserRequest$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("BitmapWritesUserRequest"));
    public static VarHandle BitmapWritesUserRequest$VH() {
        return _NTFS_STATISTICS.BitmapWritesUserRequest$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD BitmapWritesUserRequest;
     * }
     */
    public static short BitmapWritesUserRequest$get(MemorySegment seg) {
        return (short)_NTFS_STATISTICS.BitmapWritesUserRequest$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD BitmapWritesUserRequest;
     * }
     */
    public static void BitmapWritesUserRequest$set(MemorySegment seg, short x) {
        _NTFS_STATISTICS.BitmapWritesUserRequest$VH.set(seg, x);
    }
    public static short BitmapWritesUserRequest$get(MemorySegment seg, long index) {
        return (short)_NTFS_STATISTICS.BitmapWritesUserRequest$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void BitmapWritesUserRequest$set(MemorySegment seg, long index, short x) {
        _NTFS_STATISTICS.BitmapWritesUserRequest$VH.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
     * struct {
     *     WORD Write;
     *     WORD Create;
     *     WORD SetInfo;
     * };
     * }
     */
    public static final class BitmapWritesUserLevel {

        // Suppresses default constructor, ensuring non-instantiability.
        private BitmapWritesUserLevel() {}
        static final StructLayout BitmapWritesUserLevel$struct$LAYOUT = MemoryLayout.structLayout(
            Constants$root.C_SHORT$LAYOUT.withName("Write"),
            Constants$root.C_SHORT$LAYOUT.withName("Create"),
            Constants$root.C_SHORT$LAYOUT.withName("SetInfo")
        );
        public static MemoryLayout $LAYOUT() {
            return BitmapWritesUserLevel.BitmapWritesUserLevel$struct$LAYOUT;
        }
        static final VarHandle Write$VH = BitmapWritesUserLevel$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Write"));
        public static VarHandle Write$VH() {
            return BitmapWritesUserLevel.Write$VH;
        }
        /**
         * Getter for field:
         * {@snippet :
         * WORD Write;
         * }
         */
        public static short Write$get(MemorySegment seg) {
            return (short)BitmapWritesUserLevel.Write$VH.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * WORD Write;
         * }
         */
        public static void Write$set(MemorySegment seg, short x) {
            BitmapWritesUserLevel.Write$VH.set(seg, x);
        }
        public static short Write$get(MemorySegment seg, long index) {
            return (short)BitmapWritesUserLevel.Write$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void Write$set(MemorySegment seg, long index, short x) {
            BitmapWritesUserLevel.Write$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle Create$VH = BitmapWritesUserLevel$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Create"));
        public static VarHandle Create$VH() {
            return BitmapWritesUserLevel.Create$VH;
        }
        /**
         * Getter for field:
         * {@snippet :
         * WORD Create;
         * }
         */
        public static short Create$get(MemorySegment seg) {
            return (short)BitmapWritesUserLevel.Create$VH.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * WORD Create;
         * }
         */
        public static void Create$set(MemorySegment seg, short x) {
            BitmapWritesUserLevel.Create$VH.set(seg, x);
        }
        public static short Create$get(MemorySegment seg, long index) {
            return (short)BitmapWritesUserLevel.Create$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void Create$set(MemorySegment seg, long index, short x) {
            BitmapWritesUserLevel.Create$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle SetInfo$VH = BitmapWritesUserLevel$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetInfo"));
        public static VarHandle SetInfo$VH() {
            return BitmapWritesUserLevel.SetInfo$VH;
        }
        /**
         * Getter for field:
         * {@snippet :
         * WORD SetInfo;
         * }
         */
        public static short SetInfo$get(MemorySegment seg) {
            return (short)BitmapWritesUserLevel.SetInfo$VH.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * WORD SetInfo;
         * }
         */
        public static void SetInfo$set(MemorySegment seg, short x) {
            BitmapWritesUserLevel.SetInfo$VH.set(seg, x);
        }
        public static short SetInfo$get(MemorySegment seg, long index) {
            return (short)BitmapWritesUserLevel.SetInfo$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void SetInfo$set(MemorySegment seg, long index, short x) {
            BitmapWritesUserLevel.SetInfo$VH.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
    }

    public static MemorySegment BitmapWritesUserLevel$slice(MemorySegment seg) {
        return seg.asSlice(102, 6);
    }
    static final VarHandle MftBitmapReads$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("MftBitmapReads"));
    public static VarHandle MftBitmapReads$VH() {
        return _NTFS_STATISTICS.MftBitmapReads$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD MftBitmapReads;
     * }
     */
    public static int MftBitmapReads$get(MemorySegment seg) {
        return (int)_NTFS_STATISTICS.MftBitmapReads$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD MftBitmapReads;
     * }
     */
    public static void MftBitmapReads$set(MemorySegment seg, int x) {
        _NTFS_STATISTICS.MftBitmapReads$VH.set(seg, x);
    }
    public static int MftBitmapReads$get(MemorySegment seg, long index) {
        return (int)_NTFS_STATISTICS.MftBitmapReads$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MftBitmapReads$set(MemorySegment seg, long index, int x) {
        _NTFS_STATISTICS.MftBitmapReads$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MftBitmapReadBytes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("MftBitmapReadBytes"));
    public static VarHandle MftBitmapReadBytes$VH() {
        return _NTFS_STATISTICS.MftBitmapReadBytes$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD MftBitmapReadBytes;
     * }
     */
    public static int MftBitmapReadBytes$get(MemorySegment seg) {
        return (int)_NTFS_STATISTICS.MftBitmapReadBytes$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD MftBitmapReadBytes;
     * }
     */
    public static void MftBitmapReadBytes$set(MemorySegment seg, int x) {
        _NTFS_STATISTICS.MftBitmapReadBytes$VH.set(seg, x);
    }
    public static int MftBitmapReadBytes$get(MemorySegment seg, long index) {
        return (int)_NTFS_STATISTICS.MftBitmapReadBytes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MftBitmapReadBytes$set(MemorySegment seg, long index, int x) {
        _NTFS_STATISTICS.MftBitmapReadBytes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MftBitmapWrites$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("MftBitmapWrites"));
    public static VarHandle MftBitmapWrites$VH() {
        return _NTFS_STATISTICS.MftBitmapWrites$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD MftBitmapWrites;
     * }
     */
    public static int MftBitmapWrites$get(MemorySegment seg) {
        return (int)_NTFS_STATISTICS.MftBitmapWrites$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD MftBitmapWrites;
     * }
     */
    public static void MftBitmapWrites$set(MemorySegment seg, int x) {
        _NTFS_STATISTICS.MftBitmapWrites$VH.set(seg, x);
    }
    public static int MftBitmapWrites$get(MemorySegment seg, long index) {
        return (int)_NTFS_STATISTICS.MftBitmapWrites$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MftBitmapWrites$set(MemorySegment seg, long index, int x) {
        _NTFS_STATISTICS.MftBitmapWrites$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MftBitmapWriteBytes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("MftBitmapWriteBytes"));
    public static VarHandle MftBitmapWriteBytes$VH() {
        return _NTFS_STATISTICS.MftBitmapWriteBytes$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD MftBitmapWriteBytes;
     * }
     */
    public static int MftBitmapWriteBytes$get(MemorySegment seg) {
        return (int)_NTFS_STATISTICS.MftBitmapWriteBytes$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD MftBitmapWriteBytes;
     * }
     */
    public static void MftBitmapWriteBytes$set(MemorySegment seg, int x) {
        _NTFS_STATISTICS.MftBitmapWriteBytes$VH.set(seg, x);
    }
    public static int MftBitmapWriteBytes$get(MemorySegment seg, long index) {
        return (int)_NTFS_STATISTICS.MftBitmapWriteBytes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MftBitmapWriteBytes$set(MemorySegment seg, long index, int x) {
        _NTFS_STATISTICS.MftBitmapWriteBytes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MftBitmapWritesFlushForLogFileFull$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("MftBitmapWritesFlushForLogFileFull"));
    public static VarHandle MftBitmapWritesFlushForLogFileFull$VH() {
        return _NTFS_STATISTICS.MftBitmapWritesFlushForLogFileFull$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD MftBitmapWritesFlushForLogFileFull;
     * }
     */
    public static short MftBitmapWritesFlushForLogFileFull$get(MemorySegment seg) {
        return (short)_NTFS_STATISTICS.MftBitmapWritesFlushForLogFileFull$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD MftBitmapWritesFlushForLogFileFull;
     * }
     */
    public static void MftBitmapWritesFlushForLogFileFull$set(MemorySegment seg, short x) {
        _NTFS_STATISTICS.MftBitmapWritesFlushForLogFileFull$VH.set(seg, x);
    }
    public static short MftBitmapWritesFlushForLogFileFull$get(MemorySegment seg, long index) {
        return (short)_NTFS_STATISTICS.MftBitmapWritesFlushForLogFileFull$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MftBitmapWritesFlushForLogFileFull$set(MemorySegment seg, long index, short x) {
        _NTFS_STATISTICS.MftBitmapWritesFlushForLogFileFull$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MftBitmapWritesLazyWriter$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("MftBitmapWritesLazyWriter"));
    public static VarHandle MftBitmapWritesLazyWriter$VH() {
        return _NTFS_STATISTICS.MftBitmapWritesLazyWriter$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD MftBitmapWritesLazyWriter;
     * }
     */
    public static short MftBitmapWritesLazyWriter$get(MemorySegment seg) {
        return (short)_NTFS_STATISTICS.MftBitmapWritesLazyWriter$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD MftBitmapWritesLazyWriter;
     * }
     */
    public static void MftBitmapWritesLazyWriter$set(MemorySegment seg, short x) {
        _NTFS_STATISTICS.MftBitmapWritesLazyWriter$VH.set(seg, x);
    }
    public static short MftBitmapWritesLazyWriter$get(MemorySegment seg, long index) {
        return (short)_NTFS_STATISTICS.MftBitmapWritesLazyWriter$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MftBitmapWritesLazyWriter$set(MemorySegment seg, long index, short x) {
        _NTFS_STATISTICS.MftBitmapWritesLazyWriter$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MftBitmapWritesUserRequest$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("MftBitmapWritesUserRequest"));
    public static VarHandle MftBitmapWritesUserRequest$VH() {
        return _NTFS_STATISTICS.MftBitmapWritesUserRequest$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD MftBitmapWritesUserRequest;
     * }
     */
    public static short MftBitmapWritesUserRequest$get(MemorySegment seg) {
        return (short)_NTFS_STATISTICS.MftBitmapWritesUserRequest$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD MftBitmapWritesUserRequest;
     * }
     */
    public static void MftBitmapWritesUserRequest$set(MemorySegment seg, short x) {
        _NTFS_STATISTICS.MftBitmapWritesUserRequest$VH.set(seg, x);
    }
    public static short MftBitmapWritesUserRequest$get(MemorySegment seg, long index) {
        return (short)_NTFS_STATISTICS.MftBitmapWritesUserRequest$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MftBitmapWritesUserRequest$set(MemorySegment seg, long index, short x) {
        _NTFS_STATISTICS.MftBitmapWritesUserRequest$VH.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
     * struct {
     *     WORD Write;
     *     WORD Create;
     *     WORD SetInfo;
     *     WORD Flush;
     * };
     * }
     */
    public static final class MftBitmapWritesUserLevel {

        // Suppresses default constructor, ensuring non-instantiability.
        private MftBitmapWritesUserLevel() {}
        static final StructLayout MftBitmapWritesUserLevel$struct$LAYOUT = MemoryLayout.structLayout(
            Constants$root.C_SHORT$LAYOUT.withName("Write"),
            Constants$root.C_SHORT$LAYOUT.withName("Create"),
            Constants$root.C_SHORT$LAYOUT.withName("SetInfo"),
            Constants$root.C_SHORT$LAYOUT.withName("Flush")
        );
        public static MemoryLayout $LAYOUT() {
            return MftBitmapWritesUserLevel.MftBitmapWritesUserLevel$struct$LAYOUT;
        }
        static final VarHandle Write$VH = MftBitmapWritesUserLevel$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Write"));
        public static VarHandle Write$VH() {
            return MftBitmapWritesUserLevel.Write$VH;
        }
        /**
         * Getter for field:
         * {@snippet :
         * WORD Write;
         * }
         */
        public static short Write$get(MemorySegment seg) {
            return (short)MftBitmapWritesUserLevel.Write$VH.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * WORD Write;
         * }
         */
        public static void Write$set(MemorySegment seg, short x) {
            MftBitmapWritesUserLevel.Write$VH.set(seg, x);
        }
        public static short Write$get(MemorySegment seg, long index) {
            return (short)MftBitmapWritesUserLevel.Write$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void Write$set(MemorySegment seg, long index, short x) {
            MftBitmapWritesUserLevel.Write$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle Create$VH = MftBitmapWritesUserLevel$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Create"));
        public static VarHandle Create$VH() {
            return MftBitmapWritesUserLevel.Create$VH;
        }
        /**
         * Getter for field:
         * {@snippet :
         * WORD Create;
         * }
         */
        public static short Create$get(MemorySegment seg) {
            return (short)MftBitmapWritesUserLevel.Create$VH.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * WORD Create;
         * }
         */
        public static void Create$set(MemorySegment seg, short x) {
            MftBitmapWritesUserLevel.Create$VH.set(seg, x);
        }
        public static short Create$get(MemorySegment seg, long index) {
            return (short)MftBitmapWritesUserLevel.Create$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void Create$set(MemorySegment seg, long index, short x) {
            MftBitmapWritesUserLevel.Create$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle SetInfo$VH = MftBitmapWritesUserLevel$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetInfo"));
        public static VarHandle SetInfo$VH() {
            return MftBitmapWritesUserLevel.SetInfo$VH;
        }
        /**
         * Getter for field:
         * {@snippet :
         * WORD SetInfo;
         * }
         */
        public static short SetInfo$get(MemorySegment seg) {
            return (short)MftBitmapWritesUserLevel.SetInfo$VH.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * WORD SetInfo;
         * }
         */
        public static void SetInfo$set(MemorySegment seg, short x) {
            MftBitmapWritesUserLevel.SetInfo$VH.set(seg, x);
        }
        public static short SetInfo$get(MemorySegment seg, long index) {
            return (short)MftBitmapWritesUserLevel.SetInfo$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void SetInfo$set(MemorySegment seg, long index, short x) {
            MftBitmapWritesUserLevel.SetInfo$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle Flush$VH = MftBitmapWritesUserLevel$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Flush"));
        public static VarHandle Flush$VH() {
            return MftBitmapWritesUserLevel.Flush$VH;
        }
        /**
         * Getter for field:
         * {@snippet :
         * WORD Flush;
         * }
         */
        public static short Flush$get(MemorySegment seg) {
            return (short)MftBitmapWritesUserLevel.Flush$VH.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * WORD Flush;
         * }
         */
        public static void Flush$set(MemorySegment seg, short x) {
            MftBitmapWritesUserLevel.Flush$VH.set(seg, x);
        }
        public static short Flush$get(MemorySegment seg, long index) {
            return (short)MftBitmapWritesUserLevel.Flush$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void Flush$set(MemorySegment seg, long index, short x) {
            MftBitmapWritesUserLevel.Flush$VH.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
    }

    public static MemorySegment MftBitmapWritesUserLevel$slice(MemorySegment seg) {
        return seg.asSlice(130, 8);
    }
    static final VarHandle UserIndexReads$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("UserIndexReads"));
    public static VarHandle UserIndexReads$VH() {
        return _NTFS_STATISTICS.UserIndexReads$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD UserIndexReads;
     * }
     */
    public static int UserIndexReads$get(MemorySegment seg) {
        return (int)_NTFS_STATISTICS.UserIndexReads$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD UserIndexReads;
     * }
     */
    public static void UserIndexReads$set(MemorySegment seg, int x) {
        _NTFS_STATISTICS.UserIndexReads$VH.set(seg, x);
    }
    public static int UserIndexReads$get(MemorySegment seg, long index) {
        return (int)_NTFS_STATISTICS.UserIndexReads$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void UserIndexReads$set(MemorySegment seg, long index, int x) {
        _NTFS_STATISTICS.UserIndexReads$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle UserIndexReadBytes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("UserIndexReadBytes"));
    public static VarHandle UserIndexReadBytes$VH() {
        return _NTFS_STATISTICS.UserIndexReadBytes$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD UserIndexReadBytes;
     * }
     */
    public static int UserIndexReadBytes$get(MemorySegment seg) {
        return (int)_NTFS_STATISTICS.UserIndexReadBytes$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD UserIndexReadBytes;
     * }
     */
    public static void UserIndexReadBytes$set(MemorySegment seg, int x) {
        _NTFS_STATISTICS.UserIndexReadBytes$VH.set(seg, x);
    }
    public static int UserIndexReadBytes$get(MemorySegment seg, long index) {
        return (int)_NTFS_STATISTICS.UserIndexReadBytes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void UserIndexReadBytes$set(MemorySegment seg, long index, int x) {
        _NTFS_STATISTICS.UserIndexReadBytes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle UserIndexWrites$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("UserIndexWrites"));
    public static VarHandle UserIndexWrites$VH() {
        return _NTFS_STATISTICS.UserIndexWrites$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD UserIndexWrites;
     * }
     */
    public static int UserIndexWrites$get(MemorySegment seg) {
        return (int)_NTFS_STATISTICS.UserIndexWrites$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD UserIndexWrites;
     * }
     */
    public static void UserIndexWrites$set(MemorySegment seg, int x) {
        _NTFS_STATISTICS.UserIndexWrites$VH.set(seg, x);
    }
    public static int UserIndexWrites$get(MemorySegment seg, long index) {
        return (int)_NTFS_STATISTICS.UserIndexWrites$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void UserIndexWrites$set(MemorySegment seg, long index, int x) {
        _NTFS_STATISTICS.UserIndexWrites$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle UserIndexWriteBytes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("UserIndexWriteBytes"));
    public static VarHandle UserIndexWriteBytes$VH() {
        return _NTFS_STATISTICS.UserIndexWriteBytes$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD UserIndexWriteBytes;
     * }
     */
    public static int UserIndexWriteBytes$get(MemorySegment seg) {
        return (int)_NTFS_STATISTICS.UserIndexWriteBytes$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD UserIndexWriteBytes;
     * }
     */
    public static void UserIndexWriteBytes$set(MemorySegment seg, int x) {
        _NTFS_STATISTICS.UserIndexWriteBytes$VH.set(seg, x);
    }
    public static int UserIndexWriteBytes$get(MemorySegment seg, long index) {
        return (int)_NTFS_STATISTICS.UserIndexWriteBytes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void UserIndexWriteBytes$set(MemorySegment seg, long index, int x) {
        _NTFS_STATISTICS.UserIndexWriteBytes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle LogFileReads$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("LogFileReads"));
    public static VarHandle LogFileReads$VH() {
        return _NTFS_STATISTICS.LogFileReads$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD LogFileReads;
     * }
     */
    public static int LogFileReads$get(MemorySegment seg) {
        return (int)_NTFS_STATISTICS.LogFileReads$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD LogFileReads;
     * }
     */
    public static void LogFileReads$set(MemorySegment seg, int x) {
        _NTFS_STATISTICS.LogFileReads$VH.set(seg, x);
    }
    public static int LogFileReads$get(MemorySegment seg, long index) {
        return (int)_NTFS_STATISTICS.LogFileReads$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void LogFileReads$set(MemorySegment seg, long index, int x) {
        _NTFS_STATISTICS.LogFileReads$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle LogFileReadBytes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("LogFileReadBytes"));
    public static VarHandle LogFileReadBytes$VH() {
        return _NTFS_STATISTICS.LogFileReadBytes$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD LogFileReadBytes;
     * }
     */
    public static int LogFileReadBytes$get(MemorySegment seg) {
        return (int)_NTFS_STATISTICS.LogFileReadBytes$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD LogFileReadBytes;
     * }
     */
    public static void LogFileReadBytes$set(MemorySegment seg, int x) {
        _NTFS_STATISTICS.LogFileReadBytes$VH.set(seg, x);
    }
    public static int LogFileReadBytes$get(MemorySegment seg, long index) {
        return (int)_NTFS_STATISTICS.LogFileReadBytes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void LogFileReadBytes$set(MemorySegment seg, long index, int x) {
        _NTFS_STATISTICS.LogFileReadBytes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle LogFileWrites$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("LogFileWrites"));
    public static VarHandle LogFileWrites$VH() {
        return _NTFS_STATISTICS.LogFileWrites$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD LogFileWrites;
     * }
     */
    public static int LogFileWrites$get(MemorySegment seg) {
        return (int)_NTFS_STATISTICS.LogFileWrites$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD LogFileWrites;
     * }
     */
    public static void LogFileWrites$set(MemorySegment seg, int x) {
        _NTFS_STATISTICS.LogFileWrites$VH.set(seg, x);
    }
    public static int LogFileWrites$get(MemorySegment seg, long index) {
        return (int)_NTFS_STATISTICS.LogFileWrites$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void LogFileWrites$set(MemorySegment seg, long index, int x) {
        _NTFS_STATISTICS.LogFileWrites$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle LogFileWriteBytes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("LogFileWriteBytes"));
    public static VarHandle LogFileWriteBytes$VH() {
        return _NTFS_STATISTICS.LogFileWriteBytes$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD LogFileWriteBytes;
     * }
     */
    public static int LogFileWriteBytes$get(MemorySegment seg) {
        return (int)_NTFS_STATISTICS.LogFileWriteBytes$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD LogFileWriteBytes;
     * }
     */
    public static void LogFileWriteBytes$set(MemorySegment seg, int x) {
        _NTFS_STATISTICS.LogFileWriteBytes$VH.set(seg, x);
    }
    public static int LogFileWriteBytes$get(MemorySegment seg, long index) {
        return (int)_NTFS_STATISTICS.LogFileWriteBytes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void LogFileWriteBytes$set(MemorySegment seg, long index, int x) {
        _NTFS_STATISTICS.LogFileWriteBytes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
     * struct {
     *     DWORD Calls;
     *     DWORD Clusters;
     *     DWORD Hints;
     *     DWORD RunsReturned;
     *     DWORD HintsHonored;
     *     DWORD HintsClusters;
     *     DWORD Cache;
     *     DWORD CacheClusters;
     *     DWORD CacheMiss;
     *     DWORD CacheMissClusters;
     * };
     * }
     */
    public static final class Allocate {

        // Suppresses default constructor, ensuring non-instantiability.
        private Allocate() {}
        static final StructLayout Allocate$struct$LAYOUT = MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("Calls"),
            Constants$root.C_LONG$LAYOUT.withName("Clusters"),
            Constants$root.C_LONG$LAYOUT.withName("Hints"),
            Constants$root.C_LONG$LAYOUT.withName("RunsReturned"),
            Constants$root.C_LONG$LAYOUT.withName("HintsHonored"),
            Constants$root.C_LONG$LAYOUT.withName("HintsClusters"),
            Constants$root.C_LONG$LAYOUT.withName("Cache"),
            Constants$root.C_LONG$LAYOUT.withName("CacheClusters"),
            Constants$root.C_LONG$LAYOUT.withName("CacheMiss"),
            Constants$root.C_LONG$LAYOUT.withName("CacheMissClusters")
        );
        public static MemoryLayout $LAYOUT() {
            return Allocate.Allocate$struct$LAYOUT;
        }
        static final VarHandle Calls$VH = Allocate$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Calls"));
        public static VarHandle Calls$VH() {
            return Allocate.Calls$VH;
        }
        /**
         * Getter for field:
         * {@snippet :
         * DWORD Calls;
         * }
         */
        public static int Calls$get(MemorySegment seg) {
            return (int)Allocate.Calls$VH.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * DWORD Calls;
         * }
         */
        public static void Calls$set(MemorySegment seg, int x) {
            Allocate.Calls$VH.set(seg, x);
        }
        public static int Calls$get(MemorySegment seg, long index) {
            return (int)Allocate.Calls$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void Calls$set(MemorySegment seg, long index, int x) {
            Allocate.Calls$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle Clusters$VH = Allocate$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Clusters"));
        public static VarHandle Clusters$VH() {
            return Allocate.Clusters$VH;
        }
        /**
         * Getter for field:
         * {@snippet :
         * DWORD Clusters;
         * }
         */
        public static int Clusters$get(MemorySegment seg) {
            return (int)Allocate.Clusters$VH.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * DWORD Clusters;
         * }
         */
        public static void Clusters$set(MemorySegment seg, int x) {
            Allocate.Clusters$VH.set(seg, x);
        }
        public static int Clusters$get(MemorySegment seg, long index) {
            return (int)Allocate.Clusters$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void Clusters$set(MemorySegment seg, long index, int x) {
            Allocate.Clusters$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle Hints$VH = Allocate$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Hints"));
        public static VarHandle Hints$VH() {
            return Allocate.Hints$VH;
        }
        /**
         * Getter for field:
         * {@snippet :
         * DWORD Hints;
         * }
         */
        public static int Hints$get(MemorySegment seg) {
            return (int)Allocate.Hints$VH.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * DWORD Hints;
         * }
         */
        public static void Hints$set(MemorySegment seg, int x) {
            Allocate.Hints$VH.set(seg, x);
        }
        public static int Hints$get(MemorySegment seg, long index) {
            return (int)Allocate.Hints$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void Hints$set(MemorySegment seg, long index, int x) {
            Allocate.Hints$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle RunsReturned$VH = Allocate$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("RunsReturned"));
        public static VarHandle RunsReturned$VH() {
            return Allocate.RunsReturned$VH;
        }
        /**
         * Getter for field:
         * {@snippet :
         * DWORD RunsReturned;
         * }
         */
        public static int RunsReturned$get(MemorySegment seg) {
            return (int)Allocate.RunsReturned$VH.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * DWORD RunsReturned;
         * }
         */
        public static void RunsReturned$set(MemorySegment seg, int x) {
            Allocate.RunsReturned$VH.set(seg, x);
        }
        public static int RunsReturned$get(MemorySegment seg, long index) {
            return (int)Allocate.RunsReturned$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void RunsReturned$set(MemorySegment seg, long index, int x) {
            Allocate.RunsReturned$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle HintsHonored$VH = Allocate$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("HintsHonored"));
        public static VarHandle HintsHonored$VH() {
            return Allocate.HintsHonored$VH;
        }
        /**
         * Getter for field:
         * {@snippet :
         * DWORD HintsHonored;
         * }
         */
        public static int HintsHonored$get(MemorySegment seg) {
            return (int)Allocate.HintsHonored$VH.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * DWORD HintsHonored;
         * }
         */
        public static void HintsHonored$set(MemorySegment seg, int x) {
            Allocate.HintsHonored$VH.set(seg, x);
        }
        public static int HintsHonored$get(MemorySegment seg, long index) {
            return (int)Allocate.HintsHonored$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void HintsHonored$set(MemorySegment seg, long index, int x) {
            Allocate.HintsHonored$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle HintsClusters$VH = Allocate$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("HintsClusters"));
        public static VarHandle HintsClusters$VH() {
            return Allocate.HintsClusters$VH;
        }
        /**
         * Getter for field:
         * {@snippet :
         * DWORD HintsClusters;
         * }
         */
        public static int HintsClusters$get(MemorySegment seg) {
            return (int)Allocate.HintsClusters$VH.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * DWORD HintsClusters;
         * }
         */
        public static void HintsClusters$set(MemorySegment seg, int x) {
            Allocate.HintsClusters$VH.set(seg, x);
        }
        public static int HintsClusters$get(MemorySegment seg, long index) {
            return (int)Allocate.HintsClusters$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void HintsClusters$set(MemorySegment seg, long index, int x) {
            Allocate.HintsClusters$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle Cache$VH = Allocate$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Cache"));
        public static VarHandle Cache$VH() {
            return Allocate.Cache$VH;
        }
        /**
         * Getter for field:
         * {@snippet :
         * DWORD Cache;
         * }
         */
        public static int Cache$get(MemorySegment seg) {
            return (int)Allocate.Cache$VH.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * DWORD Cache;
         * }
         */
        public static void Cache$set(MemorySegment seg, int x) {
            Allocate.Cache$VH.set(seg, x);
        }
        public static int Cache$get(MemorySegment seg, long index) {
            return (int)Allocate.Cache$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void Cache$set(MemorySegment seg, long index, int x) {
            Allocate.Cache$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle CacheClusters$VH = Allocate$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("CacheClusters"));
        public static VarHandle CacheClusters$VH() {
            return Allocate.CacheClusters$VH;
        }
        /**
         * Getter for field:
         * {@snippet :
         * DWORD CacheClusters;
         * }
         */
        public static int CacheClusters$get(MemorySegment seg) {
            return (int)Allocate.CacheClusters$VH.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * DWORD CacheClusters;
         * }
         */
        public static void CacheClusters$set(MemorySegment seg, int x) {
            Allocate.CacheClusters$VH.set(seg, x);
        }
        public static int CacheClusters$get(MemorySegment seg, long index) {
            return (int)Allocate.CacheClusters$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void CacheClusters$set(MemorySegment seg, long index, int x) {
            Allocate.CacheClusters$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle CacheMiss$VH = Allocate$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("CacheMiss"));
        public static VarHandle CacheMiss$VH() {
            return Allocate.CacheMiss$VH;
        }
        /**
         * Getter for field:
         * {@snippet :
         * DWORD CacheMiss;
         * }
         */
        public static int CacheMiss$get(MemorySegment seg) {
            return (int)Allocate.CacheMiss$VH.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * DWORD CacheMiss;
         * }
         */
        public static void CacheMiss$set(MemorySegment seg, int x) {
            Allocate.CacheMiss$VH.set(seg, x);
        }
        public static int CacheMiss$get(MemorySegment seg, long index) {
            return (int)Allocate.CacheMiss$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void CacheMiss$set(MemorySegment seg, long index, int x) {
            Allocate.CacheMiss$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle CacheMissClusters$VH = Allocate$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("CacheMissClusters"));
        public static VarHandle CacheMissClusters$VH() {
            return Allocate.CacheMissClusters$VH;
        }
        /**
         * Getter for field:
         * {@snippet :
         * DWORD CacheMissClusters;
         * }
         */
        public static int CacheMissClusters$get(MemorySegment seg) {
            return (int)Allocate.CacheMissClusters$VH.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * DWORD CacheMissClusters;
         * }
         */
        public static void CacheMissClusters$set(MemorySegment seg, int x) {
            Allocate.CacheMissClusters$VH.set(seg, x);
        }
        public static int CacheMissClusters$get(MemorySegment seg, long index) {
            return (int)Allocate.CacheMissClusters$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void CacheMissClusters$set(MemorySegment seg, long index, int x) {
            Allocate.CacheMissClusters$VH.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
    }

    public static MemorySegment Allocate$slice(MemorySegment seg) {
        return seg.asSlice(172, 40);
    }
    static final VarHandle DiskResourcesExhausted$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("DiskResourcesExhausted"));
    public static VarHandle DiskResourcesExhausted$VH() {
        return _NTFS_STATISTICS.DiskResourcesExhausted$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD DiskResourcesExhausted;
     * }
     */
    public static int DiskResourcesExhausted$get(MemorySegment seg) {
        return (int)_NTFS_STATISTICS.DiskResourcesExhausted$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD DiskResourcesExhausted;
     * }
     */
    public static void DiskResourcesExhausted$set(MemorySegment seg, int x) {
        _NTFS_STATISTICS.DiskResourcesExhausted$VH.set(seg, x);
    }
    public static int DiskResourcesExhausted$get(MemorySegment seg, long index) {
        return (int)_NTFS_STATISTICS.DiskResourcesExhausted$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DiskResourcesExhausted$set(MemorySegment seg, long index, int x) {
        _NTFS_STATISTICS.DiskResourcesExhausted$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


