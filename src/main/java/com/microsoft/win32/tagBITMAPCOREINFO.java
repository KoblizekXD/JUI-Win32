// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct tagBITMAPCOREINFO {
 *     BITMAPCOREHEADER bmciHeader;
 *     RGBTRIPLE bmciColors[1];
 * };
 * }
 */
public class tagBITMAPCOREINFO {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("bcSize"),
            Constants$root.C_SHORT$LAYOUT.withName("bcWidth"),
            Constants$root.C_SHORT$LAYOUT.withName("bcHeight"),
            Constants$root.C_SHORT$LAYOUT.withName("bcPlanes"),
            Constants$root.C_SHORT$LAYOUT.withName("bcBitCount")
        ).withName("bmciHeader"),
        MemoryLayout.sequenceLayout(1, MemoryLayout.structLayout(
            Constants$root.C_CHAR$LAYOUT.withName("rgbtBlue"),
            Constants$root.C_CHAR$LAYOUT.withName("rgbtGreen"),
            Constants$root.C_CHAR$LAYOUT.withName("rgbtRed")
        ).withName("tagRGBTRIPLE")).withName("bmciColors"),
        MemoryLayout.paddingLayout(8)
    ).withName("tagBITMAPCOREINFO");
    public static MemoryLayout $LAYOUT() {
        return tagBITMAPCOREINFO.$struct$LAYOUT;
    }
    public static MemorySegment bmciHeader$slice(MemorySegment seg) {
        return seg.asSlice(0, 12);
    }
    public static MemorySegment bmciColors$slice(MemorySegment seg) {
        return seg.asSlice(12, 3);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


