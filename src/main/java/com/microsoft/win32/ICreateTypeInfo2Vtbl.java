// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct ICreateTypeInfo2Vtbl {
 *     HRESULT (*QueryInterface)(ICreateTypeInfo2*,const IID*,void**);
 *     ULONG (*AddRef)(ICreateTypeInfo2*);
 *     ULONG (*Release)(ICreateTypeInfo2*);
 *     HRESULT (*SetGuid)(ICreateTypeInfo2*,const GUID*);
 *     HRESULT (*SetTypeFlags)(ICreateTypeInfo2*,UINT);
 *     HRESULT (*SetDocString)(ICreateTypeInfo2*,LPOLESTR);
 *     HRESULT (*SetHelpContext)(ICreateTypeInfo2*,DWORD);
 *     HRESULT (*SetVersion)(ICreateTypeInfo2*,WORD,WORD);
 *     HRESULT (*AddRefTypeInfo)(ICreateTypeInfo2*,ITypeInfo*,HREFTYPE*);
 *     HRESULT (*AddFuncDesc)(ICreateTypeInfo2*,UINT,FUNCDESC*);
 *     HRESULT (*AddImplType)(ICreateTypeInfo2*,UINT,HREFTYPE);
 *     HRESULT (*SetImplTypeFlags)(ICreateTypeInfo2*,UINT,INT);
 *     HRESULT (*SetAlignment)(ICreateTypeInfo2*,WORD);
 *     HRESULT (*SetSchema)(ICreateTypeInfo2*,LPOLESTR);
 *     HRESULT (*AddVarDesc)(ICreateTypeInfo2*,UINT,VARDESC*);
 *     HRESULT (*SetFuncAndParamNames)(ICreateTypeInfo2*,UINT,LPOLESTR*,UINT);
 *     HRESULT (*SetVarName)(ICreateTypeInfo2*,UINT,LPOLESTR);
 *     HRESULT (*SetTypeDescAlias)(ICreateTypeInfo2*,TYPEDESC*);
 *     HRESULT (*DefineFuncAsDllEntry)(ICreateTypeInfo2*,UINT,LPOLESTR,LPOLESTR);
 *     HRESULT (*SetFuncDocString)(ICreateTypeInfo2*,UINT,LPOLESTR);
 *     HRESULT (*SetVarDocString)(ICreateTypeInfo2*,UINT,LPOLESTR);
 *     HRESULT (*SetFuncHelpContext)(ICreateTypeInfo2*,UINT,DWORD);
 *     HRESULT (*SetVarHelpContext)(ICreateTypeInfo2*,UINT,DWORD);
 *     HRESULT (*SetMops)(ICreateTypeInfo2*,UINT,BSTR);
 *     HRESULT (*SetTypeIdldesc)(ICreateTypeInfo2*,IDLDESC*);
 *     HRESULT (*LayOut)(ICreateTypeInfo2*);
 *     HRESULT (*DeleteFuncDesc)(ICreateTypeInfo2*,UINT);
 *     HRESULT (*DeleteFuncDescByMemId)(ICreateTypeInfo2*,MEMBERID,INVOKEKIND);
 *     HRESULT (*DeleteVarDesc)(ICreateTypeInfo2*,UINT);
 *     HRESULT (*DeleteVarDescByMemId)(ICreateTypeInfo2*,MEMBERID);
 *     HRESULT (*DeleteImplType)(ICreateTypeInfo2*,UINT);
 *     HRESULT (*SetCustData)(ICreateTypeInfo2*,const GUID*,VARIANT*);
 *     HRESULT (*SetFuncCustData)(ICreateTypeInfo2*,UINT,const GUID*,VARIANT*);
 *     HRESULT (*SetParamCustData)(ICreateTypeInfo2*,UINT,UINT,const GUID*,VARIANT*);
 *     HRESULT (*SetVarCustData)(ICreateTypeInfo2*,UINT,const GUID*,VARIANT*);
 *     HRESULT (*SetImplTypeCustData)(ICreateTypeInfo2*,UINT,const GUID*,VARIANT*);
 *     HRESULT (*SetHelpStringContext)(ICreateTypeInfo2*,ULONG);
 *     HRESULT (*SetFuncHelpStringContext)(ICreateTypeInfo2*,UINT,ULONG);
 *     HRESULT (*SetVarHelpStringContext)(ICreateTypeInfo2*,UINT,ULONG);
 *     HRESULT (*Invalidate)(ICreateTypeInfo2*);
 *     HRESULT (*SetName)(ICreateTypeInfo2*,LPOLESTR);
 * };
 * }
 */
public class ICreateTypeInfo2Vtbl {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("SetGuid"),
        Constants$root.C_POINTER$LAYOUT.withName("SetTypeFlags"),
        Constants$root.C_POINTER$LAYOUT.withName("SetDocString"),
        Constants$root.C_POINTER$LAYOUT.withName("SetHelpContext"),
        Constants$root.C_POINTER$LAYOUT.withName("SetVersion"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRefTypeInfo"),
        Constants$root.C_POINTER$LAYOUT.withName("AddFuncDesc"),
        Constants$root.C_POINTER$LAYOUT.withName("AddImplType"),
        Constants$root.C_POINTER$LAYOUT.withName("SetImplTypeFlags"),
        Constants$root.C_POINTER$LAYOUT.withName("SetAlignment"),
        Constants$root.C_POINTER$LAYOUT.withName("SetSchema"),
        Constants$root.C_POINTER$LAYOUT.withName("AddVarDesc"),
        Constants$root.C_POINTER$LAYOUT.withName("SetFuncAndParamNames"),
        Constants$root.C_POINTER$LAYOUT.withName("SetVarName"),
        Constants$root.C_POINTER$LAYOUT.withName("SetTypeDescAlias"),
        Constants$root.C_POINTER$LAYOUT.withName("DefineFuncAsDllEntry"),
        Constants$root.C_POINTER$LAYOUT.withName("SetFuncDocString"),
        Constants$root.C_POINTER$LAYOUT.withName("SetVarDocString"),
        Constants$root.C_POINTER$LAYOUT.withName("SetFuncHelpContext"),
        Constants$root.C_POINTER$LAYOUT.withName("SetVarHelpContext"),
        Constants$root.C_POINTER$LAYOUT.withName("SetMops"),
        Constants$root.C_POINTER$LAYOUT.withName("SetTypeIdldesc"),
        Constants$root.C_POINTER$LAYOUT.withName("LayOut"),
        Constants$root.C_POINTER$LAYOUT.withName("DeleteFuncDesc"),
        Constants$root.C_POINTER$LAYOUT.withName("DeleteFuncDescByMemId"),
        Constants$root.C_POINTER$LAYOUT.withName("DeleteVarDesc"),
        Constants$root.C_POINTER$LAYOUT.withName("DeleteVarDescByMemId"),
        Constants$root.C_POINTER$LAYOUT.withName("DeleteImplType"),
        Constants$root.C_POINTER$LAYOUT.withName("SetCustData"),
        Constants$root.C_POINTER$LAYOUT.withName("SetFuncCustData"),
        Constants$root.C_POINTER$LAYOUT.withName("SetParamCustData"),
        Constants$root.C_POINTER$LAYOUT.withName("SetVarCustData"),
        Constants$root.C_POINTER$LAYOUT.withName("SetImplTypeCustData"),
        Constants$root.C_POINTER$LAYOUT.withName("SetHelpStringContext"),
        Constants$root.C_POINTER$LAYOUT.withName("SetFuncHelpStringContext"),
        Constants$root.C_POINTER$LAYOUT.withName("SetVarHelpStringContext"),
        Constants$root.C_POINTER$LAYOUT.withName("Invalidate"),
        Constants$root.C_POINTER$LAYOUT.withName("SetName")
    ).withName("ICreateTypeInfo2Vtbl");
    public static MemoryLayout $LAYOUT() {
        return ICreateTypeInfo2Vtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor QueryInterface_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_UP$MH = RuntimeHelper.upcallHandle(QueryInterface.class, "apply", ICreateTypeInfo2Vtbl.QueryInterface_UP$FUNC);
    static final FunctionDescriptor QueryInterface_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeInfo2Vtbl.QueryInterface_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(ICreateTypeInfo2*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeInfo2Vtbl.QueryInterface_UP$MH, fi, ICreateTypeInfo2Vtbl.QueryInterface$FUNC, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)ICreateTypeInfo2Vtbl.QueryInterface_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return ICreateTypeInfo2Vtbl.QueryInterface$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(ICreateTypeInfo2*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.QueryInterface$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(ICreateTypeInfo2*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeInfo2Vtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeInfo2Vtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, SegmentScope scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor AddRef_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_UP$MH = RuntimeHelper.upcallHandle(AddRef.class, "apply", ICreateTypeInfo2Vtbl.AddRef_UP$FUNC);
    static final FunctionDescriptor AddRef_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeInfo2Vtbl.AddRef_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*AddRef)(ICreateTypeInfo2*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeInfo2Vtbl.AddRef_UP$MH, fi, ICreateTypeInfo2Vtbl.AddRef$FUNC, scope);
        }
        static AddRef ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)ICreateTypeInfo2Vtbl.AddRef_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return ICreateTypeInfo2Vtbl.AddRef$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(ICreateTypeInfo2*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.AddRef$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(ICreateTypeInfo2*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeInfo2Vtbl.AddRef$VH.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeInfo2Vtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, SegmentScope scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Release_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_UP$MH = RuntimeHelper.upcallHandle(Release.class, "apply", ICreateTypeInfo2Vtbl.Release_UP$FUNC);
    static final FunctionDescriptor Release_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeInfo2Vtbl.Release_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*Release)(ICreateTypeInfo2*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeInfo2Vtbl.Release_UP$MH, fi, ICreateTypeInfo2Vtbl.Release$FUNC, scope);
        }
        static Release ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)ICreateTypeInfo2Vtbl.Release_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return ICreateTypeInfo2Vtbl.Release$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(ICreateTypeInfo2*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.Release$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(ICreateTypeInfo2*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeInfo2Vtbl.Release$VH.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeInfo2Vtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, SegmentScope scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    static final FunctionDescriptor SetGuid$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor SetGuid_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetGuid_UP$MH = RuntimeHelper.upcallHandle(SetGuid.class, "apply", ICreateTypeInfo2Vtbl.SetGuid_UP$FUNC);
    static final FunctionDescriptor SetGuid_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetGuid_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeInfo2Vtbl.SetGuid_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetGuid)(ICreateTypeInfo2*,const GUID*);
     * }
     */
    public interface SetGuid {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(SetGuid fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeInfo2Vtbl.SetGuid_UP$MH, fi, ICreateTypeInfo2Vtbl.SetGuid$FUNC, scope);
        }
        static SetGuid ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)ICreateTypeInfo2Vtbl.SetGuid_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetGuid$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetGuid"));
    public static VarHandle SetGuid$VH() {
        return ICreateTypeInfo2Vtbl.SetGuid$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetGuid)(ICreateTypeInfo2*,const GUID*);
     * }
     */
    public static MemorySegment SetGuid$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.SetGuid$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetGuid)(ICreateTypeInfo2*,const GUID*);
     * }
     */
    public static void SetGuid$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeInfo2Vtbl.SetGuid$VH.set(seg, x);
    }
    public static MemorySegment SetGuid$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.SetGuid$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetGuid$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeInfo2Vtbl.SetGuid$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetGuid SetGuid(MemorySegment segment, SegmentScope scope) {
        return SetGuid.ofAddress(SetGuid$get(segment), scope);
    }
    static final FunctionDescriptor SetTypeFlags$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor SetTypeFlags_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle SetTypeFlags_UP$MH = RuntimeHelper.upcallHandle(SetTypeFlags.class, "apply", ICreateTypeInfo2Vtbl.SetTypeFlags_UP$FUNC);
    static final FunctionDescriptor SetTypeFlags_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle SetTypeFlags_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeInfo2Vtbl.SetTypeFlags_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetTypeFlags)(ICreateTypeInfo2*,UINT);
     * }
     */
    public interface SetTypeFlags {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(SetTypeFlags fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeInfo2Vtbl.SetTypeFlags_UP$MH, fi, ICreateTypeInfo2Vtbl.SetTypeFlags$FUNC, scope);
        }
        static SetTypeFlags ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)ICreateTypeInfo2Vtbl.SetTypeFlags_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetTypeFlags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetTypeFlags"));
    public static VarHandle SetTypeFlags$VH() {
        return ICreateTypeInfo2Vtbl.SetTypeFlags$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetTypeFlags)(ICreateTypeInfo2*,UINT);
     * }
     */
    public static MemorySegment SetTypeFlags$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.SetTypeFlags$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetTypeFlags)(ICreateTypeInfo2*,UINT);
     * }
     */
    public static void SetTypeFlags$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeInfo2Vtbl.SetTypeFlags$VH.set(seg, x);
    }
    public static MemorySegment SetTypeFlags$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.SetTypeFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetTypeFlags$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeInfo2Vtbl.SetTypeFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetTypeFlags SetTypeFlags(MemorySegment segment, SegmentScope scope) {
        return SetTypeFlags.ofAddress(SetTypeFlags$get(segment), scope);
    }
    static final FunctionDescriptor SetDocString$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor SetDocString_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetDocString_UP$MH = RuntimeHelper.upcallHandle(SetDocString.class, "apply", ICreateTypeInfo2Vtbl.SetDocString_UP$FUNC);
    static final FunctionDescriptor SetDocString_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetDocString_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeInfo2Vtbl.SetDocString_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetDocString)(ICreateTypeInfo2*,LPOLESTR);
     * }
     */
    public interface SetDocString {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(SetDocString fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeInfo2Vtbl.SetDocString_UP$MH, fi, ICreateTypeInfo2Vtbl.SetDocString$FUNC, scope);
        }
        static SetDocString ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)ICreateTypeInfo2Vtbl.SetDocString_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetDocString$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetDocString"));
    public static VarHandle SetDocString$VH() {
        return ICreateTypeInfo2Vtbl.SetDocString$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetDocString)(ICreateTypeInfo2*,LPOLESTR);
     * }
     */
    public static MemorySegment SetDocString$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.SetDocString$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetDocString)(ICreateTypeInfo2*,LPOLESTR);
     * }
     */
    public static void SetDocString$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeInfo2Vtbl.SetDocString$VH.set(seg, x);
    }
    public static MemorySegment SetDocString$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.SetDocString$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetDocString$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeInfo2Vtbl.SetDocString$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetDocString SetDocString(MemorySegment segment, SegmentScope scope) {
        return SetDocString.ofAddress(SetDocString$get(segment), scope);
    }
    static final FunctionDescriptor SetHelpContext$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor SetHelpContext_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle SetHelpContext_UP$MH = RuntimeHelper.upcallHandle(SetHelpContext.class, "apply", ICreateTypeInfo2Vtbl.SetHelpContext_UP$FUNC);
    static final FunctionDescriptor SetHelpContext_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle SetHelpContext_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeInfo2Vtbl.SetHelpContext_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetHelpContext)(ICreateTypeInfo2*,DWORD);
     * }
     */
    public interface SetHelpContext {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(SetHelpContext fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeInfo2Vtbl.SetHelpContext_UP$MH, fi, ICreateTypeInfo2Vtbl.SetHelpContext$FUNC, scope);
        }
        static SetHelpContext ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)ICreateTypeInfo2Vtbl.SetHelpContext_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetHelpContext$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetHelpContext"));
    public static VarHandle SetHelpContext$VH() {
        return ICreateTypeInfo2Vtbl.SetHelpContext$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetHelpContext)(ICreateTypeInfo2*,DWORD);
     * }
     */
    public static MemorySegment SetHelpContext$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.SetHelpContext$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetHelpContext)(ICreateTypeInfo2*,DWORD);
     * }
     */
    public static void SetHelpContext$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeInfo2Vtbl.SetHelpContext$VH.set(seg, x);
    }
    public static MemorySegment SetHelpContext$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.SetHelpContext$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetHelpContext$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeInfo2Vtbl.SetHelpContext$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetHelpContext SetHelpContext(MemorySegment segment, SegmentScope scope) {
        return SetHelpContext.ofAddress(SetHelpContext$get(segment), scope);
    }
    static final FunctionDescriptor SetVersion$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_SHORT$LAYOUT,
        Constants$root.C_SHORT$LAYOUT
    );
    static final FunctionDescriptor SetVersion_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_SHORT$LAYOUT,
        Constants$root.C_SHORT$LAYOUT
    );
    static final MethodHandle SetVersion_UP$MH = RuntimeHelper.upcallHandle(SetVersion.class, "apply", ICreateTypeInfo2Vtbl.SetVersion_UP$FUNC);
    static final FunctionDescriptor SetVersion_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_SHORT$LAYOUT,
        Constants$root.C_SHORT$LAYOUT
    );
    static final MethodHandle SetVersion_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeInfo2Vtbl.SetVersion_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetVersion)(ICreateTypeInfo2*,WORD,WORD);
     * }
     */
    public interface SetVersion {

        int apply(java.lang.foreign.MemorySegment _x0, short _x1, short _x2);
        static MemorySegment allocate(SetVersion fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeInfo2Vtbl.SetVersion_UP$MH, fi, ICreateTypeInfo2Vtbl.SetVersion$FUNC, scope);
        }
        static SetVersion ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, short __x1, short __x2) -> {
                try {
                    return (int)ICreateTypeInfo2Vtbl.SetVersion_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetVersion$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetVersion"));
    public static VarHandle SetVersion$VH() {
        return ICreateTypeInfo2Vtbl.SetVersion$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetVersion)(ICreateTypeInfo2*,WORD,WORD);
     * }
     */
    public static MemorySegment SetVersion$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.SetVersion$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetVersion)(ICreateTypeInfo2*,WORD,WORD);
     * }
     */
    public static void SetVersion$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeInfo2Vtbl.SetVersion$VH.set(seg, x);
    }
    public static MemorySegment SetVersion$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.SetVersion$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetVersion$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeInfo2Vtbl.SetVersion$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetVersion SetVersion(MemorySegment segment, SegmentScope scope) {
        return SetVersion.ofAddress(SetVersion$get(segment), scope);
    }
    static final FunctionDescriptor AddRefTypeInfo$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor AddRefTypeInfo_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRefTypeInfo_UP$MH = RuntimeHelper.upcallHandle(AddRefTypeInfo.class, "apply", ICreateTypeInfo2Vtbl.AddRefTypeInfo_UP$FUNC);
    static final FunctionDescriptor AddRefTypeInfo_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRefTypeInfo_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeInfo2Vtbl.AddRefTypeInfo_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*AddRefTypeInfo)(ICreateTypeInfo2*,ITypeInfo*,HREFTYPE*);
     * }
     */
    public interface AddRefTypeInfo {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(AddRefTypeInfo fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeInfo2Vtbl.AddRefTypeInfo_UP$MH, fi, ICreateTypeInfo2Vtbl.AddRefTypeInfo$FUNC, scope);
        }
        static AddRefTypeInfo ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)ICreateTypeInfo2Vtbl.AddRefTypeInfo_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRefTypeInfo$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRefTypeInfo"));
    public static VarHandle AddRefTypeInfo$VH() {
        return ICreateTypeInfo2Vtbl.AddRefTypeInfo$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*AddRefTypeInfo)(ICreateTypeInfo2*,ITypeInfo*,HREFTYPE*);
     * }
     */
    public static MemorySegment AddRefTypeInfo$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.AddRefTypeInfo$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*AddRefTypeInfo)(ICreateTypeInfo2*,ITypeInfo*,HREFTYPE*);
     * }
     */
    public static void AddRefTypeInfo$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeInfo2Vtbl.AddRefTypeInfo$VH.set(seg, x);
    }
    public static MemorySegment AddRefTypeInfo$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.AddRefTypeInfo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRefTypeInfo$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeInfo2Vtbl.AddRefTypeInfo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRefTypeInfo AddRefTypeInfo(MemorySegment segment, SegmentScope scope) {
        return AddRefTypeInfo.ofAddress(AddRefTypeInfo$get(segment), scope);
    }
    static final FunctionDescriptor AddFuncDesc$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor AddFuncDesc_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddFuncDesc_UP$MH = RuntimeHelper.upcallHandle(AddFuncDesc.class, "apply", ICreateTypeInfo2Vtbl.AddFuncDesc_UP$FUNC);
    static final FunctionDescriptor AddFuncDesc_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddFuncDesc_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeInfo2Vtbl.AddFuncDesc_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*AddFuncDesc)(ICreateTypeInfo2*,UINT,FUNCDESC*);
     * }
     */
    public interface AddFuncDesc {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(AddFuncDesc fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeInfo2Vtbl.AddFuncDesc_UP$MH, fi, ICreateTypeInfo2Vtbl.AddFuncDesc$FUNC, scope);
        }
        static AddFuncDesc ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)ICreateTypeInfo2Vtbl.AddFuncDesc_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddFuncDesc$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddFuncDesc"));
    public static VarHandle AddFuncDesc$VH() {
        return ICreateTypeInfo2Vtbl.AddFuncDesc$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*AddFuncDesc)(ICreateTypeInfo2*,UINT,FUNCDESC*);
     * }
     */
    public static MemorySegment AddFuncDesc$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.AddFuncDesc$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*AddFuncDesc)(ICreateTypeInfo2*,UINT,FUNCDESC*);
     * }
     */
    public static void AddFuncDesc$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeInfo2Vtbl.AddFuncDesc$VH.set(seg, x);
    }
    public static MemorySegment AddFuncDesc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.AddFuncDesc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddFuncDesc$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeInfo2Vtbl.AddFuncDesc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddFuncDesc AddFuncDesc(MemorySegment segment, SegmentScope scope) {
        return AddFuncDesc.ofAddress(AddFuncDesc$get(segment), scope);
    }
    static final FunctionDescriptor AddImplType$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor AddImplType_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle AddImplType_UP$MH = RuntimeHelper.upcallHandle(AddImplType.class, "apply", ICreateTypeInfo2Vtbl.AddImplType_UP$FUNC);
    static final FunctionDescriptor AddImplType_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle AddImplType_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeInfo2Vtbl.AddImplType_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*AddImplType)(ICreateTypeInfo2*,UINT,HREFTYPE);
     * }
     */
    public interface AddImplType {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2);
        static MemorySegment allocate(AddImplType fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeInfo2Vtbl.AddImplType_UP$MH, fi, ICreateTypeInfo2Vtbl.AddImplType$FUNC, scope);
        }
        static AddImplType ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2) -> {
                try {
                    return (int)ICreateTypeInfo2Vtbl.AddImplType_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddImplType$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddImplType"));
    public static VarHandle AddImplType$VH() {
        return ICreateTypeInfo2Vtbl.AddImplType$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*AddImplType)(ICreateTypeInfo2*,UINT,HREFTYPE);
     * }
     */
    public static MemorySegment AddImplType$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.AddImplType$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*AddImplType)(ICreateTypeInfo2*,UINT,HREFTYPE);
     * }
     */
    public static void AddImplType$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeInfo2Vtbl.AddImplType$VH.set(seg, x);
    }
    public static MemorySegment AddImplType$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.AddImplType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddImplType$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeInfo2Vtbl.AddImplType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddImplType AddImplType(MemorySegment segment, SegmentScope scope) {
        return AddImplType.ofAddress(AddImplType$get(segment), scope);
    }
    static final FunctionDescriptor SetImplTypeFlags$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor SetImplTypeFlags_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle SetImplTypeFlags_UP$MH = RuntimeHelper.upcallHandle(SetImplTypeFlags.class, "apply", ICreateTypeInfo2Vtbl.SetImplTypeFlags_UP$FUNC);
    static final FunctionDescriptor SetImplTypeFlags_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle SetImplTypeFlags_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeInfo2Vtbl.SetImplTypeFlags_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetImplTypeFlags)(ICreateTypeInfo2*,UINT,INT);
     * }
     */
    public interface SetImplTypeFlags {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2);
        static MemorySegment allocate(SetImplTypeFlags fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeInfo2Vtbl.SetImplTypeFlags_UP$MH, fi, ICreateTypeInfo2Vtbl.SetImplTypeFlags$FUNC, scope);
        }
        static SetImplTypeFlags ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2) -> {
                try {
                    return (int)ICreateTypeInfo2Vtbl.SetImplTypeFlags_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetImplTypeFlags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetImplTypeFlags"));
    public static VarHandle SetImplTypeFlags$VH() {
        return ICreateTypeInfo2Vtbl.SetImplTypeFlags$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetImplTypeFlags)(ICreateTypeInfo2*,UINT,INT);
     * }
     */
    public static MemorySegment SetImplTypeFlags$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.SetImplTypeFlags$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetImplTypeFlags)(ICreateTypeInfo2*,UINT,INT);
     * }
     */
    public static void SetImplTypeFlags$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeInfo2Vtbl.SetImplTypeFlags$VH.set(seg, x);
    }
    public static MemorySegment SetImplTypeFlags$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.SetImplTypeFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetImplTypeFlags$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeInfo2Vtbl.SetImplTypeFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetImplTypeFlags SetImplTypeFlags(MemorySegment segment, SegmentScope scope) {
        return SetImplTypeFlags.ofAddress(SetImplTypeFlags$get(segment), scope);
    }
    static final FunctionDescriptor SetAlignment$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_SHORT$LAYOUT
    );
    static final FunctionDescriptor SetAlignment_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_SHORT$LAYOUT
    );
    static final MethodHandle SetAlignment_UP$MH = RuntimeHelper.upcallHandle(SetAlignment.class, "apply", ICreateTypeInfo2Vtbl.SetAlignment_UP$FUNC);
    static final FunctionDescriptor SetAlignment_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_SHORT$LAYOUT
    );
    static final MethodHandle SetAlignment_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeInfo2Vtbl.SetAlignment_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetAlignment)(ICreateTypeInfo2*,WORD);
     * }
     */
    public interface SetAlignment {

        int apply(java.lang.foreign.MemorySegment _x0, short _x1);
        static MemorySegment allocate(SetAlignment fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeInfo2Vtbl.SetAlignment_UP$MH, fi, ICreateTypeInfo2Vtbl.SetAlignment$FUNC, scope);
        }
        static SetAlignment ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, short __x1) -> {
                try {
                    return (int)ICreateTypeInfo2Vtbl.SetAlignment_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetAlignment$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetAlignment"));
    public static VarHandle SetAlignment$VH() {
        return ICreateTypeInfo2Vtbl.SetAlignment$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetAlignment)(ICreateTypeInfo2*,WORD);
     * }
     */
    public static MemorySegment SetAlignment$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.SetAlignment$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetAlignment)(ICreateTypeInfo2*,WORD);
     * }
     */
    public static void SetAlignment$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeInfo2Vtbl.SetAlignment$VH.set(seg, x);
    }
    public static MemorySegment SetAlignment$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.SetAlignment$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetAlignment$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeInfo2Vtbl.SetAlignment$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetAlignment SetAlignment(MemorySegment segment, SegmentScope scope) {
        return SetAlignment.ofAddress(SetAlignment$get(segment), scope);
    }
    static final FunctionDescriptor SetSchema$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor SetSchema_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetSchema_UP$MH = RuntimeHelper.upcallHandle(SetSchema.class, "apply", ICreateTypeInfo2Vtbl.SetSchema_UP$FUNC);
    static final FunctionDescriptor SetSchema_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetSchema_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeInfo2Vtbl.SetSchema_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetSchema)(ICreateTypeInfo2*,LPOLESTR);
     * }
     */
    public interface SetSchema {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(SetSchema fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeInfo2Vtbl.SetSchema_UP$MH, fi, ICreateTypeInfo2Vtbl.SetSchema$FUNC, scope);
        }
        static SetSchema ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)ICreateTypeInfo2Vtbl.SetSchema_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetSchema$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetSchema"));
    public static VarHandle SetSchema$VH() {
        return ICreateTypeInfo2Vtbl.SetSchema$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetSchema)(ICreateTypeInfo2*,LPOLESTR);
     * }
     */
    public static MemorySegment SetSchema$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.SetSchema$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetSchema)(ICreateTypeInfo2*,LPOLESTR);
     * }
     */
    public static void SetSchema$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeInfo2Vtbl.SetSchema$VH.set(seg, x);
    }
    public static MemorySegment SetSchema$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.SetSchema$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetSchema$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeInfo2Vtbl.SetSchema$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetSchema SetSchema(MemorySegment segment, SegmentScope scope) {
        return SetSchema.ofAddress(SetSchema$get(segment), scope);
    }
    static final FunctionDescriptor AddVarDesc$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor AddVarDesc_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddVarDesc_UP$MH = RuntimeHelper.upcallHandle(AddVarDesc.class, "apply", ICreateTypeInfo2Vtbl.AddVarDesc_UP$FUNC);
    static final FunctionDescriptor AddVarDesc_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddVarDesc_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeInfo2Vtbl.AddVarDesc_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*AddVarDesc)(ICreateTypeInfo2*,UINT,VARDESC*);
     * }
     */
    public interface AddVarDesc {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(AddVarDesc fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeInfo2Vtbl.AddVarDesc_UP$MH, fi, ICreateTypeInfo2Vtbl.AddVarDesc$FUNC, scope);
        }
        static AddVarDesc ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)ICreateTypeInfo2Vtbl.AddVarDesc_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddVarDesc$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddVarDesc"));
    public static VarHandle AddVarDesc$VH() {
        return ICreateTypeInfo2Vtbl.AddVarDesc$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*AddVarDesc)(ICreateTypeInfo2*,UINT,VARDESC*);
     * }
     */
    public static MemorySegment AddVarDesc$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.AddVarDesc$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*AddVarDesc)(ICreateTypeInfo2*,UINT,VARDESC*);
     * }
     */
    public static void AddVarDesc$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeInfo2Vtbl.AddVarDesc$VH.set(seg, x);
    }
    public static MemorySegment AddVarDesc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.AddVarDesc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddVarDesc$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeInfo2Vtbl.AddVarDesc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddVarDesc AddVarDesc(MemorySegment segment, SegmentScope scope) {
        return AddVarDesc.ofAddress(AddVarDesc$get(segment), scope);
    }
    static final FunctionDescriptor SetFuncAndParamNames$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor SetFuncAndParamNames_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle SetFuncAndParamNames_UP$MH = RuntimeHelper.upcallHandle(SetFuncAndParamNames.class, "apply", ICreateTypeInfo2Vtbl.SetFuncAndParamNames_UP$FUNC);
    static final FunctionDescriptor SetFuncAndParamNames_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle SetFuncAndParamNames_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeInfo2Vtbl.SetFuncAndParamNames_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetFuncAndParamNames)(ICreateTypeInfo2*,UINT,LPOLESTR*,UINT);
     * }
     */
    public interface SetFuncAndParamNames {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, int _x3);
        static MemorySegment allocate(SetFuncAndParamNames fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeInfo2Vtbl.SetFuncAndParamNames_UP$MH, fi, ICreateTypeInfo2Vtbl.SetFuncAndParamNames$FUNC, scope);
        }
        static SetFuncAndParamNames ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, int __x3) -> {
                try {
                    return (int)ICreateTypeInfo2Vtbl.SetFuncAndParamNames_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetFuncAndParamNames$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetFuncAndParamNames"));
    public static VarHandle SetFuncAndParamNames$VH() {
        return ICreateTypeInfo2Vtbl.SetFuncAndParamNames$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetFuncAndParamNames)(ICreateTypeInfo2*,UINT,LPOLESTR*,UINT);
     * }
     */
    public static MemorySegment SetFuncAndParamNames$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.SetFuncAndParamNames$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetFuncAndParamNames)(ICreateTypeInfo2*,UINT,LPOLESTR*,UINT);
     * }
     */
    public static void SetFuncAndParamNames$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeInfo2Vtbl.SetFuncAndParamNames$VH.set(seg, x);
    }
    public static MemorySegment SetFuncAndParamNames$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.SetFuncAndParamNames$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetFuncAndParamNames$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeInfo2Vtbl.SetFuncAndParamNames$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetFuncAndParamNames SetFuncAndParamNames(MemorySegment segment, SegmentScope scope) {
        return SetFuncAndParamNames.ofAddress(SetFuncAndParamNames$get(segment), scope);
    }
    static final FunctionDescriptor SetVarName$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor SetVarName_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetVarName_UP$MH = RuntimeHelper.upcallHandle(SetVarName.class, "apply", ICreateTypeInfo2Vtbl.SetVarName_UP$FUNC);
    static final FunctionDescriptor SetVarName_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetVarName_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeInfo2Vtbl.SetVarName_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetVarName)(ICreateTypeInfo2*,UINT,LPOLESTR);
     * }
     */
    public interface SetVarName {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(SetVarName fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeInfo2Vtbl.SetVarName_UP$MH, fi, ICreateTypeInfo2Vtbl.SetVarName$FUNC, scope);
        }
        static SetVarName ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)ICreateTypeInfo2Vtbl.SetVarName_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetVarName$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetVarName"));
    public static VarHandle SetVarName$VH() {
        return ICreateTypeInfo2Vtbl.SetVarName$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetVarName)(ICreateTypeInfo2*,UINT,LPOLESTR);
     * }
     */
    public static MemorySegment SetVarName$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.SetVarName$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetVarName)(ICreateTypeInfo2*,UINT,LPOLESTR);
     * }
     */
    public static void SetVarName$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeInfo2Vtbl.SetVarName$VH.set(seg, x);
    }
    public static MemorySegment SetVarName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.SetVarName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetVarName$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeInfo2Vtbl.SetVarName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetVarName SetVarName(MemorySegment segment, SegmentScope scope) {
        return SetVarName.ofAddress(SetVarName$get(segment), scope);
    }
    static final FunctionDescriptor SetTypeDescAlias$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor SetTypeDescAlias_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetTypeDescAlias_UP$MH = RuntimeHelper.upcallHandle(SetTypeDescAlias.class, "apply", ICreateTypeInfo2Vtbl.SetTypeDescAlias_UP$FUNC);
    static final FunctionDescriptor SetTypeDescAlias_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetTypeDescAlias_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeInfo2Vtbl.SetTypeDescAlias_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetTypeDescAlias)(ICreateTypeInfo2*,TYPEDESC*);
     * }
     */
    public interface SetTypeDescAlias {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(SetTypeDescAlias fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeInfo2Vtbl.SetTypeDescAlias_UP$MH, fi, ICreateTypeInfo2Vtbl.SetTypeDescAlias$FUNC, scope);
        }
        static SetTypeDescAlias ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)ICreateTypeInfo2Vtbl.SetTypeDescAlias_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetTypeDescAlias$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetTypeDescAlias"));
    public static VarHandle SetTypeDescAlias$VH() {
        return ICreateTypeInfo2Vtbl.SetTypeDescAlias$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetTypeDescAlias)(ICreateTypeInfo2*,TYPEDESC*);
     * }
     */
    public static MemorySegment SetTypeDescAlias$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.SetTypeDescAlias$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetTypeDescAlias)(ICreateTypeInfo2*,TYPEDESC*);
     * }
     */
    public static void SetTypeDescAlias$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeInfo2Vtbl.SetTypeDescAlias$VH.set(seg, x);
    }
    public static MemorySegment SetTypeDescAlias$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.SetTypeDescAlias$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetTypeDescAlias$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeInfo2Vtbl.SetTypeDescAlias$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetTypeDescAlias SetTypeDescAlias(MemorySegment segment, SegmentScope scope) {
        return SetTypeDescAlias.ofAddress(SetTypeDescAlias$get(segment), scope);
    }
    static final FunctionDescriptor DefineFuncAsDllEntry$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor DefineFuncAsDllEntry_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle DefineFuncAsDllEntry_UP$MH = RuntimeHelper.upcallHandle(DefineFuncAsDllEntry.class, "apply", ICreateTypeInfo2Vtbl.DefineFuncAsDllEntry_UP$FUNC);
    static final FunctionDescriptor DefineFuncAsDllEntry_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle DefineFuncAsDllEntry_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeInfo2Vtbl.DefineFuncAsDllEntry_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*DefineFuncAsDllEntry)(ICreateTypeInfo2*,UINT,LPOLESTR,LPOLESTR);
     * }
     */
    public interface DefineFuncAsDllEntry {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(DefineFuncAsDllEntry fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeInfo2Vtbl.DefineFuncAsDllEntry_UP$MH, fi, ICreateTypeInfo2Vtbl.DefineFuncAsDllEntry$FUNC, scope);
        }
        static DefineFuncAsDllEntry ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)ICreateTypeInfo2Vtbl.DefineFuncAsDllEntry_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle DefineFuncAsDllEntry$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("DefineFuncAsDllEntry"));
    public static VarHandle DefineFuncAsDllEntry$VH() {
        return ICreateTypeInfo2Vtbl.DefineFuncAsDllEntry$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*DefineFuncAsDllEntry)(ICreateTypeInfo2*,UINT,LPOLESTR,LPOLESTR);
     * }
     */
    public static MemorySegment DefineFuncAsDllEntry$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.DefineFuncAsDllEntry$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*DefineFuncAsDllEntry)(ICreateTypeInfo2*,UINT,LPOLESTR,LPOLESTR);
     * }
     */
    public static void DefineFuncAsDllEntry$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeInfo2Vtbl.DefineFuncAsDllEntry$VH.set(seg, x);
    }
    public static MemorySegment DefineFuncAsDllEntry$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.DefineFuncAsDllEntry$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DefineFuncAsDllEntry$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeInfo2Vtbl.DefineFuncAsDllEntry$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static DefineFuncAsDllEntry DefineFuncAsDllEntry(MemorySegment segment, SegmentScope scope) {
        return DefineFuncAsDllEntry.ofAddress(DefineFuncAsDllEntry$get(segment), scope);
    }
    static final FunctionDescriptor SetFuncDocString$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor SetFuncDocString_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetFuncDocString_UP$MH = RuntimeHelper.upcallHandle(SetFuncDocString.class, "apply", ICreateTypeInfo2Vtbl.SetFuncDocString_UP$FUNC);
    static final FunctionDescriptor SetFuncDocString_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetFuncDocString_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeInfo2Vtbl.SetFuncDocString_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetFuncDocString)(ICreateTypeInfo2*,UINT,LPOLESTR);
     * }
     */
    public interface SetFuncDocString {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(SetFuncDocString fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeInfo2Vtbl.SetFuncDocString_UP$MH, fi, ICreateTypeInfo2Vtbl.SetFuncDocString$FUNC, scope);
        }
        static SetFuncDocString ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)ICreateTypeInfo2Vtbl.SetFuncDocString_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetFuncDocString$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetFuncDocString"));
    public static VarHandle SetFuncDocString$VH() {
        return ICreateTypeInfo2Vtbl.SetFuncDocString$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetFuncDocString)(ICreateTypeInfo2*,UINT,LPOLESTR);
     * }
     */
    public static MemorySegment SetFuncDocString$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.SetFuncDocString$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetFuncDocString)(ICreateTypeInfo2*,UINT,LPOLESTR);
     * }
     */
    public static void SetFuncDocString$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeInfo2Vtbl.SetFuncDocString$VH.set(seg, x);
    }
    public static MemorySegment SetFuncDocString$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.SetFuncDocString$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetFuncDocString$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeInfo2Vtbl.SetFuncDocString$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetFuncDocString SetFuncDocString(MemorySegment segment, SegmentScope scope) {
        return SetFuncDocString.ofAddress(SetFuncDocString$get(segment), scope);
    }
    static final FunctionDescriptor SetVarDocString$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor SetVarDocString_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetVarDocString_UP$MH = RuntimeHelper.upcallHandle(SetVarDocString.class, "apply", ICreateTypeInfo2Vtbl.SetVarDocString_UP$FUNC);
    static final FunctionDescriptor SetVarDocString_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetVarDocString_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeInfo2Vtbl.SetVarDocString_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetVarDocString)(ICreateTypeInfo2*,UINT,LPOLESTR);
     * }
     */
    public interface SetVarDocString {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(SetVarDocString fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeInfo2Vtbl.SetVarDocString_UP$MH, fi, ICreateTypeInfo2Vtbl.SetVarDocString$FUNC, scope);
        }
        static SetVarDocString ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)ICreateTypeInfo2Vtbl.SetVarDocString_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetVarDocString$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetVarDocString"));
    public static VarHandle SetVarDocString$VH() {
        return ICreateTypeInfo2Vtbl.SetVarDocString$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetVarDocString)(ICreateTypeInfo2*,UINT,LPOLESTR);
     * }
     */
    public static MemorySegment SetVarDocString$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.SetVarDocString$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetVarDocString)(ICreateTypeInfo2*,UINT,LPOLESTR);
     * }
     */
    public static void SetVarDocString$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeInfo2Vtbl.SetVarDocString$VH.set(seg, x);
    }
    public static MemorySegment SetVarDocString$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.SetVarDocString$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetVarDocString$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeInfo2Vtbl.SetVarDocString$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetVarDocString SetVarDocString(MemorySegment segment, SegmentScope scope) {
        return SetVarDocString.ofAddress(SetVarDocString$get(segment), scope);
    }
    static final FunctionDescriptor SetFuncHelpContext$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor SetFuncHelpContext_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle SetFuncHelpContext_UP$MH = RuntimeHelper.upcallHandle(SetFuncHelpContext.class, "apply", ICreateTypeInfo2Vtbl.SetFuncHelpContext_UP$FUNC);
    static final FunctionDescriptor SetFuncHelpContext_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle SetFuncHelpContext_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeInfo2Vtbl.SetFuncHelpContext_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetFuncHelpContext)(ICreateTypeInfo2*,UINT,DWORD);
     * }
     */
    public interface SetFuncHelpContext {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2);
        static MemorySegment allocate(SetFuncHelpContext fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeInfo2Vtbl.SetFuncHelpContext_UP$MH, fi, ICreateTypeInfo2Vtbl.SetFuncHelpContext$FUNC, scope);
        }
        static SetFuncHelpContext ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2) -> {
                try {
                    return (int)ICreateTypeInfo2Vtbl.SetFuncHelpContext_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetFuncHelpContext$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetFuncHelpContext"));
    public static VarHandle SetFuncHelpContext$VH() {
        return ICreateTypeInfo2Vtbl.SetFuncHelpContext$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetFuncHelpContext)(ICreateTypeInfo2*,UINT,DWORD);
     * }
     */
    public static MemorySegment SetFuncHelpContext$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.SetFuncHelpContext$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetFuncHelpContext)(ICreateTypeInfo2*,UINT,DWORD);
     * }
     */
    public static void SetFuncHelpContext$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeInfo2Vtbl.SetFuncHelpContext$VH.set(seg, x);
    }
    public static MemorySegment SetFuncHelpContext$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.SetFuncHelpContext$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetFuncHelpContext$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeInfo2Vtbl.SetFuncHelpContext$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetFuncHelpContext SetFuncHelpContext(MemorySegment segment, SegmentScope scope) {
        return SetFuncHelpContext.ofAddress(SetFuncHelpContext$get(segment), scope);
    }
    static final FunctionDescriptor SetVarHelpContext$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor SetVarHelpContext_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle SetVarHelpContext_UP$MH = RuntimeHelper.upcallHandle(SetVarHelpContext.class, "apply", ICreateTypeInfo2Vtbl.SetVarHelpContext_UP$FUNC);
    static final FunctionDescriptor SetVarHelpContext_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle SetVarHelpContext_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeInfo2Vtbl.SetVarHelpContext_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetVarHelpContext)(ICreateTypeInfo2*,UINT,DWORD);
     * }
     */
    public interface SetVarHelpContext {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2);
        static MemorySegment allocate(SetVarHelpContext fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeInfo2Vtbl.SetVarHelpContext_UP$MH, fi, ICreateTypeInfo2Vtbl.SetVarHelpContext$FUNC, scope);
        }
        static SetVarHelpContext ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2) -> {
                try {
                    return (int)ICreateTypeInfo2Vtbl.SetVarHelpContext_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetVarHelpContext$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetVarHelpContext"));
    public static VarHandle SetVarHelpContext$VH() {
        return ICreateTypeInfo2Vtbl.SetVarHelpContext$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetVarHelpContext)(ICreateTypeInfo2*,UINT,DWORD);
     * }
     */
    public static MemorySegment SetVarHelpContext$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.SetVarHelpContext$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetVarHelpContext)(ICreateTypeInfo2*,UINT,DWORD);
     * }
     */
    public static void SetVarHelpContext$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeInfo2Vtbl.SetVarHelpContext$VH.set(seg, x);
    }
    public static MemorySegment SetVarHelpContext$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.SetVarHelpContext$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetVarHelpContext$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeInfo2Vtbl.SetVarHelpContext$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetVarHelpContext SetVarHelpContext(MemorySegment segment, SegmentScope scope) {
        return SetVarHelpContext.ofAddress(SetVarHelpContext$get(segment), scope);
    }
    static final FunctionDescriptor SetMops$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor SetMops_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetMops_UP$MH = RuntimeHelper.upcallHandle(SetMops.class, "apply", ICreateTypeInfo2Vtbl.SetMops_UP$FUNC);
    static final FunctionDescriptor SetMops_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetMops_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeInfo2Vtbl.SetMops_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetMops)(ICreateTypeInfo2*,UINT,BSTR);
     * }
     */
    public interface SetMops {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(SetMops fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeInfo2Vtbl.SetMops_UP$MH, fi, ICreateTypeInfo2Vtbl.SetMops$FUNC, scope);
        }
        static SetMops ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)ICreateTypeInfo2Vtbl.SetMops_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetMops$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetMops"));
    public static VarHandle SetMops$VH() {
        return ICreateTypeInfo2Vtbl.SetMops$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetMops)(ICreateTypeInfo2*,UINT,BSTR);
     * }
     */
    public static MemorySegment SetMops$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.SetMops$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetMops)(ICreateTypeInfo2*,UINT,BSTR);
     * }
     */
    public static void SetMops$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeInfo2Vtbl.SetMops$VH.set(seg, x);
    }
    public static MemorySegment SetMops$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.SetMops$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetMops$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeInfo2Vtbl.SetMops$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetMops SetMops(MemorySegment segment, SegmentScope scope) {
        return SetMops.ofAddress(SetMops$get(segment), scope);
    }
    static final FunctionDescriptor SetTypeIdldesc$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor SetTypeIdldesc_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetTypeIdldesc_UP$MH = RuntimeHelper.upcallHandle(SetTypeIdldesc.class, "apply", ICreateTypeInfo2Vtbl.SetTypeIdldesc_UP$FUNC);
    static final FunctionDescriptor SetTypeIdldesc_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetTypeIdldesc_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeInfo2Vtbl.SetTypeIdldesc_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetTypeIdldesc)(ICreateTypeInfo2*,IDLDESC*);
     * }
     */
    public interface SetTypeIdldesc {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(SetTypeIdldesc fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeInfo2Vtbl.SetTypeIdldesc_UP$MH, fi, ICreateTypeInfo2Vtbl.SetTypeIdldesc$FUNC, scope);
        }
        static SetTypeIdldesc ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)ICreateTypeInfo2Vtbl.SetTypeIdldesc_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetTypeIdldesc$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetTypeIdldesc"));
    public static VarHandle SetTypeIdldesc$VH() {
        return ICreateTypeInfo2Vtbl.SetTypeIdldesc$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetTypeIdldesc)(ICreateTypeInfo2*,IDLDESC*);
     * }
     */
    public static MemorySegment SetTypeIdldesc$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.SetTypeIdldesc$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetTypeIdldesc)(ICreateTypeInfo2*,IDLDESC*);
     * }
     */
    public static void SetTypeIdldesc$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeInfo2Vtbl.SetTypeIdldesc$VH.set(seg, x);
    }
    public static MemorySegment SetTypeIdldesc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.SetTypeIdldesc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetTypeIdldesc$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeInfo2Vtbl.SetTypeIdldesc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetTypeIdldesc SetTypeIdldesc(MemorySegment segment, SegmentScope scope) {
        return SetTypeIdldesc.ofAddress(SetTypeIdldesc$get(segment), scope);
    }
    static final FunctionDescriptor LayOut$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor LayOut_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle LayOut_UP$MH = RuntimeHelper.upcallHandle(LayOut.class, "apply", ICreateTypeInfo2Vtbl.LayOut_UP$FUNC);
    static final FunctionDescriptor LayOut_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle LayOut_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeInfo2Vtbl.LayOut_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*LayOut)(ICreateTypeInfo2*);
     * }
     */
    public interface LayOut {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(LayOut fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeInfo2Vtbl.LayOut_UP$MH, fi, ICreateTypeInfo2Vtbl.LayOut$FUNC, scope);
        }
        static LayOut ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)ICreateTypeInfo2Vtbl.LayOut_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle LayOut$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("LayOut"));
    public static VarHandle LayOut$VH() {
        return ICreateTypeInfo2Vtbl.LayOut$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*LayOut)(ICreateTypeInfo2*);
     * }
     */
    public static MemorySegment LayOut$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.LayOut$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*LayOut)(ICreateTypeInfo2*);
     * }
     */
    public static void LayOut$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeInfo2Vtbl.LayOut$VH.set(seg, x);
    }
    public static MemorySegment LayOut$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.LayOut$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void LayOut$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeInfo2Vtbl.LayOut$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static LayOut LayOut(MemorySegment segment, SegmentScope scope) {
        return LayOut.ofAddress(LayOut$get(segment), scope);
    }
    static final FunctionDescriptor DeleteFuncDesc$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor DeleteFuncDesc_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle DeleteFuncDesc_UP$MH = RuntimeHelper.upcallHandle(DeleteFuncDesc.class, "apply", ICreateTypeInfo2Vtbl.DeleteFuncDesc_UP$FUNC);
    static final FunctionDescriptor DeleteFuncDesc_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle DeleteFuncDesc_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeInfo2Vtbl.DeleteFuncDesc_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*DeleteFuncDesc)(ICreateTypeInfo2*,UINT);
     * }
     */
    public interface DeleteFuncDesc {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(DeleteFuncDesc fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeInfo2Vtbl.DeleteFuncDesc_UP$MH, fi, ICreateTypeInfo2Vtbl.DeleteFuncDesc$FUNC, scope);
        }
        static DeleteFuncDesc ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)ICreateTypeInfo2Vtbl.DeleteFuncDesc_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle DeleteFuncDesc$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("DeleteFuncDesc"));
    public static VarHandle DeleteFuncDesc$VH() {
        return ICreateTypeInfo2Vtbl.DeleteFuncDesc$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*DeleteFuncDesc)(ICreateTypeInfo2*,UINT);
     * }
     */
    public static MemorySegment DeleteFuncDesc$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.DeleteFuncDesc$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*DeleteFuncDesc)(ICreateTypeInfo2*,UINT);
     * }
     */
    public static void DeleteFuncDesc$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeInfo2Vtbl.DeleteFuncDesc$VH.set(seg, x);
    }
    public static MemorySegment DeleteFuncDesc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.DeleteFuncDesc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DeleteFuncDesc$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeInfo2Vtbl.DeleteFuncDesc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static DeleteFuncDesc DeleteFuncDesc(MemorySegment segment, SegmentScope scope) {
        return DeleteFuncDesc.ofAddress(DeleteFuncDesc$get(segment), scope);
    }
    static final FunctionDescriptor DeleteFuncDescByMemId$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor DeleteFuncDescByMemId_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle DeleteFuncDescByMemId_UP$MH = RuntimeHelper.upcallHandle(DeleteFuncDescByMemId.class, "apply", ICreateTypeInfo2Vtbl.DeleteFuncDescByMemId_UP$FUNC);
    static final FunctionDescriptor DeleteFuncDescByMemId_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle DeleteFuncDescByMemId_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeInfo2Vtbl.DeleteFuncDescByMemId_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*DeleteFuncDescByMemId)(ICreateTypeInfo2*,MEMBERID,INVOKEKIND);
     * }
     */
    public interface DeleteFuncDescByMemId {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2);
        static MemorySegment allocate(DeleteFuncDescByMemId fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeInfo2Vtbl.DeleteFuncDescByMemId_UP$MH, fi, ICreateTypeInfo2Vtbl.DeleteFuncDescByMemId$FUNC, scope);
        }
        static DeleteFuncDescByMemId ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2) -> {
                try {
                    return (int)ICreateTypeInfo2Vtbl.DeleteFuncDescByMemId_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle DeleteFuncDescByMemId$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("DeleteFuncDescByMemId"));
    public static VarHandle DeleteFuncDescByMemId$VH() {
        return ICreateTypeInfo2Vtbl.DeleteFuncDescByMemId$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*DeleteFuncDescByMemId)(ICreateTypeInfo2*,MEMBERID,INVOKEKIND);
     * }
     */
    public static MemorySegment DeleteFuncDescByMemId$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.DeleteFuncDescByMemId$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*DeleteFuncDescByMemId)(ICreateTypeInfo2*,MEMBERID,INVOKEKIND);
     * }
     */
    public static void DeleteFuncDescByMemId$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeInfo2Vtbl.DeleteFuncDescByMemId$VH.set(seg, x);
    }
    public static MemorySegment DeleteFuncDescByMemId$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.DeleteFuncDescByMemId$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DeleteFuncDescByMemId$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeInfo2Vtbl.DeleteFuncDescByMemId$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static DeleteFuncDescByMemId DeleteFuncDescByMemId(MemorySegment segment, SegmentScope scope) {
        return DeleteFuncDescByMemId.ofAddress(DeleteFuncDescByMemId$get(segment), scope);
    }
    static final FunctionDescriptor DeleteVarDesc$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor DeleteVarDesc_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle DeleteVarDesc_UP$MH = RuntimeHelper.upcallHandle(DeleteVarDesc.class, "apply", ICreateTypeInfo2Vtbl.DeleteVarDesc_UP$FUNC);
    static final FunctionDescriptor DeleteVarDesc_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle DeleteVarDesc_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeInfo2Vtbl.DeleteVarDesc_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*DeleteVarDesc)(ICreateTypeInfo2*,UINT);
     * }
     */
    public interface DeleteVarDesc {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(DeleteVarDesc fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeInfo2Vtbl.DeleteVarDesc_UP$MH, fi, ICreateTypeInfo2Vtbl.DeleteVarDesc$FUNC, scope);
        }
        static DeleteVarDesc ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)ICreateTypeInfo2Vtbl.DeleteVarDesc_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle DeleteVarDesc$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("DeleteVarDesc"));
    public static VarHandle DeleteVarDesc$VH() {
        return ICreateTypeInfo2Vtbl.DeleteVarDesc$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*DeleteVarDesc)(ICreateTypeInfo2*,UINT);
     * }
     */
    public static MemorySegment DeleteVarDesc$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.DeleteVarDesc$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*DeleteVarDesc)(ICreateTypeInfo2*,UINT);
     * }
     */
    public static void DeleteVarDesc$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeInfo2Vtbl.DeleteVarDesc$VH.set(seg, x);
    }
    public static MemorySegment DeleteVarDesc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.DeleteVarDesc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DeleteVarDesc$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeInfo2Vtbl.DeleteVarDesc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static DeleteVarDesc DeleteVarDesc(MemorySegment segment, SegmentScope scope) {
        return DeleteVarDesc.ofAddress(DeleteVarDesc$get(segment), scope);
    }
    static final FunctionDescriptor DeleteVarDescByMemId$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor DeleteVarDescByMemId_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle DeleteVarDescByMemId_UP$MH = RuntimeHelper.upcallHandle(DeleteVarDescByMemId.class, "apply", ICreateTypeInfo2Vtbl.DeleteVarDescByMemId_UP$FUNC);
    static final FunctionDescriptor DeleteVarDescByMemId_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle DeleteVarDescByMemId_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeInfo2Vtbl.DeleteVarDescByMemId_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*DeleteVarDescByMemId)(ICreateTypeInfo2*,MEMBERID);
     * }
     */
    public interface DeleteVarDescByMemId {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(DeleteVarDescByMemId fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeInfo2Vtbl.DeleteVarDescByMemId_UP$MH, fi, ICreateTypeInfo2Vtbl.DeleteVarDescByMemId$FUNC, scope);
        }
        static DeleteVarDescByMemId ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)ICreateTypeInfo2Vtbl.DeleteVarDescByMemId_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle DeleteVarDescByMemId$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("DeleteVarDescByMemId"));
    public static VarHandle DeleteVarDescByMemId$VH() {
        return ICreateTypeInfo2Vtbl.DeleteVarDescByMemId$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*DeleteVarDescByMemId)(ICreateTypeInfo2*,MEMBERID);
     * }
     */
    public static MemorySegment DeleteVarDescByMemId$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.DeleteVarDescByMemId$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*DeleteVarDescByMemId)(ICreateTypeInfo2*,MEMBERID);
     * }
     */
    public static void DeleteVarDescByMemId$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeInfo2Vtbl.DeleteVarDescByMemId$VH.set(seg, x);
    }
    public static MemorySegment DeleteVarDescByMemId$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.DeleteVarDescByMemId$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DeleteVarDescByMemId$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeInfo2Vtbl.DeleteVarDescByMemId$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static DeleteVarDescByMemId DeleteVarDescByMemId(MemorySegment segment, SegmentScope scope) {
        return DeleteVarDescByMemId.ofAddress(DeleteVarDescByMemId$get(segment), scope);
    }
    static final FunctionDescriptor DeleteImplType$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor DeleteImplType_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle DeleteImplType_UP$MH = RuntimeHelper.upcallHandle(DeleteImplType.class, "apply", ICreateTypeInfo2Vtbl.DeleteImplType_UP$FUNC);
    static final FunctionDescriptor DeleteImplType_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle DeleteImplType_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeInfo2Vtbl.DeleteImplType_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*DeleteImplType)(ICreateTypeInfo2*,UINT);
     * }
     */
    public interface DeleteImplType {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(DeleteImplType fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeInfo2Vtbl.DeleteImplType_UP$MH, fi, ICreateTypeInfo2Vtbl.DeleteImplType$FUNC, scope);
        }
        static DeleteImplType ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)ICreateTypeInfo2Vtbl.DeleteImplType_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle DeleteImplType$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("DeleteImplType"));
    public static VarHandle DeleteImplType$VH() {
        return ICreateTypeInfo2Vtbl.DeleteImplType$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*DeleteImplType)(ICreateTypeInfo2*,UINT);
     * }
     */
    public static MemorySegment DeleteImplType$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.DeleteImplType$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*DeleteImplType)(ICreateTypeInfo2*,UINT);
     * }
     */
    public static void DeleteImplType$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeInfo2Vtbl.DeleteImplType$VH.set(seg, x);
    }
    public static MemorySegment DeleteImplType$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.DeleteImplType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DeleteImplType$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeInfo2Vtbl.DeleteImplType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static DeleteImplType DeleteImplType(MemorySegment segment, SegmentScope scope) {
        return DeleteImplType.ofAddress(DeleteImplType$get(segment), scope);
    }
    static final FunctionDescriptor SetCustData$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor SetCustData_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetCustData_UP$MH = RuntimeHelper.upcallHandle(SetCustData.class, "apply", ICreateTypeInfo2Vtbl.SetCustData_UP$FUNC);
    static final FunctionDescriptor SetCustData_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetCustData_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeInfo2Vtbl.SetCustData_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetCustData)(ICreateTypeInfo2*,const GUID*,VARIANT*);
     * }
     */
    public interface SetCustData {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(SetCustData fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeInfo2Vtbl.SetCustData_UP$MH, fi, ICreateTypeInfo2Vtbl.SetCustData$FUNC, scope);
        }
        static SetCustData ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)ICreateTypeInfo2Vtbl.SetCustData_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetCustData$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetCustData"));
    public static VarHandle SetCustData$VH() {
        return ICreateTypeInfo2Vtbl.SetCustData$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetCustData)(ICreateTypeInfo2*,const GUID*,VARIANT*);
     * }
     */
    public static MemorySegment SetCustData$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.SetCustData$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetCustData)(ICreateTypeInfo2*,const GUID*,VARIANT*);
     * }
     */
    public static void SetCustData$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeInfo2Vtbl.SetCustData$VH.set(seg, x);
    }
    public static MemorySegment SetCustData$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.SetCustData$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetCustData$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeInfo2Vtbl.SetCustData$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetCustData SetCustData(MemorySegment segment, SegmentScope scope) {
        return SetCustData.ofAddress(SetCustData$get(segment), scope);
    }
    static final FunctionDescriptor SetFuncCustData$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor SetFuncCustData_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetFuncCustData_UP$MH = RuntimeHelper.upcallHandle(SetFuncCustData.class, "apply", ICreateTypeInfo2Vtbl.SetFuncCustData_UP$FUNC);
    static final FunctionDescriptor SetFuncCustData_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetFuncCustData_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeInfo2Vtbl.SetFuncCustData_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetFuncCustData)(ICreateTypeInfo2*,UINT,const GUID*,VARIANT*);
     * }
     */
    public interface SetFuncCustData {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(SetFuncCustData fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeInfo2Vtbl.SetFuncCustData_UP$MH, fi, ICreateTypeInfo2Vtbl.SetFuncCustData$FUNC, scope);
        }
        static SetFuncCustData ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)ICreateTypeInfo2Vtbl.SetFuncCustData_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetFuncCustData$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetFuncCustData"));
    public static VarHandle SetFuncCustData$VH() {
        return ICreateTypeInfo2Vtbl.SetFuncCustData$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetFuncCustData)(ICreateTypeInfo2*,UINT,const GUID*,VARIANT*);
     * }
     */
    public static MemorySegment SetFuncCustData$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.SetFuncCustData$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetFuncCustData)(ICreateTypeInfo2*,UINT,const GUID*,VARIANT*);
     * }
     */
    public static void SetFuncCustData$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeInfo2Vtbl.SetFuncCustData$VH.set(seg, x);
    }
    public static MemorySegment SetFuncCustData$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.SetFuncCustData$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetFuncCustData$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeInfo2Vtbl.SetFuncCustData$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetFuncCustData SetFuncCustData(MemorySegment segment, SegmentScope scope) {
        return SetFuncCustData.ofAddress(SetFuncCustData$get(segment), scope);
    }
    static final FunctionDescriptor SetParamCustData$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor SetParamCustData_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetParamCustData_UP$MH = RuntimeHelper.upcallHandle(SetParamCustData.class, "apply", ICreateTypeInfo2Vtbl.SetParamCustData_UP$FUNC);
    static final FunctionDescriptor SetParamCustData_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetParamCustData_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeInfo2Vtbl.SetParamCustData_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetParamCustData)(ICreateTypeInfo2*,UINT,UINT,const GUID*,VARIANT*);
     * }
     */
    public interface SetParamCustData {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(SetParamCustData fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeInfo2Vtbl.SetParamCustData_UP$MH, fi, ICreateTypeInfo2Vtbl.SetParamCustData$FUNC, scope);
        }
        static SetParamCustData ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (int)ICreateTypeInfo2Vtbl.SetParamCustData_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetParamCustData$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetParamCustData"));
    public static VarHandle SetParamCustData$VH() {
        return ICreateTypeInfo2Vtbl.SetParamCustData$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetParamCustData)(ICreateTypeInfo2*,UINT,UINT,const GUID*,VARIANT*);
     * }
     */
    public static MemorySegment SetParamCustData$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.SetParamCustData$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetParamCustData)(ICreateTypeInfo2*,UINT,UINT,const GUID*,VARIANT*);
     * }
     */
    public static void SetParamCustData$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeInfo2Vtbl.SetParamCustData$VH.set(seg, x);
    }
    public static MemorySegment SetParamCustData$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.SetParamCustData$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetParamCustData$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeInfo2Vtbl.SetParamCustData$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetParamCustData SetParamCustData(MemorySegment segment, SegmentScope scope) {
        return SetParamCustData.ofAddress(SetParamCustData$get(segment), scope);
    }
    static final FunctionDescriptor SetVarCustData$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor SetVarCustData_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetVarCustData_UP$MH = RuntimeHelper.upcallHandle(SetVarCustData.class, "apply", ICreateTypeInfo2Vtbl.SetVarCustData_UP$FUNC);
    static final FunctionDescriptor SetVarCustData_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetVarCustData_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeInfo2Vtbl.SetVarCustData_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetVarCustData)(ICreateTypeInfo2*,UINT,const GUID*,VARIANT*);
     * }
     */
    public interface SetVarCustData {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(SetVarCustData fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeInfo2Vtbl.SetVarCustData_UP$MH, fi, ICreateTypeInfo2Vtbl.SetVarCustData$FUNC, scope);
        }
        static SetVarCustData ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)ICreateTypeInfo2Vtbl.SetVarCustData_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetVarCustData$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetVarCustData"));
    public static VarHandle SetVarCustData$VH() {
        return ICreateTypeInfo2Vtbl.SetVarCustData$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetVarCustData)(ICreateTypeInfo2*,UINT,const GUID*,VARIANT*);
     * }
     */
    public static MemorySegment SetVarCustData$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.SetVarCustData$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetVarCustData)(ICreateTypeInfo2*,UINT,const GUID*,VARIANT*);
     * }
     */
    public static void SetVarCustData$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeInfo2Vtbl.SetVarCustData$VH.set(seg, x);
    }
    public static MemorySegment SetVarCustData$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.SetVarCustData$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetVarCustData$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeInfo2Vtbl.SetVarCustData$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetVarCustData SetVarCustData(MemorySegment segment, SegmentScope scope) {
        return SetVarCustData.ofAddress(SetVarCustData$get(segment), scope);
    }
    static final FunctionDescriptor SetImplTypeCustData$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor SetImplTypeCustData_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetImplTypeCustData_UP$MH = RuntimeHelper.upcallHandle(SetImplTypeCustData.class, "apply", ICreateTypeInfo2Vtbl.SetImplTypeCustData_UP$FUNC);
    static final FunctionDescriptor SetImplTypeCustData_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetImplTypeCustData_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeInfo2Vtbl.SetImplTypeCustData_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetImplTypeCustData)(ICreateTypeInfo2*,UINT,const GUID*,VARIANT*);
     * }
     */
    public interface SetImplTypeCustData {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(SetImplTypeCustData fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeInfo2Vtbl.SetImplTypeCustData_UP$MH, fi, ICreateTypeInfo2Vtbl.SetImplTypeCustData$FUNC, scope);
        }
        static SetImplTypeCustData ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)ICreateTypeInfo2Vtbl.SetImplTypeCustData_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetImplTypeCustData$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetImplTypeCustData"));
    public static VarHandle SetImplTypeCustData$VH() {
        return ICreateTypeInfo2Vtbl.SetImplTypeCustData$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetImplTypeCustData)(ICreateTypeInfo2*,UINT,const GUID*,VARIANT*);
     * }
     */
    public static MemorySegment SetImplTypeCustData$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.SetImplTypeCustData$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetImplTypeCustData)(ICreateTypeInfo2*,UINT,const GUID*,VARIANT*);
     * }
     */
    public static void SetImplTypeCustData$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeInfo2Vtbl.SetImplTypeCustData$VH.set(seg, x);
    }
    public static MemorySegment SetImplTypeCustData$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.SetImplTypeCustData$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetImplTypeCustData$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeInfo2Vtbl.SetImplTypeCustData$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetImplTypeCustData SetImplTypeCustData(MemorySegment segment, SegmentScope scope) {
        return SetImplTypeCustData.ofAddress(SetImplTypeCustData$get(segment), scope);
    }
    static final FunctionDescriptor SetHelpStringContext$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor SetHelpStringContext_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle SetHelpStringContext_UP$MH = RuntimeHelper.upcallHandle(SetHelpStringContext.class, "apply", ICreateTypeInfo2Vtbl.SetHelpStringContext_UP$FUNC);
    static final FunctionDescriptor SetHelpStringContext_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle SetHelpStringContext_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeInfo2Vtbl.SetHelpStringContext_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetHelpStringContext)(ICreateTypeInfo2*,ULONG);
     * }
     */
    public interface SetHelpStringContext {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(SetHelpStringContext fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeInfo2Vtbl.SetHelpStringContext_UP$MH, fi, ICreateTypeInfo2Vtbl.SetHelpStringContext$FUNC, scope);
        }
        static SetHelpStringContext ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)ICreateTypeInfo2Vtbl.SetHelpStringContext_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetHelpStringContext$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetHelpStringContext"));
    public static VarHandle SetHelpStringContext$VH() {
        return ICreateTypeInfo2Vtbl.SetHelpStringContext$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetHelpStringContext)(ICreateTypeInfo2*,ULONG);
     * }
     */
    public static MemorySegment SetHelpStringContext$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.SetHelpStringContext$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetHelpStringContext)(ICreateTypeInfo2*,ULONG);
     * }
     */
    public static void SetHelpStringContext$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeInfo2Vtbl.SetHelpStringContext$VH.set(seg, x);
    }
    public static MemorySegment SetHelpStringContext$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.SetHelpStringContext$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetHelpStringContext$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeInfo2Vtbl.SetHelpStringContext$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetHelpStringContext SetHelpStringContext(MemorySegment segment, SegmentScope scope) {
        return SetHelpStringContext.ofAddress(SetHelpStringContext$get(segment), scope);
    }
    static final FunctionDescriptor SetFuncHelpStringContext$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor SetFuncHelpStringContext_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle SetFuncHelpStringContext_UP$MH = RuntimeHelper.upcallHandle(SetFuncHelpStringContext.class, "apply", ICreateTypeInfo2Vtbl.SetFuncHelpStringContext_UP$FUNC);
    static final FunctionDescriptor SetFuncHelpStringContext_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle SetFuncHelpStringContext_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeInfo2Vtbl.SetFuncHelpStringContext_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetFuncHelpStringContext)(ICreateTypeInfo2*,UINT,ULONG);
     * }
     */
    public interface SetFuncHelpStringContext {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2);
        static MemorySegment allocate(SetFuncHelpStringContext fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeInfo2Vtbl.SetFuncHelpStringContext_UP$MH, fi, ICreateTypeInfo2Vtbl.SetFuncHelpStringContext$FUNC, scope);
        }
        static SetFuncHelpStringContext ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2) -> {
                try {
                    return (int)ICreateTypeInfo2Vtbl.SetFuncHelpStringContext_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetFuncHelpStringContext$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetFuncHelpStringContext"));
    public static VarHandle SetFuncHelpStringContext$VH() {
        return ICreateTypeInfo2Vtbl.SetFuncHelpStringContext$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetFuncHelpStringContext)(ICreateTypeInfo2*,UINT,ULONG);
     * }
     */
    public static MemorySegment SetFuncHelpStringContext$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.SetFuncHelpStringContext$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetFuncHelpStringContext)(ICreateTypeInfo2*,UINT,ULONG);
     * }
     */
    public static void SetFuncHelpStringContext$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeInfo2Vtbl.SetFuncHelpStringContext$VH.set(seg, x);
    }
    public static MemorySegment SetFuncHelpStringContext$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.SetFuncHelpStringContext$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetFuncHelpStringContext$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeInfo2Vtbl.SetFuncHelpStringContext$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetFuncHelpStringContext SetFuncHelpStringContext(MemorySegment segment, SegmentScope scope) {
        return SetFuncHelpStringContext.ofAddress(SetFuncHelpStringContext$get(segment), scope);
    }
    static final FunctionDescriptor SetVarHelpStringContext$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor SetVarHelpStringContext_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle SetVarHelpStringContext_UP$MH = RuntimeHelper.upcallHandle(SetVarHelpStringContext.class, "apply", ICreateTypeInfo2Vtbl.SetVarHelpStringContext_UP$FUNC);
    static final FunctionDescriptor SetVarHelpStringContext_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle SetVarHelpStringContext_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeInfo2Vtbl.SetVarHelpStringContext_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetVarHelpStringContext)(ICreateTypeInfo2*,UINT,ULONG);
     * }
     */
    public interface SetVarHelpStringContext {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2);
        static MemorySegment allocate(SetVarHelpStringContext fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeInfo2Vtbl.SetVarHelpStringContext_UP$MH, fi, ICreateTypeInfo2Vtbl.SetVarHelpStringContext$FUNC, scope);
        }
        static SetVarHelpStringContext ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2) -> {
                try {
                    return (int)ICreateTypeInfo2Vtbl.SetVarHelpStringContext_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetVarHelpStringContext$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetVarHelpStringContext"));
    public static VarHandle SetVarHelpStringContext$VH() {
        return ICreateTypeInfo2Vtbl.SetVarHelpStringContext$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetVarHelpStringContext)(ICreateTypeInfo2*,UINT,ULONG);
     * }
     */
    public static MemorySegment SetVarHelpStringContext$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.SetVarHelpStringContext$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetVarHelpStringContext)(ICreateTypeInfo2*,UINT,ULONG);
     * }
     */
    public static void SetVarHelpStringContext$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeInfo2Vtbl.SetVarHelpStringContext$VH.set(seg, x);
    }
    public static MemorySegment SetVarHelpStringContext$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.SetVarHelpStringContext$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetVarHelpStringContext$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeInfo2Vtbl.SetVarHelpStringContext$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetVarHelpStringContext SetVarHelpStringContext(MemorySegment segment, SegmentScope scope) {
        return SetVarHelpStringContext.ofAddress(SetVarHelpStringContext$get(segment), scope);
    }
    static final FunctionDescriptor Invalidate$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Invalidate_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Invalidate_UP$MH = RuntimeHelper.upcallHandle(Invalidate.class, "apply", ICreateTypeInfo2Vtbl.Invalidate_UP$FUNC);
    static final FunctionDescriptor Invalidate_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Invalidate_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeInfo2Vtbl.Invalidate_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*Invalidate)(ICreateTypeInfo2*);
     * }
     */
    public interface Invalidate {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Invalidate fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeInfo2Vtbl.Invalidate_UP$MH, fi, ICreateTypeInfo2Vtbl.Invalidate$FUNC, scope);
        }
        static Invalidate ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)ICreateTypeInfo2Vtbl.Invalidate_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Invalidate$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Invalidate"));
    public static VarHandle Invalidate$VH() {
        return ICreateTypeInfo2Vtbl.Invalidate$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Invalidate)(ICreateTypeInfo2*);
     * }
     */
    public static MemorySegment Invalidate$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.Invalidate$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Invalidate)(ICreateTypeInfo2*);
     * }
     */
    public static void Invalidate$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeInfo2Vtbl.Invalidate$VH.set(seg, x);
    }
    public static MemorySegment Invalidate$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.Invalidate$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Invalidate$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeInfo2Vtbl.Invalidate$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Invalidate Invalidate(MemorySegment segment, SegmentScope scope) {
        return Invalidate.ofAddress(Invalidate$get(segment), scope);
    }
    static final FunctionDescriptor SetName$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor SetName_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetName_UP$MH = RuntimeHelper.upcallHandle(SetName.class, "apply", ICreateTypeInfo2Vtbl.SetName_UP$FUNC);
    static final FunctionDescriptor SetName_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetName_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeInfo2Vtbl.SetName_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetName)(ICreateTypeInfo2*,LPOLESTR);
     * }
     */
    public interface SetName {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(SetName fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeInfo2Vtbl.SetName_UP$MH, fi, ICreateTypeInfo2Vtbl.SetName$FUNC, scope);
        }
        static SetName ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)ICreateTypeInfo2Vtbl.SetName_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetName$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetName"));
    public static VarHandle SetName$VH() {
        return ICreateTypeInfo2Vtbl.SetName$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetName)(ICreateTypeInfo2*,LPOLESTR);
     * }
     */
    public static MemorySegment SetName$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.SetName$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetName)(ICreateTypeInfo2*,LPOLESTR);
     * }
     */
    public static void SetName$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeInfo2Vtbl.SetName$VH.set(seg, x);
    }
    public static MemorySegment SetName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfo2Vtbl.SetName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetName$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeInfo2Vtbl.SetName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetName SetName(MemorySegment segment, SegmentScope scope) {
        return SetName.ofAddress(SetName$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


