// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct tagTLIBATTR {
 *     GUID guid;
 *     LCID lcid;
 *     SYSKIND syskind;
 *     WORD wMajorVerNum;
 *     WORD wMinorVerNum;
 *     WORD wLibFlags;
 * };
 * }
 */
public class tagTLIBATTR {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("Data1"),
            Constants$root.C_SHORT$LAYOUT.withName("Data2"),
            Constants$root.C_SHORT$LAYOUT.withName("Data3"),
            MemoryLayout.sequenceLayout(8, Constants$root.C_CHAR$LAYOUT).withName("Data4")
        ).withName("guid"),
        Constants$root.C_LONG$LAYOUT.withName("lcid"),
        Constants$root.C_LONG$LAYOUT.withName("syskind"),
        Constants$root.C_SHORT$LAYOUT.withName("wMajorVerNum"),
        Constants$root.C_SHORT$LAYOUT.withName("wMinorVerNum"),
        Constants$root.C_SHORT$LAYOUT.withName("wLibFlags"),
        MemoryLayout.paddingLayout(16)
    ).withName("tagTLIBATTR");
    public static MemoryLayout $LAYOUT() {
        return tagTLIBATTR.$struct$LAYOUT;
    }
    public static MemorySegment guid$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    static final VarHandle lcid$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lcid"));
    public static VarHandle lcid$VH() {
        return tagTLIBATTR.lcid$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LCID lcid;
     * }
     */
    public static int lcid$get(MemorySegment seg) {
        return (int)tagTLIBATTR.lcid$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LCID lcid;
     * }
     */
    public static void lcid$set(MemorySegment seg, int x) {
        tagTLIBATTR.lcid$VH.set(seg, x);
    }
    public static int lcid$get(MemorySegment seg, long index) {
        return (int)tagTLIBATTR.lcid$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lcid$set(MemorySegment seg, long index, int x) {
        tagTLIBATTR.lcid$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle syskind$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("syskind"));
    public static VarHandle syskind$VH() {
        return tagTLIBATTR.syskind$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * SYSKIND syskind;
     * }
     */
    public static int syskind$get(MemorySegment seg) {
        return (int)tagTLIBATTR.syskind$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * SYSKIND syskind;
     * }
     */
    public static void syskind$set(MemorySegment seg, int x) {
        tagTLIBATTR.syskind$VH.set(seg, x);
    }
    public static int syskind$get(MemorySegment seg, long index) {
        return (int)tagTLIBATTR.syskind$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void syskind$set(MemorySegment seg, long index, int x) {
        tagTLIBATTR.syskind$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle wMajorVerNum$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("wMajorVerNum"));
    public static VarHandle wMajorVerNum$VH() {
        return tagTLIBATTR.wMajorVerNum$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD wMajorVerNum;
     * }
     */
    public static short wMajorVerNum$get(MemorySegment seg) {
        return (short)tagTLIBATTR.wMajorVerNum$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD wMajorVerNum;
     * }
     */
    public static void wMajorVerNum$set(MemorySegment seg, short x) {
        tagTLIBATTR.wMajorVerNum$VH.set(seg, x);
    }
    public static short wMajorVerNum$get(MemorySegment seg, long index) {
        return (short)tagTLIBATTR.wMajorVerNum$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void wMajorVerNum$set(MemorySegment seg, long index, short x) {
        tagTLIBATTR.wMajorVerNum$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle wMinorVerNum$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("wMinorVerNum"));
    public static VarHandle wMinorVerNum$VH() {
        return tagTLIBATTR.wMinorVerNum$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD wMinorVerNum;
     * }
     */
    public static short wMinorVerNum$get(MemorySegment seg) {
        return (short)tagTLIBATTR.wMinorVerNum$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD wMinorVerNum;
     * }
     */
    public static void wMinorVerNum$set(MemorySegment seg, short x) {
        tagTLIBATTR.wMinorVerNum$VH.set(seg, x);
    }
    public static short wMinorVerNum$get(MemorySegment seg, long index) {
        return (short)tagTLIBATTR.wMinorVerNum$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void wMinorVerNum$set(MemorySegment seg, long index, short x) {
        tagTLIBATTR.wMinorVerNum$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle wLibFlags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("wLibFlags"));
    public static VarHandle wLibFlags$VH() {
        return tagTLIBATTR.wLibFlags$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD wLibFlags;
     * }
     */
    public static short wLibFlags$get(MemorySegment seg) {
        return (short)tagTLIBATTR.wLibFlags$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD wLibFlags;
     * }
     */
    public static void wLibFlags$set(MemorySegment seg, short x) {
        tagTLIBATTR.wLibFlags$VH.set(seg, x);
    }
    public static short wLibFlags$get(MemorySegment seg, long index) {
        return (short)tagTLIBATTR.wLibFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void wLibFlags$set(MemorySegment seg, long index, short x) {
        tagTLIBATTR.wLibFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


