// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IStorageVtbl {
 *     HRESULT (*QueryInterface)(IStorage*,const IID*,void**);
 *     ULONG (*AddRef)(IStorage*);
 *     ULONG (*Release)(IStorage*);
 *     HRESULT (*CreateStream)(IStorage*,const OLECHAR*,DWORD,DWORD,DWORD,IStream**);
 *     HRESULT (*OpenStream)(IStorage*,const OLECHAR*,void*,DWORD,DWORD,IStream**);
 *     HRESULT (*CreateStorage)(IStorage*,const OLECHAR*,DWORD,DWORD,DWORD,IStorage**);
 *     HRESULT (*OpenStorage)(IStorage*,const OLECHAR*,IStorage*,DWORD,SNB,DWORD,IStorage**);
 *     HRESULT (*CopyTo)(IStorage*,DWORD,const IID*,SNB,IStorage*);
 *     HRESULT (*MoveElementTo)(IStorage*,const OLECHAR*,IStorage*,const OLECHAR*,DWORD);
 *     HRESULT (*Commit)(IStorage*,DWORD);
 *     HRESULT (*Revert)(IStorage*);
 *     HRESULT (*EnumElements)(IStorage*,DWORD,void*,DWORD,IEnumSTATSTG**);
 *     HRESULT (*DestroyElement)(IStorage*,const OLECHAR*);
 *     HRESULT (*RenameElement)(IStorage*,const OLECHAR*,const OLECHAR*);
 *     HRESULT (*SetElementTimes)(IStorage*,const OLECHAR*,const FILETIME*,const FILETIME*,const FILETIME*);
 *     HRESULT (*SetClass)(IStorage*,const IID*);
 *     HRESULT (*SetStateBits)(IStorage*,DWORD,DWORD);
 *     HRESULT (*Stat)(IStorage*,STATSTG*,DWORD);
 * };
 * }
 */
public class IStorageVtbl {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("CreateStream"),
        Constants$root.C_POINTER$LAYOUT.withName("OpenStream"),
        Constants$root.C_POINTER$LAYOUT.withName("CreateStorage"),
        Constants$root.C_POINTER$LAYOUT.withName("OpenStorage"),
        Constants$root.C_POINTER$LAYOUT.withName("CopyTo"),
        Constants$root.C_POINTER$LAYOUT.withName("MoveElementTo"),
        Constants$root.C_POINTER$LAYOUT.withName("Commit"),
        Constants$root.C_POINTER$LAYOUT.withName("Revert"),
        Constants$root.C_POINTER$LAYOUT.withName("EnumElements"),
        Constants$root.C_POINTER$LAYOUT.withName("DestroyElement"),
        Constants$root.C_POINTER$LAYOUT.withName("RenameElement"),
        Constants$root.C_POINTER$LAYOUT.withName("SetElementTimes"),
        Constants$root.C_POINTER$LAYOUT.withName("SetClass"),
        Constants$root.C_POINTER$LAYOUT.withName("SetStateBits"),
        Constants$root.C_POINTER$LAYOUT.withName("Stat")
    ).withName("IStorageVtbl");
    public static MemoryLayout $LAYOUT() {
        return IStorageVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor QueryInterface_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_UP$MH = RuntimeHelper.upcallHandle(QueryInterface.class, "apply", IStorageVtbl.QueryInterface_UP$FUNC);
    static final FunctionDescriptor QueryInterface_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_DOWN$MH = RuntimeHelper.downcallHandle(
        IStorageVtbl.QueryInterface_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(IStorage*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IStorageVtbl.QueryInterface_UP$MH, fi, IStorageVtbl.QueryInterface$FUNC, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IStorageVtbl.QueryInterface_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return IStorageVtbl.QueryInterface$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IStorage*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IStorageVtbl.QueryInterface$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IStorage*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        IStorageVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IStorageVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        IStorageVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, SegmentScope scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor AddRef_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_UP$MH = RuntimeHelper.upcallHandle(AddRef.class, "apply", IStorageVtbl.AddRef_UP$FUNC);
    static final FunctionDescriptor AddRef_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_DOWN$MH = RuntimeHelper.downcallHandle(
        IStorageVtbl.AddRef_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*AddRef)(IStorage*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IStorageVtbl.AddRef_UP$MH, fi, IStorageVtbl.AddRef$FUNC, scope);
        }
        static AddRef ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IStorageVtbl.AddRef_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return IStorageVtbl.AddRef$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(IStorage*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IStorageVtbl.AddRef$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(IStorage*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        IStorageVtbl.AddRef$VH.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IStorageVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        IStorageVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, SegmentScope scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Release_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_UP$MH = RuntimeHelper.upcallHandle(Release.class, "apply", IStorageVtbl.Release_UP$FUNC);
    static final FunctionDescriptor Release_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_DOWN$MH = RuntimeHelper.downcallHandle(
        IStorageVtbl.Release_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*Release)(IStorage*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IStorageVtbl.Release_UP$MH, fi, IStorageVtbl.Release$FUNC, scope);
        }
        static Release ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IStorageVtbl.Release_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return IStorageVtbl.Release$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(IStorage*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IStorageVtbl.Release$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(IStorage*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        IStorageVtbl.Release$VH.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IStorageVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        IStorageVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, SegmentScope scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    static final FunctionDescriptor CreateStream$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor CreateStream_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle CreateStream_UP$MH = RuntimeHelper.upcallHandle(CreateStream.class, "apply", IStorageVtbl.CreateStream_UP$FUNC);
    static final FunctionDescriptor CreateStream_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle CreateStream_DOWN$MH = RuntimeHelper.downcallHandle(
        IStorageVtbl.CreateStream_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*CreateStream)(IStorage*,const OLECHAR*,DWORD,DWORD,DWORD,IStream**);
     * }
     */
    public interface CreateStream {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, int _x3, int _x4, java.lang.foreign.MemorySegment _x5);
        static MemorySegment allocate(CreateStream fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IStorageVtbl.CreateStream_UP$MH, fi, IStorageVtbl.CreateStream$FUNC, scope);
        }
        static CreateStream ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, int __x3, int __x4, java.lang.foreign.MemorySegment __x5) -> {
                try {
                    return (int)IStorageVtbl.CreateStream_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle CreateStream$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("CreateStream"));
    public static VarHandle CreateStream$VH() {
        return IStorageVtbl.CreateStream$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*CreateStream)(IStorage*,const OLECHAR*,DWORD,DWORD,DWORD,IStream**);
     * }
     */
    public static MemorySegment CreateStream$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IStorageVtbl.CreateStream$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*CreateStream)(IStorage*,const OLECHAR*,DWORD,DWORD,DWORD,IStream**);
     * }
     */
    public static void CreateStream$set(MemorySegment seg, MemorySegment x) {
        IStorageVtbl.CreateStream$VH.set(seg, x);
    }
    public static MemorySegment CreateStream$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IStorageVtbl.CreateStream$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CreateStream$set(MemorySegment seg, long index, MemorySegment x) {
        IStorageVtbl.CreateStream$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static CreateStream CreateStream(MemorySegment segment, SegmentScope scope) {
        return CreateStream.ofAddress(CreateStream$get(segment), scope);
    }
    static final FunctionDescriptor OpenStream$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor OpenStream_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle OpenStream_UP$MH = RuntimeHelper.upcallHandle(OpenStream.class, "apply", IStorageVtbl.OpenStream_UP$FUNC);
    static final FunctionDescriptor OpenStream_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle OpenStream_DOWN$MH = RuntimeHelper.downcallHandle(
        IStorageVtbl.OpenStream_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*OpenStream)(IStorage*,const OLECHAR*,void*,DWORD,DWORD,IStream**);
     * }
     */
    public interface OpenStream {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3, int _x4, java.lang.foreign.MemorySegment _x5);
        static MemorySegment allocate(OpenStream fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IStorageVtbl.OpenStream_UP$MH, fi, IStorageVtbl.OpenStream$FUNC, scope);
        }
        static OpenStream ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3, int __x4, java.lang.foreign.MemorySegment __x5) -> {
                try {
                    return (int)IStorageVtbl.OpenStream_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle OpenStream$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("OpenStream"));
    public static VarHandle OpenStream$VH() {
        return IStorageVtbl.OpenStream$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*OpenStream)(IStorage*,const OLECHAR*,void*,DWORD,DWORD,IStream**);
     * }
     */
    public static MemorySegment OpenStream$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IStorageVtbl.OpenStream$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*OpenStream)(IStorage*,const OLECHAR*,void*,DWORD,DWORD,IStream**);
     * }
     */
    public static void OpenStream$set(MemorySegment seg, MemorySegment x) {
        IStorageVtbl.OpenStream$VH.set(seg, x);
    }
    public static MemorySegment OpenStream$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IStorageVtbl.OpenStream$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void OpenStream$set(MemorySegment seg, long index, MemorySegment x) {
        IStorageVtbl.OpenStream$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static OpenStream OpenStream(MemorySegment segment, SegmentScope scope) {
        return OpenStream.ofAddress(OpenStream$get(segment), scope);
    }
    static final FunctionDescriptor CreateStorage$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor CreateStorage_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle CreateStorage_UP$MH = RuntimeHelper.upcallHandle(CreateStorage.class, "apply", IStorageVtbl.CreateStorage_UP$FUNC);
    static final FunctionDescriptor CreateStorage_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle CreateStorage_DOWN$MH = RuntimeHelper.downcallHandle(
        IStorageVtbl.CreateStorage_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*CreateStorage)(IStorage*,const OLECHAR*,DWORD,DWORD,DWORD,IStorage**);
     * }
     */
    public interface CreateStorage {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, int _x3, int _x4, java.lang.foreign.MemorySegment _x5);
        static MemorySegment allocate(CreateStorage fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IStorageVtbl.CreateStorage_UP$MH, fi, IStorageVtbl.CreateStorage$FUNC, scope);
        }
        static CreateStorage ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, int __x3, int __x4, java.lang.foreign.MemorySegment __x5) -> {
                try {
                    return (int)IStorageVtbl.CreateStorage_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle CreateStorage$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("CreateStorage"));
    public static VarHandle CreateStorage$VH() {
        return IStorageVtbl.CreateStorage$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*CreateStorage)(IStorage*,const OLECHAR*,DWORD,DWORD,DWORD,IStorage**);
     * }
     */
    public static MemorySegment CreateStorage$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IStorageVtbl.CreateStorage$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*CreateStorage)(IStorage*,const OLECHAR*,DWORD,DWORD,DWORD,IStorage**);
     * }
     */
    public static void CreateStorage$set(MemorySegment seg, MemorySegment x) {
        IStorageVtbl.CreateStorage$VH.set(seg, x);
    }
    public static MemorySegment CreateStorage$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IStorageVtbl.CreateStorage$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CreateStorage$set(MemorySegment seg, long index, MemorySegment x) {
        IStorageVtbl.CreateStorage$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static CreateStorage CreateStorage(MemorySegment segment, SegmentScope scope) {
        return CreateStorage.ofAddress(CreateStorage$get(segment), scope);
    }
    static final FunctionDescriptor OpenStorage$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor OpenStorage_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle OpenStorage_UP$MH = RuntimeHelper.upcallHandle(OpenStorage.class, "apply", IStorageVtbl.OpenStorage_UP$FUNC);
    static final FunctionDescriptor OpenStorage_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle OpenStorage_DOWN$MH = RuntimeHelper.downcallHandle(
        IStorageVtbl.OpenStorage_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*OpenStorage)(IStorage*,const OLECHAR*,IStorage*,DWORD,SNB,DWORD,IStorage**);
     * }
     */
    public interface OpenStorage {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3, java.lang.foreign.MemorySegment _x4, int _x5, java.lang.foreign.MemorySegment _x6);
        static MemorySegment allocate(OpenStorage fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IStorageVtbl.OpenStorage_UP$MH, fi, IStorageVtbl.OpenStorage$FUNC, scope);
        }
        static OpenStorage ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3, java.lang.foreign.MemorySegment __x4, int __x5, java.lang.foreign.MemorySegment __x6) -> {
                try {
                    return (int)IStorageVtbl.OpenStorage_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle OpenStorage$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("OpenStorage"));
    public static VarHandle OpenStorage$VH() {
        return IStorageVtbl.OpenStorage$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*OpenStorage)(IStorage*,const OLECHAR*,IStorage*,DWORD,SNB,DWORD,IStorage**);
     * }
     */
    public static MemorySegment OpenStorage$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IStorageVtbl.OpenStorage$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*OpenStorage)(IStorage*,const OLECHAR*,IStorage*,DWORD,SNB,DWORD,IStorage**);
     * }
     */
    public static void OpenStorage$set(MemorySegment seg, MemorySegment x) {
        IStorageVtbl.OpenStorage$VH.set(seg, x);
    }
    public static MemorySegment OpenStorage$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IStorageVtbl.OpenStorage$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void OpenStorage$set(MemorySegment seg, long index, MemorySegment x) {
        IStorageVtbl.OpenStorage$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static OpenStorage OpenStorage(MemorySegment segment, SegmentScope scope) {
        return OpenStorage.ofAddress(OpenStorage$get(segment), scope);
    }
    static final FunctionDescriptor CopyTo$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor CopyTo_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle CopyTo_UP$MH = RuntimeHelper.upcallHandle(CopyTo.class, "apply", IStorageVtbl.CopyTo_UP$FUNC);
    static final FunctionDescriptor CopyTo_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle CopyTo_DOWN$MH = RuntimeHelper.downcallHandle(
        IStorageVtbl.CopyTo_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*CopyTo)(IStorage*,DWORD,const IID*,SNB,IStorage*);
     * }
     */
    public interface CopyTo {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(CopyTo fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IStorageVtbl.CopyTo_UP$MH, fi, IStorageVtbl.CopyTo$FUNC, scope);
        }
        static CopyTo ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (int)IStorageVtbl.CopyTo_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle CopyTo$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("CopyTo"));
    public static VarHandle CopyTo$VH() {
        return IStorageVtbl.CopyTo$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*CopyTo)(IStorage*,DWORD,const IID*,SNB,IStorage*);
     * }
     */
    public static MemorySegment CopyTo$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IStorageVtbl.CopyTo$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*CopyTo)(IStorage*,DWORD,const IID*,SNB,IStorage*);
     * }
     */
    public static void CopyTo$set(MemorySegment seg, MemorySegment x) {
        IStorageVtbl.CopyTo$VH.set(seg, x);
    }
    public static MemorySegment CopyTo$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IStorageVtbl.CopyTo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CopyTo$set(MemorySegment seg, long index, MemorySegment x) {
        IStorageVtbl.CopyTo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static CopyTo CopyTo(MemorySegment segment, SegmentScope scope) {
        return CopyTo.ofAddress(CopyTo$get(segment), scope);
    }
    static final FunctionDescriptor MoveElementTo$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor MoveElementTo_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle MoveElementTo_UP$MH = RuntimeHelper.upcallHandle(MoveElementTo.class, "apply", IStorageVtbl.MoveElementTo_UP$FUNC);
    static final FunctionDescriptor MoveElementTo_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle MoveElementTo_DOWN$MH = RuntimeHelper.downcallHandle(
        IStorageVtbl.MoveElementTo_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*MoveElementTo)(IStorage*,const OLECHAR*,IStorage*,const OLECHAR*,DWORD);
     * }
     */
    public interface MoveElementTo {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, int _x4);
        static MemorySegment allocate(MoveElementTo fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IStorageVtbl.MoveElementTo_UP$MH, fi, IStorageVtbl.MoveElementTo$FUNC, scope);
        }
        static MoveElementTo ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, int __x4) -> {
                try {
                    return (int)IStorageVtbl.MoveElementTo_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle MoveElementTo$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("MoveElementTo"));
    public static VarHandle MoveElementTo$VH() {
        return IStorageVtbl.MoveElementTo$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*MoveElementTo)(IStorage*,const OLECHAR*,IStorage*,const OLECHAR*,DWORD);
     * }
     */
    public static MemorySegment MoveElementTo$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IStorageVtbl.MoveElementTo$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*MoveElementTo)(IStorage*,const OLECHAR*,IStorage*,const OLECHAR*,DWORD);
     * }
     */
    public static void MoveElementTo$set(MemorySegment seg, MemorySegment x) {
        IStorageVtbl.MoveElementTo$VH.set(seg, x);
    }
    public static MemorySegment MoveElementTo$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IStorageVtbl.MoveElementTo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MoveElementTo$set(MemorySegment seg, long index, MemorySegment x) {
        IStorageVtbl.MoveElementTo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MoveElementTo MoveElementTo(MemorySegment segment, SegmentScope scope) {
        return MoveElementTo.ofAddress(MoveElementTo$get(segment), scope);
    }
    static final FunctionDescriptor Commit$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor Commit_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle Commit_UP$MH = RuntimeHelper.upcallHandle(Commit.class, "apply", IStorageVtbl.Commit_UP$FUNC);
    static final FunctionDescriptor Commit_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle Commit_DOWN$MH = RuntimeHelper.downcallHandle(
        IStorageVtbl.Commit_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*Commit)(IStorage*,DWORD);
     * }
     */
    public interface Commit {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(Commit fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IStorageVtbl.Commit_UP$MH, fi, IStorageVtbl.Commit$FUNC, scope);
        }
        static Commit ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)IStorageVtbl.Commit_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Commit$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Commit"));
    public static VarHandle Commit$VH() {
        return IStorageVtbl.Commit$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Commit)(IStorage*,DWORD);
     * }
     */
    public static MemorySegment Commit$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IStorageVtbl.Commit$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Commit)(IStorage*,DWORD);
     * }
     */
    public static void Commit$set(MemorySegment seg, MemorySegment x) {
        IStorageVtbl.Commit$VH.set(seg, x);
    }
    public static MemorySegment Commit$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IStorageVtbl.Commit$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Commit$set(MemorySegment seg, long index, MemorySegment x) {
        IStorageVtbl.Commit$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Commit Commit(MemorySegment segment, SegmentScope scope) {
        return Commit.ofAddress(Commit$get(segment), scope);
    }
    static final FunctionDescriptor Revert$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Revert_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Revert_UP$MH = RuntimeHelper.upcallHandle(Revert.class, "apply", IStorageVtbl.Revert_UP$FUNC);
    static final FunctionDescriptor Revert_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Revert_DOWN$MH = RuntimeHelper.downcallHandle(
        IStorageVtbl.Revert_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*Revert)(IStorage*);
     * }
     */
    public interface Revert {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Revert fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IStorageVtbl.Revert_UP$MH, fi, IStorageVtbl.Revert$FUNC, scope);
        }
        static Revert ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IStorageVtbl.Revert_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Revert$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Revert"));
    public static VarHandle Revert$VH() {
        return IStorageVtbl.Revert$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Revert)(IStorage*);
     * }
     */
    public static MemorySegment Revert$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IStorageVtbl.Revert$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Revert)(IStorage*);
     * }
     */
    public static void Revert$set(MemorySegment seg, MemorySegment x) {
        IStorageVtbl.Revert$VH.set(seg, x);
    }
    public static MemorySegment Revert$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IStorageVtbl.Revert$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Revert$set(MemorySegment seg, long index, MemorySegment x) {
        IStorageVtbl.Revert$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Revert Revert(MemorySegment segment, SegmentScope scope) {
        return Revert.ofAddress(Revert$get(segment), scope);
    }
    static final FunctionDescriptor EnumElements$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor EnumElements_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle EnumElements_UP$MH = RuntimeHelper.upcallHandle(EnumElements.class, "apply", IStorageVtbl.EnumElements_UP$FUNC);
    static final FunctionDescriptor EnumElements_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle EnumElements_DOWN$MH = RuntimeHelper.downcallHandle(
        IStorageVtbl.EnumElements_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*EnumElements)(IStorage*,DWORD,void*,DWORD,IEnumSTATSTG**);
     * }
     */
    public interface EnumElements {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, int _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(EnumElements fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IStorageVtbl.EnumElements_UP$MH, fi, IStorageVtbl.EnumElements$FUNC, scope);
        }
        static EnumElements ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, int __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (int)IStorageVtbl.EnumElements_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle EnumElements$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("EnumElements"));
    public static VarHandle EnumElements$VH() {
        return IStorageVtbl.EnumElements$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*EnumElements)(IStorage*,DWORD,void*,DWORD,IEnumSTATSTG**);
     * }
     */
    public static MemorySegment EnumElements$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IStorageVtbl.EnumElements$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*EnumElements)(IStorage*,DWORD,void*,DWORD,IEnumSTATSTG**);
     * }
     */
    public static void EnumElements$set(MemorySegment seg, MemorySegment x) {
        IStorageVtbl.EnumElements$VH.set(seg, x);
    }
    public static MemorySegment EnumElements$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IStorageVtbl.EnumElements$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void EnumElements$set(MemorySegment seg, long index, MemorySegment x) {
        IStorageVtbl.EnumElements$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static EnumElements EnumElements(MemorySegment segment, SegmentScope scope) {
        return EnumElements.ofAddress(EnumElements$get(segment), scope);
    }
    static final FunctionDescriptor DestroyElement$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor DestroyElement_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle DestroyElement_UP$MH = RuntimeHelper.upcallHandle(DestroyElement.class, "apply", IStorageVtbl.DestroyElement_UP$FUNC);
    static final FunctionDescriptor DestroyElement_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle DestroyElement_DOWN$MH = RuntimeHelper.downcallHandle(
        IStorageVtbl.DestroyElement_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*DestroyElement)(IStorage*,const OLECHAR*);
     * }
     */
    public interface DestroyElement {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(DestroyElement fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IStorageVtbl.DestroyElement_UP$MH, fi, IStorageVtbl.DestroyElement$FUNC, scope);
        }
        static DestroyElement ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IStorageVtbl.DestroyElement_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle DestroyElement$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("DestroyElement"));
    public static VarHandle DestroyElement$VH() {
        return IStorageVtbl.DestroyElement$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*DestroyElement)(IStorage*,const OLECHAR*);
     * }
     */
    public static MemorySegment DestroyElement$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IStorageVtbl.DestroyElement$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*DestroyElement)(IStorage*,const OLECHAR*);
     * }
     */
    public static void DestroyElement$set(MemorySegment seg, MemorySegment x) {
        IStorageVtbl.DestroyElement$VH.set(seg, x);
    }
    public static MemorySegment DestroyElement$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IStorageVtbl.DestroyElement$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DestroyElement$set(MemorySegment seg, long index, MemorySegment x) {
        IStorageVtbl.DestroyElement$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static DestroyElement DestroyElement(MemorySegment segment, SegmentScope scope) {
        return DestroyElement.ofAddress(DestroyElement$get(segment), scope);
    }
    static final FunctionDescriptor RenameElement$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor RenameElement_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle RenameElement_UP$MH = RuntimeHelper.upcallHandle(RenameElement.class, "apply", IStorageVtbl.RenameElement_UP$FUNC);
    static final FunctionDescriptor RenameElement_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle RenameElement_DOWN$MH = RuntimeHelper.downcallHandle(
        IStorageVtbl.RenameElement_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*RenameElement)(IStorage*,const OLECHAR*,const OLECHAR*);
     * }
     */
    public interface RenameElement {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(RenameElement fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IStorageVtbl.RenameElement_UP$MH, fi, IStorageVtbl.RenameElement$FUNC, scope);
        }
        static RenameElement ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IStorageVtbl.RenameElement_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle RenameElement$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("RenameElement"));
    public static VarHandle RenameElement$VH() {
        return IStorageVtbl.RenameElement$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*RenameElement)(IStorage*,const OLECHAR*,const OLECHAR*);
     * }
     */
    public static MemorySegment RenameElement$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IStorageVtbl.RenameElement$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*RenameElement)(IStorage*,const OLECHAR*,const OLECHAR*);
     * }
     */
    public static void RenameElement$set(MemorySegment seg, MemorySegment x) {
        IStorageVtbl.RenameElement$VH.set(seg, x);
    }
    public static MemorySegment RenameElement$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IStorageVtbl.RenameElement$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void RenameElement$set(MemorySegment seg, long index, MemorySegment x) {
        IStorageVtbl.RenameElement$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static RenameElement RenameElement(MemorySegment segment, SegmentScope scope) {
        return RenameElement.ofAddress(RenameElement$get(segment), scope);
    }
    static final FunctionDescriptor SetElementTimes$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor SetElementTimes_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetElementTimes_UP$MH = RuntimeHelper.upcallHandle(SetElementTimes.class, "apply", IStorageVtbl.SetElementTimes_UP$FUNC);
    static final FunctionDescriptor SetElementTimes_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetElementTimes_DOWN$MH = RuntimeHelper.downcallHandle(
        IStorageVtbl.SetElementTimes_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetElementTimes)(IStorage*,const OLECHAR*,const FILETIME*,const FILETIME*,const FILETIME*);
     * }
     */
    public interface SetElementTimes {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(SetElementTimes fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IStorageVtbl.SetElementTimes_UP$MH, fi, IStorageVtbl.SetElementTimes$FUNC, scope);
        }
        static SetElementTimes ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (int)IStorageVtbl.SetElementTimes_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetElementTimes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetElementTimes"));
    public static VarHandle SetElementTimes$VH() {
        return IStorageVtbl.SetElementTimes$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetElementTimes)(IStorage*,const OLECHAR*,const FILETIME*,const FILETIME*,const FILETIME*);
     * }
     */
    public static MemorySegment SetElementTimes$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IStorageVtbl.SetElementTimes$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetElementTimes)(IStorage*,const OLECHAR*,const FILETIME*,const FILETIME*,const FILETIME*);
     * }
     */
    public static void SetElementTimes$set(MemorySegment seg, MemorySegment x) {
        IStorageVtbl.SetElementTimes$VH.set(seg, x);
    }
    public static MemorySegment SetElementTimes$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IStorageVtbl.SetElementTimes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetElementTimes$set(MemorySegment seg, long index, MemorySegment x) {
        IStorageVtbl.SetElementTimes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetElementTimes SetElementTimes(MemorySegment segment, SegmentScope scope) {
        return SetElementTimes.ofAddress(SetElementTimes$get(segment), scope);
    }
    static final FunctionDescriptor SetClass$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor SetClass_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetClass_UP$MH = RuntimeHelper.upcallHandle(SetClass.class, "apply", IStorageVtbl.SetClass_UP$FUNC);
    static final FunctionDescriptor SetClass_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetClass_DOWN$MH = RuntimeHelper.downcallHandle(
        IStorageVtbl.SetClass_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetClass)(IStorage*,const IID*);
     * }
     */
    public interface SetClass {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(SetClass fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IStorageVtbl.SetClass_UP$MH, fi, IStorageVtbl.SetClass$FUNC, scope);
        }
        static SetClass ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IStorageVtbl.SetClass_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetClass$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetClass"));
    public static VarHandle SetClass$VH() {
        return IStorageVtbl.SetClass$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetClass)(IStorage*,const IID*);
     * }
     */
    public static MemorySegment SetClass$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IStorageVtbl.SetClass$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetClass)(IStorage*,const IID*);
     * }
     */
    public static void SetClass$set(MemorySegment seg, MemorySegment x) {
        IStorageVtbl.SetClass$VH.set(seg, x);
    }
    public static MemorySegment SetClass$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IStorageVtbl.SetClass$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetClass$set(MemorySegment seg, long index, MemorySegment x) {
        IStorageVtbl.SetClass$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetClass SetClass(MemorySegment segment, SegmentScope scope) {
        return SetClass.ofAddress(SetClass$get(segment), scope);
    }
    static final FunctionDescriptor SetStateBits$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor SetStateBits_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle SetStateBits_UP$MH = RuntimeHelper.upcallHandle(SetStateBits.class, "apply", IStorageVtbl.SetStateBits_UP$FUNC);
    static final FunctionDescriptor SetStateBits_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle SetStateBits_DOWN$MH = RuntimeHelper.downcallHandle(
        IStorageVtbl.SetStateBits_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetStateBits)(IStorage*,DWORD,DWORD);
     * }
     */
    public interface SetStateBits {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2);
        static MemorySegment allocate(SetStateBits fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IStorageVtbl.SetStateBits_UP$MH, fi, IStorageVtbl.SetStateBits$FUNC, scope);
        }
        static SetStateBits ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2) -> {
                try {
                    return (int)IStorageVtbl.SetStateBits_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetStateBits$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetStateBits"));
    public static VarHandle SetStateBits$VH() {
        return IStorageVtbl.SetStateBits$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetStateBits)(IStorage*,DWORD,DWORD);
     * }
     */
    public static MemorySegment SetStateBits$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IStorageVtbl.SetStateBits$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetStateBits)(IStorage*,DWORD,DWORD);
     * }
     */
    public static void SetStateBits$set(MemorySegment seg, MemorySegment x) {
        IStorageVtbl.SetStateBits$VH.set(seg, x);
    }
    public static MemorySegment SetStateBits$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IStorageVtbl.SetStateBits$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetStateBits$set(MemorySegment seg, long index, MemorySegment x) {
        IStorageVtbl.SetStateBits$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetStateBits SetStateBits(MemorySegment segment, SegmentScope scope) {
        return SetStateBits.ofAddress(SetStateBits$get(segment), scope);
    }
    static final FunctionDescriptor Stat$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor Stat_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle Stat_UP$MH = RuntimeHelper.upcallHandle(Stat.class, "apply", IStorageVtbl.Stat_UP$FUNC);
    static final FunctionDescriptor Stat_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle Stat_DOWN$MH = RuntimeHelper.downcallHandle(
        IStorageVtbl.Stat_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*Stat)(IStorage*,STATSTG*,DWORD);
     * }
     */
    public interface Stat {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2);
        static MemorySegment allocate(Stat fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IStorageVtbl.Stat_UP$MH, fi, IStorageVtbl.Stat$FUNC, scope);
        }
        static Stat ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2) -> {
                try {
                    return (int)IStorageVtbl.Stat_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Stat$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Stat"));
    public static VarHandle Stat$VH() {
        return IStorageVtbl.Stat$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Stat)(IStorage*,STATSTG*,DWORD);
     * }
     */
    public static MemorySegment Stat$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IStorageVtbl.Stat$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Stat)(IStorage*,STATSTG*,DWORD);
     * }
     */
    public static void Stat$set(MemorySegment seg, MemorySegment x) {
        IStorageVtbl.Stat$VH.set(seg, x);
    }
    public static MemorySegment Stat$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IStorageVtbl.Stat$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Stat$set(MemorySegment seg, long index, MemorySegment x) {
        IStorageVtbl.Stat$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Stat Stat(MemorySegment segment, SegmentScope scope) {
        return Stat.ofAddress(Stat$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


