// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
final class constants$639 {

    // Suppresses default constructor, ensuring non-instantiability.
    private constants$639() {}
    static final FunctionDescriptor RpcServerListen$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle RpcServerListen$MH = RuntimeHelper.downcallHandle(
        "RpcServerListen",
        constants$639.RpcServerListen$FUNC
    );
    static final FunctionDescriptor RpcServerRegisterIf$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle RpcServerRegisterIf$MH = RuntimeHelper.downcallHandle(
        "RpcServerRegisterIf",
        constants$639.RpcServerRegisterIf$FUNC
    );
    static final FunctionDescriptor RpcServerRegisterIfEx$IfCallback$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor RpcServerRegisterIfEx$IfCallback_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle RpcServerRegisterIfEx$IfCallback_UP$MH = RuntimeHelper.upcallHandle(RpcServerRegisterIfEx$IfCallback.class, "apply", constants$639.RpcServerRegisterIfEx$IfCallback_UP$FUNC);
    static final FunctionDescriptor RpcServerRegisterIfEx$IfCallback_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle RpcServerRegisterIfEx$IfCallback_DOWN$MH = RuntimeHelper.downcallHandle(
        constants$639.RpcServerRegisterIfEx$IfCallback_DOWN$FUNC
    );
    static final FunctionDescriptor RpcServerRegisterIfEx$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle RpcServerRegisterIfEx$MH = RuntimeHelper.downcallHandle(
        "RpcServerRegisterIfEx",
        constants$639.RpcServerRegisterIfEx$FUNC
    );
    static final FunctionDescriptor RpcServerRegisterIf2$IfCallbackFn$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor RpcServerRegisterIf2$IfCallbackFn_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle RpcServerRegisterIf2$IfCallbackFn_UP$MH = RuntimeHelper.upcallHandle(RpcServerRegisterIf2$IfCallbackFn.class, "apply", constants$639.RpcServerRegisterIf2$IfCallbackFn_UP$FUNC);
}


