// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _STORAGE_WRITE_CACHE_PROPERTY {
 *     DWORD Version;
 *     DWORD Size;
 *     WRITE_CACHE_TYPE WriteCacheType;
 *     WRITE_CACHE_ENABLE WriteCacheEnabled;
 *     WRITE_CACHE_CHANGE WriteCacheChangeable;
 *     WRITE_THROUGH WriteThroughSupported;
 *     BOOLEAN FlushCacheSupported;
 *     BOOLEAN UserDefinedPowerProtection;
 *     BOOLEAN NVCacheEnabled;
 * };
 * }
 */
public class _STORAGE_WRITE_CACHE_PROPERTY {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("Version"),
        Constants$root.C_LONG$LAYOUT.withName("Size"),
        Constants$root.C_LONG$LAYOUT.withName("WriteCacheType"),
        Constants$root.C_LONG$LAYOUT.withName("WriteCacheEnabled"),
        Constants$root.C_LONG$LAYOUT.withName("WriteCacheChangeable"),
        Constants$root.C_LONG$LAYOUT.withName("WriteThroughSupported"),
        Constants$root.C_CHAR$LAYOUT.withName("FlushCacheSupported"),
        Constants$root.C_CHAR$LAYOUT.withName("UserDefinedPowerProtection"),
        Constants$root.C_CHAR$LAYOUT.withName("NVCacheEnabled"),
        MemoryLayout.paddingLayout(8)
    ).withName("_STORAGE_WRITE_CACHE_PROPERTY");
    public static MemoryLayout $LAYOUT() {
        return _STORAGE_WRITE_CACHE_PROPERTY.$struct$LAYOUT;
    }
    static final VarHandle Version$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Version"));
    public static VarHandle Version$VH() {
        return _STORAGE_WRITE_CACHE_PROPERTY.Version$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Version;
     * }
     */
    public static int Version$get(MemorySegment seg) {
        return (int)_STORAGE_WRITE_CACHE_PROPERTY.Version$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Version;
     * }
     */
    public static void Version$set(MemorySegment seg, int x) {
        _STORAGE_WRITE_CACHE_PROPERTY.Version$VH.set(seg, x);
    }
    public static int Version$get(MemorySegment seg, long index) {
        return (int)_STORAGE_WRITE_CACHE_PROPERTY.Version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Version$set(MemorySegment seg, long index, int x) {
        _STORAGE_WRITE_CACHE_PROPERTY.Version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Size$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Size"));
    public static VarHandle Size$VH() {
        return _STORAGE_WRITE_CACHE_PROPERTY.Size$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Size;
     * }
     */
    public static int Size$get(MemorySegment seg) {
        return (int)_STORAGE_WRITE_CACHE_PROPERTY.Size$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Size;
     * }
     */
    public static void Size$set(MemorySegment seg, int x) {
        _STORAGE_WRITE_CACHE_PROPERTY.Size$VH.set(seg, x);
    }
    public static int Size$get(MemorySegment seg, long index) {
        return (int)_STORAGE_WRITE_CACHE_PROPERTY.Size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Size$set(MemorySegment seg, long index, int x) {
        _STORAGE_WRITE_CACHE_PROPERTY.Size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle WriteCacheType$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("WriteCacheType"));
    public static VarHandle WriteCacheType$VH() {
        return _STORAGE_WRITE_CACHE_PROPERTY.WriteCacheType$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WRITE_CACHE_TYPE WriteCacheType;
     * }
     */
    public static int WriteCacheType$get(MemorySegment seg) {
        return (int)_STORAGE_WRITE_CACHE_PROPERTY.WriteCacheType$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WRITE_CACHE_TYPE WriteCacheType;
     * }
     */
    public static void WriteCacheType$set(MemorySegment seg, int x) {
        _STORAGE_WRITE_CACHE_PROPERTY.WriteCacheType$VH.set(seg, x);
    }
    public static int WriteCacheType$get(MemorySegment seg, long index) {
        return (int)_STORAGE_WRITE_CACHE_PROPERTY.WriteCacheType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void WriteCacheType$set(MemorySegment seg, long index, int x) {
        _STORAGE_WRITE_CACHE_PROPERTY.WriteCacheType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle WriteCacheEnabled$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("WriteCacheEnabled"));
    public static VarHandle WriteCacheEnabled$VH() {
        return _STORAGE_WRITE_CACHE_PROPERTY.WriteCacheEnabled$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WRITE_CACHE_ENABLE WriteCacheEnabled;
     * }
     */
    public static int WriteCacheEnabled$get(MemorySegment seg) {
        return (int)_STORAGE_WRITE_CACHE_PROPERTY.WriteCacheEnabled$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WRITE_CACHE_ENABLE WriteCacheEnabled;
     * }
     */
    public static void WriteCacheEnabled$set(MemorySegment seg, int x) {
        _STORAGE_WRITE_CACHE_PROPERTY.WriteCacheEnabled$VH.set(seg, x);
    }
    public static int WriteCacheEnabled$get(MemorySegment seg, long index) {
        return (int)_STORAGE_WRITE_CACHE_PROPERTY.WriteCacheEnabled$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void WriteCacheEnabled$set(MemorySegment seg, long index, int x) {
        _STORAGE_WRITE_CACHE_PROPERTY.WriteCacheEnabled$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle WriteCacheChangeable$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("WriteCacheChangeable"));
    public static VarHandle WriteCacheChangeable$VH() {
        return _STORAGE_WRITE_CACHE_PROPERTY.WriteCacheChangeable$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WRITE_CACHE_CHANGE WriteCacheChangeable;
     * }
     */
    public static int WriteCacheChangeable$get(MemorySegment seg) {
        return (int)_STORAGE_WRITE_CACHE_PROPERTY.WriteCacheChangeable$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WRITE_CACHE_CHANGE WriteCacheChangeable;
     * }
     */
    public static void WriteCacheChangeable$set(MemorySegment seg, int x) {
        _STORAGE_WRITE_CACHE_PROPERTY.WriteCacheChangeable$VH.set(seg, x);
    }
    public static int WriteCacheChangeable$get(MemorySegment seg, long index) {
        return (int)_STORAGE_WRITE_CACHE_PROPERTY.WriteCacheChangeable$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void WriteCacheChangeable$set(MemorySegment seg, long index, int x) {
        _STORAGE_WRITE_CACHE_PROPERTY.WriteCacheChangeable$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle WriteThroughSupported$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("WriteThroughSupported"));
    public static VarHandle WriteThroughSupported$VH() {
        return _STORAGE_WRITE_CACHE_PROPERTY.WriteThroughSupported$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WRITE_THROUGH WriteThroughSupported;
     * }
     */
    public static int WriteThroughSupported$get(MemorySegment seg) {
        return (int)_STORAGE_WRITE_CACHE_PROPERTY.WriteThroughSupported$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WRITE_THROUGH WriteThroughSupported;
     * }
     */
    public static void WriteThroughSupported$set(MemorySegment seg, int x) {
        _STORAGE_WRITE_CACHE_PROPERTY.WriteThroughSupported$VH.set(seg, x);
    }
    public static int WriteThroughSupported$get(MemorySegment seg, long index) {
        return (int)_STORAGE_WRITE_CACHE_PROPERTY.WriteThroughSupported$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void WriteThroughSupported$set(MemorySegment seg, long index, int x) {
        _STORAGE_WRITE_CACHE_PROPERTY.WriteThroughSupported$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle FlushCacheSupported$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("FlushCacheSupported"));
    public static VarHandle FlushCacheSupported$VH() {
        return _STORAGE_WRITE_CACHE_PROPERTY.FlushCacheSupported$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BOOLEAN FlushCacheSupported;
     * }
     */
    public static byte FlushCacheSupported$get(MemorySegment seg) {
        return (byte)_STORAGE_WRITE_CACHE_PROPERTY.FlushCacheSupported$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BOOLEAN FlushCacheSupported;
     * }
     */
    public static void FlushCacheSupported$set(MemorySegment seg, byte x) {
        _STORAGE_WRITE_CACHE_PROPERTY.FlushCacheSupported$VH.set(seg, x);
    }
    public static byte FlushCacheSupported$get(MemorySegment seg, long index) {
        return (byte)_STORAGE_WRITE_CACHE_PROPERTY.FlushCacheSupported$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void FlushCacheSupported$set(MemorySegment seg, long index, byte x) {
        _STORAGE_WRITE_CACHE_PROPERTY.FlushCacheSupported$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle UserDefinedPowerProtection$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("UserDefinedPowerProtection"));
    public static VarHandle UserDefinedPowerProtection$VH() {
        return _STORAGE_WRITE_CACHE_PROPERTY.UserDefinedPowerProtection$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BOOLEAN UserDefinedPowerProtection;
     * }
     */
    public static byte UserDefinedPowerProtection$get(MemorySegment seg) {
        return (byte)_STORAGE_WRITE_CACHE_PROPERTY.UserDefinedPowerProtection$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BOOLEAN UserDefinedPowerProtection;
     * }
     */
    public static void UserDefinedPowerProtection$set(MemorySegment seg, byte x) {
        _STORAGE_WRITE_CACHE_PROPERTY.UserDefinedPowerProtection$VH.set(seg, x);
    }
    public static byte UserDefinedPowerProtection$get(MemorySegment seg, long index) {
        return (byte)_STORAGE_WRITE_CACHE_PROPERTY.UserDefinedPowerProtection$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void UserDefinedPowerProtection$set(MemorySegment seg, long index, byte x) {
        _STORAGE_WRITE_CACHE_PROPERTY.UserDefinedPowerProtection$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle NVCacheEnabled$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("NVCacheEnabled"));
    public static VarHandle NVCacheEnabled$VH() {
        return _STORAGE_WRITE_CACHE_PROPERTY.NVCacheEnabled$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BOOLEAN NVCacheEnabled;
     * }
     */
    public static byte NVCacheEnabled$get(MemorySegment seg) {
        return (byte)_STORAGE_WRITE_CACHE_PROPERTY.NVCacheEnabled$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BOOLEAN NVCacheEnabled;
     * }
     */
    public static void NVCacheEnabled$set(MemorySegment seg, byte x) {
        _STORAGE_WRITE_CACHE_PROPERTY.NVCacheEnabled$VH.set(seg, x);
    }
    public static byte NVCacheEnabled$get(MemorySegment seg, long index) {
        return (byte)_STORAGE_WRITE_CACHE_PROPERTY.NVCacheEnabled$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void NVCacheEnabled$set(MemorySegment seg, long index, byte x) {
        _STORAGE_WRITE_CACHE_PROPERTY.NVCacheEnabled$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


