// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _CRYPT_VERIFY_MESSAGE_PARA {
 *     DWORD cbSize;
 *     DWORD dwMsgAndCertEncodingType;
 *     HCRYPTPROV_LEGACY hCryptProv;
 *     PFN_CRYPT_GET_SIGNER_CERTIFICATE pfnGetSignerCertificate;
 *     void* pvGetArg;
 * };
 * }
 */
public class _CRYPT_VERIFY_MESSAGE_PARA {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("cbSize"),
        Constants$root.C_LONG$LAYOUT.withName("dwMsgAndCertEncodingType"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("hCryptProv"),
        Constants$root.C_POINTER$LAYOUT.withName("pfnGetSignerCertificate"),
        Constants$root.C_POINTER$LAYOUT.withName("pvGetArg")
    ).withName("_CRYPT_VERIFY_MESSAGE_PARA");
    public static MemoryLayout $LAYOUT() {
        return _CRYPT_VERIFY_MESSAGE_PARA.$struct$LAYOUT;
    }
    static final VarHandle cbSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cbSize"));
    public static VarHandle cbSize$VH() {
        return _CRYPT_VERIFY_MESSAGE_PARA.cbSize$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD cbSize;
     * }
     */
    public static int cbSize$get(MemorySegment seg) {
        return (int)_CRYPT_VERIFY_MESSAGE_PARA.cbSize$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD cbSize;
     * }
     */
    public static void cbSize$set(MemorySegment seg, int x) {
        _CRYPT_VERIFY_MESSAGE_PARA.cbSize$VH.set(seg, x);
    }
    public static int cbSize$get(MemorySegment seg, long index) {
        return (int)_CRYPT_VERIFY_MESSAGE_PARA.cbSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cbSize$set(MemorySegment seg, long index, int x) {
        _CRYPT_VERIFY_MESSAGE_PARA.cbSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwMsgAndCertEncodingType$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwMsgAndCertEncodingType"));
    public static VarHandle dwMsgAndCertEncodingType$VH() {
        return _CRYPT_VERIFY_MESSAGE_PARA.dwMsgAndCertEncodingType$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwMsgAndCertEncodingType;
     * }
     */
    public static int dwMsgAndCertEncodingType$get(MemorySegment seg) {
        return (int)_CRYPT_VERIFY_MESSAGE_PARA.dwMsgAndCertEncodingType$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwMsgAndCertEncodingType;
     * }
     */
    public static void dwMsgAndCertEncodingType$set(MemorySegment seg, int x) {
        _CRYPT_VERIFY_MESSAGE_PARA.dwMsgAndCertEncodingType$VH.set(seg, x);
    }
    public static int dwMsgAndCertEncodingType$get(MemorySegment seg, long index) {
        return (int)_CRYPT_VERIFY_MESSAGE_PARA.dwMsgAndCertEncodingType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwMsgAndCertEncodingType$set(MemorySegment seg, long index, int x) {
        _CRYPT_VERIFY_MESSAGE_PARA.dwMsgAndCertEncodingType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hCryptProv$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hCryptProv"));
    public static VarHandle hCryptProv$VH() {
        return _CRYPT_VERIFY_MESSAGE_PARA.hCryptProv$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HCRYPTPROV_LEGACY hCryptProv;
     * }
     */
    public static long hCryptProv$get(MemorySegment seg) {
        return (long)_CRYPT_VERIFY_MESSAGE_PARA.hCryptProv$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HCRYPTPROV_LEGACY hCryptProv;
     * }
     */
    public static void hCryptProv$set(MemorySegment seg, long x) {
        _CRYPT_VERIFY_MESSAGE_PARA.hCryptProv$VH.set(seg, x);
    }
    public static long hCryptProv$get(MemorySegment seg, long index) {
        return (long)_CRYPT_VERIFY_MESSAGE_PARA.hCryptProv$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hCryptProv$set(MemorySegment seg, long index, long x) {
        _CRYPT_VERIFY_MESSAGE_PARA.hCryptProv$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pfnGetSignerCertificate$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pfnGetSignerCertificate"));
    public static VarHandle pfnGetSignerCertificate$VH() {
        return _CRYPT_VERIFY_MESSAGE_PARA.pfnGetSignerCertificate$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PFN_CRYPT_GET_SIGNER_CERTIFICATE pfnGetSignerCertificate;
     * }
     */
    public static MemorySegment pfnGetSignerCertificate$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_CRYPT_VERIFY_MESSAGE_PARA.pfnGetSignerCertificate$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PFN_CRYPT_GET_SIGNER_CERTIFICATE pfnGetSignerCertificate;
     * }
     */
    public static void pfnGetSignerCertificate$set(MemorySegment seg, MemorySegment x) {
        _CRYPT_VERIFY_MESSAGE_PARA.pfnGetSignerCertificate$VH.set(seg, x);
    }
    public static MemorySegment pfnGetSignerCertificate$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_CRYPT_VERIFY_MESSAGE_PARA.pfnGetSignerCertificate$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pfnGetSignerCertificate$set(MemorySegment seg, long index, MemorySegment x) {
        _CRYPT_VERIFY_MESSAGE_PARA.pfnGetSignerCertificate$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static PFN_CRYPT_GET_SIGNER_CERTIFICATE pfnGetSignerCertificate(MemorySegment segment, SegmentScope scope) {
        return PFN_CRYPT_GET_SIGNER_CERTIFICATE.ofAddress(pfnGetSignerCertificate$get(segment), scope);
    }
    static final VarHandle pvGetArg$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pvGetArg"));
    public static VarHandle pvGetArg$VH() {
        return _CRYPT_VERIFY_MESSAGE_PARA.pvGetArg$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* pvGetArg;
     * }
     */
    public static MemorySegment pvGetArg$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_CRYPT_VERIFY_MESSAGE_PARA.pvGetArg$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* pvGetArg;
     * }
     */
    public static void pvGetArg$set(MemorySegment seg, MemorySegment x) {
        _CRYPT_VERIFY_MESSAGE_PARA.pvGetArg$VH.set(seg, x);
    }
    public static MemorySegment pvGetArg$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_CRYPT_VERIFY_MESSAGE_PARA.pvGetArg$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pvGetArg$set(MemorySegment seg, long index, MemorySegment x) {
        _CRYPT_VERIFY_MESSAGE_PARA.pvGetArg$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


