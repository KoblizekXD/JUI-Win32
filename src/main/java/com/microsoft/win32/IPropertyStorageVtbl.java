// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IPropertyStorageVtbl {
 *     HRESULT (*QueryInterface)(IPropertyStorage*,const IID*,void**);
 *     ULONG (*AddRef)(IPropertyStorage*);
 *     ULONG (*Release)(IPropertyStorage*);
 *     HRESULT (*ReadMultiple)(IPropertyStorage*,ULONG,const PROPSPEC*,PROPVARIANT*);
 *     HRESULT (*WriteMultiple)(IPropertyStorage*,ULONG,const PROPSPEC*,const PROPVARIANT*,PROPID);
 *     HRESULT (*DeleteMultiple)(IPropertyStorage*,ULONG,const PROPSPEC*);
 *     HRESULT (*ReadPropertyNames)(IPropertyStorage*,ULONG,const PROPID*,LPOLESTR*);
 *     HRESULT (*WritePropertyNames)(IPropertyStorage*,ULONG,const PROPID*,const LPOLESTR*);
 *     HRESULT (*DeletePropertyNames)(IPropertyStorage*,ULONG,const PROPID*);
 *     HRESULT (*Commit)(IPropertyStorage*,DWORD);
 *     HRESULT (*Revert)(IPropertyStorage*);
 *     HRESULT (*Enum)(IPropertyStorage*,IEnumSTATPROPSTG**);
 *     HRESULT (*SetTimes)(IPropertyStorage*,const FILETIME*,const FILETIME*,const FILETIME*);
 *     HRESULT (*SetClass)(IPropertyStorage*,const IID*);
 *     HRESULT (*Stat)(IPropertyStorage*,STATPROPSETSTG*);
 * };
 * }
 */
public class IPropertyStorageVtbl {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("ReadMultiple"),
        Constants$root.C_POINTER$LAYOUT.withName("WriteMultiple"),
        Constants$root.C_POINTER$LAYOUT.withName("DeleteMultiple"),
        Constants$root.C_POINTER$LAYOUT.withName("ReadPropertyNames"),
        Constants$root.C_POINTER$LAYOUT.withName("WritePropertyNames"),
        Constants$root.C_POINTER$LAYOUT.withName("DeletePropertyNames"),
        Constants$root.C_POINTER$LAYOUT.withName("Commit"),
        Constants$root.C_POINTER$LAYOUT.withName("Revert"),
        Constants$root.C_POINTER$LAYOUT.withName("Enum"),
        Constants$root.C_POINTER$LAYOUT.withName("SetTimes"),
        Constants$root.C_POINTER$LAYOUT.withName("SetClass"),
        Constants$root.C_POINTER$LAYOUT.withName("Stat")
    ).withName("IPropertyStorageVtbl");
    public static MemoryLayout $LAYOUT() {
        return IPropertyStorageVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor QueryInterface_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_UP$MH = RuntimeHelper.upcallHandle(QueryInterface.class, "apply", IPropertyStorageVtbl.QueryInterface_UP$FUNC);
    static final FunctionDescriptor QueryInterface_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_DOWN$MH = RuntimeHelper.downcallHandle(
        IPropertyStorageVtbl.QueryInterface_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(IPropertyStorage*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IPropertyStorageVtbl.QueryInterface_UP$MH, fi, IPropertyStorageVtbl.QueryInterface$FUNC, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IPropertyStorageVtbl.QueryInterface_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return IPropertyStorageVtbl.QueryInterface$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IPropertyStorage*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IPropertyStorageVtbl.QueryInterface$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IPropertyStorage*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        IPropertyStorageVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IPropertyStorageVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        IPropertyStorageVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, SegmentScope scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor AddRef_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_UP$MH = RuntimeHelper.upcallHandle(AddRef.class, "apply", IPropertyStorageVtbl.AddRef_UP$FUNC);
    static final FunctionDescriptor AddRef_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_DOWN$MH = RuntimeHelper.downcallHandle(
        IPropertyStorageVtbl.AddRef_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*AddRef)(IPropertyStorage*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IPropertyStorageVtbl.AddRef_UP$MH, fi, IPropertyStorageVtbl.AddRef$FUNC, scope);
        }
        static AddRef ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IPropertyStorageVtbl.AddRef_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return IPropertyStorageVtbl.AddRef$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(IPropertyStorage*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IPropertyStorageVtbl.AddRef$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(IPropertyStorage*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        IPropertyStorageVtbl.AddRef$VH.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IPropertyStorageVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        IPropertyStorageVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, SegmentScope scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Release_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_UP$MH = RuntimeHelper.upcallHandle(Release.class, "apply", IPropertyStorageVtbl.Release_UP$FUNC);
    static final FunctionDescriptor Release_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_DOWN$MH = RuntimeHelper.downcallHandle(
        IPropertyStorageVtbl.Release_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*Release)(IPropertyStorage*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IPropertyStorageVtbl.Release_UP$MH, fi, IPropertyStorageVtbl.Release$FUNC, scope);
        }
        static Release ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IPropertyStorageVtbl.Release_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return IPropertyStorageVtbl.Release$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(IPropertyStorage*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IPropertyStorageVtbl.Release$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(IPropertyStorage*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        IPropertyStorageVtbl.Release$VH.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IPropertyStorageVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        IPropertyStorageVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, SegmentScope scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    static final FunctionDescriptor ReadMultiple$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor ReadMultiple_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ReadMultiple_UP$MH = RuntimeHelper.upcallHandle(ReadMultiple.class, "apply", IPropertyStorageVtbl.ReadMultiple_UP$FUNC);
    static final FunctionDescriptor ReadMultiple_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ReadMultiple_DOWN$MH = RuntimeHelper.downcallHandle(
        IPropertyStorageVtbl.ReadMultiple_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*ReadMultiple)(IPropertyStorage*,ULONG,const PROPSPEC*,PROPVARIANT*);
     * }
     */
    public interface ReadMultiple {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(ReadMultiple fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IPropertyStorageVtbl.ReadMultiple_UP$MH, fi, IPropertyStorageVtbl.ReadMultiple$FUNC, scope);
        }
        static ReadMultiple ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)IPropertyStorageVtbl.ReadMultiple_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ReadMultiple$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ReadMultiple"));
    public static VarHandle ReadMultiple$VH() {
        return IPropertyStorageVtbl.ReadMultiple$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*ReadMultiple)(IPropertyStorage*,ULONG,const PROPSPEC*,PROPVARIANT*);
     * }
     */
    public static MemorySegment ReadMultiple$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IPropertyStorageVtbl.ReadMultiple$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*ReadMultiple)(IPropertyStorage*,ULONG,const PROPSPEC*,PROPVARIANT*);
     * }
     */
    public static void ReadMultiple$set(MemorySegment seg, MemorySegment x) {
        IPropertyStorageVtbl.ReadMultiple$VH.set(seg, x);
    }
    public static MemorySegment ReadMultiple$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IPropertyStorageVtbl.ReadMultiple$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ReadMultiple$set(MemorySegment seg, long index, MemorySegment x) {
        IPropertyStorageVtbl.ReadMultiple$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ReadMultiple ReadMultiple(MemorySegment segment, SegmentScope scope) {
        return ReadMultiple.ofAddress(ReadMultiple$get(segment), scope);
    }
    static final FunctionDescriptor WriteMultiple$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor WriteMultiple_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle WriteMultiple_UP$MH = RuntimeHelper.upcallHandle(WriteMultiple.class, "apply", IPropertyStorageVtbl.WriteMultiple_UP$FUNC);
    static final FunctionDescriptor WriteMultiple_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle WriteMultiple_DOWN$MH = RuntimeHelper.downcallHandle(
        IPropertyStorageVtbl.WriteMultiple_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*WriteMultiple)(IPropertyStorage*,ULONG,const PROPSPEC*,const PROPVARIANT*,PROPID);
     * }
     */
    public interface WriteMultiple {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, int _x4);
        static MemorySegment allocate(WriteMultiple fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IPropertyStorageVtbl.WriteMultiple_UP$MH, fi, IPropertyStorageVtbl.WriteMultiple$FUNC, scope);
        }
        static WriteMultiple ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, int __x4) -> {
                try {
                    return (int)IPropertyStorageVtbl.WriteMultiple_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle WriteMultiple$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("WriteMultiple"));
    public static VarHandle WriteMultiple$VH() {
        return IPropertyStorageVtbl.WriteMultiple$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*WriteMultiple)(IPropertyStorage*,ULONG,const PROPSPEC*,const PROPVARIANT*,PROPID);
     * }
     */
    public static MemorySegment WriteMultiple$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IPropertyStorageVtbl.WriteMultiple$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*WriteMultiple)(IPropertyStorage*,ULONG,const PROPSPEC*,const PROPVARIANT*,PROPID);
     * }
     */
    public static void WriteMultiple$set(MemorySegment seg, MemorySegment x) {
        IPropertyStorageVtbl.WriteMultiple$VH.set(seg, x);
    }
    public static MemorySegment WriteMultiple$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IPropertyStorageVtbl.WriteMultiple$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void WriteMultiple$set(MemorySegment seg, long index, MemorySegment x) {
        IPropertyStorageVtbl.WriteMultiple$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static WriteMultiple WriteMultiple(MemorySegment segment, SegmentScope scope) {
        return WriteMultiple.ofAddress(WriteMultiple$get(segment), scope);
    }
    static final FunctionDescriptor DeleteMultiple$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor DeleteMultiple_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle DeleteMultiple_UP$MH = RuntimeHelper.upcallHandle(DeleteMultiple.class, "apply", IPropertyStorageVtbl.DeleteMultiple_UP$FUNC);
    static final FunctionDescriptor DeleteMultiple_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle DeleteMultiple_DOWN$MH = RuntimeHelper.downcallHandle(
        IPropertyStorageVtbl.DeleteMultiple_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*DeleteMultiple)(IPropertyStorage*,ULONG,const PROPSPEC*);
     * }
     */
    public interface DeleteMultiple {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(DeleteMultiple fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IPropertyStorageVtbl.DeleteMultiple_UP$MH, fi, IPropertyStorageVtbl.DeleteMultiple$FUNC, scope);
        }
        static DeleteMultiple ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IPropertyStorageVtbl.DeleteMultiple_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle DeleteMultiple$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("DeleteMultiple"));
    public static VarHandle DeleteMultiple$VH() {
        return IPropertyStorageVtbl.DeleteMultiple$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*DeleteMultiple)(IPropertyStorage*,ULONG,const PROPSPEC*);
     * }
     */
    public static MemorySegment DeleteMultiple$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IPropertyStorageVtbl.DeleteMultiple$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*DeleteMultiple)(IPropertyStorage*,ULONG,const PROPSPEC*);
     * }
     */
    public static void DeleteMultiple$set(MemorySegment seg, MemorySegment x) {
        IPropertyStorageVtbl.DeleteMultiple$VH.set(seg, x);
    }
    public static MemorySegment DeleteMultiple$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IPropertyStorageVtbl.DeleteMultiple$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DeleteMultiple$set(MemorySegment seg, long index, MemorySegment x) {
        IPropertyStorageVtbl.DeleteMultiple$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static DeleteMultiple DeleteMultiple(MemorySegment segment, SegmentScope scope) {
        return DeleteMultiple.ofAddress(DeleteMultiple$get(segment), scope);
    }
    static final FunctionDescriptor ReadPropertyNames$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor ReadPropertyNames_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ReadPropertyNames_UP$MH = RuntimeHelper.upcallHandle(ReadPropertyNames.class, "apply", IPropertyStorageVtbl.ReadPropertyNames_UP$FUNC);
    static final FunctionDescriptor ReadPropertyNames_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ReadPropertyNames_DOWN$MH = RuntimeHelper.downcallHandle(
        IPropertyStorageVtbl.ReadPropertyNames_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*ReadPropertyNames)(IPropertyStorage*,ULONG,const PROPID*,LPOLESTR*);
     * }
     */
    public interface ReadPropertyNames {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(ReadPropertyNames fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IPropertyStorageVtbl.ReadPropertyNames_UP$MH, fi, IPropertyStorageVtbl.ReadPropertyNames$FUNC, scope);
        }
        static ReadPropertyNames ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)IPropertyStorageVtbl.ReadPropertyNames_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ReadPropertyNames$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ReadPropertyNames"));
    public static VarHandle ReadPropertyNames$VH() {
        return IPropertyStorageVtbl.ReadPropertyNames$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*ReadPropertyNames)(IPropertyStorage*,ULONG,const PROPID*,LPOLESTR*);
     * }
     */
    public static MemorySegment ReadPropertyNames$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IPropertyStorageVtbl.ReadPropertyNames$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*ReadPropertyNames)(IPropertyStorage*,ULONG,const PROPID*,LPOLESTR*);
     * }
     */
    public static void ReadPropertyNames$set(MemorySegment seg, MemorySegment x) {
        IPropertyStorageVtbl.ReadPropertyNames$VH.set(seg, x);
    }
    public static MemorySegment ReadPropertyNames$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IPropertyStorageVtbl.ReadPropertyNames$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ReadPropertyNames$set(MemorySegment seg, long index, MemorySegment x) {
        IPropertyStorageVtbl.ReadPropertyNames$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ReadPropertyNames ReadPropertyNames(MemorySegment segment, SegmentScope scope) {
        return ReadPropertyNames.ofAddress(ReadPropertyNames$get(segment), scope);
    }
    static final FunctionDescriptor WritePropertyNames$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor WritePropertyNames_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle WritePropertyNames_UP$MH = RuntimeHelper.upcallHandle(WritePropertyNames.class, "apply", IPropertyStorageVtbl.WritePropertyNames_UP$FUNC);
    static final FunctionDescriptor WritePropertyNames_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle WritePropertyNames_DOWN$MH = RuntimeHelper.downcallHandle(
        IPropertyStorageVtbl.WritePropertyNames_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*WritePropertyNames)(IPropertyStorage*,ULONG,const PROPID*,const LPOLESTR*);
     * }
     */
    public interface WritePropertyNames {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(WritePropertyNames fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IPropertyStorageVtbl.WritePropertyNames_UP$MH, fi, IPropertyStorageVtbl.WritePropertyNames$FUNC, scope);
        }
        static WritePropertyNames ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)IPropertyStorageVtbl.WritePropertyNames_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle WritePropertyNames$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("WritePropertyNames"));
    public static VarHandle WritePropertyNames$VH() {
        return IPropertyStorageVtbl.WritePropertyNames$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*WritePropertyNames)(IPropertyStorage*,ULONG,const PROPID*,const LPOLESTR*);
     * }
     */
    public static MemorySegment WritePropertyNames$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IPropertyStorageVtbl.WritePropertyNames$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*WritePropertyNames)(IPropertyStorage*,ULONG,const PROPID*,const LPOLESTR*);
     * }
     */
    public static void WritePropertyNames$set(MemorySegment seg, MemorySegment x) {
        IPropertyStorageVtbl.WritePropertyNames$VH.set(seg, x);
    }
    public static MemorySegment WritePropertyNames$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IPropertyStorageVtbl.WritePropertyNames$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void WritePropertyNames$set(MemorySegment seg, long index, MemorySegment x) {
        IPropertyStorageVtbl.WritePropertyNames$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static WritePropertyNames WritePropertyNames(MemorySegment segment, SegmentScope scope) {
        return WritePropertyNames.ofAddress(WritePropertyNames$get(segment), scope);
    }
    static final FunctionDescriptor DeletePropertyNames$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor DeletePropertyNames_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle DeletePropertyNames_UP$MH = RuntimeHelper.upcallHandle(DeletePropertyNames.class, "apply", IPropertyStorageVtbl.DeletePropertyNames_UP$FUNC);
    static final FunctionDescriptor DeletePropertyNames_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle DeletePropertyNames_DOWN$MH = RuntimeHelper.downcallHandle(
        IPropertyStorageVtbl.DeletePropertyNames_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*DeletePropertyNames)(IPropertyStorage*,ULONG,const PROPID*);
     * }
     */
    public interface DeletePropertyNames {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(DeletePropertyNames fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IPropertyStorageVtbl.DeletePropertyNames_UP$MH, fi, IPropertyStorageVtbl.DeletePropertyNames$FUNC, scope);
        }
        static DeletePropertyNames ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IPropertyStorageVtbl.DeletePropertyNames_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle DeletePropertyNames$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("DeletePropertyNames"));
    public static VarHandle DeletePropertyNames$VH() {
        return IPropertyStorageVtbl.DeletePropertyNames$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*DeletePropertyNames)(IPropertyStorage*,ULONG,const PROPID*);
     * }
     */
    public static MemorySegment DeletePropertyNames$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IPropertyStorageVtbl.DeletePropertyNames$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*DeletePropertyNames)(IPropertyStorage*,ULONG,const PROPID*);
     * }
     */
    public static void DeletePropertyNames$set(MemorySegment seg, MemorySegment x) {
        IPropertyStorageVtbl.DeletePropertyNames$VH.set(seg, x);
    }
    public static MemorySegment DeletePropertyNames$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IPropertyStorageVtbl.DeletePropertyNames$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DeletePropertyNames$set(MemorySegment seg, long index, MemorySegment x) {
        IPropertyStorageVtbl.DeletePropertyNames$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static DeletePropertyNames DeletePropertyNames(MemorySegment segment, SegmentScope scope) {
        return DeletePropertyNames.ofAddress(DeletePropertyNames$get(segment), scope);
    }
    static final FunctionDescriptor Commit$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor Commit_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle Commit_UP$MH = RuntimeHelper.upcallHandle(Commit.class, "apply", IPropertyStorageVtbl.Commit_UP$FUNC);
    static final FunctionDescriptor Commit_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle Commit_DOWN$MH = RuntimeHelper.downcallHandle(
        IPropertyStorageVtbl.Commit_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*Commit)(IPropertyStorage*,DWORD);
     * }
     */
    public interface Commit {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(Commit fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IPropertyStorageVtbl.Commit_UP$MH, fi, IPropertyStorageVtbl.Commit$FUNC, scope);
        }
        static Commit ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)IPropertyStorageVtbl.Commit_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Commit$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Commit"));
    public static VarHandle Commit$VH() {
        return IPropertyStorageVtbl.Commit$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Commit)(IPropertyStorage*,DWORD);
     * }
     */
    public static MemorySegment Commit$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IPropertyStorageVtbl.Commit$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Commit)(IPropertyStorage*,DWORD);
     * }
     */
    public static void Commit$set(MemorySegment seg, MemorySegment x) {
        IPropertyStorageVtbl.Commit$VH.set(seg, x);
    }
    public static MemorySegment Commit$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IPropertyStorageVtbl.Commit$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Commit$set(MemorySegment seg, long index, MemorySegment x) {
        IPropertyStorageVtbl.Commit$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Commit Commit(MemorySegment segment, SegmentScope scope) {
        return Commit.ofAddress(Commit$get(segment), scope);
    }
    static final FunctionDescriptor Revert$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Revert_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Revert_UP$MH = RuntimeHelper.upcallHandle(Revert.class, "apply", IPropertyStorageVtbl.Revert_UP$FUNC);
    static final FunctionDescriptor Revert_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Revert_DOWN$MH = RuntimeHelper.downcallHandle(
        IPropertyStorageVtbl.Revert_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*Revert)(IPropertyStorage*);
     * }
     */
    public interface Revert {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Revert fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IPropertyStorageVtbl.Revert_UP$MH, fi, IPropertyStorageVtbl.Revert$FUNC, scope);
        }
        static Revert ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IPropertyStorageVtbl.Revert_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Revert$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Revert"));
    public static VarHandle Revert$VH() {
        return IPropertyStorageVtbl.Revert$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Revert)(IPropertyStorage*);
     * }
     */
    public static MemorySegment Revert$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IPropertyStorageVtbl.Revert$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Revert)(IPropertyStorage*);
     * }
     */
    public static void Revert$set(MemorySegment seg, MemorySegment x) {
        IPropertyStorageVtbl.Revert$VH.set(seg, x);
    }
    public static MemorySegment Revert$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IPropertyStorageVtbl.Revert$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Revert$set(MemorySegment seg, long index, MemorySegment x) {
        IPropertyStorageVtbl.Revert$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Revert Revert(MemorySegment segment, SegmentScope scope) {
        return Revert.ofAddress(Revert$get(segment), scope);
    }
    static final FunctionDescriptor Enum$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Enum_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Enum_UP$MH = RuntimeHelper.upcallHandle(Enum.class, "apply", IPropertyStorageVtbl.Enum_UP$FUNC);
    static final FunctionDescriptor Enum_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Enum_DOWN$MH = RuntimeHelper.downcallHandle(
        IPropertyStorageVtbl.Enum_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*Enum)(IPropertyStorage*,IEnumSTATPROPSTG**);
     * }
     */
    public interface Enum {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(Enum fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IPropertyStorageVtbl.Enum_UP$MH, fi, IPropertyStorageVtbl.Enum$FUNC, scope);
        }
        static Enum ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IPropertyStorageVtbl.Enum_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Enum$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Enum"));
    public static VarHandle Enum$VH() {
        return IPropertyStorageVtbl.Enum$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Enum)(IPropertyStorage*,IEnumSTATPROPSTG**);
     * }
     */
    public static MemorySegment Enum$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IPropertyStorageVtbl.Enum$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Enum)(IPropertyStorage*,IEnumSTATPROPSTG**);
     * }
     */
    public static void Enum$set(MemorySegment seg, MemorySegment x) {
        IPropertyStorageVtbl.Enum$VH.set(seg, x);
    }
    public static MemorySegment Enum$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IPropertyStorageVtbl.Enum$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Enum$set(MemorySegment seg, long index, MemorySegment x) {
        IPropertyStorageVtbl.Enum$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Enum Enum(MemorySegment segment, SegmentScope scope) {
        return Enum.ofAddress(Enum$get(segment), scope);
    }
    static final FunctionDescriptor SetTimes$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor SetTimes_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetTimes_UP$MH = RuntimeHelper.upcallHandle(SetTimes.class, "apply", IPropertyStorageVtbl.SetTimes_UP$FUNC);
    static final FunctionDescriptor SetTimes_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetTimes_DOWN$MH = RuntimeHelper.downcallHandle(
        IPropertyStorageVtbl.SetTimes_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetTimes)(IPropertyStorage*,const FILETIME*,const FILETIME*,const FILETIME*);
     * }
     */
    public interface SetTimes {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(SetTimes fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IPropertyStorageVtbl.SetTimes_UP$MH, fi, IPropertyStorageVtbl.SetTimes$FUNC, scope);
        }
        static SetTimes ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)IPropertyStorageVtbl.SetTimes_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetTimes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetTimes"));
    public static VarHandle SetTimes$VH() {
        return IPropertyStorageVtbl.SetTimes$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetTimes)(IPropertyStorage*,const FILETIME*,const FILETIME*,const FILETIME*);
     * }
     */
    public static MemorySegment SetTimes$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IPropertyStorageVtbl.SetTimes$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetTimes)(IPropertyStorage*,const FILETIME*,const FILETIME*,const FILETIME*);
     * }
     */
    public static void SetTimes$set(MemorySegment seg, MemorySegment x) {
        IPropertyStorageVtbl.SetTimes$VH.set(seg, x);
    }
    public static MemorySegment SetTimes$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IPropertyStorageVtbl.SetTimes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetTimes$set(MemorySegment seg, long index, MemorySegment x) {
        IPropertyStorageVtbl.SetTimes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetTimes SetTimes(MemorySegment segment, SegmentScope scope) {
        return SetTimes.ofAddress(SetTimes$get(segment), scope);
    }
    static final FunctionDescriptor SetClass$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor SetClass_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetClass_UP$MH = RuntimeHelper.upcallHandle(SetClass.class, "apply", IPropertyStorageVtbl.SetClass_UP$FUNC);
    static final FunctionDescriptor SetClass_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetClass_DOWN$MH = RuntimeHelper.downcallHandle(
        IPropertyStorageVtbl.SetClass_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetClass)(IPropertyStorage*,const IID*);
     * }
     */
    public interface SetClass {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(SetClass fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IPropertyStorageVtbl.SetClass_UP$MH, fi, IPropertyStorageVtbl.SetClass$FUNC, scope);
        }
        static SetClass ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IPropertyStorageVtbl.SetClass_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetClass$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetClass"));
    public static VarHandle SetClass$VH() {
        return IPropertyStorageVtbl.SetClass$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetClass)(IPropertyStorage*,const IID*);
     * }
     */
    public static MemorySegment SetClass$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IPropertyStorageVtbl.SetClass$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetClass)(IPropertyStorage*,const IID*);
     * }
     */
    public static void SetClass$set(MemorySegment seg, MemorySegment x) {
        IPropertyStorageVtbl.SetClass$VH.set(seg, x);
    }
    public static MemorySegment SetClass$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IPropertyStorageVtbl.SetClass$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetClass$set(MemorySegment seg, long index, MemorySegment x) {
        IPropertyStorageVtbl.SetClass$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetClass SetClass(MemorySegment segment, SegmentScope scope) {
        return SetClass.ofAddress(SetClass$get(segment), scope);
    }
    static final FunctionDescriptor Stat$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Stat_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Stat_UP$MH = RuntimeHelper.upcallHandle(Stat.class, "apply", IPropertyStorageVtbl.Stat_UP$FUNC);
    static final FunctionDescriptor Stat_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Stat_DOWN$MH = RuntimeHelper.downcallHandle(
        IPropertyStorageVtbl.Stat_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*Stat)(IPropertyStorage*,STATPROPSETSTG*);
     * }
     */
    public interface Stat {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(Stat fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IPropertyStorageVtbl.Stat_UP$MH, fi, IPropertyStorageVtbl.Stat$FUNC, scope);
        }
        static Stat ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IPropertyStorageVtbl.Stat_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Stat$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Stat"));
    public static VarHandle Stat$VH() {
        return IPropertyStorageVtbl.Stat$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Stat)(IPropertyStorage*,STATPROPSETSTG*);
     * }
     */
    public static MemorySegment Stat$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IPropertyStorageVtbl.Stat$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Stat)(IPropertyStorage*,STATPROPSETSTG*);
     * }
     */
    public static void Stat$set(MemorySegment seg, MemorySegment x) {
        IPropertyStorageVtbl.Stat$VH.set(seg, x);
    }
    public static MemorySegment Stat$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IPropertyStorageVtbl.Stat$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Stat$set(MemorySegment seg, long index, MemorySegment x) {
        IPropertyStorageVtbl.Stat$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Stat Stat(MemorySegment segment, SegmentScope scope) {
        return Stat.ofAddress(Stat$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


