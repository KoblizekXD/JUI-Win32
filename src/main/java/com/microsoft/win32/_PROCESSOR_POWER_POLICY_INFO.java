// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _PROCESSOR_POWER_POLICY_INFO {
 *     DWORD TimeCheck;
 *     DWORD DemoteLimit;
 *     DWORD PromoteLimit;
 *     BYTE DemotePercent;
 *     BYTE PromotePercent;
 *     BYTE Spare[2];
 *      *     DWORD AllowDemotion;
 *     DWORD AllowPromotion;
 *     DWORD Reserved;
 * };
 * }
 */
public class _PROCESSOR_POWER_POLICY_INFO {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("TimeCheck"),
        Constants$root.C_LONG$LAYOUT.withName("DemoteLimit"),
        Constants$root.C_LONG$LAYOUT.withName("PromoteLimit"),
        Constants$root.C_CHAR$LAYOUT.withName("DemotePercent"),
        Constants$root.C_CHAR$LAYOUT.withName("PromotePercent"),
        MemoryLayout.sequenceLayout(2, Constants$root.C_CHAR$LAYOUT).withName("Spare"),
        MemoryLayout.paddingLayout(32)
    ).withName("_PROCESSOR_POWER_POLICY_INFO");
    public static MemoryLayout $LAYOUT() {
        return _PROCESSOR_POWER_POLICY_INFO.$struct$LAYOUT;
    }
    static final VarHandle TimeCheck$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("TimeCheck"));
    public static VarHandle TimeCheck$VH() {
        return _PROCESSOR_POWER_POLICY_INFO.TimeCheck$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD TimeCheck;
     * }
     */
    public static int TimeCheck$get(MemorySegment seg) {
        return (int)_PROCESSOR_POWER_POLICY_INFO.TimeCheck$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD TimeCheck;
     * }
     */
    public static void TimeCheck$set(MemorySegment seg, int x) {
        _PROCESSOR_POWER_POLICY_INFO.TimeCheck$VH.set(seg, x);
    }
    public static int TimeCheck$get(MemorySegment seg, long index) {
        return (int)_PROCESSOR_POWER_POLICY_INFO.TimeCheck$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void TimeCheck$set(MemorySegment seg, long index, int x) {
        _PROCESSOR_POWER_POLICY_INFO.TimeCheck$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle DemoteLimit$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("DemoteLimit"));
    public static VarHandle DemoteLimit$VH() {
        return _PROCESSOR_POWER_POLICY_INFO.DemoteLimit$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD DemoteLimit;
     * }
     */
    public static int DemoteLimit$get(MemorySegment seg) {
        return (int)_PROCESSOR_POWER_POLICY_INFO.DemoteLimit$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD DemoteLimit;
     * }
     */
    public static void DemoteLimit$set(MemorySegment seg, int x) {
        _PROCESSOR_POWER_POLICY_INFO.DemoteLimit$VH.set(seg, x);
    }
    public static int DemoteLimit$get(MemorySegment seg, long index) {
        return (int)_PROCESSOR_POWER_POLICY_INFO.DemoteLimit$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DemoteLimit$set(MemorySegment seg, long index, int x) {
        _PROCESSOR_POWER_POLICY_INFO.DemoteLimit$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle PromoteLimit$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("PromoteLimit"));
    public static VarHandle PromoteLimit$VH() {
        return _PROCESSOR_POWER_POLICY_INFO.PromoteLimit$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD PromoteLimit;
     * }
     */
    public static int PromoteLimit$get(MemorySegment seg) {
        return (int)_PROCESSOR_POWER_POLICY_INFO.PromoteLimit$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD PromoteLimit;
     * }
     */
    public static void PromoteLimit$set(MemorySegment seg, int x) {
        _PROCESSOR_POWER_POLICY_INFO.PromoteLimit$VH.set(seg, x);
    }
    public static int PromoteLimit$get(MemorySegment seg, long index) {
        return (int)_PROCESSOR_POWER_POLICY_INFO.PromoteLimit$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void PromoteLimit$set(MemorySegment seg, long index, int x) {
        _PROCESSOR_POWER_POLICY_INFO.PromoteLimit$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle DemotePercent$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("DemotePercent"));
    public static VarHandle DemotePercent$VH() {
        return _PROCESSOR_POWER_POLICY_INFO.DemotePercent$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE DemotePercent;
     * }
     */
    public static byte DemotePercent$get(MemorySegment seg) {
        return (byte)_PROCESSOR_POWER_POLICY_INFO.DemotePercent$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE DemotePercent;
     * }
     */
    public static void DemotePercent$set(MemorySegment seg, byte x) {
        _PROCESSOR_POWER_POLICY_INFO.DemotePercent$VH.set(seg, x);
    }
    public static byte DemotePercent$get(MemorySegment seg, long index) {
        return (byte)_PROCESSOR_POWER_POLICY_INFO.DemotePercent$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DemotePercent$set(MemorySegment seg, long index, byte x) {
        _PROCESSOR_POWER_POLICY_INFO.DemotePercent$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle PromotePercent$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("PromotePercent"));
    public static VarHandle PromotePercent$VH() {
        return _PROCESSOR_POWER_POLICY_INFO.PromotePercent$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE PromotePercent;
     * }
     */
    public static byte PromotePercent$get(MemorySegment seg) {
        return (byte)_PROCESSOR_POWER_POLICY_INFO.PromotePercent$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE PromotePercent;
     * }
     */
    public static void PromotePercent$set(MemorySegment seg, byte x) {
        _PROCESSOR_POWER_POLICY_INFO.PromotePercent$VH.set(seg, x);
    }
    public static byte PromotePercent$get(MemorySegment seg, long index) {
        return (byte)_PROCESSOR_POWER_POLICY_INFO.PromotePercent$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void PromotePercent$set(MemorySegment seg, long index, byte x) {
        _PROCESSOR_POWER_POLICY_INFO.PromotePercent$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Spare$slice(MemorySegment seg) {
        return seg.asSlice(14, 2);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


