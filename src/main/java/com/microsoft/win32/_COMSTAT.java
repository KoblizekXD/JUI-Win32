// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _COMSTAT {
 *      *     DWORD fCtsHold;
 *     DWORD fDsrHold;
 *     DWORD fRlsdHold;
 *     DWORD fXoffHold;
 *     DWORD fXoffSent;
 *     DWORD fEof;
 *     DWORD fTxim;
 *     DWORD fReserved;
 *     DWORD cbInQue;
 *     DWORD cbOutQue;
 * };
 * }
 */
public class _COMSTAT {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.paddingLayout(32),
        Constants$root.C_LONG$LAYOUT.withName("cbInQue"),
        Constants$root.C_LONG$LAYOUT.withName("cbOutQue")
    ).withName("_COMSTAT");
    public static MemoryLayout $LAYOUT() {
        return _COMSTAT.$struct$LAYOUT;
    }
    static final VarHandle cbInQue$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cbInQue"));
    public static VarHandle cbInQue$VH() {
        return _COMSTAT.cbInQue$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD cbInQue;
     * }
     */
    public static int cbInQue$get(MemorySegment seg) {
        return (int)_COMSTAT.cbInQue$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD cbInQue;
     * }
     */
    public static void cbInQue$set(MemorySegment seg, int x) {
        _COMSTAT.cbInQue$VH.set(seg, x);
    }
    public static int cbInQue$get(MemorySegment seg, long index) {
        return (int)_COMSTAT.cbInQue$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cbInQue$set(MemorySegment seg, long index, int x) {
        _COMSTAT.cbInQue$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cbOutQue$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cbOutQue"));
    public static VarHandle cbOutQue$VH() {
        return _COMSTAT.cbOutQue$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD cbOutQue;
     * }
     */
    public static int cbOutQue$get(MemorySegment seg) {
        return (int)_COMSTAT.cbOutQue$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD cbOutQue;
     * }
     */
    public static void cbOutQue$set(MemorySegment seg, int x) {
        _COMSTAT.cbOutQue$VH.set(seg, x);
    }
    public static int cbOutQue$get(MemorySegment seg, long index) {
        return (int)_COMSTAT.cbOutQue$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cbOutQue$set(MemorySegment seg, long index, int x) {
        _COMSTAT.cbOutQue$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


