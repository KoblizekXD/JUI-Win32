// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * void (*LPSERVICE_MAIN_FUNCTIONA)(unsigned long dwNumServicesArgs,char** lpServiceArgVectors);
 * }
 */
public interface LPSERVICE_MAIN_FUNCTIONA {

    void apply(int dwNumServicesArgs, java.lang.foreign.MemorySegment lpServiceArgVectors);
    static MemorySegment allocate(LPSERVICE_MAIN_FUNCTIONA fi, SegmentScope scope) {
        return RuntimeHelper.upcallStub(constants$1251.LPSERVICE_MAIN_FUNCTIONA_UP$MH, fi, constants$1251.LPSERVICE_MAIN_FUNCTIONA$FUNC, scope);
    }
    static LPSERVICE_MAIN_FUNCTIONA ofAddress(MemorySegment addr, SegmentScope scope) {
        MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
        return (int _dwNumServicesArgs, java.lang.foreign.MemorySegment _lpServiceArgVectors) -> {
            try {
                constants$1251.LPSERVICE_MAIN_FUNCTIONA_DOWN$MH.invokeExact(symbol, _dwNumServicesArgs, _lpServiceArgVectors);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


