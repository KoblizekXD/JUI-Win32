// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _CRYPT_PRIVATE_KEY_INFO {
 *     DWORD Version;
 *     CRYPT_ALGORITHM_IDENTIFIER Algorithm;
 *     CRYPT_DER_BLOB PrivateKey;
 *     PCRYPT_ATTRIBUTES pAttributes;
 * };
 * }
 */
public class _CRYPT_PRIVATE_KEY_INFO {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("Version"),
        MemoryLayout.paddingLayout(32),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("pszObjId"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("cbData"),
                MemoryLayout.paddingLayout(32),
                Constants$root.C_POINTER$LAYOUT.withName("pbData")
            ).withName("Parameters")
        ).withName("Algorithm"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("cbData"),
            MemoryLayout.paddingLayout(32),
            Constants$root.C_POINTER$LAYOUT.withName("pbData")
        ).withName("PrivateKey"),
        Constants$root.C_POINTER$LAYOUT.withName("pAttributes")
    ).withName("_CRYPT_PRIVATE_KEY_INFO");
    public static MemoryLayout $LAYOUT() {
        return _CRYPT_PRIVATE_KEY_INFO.$struct$LAYOUT;
    }
    static final VarHandle Version$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Version"));
    public static VarHandle Version$VH() {
        return _CRYPT_PRIVATE_KEY_INFO.Version$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Version;
     * }
     */
    public static int Version$get(MemorySegment seg) {
        return (int)_CRYPT_PRIVATE_KEY_INFO.Version$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Version;
     * }
     */
    public static void Version$set(MemorySegment seg, int x) {
        _CRYPT_PRIVATE_KEY_INFO.Version$VH.set(seg, x);
    }
    public static int Version$get(MemorySegment seg, long index) {
        return (int)_CRYPT_PRIVATE_KEY_INFO.Version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Version$set(MemorySegment seg, long index, int x) {
        _CRYPT_PRIVATE_KEY_INFO.Version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Algorithm$slice(MemorySegment seg) {
        return seg.asSlice(8, 24);
    }
    public static MemorySegment PrivateKey$slice(MemorySegment seg) {
        return seg.asSlice(32, 16);
    }
    static final VarHandle pAttributes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pAttributes"));
    public static VarHandle pAttributes$VH() {
        return _CRYPT_PRIVATE_KEY_INFO.pAttributes$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PCRYPT_ATTRIBUTES pAttributes;
     * }
     */
    public static MemorySegment pAttributes$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_CRYPT_PRIVATE_KEY_INFO.pAttributes$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PCRYPT_ATTRIBUTES pAttributes;
     * }
     */
    public static void pAttributes$set(MemorySegment seg, MemorySegment x) {
        _CRYPT_PRIVATE_KEY_INFO.pAttributes$VH.set(seg, x);
    }
    public static MemorySegment pAttributes$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_CRYPT_PRIVATE_KEY_INFO.pAttributes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pAttributes$set(MemorySegment seg, long index, MemorySegment x) {
        _CRYPT_PRIVATE_KEY_INFO.pAttributes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


