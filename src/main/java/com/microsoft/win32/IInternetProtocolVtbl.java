// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IInternetProtocolVtbl {
 *     HRESULT (*QueryInterface)(IInternetProtocol*,const IID*,void**);
 *     ULONG (*AddRef)(IInternetProtocol*);
 *     ULONG (*Release)(IInternetProtocol*);
 *     HRESULT (*Start)(IInternetProtocol*,LPCWSTR,IInternetProtocolSink*,IInternetBindInfo*,DWORD,HANDLE_PTR);
 *     HRESULT (*Continue)(IInternetProtocol*,PROTOCOLDATA*);
 *     HRESULT (*Abort)(IInternetProtocol*,HRESULT,DWORD);
 *     HRESULT (*Terminate)(IInternetProtocol*,DWORD);
 *     HRESULT (*Suspend)(IInternetProtocol*);
 *     HRESULT (*Resume)(IInternetProtocol*);
 *     HRESULT (*Read)(IInternetProtocol*,void*,ULONG,ULONG*);
 *     HRESULT (*Seek)(IInternetProtocol*,LARGE_INTEGER,DWORD,ULARGE_INTEGER*);
 *     HRESULT (*LockRequest)(IInternetProtocol*,DWORD);
 *     HRESULT (*UnlockRequest)(IInternetProtocol*);
 * };
 * }
 */
public class IInternetProtocolVtbl {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("Start"),
        Constants$root.C_POINTER$LAYOUT.withName("Continue"),
        Constants$root.C_POINTER$LAYOUT.withName("Abort"),
        Constants$root.C_POINTER$LAYOUT.withName("Terminate"),
        Constants$root.C_POINTER$LAYOUT.withName("Suspend"),
        Constants$root.C_POINTER$LAYOUT.withName("Resume"),
        Constants$root.C_POINTER$LAYOUT.withName("Read"),
        Constants$root.C_POINTER$LAYOUT.withName("Seek"),
        Constants$root.C_POINTER$LAYOUT.withName("LockRequest"),
        Constants$root.C_POINTER$LAYOUT.withName("UnlockRequest")
    ).withName("IInternetProtocolVtbl");
    public static MemoryLayout $LAYOUT() {
        return IInternetProtocolVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor QueryInterface_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_UP$MH = RuntimeHelper.upcallHandle(QueryInterface.class, "apply", IInternetProtocolVtbl.QueryInterface_UP$FUNC);
    static final FunctionDescriptor QueryInterface_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_DOWN$MH = RuntimeHelper.downcallHandle(
        IInternetProtocolVtbl.QueryInterface_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(IInternetProtocol*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IInternetProtocolVtbl.QueryInterface_UP$MH, fi, IInternetProtocolVtbl.QueryInterface$FUNC, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IInternetProtocolVtbl.QueryInterface_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return IInternetProtocolVtbl.QueryInterface$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IInternetProtocol*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IInternetProtocolVtbl.QueryInterface$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IInternetProtocol*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        IInternetProtocolVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IInternetProtocolVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        IInternetProtocolVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, SegmentScope scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor AddRef_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_UP$MH = RuntimeHelper.upcallHandle(AddRef.class, "apply", IInternetProtocolVtbl.AddRef_UP$FUNC);
    static final FunctionDescriptor AddRef_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_DOWN$MH = RuntimeHelper.downcallHandle(
        IInternetProtocolVtbl.AddRef_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*AddRef)(IInternetProtocol*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IInternetProtocolVtbl.AddRef_UP$MH, fi, IInternetProtocolVtbl.AddRef$FUNC, scope);
        }
        static AddRef ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IInternetProtocolVtbl.AddRef_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return IInternetProtocolVtbl.AddRef$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(IInternetProtocol*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IInternetProtocolVtbl.AddRef$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(IInternetProtocol*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        IInternetProtocolVtbl.AddRef$VH.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IInternetProtocolVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        IInternetProtocolVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, SegmentScope scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Release_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_UP$MH = RuntimeHelper.upcallHandle(Release.class, "apply", IInternetProtocolVtbl.Release_UP$FUNC);
    static final FunctionDescriptor Release_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_DOWN$MH = RuntimeHelper.downcallHandle(
        IInternetProtocolVtbl.Release_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*Release)(IInternetProtocol*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IInternetProtocolVtbl.Release_UP$MH, fi, IInternetProtocolVtbl.Release$FUNC, scope);
        }
        static Release ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IInternetProtocolVtbl.Release_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return IInternetProtocolVtbl.Release$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(IInternetProtocol*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IInternetProtocolVtbl.Release$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(IInternetProtocol*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        IInternetProtocolVtbl.Release$VH.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IInternetProtocolVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        IInternetProtocolVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, SegmentScope scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    static final FunctionDescriptor Start$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final FunctionDescriptor Start_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final MethodHandle Start_UP$MH = RuntimeHelper.upcallHandle(Start.class, "apply", IInternetProtocolVtbl.Start_UP$FUNC);
    static final FunctionDescriptor Start_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final MethodHandle Start_DOWN$MH = RuntimeHelper.downcallHandle(
        IInternetProtocolVtbl.Start_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*Start)(IInternetProtocol*,LPCWSTR,IInternetProtocolSink*,IInternetBindInfo*,DWORD,HANDLE_PTR);
     * }
     */
    public interface Start {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, int _x4, long _x5);
        static MemorySegment allocate(Start fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IInternetProtocolVtbl.Start_UP$MH, fi, IInternetProtocolVtbl.Start$FUNC, scope);
        }
        static Start ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, int __x4, long __x5) -> {
                try {
                    return (int)IInternetProtocolVtbl.Start_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Start$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Start"));
    public static VarHandle Start$VH() {
        return IInternetProtocolVtbl.Start$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Start)(IInternetProtocol*,LPCWSTR,IInternetProtocolSink*,IInternetBindInfo*,DWORD,HANDLE_PTR);
     * }
     */
    public static MemorySegment Start$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IInternetProtocolVtbl.Start$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Start)(IInternetProtocol*,LPCWSTR,IInternetProtocolSink*,IInternetBindInfo*,DWORD,HANDLE_PTR);
     * }
     */
    public static void Start$set(MemorySegment seg, MemorySegment x) {
        IInternetProtocolVtbl.Start$VH.set(seg, x);
    }
    public static MemorySegment Start$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IInternetProtocolVtbl.Start$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Start$set(MemorySegment seg, long index, MemorySegment x) {
        IInternetProtocolVtbl.Start$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Start Start(MemorySegment segment, SegmentScope scope) {
        return Start.ofAddress(Start$get(segment), scope);
    }
    static final FunctionDescriptor Continue$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Continue_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Continue_UP$MH = RuntimeHelper.upcallHandle(Continue.class, "apply", IInternetProtocolVtbl.Continue_UP$FUNC);
    static final FunctionDescriptor Continue_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Continue_DOWN$MH = RuntimeHelper.downcallHandle(
        IInternetProtocolVtbl.Continue_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*Continue)(IInternetProtocol*,PROTOCOLDATA*);
     * }
     */
    public interface Continue {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(Continue fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IInternetProtocolVtbl.Continue_UP$MH, fi, IInternetProtocolVtbl.Continue$FUNC, scope);
        }
        static Continue ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IInternetProtocolVtbl.Continue_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Continue$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Continue"));
    public static VarHandle Continue$VH() {
        return IInternetProtocolVtbl.Continue$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Continue)(IInternetProtocol*,PROTOCOLDATA*);
     * }
     */
    public static MemorySegment Continue$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IInternetProtocolVtbl.Continue$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Continue)(IInternetProtocol*,PROTOCOLDATA*);
     * }
     */
    public static void Continue$set(MemorySegment seg, MemorySegment x) {
        IInternetProtocolVtbl.Continue$VH.set(seg, x);
    }
    public static MemorySegment Continue$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IInternetProtocolVtbl.Continue$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Continue$set(MemorySegment seg, long index, MemorySegment x) {
        IInternetProtocolVtbl.Continue$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Continue Continue(MemorySegment segment, SegmentScope scope) {
        return Continue.ofAddress(Continue$get(segment), scope);
    }
    static final FunctionDescriptor Abort$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor Abort_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle Abort_UP$MH = RuntimeHelper.upcallHandle(Abort.class, "apply", IInternetProtocolVtbl.Abort_UP$FUNC);
    static final FunctionDescriptor Abort_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle Abort_DOWN$MH = RuntimeHelper.downcallHandle(
        IInternetProtocolVtbl.Abort_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*Abort)(IInternetProtocol*,HRESULT,DWORD);
     * }
     */
    public interface Abort {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2);
        static MemorySegment allocate(Abort fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IInternetProtocolVtbl.Abort_UP$MH, fi, IInternetProtocolVtbl.Abort$FUNC, scope);
        }
        static Abort ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2) -> {
                try {
                    return (int)IInternetProtocolVtbl.Abort_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Abort$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Abort"));
    public static VarHandle Abort$VH() {
        return IInternetProtocolVtbl.Abort$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Abort)(IInternetProtocol*,HRESULT,DWORD);
     * }
     */
    public static MemorySegment Abort$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IInternetProtocolVtbl.Abort$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Abort)(IInternetProtocol*,HRESULT,DWORD);
     * }
     */
    public static void Abort$set(MemorySegment seg, MemorySegment x) {
        IInternetProtocolVtbl.Abort$VH.set(seg, x);
    }
    public static MemorySegment Abort$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IInternetProtocolVtbl.Abort$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Abort$set(MemorySegment seg, long index, MemorySegment x) {
        IInternetProtocolVtbl.Abort$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Abort Abort(MemorySegment segment, SegmentScope scope) {
        return Abort.ofAddress(Abort$get(segment), scope);
    }
    static final FunctionDescriptor Terminate$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor Terminate_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle Terminate_UP$MH = RuntimeHelper.upcallHandle(Terminate.class, "apply", IInternetProtocolVtbl.Terminate_UP$FUNC);
    static final FunctionDescriptor Terminate_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle Terminate_DOWN$MH = RuntimeHelper.downcallHandle(
        IInternetProtocolVtbl.Terminate_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*Terminate)(IInternetProtocol*,DWORD);
     * }
     */
    public interface Terminate {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(Terminate fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IInternetProtocolVtbl.Terminate_UP$MH, fi, IInternetProtocolVtbl.Terminate$FUNC, scope);
        }
        static Terminate ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)IInternetProtocolVtbl.Terminate_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Terminate$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Terminate"));
    public static VarHandle Terminate$VH() {
        return IInternetProtocolVtbl.Terminate$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Terminate)(IInternetProtocol*,DWORD);
     * }
     */
    public static MemorySegment Terminate$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IInternetProtocolVtbl.Terminate$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Terminate)(IInternetProtocol*,DWORD);
     * }
     */
    public static void Terminate$set(MemorySegment seg, MemorySegment x) {
        IInternetProtocolVtbl.Terminate$VH.set(seg, x);
    }
    public static MemorySegment Terminate$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IInternetProtocolVtbl.Terminate$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Terminate$set(MemorySegment seg, long index, MemorySegment x) {
        IInternetProtocolVtbl.Terminate$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Terminate Terminate(MemorySegment segment, SegmentScope scope) {
        return Terminate.ofAddress(Terminate$get(segment), scope);
    }
    static final FunctionDescriptor Suspend$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Suspend_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Suspend_UP$MH = RuntimeHelper.upcallHandle(Suspend.class, "apply", IInternetProtocolVtbl.Suspend_UP$FUNC);
    static final FunctionDescriptor Suspend_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Suspend_DOWN$MH = RuntimeHelper.downcallHandle(
        IInternetProtocolVtbl.Suspend_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*Suspend)(IInternetProtocol*);
     * }
     */
    public interface Suspend {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Suspend fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IInternetProtocolVtbl.Suspend_UP$MH, fi, IInternetProtocolVtbl.Suspend$FUNC, scope);
        }
        static Suspend ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IInternetProtocolVtbl.Suspend_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Suspend$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Suspend"));
    public static VarHandle Suspend$VH() {
        return IInternetProtocolVtbl.Suspend$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Suspend)(IInternetProtocol*);
     * }
     */
    public static MemorySegment Suspend$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IInternetProtocolVtbl.Suspend$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Suspend)(IInternetProtocol*);
     * }
     */
    public static void Suspend$set(MemorySegment seg, MemorySegment x) {
        IInternetProtocolVtbl.Suspend$VH.set(seg, x);
    }
    public static MemorySegment Suspend$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IInternetProtocolVtbl.Suspend$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Suspend$set(MemorySegment seg, long index, MemorySegment x) {
        IInternetProtocolVtbl.Suspend$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Suspend Suspend(MemorySegment segment, SegmentScope scope) {
        return Suspend.ofAddress(Suspend$get(segment), scope);
    }
    static final FunctionDescriptor Resume$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Resume_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Resume_UP$MH = RuntimeHelper.upcallHandle(Resume.class, "apply", IInternetProtocolVtbl.Resume_UP$FUNC);
    static final FunctionDescriptor Resume_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Resume_DOWN$MH = RuntimeHelper.downcallHandle(
        IInternetProtocolVtbl.Resume_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*Resume)(IInternetProtocol*);
     * }
     */
    public interface Resume {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Resume fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IInternetProtocolVtbl.Resume_UP$MH, fi, IInternetProtocolVtbl.Resume$FUNC, scope);
        }
        static Resume ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IInternetProtocolVtbl.Resume_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Resume$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Resume"));
    public static VarHandle Resume$VH() {
        return IInternetProtocolVtbl.Resume$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Resume)(IInternetProtocol*);
     * }
     */
    public static MemorySegment Resume$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IInternetProtocolVtbl.Resume$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Resume)(IInternetProtocol*);
     * }
     */
    public static void Resume$set(MemorySegment seg, MemorySegment x) {
        IInternetProtocolVtbl.Resume$VH.set(seg, x);
    }
    public static MemorySegment Resume$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IInternetProtocolVtbl.Resume$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Resume$set(MemorySegment seg, long index, MemorySegment x) {
        IInternetProtocolVtbl.Resume$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Resume Resume(MemorySegment segment, SegmentScope scope) {
        return Resume.ofAddress(Resume$get(segment), scope);
    }
    static final FunctionDescriptor Read$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Read_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Read_UP$MH = RuntimeHelper.upcallHandle(Read.class, "apply", IInternetProtocolVtbl.Read_UP$FUNC);
    static final FunctionDescriptor Read_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Read_DOWN$MH = RuntimeHelper.downcallHandle(
        IInternetProtocolVtbl.Read_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*Read)(IInternetProtocol*,void*,ULONG,ULONG*);
     * }
     */
    public interface Read {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(Read fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IInternetProtocolVtbl.Read_UP$MH, fi, IInternetProtocolVtbl.Read$FUNC, scope);
        }
        static Read ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)IInternetProtocolVtbl.Read_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Read$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Read"));
    public static VarHandle Read$VH() {
        return IInternetProtocolVtbl.Read$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Read)(IInternetProtocol*,void*,ULONG,ULONG*);
     * }
     */
    public static MemorySegment Read$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IInternetProtocolVtbl.Read$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Read)(IInternetProtocol*,void*,ULONG,ULONG*);
     * }
     */
    public static void Read$set(MemorySegment seg, MemorySegment x) {
        IInternetProtocolVtbl.Read$VH.set(seg, x);
    }
    public static MemorySegment Read$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IInternetProtocolVtbl.Read$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Read$set(MemorySegment seg, long index, MemorySegment x) {
        IInternetProtocolVtbl.Read$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Read Read(MemorySegment segment, SegmentScope scope) {
        return Read.ofAddress(Read$get(segment), scope);
    }
    static final FunctionDescriptor Seek$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("_LARGE_INTEGER"),
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Seek_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("_LARGE_INTEGER"),
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Seek_UP$MH = RuntimeHelper.upcallHandle(Seek.class, "apply", IInternetProtocolVtbl.Seek_UP$FUNC);
    static final FunctionDescriptor Seek_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("_LARGE_INTEGER"),
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Seek_DOWN$MH = RuntimeHelper.downcallHandle(
        IInternetProtocolVtbl.Seek_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*Seek)(IInternetProtocol*,LARGE_INTEGER,DWORD,ULARGE_INTEGER*);
     * }
     */
    public interface Seek {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(Seek fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IInternetProtocolVtbl.Seek_UP$MH, fi, IInternetProtocolVtbl.Seek$FUNC, scope);
        }
        static Seek ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)IInternetProtocolVtbl.Seek_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Seek$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Seek"));
    public static VarHandle Seek$VH() {
        return IInternetProtocolVtbl.Seek$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Seek)(IInternetProtocol*,LARGE_INTEGER,DWORD,ULARGE_INTEGER*);
     * }
     */
    public static MemorySegment Seek$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IInternetProtocolVtbl.Seek$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Seek)(IInternetProtocol*,LARGE_INTEGER,DWORD,ULARGE_INTEGER*);
     * }
     */
    public static void Seek$set(MemorySegment seg, MemorySegment x) {
        IInternetProtocolVtbl.Seek$VH.set(seg, x);
    }
    public static MemorySegment Seek$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IInternetProtocolVtbl.Seek$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Seek$set(MemorySegment seg, long index, MemorySegment x) {
        IInternetProtocolVtbl.Seek$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Seek Seek(MemorySegment segment, SegmentScope scope) {
        return Seek.ofAddress(Seek$get(segment), scope);
    }
    static final FunctionDescriptor LockRequest$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor LockRequest_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle LockRequest_UP$MH = RuntimeHelper.upcallHandle(LockRequest.class, "apply", IInternetProtocolVtbl.LockRequest_UP$FUNC);
    static final FunctionDescriptor LockRequest_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle LockRequest_DOWN$MH = RuntimeHelper.downcallHandle(
        IInternetProtocolVtbl.LockRequest_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*LockRequest)(IInternetProtocol*,DWORD);
     * }
     */
    public interface LockRequest {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(LockRequest fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IInternetProtocolVtbl.LockRequest_UP$MH, fi, IInternetProtocolVtbl.LockRequest$FUNC, scope);
        }
        static LockRequest ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)IInternetProtocolVtbl.LockRequest_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle LockRequest$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("LockRequest"));
    public static VarHandle LockRequest$VH() {
        return IInternetProtocolVtbl.LockRequest$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*LockRequest)(IInternetProtocol*,DWORD);
     * }
     */
    public static MemorySegment LockRequest$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IInternetProtocolVtbl.LockRequest$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*LockRequest)(IInternetProtocol*,DWORD);
     * }
     */
    public static void LockRequest$set(MemorySegment seg, MemorySegment x) {
        IInternetProtocolVtbl.LockRequest$VH.set(seg, x);
    }
    public static MemorySegment LockRequest$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IInternetProtocolVtbl.LockRequest$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void LockRequest$set(MemorySegment seg, long index, MemorySegment x) {
        IInternetProtocolVtbl.LockRequest$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static LockRequest LockRequest(MemorySegment segment, SegmentScope scope) {
        return LockRequest.ofAddress(LockRequest$get(segment), scope);
    }
    static final FunctionDescriptor UnlockRequest$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor UnlockRequest_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle UnlockRequest_UP$MH = RuntimeHelper.upcallHandle(UnlockRequest.class, "apply", IInternetProtocolVtbl.UnlockRequest_UP$FUNC);
    static final FunctionDescriptor UnlockRequest_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle UnlockRequest_DOWN$MH = RuntimeHelper.downcallHandle(
        IInternetProtocolVtbl.UnlockRequest_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*UnlockRequest)(IInternetProtocol*);
     * }
     */
    public interface UnlockRequest {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(UnlockRequest fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IInternetProtocolVtbl.UnlockRequest_UP$MH, fi, IInternetProtocolVtbl.UnlockRequest$FUNC, scope);
        }
        static UnlockRequest ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IInternetProtocolVtbl.UnlockRequest_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle UnlockRequest$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("UnlockRequest"));
    public static VarHandle UnlockRequest$VH() {
        return IInternetProtocolVtbl.UnlockRequest$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*UnlockRequest)(IInternetProtocol*);
     * }
     */
    public static MemorySegment UnlockRequest$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IInternetProtocolVtbl.UnlockRequest$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*UnlockRequest)(IInternetProtocol*);
     * }
     */
    public static void UnlockRequest$set(MemorySegment seg, MemorySegment x) {
        IInternetProtocolVtbl.UnlockRequest$VH.set(seg, x);
    }
    public static MemorySegment UnlockRequest$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IInternetProtocolVtbl.UnlockRequest$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void UnlockRequest$set(MemorySegment seg, long index, MemorySegment x) {
        IInternetProtocolVtbl.UnlockRequest$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static UnlockRequest UnlockRequest(MemorySegment segment, SegmentScope scope) {
        return UnlockRequest.ofAddress(UnlockRequest$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


