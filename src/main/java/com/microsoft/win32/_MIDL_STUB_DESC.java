// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _MIDL_STUB_DESC {
 *     void* RpcInterfaceInformation;
 *     void* (*pfnAllocate)(size_t);
 *     void (*pfnFree)(void*);
 *     union  IMPLICIT_HANDLE_INFO;
 *     const NDR_RUNDOWN* apfnNdrRundownRoutines;
 *     const GENERIC_BINDING_ROUTINE_PAIR* aGenericBindingRoutinePairs;
 *     const EXPR_EVAL* apfnExprEval;
 *     const XMIT_ROUTINE_QUINTUPLE* aXmitQuintuple;
 *     unsigned char* pFormatTypes;
 *     int fCheckBounds;
 *     unsigned long Version;
 *     MALLOC_FREE_STRUCT* pMallocFreeStruct;
 *     long MIDLVersion;
 *     const COMM_FAULT_OFFSETS* CommFaultOffsets;
 *     const USER_MARSHAL_ROUTINE_QUADRUPLE* aUserMarshalQuadruple;
 *     const NDR_NOTIFY_ROUTINE* NotifyRoutineTable;
 *     ULONG_PTR mFlags;
 *     const NDR_CS_ROUTINES* CsRoutineTables;
 *     void* ProxyServerInfo;
 *     const NDR_EXPR_DESC* pExprInfo;
 * };
 * }
 */
public class _MIDL_STUB_DESC {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("RpcInterfaceInformation"),
        Constants$root.C_POINTER$LAYOUT.withName("pfnAllocate"),
        Constants$root.C_POINTER$LAYOUT.withName("pfnFree"),
        MemoryLayout.unionLayout(
            Constants$root.C_POINTER$LAYOUT.withName("pAutoHandle"),
            Constants$root.C_POINTER$LAYOUT.withName("pPrimitiveHandle"),
            Constants$root.C_POINTER$LAYOUT.withName("pGenericBindingInfo")
        ).withName("IMPLICIT_HANDLE_INFO"),
        Constants$root.C_POINTER$LAYOUT.withName("apfnNdrRundownRoutines"),
        Constants$root.C_POINTER$LAYOUT.withName("aGenericBindingRoutinePairs"),
        Constants$root.C_POINTER$LAYOUT.withName("apfnExprEval"),
        Constants$root.C_POINTER$LAYOUT.withName("aXmitQuintuple"),
        Constants$root.C_POINTER$LAYOUT.withName("pFormatTypes"),
        Constants$root.C_LONG$LAYOUT.withName("fCheckBounds"),
        Constants$root.C_LONG$LAYOUT.withName("Version"),
        Constants$root.C_POINTER$LAYOUT.withName("pMallocFreeStruct"),
        Constants$root.C_LONG$LAYOUT.withName("MIDLVersion"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("CommFaultOffsets"),
        Constants$root.C_POINTER$LAYOUT.withName("aUserMarshalQuadruple"),
        Constants$root.C_POINTER$LAYOUT.withName("NotifyRoutineTable"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("mFlags"),
        Constants$root.C_POINTER$LAYOUT.withName("CsRoutineTables"),
        Constants$root.C_POINTER$LAYOUT.withName("ProxyServerInfo"),
        Constants$root.C_POINTER$LAYOUT.withName("pExprInfo")
    ).withName("_MIDL_STUB_DESC");
    public static MemoryLayout $LAYOUT() {
        return _MIDL_STUB_DESC.$struct$LAYOUT;
    }
    static final VarHandle RpcInterfaceInformation$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("RpcInterfaceInformation"));
    public static VarHandle RpcInterfaceInformation$VH() {
        return _MIDL_STUB_DESC.RpcInterfaceInformation$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* RpcInterfaceInformation;
     * }
     */
    public static MemorySegment RpcInterfaceInformation$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_MIDL_STUB_DESC.RpcInterfaceInformation$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* RpcInterfaceInformation;
     * }
     */
    public static void RpcInterfaceInformation$set(MemorySegment seg, MemorySegment x) {
        _MIDL_STUB_DESC.RpcInterfaceInformation$VH.set(seg, x);
    }
    public static MemorySegment RpcInterfaceInformation$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_MIDL_STUB_DESC.RpcInterfaceInformation$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void RpcInterfaceInformation$set(MemorySegment seg, long index, MemorySegment x) {
        _MIDL_STUB_DESC.RpcInterfaceInformation$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final FunctionDescriptor pfnAllocate$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final FunctionDescriptor pfnAllocate_UP$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final MethodHandle pfnAllocate_UP$MH = RuntimeHelper.upcallHandle(pfnAllocate.class, "apply", _MIDL_STUB_DESC.pfnAllocate_UP$FUNC);
    static final FunctionDescriptor pfnAllocate_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final MethodHandle pfnAllocate_DOWN$MH = RuntimeHelper.downcallHandle(
        _MIDL_STUB_DESC.pfnAllocate_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void* (*pfnAllocate)(size_t);
     * }
     */
    public interface pfnAllocate {

        java.lang.foreign.MemorySegment apply(long Size);
        static MemorySegment allocate(pfnAllocate fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_MIDL_STUB_DESC.pfnAllocate_UP$MH, fi, _MIDL_STUB_DESC.pfnAllocate$FUNC, scope);
        }
        static pfnAllocate ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (long _Size) -> {
                try {
                    return (java.lang.foreign.MemorySegment)_MIDL_STUB_DESC.pfnAllocate_DOWN$MH.invokeExact(symbol, _Size);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle pfnAllocate$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pfnAllocate"));
    public static VarHandle pfnAllocate$VH() {
        return _MIDL_STUB_DESC.pfnAllocate$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* (*pfnAllocate)(size_t);
     * }
     */
    public static MemorySegment pfnAllocate$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_MIDL_STUB_DESC.pfnAllocate$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* (*pfnAllocate)(size_t);
     * }
     */
    public static void pfnAllocate$set(MemorySegment seg, MemorySegment x) {
        _MIDL_STUB_DESC.pfnAllocate$VH.set(seg, x);
    }
    public static MemorySegment pfnAllocate$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_MIDL_STUB_DESC.pfnAllocate$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pfnAllocate$set(MemorySegment seg, long index, MemorySegment x) {
        _MIDL_STUB_DESC.pfnAllocate$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static pfnAllocate pfnAllocate(MemorySegment segment, SegmentScope scope) {
        return pfnAllocate.ofAddress(pfnAllocate$get(segment), scope);
    }
    static final FunctionDescriptor pfnFree$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor pfnFree_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle pfnFree_UP$MH = RuntimeHelper.upcallHandle(pfnFree.class, "apply", _MIDL_STUB_DESC.pfnFree_UP$FUNC);
    static final FunctionDescriptor pfnFree_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle pfnFree_DOWN$MH = RuntimeHelper.downcallHandle(
        _MIDL_STUB_DESC.pfnFree_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*pfnFree)(void*);
     * }
     */
    public interface pfnFree {

        void apply(java.lang.foreign.MemorySegment pParameter);
        static MemorySegment allocate(pfnFree fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_MIDL_STUB_DESC.pfnFree_UP$MH, fi, _MIDL_STUB_DESC.pfnFree$FUNC, scope);
        }
        static pfnFree ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _pParameter) -> {
                try {
                    _MIDL_STUB_DESC.pfnFree_DOWN$MH.invokeExact(symbol, _pParameter);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle pfnFree$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pfnFree"));
    public static VarHandle pfnFree$VH() {
        return _MIDL_STUB_DESC.pfnFree$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*pfnFree)(void*);
     * }
     */
    public static MemorySegment pfnFree$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_MIDL_STUB_DESC.pfnFree$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*pfnFree)(void*);
     * }
     */
    public static void pfnFree$set(MemorySegment seg, MemorySegment x) {
        _MIDL_STUB_DESC.pfnFree$VH.set(seg, x);
    }
    public static MemorySegment pfnFree$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_MIDL_STUB_DESC.pfnFree$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pfnFree$set(MemorySegment seg, long index, MemorySegment x) {
        _MIDL_STUB_DESC.pfnFree$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static pfnFree pfnFree(MemorySegment segment, SegmentScope scope) {
        return pfnFree.ofAddress(pfnFree$get(segment), scope);
    }
    /**
     * {@snippet :
     * union {
     *     handle_t* pAutoHandle;
     *     handle_t* pPrimitiveHandle;
     *     PGENERIC_BINDING_INFO pGenericBindingInfo;
     * };
     * }
     */
    public static final class IMPLICIT_HANDLE_INFO {

        // Suppresses default constructor, ensuring non-instantiability.
        private IMPLICIT_HANDLE_INFO() {}
        static final UnionLayout IMPLICIT_HANDLE_INFO$union$LAYOUT = MemoryLayout.unionLayout(
            Constants$root.C_POINTER$LAYOUT.withName("pAutoHandle"),
            Constants$root.C_POINTER$LAYOUT.withName("pPrimitiveHandle"),
            Constants$root.C_POINTER$LAYOUT.withName("pGenericBindingInfo")
        );
        public static MemoryLayout $LAYOUT() {
            return IMPLICIT_HANDLE_INFO.IMPLICIT_HANDLE_INFO$union$LAYOUT;
        }
        static final VarHandle pAutoHandle$VH = IMPLICIT_HANDLE_INFO$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pAutoHandle"));
        public static VarHandle pAutoHandle$VH() {
            return IMPLICIT_HANDLE_INFO.pAutoHandle$VH;
        }
        /**
         * Getter for field:
         * {@snippet :
         * handle_t* pAutoHandle;
         * }
         */
        public static MemorySegment pAutoHandle$get(MemorySegment seg) {
            return (java.lang.foreign.MemorySegment)IMPLICIT_HANDLE_INFO.pAutoHandle$VH.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * handle_t* pAutoHandle;
         * }
         */
        public static void pAutoHandle$set(MemorySegment seg, MemorySegment x) {
            IMPLICIT_HANDLE_INFO.pAutoHandle$VH.set(seg, x);
        }
        public static MemorySegment pAutoHandle$get(MemorySegment seg, long index) {
            return (java.lang.foreign.MemorySegment)IMPLICIT_HANDLE_INFO.pAutoHandle$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void pAutoHandle$set(MemorySegment seg, long index, MemorySegment x) {
            IMPLICIT_HANDLE_INFO.pAutoHandle$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle pPrimitiveHandle$VH = IMPLICIT_HANDLE_INFO$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pPrimitiveHandle"));
        public static VarHandle pPrimitiveHandle$VH() {
            return IMPLICIT_HANDLE_INFO.pPrimitiveHandle$VH;
        }
        /**
         * Getter for field:
         * {@snippet :
         * handle_t* pPrimitiveHandle;
         * }
         */
        public static MemorySegment pPrimitiveHandle$get(MemorySegment seg) {
            return (java.lang.foreign.MemorySegment)IMPLICIT_HANDLE_INFO.pPrimitiveHandle$VH.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * handle_t* pPrimitiveHandle;
         * }
         */
        public static void pPrimitiveHandle$set(MemorySegment seg, MemorySegment x) {
            IMPLICIT_HANDLE_INFO.pPrimitiveHandle$VH.set(seg, x);
        }
        public static MemorySegment pPrimitiveHandle$get(MemorySegment seg, long index) {
            return (java.lang.foreign.MemorySegment)IMPLICIT_HANDLE_INFO.pPrimitiveHandle$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void pPrimitiveHandle$set(MemorySegment seg, long index, MemorySegment x) {
            IMPLICIT_HANDLE_INFO.pPrimitiveHandle$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle pGenericBindingInfo$VH = IMPLICIT_HANDLE_INFO$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pGenericBindingInfo"));
        public static VarHandle pGenericBindingInfo$VH() {
            return IMPLICIT_HANDLE_INFO.pGenericBindingInfo$VH;
        }
        /**
         * Getter for field:
         * {@snippet :
         * PGENERIC_BINDING_INFO pGenericBindingInfo;
         * }
         */
        public static MemorySegment pGenericBindingInfo$get(MemorySegment seg) {
            return (java.lang.foreign.MemorySegment)IMPLICIT_HANDLE_INFO.pGenericBindingInfo$VH.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * PGENERIC_BINDING_INFO pGenericBindingInfo;
         * }
         */
        public static void pGenericBindingInfo$set(MemorySegment seg, MemorySegment x) {
            IMPLICIT_HANDLE_INFO.pGenericBindingInfo$VH.set(seg, x);
        }
        public static MemorySegment pGenericBindingInfo$get(MemorySegment seg, long index) {
            return (java.lang.foreign.MemorySegment)IMPLICIT_HANDLE_INFO.pGenericBindingInfo$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void pGenericBindingInfo$set(MemorySegment seg, long index, MemorySegment x) {
            IMPLICIT_HANDLE_INFO.pGenericBindingInfo$VH.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
    }

    public static MemorySegment IMPLICIT_HANDLE_INFO$slice(MemorySegment seg) {
        return seg.asSlice(24, 8);
    }
    static final VarHandle apfnNdrRundownRoutines$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("apfnNdrRundownRoutines"));
    public static VarHandle apfnNdrRundownRoutines$VH() {
        return _MIDL_STUB_DESC.apfnNdrRundownRoutines$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * const NDR_RUNDOWN* apfnNdrRundownRoutines;
     * }
     */
    public static MemorySegment apfnNdrRundownRoutines$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_MIDL_STUB_DESC.apfnNdrRundownRoutines$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * const NDR_RUNDOWN* apfnNdrRundownRoutines;
     * }
     */
    public static void apfnNdrRundownRoutines$set(MemorySegment seg, MemorySegment x) {
        _MIDL_STUB_DESC.apfnNdrRundownRoutines$VH.set(seg, x);
    }
    public static MemorySegment apfnNdrRundownRoutines$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_MIDL_STUB_DESC.apfnNdrRundownRoutines$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void apfnNdrRundownRoutines$set(MemorySegment seg, long index, MemorySegment x) {
        _MIDL_STUB_DESC.apfnNdrRundownRoutines$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle aGenericBindingRoutinePairs$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("aGenericBindingRoutinePairs"));
    public static VarHandle aGenericBindingRoutinePairs$VH() {
        return _MIDL_STUB_DESC.aGenericBindingRoutinePairs$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * const GENERIC_BINDING_ROUTINE_PAIR* aGenericBindingRoutinePairs;
     * }
     */
    public static MemorySegment aGenericBindingRoutinePairs$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_MIDL_STUB_DESC.aGenericBindingRoutinePairs$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * const GENERIC_BINDING_ROUTINE_PAIR* aGenericBindingRoutinePairs;
     * }
     */
    public static void aGenericBindingRoutinePairs$set(MemorySegment seg, MemorySegment x) {
        _MIDL_STUB_DESC.aGenericBindingRoutinePairs$VH.set(seg, x);
    }
    public static MemorySegment aGenericBindingRoutinePairs$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_MIDL_STUB_DESC.aGenericBindingRoutinePairs$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void aGenericBindingRoutinePairs$set(MemorySegment seg, long index, MemorySegment x) {
        _MIDL_STUB_DESC.aGenericBindingRoutinePairs$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle apfnExprEval$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("apfnExprEval"));
    public static VarHandle apfnExprEval$VH() {
        return _MIDL_STUB_DESC.apfnExprEval$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * const EXPR_EVAL* apfnExprEval;
     * }
     */
    public static MemorySegment apfnExprEval$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_MIDL_STUB_DESC.apfnExprEval$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * const EXPR_EVAL* apfnExprEval;
     * }
     */
    public static void apfnExprEval$set(MemorySegment seg, MemorySegment x) {
        _MIDL_STUB_DESC.apfnExprEval$VH.set(seg, x);
    }
    public static MemorySegment apfnExprEval$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_MIDL_STUB_DESC.apfnExprEval$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void apfnExprEval$set(MemorySegment seg, long index, MemorySegment x) {
        _MIDL_STUB_DESC.apfnExprEval$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle aXmitQuintuple$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("aXmitQuintuple"));
    public static VarHandle aXmitQuintuple$VH() {
        return _MIDL_STUB_DESC.aXmitQuintuple$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * const XMIT_ROUTINE_QUINTUPLE* aXmitQuintuple;
     * }
     */
    public static MemorySegment aXmitQuintuple$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_MIDL_STUB_DESC.aXmitQuintuple$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * const XMIT_ROUTINE_QUINTUPLE* aXmitQuintuple;
     * }
     */
    public static void aXmitQuintuple$set(MemorySegment seg, MemorySegment x) {
        _MIDL_STUB_DESC.aXmitQuintuple$VH.set(seg, x);
    }
    public static MemorySegment aXmitQuintuple$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_MIDL_STUB_DESC.aXmitQuintuple$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void aXmitQuintuple$set(MemorySegment seg, long index, MemorySegment x) {
        _MIDL_STUB_DESC.aXmitQuintuple$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pFormatTypes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pFormatTypes"));
    public static VarHandle pFormatTypes$VH() {
        return _MIDL_STUB_DESC.pFormatTypes$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char* pFormatTypes;
     * }
     */
    public static MemorySegment pFormatTypes$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_MIDL_STUB_DESC.pFormatTypes$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char* pFormatTypes;
     * }
     */
    public static void pFormatTypes$set(MemorySegment seg, MemorySegment x) {
        _MIDL_STUB_DESC.pFormatTypes$VH.set(seg, x);
    }
    public static MemorySegment pFormatTypes$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_MIDL_STUB_DESC.pFormatTypes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pFormatTypes$set(MemorySegment seg, long index, MemorySegment x) {
        _MIDL_STUB_DESC.pFormatTypes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle fCheckBounds$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("fCheckBounds"));
    public static VarHandle fCheckBounds$VH() {
        return _MIDL_STUB_DESC.fCheckBounds$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int fCheckBounds;
     * }
     */
    public static int fCheckBounds$get(MemorySegment seg) {
        return (int)_MIDL_STUB_DESC.fCheckBounds$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int fCheckBounds;
     * }
     */
    public static void fCheckBounds$set(MemorySegment seg, int x) {
        _MIDL_STUB_DESC.fCheckBounds$VH.set(seg, x);
    }
    public static int fCheckBounds$get(MemorySegment seg, long index) {
        return (int)_MIDL_STUB_DESC.fCheckBounds$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void fCheckBounds$set(MemorySegment seg, long index, int x) {
        _MIDL_STUB_DESC.fCheckBounds$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Version$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Version"));
    public static VarHandle Version$VH() {
        return _MIDL_STUB_DESC.Version$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long Version;
     * }
     */
    public static int Version$get(MemorySegment seg) {
        return (int)_MIDL_STUB_DESC.Version$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long Version;
     * }
     */
    public static void Version$set(MemorySegment seg, int x) {
        _MIDL_STUB_DESC.Version$VH.set(seg, x);
    }
    public static int Version$get(MemorySegment seg, long index) {
        return (int)_MIDL_STUB_DESC.Version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Version$set(MemorySegment seg, long index, int x) {
        _MIDL_STUB_DESC.Version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pMallocFreeStruct$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pMallocFreeStruct"));
    public static VarHandle pMallocFreeStruct$VH() {
        return _MIDL_STUB_DESC.pMallocFreeStruct$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * MALLOC_FREE_STRUCT* pMallocFreeStruct;
     * }
     */
    public static MemorySegment pMallocFreeStruct$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_MIDL_STUB_DESC.pMallocFreeStruct$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * MALLOC_FREE_STRUCT* pMallocFreeStruct;
     * }
     */
    public static void pMallocFreeStruct$set(MemorySegment seg, MemorySegment x) {
        _MIDL_STUB_DESC.pMallocFreeStruct$VH.set(seg, x);
    }
    public static MemorySegment pMallocFreeStruct$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_MIDL_STUB_DESC.pMallocFreeStruct$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pMallocFreeStruct$set(MemorySegment seg, long index, MemorySegment x) {
        _MIDL_STUB_DESC.pMallocFreeStruct$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MIDLVersion$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("MIDLVersion"));
    public static VarHandle MIDLVersion$VH() {
        return _MIDL_STUB_DESC.MIDLVersion$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long MIDLVersion;
     * }
     */
    public static int MIDLVersion$get(MemorySegment seg) {
        return (int)_MIDL_STUB_DESC.MIDLVersion$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long MIDLVersion;
     * }
     */
    public static void MIDLVersion$set(MemorySegment seg, int x) {
        _MIDL_STUB_DESC.MIDLVersion$VH.set(seg, x);
    }
    public static int MIDLVersion$get(MemorySegment seg, long index) {
        return (int)_MIDL_STUB_DESC.MIDLVersion$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MIDLVersion$set(MemorySegment seg, long index, int x) {
        _MIDL_STUB_DESC.MIDLVersion$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle CommFaultOffsets$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("CommFaultOffsets"));
    public static VarHandle CommFaultOffsets$VH() {
        return _MIDL_STUB_DESC.CommFaultOffsets$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * const COMM_FAULT_OFFSETS* CommFaultOffsets;
     * }
     */
    public static MemorySegment CommFaultOffsets$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_MIDL_STUB_DESC.CommFaultOffsets$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * const COMM_FAULT_OFFSETS* CommFaultOffsets;
     * }
     */
    public static void CommFaultOffsets$set(MemorySegment seg, MemorySegment x) {
        _MIDL_STUB_DESC.CommFaultOffsets$VH.set(seg, x);
    }
    public static MemorySegment CommFaultOffsets$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_MIDL_STUB_DESC.CommFaultOffsets$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CommFaultOffsets$set(MemorySegment seg, long index, MemorySegment x) {
        _MIDL_STUB_DESC.CommFaultOffsets$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle aUserMarshalQuadruple$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("aUserMarshalQuadruple"));
    public static VarHandle aUserMarshalQuadruple$VH() {
        return _MIDL_STUB_DESC.aUserMarshalQuadruple$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * const USER_MARSHAL_ROUTINE_QUADRUPLE* aUserMarshalQuadruple;
     * }
     */
    public static MemorySegment aUserMarshalQuadruple$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_MIDL_STUB_DESC.aUserMarshalQuadruple$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * const USER_MARSHAL_ROUTINE_QUADRUPLE* aUserMarshalQuadruple;
     * }
     */
    public static void aUserMarshalQuadruple$set(MemorySegment seg, MemorySegment x) {
        _MIDL_STUB_DESC.aUserMarshalQuadruple$VH.set(seg, x);
    }
    public static MemorySegment aUserMarshalQuadruple$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_MIDL_STUB_DESC.aUserMarshalQuadruple$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void aUserMarshalQuadruple$set(MemorySegment seg, long index, MemorySegment x) {
        _MIDL_STUB_DESC.aUserMarshalQuadruple$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle NotifyRoutineTable$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("NotifyRoutineTable"));
    public static VarHandle NotifyRoutineTable$VH() {
        return _MIDL_STUB_DESC.NotifyRoutineTable$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * const NDR_NOTIFY_ROUTINE* NotifyRoutineTable;
     * }
     */
    public static MemorySegment NotifyRoutineTable$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_MIDL_STUB_DESC.NotifyRoutineTable$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * const NDR_NOTIFY_ROUTINE* NotifyRoutineTable;
     * }
     */
    public static void NotifyRoutineTable$set(MemorySegment seg, MemorySegment x) {
        _MIDL_STUB_DESC.NotifyRoutineTable$VH.set(seg, x);
    }
    public static MemorySegment NotifyRoutineTable$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_MIDL_STUB_DESC.NotifyRoutineTable$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void NotifyRoutineTable$set(MemorySegment seg, long index, MemorySegment x) {
        _MIDL_STUB_DESC.NotifyRoutineTable$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle mFlags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("mFlags"));
    public static VarHandle mFlags$VH() {
        return _MIDL_STUB_DESC.mFlags$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG_PTR mFlags;
     * }
     */
    public static long mFlags$get(MemorySegment seg) {
        return (long)_MIDL_STUB_DESC.mFlags$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG_PTR mFlags;
     * }
     */
    public static void mFlags$set(MemorySegment seg, long x) {
        _MIDL_STUB_DESC.mFlags$VH.set(seg, x);
    }
    public static long mFlags$get(MemorySegment seg, long index) {
        return (long)_MIDL_STUB_DESC.mFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void mFlags$set(MemorySegment seg, long index, long x) {
        _MIDL_STUB_DESC.mFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle CsRoutineTables$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("CsRoutineTables"));
    public static VarHandle CsRoutineTables$VH() {
        return _MIDL_STUB_DESC.CsRoutineTables$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * const NDR_CS_ROUTINES* CsRoutineTables;
     * }
     */
    public static MemorySegment CsRoutineTables$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_MIDL_STUB_DESC.CsRoutineTables$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * const NDR_CS_ROUTINES* CsRoutineTables;
     * }
     */
    public static void CsRoutineTables$set(MemorySegment seg, MemorySegment x) {
        _MIDL_STUB_DESC.CsRoutineTables$VH.set(seg, x);
    }
    public static MemorySegment CsRoutineTables$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_MIDL_STUB_DESC.CsRoutineTables$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CsRoutineTables$set(MemorySegment seg, long index, MemorySegment x) {
        _MIDL_STUB_DESC.CsRoutineTables$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ProxyServerInfo$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ProxyServerInfo"));
    public static VarHandle ProxyServerInfo$VH() {
        return _MIDL_STUB_DESC.ProxyServerInfo$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* ProxyServerInfo;
     * }
     */
    public static MemorySegment ProxyServerInfo$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_MIDL_STUB_DESC.ProxyServerInfo$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* ProxyServerInfo;
     * }
     */
    public static void ProxyServerInfo$set(MemorySegment seg, MemorySegment x) {
        _MIDL_STUB_DESC.ProxyServerInfo$VH.set(seg, x);
    }
    public static MemorySegment ProxyServerInfo$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_MIDL_STUB_DESC.ProxyServerInfo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ProxyServerInfo$set(MemorySegment seg, long index, MemorySegment x) {
        _MIDL_STUB_DESC.ProxyServerInfo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pExprInfo$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pExprInfo"));
    public static VarHandle pExprInfo$VH() {
        return _MIDL_STUB_DESC.pExprInfo$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * const NDR_EXPR_DESC* pExprInfo;
     * }
     */
    public static MemorySegment pExprInfo$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_MIDL_STUB_DESC.pExprInfo$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * const NDR_EXPR_DESC* pExprInfo;
     * }
     */
    public static void pExprInfo$set(MemorySegment seg, MemorySegment x) {
        _MIDL_STUB_DESC.pExprInfo$VH.set(seg, x);
    }
    public static MemorySegment pExprInfo$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_MIDL_STUB_DESC.pExprInfo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pExprInfo$set(MemorySegment seg, long index, MemorySegment x) {
        _MIDL_STUB_DESC.pExprInfo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


