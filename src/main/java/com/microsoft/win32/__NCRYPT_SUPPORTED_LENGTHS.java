// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct __NCRYPT_SUPPORTED_LENGTHS {
 *     DWORD dwMinLength;
 *     DWORD dwMaxLength;
 *     DWORD dwIncrement;
 *     DWORD dwDefaultLength;
 * };
 * }
 */
public class __NCRYPT_SUPPORTED_LENGTHS {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("dwMinLength"),
        Constants$root.C_LONG$LAYOUT.withName("dwMaxLength"),
        Constants$root.C_LONG$LAYOUT.withName("dwIncrement"),
        Constants$root.C_LONG$LAYOUT.withName("dwDefaultLength")
    ).withName("__NCRYPT_SUPPORTED_LENGTHS");
    public static MemoryLayout $LAYOUT() {
        return __NCRYPT_SUPPORTED_LENGTHS.$struct$LAYOUT;
    }
    static final VarHandle dwMinLength$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwMinLength"));
    public static VarHandle dwMinLength$VH() {
        return __NCRYPT_SUPPORTED_LENGTHS.dwMinLength$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwMinLength;
     * }
     */
    public static int dwMinLength$get(MemorySegment seg) {
        return (int)__NCRYPT_SUPPORTED_LENGTHS.dwMinLength$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwMinLength;
     * }
     */
    public static void dwMinLength$set(MemorySegment seg, int x) {
        __NCRYPT_SUPPORTED_LENGTHS.dwMinLength$VH.set(seg, x);
    }
    public static int dwMinLength$get(MemorySegment seg, long index) {
        return (int)__NCRYPT_SUPPORTED_LENGTHS.dwMinLength$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwMinLength$set(MemorySegment seg, long index, int x) {
        __NCRYPT_SUPPORTED_LENGTHS.dwMinLength$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwMaxLength$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwMaxLength"));
    public static VarHandle dwMaxLength$VH() {
        return __NCRYPT_SUPPORTED_LENGTHS.dwMaxLength$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwMaxLength;
     * }
     */
    public static int dwMaxLength$get(MemorySegment seg) {
        return (int)__NCRYPT_SUPPORTED_LENGTHS.dwMaxLength$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwMaxLength;
     * }
     */
    public static void dwMaxLength$set(MemorySegment seg, int x) {
        __NCRYPT_SUPPORTED_LENGTHS.dwMaxLength$VH.set(seg, x);
    }
    public static int dwMaxLength$get(MemorySegment seg, long index) {
        return (int)__NCRYPT_SUPPORTED_LENGTHS.dwMaxLength$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwMaxLength$set(MemorySegment seg, long index, int x) {
        __NCRYPT_SUPPORTED_LENGTHS.dwMaxLength$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwIncrement$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwIncrement"));
    public static VarHandle dwIncrement$VH() {
        return __NCRYPT_SUPPORTED_LENGTHS.dwIncrement$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwIncrement;
     * }
     */
    public static int dwIncrement$get(MemorySegment seg) {
        return (int)__NCRYPT_SUPPORTED_LENGTHS.dwIncrement$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwIncrement;
     * }
     */
    public static void dwIncrement$set(MemorySegment seg, int x) {
        __NCRYPT_SUPPORTED_LENGTHS.dwIncrement$VH.set(seg, x);
    }
    public static int dwIncrement$get(MemorySegment seg, long index) {
        return (int)__NCRYPT_SUPPORTED_LENGTHS.dwIncrement$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwIncrement$set(MemorySegment seg, long index, int x) {
        __NCRYPT_SUPPORTED_LENGTHS.dwIncrement$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwDefaultLength$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwDefaultLength"));
    public static VarHandle dwDefaultLength$VH() {
        return __NCRYPT_SUPPORTED_LENGTHS.dwDefaultLength$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwDefaultLength;
     * }
     */
    public static int dwDefaultLength$get(MemorySegment seg) {
        return (int)__NCRYPT_SUPPORTED_LENGTHS.dwDefaultLength$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwDefaultLength;
     * }
     */
    public static void dwDefaultLength$set(MemorySegment seg, int x) {
        __NCRYPT_SUPPORTED_LENGTHS.dwDefaultLength$VH.set(seg, x);
    }
    public static int dwDefaultLength$get(MemorySegment seg, long index) {
        return (int)__NCRYPT_SUPPORTED_LENGTHS.dwDefaultLength$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwDefaultLength$set(MemorySegment seg, long index, int x) {
        __NCRYPT_SUPPORTED_LENGTHS.dwDefaultLength$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


