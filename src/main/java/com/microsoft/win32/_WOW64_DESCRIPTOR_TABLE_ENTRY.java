// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _WOW64_DESCRIPTOR_TABLE_ENTRY {
 *     DWORD Selector;
 *     WOW64_LDT_ENTRY Descriptor;
 * };
 * }
 */
public class _WOW64_DESCRIPTOR_TABLE_ENTRY {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("Selector"),
        MemoryLayout.structLayout(
            Constants$root.C_SHORT$LAYOUT.withName("LimitLow"),
            Constants$root.C_SHORT$LAYOUT.withName("BaseLow"),
            MemoryLayout.unionLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_CHAR$LAYOUT.withName("BaseMid"),
                    Constants$root.C_CHAR$LAYOUT.withName("Flags1"),
                    Constants$root.C_CHAR$LAYOUT.withName("Flags2"),
                    Constants$root.C_CHAR$LAYOUT.withName("BaseHi")
                ).withName("Bytes"),
                MemoryLayout.structLayout(
                    MemoryLayout.paddingLayout(32)
                ).withName("Bits")
            ).withName("HighWord")
        ).withName("Descriptor")
    ).withName("_WOW64_DESCRIPTOR_TABLE_ENTRY");
    public static MemoryLayout $LAYOUT() {
        return _WOW64_DESCRIPTOR_TABLE_ENTRY.$struct$LAYOUT;
    }
    static final VarHandle Selector$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Selector"));
    public static VarHandle Selector$VH() {
        return _WOW64_DESCRIPTOR_TABLE_ENTRY.Selector$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Selector;
     * }
     */
    public static int Selector$get(MemorySegment seg) {
        return (int)_WOW64_DESCRIPTOR_TABLE_ENTRY.Selector$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Selector;
     * }
     */
    public static void Selector$set(MemorySegment seg, int x) {
        _WOW64_DESCRIPTOR_TABLE_ENTRY.Selector$VH.set(seg, x);
    }
    public static int Selector$get(MemorySegment seg, long index) {
        return (int)_WOW64_DESCRIPTOR_TABLE_ENTRY.Selector$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Selector$set(MemorySegment seg, long index, int x) {
        _WOW64_DESCRIPTOR_TABLE_ENTRY.Selector$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Descriptor$slice(MemorySegment seg) {
        return seg.asSlice(4, 8);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


