// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX {
 *     BYTE EnableIntegrity;
 *     BYTE KeepIntegrityStateUnchanged;
 *     WORD Reserved;
 *     DWORD Flags;
 *     BYTE Version;
 *     BYTE Reserved2[7];
 * };
 * }
 */
public class _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_CHAR$LAYOUT.withName("EnableIntegrity"),
        Constants$root.C_CHAR$LAYOUT.withName("KeepIntegrityStateUnchanged"),
        Constants$root.C_SHORT$LAYOUT.withName("Reserved"),
        Constants$root.C_LONG$LAYOUT.withName("Flags"),
        Constants$root.C_CHAR$LAYOUT.withName("Version"),
        MemoryLayout.sequenceLayout(7, Constants$root.C_CHAR$LAYOUT).withName("Reserved2")
    ).withName("_FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX");
    public static MemoryLayout $LAYOUT() {
        return _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX.$struct$LAYOUT;
    }
    static final VarHandle EnableIntegrity$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("EnableIntegrity"));
    public static VarHandle EnableIntegrity$VH() {
        return _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX.EnableIntegrity$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE EnableIntegrity;
     * }
     */
    public static byte EnableIntegrity$get(MemorySegment seg) {
        return (byte)_FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX.EnableIntegrity$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE EnableIntegrity;
     * }
     */
    public static void EnableIntegrity$set(MemorySegment seg, byte x) {
        _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX.EnableIntegrity$VH.set(seg, x);
    }
    public static byte EnableIntegrity$get(MemorySegment seg, long index) {
        return (byte)_FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX.EnableIntegrity$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void EnableIntegrity$set(MemorySegment seg, long index, byte x) {
        _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX.EnableIntegrity$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle KeepIntegrityStateUnchanged$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("KeepIntegrityStateUnchanged"));
    public static VarHandle KeepIntegrityStateUnchanged$VH() {
        return _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX.KeepIntegrityStateUnchanged$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE KeepIntegrityStateUnchanged;
     * }
     */
    public static byte KeepIntegrityStateUnchanged$get(MemorySegment seg) {
        return (byte)_FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX.KeepIntegrityStateUnchanged$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE KeepIntegrityStateUnchanged;
     * }
     */
    public static void KeepIntegrityStateUnchanged$set(MemorySegment seg, byte x) {
        _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX.KeepIntegrityStateUnchanged$VH.set(seg, x);
    }
    public static byte KeepIntegrityStateUnchanged$get(MemorySegment seg, long index) {
        return (byte)_FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX.KeepIntegrityStateUnchanged$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void KeepIntegrityStateUnchanged$set(MemorySegment seg, long index, byte x) {
        _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX.KeepIntegrityStateUnchanged$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Reserved$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Reserved"));
    public static VarHandle Reserved$VH() {
        return _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX.Reserved$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD Reserved;
     * }
     */
    public static short Reserved$get(MemorySegment seg) {
        return (short)_FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX.Reserved$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD Reserved;
     * }
     */
    public static void Reserved$set(MemorySegment seg, short x) {
        _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX.Reserved$VH.set(seg, x);
    }
    public static short Reserved$get(MemorySegment seg, long index) {
        return (short)_FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX.Reserved$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Reserved$set(MemorySegment seg, long index, short x) {
        _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX.Reserved$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Flags"));
    public static VarHandle Flags$VH() {
        return _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX.Flags$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Flags;
     * }
     */
    public static int Flags$get(MemorySegment seg) {
        return (int)_FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX.Flags$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Flags;
     * }
     */
    public static void Flags$set(MemorySegment seg, int x) {
        _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX.Flags$VH.set(seg, x);
    }
    public static int Flags$get(MemorySegment seg, long index) {
        return (int)_FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX.Flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Flags$set(MemorySegment seg, long index, int x) {
        _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX.Flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Version$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Version"));
    public static VarHandle Version$VH() {
        return _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX.Version$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE Version;
     * }
     */
    public static byte Version$get(MemorySegment seg) {
        return (byte)_FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX.Version$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE Version;
     * }
     */
    public static void Version$set(MemorySegment seg, byte x) {
        _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX.Version$VH.set(seg, x);
    }
    public static byte Version$get(MemorySegment seg, long index) {
        return (byte)_FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX.Version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Version$set(MemorySegment seg, long index, byte x) {
        _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX.Version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Reserved2$slice(MemorySegment seg) {
        return seg.asSlice(9, 7);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


