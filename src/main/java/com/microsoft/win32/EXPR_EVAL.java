// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * void (*EXPR_EVAL)(struct _MIDL_STUB_MESSAGE*);
 * }
 */
public interface EXPR_EVAL {

    void apply(java.lang.foreign.MemorySegment pParameter);
    static MemorySegment allocate(EXPR_EVAL fi, SegmentScope scope) {
        return RuntimeHelper.upcallStub(constants$809.EXPR_EVAL_UP$MH, fi, constants$809.EXPR_EVAL$FUNC, scope);
    }
    static EXPR_EVAL ofAddress(MemorySegment addr, SegmentScope scope) {
        MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
        return (java.lang.foreign.MemorySegment _pParameter) -> {
            try {
                constants$810.EXPR_EVAL_DOWN$MH.invokeExact(symbol, _pParameter);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


