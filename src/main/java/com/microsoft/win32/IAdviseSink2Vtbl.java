// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IAdviseSink2Vtbl {
 *     HRESULT (*QueryInterface)(IAdviseSink2*,const IID*,void**);
 *     ULONG (*AddRef)(IAdviseSink2*);
 *     ULONG (*Release)(IAdviseSink2*);
 *     void (*OnDataChange)(IAdviseSink2*,FORMATETC*,STGMEDIUM*);
 *     void (*OnViewChange)(IAdviseSink2*,DWORD,LONG);
 *     void (*OnRename)(IAdviseSink2*,IMoniker*);
 *     void (*OnSave)(IAdviseSink2*);
 *     void (*OnClose)(IAdviseSink2*);
 *     void (*OnLinkSrcChange)(IAdviseSink2*,IMoniker*);
 * };
 * }
 */
public class IAdviseSink2Vtbl {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("OnDataChange"),
        Constants$root.C_POINTER$LAYOUT.withName("OnViewChange"),
        Constants$root.C_POINTER$LAYOUT.withName("OnRename"),
        Constants$root.C_POINTER$LAYOUT.withName("OnSave"),
        Constants$root.C_POINTER$LAYOUT.withName("OnClose"),
        Constants$root.C_POINTER$LAYOUT.withName("OnLinkSrcChange")
    ).withName("IAdviseSink2Vtbl");
    public static MemoryLayout $LAYOUT() {
        return IAdviseSink2Vtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor QueryInterface_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_UP$MH = RuntimeHelper.upcallHandle(QueryInterface.class, "apply", IAdviseSink2Vtbl.QueryInterface_UP$FUNC);
    static final FunctionDescriptor QueryInterface_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_DOWN$MH = RuntimeHelper.downcallHandle(
        IAdviseSink2Vtbl.QueryInterface_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(IAdviseSink2*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IAdviseSink2Vtbl.QueryInterface_UP$MH, fi, IAdviseSink2Vtbl.QueryInterface$FUNC, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IAdviseSink2Vtbl.QueryInterface_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return IAdviseSink2Vtbl.QueryInterface$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IAdviseSink2*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IAdviseSink2Vtbl.QueryInterface$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IAdviseSink2*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        IAdviseSink2Vtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IAdviseSink2Vtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        IAdviseSink2Vtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, SegmentScope scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor AddRef_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_UP$MH = RuntimeHelper.upcallHandle(AddRef.class, "apply", IAdviseSink2Vtbl.AddRef_UP$FUNC);
    static final FunctionDescriptor AddRef_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_DOWN$MH = RuntimeHelper.downcallHandle(
        IAdviseSink2Vtbl.AddRef_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*AddRef)(IAdviseSink2*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IAdviseSink2Vtbl.AddRef_UP$MH, fi, IAdviseSink2Vtbl.AddRef$FUNC, scope);
        }
        static AddRef ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IAdviseSink2Vtbl.AddRef_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return IAdviseSink2Vtbl.AddRef$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(IAdviseSink2*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IAdviseSink2Vtbl.AddRef$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(IAdviseSink2*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        IAdviseSink2Vtbl.AddRef$VH.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IAdviseSink2Vtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        IAdviseSink2Vtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, SegmentScope scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Release_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_UP$MH = RuntimeHelper.upcallHandle(Release.class, "apply", IAdviseSink2Vtbl.Release_UP$FUNC);
    static final FunctionDescriptor Release_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_DOWN$MH = RuntimeHelper.downcallHandle(
        IAdviseSink2Vtbl.Release_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*Release)(IAdviseSink2*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IAdviseSink2Vtbl.Release_UP$MH, fi, IAdviseSink2Vtbl.Release$FUNC, scope);
        }
        static Release ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IAdviseSink2Vtbl.Release_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return IAdviseSink2Vtbl.Release$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(IAdviseSink2*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IAdviseSink2Vtbl.Release$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(IAdviseSink2*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        IAdviseSink2Vtbl.Release$VH.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IAdviseSink2Vtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        IAdviseSink2Vtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, SegmentScope scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    static final FunctionDescriptor OnDataChange$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor OnDataChange_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle OnDataChange_UP$MH = RuntimeHelper.upcallHandle(OnDataChange.class, "apply", IAdviseSink2Vtbl.OnDataChange_UP$FUNC);
    static final FunctionDescriptor OnDataChange_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle OnDataChange_DOWN$MH = RuntimeHelper.downcallHandle(
        IAdviseSink2Vtbl.OnDataChange_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*OnDataChange)(IAdviseSink2*,FORMATETC*,STGMEDIUM*);
     * }
     */
    public interface OnDataChange {

        void apply(java.lang.foreign.MemorySegment pszObjectOid, java.lang.foreign.MemorySegment pObject, java.lang.foreign.MemorySegment pvFreeContext);
        static MemorySegment allocate(OnDataChange fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IAdviseSink2Vtbl.OnDataChange_UP$MH, fi, IAdviseSink2Vtbl.OnDataChange$FUNC, scope);
        }
        static OnDataChange ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _pszObjectOid, java.lang.foreign.MemorySegment _pObject, java.lang.foreign.MemorySegment _pvFreeContext) -> {
                try {
                    IAdviseSink2Vtbl.OnDataChange_DOWN$MH.invokeExact(symbol, _pszObjectOid, _pObject, _pvFreeContext);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle OnDataChange$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("OnDataChange"));
    public static VarHandle OnDataChange$VH() {
        return IAdviseSink2Vtbl.OnDataChange$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*OnDataChange)(IAdviseSink2*,FORMATETC*,STGMEDIUM*);
     * }
     */
    public static MemorySegment OnDataChange$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IAdviseSink2Vtbl.OnDataChange$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*OnDataChange)(IAdviseSink2*,FORMATETC*,STGMEDIUM*);
     * }
     */
    public static void OnDataChange$set(MemorySegment seg, MemorySegment x) {
        IAdviseSink2Vtbl.OnDataChange$VH.set(seg, x);
    }
    public static MemorySegment OnDataChange$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IAdviseSink2Vtbl.OnDataChange$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void OnDataChange$set(MemorySegment seg, long index, MemorySegment x) {
        IAdviseSink2Vtbl.OnDataChange$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static OnDataChange OnDataChange(MemorySegment segment, SegmentScope scope) {
        return OnDataChange.ofAddress(OnDataChange$get(segment), scope);
    }
    static final FunctionDescriptor OnViewChange$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor OnViewChange_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle OnViewChange_UP$MH = RuntimeHelper.upcallHandle(OnViewChange.class, "apply", IAdviseSink2Vtbl.OnViewChange_UP$FUNC);
    static final FunctionDescriptor OnViewChange_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle OnViewChange_DOWN$MH = RuntimeHelper.downcallHandle(
        IAdviseSink2Vtbl.OnViewChange_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*OnViewChange)(IAdviseSink2*,DWORD,LONG);
     * }
     */
    public interface OnViewChange {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2);
        static MemorySegment allocate(OnViewChange fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IAdviseSink2Vtbl.OnViewChange_UP$MH, fi, IAdviseSink2Vtbl.OnViewChange$FUNC, scope);
        }
        static OnViewChange ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2) -> {
                try {
                    IAdviseSink2Vtbl.OnViewChange_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle OnViewChange$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("OnViewChange"));
    public static VarHandle OnViewChange$VH() {
        return IAdviseSink2Vtbl.OnViewChange$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*OnViewChange)(IAdviseSink2*,DWORD,LONG);
     * }
     */
    public static MemorySegment OnViewChange$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IAdviseSink2Vtbl.OnViewChange$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*OnViewChange)(IAdviseSink2*,DWORD,LONG);
     * }
     */
    public static void OnViewChange$set(MemorySegment seg, MemorySegment x) {
        IAdviseSink2Vtbl.OnViewChange$VH.set(seg, x);
    }
    public static MemorySegment OnViewChange$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IAdviseSink2Vtbl.OnViewChange$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void OnViewChange$set(MemorySegment seg, long index, MemorySegment x) {
        IAdviseSink2Vtbl.OnViewChange$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static OnViewChange OnViewChange(MemorySegment segment, SegmentScope scope) {
        return OnViewChange.ofAddress(OnViewChange$get(segment), scope);
    }
    static final FunctionDescriptor OnRename$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor OnRename_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle OnRename_UP$MH = RuntimeHelper.upcallHandle(OnRename.class, "apply", IAdviseSink2Vtbl.OnRename_UP$FUNC);
    static final FunctionDescriptor OnRename_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle OnRename_DOWN$MH = RuntimeHelper.downcallHandle(
        IAdviseSink2Vtbl.OnRename_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*OnRename)(IAdviseSink2*,IMoniker*);
     * }
     */
    public interface OnRename {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(OnRename fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IAdviseSink2Vtbl.OnRename_UP$MH, fi, IAdviseSink2Vtbl.OnRename$FUNC, scope);
        }
        static OnRename ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    IAdviseSink2Vtbl.OnRename_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle OnRename$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("OnRename"));
    public static VarHandle OnRename$VH() {
        return IAdviseSink2Vtbl.OnRename$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*OnRename)(IAdviseSink2*,IMoniker*);
     * }
     */
    public static MemorySegment OnRename$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IAdviseSink2Vtbl.OnRename$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*OnRename)(IAdviseSink2*,IMoniker*);
     * }
     */
    public static void OnRename$set(MemorySegment seg, MemorySegment x) {
        IAdviseSink2Vtbl.OnRename$VH.set(seg, x);
    }
    public static MemorySegment OnRename$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IAdviseSink2Vtbl.OnRename$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void OnRename$set(MemorySegment seg, long index, MemorySegment x) {
        IAdviseSink2Vtbl.OnRename$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static OnRename OnRename(MemorySegment segment, SegmentScope scope) {
        return OnRename.ofAddress(OnRename$get(segment), scope);
    }
    static final FunctionDescriptor OnSave$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor OnSave_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle OnSave_UP$MH = RuntimeHelper.upcallHandle(OnSave.class, "apply", IAdviseSink2Vtbl.OnSave_UP$FUNC);
    static final FunctionDescriptor OnSave_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle OnSave_DOWN$MH = RuntimeHelper.downcallHandle(
        IAdviseSink2Vtbl.OnSave_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*OnSave)(IAdviseSink2*);
     * }
     */
    public interface OnSave {

        void apply(java.lang.foreign.MemorySegment pParameter);
        static MemorySegment allocate(OnSave fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IAdviseSink2Vtbl.OnSave_UP$MH, fi, IAdviseSink2Vtbl.OnSave$FUNC, scope);
        }
        static OnSave ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _pParameter) -> {
                try {
                    IAdviseSink2Vtbl.OnSave_DOWN$MH.invokeExact(symbol, _pParameter);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle OnSave$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("OnSave"));
    public static VarHandle OnSave$VH() {
        return IAdviseSink2Vtbl.OnSave$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*OnSave)(IAdviseSink2*);
     * }
     */
    public static MemorySegment OnSave$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IAdviseSink2Vtbl.OnSave$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*OnSave)(IAdviseSink2*);
     * }
     */
    public static void OnSave$set(MemorySegment seg, MemorySegment x) {
        IAdviseSink2Vtbl.OnSave$VH.set(seg, x);
    }
    public static MemorySegment OnSave$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IAdviseSink2Vtbl.OnSave$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void OnSave$set(MemorySegment seg, long index, MemorySegment x) {
        IAdviseSink2Vtbl.OnSave$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static OnSave OnSave(MemorySegment segment, SegmentScope scope) {
        return OnSave.ofAddress(OnSave$get(segment), scope);
    }
    static final FunctionDescriptor OnClose$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor OnClose_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle OnClose_UP$MH = RuntimeHelper.upcallHandle(OnClose.class, "apply", IAdviseSink2Vtbl.OnClose_UP$FUNC);
    static final FunctionDescriptor OnClose_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle OnClose_DOWN$MH = RuntimeHelper.downcallHandle(
        IAdviseSink2Vtbl.OnClose_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*OnClose)(IAdviseSink2*);
     * }
     */
    public interface OnClose {

        void apply(java.lang.foreign.MemorySegment pParameter);
        static MemorySegment allocate(OnClose fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IAdviseSink2Vtbl.OnClose_UP$MH, fi, IAdviseSink2Vtbl.OnClose$FUNC, scope);
        }
        static OnClose ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _pParameter) -> {
                try {
                    IAdviseSink2Vtbl.OnClose_DOWN$MH.invokeExact(symbol, _pParameter);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle OnClose$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("OnClose"));
    public static VarHandle OnClose$VH() {
        return IAdviseSink2Vtbl.OnClose$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*OnClose)(IAdviseSink2*);
     * }
     */
    public static MemorySegment OnClose$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IAdviseSink2Vtbl.OnClose$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*OnClose)(IAdviseSink2*);
     * }
     */
    public static void OnClose$set(MemorySegment seg, MemorySegment x) {
        IAdviseSink2Vtbl.OnClose$VH.set(seg, x);
    }
    public static MemorySegment OnClose$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IAdviseSink2Vtbl.OnClose$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void OnClose$set(MemorySegment seg, long index, MemorySegment x) {
        IAdviseSink2Vtbl.OnClose$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static OnClose OnClose(MemorySegment segment, SegmentScope scope) {
        return OnClose.ofAddress(OnClose$get(segment), scope);
    }
    static final FunctionDescriptor OnLinkSrcChange$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor OnLinkSrcChange_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle OnLinkSrcChange_UP$MH = RuntimeHelper.upcallHandle(OnLinkSrcChange.class, "apply", IAdviseSink2Vtbl.OnLinkSrcChange_UP$FUNC);
    static final FunctionDescriptor OnLinkSrcChange_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle OnLinkSrcChange_DOWN$MH = RuntimeHelper.downcallHandle(
        IAdviseSink2Vtbl.OnLinkSrcChange_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*OnLinkSrcChange)(IAdviseSink2*,IMoniker*);
     * }
     */
    public interface OnLinkSrcChange {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(OnLinkSrcChange fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IAdviseSink2Vtbl.OnLinkSrcChange_UP$MH, fi, IAdviseSink2Vtbl.OnLinkSrcChange$FUNC, scope);
        }
        static OnLinkSrcChange ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    IAdviseSink2Vtbl.OnLinkSrcChange_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle OnLinkSrcChange$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("OnLinkSrcChange"));
    public static VarHandle OnLinkSrcChange$VH() {
        return IAdviseSink2Vtbl.OnLinkSrcChange$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*OnLinkSrcChange)(IAdviseSink2*,IMoniker*);
     * }
     */
    public static MemorySegment OnLinkSrcChange$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IAdviseSink2Vtbl.OnLinkSrcChange$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*OnLinkSrcChange)(IAdviseSink2*,IMoniker*);
     * }
     */
    public static void OnLinkSrcChange$set(MemorySegment seg, MemorySegment x) {
        IAdviseSink2Vtbl.OnLinkSrcChange$VH.set(seg, x);
    }
    public static MemorySegment OnLinkSrcChange$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IAdviseSink2Vtbl.OnLinkSrcChange$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void OnLinkSrcChange$set(MemorySegment seg, long index, MemorySegment x) {
        IAdviseSink2Vtbl.OnLinkSrcChange$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static OnLinkSrcChange OnLinkSrcChange(MemorySegment segment, SegmentScope scope) {
        return OnLinkSrcChange.ofAddress(OnLinkSrcChange$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


