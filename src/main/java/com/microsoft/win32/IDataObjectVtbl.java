// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IDataObjectVtbl {
 *     HRESULT (*QueryInterface)(IDataObject*,const IID*,void**);
 *     ULONG (*AddRef)(IDataObject*);
 *     ULONG (*Release)(IDataObject*);
 *     HRESULT (*GetData)(IDataObject*,FORMATETC*,STGMEDIUM*);
 *     HRESULT (*GetDataHere)(IDataObject*,FORMATETC*,STGMEDIUM*);
 *     HRESULT (*QueryGetData)(IDataObject*,FORMATETC*);
 *     HRESULT (*GetCanonicalFormatEtc)(IDataObject*,FORMATETC*,FORMATETC*);
 *     HRESULT (*SetData)(IDataObject*,FORMATETC*,STGMEDIUM*,BOOL);
 *     HRESULT (*EnumFormatEtc)(IDataObject*,DWORD,IEnumFORMATETC**);
 *     HRESULT (*DAdvise)(IDataObject*,FORMATETC*,DWORD,IAdviseSink*,DWORD*);
 *     HRESULT (*DUnadvise)(IDataObject*,DWORD);
 *     HRESULT (*EnumDAdvise)(IDataObject*,IEnumSTATDATA**);
 * };
 * }
 */
public class IDataObjectVtbl {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("GetData"),
        Constants$root.C_POINTER$LAYOUT.withName("GetDataHere"),
        Constants$root.C_POINTER$LAYOUT.withName("QueryGetData"),
        Constants$root.C_POINTER$LAYOUT.withName("GetCanonicalFormatEtc"),
        Constants$root.C_POINTER$LAYOUT.withName("SetData"),
        Constants$root.C_POINTER$LAYOUT.withName("EnumFormatEtc"),
        Constants$root.C_POINTER$LAYOUT.withName("DAdvise"),
        Constants$root.C_POINTER$LAYOUT.withName("DUnadvise"),
        Constants$root.C_POINTER$LAYOUT.withName("EnumDAdvise")
    ).withName("IDataObjectVtbl");
    public static MemoryLayout $LAYOUT() {
        return IDataObjectVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor QueryInterface_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_UP$MH = RuntimeHelper.upcallHandle(QueryInterface.class, "apply", IDataObjectVtbl.QueryInterface_UP$FUNC);
    static final FunctionDescriptor QueryInterface_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_DOWN$MH = RuntimeHelper.downcallHandle(
        IDataObjectVtbl.QueryInterface_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(IDataObject*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IDataObjectVtbl.QueryInterface_UP$MH, fi, IDataObjectVtbl.QueryInterface$FUNC, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IDataObjectVtbl.QueryInterface_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return IDataObjectVtbl.QueryInterface$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IDataObject*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IDataObjectVtbl.QueryInterface$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IDataObject*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        IDataObjectVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IDataObjectVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        IDataObjectVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, SegmentScope scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor AddRef_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_UP$MH = RuntimeHelper.upcallHandle(AddRef.class, "apply", IDataObjectVtbl.AddRef_UP$FUNC);
    static final FunctionDescriptor AddRef_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_DOWN$MH = RuntimeHelper.downcallHandle(
        IDataObjectVtbl.AddRef_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*AddRef)(IDataObject*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IDataObjectVtbl.AddRef_UP$MH, fi, IDataObjectVtbl.AddRef$FUNC, scope);
        }
        static AddRef ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IDataObjectVtbl.AddRef_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return IDataObjectVtbl.AddRef$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(IDataObject*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IDataObjectVtbl.AddRef$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(IDataObject*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        IDataObjectVtbl.AddRef$VH.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IDataObjectVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        IDataObjectVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, SegmentScope scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Release_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_UP$MH = RuntimeHelper.upcallHandle(Release.class, "apply", IDataObjectVtbl.Release_UP$FUNC);
    static final FunctionDescriptor Release_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_DOWN$MH = RuntimeHelper.downcallHandle(
        IDataObjectVtbl.Release_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*Release)(IDataObject*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IDataObjectVtbl.Release_UP$MH, fi, IDataObjectVtbl.Release$FUNC, scope);
        }
        static Release ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IDataObjectVtbl.Release_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return IDataObjectVtbl.Release$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(IDataObject*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IDataObjectVtbl.Release$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(IDataObject*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        IDataObjectVtbl.Release$VH.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IDataObjectVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        IDataObjectVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, SegmentScope scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    static final FunctionDescriptor GetData$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetData_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetData_UP$MH = RuntimeHelper.upcallHandle(GetData.class, "apply", IDataObjectVtbl.GetData_UP$FUNC);
    static final FunctionDescriptor GetData_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetData_DOWN$MH = RuntimeHelper.downcallHandle(
        IDataObjectVtbl.GetData_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetData)(IDataObject*,FORMATETC*,STGMEDIUM*);
     * }
     */
    public interface GetData {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetData fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IDataObjectVtbl.GetData_UP$MH, fi, IDataObjectVtbl.GetData$FUNC, scope);
        }
        static GetData ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IDataObjectVtbl.GetData_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetData$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetData"));
    public static VarHandle GetData$VH() {
        return IDataObjectVtbl.GetData$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetData)(IDataObject*,FORMATETC*,STGMEDIUM*);
     * }
     */
    public static MemorySegment GetData$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IDataObjectVtbl.GetData$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetData)(IDataObject*,FORMATETC*,STGMEDIUM*);
     * }
     */
    public static void GetData$set(MemorySegment seg, MemorySegment x) {
        IDataObjectVtbl.GetData$VH.set(seg, x);
    }
    public static MemorySegment GetData$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IDataObjectVtbl.GetData$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetData$set(MemorySegment seg, long index, MemorySegment x) {
        IDataObjectVtbl.GetData$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetData GetData(MemorySegment segment, SegmentScope scope) {
        return GetData.ofAddress(GetData$get(segment), scope);
    }
    static final FunctionDescriptor GetDataHere$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetDataHere_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetDataHere_UP$MH = RuntimeHelper.upcallHandle(GetDataHere.class, "apply", IDataObjectVtbl.GetDataHere_UP$FUNC);
    static final FunctionDescriptor GetDataHere_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetDataHere_DOWN$MH = RuntimeHelper.downcallHandle(
        IDataObjectVtbl.GetDataHere_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetDataHere)(IDataObject*,FORMATETC*,STGMEDIUM*);
     * }
     */
    public interface GetDataHere {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetDataHere fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IDataObjectVtbl.GetDataHere_UP$MH, fi, IDataObjectVtbl.GetDataHere$FUNC, scope);
        }
        static GetDataHere ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IDataObjectVtbl.GetDataHere_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetDataHere$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetDataHere"));
    public static VarHandle GetDataHere$VH() {
        return IDataObjectVtbl.GetDataHere$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetDataHere)(IDataObject*,FORMATETC*,STGMEDIUM*);
     * }
     */
    public static MemorySegment GetDataHere$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IDataObjectVtbl.GetDataHere$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetDataHere)(IDataObject*,FORMATETC*,STGMEDIUM*);
     * }
     */
    public static void GetDataHere$set(MemorySegment seg, MemorySegment x) {
        IDataObjectVtbl.GetDataHere$VH.set(seg, x);
    }
    public static MemorySegment GetDataHere$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IDataObjectVtbl.GetDataHere$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDataHere$set(MemorySegment seg, long index, MemorySegment x) {
        IDataObjectVtbl.GetDataHere$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDataHere GetDataHere(MemorySegment segment, SegmentScope scope) {
        return GetDataHere.ofAddress(GetDataHere$get(segment), scope);
    }
    static final FunctionDescriptor QueryGetData$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor QueryGetData_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryGetData_UP$MH = RuntimeHelper.upcallHandle(QueryGetData.class, "apply", IDataObjectVtbl.QueryGetData_UP$FUNC);
    static final FunctionDescriptor QueryGetData_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryGetData_DOWN$MH = RuntimeHelper.downcallHandle(
        IDataObjectVtbl.QueryGetData_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*QueryGetData)(IDataObject*,FORMATETC*);
     * }
     */
    public interface QueryGetData {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(QueryGetData fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IDataObjectVtbl.QueryGetData_UP$MH, fi, IDataObjectVtbl.QueryGetData$FUNC, scope);
        }
        static QueryGetData ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IDataObjectVtbl.QueryGetData_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryGetData$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryGetData"));
    public static VarHandle QueryGetData$VH() {
        return IDataObjectVtbl.QueryGetData$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryGetData)(IDataObject*,FORMATETC*);
     * }
     */
    public static MemorySegment QueryGetData$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IDataObjectVtbl.QueryGetData$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryGetData)(IDataObject*,FORMATETC*);
     * }
     */
    public static void QueryGetData$set(MemorySegment seg, MemorySegment x) {
        IDataObjectVtbl.QueryGetData$VH.set(seg, x);
    }
    public static MemorySegment QueryGetData$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IDataObjectVtbl.QueryGetData$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryGetData$set(MemorySegment seg, long index, MemorySegment x) {
        IDataObjectVtbl.QueryGetData$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryGetData QueryGetData(MemorySegment segment, SegmentScope scope) {
        return QueryGetData.ofAddress(QueryGetData$get(segment), scope);
    }
    static final FunctionDescriptor GetCanonicalFormatEtc$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetCanonicalFormatEtc_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetCanonicalFormatEtc_UP$MH = RuntimeHelper.upcallHandle(GetCanonicalFormatEtc.class, "apply", IDataObjectVtbl.GetCanonicalFormatEtc_UP$FUNC);
    static final FunctionDescriptor GetCanonicalFormatEtc_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetCanonicalFormatEtc_DOWN$MH = RuntimeHelper.downcallHandle(
        IDataObjectVtbl.GetCanonicalFormatEtc_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetCanonicalFormatEtc)(IDataObject*,FORMATETC*,FORMATETC*);
     * }
     */
    public interface GetCanonicalFormatEtc {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetCanonicalFormatEtc fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IDataObjectVtbl.GetCanonicalFormatEtc_UP$MH, fi, IDataObjectVtbl.GetCanonicalFormatEtc$FUNC, scope);
        }
        static GetCanonicalFormatEtc ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IDataObjectVtbl.GetCanonicalFormatEtc_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetCanonicalFormatEtc$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetCanonicalFormatEtc"));
    public static VarHandle GetCanonicalFormatEtc$VH() {
        return IDataObjectVtbl.GetCanonicalFormatEtc$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetCanonicalFormatEtc)(IDataObject*,FORMATETC*,FORMATETC*);
     * }
     */
    public static MemorySegment GetCanonicalFormatEtc$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IDataObjectVtbl.GetCanonicalFormatEtc$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetCanonicalFormatEtc)(IDataObject*,FORMATETC*,FORMATETC*);
     * }
     */
    public static void GetCanonicalFormatEtc$set(MemorySegment seg, MemorySegment x) {
        IDataObjectVtbl.GetCanonicalFormatEtc$VH.set(seg, x);
    }
    public static MemorySegment GetCanonicalFormatEtc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IDataObjectVtbl.GetCanonicalFormatEtc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetCanonicalFormatEtc$set(MemorySegment seg, long index, MemorySegment x) {
        IDataObjectVtbl.GetCanonicalFormatEtc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetCanonicalFormatEtc GetCanonicalFormatEtc(MemorySegment segment, SegmentScope scope) {
        return GetCanonicalFormatEtc.ofAddress(GetCanonicalFormatEtc$get(segment), scope);
    }
    static final FunctionDescriptor SetData$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor SetData_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle SetData_UP$MH = RuntimeHelper.upcallHandle(SetData.class, "apply", IDataObjectVtbl.SetData_UP$FUNC);
    static final FunctionDescriptor SetData_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle SetData_DOWN$MH = RuntimeHelper.downcallHandle(
        IDataObjectVtbl.SetData_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetData)(IDataObject*,FORMATETC*,STGMEDIUM*,BOOL);
     * }
     */
    public interface SetData {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3);
        static MemorySegment allocate(SetData fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IDataObjectVtbl.SetData_UP$MH, fi, IDataObjectVtbl.SetData$FUNC, scope);
        }
        static SetData ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3) -> {
                try {
                    return (int)IDataObjectVtbl.SetData_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetData$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetData"));
    public static VarHandle SetData$VH() {
        return IDataObjectVtbl.SetData$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetData)(IDataObject*,FORMATETC*,STGMEDIUM*,BOOL);
     * }
     */
    public static MemorySegment SetData$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IDataObjectVtbl.SetData$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetData)(IDataObject*,FORMATETC*,STGMEDIUM*,BOOL);
     * }
     */
    public static void SetData$set(MemorySegment seg, MemorySegment x) {
        IDataObjectVtbl.SetData$VH.set(seg, x);
    }
    public static MemorySegment SetData$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IDataObjectVtbl.SetData$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetData$set(MemorySegment seg, long index, MemorySegment x) {
        IDataObjectVtbl.SetData$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetData SetData(MemorySegment segment, SegmentScope scope) {
        return SetData.ofAddress(SetData$get(segment), scope);
    }
    static final FunctionDescriptor EnumFormatEtc$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor EnumFormatEtc_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle EnumFormatEtc_UP$MH = RuntimeHelper.upcallHandle(EnumFormatEtc.class, "apply", IDataObjectVtbl.EnumFormatEtc_UP$FUNC);
    static final FunctionDescriptor EnumFormatEtc_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle EnumFormatEtc_DOWN$MH = RuntimeHelper.downcallHandle(
        IDataObjectVtbl.EnumFormatEtc_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*EnumFormatEtc)(IDataObject*,DWORD,IEnumFORMATETC**);
     * }
     */
    public interface EnumFormatEtc {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(EnumFormatEtc fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IDataObjectVtbl.EnumFormatEtc_UP$MH, fi, IDataObjectVtbl.EnumFormatEtc$FUNC, scope);
        }
        static EnumFormatEtc ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IDataObjectVtbl.EnumFormatEtc_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle EnumFormatEtc$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("EnumFormatEtc"));
    public static VarHandle EnumFormatEtc$VH() {
        return IDataObjectVtbl.EnumFormatEtc$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*EnumFormatEtc)(IDataObject*,DWORD,IEnumFORMATETC**);
     * }
     */
    public static MemorySegment EnumFormatEtc$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IDataObjectVtbl.EnumFormatEtc$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*EnumFormatEtc)(IDataObject*,DWORD,IEnumFORMATETC**);
     * }
     */
    public static void EnumFormatEtc$set(MemorySegment seg, MemorySegment x) {
        IDataObjectVtbl.EnumFormatEtc$VH.set(seg, x);
    }
    public static MemorySegment EnumFormatEtc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IDataObjectVtbl.EnumFormatEtc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void EnumFormatEtc$set(MemorySegment seg, long index, MemorySegment x) {
        IDataObjectVtbl.EnumFormatEtc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static EnumFormatEtc EnumFormatEtc(MemorySegment segment, SegmentScope scope) {
        return EnumFormatEtc.ofAddress(EnumFormatEtc$get(segment), scope);
    }
    static final FunctionDescriptor DAdvise$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor DAdvise_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle DAdvise_UP$MH = RuntimeHelper.upcallHandle(DAdvise.class, "apply", IDataObjectVtbl.DAdvise_UP$FUNC);
    static final FunctionDescriptor DAdvise_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle DAdvise_DOWN$MH = RuntimeHelper.downcallHandle(
        IDataObjectVtbl.DAdvise_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*DAdvise)(IDataObject*,FORMATETC*,DWORD,IAdviseSink*,DWORD*);
     * }
     */
    public interface DAdvise {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(DAdvise fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IDataObjectVtbl.DAdvise_UP$MH, fi, IDataObjectVtbl.DAdvise$FUNC, scope);
        }
        static DAdvise ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (int)IDataObjectVtbl.DAdvise_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle DAdvise$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("DAdvise"));
    public static VarHandle DAdvise$VH() {
        return IDataObjectVtbl.DAdvise$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*DAdvise)(IDataObject*,FORMATETC*,DWORD,IAdviseSink*,DWORD*);
     * }
     */
    public static MemorySegment DAdvise$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IDataObjectVtbl.DAdvise$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*DAdvise)(IDataObject*,FORMATETC*,DWORD,IAdviseSink*,DWORD*);
     * }
     */
    public static void DAdvise$set(MemorySegment seg, MemorySegment x) {
        IDataObjectVtbl.DAdvise$VH.set(seg, x);
    }
    public static MemorySegment DAdvise$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IDataObjectVtbl.DAdvise$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DAdvise$set(MemorySegment seg, long index, MemorySegment x) {
        IDataObjectVtbl.DAdvise$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static DAdvise DAdvise(MemorySegment segment, SegmentScope scope) {
        return DAdvise.ofAddress(DAdvise$get(segment), scope);
    }
    static final FunctionDescriptor DUnadvise$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor DUnadvise_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle DUnadvise_UP$MH = RuntimeHelper.upcallHandle(DUnadvise.class, "apply", IDataObjectVtbl.DUnadvise_UP$FUNC);
    static final FunctionDescriptor DUnadvise_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle DUnadvise_DOWN$MH = RuntimeHelper.downcallHandle(
        IDataObjectVtbl.DUnadvise_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*DUnadvise)(IDataObject*,DWORD);
     * }
     */
    public interface DUnadvise {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(DUnadvise fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IDataObjectVtbl.DUnadvise_UP$MH, fi, IDataObjectVtbl.DUnadvise$FUNC, scope);
        }
        static DUnadvise ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)IDataObjectVtbl.DUnadvise_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle DUnadvise$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("DUnadvise"));
    public static VarHandle DUnadvise$VH() {
        return IDataObjectVtbl.DUnadvise$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*DUnadvise)(IDataObject*,DWORD);
     * }
     */
    public static MemorySegment DUnadvise$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IDataObjectVtbl.DUnadvise$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*DUnadvise)(IDataObject*,DWORD);
     * }
     */
    public static void DUnadvise$set(MemorySegment seg, MemorySegment x) {
        IDataObjectVtbl.DUnadvise$VH.set(seg, x);
    }
    public static MemorySegment DUnadvise$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IDataObjectVtbl.DUnadvise$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DUnadvise$set(MemorySegment seg, long index, MemorySegment x) {
        IDataObjectVtbl.DUnadvise$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static DUnadvise DUnadvise(MemorySegment segment, SegmentScope scope) {
        return DUnadvise.ofAddress(DUnadvise$get(segment), scope);
    }
    static final FunctionDescriptor EnumDAdvise$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor EnumDAdvise_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle EnumDAdvise_UP$MH = RuntimeHelper.upcallHandle(EnumDAdvise.class, "apply", IDataObjectVtbl.EnumDAdvise_UP$FUNC);
    static final FunctionDescriptor EnumDAdvise_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle EnumDAdvise_DOWN$MH = RuntimeHelper.downcallHandle(
        IDataObjectVtbl.EnumDAdvise_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*EnumDAdvise)(IDataObject*,IEnumSTATDATA**);
     * }
     */
    public interface EnumDAdvise {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(EnumDAdvise fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IDataObjectVtbl.EnumDAdvise_UP$MH, fi, IDataObjectVtbl.EnumDAdvise$FUNC, scope);
        }
        static EnumDAdvise ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IDataObjectVtbl.EnumDAdvise_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle EnumDAdvise$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("EnumDAdvise"));
    public static VarHandle EnumDAdvise$VH() {
        return IDataObjectVtbl.EnumDAdvise$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*EnumDAdvise)(IDataObject*,IEnumSTATDATA**);
     * }
     */
    public static MemorySegment EnumDAdvise$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IDataObjectVtbl.EnumDAdvise$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*EnumDAdvise)(IDataObject*,IEnumSTATDATA**);
     * }
     */
    public static void EnumDAdvise$set(MemorySegment seg, MemorySegment x) {
        IDataObjectVtbl.EnumDAdvise$VH.set(seg, x);
    }
    public static MemorySegment EnumDAdvise$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IDataObjectVtbl.EnumDAdvise$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void EnumDAdvise$set(MemorySegment seg, long index, MemorySegment x) {
        IDataObjectVtbl.EnumDAdvise$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static EnumDAdvise EnumDAdvise(MemorySegment segment, SegmentScope scope) {
        return EnumDAdvise.ofAddress(EnumDAdvise$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


