// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IMessageFilterVtbl {
 *     HRESULT (*QueryInterface)(IMessageFilter*,const IID*,void**);
 *     ULONG (*AddRef)(IMessageFilter*);
 *     ULONG (*Release)(IMessageFilter*);
 *     DWORD (*HandleInComingCall)(IMessageFilter*,DWORD,HTASK,DWORD,LPINTERFACEINFO);
 *     DWORD (*RetryRejectedCall)(IMessageFilter*,HTASK,DWORD,DWORD);
 *     DWORD (*MessagePending)(IMessageFilter*,HTASK,DWORD,DWORD);
 * };
 * }
 */
public class IMessageFilterVtbl {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("HandleInComingCall"),
        Constants$root.C_POINTER$LAYOUT.withName("RetryRejectedCall"),
        Constants$root.C_POINTER$LAYOUT.withName("MessagePending")
    ).withName("IMessageFilterVtbl");
    public static MemoryLayout $LAYOUT() {
        return IMessageFilterVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor QueryInterface_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_UP$MH = RuntimeHelper.upcallHandle(QueryInterface.class, "apply", IMessageFilterVtbl.QueryInterface_UP$FUNC);
    static final FunctionDescriptor QueryInterface_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_DOWN$MH = RuntimeHelper.downcallHandle(
        IMessageFilterVtbl.QueryInterface_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(IMessageFilter*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IMessageFilterVtbl.QueryInterface_UP$MH, fi, IMessageFilterVtbl.QueryInterface$FUNC, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IMessageFilterVtbl.QueryInterface_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return IMessageFilterVtbl.QueryInterface$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IMessageFilter*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IMessageFilterVtbl.QueryInterface$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IMessageFilter*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        IMessageFilterVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IMessageFilterVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        IMessageFilterVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, SegmentScope scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor AddRef_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_UP$MH = RuntimeHelper.upcallHandle(AddRef.class, "apply", IMessageFilterVtbl.AddRef_UP$FUNC);
    static final FunctionDescriptor AddRef_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_DOWN$MH = RuntimeHelper.downcallHandle(
        IMessageFilterVtbl.AddRef_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*AddRef)(IMessageFilter*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IMessageFilterVtbl.AddRef_UP$MH, fi, IMessageFilterVtbl.AddRef$FUNC, scope);
        }
        static AddRef ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IMessageFilterVtbl.AddRef_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return IMessageFilterVtbl.AddRef$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(IMessageFilter*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IMessageFilterVtbl.AddRef$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(IMessageFilter*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        IMessageFilterVtbl.AddRef$VH.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IMessageFilterVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        IMessageFilterVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, SegmentScope scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Release_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_UP$MH = RuntimeHelper.upcallHandle(Release.class, "apply", IMessageFilterVtbl.Release_UP$FUNC);
    static final FunctionDescriptor Release_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_DOWN$MH = RuntimeHelper.downcallHandle(
        IMessageFilterVtbl.Release_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*Release)(IMessageFilter*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IMessageFilterVtbl.Release_UP$MH, fi, IMessageFilterVtbl.Release$FUNC, scope);
        }
        static Release ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IMessageFilterVtbl.Release_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return IMessageFilterVtbl.Release$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(IMessageFilter*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IMessageFilterVtbl.Release$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(IMessageFilter*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        IMessageFilterVtbl.Release$VH.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IMessageFilterVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        IMessageFilterVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, SegmentScope scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    static final FunctionDescriptor HandleInComingCall$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor HandleInComingCall_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle HandleInComingCall_UP$MH = RuntimeHelper.upcallHandle(HandleInComingCall.class, "apply", IMessageFilterVtbl.HandleInComingCall_UP$FUNC);
    static final FunctionDescriptor HandleInComingCall_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle HandleInComingCall_DOWN$MH = RuntimeHelper.downcallHandle(
        IMessageFilterVtbl.HandleInComingCall_DOWN$FUNC
    );
    /**
     * {@snippet :
 * DWORD (*HandleInComingCall)(IMessageFilter*,DWORD,HTASK,DWORD,LPINTERFACEINFO);
     * }
     */
    public interface HandleInComingCall {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, int _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(HandleInComingCall fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IMessageFilterVtbl.HandleInComingCall_UP$MH, fi, IMessageFilterVtbl.HandleInComingCall$FUNC, scope);
        }
        static HandleInComingCall ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, int __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (int)IMessageFilterVtbl.HandleInComingCall_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle HandleInComingCall$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("HandleInComingCall"));
    public static VarHandle HandleInComingCall$VH() {
        return IMessageFilterVtbl.HandleInComingCall$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD (*HandleInComingCall)(IMessageFilter*,DWORD,HTASK,DWORD,LPINTERFACEINFO);
     * }
     */
    public static MemorySegment HandleInComingCall$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IMessageFilterVtbl.HandleInComingCall$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD (*HandleInComingCall)(IMessageFilter*,DWORD,HTASK,DWORD,LPINTERFACEINFO);
     * }
     */
    public static void HandleInComingCall$set(MemorySegment seg, MemorySegment x) {
        IMessageFilterVtbl.HandleInComingCall$VH.set(seg, x);
    }
    public static MemorySegment HandleInComingCall$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IMessageFilterVtbl.HandleInComingCall$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void HandleInComingCall$set(MemorySegment seg, long index, MemorySegment x) {
        IMessageFilterVtbl.HandleInComingCall$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static HandleInComingCall HandleInComingCall(MemorySegment segment, SegmentScope scope) {
        return HandleInComingCall.ofAddress(HandleInComingCall$get(segment), scope);
    }
    static final FunctionDescriptor RetryRejectedCall$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor RetryRejectedCall_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle RetryRejectedCall_UP$MH = RuntimeHelper.upcallHandle(RetryRejectedCall.class, "apply", IMessageFilterVtbl.RetryRejectedCall_UP$FUNC);
    static final FunctionDescriptor RetryRejectedCall_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle RetryRejectedCall_DOWN$MH = RuntimeHelper.downcallHandle(
        IMessageFilterVtbl.RetryRejectedCall_DOWN$FUNC
    );
    /**
     * {@snippet :
 * DWORD (*RetryRejectedCall)(IMessageFilter*,HTASK,DWORD,DWORD);
     * }
     */
    public interface RetryRejectedCall {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, int _x3);
        static MemorySegment allocate(RetryRejectedCall fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IMessageFilterVtbl.RetryRejectedCall_UP$MH, fi, IMessageFilterVtbl.RetryRejectedCall$FUNC, scope);
        }
        static RetryRejectedCall ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, int __x3) -> {
                try {
                    return (int)IMessageFilterVtbl.RetryRejectedCall_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle RetryRejectedCall$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("RetryRejectedCall"));
    public static VarHandle RetryRejectedCall$VH() {
        return IMessageFilterVtbl.RetryRejectedCall$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD (*RetryRejectedCall)(IMessageFilter*,HTASK,DWORD,DWORD);
     * }
     */
    public static MemorySegment RetryRejectedCall$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IMessageFilterVtbl.RetryRejectedCall$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD (*RetryRejectedCall)(IMessageFilter*,HTASK,DWORD,DWORD);
     * }
     */
    public static void RetryRejectedCall$set(MemorySegment seg, MemorySegment x) {
        IMessageFilterVtbl.RetryRejectedCall$VH.set(seg, x);
    }
    public static MemorySegment RetryRejectedCall$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IMessageFilterVtbl.RetryRejectedCall$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void RetryRejectedCall$set(MemorySegment seg, long index, MemorySegment x) {
        IMessageFilterVtbl.RetryRejectedCall$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static RetryRejectedCall RetryRejectedCall(MemorySegment segment, SegmentScope scope) {
        return RetryRejectedCall.ofAddress(RetryRejectedCall$get(segment), scope);
    }
    static final FunctionDescriptor MessagePending$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor MessagePending_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle MessagePending_UP$MH = RuntimeHelper.upcallHandle(MessagePending.class, "apply", IMessageFilterVtbl.MessagePending_UP$FUNC);
    static final FunctionDescriptor MessagePending_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle MessagePending_DOWN$MH = RuntimeHelper.downcallHandle(
        IMessageFilterVtbl.MessagePending_DOWN$FUNC
    );
    /**
     * {@snippet :
 * DWORD (*MessagePending)(IMessageFilter*,HTASK,DWORD,DWORD);
     * }
     */
    public interface MessagePending {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, int _x3);
        static MemorySegment allocate(MessagePending fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IMessageFilterVtbl.MessagePending_UP$MH, fi, IMessageFilterVtbl.MessagePending$FUNC, scope);
        }
        static MessagePending ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, int __x3) -> {
                try {
                    return (int)IMessageFilterVtbl.MessagePending_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle MessagePending$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("MessagePending"));
    public static VarHandle MessagePending$VH() {
        return IMessageFilterVtbl.MessagePending$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD (*MessagePending)(IMessageFilter*,HTASK,DWORD,DWORD);
     * }
     */
    public static MemorySegment MessagePending$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IMessageFilterVtbl.MessagePending$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD (*MessagePending)(IMessageFilter*,HTASK,DWORD,DWORD);
     * }
     */
    public static void MessagePending$set(MemorySegment seg, MemorySegment x) {
        IMessageFilterVtbl.MessagePending$VH.set(seg, x);
    }
    public static MemorySegment MessagePending$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IMessageFilterVtbl.MessagePending$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MessagePending$set(MemorySegment seg, long index, MemorySegment x) {
        IMessageFilterVtbl.MessagePending$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MessagePending MessagePending(MemorySegment segment, SegmentScope scope) {
        return MessagePending.ofAddress(MessagePending$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


