// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _FS_BPIO_OUTPUT {
 *     FS_BPIO_OPERATIONS Operation;
 *     FS_BPIO_OUTFLAGS OutFlags;
 *     DWORDLONG Reserved1;
 *     DWORDLONG Reserved2;
 *     union {
 *         FS_BPIO_RESULTS Enable;
 *         FS_BPIO_RESULTS Query;
 *         FS_BPIO_RESULTS VolumeStackResume;
 *         FS_BPIO_RESULTS StreamResume;
 *         FS_BPIO_INFO GetInfo;
 *     };
 * };
 * }
 */
public class _FS_BPIO_OUTPUT {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("Operation"),
        Constants$root.C_LONG$LAYOUT.withName("OutFlags"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("Reserved1"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("Reserved2"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("OpStatus"),
                Constants$root.C_SHORT$LAYOUT.withName("FailingDriverNameLen"),
                MemoryLayout.sequenceLayout(32, Constants$root.C_SHORT$LAYOUT).withName("FailingDriverName"),
                Constants$root.C_SHORT$LAYOUT.withName("FailureReasonLen"),
                MemoryLayout.sequenceLayout(128, Constants$root.C_SHORT$LAYOUT).withName("FailureReason")
            ).withName("Enable"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("OpStatus"),
                Constants$root.C_SHORT$LAYOUT.withName("FailingDriverNameLen"),
                MemoryLayout.sequenceLayout(32, Constants$root.C_SHORT$LAYOUT).withName("FailingDriverName"),
                Constants$root.C_SHORT$LAYOUT.withName("FailureReasonLen"),
                MemoryLayout.sequenceLayout(128, Constants$root.C_SHORT$LAYOUT).withName("FailureReason")
            ).withName("Query"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("OpStatus"),
                Constants$root.C_SHORT$LAYOUT.withName("FailingDriverNameLen"),
                MemoryLayout.sequenceLayout(32, Constants$root.C_SHORT$LAYOUT).withName("FailingDriverName"),
                Constants$root.C_SHORT$LAYOUT.withName("FailureReasonLen"),
                MemoryLayout.sequenceLayout(128, Constants$root.C_SHORT$LAYOUT).withName("FailureReason")
            ).withName("VolumeStackResume"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("OpStatus"),
                Constants$root.C_SHORT$LAYOUT.withName("FailingDriverNameLen"),
                MemoryLayout.sequenceLayout(32, Constants$root.C_SHORT$LAYOUT).withName("FailingDriverName"),
                Constants$root.C_SHORT$LAYOUT.withName("FailureReasonLen"),
                MemoryLayout.sequenceLayout(128, Constants$root.C_SHORT$LAYOUT).withName("FailureReason")
            ).withName("StreamResume"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("ActiveBypassIoCount"),
                Constants$root.C_SHORT$LAYOUT.withName("StorageDriverNameLen"),
                MemoryLayout.sequenceLayout(32, Constants$root.C_SHORT$LAYOUT).withName("StorageDriverName"),
                MemoryLayout.paddingLayout(16)
            ).withName("GetInfo")
        ).withName("$anon$0")
    ).withName("_FS_BPIO_OUTPUT");
    public static MemoryLayout $LAYOUT() {
        return _FS_BPIO_OUTPUT.$struct$LAYOUT;
    }
    static final VarHandle Operation$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Operation"));
    public static VarHandle Operation$VH() {
        return _FS_BPIO_OUTPUT.Operation$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * FS_BPIO_OPERATIONS Operation;
     * }
     */
    public static int Operation$get(MemorySegment seg) {
        return (int)_FS_BPIO_OUTPUT.Operation$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * FS_BPIO_OPERATIONS Operation;
     * }
     */
    public static void Operation$set(MemorySegment seg, int x) {
        _FS_BPIO_OUTPUT.Operation$VH.set(seg, x);
    }
    public static int Operation$get(MemorySegment seg, long index) {
        return (int)_FS_BPIO_OUTPUT.Operation$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Operation$set(MemorySegment seg, long index, int x) {
        _FS_BPIO_OUTPUT.Operation$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle OutFlags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("OutFlags"));
    public static VarHandle OutFlags$VH() {
        return _FS_BPIO_OUTPUT.OutFlags$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * FS_BPIO_OUTFLAGS OutFlags;
     * }
     */
    public static int OutFlags$get(MemorySegment seg) {
        return (int)_FS_BPIO_OUTPUT.OutFlags$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * FS_BPIO_OUTFLAGS OutFlags;
     * }
     */
    public static void OutFlags$set(MemorySegment seg, int x) {
        _FS_BPIO_OUTPUT.OutFlags$VH.set(seg, x);
    }
    public static int OutFlags$get(MemorySegment seg, long index) {
        return (int)_FS_BPIO_OUTPUT.OutFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void OutFlags$set(MemorySegment seg, long index, int x) {
        _FS_BPIO_OUTPUT.OutFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Reserved1$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Reserved1"));
    public static VarHandle Reserved1$VH() {
        return _FS_BPIO_OUTPUT.Reserved1$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORDLONG Reserved1;
     * }
     */
    public static long Reserved1$get(MemorySegment seg) {
        return (long)_FS_BPIO_OUTPUT.Reserved1$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORDLONG Reserved1;
     * }
     */
    public static void Reserved1$set(MemorySegment seg, long x) {
        _FS_BPIO_OUTPUT.Reserved1$VH.set(seg, x);
    }
    public static long Reserved1$get(MemorySegment seg, long index) {
        return (long)_FS_BPIO_OUTPUT.Reserved1$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Reserved1$set(MemorySegment seg, long index, long x) {
        _FS_BPIO_OUTPUT.Reserved1$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Reserved2$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Reserved2"));
    public static VarHandle Reserved2$VH() {
        return _FS_BPIO_OUTPUT.Reserved2$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORDLONG Reserved2;
     * }
     */
    public static long Reserved2$get(MemorySegment seg) {
        return (long)_FS_BPIO_OUTPUT.Reserved2$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORDLONG Reserved2;
     * }
     */
    public static void Reserved2$set(MemorySegment seg, long x) {
        _FS_BPIO_OUTPUT.Reserved2$VH.set(seg, x);
    }
    public static long Reserved2$get(MemorySegment seg, long index) {
        return (long)_FS_BPIO_OUTPUT.Reserved2$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Reserved2$set(MemorySegment seg, long index, long x) {
        _FS_BPIO_OUTPUT.Reserved2$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Enable$slice(MemorySegment seg) {
        return seg.asSlice(24, 328);
    }
    public static MemorySegment Query$slice(MemorySegment seg) {
        return seg.asSlice(24, 328);
    }
    public static MemorySegment VolumeStackResume$slice(MemorySegment seg) {
        return seg.asSlice(24, 328);
    }
    public static MemorySegment StreamResume$slice(MemorySegment seg) {
        return seg.asSlice(24, 328);
    }
    public static MemorySegment GetInfo$slice(MemorySegment seg) {
        return seg.asSlice(24, 72);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


