// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _OCSP_SIGNATURE_INFO {
 *     CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;
 *     CRYPT_BIT_BLOB Signature;
 *     DWORD cCertEncoded;
 *     PCERT_BLOB rgCertEncoded;
 * };
 * }
 */
public class _OCSP_SIGNATURE_INFO {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("pszObjId"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("cbData"),
                MemoryLayout.paddingLayout(32),
                Constants$root.C_POINTER$LAYOUT.withName("pbData")
            ).withName("Parameters")
        ).withName("SignatureAlgorithm"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("cbData"),
            MemoryLayout.paddingLayout(32),
            Constants$root.C_POINTER$LAYOUT.withName("pbData"),
            Constants$root.C_LONG$LAYOUT.withName("cUnusedBits"),
            MemoryLayout.paddingLayout(32)
        ).withName("Signature"),
        Constants$root.C_LONG$LAYOUT.withName("cCertEncoded"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("rgCertEncoded")
    ).withName("_OCSP_SIGNATURE_INFO");
    public static MemoryLayout $LAYOUT() {
        return _OCSP_SIGNATURE_INFO.$struct$LAYOUT;
    }
    public static MemorySegment SignatureAlgorithm$slice(MemorySegment seg) {
        return seg.asSlice(0, 24);
    }
    public static MemorySegment Signature$slice(MemorySegment seg) {
        return seg.asSlice(24, 24);
    }
    static final VarHandle cCertEncoded$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cCertEncoded"));
    public static VarHandle cCertEncoded$VH() {
        return _OCSP_SIGNATURE_INFO.cCertEncoded$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD cCertEncoded;
     * }
     */
    public static int cCertEncoded$get(MemorySegment seg) {
        return (int)_OCSP_SIGNATURE_INFO.cCertEncoded$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD cCertEncoded;
     * }
     */
    public static void cCertEncoded$set(MemorySegment seg, int x) {
        _OCSP_SIGNATURE_INFO.cCertEncoded$VH.set(seg, x);
    }
    public static int cCertEncoded$get(MemorySegment seg, long index) {
        return (int)_OCSP_SIGNATURE_INFO.cCertEncoded$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cCertEncoded$set(MemorySegment seg, long index, int x) {
        _OCSP_SIGNATURE_INFO.cCertEncoded$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle rgCertEncoded$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("rgCertEncoded"));
    public static VarHandle rgCertEncoded$VH() {
        return _OCSP_SIGNATURE_INFO.rgCertEncoded$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PCERT_BLOB rgCertEncoded;
     * }
     */
    public static MemorySegment rgCertEncoded$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_OCSP_SIGNATURE_INFO.rgCertEncoded$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PCERT_BLOB rgCertEncoded;
     * }
     */
    public static void rgCertEncoded$set(MemorySegment seg, MemorySegment x) {
        _OCSP_SIGNATURE_INFO.rgCertEncoded$VH.set(seg, x);
    }
    public static MemorySegment rgCertEncoded$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_OCSP_SIGNATURE_INFO.rgCertEncoded$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void rgCertEncoded$set(MemorySegment seg, long index, MemorySegment x) {
        _OCSP_SIGNATURE_INFO.rgCertEncoded$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


