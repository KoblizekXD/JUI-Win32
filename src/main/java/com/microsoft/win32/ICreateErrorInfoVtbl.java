// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct ICreateErrorInfoVtbl {
 *     HRESULT (*QueryInterface)(ICreateErrorInfo*,const IID*,void**);
 *     ULONG (*AddRef)(ICreateErrorInfo*);
 *     ULONG (*Release)(ICreateErrorInfo*);
 *     HRESULT (*SetGUID)(ICreateErrorInfo*,const GUID*);
 *     HRESULT (*SetSource)(ICreateErrorInfo*,LPOLESTR);
 *     HRESULT (*SetDescription)(ICreateErrorInfo*,LPOLESTR);
 *     HRESULT (*SetHelpFile)(ICreateErrorInfo*,LPOLESTR);
 *     HRESULT (*SetHelpContext)(ICreateErrorInfo*,DWORD);
 * };
 * }
 */
public class ICreateErrorInfoVtbl {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("SetGUID"),
        Constants$root.C_POINTER$LAYOUT.withName("SetSource"),
        Constants$root.C_POINTER$LAYOUT.withName("SetDescription"),
        Constants$root.C_POINTER$LAYOUT.withName("SetHelpFile"),
        Constants$root.C_POINTER$LAYOUT.withName("SetHelpContext")
    ).withName("ICreateErrorInfoVtbl");
    public static MemoryLayout $LAYOUT() {
        return ICreateErrorInfoVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor QueryInterface_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_UP$MH = RuntimeHelper.upcallHandle(QueryInterface.class, "apply", ICreateErrorInfoVtbl.QueryInterface_UP$FUNC);
    static final FunctionDescriptor QueryInterface_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateErrorInfoVtbl.QueryInterface_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(ICreateErrorInfo*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateErrorInfoVtbl.QueryInterface_UP$MH, fi, ICreateErrorInfoVtbl.QueryInterface$FUNC, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)ICreateErrorInfoVtbl.QueryInterface_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return ICreateErrorInfoVtbl.QueryInterface$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(ICreateErrorInfo*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateErrorInfoVtbl.QueryInterface$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(ICreateErrorInfo*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        ICreateErrorInfoVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateErrorInfoVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateErrorInfoVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, SegmentScope scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor AddRef_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_UP$MH = RuntimeHelper.upcallHandle(AddRef.class, "apply", ICreateErrorInfoVtbl.AddRef_UP$FUNC);
    static final FunctionDescriptor AddRef_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateErrorInfoVtbl.AddRef_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*AddRef)(ICreateErrorInfo*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateErrorInfoVtbl.AddRef_UP$MH, fi, ICreateErrorInfoVtbl.AddRef$FUNC, scope);
        }
        static AddRef ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)ICreateErrorInfoVtbl.AddRef_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return ICreateErrorInfoVtbl.AddRef$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(ICreateErrorInfo*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateErrorInfoVtbl.AddRef$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(ICreateErrorInfo*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        ICreateErrorInfoVtbl.AddRef$VH.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateErrorInfoVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateErrorInfoVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, SegmentScope scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Release_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_UP$MH = RuntimeHelper.upcallHandle(Release.class, "apply", ICreateErrorInfoVtbl.Release_UP$FUNC);
    static final FunctionDescriptor Release_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateErrorInfoVtbl.Release_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*Release)(ICreateErrorInfo*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateErrorInfoVtbl.Release_UP$MH, fi, ICreateErrorInfoVtbl.Release$FUNC, scope);
        }
        static Release ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)ICreateErrorInfoVtbl.Release_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return ICreateErrorInfoVtbl.Release$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(ICreateErrorInfo*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateErrorInfoVtbl.Release$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(ICreateErrorInfo*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        ICreateErrorInfoVtbl.Release$VH.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateErrorInfoVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateErrorInfoVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, SegmentScope scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    static final FunctionDescriptor SetGUID$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor SetGUID_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetGUID_UP$MH = RuntimeHelper.upcallHandle(SetGUID.class, "apply", ICreateErrorInfoVtbl.SetGUID_UP$FUNC);
    static final FunctionDescriptor SetGUID_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetGUID_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateErrorInfoVtbl.SetGUID_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetGUID)(ICreateErrorInfo*,const GUID*);
     * }
     */
    public interface SetGUID {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(SetGUID fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateErrorInfoVtbl.SetGUID_UP$MH, fi, ICreateErrorInfoVtbl.SetGUID$FUNC, scope);
        }
        static SetGUID ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)ICreateErrorInfoVtbl.SetGUID_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetGUID$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetGUID"));
    public static VarHandle SetGUID$VH() {
        return ICreateErrorInfoVtbl.SetGUID$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetGUID)(ICreateErrorInfo*,const GUID*);
     * }
     */
    public static MemorySegment SetGUID$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateErrorInfoVtbl.SetGUID$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetGUID)(ICreateErrorInfo*,const GUID*);
     * }
     */
    public static void SetGUID$set(MemorySegment seg, MemorySegment x) {
        ICreateErrorInfoVtbl.SetGUID$VH.set(seg, x);
    }
    public static MemorySegment SetGUID$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateErrorInfoVtbl.SetGUID$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetGUID$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateErrorInfoVtbl.SetGUID$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetGUID SetGUID(MemorySegment segment, SegmentScope scope) {
        return SetGUID.ofAddress(SetGUID$get(segment), scope);
    }
    static final FunctionDescriptor SetSource$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor SetSource_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetSource_UP$MH = RuntimeHelper.upcallHandle(SetSource.class, "apply", ICreateErrorInfoVtbl.SetSource_UP$FUNC);
    static final FunctionDescriptor SetSource_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetSource_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateErrorInfoVtbl.SetSource_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetSource)(ICreateErrorInfo*,LPOLESTR);
     * }
     */
    public interface SetSource {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(SetSource fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateErrorInfoVtbl.SetSource_UP$MH, fi, ICreateErrorInfoVtbl.SetSource$FUNC, scope);
        }
        static SetSource ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)ICreateErrorInfoVtbl.SetSource_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetSource$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetSource"));
    public static VarHandle SetSource$VH() {
        return ICreateErrorInfoVtbl.SetSource$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetSource)(ICreateErrorInfo*,LPOLESTR);
     * }
     */
    public static MemorySegment SetSource$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateErrorInfoVtbl.SetSource$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetSource)(ICreateErrorInfo*,LPOLESTR);
     * }
     */
    public static void SetSource$set(MemorySegment seg, MemorySegment x) {
        ICreateErrorInfoVtbl.SetSource$VH.set(seg, x);
    }
    public static MemorySegment SetSource$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateErrorInfoVtbl.SetSource$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetSource$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateErrorInfoVtbl.SetSource$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetSource SetSource(MemorySegment segment, SegmentScope scope) {
        return SetSource.ofAddress(SetSource$get(segment), scope);
    }
    static final FunctionDescriptor SetDescription$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor SetDescription_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetDescription_UP$MH = RuntimeHelper.upcallHandle(SetDescription.class, "apply", ICreateErrorInfoVtbl.SetDescription_UP$FUNC);
    static final FunctionDescriptor SetDescription_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetDescription_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateErrorInfoVtbl.SetDescription_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetDescription)(ICreateErrorInfo*,LPOLESTR);
     * }
     */
    public interface SetDescription {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(SetDescription fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateErrorInfoVtbl.SetDescription_UP$MH, fi, ICreateErrorInfoVtbl.SetDescription$FUNC, scope);
        }
        static SetDescription ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)ICreateErrorInfoVtbl.SetDescription_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetDescription$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetDescription"));
    public static VarHandle SetDescription$VH() {
        return ICreateErrorInfoVtbl.SetDescription$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetDescription)(ICreateErrorInfo*,LPOLESTR);
     * }
     */
    public static MemorySegment SetDescription$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateErrorInfoVtbl.SetDescription$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetDescription)(ICreateErrorInfo*,LPOLESTR);
     * }
     */
    public static void SetDescription$set(MemorySegment seg, MemorySegment x) {
        ICreateErrorInfoVtbl.SetDescription$VH.set(seg, x);
    }
    public static MemorySegment SetDescription$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateErrorInfoVtbl.SetDescription$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetDescription$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateErrorInfoVtbl.SetDescription$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetDescription SetDescription(MemorySegment segment, SegmentScope scope) {
        return SetDescription.ofAddress(SetDescription$get(segment), scope);
    }
    static final FunctionDescriptor SetHelpFile$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor SetHelpFile_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetHelpFile_UP$MH = RuntimeHelper.upcallHandle(SetHelpFile.class, "apply", ICreateErrorInfoVtbl.SetHelpFile_UP$FUNC);
    static final FunctionDescriptor SetHelpFile_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetHelpFile_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateErrorInfoVtbl.SetHelpFile_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetHelpFile)(ICreateErrorInfo*,LPOLESTR);
     * }
     */
    public interface SetHelpFile {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(SetHelpFile fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateErrorInfoVtbl.SetHelpFile_UP$MH, fi, ICreateErrorInfoVtbl.SetHelpFile$FUNC, scope);
        }
        static SetHelpFile ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)ICreateErrorInfoVtbl.SetHelpFile_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetHelpFile$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetHelpFile"));
    public static VarHandle SetHelpFile$VH() {
        return ICreateErrorInfoVtbl.SetHelpFile$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetHelpFile)(ICreateErrorInfo*,LPOLESTR);
     * }
     */
    public static MemorySegment SetHelpFile$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateErrorInfoVtbl.SetHelpFile$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetHelpFile)(ICreateErrorInfo*,LPOLESTR);
     * }
     */
    public static void SetHelpFile$set(MemorySegment seg, MemorySegment x) {
        ICreateErrorInfoVtbl.SetHelpFile$VH.set(seg, x);
    }
    public static MemorySegment SetHelpFile$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateErrorInfoVtbl.SetHelpFile$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetHelpFile$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateErrorInfoVtbl.SetHelpFile$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetHelpFile SetHelpFile(MemorySegment segment, SegmentScope scope) {
        return SetHelpFile.ofAddress(SetHelpFile$get(segment), scope);
    }
    static final FunctionDescriptor SetHelpContext$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor SetHelpContext_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle SetHelpContext_UP$MH = RuntimeHelper.upcallHandle(SetHelpContext.class, "apply", ICreateErrorInfoVtbl.SetHelpContext_UP$FUNC);
    static final FunctionDescriptor SetHelpContext_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle SetHelpContext_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateErrorInfoVtbl.SetHelpContext_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetHelpContext)(ICreateErrorInfo*,DWORD);
     * }
     */
    public interface SetHelpContext {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(SetHelpContext fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateErrorInfoVtbl.SetHelpContext_UP$MH, fi, ICreateErrorInfoVtbl.SetHelpContext$FUNC, scope);
        }
        static SetHelpContext ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)ICreateErrorInfoVtbl.SetHelpContext_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetHelpContext$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetHelpContext"));
    public static VarHandle SetHelpContext$VH() {
        return ICreateErrorInfoVtbl.SetHelpContext$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetHelpContext)(ICreateErrorInfo*,DWORD);
     * }
     */
    public static MemorySegment SetHelpContext$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateErrorInfoVtbl.SetHelpContext$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetHelpContext)(ICreateErrorInfo*,DWORD);
     * }
     */
    public static void SetHelpContext$set(MemorySegment seg, MemorySegment x) {
        ICreateErrorInfoVtbl.SetHelpContext$VH.set(seg, x);
    }
    public static MemorySegment SetHelpContext$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateErrorInfoVtbl.SetHelpContext$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetHelpContext$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateErrorInfoVtbl.SetHelpContext$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetHelpContext SetHelpContext(MemorySegment segment, SegmentScope scope) {
        return SetHelpContext.ofAddress(SetHelpContext$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


