// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct tagNC_ADDRESS {
 *     struct NET_ADDRESS_INFO_* pAddrInfo;
 *     USHORT PortNumber;
 *     BYTE PrefixLength;
 * };
 * }
 */
public class tagNC_ADDRESS {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("pAddrInfo"),
        Constants$root.C_SHORT$LAYOUT.withName("PortNumber"),
        Constants$root.C_CHAR$LAYOUT.withName("PrefixLength"),
        MemoryLayout.paddingLayout(40)
    ).withName("tagNC_ADDRESS");
    public static MemoryLayout $LAYOUT() {
        return tagNC_ADDRESS.$struct$LAYOUT;
    }
    static final VarHandle pAddrInfo$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pAddrInfo"));
    public static VarHandle pAddrInfo$VH() {
        return tagNC_ADDRESS.pAddrInfo$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct NET_ADDRESS_INFO_* pAddrInfo;
     * }
     */
    public static MemorySegment pAddrInfo$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)tagNC_ADDRESS.pAddrInfo$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct NET_ADDRESS_INFO_* pAddrInfo;
     * }
     */
    public static void pAddrInfo$set(MemorySegment seg, MemorySegment x) {
        tagNC_ADDRESS.pAddrInfo$VH.set(seg, x);
    }
    public static MemorySegment pAddrInfo$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)tagNC_ADDRESS.pAddrInfo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pAddrInfo$set(MemorySegment seg, long index, MemorySegment x) {
        tagNC_ADDRESS.pAddrInfo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle PortNumber$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("PortNumber"));
    public static VarHandle PortNumber$VH() {
        return tagNC_ADDRESS.PortNumber$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * USHORT PortNumber;
     * }
     */
    public static short PortNumber$get(MemorySegment seg) {
        return (short)tagNC_ADDRESS.PortNumber$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * USHORT PortNumber;
     * }
     */
    public static void PortNumber$set(MemorySegment seg, short x) {
        tagNC_ADDRESS.PortNumber$VH.set(seg, x);
    }
    public static short PortNumber$get(MemorySegment seg, long index) {
        return (short)tagNC_ADDRESS.PortNumber$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void PortNumber$set(MemorySegment seg, long index, short x) {
        tagNC_ADDRESS.PortNumber$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle PrefixLength$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("PrefixLength"));
    public static VarHandle PrefixLength$VH() {
        return tagNC_ADDRESS.PrefixLength$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE PrefixLength;
     * }
     */
    public static byte PrefixLength$get(MemorySegment seg) {
        return (byte)tagNC_ADDRESS.PrefixLength$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE PrefixLength;
     * }
     */
    public static void PrefixLength$set(MemorySegment seg, byte x) {
        tagNC_ADDRESS.PrefixLength$VH.set(seg, x);
    }
    public static byte PrefixLength$get(MemorySegment seg, long index) {
        return (byte)tagNC_ADDRESS.PrefixLength$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void PrefixLength$set(MemorySegment seg, long index, byte x) {
        tagNC_ADDRESS.PrefixLength$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


