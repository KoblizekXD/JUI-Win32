// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IStreamVtbl {
 *     HRESULT (*QueryInterface)(IStream*,const IID*,void**);
 *     ULONG (*AddRef)(IStream*);
 *     ULONG (*Release)(IStream*);
 *     HRESULT (*Read)(IStream*,void*,ULONG,ULONG*);
 *     HRESULT (*Write)(IStream*,void*,ULONG,ULONG*);
 *     HRESULT (*Seek)(IStream*,LARGE_INTEGER,DWORD,ULARGE_INTEGER*);
 *     HRESULT (*SetSize)(IStream*,ULARGE_INTEGER);
 *     HRESULT (*CopyTo)(IStream*,IStream*,ULARGE_INTEGER,ULARGE_INTEGER*,ULARGE_INTEGER*);
 *     HRESULT (*Commit)(IStream*,DWORD);
 *     HRESULT (*Revert)(IStream*);
 *     HRESULT (*LockRegion)(IStream*,ULARGE_INTEGER,ULARGE_INTEGER,DWORD);
 *     HRESULT (*UnlockRegion)(IStream*,ULARGE_INTEGER,ULARGE_INTEGER,DWORD);
 *     HRESULT (*Stat)(IStream*,STATSTG*,DWORD);
 *     HRESULT (*Clone)(IStream*,IStream**);
 * };
 * }
 */
public class IStreamVtbl {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("Read"),
        Constants$root.C_POINTER$LAYOUT.withName("Write"),
        Constants$root.C_POINTER$LAYOUT.withName("Seek"),
        Constants$root.C_POINTER$LAYOUT.withName("SetSize"),
        Constants$root.C_POINTER$LAYOUT.withName("CopyTo"),
        Constants$root.C_POINTER$LAYOUT.withName("Commit"),
        Constants$root.C_POINTER$LAYOUT.withName("Revert"),
        Constants$root.C_POINTER$LAYOUT.withName("LockRegion"),
        Constants$root.C_POINTER$LAYOUT.withName("UnlockRegion"),
        Constants$root.C_POINTER$LAYOUT.withName("Stat"),
        Constants$root.C_POINTER$LAYOUT.withName("Clone")
    ).withName("IStreamVtbl");
    public static MemoryLayout $LAYOUT() {
        return IStreamVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor QueryInterface_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_UP$MH = RuntimeHelper.upcallHandle(QueryInterface.class, "apply", IStreamVtbl.QueryInterface_UP$FUNC);
    static final FunctionDescriptor QueryInterface_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_DOWN$MH = RuntimeHelper.downcallHandle(
        IStreamVtbl.QueryInterface_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(IStream*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IStreamVtbl.QueryInterface_UP$MH, fi, IStreamVtbl.QueryInterface$FUNC, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IStreamVtbl.QueryInterface_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return IStreamVtbl.QueryInterface$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IStream*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IStreamVtbl.QueryInterface$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IStream*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        IStreamVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IStreamVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        IStreamVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, SegmentScope scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor AddRef_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_UP$MH = RuntimeHelper.upcallHandle(AddRef.class, "apply", IStreamVtbl.AddRef_UP$FUNC);
    static final FunctionDescriptor AddRef_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_DOWN$MH = RuntimeHelper.downcallHandle(
        IStreamVtbl.AddRef_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*AddRef)(IStream*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IStreamVtbl.AddRef_UP$MH, fi, IStreamVtbl.AddRef$FUNC, scope);
        }
        static AddRef ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IStreamVtbl.AddRef_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return IStreamVtbl.AddRef$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(IStream*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IStreamVtbl.AddRef$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(IStream*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        IStreamVtbl.AddRef$VH.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IStreamVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        IStreamVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, SegmentScope scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Release_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_UP$MH = RuntimeHelper.upcallHandle(Release.class, "apply", IStreamVtbl.Release_UP$FUNC);
    static final FunctionDescriptor Release_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_DOWN$MH = RuntimeHelper.downcallHandle(
        IStreamVtbl.Release_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*Release)(IStream*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IStreamVtbl.Release_UP$MH, fi, IStreamVtbl.Release$FUNC, scope);
        }
        static Release ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IStreamVtbl.Release_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return IStreamVtbl.Release$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(IStream*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IStreamVtbl.Release$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(IStream*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        IStreamVtbl.Release$VH.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IStreamVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        IStreamVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, SegmentScope scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    static final FunctionDescriptor Read$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Read_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Read_UP$MH = RuntimeHelper.upcallHandle(Read.class, "apply", IStreamVtbl.Read_UP$FUNC);
    static final FunctionDescriptor Read_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Read_DOWN$MH = RuntimeHelper.downcallHandle(
        IStreamVtbl.Read_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*Read)(IStream*,void*,ULONG,ULONG*);
     * }
     */
    public interface Read {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(Read fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IStreamVtbl.Read_UP$MH, fi, IStreamVtbl.Read$FUNC, scope);
        }
        static Read ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)IStreamVtbl.Read_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Read$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Read"));
    public static VarHandle Read$VH() {
        return IStreamVtbl.Read$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Read)(IStream*,void*,ULONG,ULONG*);
     * }
     */
    public static MemorySegment Read$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IStreamVtbl.Read$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Read)(IStream*,void*,ULONG,ULONG*);
     * }
     */
    public static void Read$set(MemorySegment seg, MemorySegment x) {
        IStreamVtbl.Read$VH.set(seg, x);
    }
    public static MemorySegment Read$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IStreamVtbl.Read$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Read$set(MemorySegment seg, long index, MemorySegment x) {
        IStreamVtbl.Read$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Read Read(MemorySegment segment, SegmentScope scope) {
        return Read.ofAddress(Read$get(segment), scope);
    }
    static final FunctionDescriptor Write$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Write_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Write_UP$MH = RuntimeHelper.upcallHandle(Write.class, "apply", IStreamVtbl.Write_UP$FUNC);
    static final FunctionDescriptor Write_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Write_DOWN$MH = RuntimeHelper.downcallHandle(
        IStreamVtbl.Write_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*Write)(IStream*,void*,ULONG,ULONG*);
     * }
     */
    public interface Write {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(Write fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IStreamVtbl.Write_UP$MH, fi, IStreamVtbl.Write$FUNC, scope);
        }
        static Write ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)IStreamVtbl.Write_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Write$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Write"));
    public static VarHandle Write$VH() {
        return IStreamVtbl.Write$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Write)(IStream*,void*,ULONG,ULONG*);
     * }
     */
    public static MemorySegment Write$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IStreamVtbl.Write$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Write)(IStream*,void*,ULONG,ULONG*);
     * }
     */
    public static void Write$set(MemorySegment seg, MemorySegment x) {
        IStreamVtbl.Write$VH.set(seg, x);
    }
    public static MemorySegment Write$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IStreamVtbl.Write$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Write$set(MemorySegment seg, long index, MemorySegment x) {
        IStreamVtbl.Write$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Write Write(MemorySegment segment, SegmentScope scope) {
        return Write.ofAddress(Write$get(segment), scope);
    }
    static final FunctionDescriptor Seek$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("_LARGE_INTEGER"),
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Seek_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("_LARGE_INTEGER"),
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Seek_UP$MH = RuntimeHelper.upcallHandle(Seek.class, "apply", IStreamVtbl.Seek_UP$FUNC);
    static final FunctionDescriptor Seek_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("_LARGE_INTEGER"),
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Seek_DOWN$MH = RuntimeHelper.downcallHandle(
        IStreamVtbl.Seek_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*Seek)(IStream*,LARGE_INTEGER,DWORD,ULARGE_INTEGER*);
     * }
     */
    public interface Seek {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(Seek fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IStreamVtbl.Seek_UP$MH, fi, IStreamVtbl.Seek$FUNC, scope);
        }
        static Seek ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)IStreamVtbl.Seek_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Seek$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Seek"));
    public static VarHandle Seek$VH() {
        return IStreamVtbl.Seek$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Seek)(IStream*,LARGE_INTEGER,DWORD,ULARGE_INTEGER*);
     * }
     */
    public static MemorySegment Seek$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IStreamVtbl.Seek$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Seek)(IStream*,LARGE_INTEGER,DWORD,ULARGE_INTEGER*);
     * }
     */
    public static void Seek$set(MemorySegment seg, MemorySegment x) {
        IStreamVtbl.Seek$VH.set(seg, x);
    }
    public static MemorySegment Seek$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IStreamVtbl.Seek$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Seek$set(MemorySegment seg, long index, MemorySegment x) {
        IStreamVtbl.Seek$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Seek Seek(MemorySegment segment, SegmentScope scope) {
        return Seek.ofAddress(Seek$get(segment), scope);
    }
    static final FunctionDescriptor SetSize$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("_ULARGE_INTEGER")
    );
    static final FunctionDescriptor SetSize_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("_ULARGE_INTEGER")
    );
    static final MethodHandle SetSize_UP$MH = RuntimeHelper.upcallHandle(SetSize.class, "apply", IStreamVtbl.SetSize_UP$FUNC);
    static final FunctionDescriptor SetSize_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("_ULARGE_INTEGER")
    );
    static final MethodHandle SetSize_DOWN$MH = RuntimeHelper.downcallHandle(
        IStreamVtbl.SetSize_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetSize)(IStream*,ULARGE_INTEGER);
     * }
     */
    public interface SetSize {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(SetSize fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IStreamVtbl.SetSize_UP$MH, fi, IStreamVtbl.SetSize$FUNC, scope);
        }
        static SetSize ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IStreamVtbl.SetSize_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetSize"));
    public static VarHandle SetSize$VH() {
        return IStreamVtbl.SetSize$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetSize)(IStream*,ULARGE_INTEGER);
     * }
     */
    public static MemorySegment SetSize$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IStreamVtbl.SetSize$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetSize)(IStream*,ULARGE_INTEGER);
     * }
     */
    public static void SetSize$set(MemorySegment seg, MemorySegment x) {
        IStreamVtbl.SetSize$VH.set(seg, x);
    }
    public static MemorySegment SetSize$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IStreamVtbl.SetSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetSize$set(MemorySegment seg, long index, MemorySegment x) {
        IStreamVtbl.SetSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetSize SetSize(MemorySegment segment, SegmentScope scope) {
        return SetSize.ofAddress(SetSize$get(segment), scope);
    }
    static final FunctionDescriptor CopyTo$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("_ULARGE_INTEGER"),
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor CopyTo_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("_ULARGE_INTEGER"),
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle CopyTo_UP$MH = RuntimeHelper.upcallHandle(CopyTo.class, "apply", IStreamVtbl.CopyTo_UP$FUNC);
    static final FunctionDescriptor CopyTo_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("_ULARGE_INTEGER"),
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle CopyTo_DOWN$MH = RuntimeHelper.downcallHandle(
        IStreamVtbl.CopyTo_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*CopyTo)(IStream*,IStream*,ULARGE_INTEGER,ULARGE_INTEGER*,ULARGE_INTEGER*);
     * }
     */
    public interface CopyTo {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(CopyTo fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IStreamVtbl.CopyTo_UP$MH, fi, IStreamVtbl.CopyTo$FUNC, scope);
        }
        static CopyTo ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (int)IStreamVtbl.CopyTo_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle CopyTo$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("CopyTo"));
    public static VarHandle CopyTo$VH() {
        return IStreamVtbl.CopyTo$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*CopyTo)(IStream*,IStream*,ULARGE_INTEGER,ULARGE_INTEGER*,ULARGE_INTEGER*);
     * }
     */
    public static MemorySegment CopyTo$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IStreamVtbl.CopyTo$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*CopyTo)(IStream*,IStream*,ULARGE_INTEGER,ULARGE_INTEGER*,ULARGE_INTEGER*);
     * }
     */
    public static void CopyTo$set(MemorySegment seg, MemorySegment x) {
        IStreamVtbl.CopyTo$VH.set(seg, x);
    }
    public static MemorySegment CopyTo$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IStreamVtbl.CopyTo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CopyTo$set(MemorySegment seg, long index, MemorySegment x) {
        IStreamVtbl.CopyTo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static CopyTo CopyTo(MemorySegment segment, SegmentScope scope) {
        return CopyTo.ofAddress(CopyTo$get(segment), scope);
    }
    static final FunctionDescriptor Commit$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor Commit_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle Commit_UP$MH = RuntimeHelper.upcallHandle(Commit.class, "apply", IStreamVtbl.Commit_UP$FUNC);
    static final FunctionDescriptor Commit_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle Commit_DOWN$MH = RuntimeHelper.downcallHandle(
        IStreamVtbl.Commit_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*Commit)(IStream*,DWORD);
     * }
     */
    public interface Commit {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(Commit fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IStreamVtbl.Commit_UP$MH, fi, IStreamVtbl.Commit$FUNC, scope);
        }
        static Commit ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)IStreamVtbl.Commit_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Commit$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Commit"));
    public static VarHandle Commit$VH() {
        return IStreamVtbl.Commit$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Commit)(IStream*,DWORD);
     * }
     */
    public static MemorySegment Commit$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IStreamVtbl.Commit$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Commit)(IStream*,DWORD);
     * }
     */
    public static void Commit$set(MemorySegment seg, MemorySegment x) {
        IStreamVtbl.Commit$VH.set(seg, x);
    }
    public static MemorySegment Commit$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IStreamVtbl.Commit$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Commit$set(MemorySegment seg, long index, MemorySegment x) {
        IStreamVtbl.Commit$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Commit Commit(MemorySegment segment, SegmentScope scope) {
        return Commit.ofAddress(Commit$get(segment), scope);
    }
    static final FunctionDescriptor Revert$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Revert_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Revert_UP$MH = RuntimeHelper.upcallHandle(Revert.class, "apply", IStreamVtbl.Revert_UP$FUNC);
    static final FunctionDescriptor Revert_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Revert_DOWN$MH = RuntimeHelper.downcallHandle(
        IStreamVtbl.Revert_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*Revert)(IStream*);
     * }
     */
    public interface Revert {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Revert fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IStreamVtbl.Revert_UP$MH, fi, IStreamVtbl.Revert$FUNC, scope);
        }
        static Revert ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IStreamVtbl.Revert_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Revert$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Revert"));
    public static VarHandle Revert$VH() {
        return IStreamVtbl.Revert$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Revert)(IStream*);
     * }
     */
    public static MemorySegment Revert$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IStreamVtbl.Revert$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Revert)(IStream*);
     * }
     */
    public static void Revert$set(MemorySegment seg, MemorySegment x) {
        IStreamVtbl.Revert$VH.set(seg, x);
    }
    public static MemorySegment Revert$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IStreamVtbl.Revert$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Revert$set(MemorySegment seg, long index, MemorySegment x) {
        IStreamVtbl.Revert$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Revert Revert(MemorySegment segment, SegmentScope scope) {
        return Revert.ofAddress(Revert$get(segment), scope);
    }
    static final FunctionDescriptor LockRegion$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("_ULARGE_INTEGER"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("_ULARGE_INTEGER"),
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor LockRegion_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("_ULARGE_INTEGER"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("_ULARGE_INTEGER"),
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle LockRegion_UP$MH = RuntimeHelper.upcallHandle(LockRegion.class, "apply", IStreamVtbl.LockRegion_UP$FUNC);
    static final FunctionDescriptor LockRegion_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("_ULARGE_INTEGER"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("_ULARGE_INTEGER"),
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle LockRegion_DOWN$MH = RuntimeHelper.downcallHandle(
        IStreamVtbl.LockRegion_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*LockRegion)(IStream*,ULARGE_INTEGER,ULARGE_INTEGER,DWORD);
     * }
     */
    public interface LockRegion {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3);
        static MemorySegment allocate(LockRegion fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IStreamVtbl.LockRegion_UP$MH, fi, IStreamVtbl.LockRegion$FUNC, scope);
        }
        static LockRegion ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3) -> {
                try {
                    return (int)IStreamVtbl.LockRegion_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle LockRegion$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("LockRegion"));
    public static VarHandle LockRegion$VH() {
        return IStreamVtbl.LockRegion$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*LockRegion)(IStream*,ULARGE_INTEGER,ULARGE_INTEGER,DWORD);
     * }
     */
    public static MemorySegment LockRegion$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IStreamVtbl.LockRegion$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*LockRegion)(IStream*,ULARGE_INTEGER,ULARGE_INTEGER,DWORD);
     * }
     */
    public static void LockRegion$set(MemorySegment seg, MemorySegment x) {
        IStreamVtbl.LockRegion$VH.set(seg, x);
    }
    public static MemorySegment LockRegion$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IStreamVtbl.LockRegion$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void LockRegion$set(MemorySegment seg, long index, MemorySegment x) {
        IStreamVtbl.LockRegion$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static LockRegion LockRegion(MemorySegment segment, SegmentScope scope) {
        return LockRegion.ofAddress(LockRegion$get(segment), scope);
    }
    static final FunctionDescriptor UnlockRegion$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("_ULARGE_INTEGER"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("_ULARGE_INTEGER"),
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor UnlockRegion_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("_ULARGE_INTEGER"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("_ULARGE_INTEGER"),
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle UnlockRegion_UP$MH = RuntimeHelper.upcallHandle(UnlockRegion.class, "apply", IStreamVtbl.UnlockRegion_UP$FUNC);
    static final FunctionDescriptor UnlockRegion_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("_ULARGE_INTEGER"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("_ULARGE_INTEGER"),
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle UnlockRegion_DOWN$MH = RuntimeHelper.downcallHandle(
        IStreamVtbl.UnlockRegion_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*UnlockRegion)(IStream*,ULARGE_INTEGER,ULARGE_INTEGER,DWORD);
     * }
     */
    public interface UnlockRegion {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3);
        static MemorySegment allocate(UnlockRegion fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IStreamVtbl.UnlockRegion_UP$MH, fi, IStreamVtbl.UnlockRegion$FUNC, scope);
        }
        static UnlockRegion ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3) -> {
                try {
                    return (int)IStreamVtbl.UnlockRegion_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle UnlockRegion$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("UnlockRegion"));
    public static VarHandle UnlockRegion$VH() {
        return IStreamVtbl.UnlockRegion$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*UnlockRegion)(IStream*,ULARGE_INTEGER,ULARGE_INTEGER,DWORD);
     * }
     */
    public static MemorySegment UnlockRegion$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IStreamVtbl.UnlockRegion$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*UnlockRegion)(IStream*,ULARGE_INTEGER,ULARGE_INTEGER,DWORD);
     * }
     */
    public static void UnlockRegion$set(MemorySegment seg, MemorySegment x) {
        IStreamVtbl.UnlockRegion$VH.set(seg, x);
    }
    public static MemorySegment UnlockRegion$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IStreamVtbl.UnlockRegion$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void UnlockRegion$set(MemorySegment seg, long index, MemorySegment x) {
        IStreamVtbl.UnlockRegion$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static UnlockRegion UnlockRegion(MemorySegment segment, SegmentScope scope) {
        return UnlockRegion.ofAddress(UnlockRegion$get(segment), scope);
    }
    static final FunctionDescriptor Stat$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor Stat_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle Stat_UP$MH = RuntimeHelper.upcallHandle(Stat.class, "apply", IStreamVtbl.Stat_UP$FUNC);
    static final FunctionDescriptor Stat_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle Stat_DOWN$MH = RuntimeHelper.downcallHandle(
        IStreamVtbl.Stat_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*Stat)(IStream*,STATSTG*,DWORD);
     * }
     */
    public interface Stat {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2);
        static MemorySegment allocate(Stat fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IStreamVtbl.Stat_UP$MH, fi, IStreamVtbl.Stat$FUNC, scope);
        }
        static Stat ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2) -> {
                try {
                    return (int)IStreamVtbl.Stat_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Stat$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Stat"));
    public static VarHandle Stat$VH() {
        return IStreamVtbl.Stat$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Stat)(IStream*,STATSTG*,DWORD);
     * }
     */
    public static MemorySegment Stat$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IStreamVtbl.Stat$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Stat)(IStream*,STATSTG*,DWORD);
     * }
     */
    public static void Stat$set(MemorySegment seg, MemorySegment x) {
        IStreamVtbl.Stat$VH.set(seg, x);
    }
    public static MemorySegment Stat$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IStreamVtbl.Stat$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Stat$set(MemorySegment seg, long index, MemorySegment x) {
        IStreamVtbl.Stat$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Stat Stat(MemorySegment segment, SegmentScope scope) {
        return Stat.ofAddress(Stat$get(segment), scope);
    }
    static final FunctionDescriptor Clone$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Clone_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Clone_UP$MH = RuntimeHelper.upcallHandle(Clone.class, "apply", IStreamVtbl.Clone_UP$FUNC);
    static final FunctionDescriptor Clone_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Clone_DOWN$MH = RuntimeHelper.downcallHandle(
        IStreamVtbl.Clone_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*Clone)(IStream*,IStream**);
     * }
     */
    public interface Clone {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(Clone fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IStreamVtbl.Clone_UP$MH, fi, IStreamVtbl.Clone$FUNC, scope);
        }
        static Clone ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IStreamVtbl.Clone_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Clone$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Clone"));
    public static VarHandle Clone$VH() {
        return IStreamVtbl.Clone$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Clone)(IStream*,IStream**);
     * }
     */
    public static MemorySegment Clone$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IStreamVtbl.Clone$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Clone)(IStream*,IStream**);
     * }
     */
    public static void Clone$set(MemorySegment seg, MemorySegment x) {
        IStreamVtbl.Clone$VH.set(seg, x);
    }
    public static MemorySegment Clone$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IStreamVtbl.Clone$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Clone$set(MemorySegment seg, long index, MemorySegment x) {
        IStreamVtbl.Clone$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Clone Clone(MemorySegment segment, SegmentScope scope) {
        return Clone.ofAddress(Clone$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


