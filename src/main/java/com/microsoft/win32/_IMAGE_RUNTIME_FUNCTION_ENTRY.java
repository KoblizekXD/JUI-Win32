// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _IMAGE_RUNTIME_FUNCTION_ENTRY {
 *     DWORD BeginAddress;
 *     DWORD EndAddress;
 *     union {
 *         DWORD UnwindInfoAddress;
 *         DWORD UnwindData;
 *     };
 * };
 * }
 */
public class _IMAGE_RUNTIME_FUNCTION_ENTRY {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("BeginAddress"),
        Constants$root.C_LONG$LAYOUT.withName("EndAddress"),
        MemoryLayout.unionLayout(
            Constants$root.C_LONG$LAYOUT.withName("UnwindInfoAddress"),
            Constants$root.C_LONG$LAYOUT.withName("UnwindData")
        ).withName("$anon$0")
    ).withName("_IMAGE_RUNTIME_FUNCTION_ENTRY");
    public static MemoryLayout $LAYOUT() {
        return _IMAGE_RUNTIME_FUNCTION_ENTRY.$struct$LAYOUT;
    }
    static final VarHandle BeginAddress$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("BeginAddress"));
    public static VarHandle BeginAddress$VH() {
        return _IMAGE_RUNTIME_FUNCTION_ENTRY.BeginAddress$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD BeginAddress;
     * }
     */
    public static int BeginAddress$get(MemorySegment seg) {
        return (int)_IMAGE_RUNTIME_FUNCTION_ENTRY.BeginAddress$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD BeginAddress;
     * }
     */
    public static void BeginAddress$set(MemorySegment seg, int x) {
        _IMAGE_RUNTIME_FUNCTION_ENTRY.BeginAddress$VH.set(seg, x);
    }
    public static int BeginAddress$get(MemorySegment seg, long index) {
        return (int)_IMAGE_RUNTIME_FUNCTION_ENTRY.BeginAddress$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void BeginAddress$set(MemorySegment seg, long index, int x) {
        _IMAGE_RUNTIME_FUNCTION_ENTRY.BeginAddress$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle EndAddress$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("EndAddress"));
    public static VarHandle EndAddress$VH() {
        return _IMAGE_RUNTIME_FUNCTION_ENTRY.EndAddress$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD EndAddress;
     * }
     */
    public static int EndAddress$get(MemorySegment seg) {
        return (int)_IMAGE_RUNTIME_FUNCTION_ENTRY.EndAddress$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD EndAddress;
     * }
     */
    public static void EndAddress$set(MemorySegment seg, int x) {
        _IMAGE_RUNTIME_FUNCTION_ENTRY.EndAddress$VH.set(seg, x);
    }
    public static int EndAddress$get(MemorySegment seg, long index) {
        return (int)_IMAGE_RUNTIME_FUNCTION_ENTRY.EndAddress$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void EndAddress$set(MemorySegment seg, long index, int x) {
        _IMAGE_RUNTIME_FUNCTION_ENTRY.EndAddress$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle UnwindInfoAddress$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("UnwindInfoAddress"));
    public static VarHandle UnwindInfoAddress$VH() {
        return _IMAGE_RUNTIME_FUNCTION_ENTRY.UnwindInfoAddress$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD UnwindInfoAddress;
     * }
     */
    public static int UnwindInfoAddress$get(MemorySegment seg) {
        return (int)_IMAGE_RUNTIME_FUNCTION_ENTRY.UnwindInfoAddress$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD UnwindInfoAddress;
     * }
     */
    public static void UnwindInfoAddress$set(MemorySegment seg, int x) {
        _IMAGE_RUNTIME_FUNCTION_ENTRY.UnwindInfoAddress$VH.set(seg, x);
    }
    public static int UnwindInfoAddress$get(MemorySegment seg, long index) {
        return (int)_IMAGE_RUNTIME_FUNCTION_ENTRY.UnwindInfoAddress$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void UnwindInfoAddress$set(MemorySegment seg, long index, int x) {
        _IMAGE_RUNTIME_FUNCTION_ENTRY.UnwindInfoAddress$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle UnwindData$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("UnwindData"));
    public static VarHandle UnwindData$VH() {
        return _IMAGE_RUNTIME_FUNCTION_ENTRY.UnwindData$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD UnwindData;
     * }
     */
    public static int UnwindData$get(MemorySegment seg) {
        return (int)_IMAGE_RUNTIME_FUNCTION_ENTRY.UnwindData$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD UnwindData;
     * }
     */
    public static void UnwindData$set(MemorySegment seg, int x) {
        _IMAGE_RUNTIME_FUNCTION_ENTRY.UnwindData$VH.set(seg, x);
    }
    public static int UnwindData$get(MemorySegment seg, long index) {
        return (int)_IMAGE_RUNTIME_FUNCTION_ENTRY.UnwindData$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void UnwindData$set(MemorySegment seg, long index, int x) {
        _IMAGE_RUNTIME_FUNCTION_ENTRY.UnwindData$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


