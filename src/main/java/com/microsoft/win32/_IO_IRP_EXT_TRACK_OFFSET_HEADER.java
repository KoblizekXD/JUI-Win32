// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _IO_IRP_EXT_TRACK_OFFSET_HEADER {
 *     WORD Validation;
 *     WORD Flags;
 *     PIO_IRP_EXT_PROCESS_TRACKED_OFFSET_CALLBACK TrackedOffsetCallback;
 * };
 * }
 */
public class _IO_IRP_EXT_TRACK_OFFSET_HEADER {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_SHORT$LAYOUT.withName("Validation"),
        Constants$root.C_SHORT$LAYOUT.withName("Flags"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("TrackedOffsetCallback")
    ).withName("_IO_IRP_EXT_TRACK_OFFSET_HEADER");
    public static MemoryLayout $LAYOUT() {
        return _IO_IRP_EXT_TRACK_OFFSET_HEADER.$struct$LAYOUT;
    }
    static final VarHandle Validation$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Validation"));
    public static VarHandle Validation$VH() {
        return _IO_IRP_EXT_TRACK_OFFSET_HEADER.Validation$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD Validation;
     * }
     */
    public static short Validation$get(MemorySegment seg) {
        return (short)_IO_IRP_EXT_TRACK_OFFSET_HEADER.Validation$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD Validation;
     * }
     */
    public static void Validation$set(MemorySegment seg, short x) {
        _IO_IRP_EXT_TRACK_OFFSET_HEADER.Validation$VH.set(seg, x);
    }
    public static short Validation$get(MemorySegment seg, long index) {
        return (short)_IO_IRP_EXT_TRACK_OFFSET_HEADER.Validation$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Validation$set(MemorySegment seg, long index, short x) {
        _IO_IRP_EXT_TRACK_OFFSET_HEADER.Validation$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Flags"));
    public static VarHandle Flags$VH() {
        return _IO_IRP_EXT_TRACK_OFFSET_HEADER.Flags$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD Flags;
     * }
     */
    public static short Flags$get(MemorySegment seg) {
        return (short)_IO_IRP_EXT_TRACK_OFFSET_HEADER.Flags$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD Flags;
     * }
     */
    public static void Flags$set(MemorySegment seg, short x) {
        _IO_IRP_EXT_TRACK_OFFSET_HEADER.Flags$VH.set(seg, x);
    }
    public static short Flags$get(MemorySegment seg, long index) {
        return (short)_IO_IRP_EXT_TRACK_OFFSET_HEADER.Flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Flags$set(MemorySegment seg, long index, short x) {
        _IO_IRP_EXT_TRACK_OFFSET_HEADER.Flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle TrackedOffsetCallback$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("TrackedOffsetCallback"));
    public static VarHandle TrackedOffsetCallback$VH() {
        return _IO_IRP_EXT_TRACK_OFFSET_HEADER.TrackedOffsetCallback$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PIO_IRP_EXT_PROCESS_TRACKED_OFFSET_CALLBACK TrackedOffsetCallback;
     * }
     */
    public static MemorySegment TrackedOffsetCallback$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_IO_IRP_EXT_TRACK_OFFSET_HEADER.TrackedOffsetCallback$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PIO_IRP_EXT_PROCESS_TRACKED_OFFSET_CALLBACK TrackedOffsetCallback;
     * }
     */
    public static void TrackedOffsetCallback$set(MemorySegment seg, MemorySegment x) {
        _IO_IRP_EXT_TRACK_OFFSET_HEADER.TrackedOffsetCallback$VH.set(seg, x);
    }
    public static MemorySegment TrackedOffsetCallback$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_IO_IRP_EXT_TRACK_OFFSET_HEADER.TrackedOffsetCallback$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void TrackedOffsetCallback$set(MemorySegment seg, long index, MemorySegment x) {
        _IO_IRP_EXT_TRACK_OFFSET_HEADER.TrackedOffsetCallback$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static PIO_IRP_EXT_PROCESS_TRACKED_OFFSET_CALLBACK TrackedOffsetCallback(MemorySegment segment, SegmentScope scope) {
        return PIO_IRP_EXT_PROCESS_TRACKED_OFFSET_CALLBACK.ofAddress(TrackedOffsetCallback$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


