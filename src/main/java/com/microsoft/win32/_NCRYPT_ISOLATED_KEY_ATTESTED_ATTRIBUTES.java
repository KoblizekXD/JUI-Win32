// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES {
 *     ULONG Version;
 *     ULONG Flags;
 *     ULONG cbPublicKeyBlob;
 * };
 * }
 */
public class _NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("Version"),
        Constants$root.C_LONG$LAYOUT.withName("Flags"),
        Constants$root.C_LONG$LAYOUT.withName("cbPublicKeyBlob")
    ).withName("_NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES");
    public static MemoryLayout $LAYOUT() {
        return _NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES.$struct$LAYOUT;
    }
    static final VarHandle Version$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Version"));
    public static VarHandle Version$VH() {
        return _NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES.Version$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG Version;
     * }
     */
    public static int Version$get(MemorySegment seg) {
        return (int)_NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES.Version$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG Version;
     * }
     */
    public static void Version$set(MemorySegment seg, int x) {
        _NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES.Version$VH.set(seg, x);
    }
    public static int Version$get(MemorySegment seg, long index) {
        return (int)_NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES.Version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Version$set(MemorySegment seg, long index, int x) {
        _NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES.Version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Flags"));
    public static VarHandle Flags$VH() {
        return _NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES.Flags$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG Flags;
     * }
     */
    public static int Flags$get(MemorySegment seg) {
        return (int)_NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES.Flags$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG Flags;
     * }
     */
    public static void Flags$set(MemorySegment seg, int x) {
        _NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES.Flags$VH.set(seg, x);
    }
    public static int Flags$get(MemorySegment seg, long index) {
        return (int)_NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES.Flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Flags$set(MemorySegment seg, long index, int x) {
        _NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES.Flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cbPublicKeyBlob$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cbPublicKeyBlob"));
    public static VarHandle cbPublicKeyBlob$VH() {
        return _NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES.cbPublicKeyBlob$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG cbPublicKeyBlob;
     * }
     */
    public static int cbPublicKeyBlob$get(MemorySegment seg) {
        return (int)_NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES.cbPublicKeyBlob$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG cbPublicKeyBlob;
     * }
     */
    public static void cbPublicKeyBlob$set(MemorySegment seg, int x) {
        _NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES.cbPublicKeyBlob$VH.set(seg, x);
    }
    public static int cbPublicKeyBlob$get(MemorySegment seg, long index) {
        return (int)_NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES.cbPublicKeyBlob$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cbPublicKeyBlob$set(MemorySegment seg, long index, int x) {
        _NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES.cbPublicKeyBlob$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


