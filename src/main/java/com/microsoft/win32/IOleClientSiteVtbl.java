// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IOleClientSiteVtbl {
 *     HRESULT (*QueryInterface)(IOleClientSite*,const IID*,void**);
 *     ULONG (*AddRef)(IOleClientSite*);
 *     ULONG (*Release)(IOleClientSite*);
 *     HRESULT (*SaveObject)(IOleClientSite*);
 *     HRESULT (*GetMoniker)(IOleClientSite*,DWORD,DWORD,IMoniker**);
 *     HRESULT (*GetContainer)(IOleClientSite*,IOleContainer**);
 *     HRESULT (*ShowObject)(IOleClientSite*);
 *     HRESULT (*OnShowWindow)(IOleClientSite*,BOOL);
 *     HRESULT (*RequestNewObjectLayout)(IOleClientSite*);
 * };
 * }
 */
public class IOleClientSiteVtbl {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("SaveObject"),
        Constants$root.C_POINTER$LAYOUT.withName("GetMoniker"),
        Constants$root.C_POINTER$LAYOUT.withName("GetContainer"),
        Constants$root.C_POINTER$LAYOUT.withName("ShowObject"),
        Constants$root.C_POINTER$LAYOUT.withName("OnShowWindow"),
        Constants$root.C_POINTER$LAYOUT.withName("RequestNewObjectLayout")
    ).withName("IOleClientSiteVtbl");
    public static MemoryLayout $LAYOUT() {
        return IOleClientSiteVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor QueryInterface_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_UP$MH = RuntimeHelper.upcallHandle(QueryInterface.class, "apply", IOleClientSiteVtbl.QueryInterface_UP$FUNC);
    static final FunctionDescriptor QueryInterface_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_DOWN$MH = RuntimeHelper.downcallHandle(
        IOleClientSiteVtbl.QueryInterface_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(IOleClientSite*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IOleClientSiteVtbl.QueryInterface_UP$MH, fi, IOleClientSiteVtbl.QueryInterface$FUNC, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IOleClientSiteVtbl.QueryInterface_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return IOleClientSiteVtbl.QueryInterface$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IOleClientSite*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOleClientSiteVtbl.QueryInterface$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IOleClientSite*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        IOleClientSiteVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOleClientSiteVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        IOleClientSiteVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, SegmentScope scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor AddRef_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_UP$MH = RuntimeHelper.upcallHandle(AddRef.class, "apply", IOleClientSiteVtbl.AddRef_UP$FUNC);
    static final FunctionDescriptor AddRef_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_DOWN$MH = RuntimeHelper.downcallHandle(
        IOleClientSiteVtbl.AddRef_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*AddRef)(IOleClientSite*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IOleClientSiteVtbl.AddRef_UP$MH, fi, IOleClientSiteVtbl.AddRef$FUNC, scope);
        }
        static AddRef ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IOleClientSiteVtbl.AddRef_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return IOleClientSiteVtbl.AddRef$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(IOleClientSite*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOleClientSiteVtbl.AddRef$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(IOleClientSite*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        IOleClientSiteVtbl.AddRef$VH.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOleClientSiteVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        IOleClientSiteVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, SegmentScope scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Release_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_UP$MH = RuntimeHelper.upcallHandle(Release.class, "apply", IOleClientSiteVtbl.Release_UP$FUNC);
    static final FunctionDescriptor Release_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_DOWN$MH = RuntimeHelper.downcallHandle(
        IOleClientSiteVtbl.Release_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*Release)(IOleClientSite*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IOleClientSiteVtbl.Release_UP$MH, fi, IOleClientSiteVtbl.Release$FUNC, scope);
        }
        static Release ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IOleClientSiteVtbl.Release_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return IOleClientSiteVtbl.Release$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(IOleClientSite*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOleClientSiteVtbl.Release$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(IOleClientSite*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        IOleClientSiteVtbl.Release$VH.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOleClientSiteVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        IOleClientSiteVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, SegmentScope scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    static final FunctionDescriptor SaveObject$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor SaveObject_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SaveObject_UP$MH = RuntimeHelper.upcallHandle(SaveObject.class, "apply", IOleClientSiteVtbl.SaveObject_UP$FUNC);
    static final FunctionDescriptor SaveObject_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SaveObject_DOWN$MH = RuntimeHelper.downcallHandle(
        IOleClientSiteVtbl.SaveObject_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SaveObject)(IOleClientSite*);
     * }
     */
    public interface SaveObject {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(SaveObject fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IOleClientSiteVtbl.SaveObject_UP$MH, fi, IOleClientSiteVtbl.SaveObject$FUNC, scope);
        }
        static SaveObject ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IOleClientSiteVtbl.SaveObject_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SaveObject$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SaveObject"));
    public static VarHandle SaveObject$VH() {
        return IOleClientSiteVtbl.SaveObject$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SaveObject)(IOleClientSite*);
     * }
     */
    public static MemorySegment SaveObject$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOleClientSiteVtbl.SaveObject$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SaveObject)(IOleClientSite*);
     * }
     */
    public static void SaveObject$set(MemorySegment seg, MemorySegment x) {
        IOleClientSiteVtbl.SaveObject$VH.set(seg, x);
    }
    public static MemorySegment SaveObject$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOleClientSiteVtbl.SaveObject$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SaveObject$set(MemorySegment seg, long index, MemorySegment x) {
        IOleClientSiteVtbl.SaveObject$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SaveObject SaveObject(MemorySegment segment, SegmentScope scope) {
        return SaveObject.ofAddress(SaveObject$get(segment), scope);
    }
    static final FunctionDescriptor GetMoniker$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetMoniker_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetMoniker_UP$MH = RuntimeHelper.upcallHandle(GetMoniker.class, "apply", IOleClientSiteVtbl.GetMoniker_UP$FUNC);
    static final FunctionDescriptor GetMoniker_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetMoniker_DOWN$MH = RuntimeHelper.downcallHandle(
        IOleClientSiteVtbl.GetMoniker_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetMoniker)(IOleClientSite*,DWORD,DWORD,IMoniker**);
     * }
     */
    public interface GetMoniker {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(GetMoniker fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IOleClientSiteVtbl.GetMoniker_UP$MH, fi, IOleClientSiteVtbl.GetMoniker$FUNC, scope);
        }
        static GetMoniker ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)IOleClientSiteVtbl.GetMoniker_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetMoniker$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetMoniker"));
    public static VarHandle GetMoniker$VH() {
        return IOleClientSiteVtbl.GetMoniker$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetMoniker)(IOleClientSite*,DWORD,DWORD,IMoniker**);
     * }
     */
    public static MemorySegment GetMoniker$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOleClientSiteVtbl.GetMoniker$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetMoniker)(IOleClientSite*,DWORD,DWORD,IMoniker**);
     * }
     */
    public static void GetMoniker$set(MemorySegment seg, MemorySegment x) {
        IOleClientSiteVtbl.GetMoniker$VH.set(seg, x);
    }
    public static MemorySegment GetMoniker$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOleClientSiteVtbl.GetMoniker$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetMoniker$set(MemorySegment seg, long index, MemorySegment x) {
        IOleClientSiteVtbl.GetMoniker$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetMoniker GetMoniker(MemorySegment segment, SegmentScope scope) {
        return GetMoniker.ofAddress(GetMoniker$get(segment), scope);
    }
    static final FunctionDescriptor GetContainer$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetContainer_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetContainer_UP$MH = RuntimeHelper.upcallHandle(GetContainer.class, "apply", IOleClientSiteVtbl.GetContainer_UP$FUNC);
    static final FunctionDescriptor GetContainer_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetContainer_DOWN$MH = RuntimeHelper.downcallHandle(
        IOleClientSiteVtbl.GetContainer_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetContainer)(IOleClientSite*,IOleContainer**);
     * }
     */
    public interface GetContainer {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetContainer fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IOleClientSiteVtbl.GetContainer_UP$MH, fi, IOleClientSiteVtbl.GetContainer$FUNC, scope);
        }
        static GetContainer ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IOleClientSiteVtbl.GetContainer_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetContainer$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetContainer"));
    public static VarHandle GetContainer$VH() {
        return IOleClientSiteVtbl.GetContainer$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetContainer)(IOleClientSite*,IOleContainer**);
     * }
     */
    public static MemorySegment GetContainer$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOleClientSiteVtbl.GetContainer$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetContainer)(IOleClientSite*,IOleContainer**);
     * }
     */
    public static void GetContainer$set(MemorySegment seg, MemorySegment x) {
        IOleClientSiteVtbl.GetContainer$VH.set(seg, x);
    }
    public static MemorySegment GetContainer$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOleClientSiteVtbl.GetContainer$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetContainer$set(MemorySegment seg, long index, MemorySegment x) {
        IOleClientSiteVtbl.GetContainer$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetContainer GetContainer(MemorySegment segment, SegmentScope scope) {
        return GetContainer.ofAddress(GetContainer$get(segment), scope);
    }
    static final FunctionDescriptor ShowObject$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor ShowObject_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ShowObject_UP$MH = RuntimeHelper.upcallHandle(ShowObject.class, "apply", IOleClientSiteVtbl.ShowObject_UP$FUNC);
    static final FunctionDescriptor ShowObject_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ShowObject_DOWN$MH = RuntimeHelper.downcallHandle(
        IOleClientSiteVtbl.ShowObject_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*ShowObject)(IOleClientSite*);
     * }
     */
    public interface ShowObject {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(ShowObject fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IOleClientSiteVtbl.ShowObject_UP$MH, fi, IOleClientSiteVtbl.ShowObject$FUNC, scope);
        }
        static ShowObject ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IOleClientSiteVtbl.ShowObject_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ShowObject$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ShowObject"));
    public static VarHandle ShowObject$VH() {
        return IOleClientSiteVtbl.ShowObject$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*ShowObject)(IOleClientSite*);
     * }
     */
    public static MemorySegment ShowObject$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOleClientSiteVtbl.ShowObject$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*ShowObject)(IOleClientSite*);
     * }
     */
    public static void ShowObject$set(MemorySegment seg, MemorySegment x) {
        IOleClientSiteVtbl.ShowObject$VH.set(seg, x);
    }
    public static MemorySegment ShowObject$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOleClientSiteVtbl.ShowObject$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ShowObject$set(MemorySegment seg, long index, MemorySegment x) {
        IOleClientSiteVtbl.ShowObject$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ShowObject ShowObject(MemorySegment segment, SegmentScope scope) {
        return ShowObject.ofAddress(ShowObject$get(segment), scope);
    }
    static final FunctionDescriptor OnShowWindow$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor OnShowWindow_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle OnShowWindow_UP$MH = RuntimeHelper.upcallHandle(OnShowWindow.class, "apply", IOleClientSiteVtbl.OnShowWindow_UP$FUNC);
    static final FunctionDescriptor OnShowWindow_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle OnShowWindow_DOWN$MH = RuntimeHelper.downcallHandle(
        IOleClientSiteVtbl.OnShowWindow_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*OnShowWindow)(IOleClientSite*,BOOL);
     * }
     */
    public interface OnShowWindow {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(OnShowWindow fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IOleClientSiteVtbl.OnShowWindow_UP$MH, fi, IOleClientSiteVtbl.OnShowWindow$FUNC, scope);
        }
        static OnShowWindow ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)IOleClientSiteVtbl.OnShowWindow_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle OnShowWindow$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("OnShowWindow"));
    public static VarHandle OnShowWindow$VH() {
        return IOleClientSiteVtbl.OnShowWindow$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*OnShowWindow)(IOleClientSite*,BOOL);
     * }
     */
    public static MemorySegment OnShowWindow$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOleClientSiteVtbl.OnShowWindow$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*OnShowWindow)(IOleClientSite*,BOOL);
     * }
     */
    public static void OnShowWindow$set(MemorySegment seg, MemorySegment x) {
        IOleClientSiteVtbl.OnShowWindow$VH.set(seg, x);
    }
    public static MemorySegment OnShowWindow$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOleClientSiteVtbl.OnShowWindow$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void OnShowWindow$set(MemorySegment seg, long index, MemorySegment x) {
        IOleClientSiteVtbl.OnShowWindow$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static OnShowWindow OnShowWindow(MemorySegment segment, SegmentScope scope) {
        return OnShowWindow.ofAddress(OnShowWindow$get(segment), scope);
    }
    static final FunctionDescriptor RequestNewObjectLayout$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor RequestNewObjectLayout_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle RequestNewObjectLayout_UP$MH = RuntimeHelper.upcallHandle(RequestNewObjectLayout.class, "apply", IOleClientSiteVtbl.RequestNewObjectLayout_UP$FUNC);
    static final FunctionDescriptor RequestNewObjectLayout_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle RequestNewObjectLayout_DOWN$MH = RuntimeHelper.downcallHandle(
        IOleClientSiteVtbl.RequestNewObjectLayout_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*RequestNewObjectLayout)(IOleClientSite*);
     * }
     */
    public interface RequestNewObjectLayout {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(RequestNewObjectLayout fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IOleClientSiteVtbl.RequestNewObjectLayout_UP$MH, fi, IOleClientSiteVtbl.RequestNewObjectLayout$FUNC, scope);
        }
        static RequestNewObjectLayout ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IOleClientSiteVtbl.RequestNewObjectLayout_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle RequestNewObjectLayout$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("RequestNewObjectLayout"));
    public static VarHandle RequestNewObjectLayout$VH() {
        return IOleClientSiteVtbl.RequestNewObjectLayout$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*RequestNewObjectLayout)(IOleClientSite*);
     * }
     */
    public static MemorySegment RequestNewObjectLayout$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOleClientSiteVtbl.RequestNewObjectLayout$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*RequestNewObjectLayout)(IOleClientSite*);
     * }
     */
    public static void RequestNewObjectLayout$set(MemorySegment seg, MemorySegment x) {
        IOleClientSiteVtbl.RequestNewObjectLayout$VH.set(seg, x);
    }
    public static MemorySegment RequestNewObjectLayout$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOleClientSiteVtbl.RequestNewObjectLayout$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void RequestNewObjectLayout$set(MemorySegment seg, long index, MemorySegment x) {
        IOleClientSiteVtbl.RequestNewObjectLayout$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static RequestNewObjectLayout RequestNewObjectLayout(MemorySegment segment, SegmentScope scope) {
        return RequestNewObjectLayout.ofAddress(RequestNewObjectLayout$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


