// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _BCRYPT_INTERFACE_VERSION {
 *     USHORT MajorVersion;
 *     USHORT MinorVersion;
 * };
 * }
 */
public class _BCRYPT_INTERFACE_VERSION {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_SHORT$LAYOUT.withName("MajorVersion"),
        Constants$root.C_SHORT$LAYOUT.withName("MinorVersion")
    ).withName("_BCRYPT_INTERFACE_VERSION");
    public static MemoryLayout $LAYOUT() {
        return _BCRYPT_INTERFACE_VERSION.$struct$LAYOUT;
    }
    static final VarHandle MajorVersion$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("MajorVersion"));
    public static VarHandle MajorVersion$VH() {
        return _BCRYPT_INTERFACE_VERSION.MajorVersion$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * USHORT MajorVersion;
     * }
     */
    public static short MajorVersion$get(MemorySegment seg) {
        return (short)_BCRYPT_INTERFACE_VERSION.MajorVersion$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * USHORT MajorVersion;
     * }
     */
    public static void MajorVersion$set(MemorySegment seg, short x) {
        _BCRYPT_INTERFACE_VERSION.MajorVersion$VH.set(seg, x);
    }
    public static short MajorVersion$get(MemorySegment seg, long index) {
        return (short)_BCRYPT_INTERFACE_VERSION.MajorVersion$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MajorVersion$set(MemorySegment seg, long index, short x) {
        _BCRYPT_INTERFACE_VERSION.MajorVersion$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MinorVersion$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("MinorVersion"));
    public static VarHandle MinorVersion$VH() {
        return _BCRYPT_INTERFACE_VERSION.MinorVersion$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * USHORT MinorVersion;
     * }
     */
    public static short MinorVersion$get(MemorySegment seg) {
        return (short)_BCRYPT_INTERFACE_VERSION.MinorVersion$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * USHORT MinorVersion;
     * }
     */
    public static void MinorVersion$set(MemorySegment seg, short x) {
        _BCRYPT_INTERFACE_VERSION.MinorVersion$VH.set(seg, x);
    }
    public static short MinorVersion$get(MemorySegment seg, long index) {
        return (short)_BCRYPT_INTERFACE_VERSION.MinorVersion$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MinorVersion$set(MemorySegment seg, long index, short x) {
        _BCRYPT_INTERFACE_VERSION.MinorVersion$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


