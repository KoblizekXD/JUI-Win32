// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _FS_BPIO_INFO {
 *     DWORD ActiveBypassIoCount;
 *     WORD StorageDriverNameLen;
 *     WCHAR StorageDriverName[32];
 * };
 * }
 */
public class _FS_BPIO_INFO {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("ActiveBypassIoCount"),
        Constants$root.C_SHORT$LAYOUT.withName("StorageDriverNameLen"),
        MemoryLayout.sequenceLayout(32, Constants$root.C_SHORT$LAYOUT).withName("StorageDriverName"),
        MemoryLayout.paddingLayout(16)
    ).withName("_FS_BPIO_INFO");
    public static MemoryLayout $LAYOUT() {
        return _FS_BPIO_INFO.$struct$LAYOUT;
    }
    static final VarHandle ActiveBypassIoCount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ActiveBypassIoCount"));
    public static VarHandle ActiveBypassIoCount$VH() {
        return _FS_BPIO_INFO.ActiveBypassIoCount$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD ActiveBypassIoCount;
     * }
     */
    public static int ActiveBypassIoCount$get(MemorySegment seg) {
        return (int)_FS_BPIO_INFO.ActiveBypassIoCount$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD ActiveBypassIoCount;
     * }
     */
    public static void ActiveBypassIoCount$set(MemorySegment seg, int x) {
        _FS_BPIO_INFO.ActiveBypassIoCount$VH.set(seg, x);
    }
    public static int ActiveBypassIoCount$get(MemorySegment seg, long index) {
        return (int)_FS_BPIO_INFO.ActiveBypassIoCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ActiveBypassIoCount$set(MemorySegment seg, long index, int x) {
        _FS_BPIO_INFO.ActiveBypassIoCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle StorageDriverNameLen$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("StorageDriverNameLen"));
    public static VarHandle StorageDriverNameLen$VH() {
        return _FS_BPIO_INFO.StorageDriverNameLen$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD StorageDriverNameLen;
     * }
     */
    public static short StorageDriverNameLen$get(MemorySegment seg) {
        return (short)_FS_BPIO_INFO.StorageDriverNameLen$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD StorageDriverNameLen;
     * }
     */
    public static void StorageDriverNameLen$set(MemorySegment seg, short x) {
        _FS_BPIO_INFO.StorageDriverNameLen$VH.set(seg, x);
    }
    public static short StorageDriverNameLen$get(MemorySegment seg, long index) {
        return (short)_FS_BPIO_INFO.StorageDriverNameLen$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void StorageDriverNameLen$set(MemorySegment seg, long index, short x) {
        _FS_BPIO_INFO.StorageDriverNameLen$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment StorageDriverName$slice(MemorySegment seg) {
        return seg.asSlice(6, 64);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


