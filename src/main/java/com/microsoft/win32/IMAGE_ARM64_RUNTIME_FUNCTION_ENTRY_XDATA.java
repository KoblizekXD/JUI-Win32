// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * union IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA {
 *     DWORD HeaderData;
 *     struct {
 *          *         DWORD FunctionLength;
 *         DWORD Version;
 *         DWORD ExceptionDataPresent;
 *         DWORD EpilogInHeader;
 *         DWORD EpilogCount;
 *         DWORD CodeWords;
 *     };
 * };
 * }
 */
public class IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA {

    static final UnionLayout $union$LAYOUT = MemoryLayout.unionLayout(
        Constants$root.C_LONG$LAYOUT.withName("HeaderData"),
        MemoryLayout.structLayout(
            MemoryLayout.paddingLayout(32)
        ).withName("$anon$0")
    ).withName("IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA");
    public static MemoryLayout $LAYOUT() {
        return IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA.$union$LAYOUT;
    }
    static final VarHandle HeaderData$VH = $union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("HeaderData"));
    public static VarHandle HeaderData$VH() {
        return IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA.HeaderData$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD HeaderData;
     * }
     */
    public static int HeaderData$get(MemorySegment seg) {
        return (int)IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA.HeaderData$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD HeaderData;
     * }
     */
    public static void HeaderData$set(MemorySegment seg, int x) {
        IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA.HeaderData$VH.set(seg, x);
    }
    public static int HeaderData$get(MemorySegment seg, long index) {
        return (int)IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA.HeaderData$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void HeaderData$set(MemorySegment seg, long index, int x) {
        IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA.HeaderData$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


