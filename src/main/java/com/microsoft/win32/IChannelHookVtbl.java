// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IChannelHookVtbl {
 *     HRESULT (*QueryInterface)(IChannelHook*,const IID*,void**);
 *     ULONG (*AddRef)(IChannelHook*);
 *     ULONG (*Release)(IChannelHook*);
 *     void (*ClientGetSize)(IChannelHook*,const GUID*,const IID*,ULONG*);
 *     void (*ClientFillBuffer)(IChannelHook*,const GUID*,const IID*,ULONG*,void*);
 *     void (*ClientNotify)(IChannelHook*,const GUID*,const IID*,ULONG,void*,DWORD,HRESULT);
 *     void (*ServerNotify)(IChannelHook*,const GUID*,const IID*,ULONG,void*,DWORD);
 *     void (*ServerGetSize)(IChannelHook*,const GUID*,const IID*,HRESULT,ULONG*);
 *     void (*ServerFillBuffer)(IChannelHook*,const GUID*,const IID*,ULONG*,void*,HRESULT);
 * };
 * }
 */
public class IChannelHookVtbl {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("ClientGetSize"),
        Constants$root.C_POINTER$LAYOUT.withName("ClientFillBuffer"),
        Constants$root.C_POINTER$LAYOUT.withName("ClientNotify"),
        Constants$root.C_POINTER$LAYOUT.withName("ServerNotify"),
        Constants$root.C_POINTER$LAYOUT.withName("ServerGetSize"),
        Constants$root.C_POINTER$LAYOUT.withName("ServerFillBuffer")
    ).withName("IChannelHookVtbl");
    public static MemoryLayout $LAYOUT() {
        return IChannelHookVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor QueryInterface_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_UP$MH = RuntimeHelper.upcallHandle(QueryInterface.class, "apply", IChannelHookVtbl.QueryInterface_UP$FUNC);
    static final FunctionDescriptor QueryInterface_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_DOWN$MH = RuntimeHelper.downcallHandle(
        IChannelHookVtbl.QueryInterface_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(IChannelHook*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IChannelHookVtbl.QueryInterface_UP$MH, fi, IChannelHookVtbl.QueryInterface$FUNC, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IChannelHookVtbl.QueryInterface_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return IChannelHookVtbl.QueryInterface$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IChannelHook*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IChannelHookVtbl.QueryInterface$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IChannelHook*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        IChannelHookVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IChannelHookVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        IChannelHookVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, SegmentScope scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor AddRef_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_UP$MH = RuntimeHelper.upcallHandle(AddRef.class, "apply", IChannelHookVtbl.AddRef_UP$FUNC);
    static final FunctionDescriptor AddRef_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_DOWN$MH = RuntimeHelper.downcallHandle(
        IChannelHookVtbl.AddRef_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*AddRef)(IChannelHook*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IChannelHookVtbl.AddRef_UP$MH, fi, IChannelHookVtbl.AddRef$FUNC, scope);
        }
        static AddRef ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IChannelHookVtbl.AddRef_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return IChannelHookVtbl.AddRef$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(IChannelHook*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IChannelHookVtbl.AddRef$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(IChannelHook*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        IChannelHookVtbl.AddRef$VH.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IChannelHookVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        IChannelHookVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, SegmentScope scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Release_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_UP$MH = RuntimeHelper.upcallHandle(Release.class, "apply", IChannelHookVtbl.Release_UP$FUNC);
    static final FunctionDescriptor Release_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_DOWN$MH = RuntimeHelper.downcallHandle(
        IChannelHookVtbl.Release_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*Release)(IChannelHook*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IChannelHookVtbl.Release_UP$MH, fi, IChannelHookVtbl.Release$FUNC, scope);
        }
        static Release ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IChannelHookVtbl.Release_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return IChannelHookVtbl.Release$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(IChannelHook*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IChannelHookVtbl.Release$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(IChannelHook*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        IChannelHookVtbl.Release$VH.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IChannelHookVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        IChannelHookVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, SegmentScope scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    static final FunctionDescriptor ClientGetSize$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor ClientGetSize_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ClientGetSize_UP$MH = RuntimeHelper.upcallHandle(ClientGetSize.class, "apply", IChannelHookVtbl.ClientGetSize_UP$FUNC);
    static final FunctionDescriptor ClientGetSize_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ClientGetSize_DOWN$MH = RuntimeHelper.downcallHandle(
        IChannelHookVtbl.ClientGetSize_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*ClientGetSize)(IChannelHook*,const GUID*,const IID*,ULONG*);
     * }
     */
    public interface ClientGetSize {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(ClientGetSize fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IChannelHookVtbl.ClientGetSize_UP$MH, fi, IChannelHookVtbl.ClientGetSize$FUNC, scope);
        }
        static ClientGetSize ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    IChannelHookVtbl.ClientGetSize_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ClientGetSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ClientGetSize"));
    public static VarHandle ClientGetSize$VH() {
        return IChannelHookVtbl.ClientGetSize$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*ClientGetSize)(IChannelHook*,const GUID*,const IID*,ULONG*);
     * }
     */
    public static MemorySegment ClientGetSize$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IChannelHookVtbl.ClientGetSize$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*ClientGetSize)(IChannelHook*,const GUID*,const IID*,ULONG*);
     * }
     */
    public static void ClientGetSize$set(MemorySegment seg, MemorySegment x) {
        IChannelHookVtbl.ClientGetSize$VH.set(seg, x);
    }
    public static MemorySegment ClientGetSize$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IChannelHookVtbl.ClientGetSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ClientGetSize$set(MemorySegment seg, long index, MemorySegment x) {
        IChannelHookVtbl.ClientGetSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ClientGetSize ClientGetSize(MemorySegment segment, SegmentScope scope) {
        return ClientGetSize.ofAddress(ClientGetSize$get(segment), scope);
    }
    static final FunctionDescriptor ClientFillBuffer$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor ClientFillBuffer_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ClientFillBuffer_UP$MH = RuntimeHelper.upcallHandle(ClientFillBuffer.class, "apply", IChannelHookVtbl.ClientFillBuffer_UP$FUNC);
    static final FunctionDescriptor ClientFillBuffer_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ClientFillBuffer_DOWN$MH = RuntimeHelper.downcallHandle(
        IChannelHookVtbl.ClientFillBuffer_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*ClientFillBuffer)(IChannelHook*,const GUID*,const IID*,ULONG*,void*);
     * }
     */
    public interface ClientFillBuffer {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(ClientFillBuffer fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IChannelHookVtbl.ClientFillBuffer_UP$MH, fi, IChannelHookVtbl.ClientFillBuffer$FUNC, scope);
        }
        static ClientFillBuffer ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    IChannelHookVtbl.ClientFillBuffer_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ClientFillBuffer$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ClientFillBuffer"));
    public static VarHandle ClientFillBuffer$VH() {
        return IChannelHookVtbl.ClientFillBuffer$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*ClientFillBuffer)(IChannelHook*,const GUID*,const IID*,ULONG*,void*);
     * }
     */
    public static MemorySegment ClientFillBuffer$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IChannelHookVtbl.ClientFillBuffer$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*ClientFillBuffer)(IChannelHook*,const GUID*,const IID*,ULONG*,void*);
     * }
     */
    public static void ClientFillBuffer$set(MemorySegment seg, MemorySegment x) {
        IChannelHookVtbl.ClientFillBuffer$VH.set(seg, x);
    }
    public static MemorySegment ClientFillBuffer$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IChannelHookVtbl.ClientFillBuffer$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ClientFillBuffer$set(MemorySegment seg, long index, MemorySegment x) {
        IChannelHookVtbl.ClientFillBuffer$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ClientFillBuffer ClientFillBuffer(MemorySegment segment, SegmentScope scope) {
        return ClientFillBuffer.ofAddress(ClientFillBuffer$get(segment), scope);
    }
    static final FunctionDescriptor ClientNotify$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor ClientNotify_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle ClientNotify_UP$MH = RuntimeHelper.upcallHandle(ClientNotify.class, "apply", IChannelHookVtbl.ClientNotify_UP$FUNC);
    static final FunctionDescriptor ClientNotify_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle ClientNotify_DOWN$MH = RuntimeHelper.downcallHandle(
        IChannelHookVtbl.ClientNotify_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*ClientNotify)(IChannelHook*,const GUID*,const IID*,ULONG,void*,DWORD,HRESULT);
     * }
     */
    public interface ClientNotify {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3, java.lang.foreign.MemorySegment _x4, int _x5, int _x6);
        static MemorySegment allocate(ClientNotify fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IChannelHookVtbl.ClientNotify_UP$MH, fi, IChannelHookVtbl.ClientNotify$FUNC, scope);
        }
        static ClientNotify ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3, java.lang.foreign.MemorySegment __x4, int __x5, int __x6) -> {
                try {
                    IChannelHookVtbl.ClientNotify_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ClientNotify$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ClientNotify"));
    public static VarHandle ClientNotify$VH() {
        return IChannelHookVtbl.ClientNotify$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*ClientNotify)(IChannelHook*,const GUID*,const IID*,ULONG,void*,DWORD,HRESULT);
     * }
     */
    public static MemorySegment ClientNotify$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IChannelHookVtbl.ClientNotify$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*ClientNotify)(IChannelHook*,const GUID*,const IID*,ULONG,void*,DWORD,HRESULT);
     * }
     */
    public static void ClientNotify$set(MemorySegment seg, MemorySegment x) {
        IChannelHookVtbl.ClientNotify$VH.set(seg, x);
    }
    public static MemorySegment ClientNotify$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IChannelHookVtbl.ClientNotify$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ClientNotify$set(MemorySegment seg, long index, MemorySegment x) {
        IChannelHookVtbl.ClientNotify$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ClientNotify ClientNotify(MemorySegment segment, SegmentScope scope) {
        return ClientNotify.ofAddress(ClientNotify$get(segment), scope);
    }
    static final FunctionDescriptor ServerNotify$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor ServerNotify_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle ServerNotify_UP$MH = RuntimeHelper.upcallHandle(ServerNotify.class, "apply", IChannelHookVtbl.ServerNotify_UP$FUNC);
    static final FunctionDescriptor ServerNotify_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle ServerNotify_DOWN$MH = RuntimeHelper.downcallHandle(
        IChannelHookVtbl.ServerNotify_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*ServerNotify)(IChannelHook*,const GUID*,const IID*,ULONG,void*,DWORD);
     * }
     */
    public interface ServerNotify {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3, java.lang.foreign.MemorySegment _x4, int _x5);
        static MemorySegment allocate(ServerNotify fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IChannelHookVtbl.ServerNotify_UP$MH, fi, IChannelHookVtbl.ServerNotify$FUNC, scope);
        }
        static ServerNotify ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3, java.lang.foreign.MemorySegment __x4, int __x5) -> {
                try {
                    IChannelHookVtbl.ServerNotify_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ServerNotify$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ServerNotify"));
    public static VarHandle ServerNotify$VH() {
        return IChannelHookVtbl.ServerNotify$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*ServerNotify)(IChannelHook*,const GUID*,const IID*,ULONG,void*,DWORD);
     * }
     */
    public static MemorySegment ServerNotify$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IChannelHookVtbl.ServerNotify$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*ServerNotify)(IChannelHook*,const GUID*,const IID*,ULONG,void*,DWORD);
     * }
     */
    public static void ServerNotify$set(MemorySegment seg, MemorySegment x) {
        IChannelHookVtbl.ServerNotify$VH.set(seg, x);
    }
    public static MemorySegment ServerNotify$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IChannelHookVtbl.ServerNotify$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ServerNotify$set(MemorySegment seg, long index, MemorySegment x) {
        IChannelHookVtbl.ServerNotify$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ServerNotify ServerNotify(MemorySegment segment, SegmentScope scope) {
        return ServerNotify.ofAddress(ServerNotify$get(segment), scope);
    }
    static final FunctionDescriptor ServerGetSize$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor ServerGetSize_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ServerGetSize_UP$MH = RuntimeHelper.upcallHandle(ServerGetSize.class, "apply", IChannelHookVtbl.ServerGetSize_UP$FUNC);
    static final FunctionDescriptor ServerGetSize_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ServerGetSize_DOWN$MH = RuntimeHelper.downcallHandle(
        IChannelHookVtbl.ServerGetSize_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*ServerGetSize)(IChannelHook*,const GUID*,const IID*,HRESULT,ULONG*);
     * }
     */
    public interface ServerGetSize {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(ServerGetSize fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IChannelHookVtbl.ServerGetSize_UP$MH, fi, IChannelHookVtbl.ServerGetSize$FUNC, scope);
        }
        static ServerGetSize ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    IChannelHookVtbl.ServerGetSize_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ServerGetSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ServerGetSize"));
    public static VarHandle ServerGetSize$VH() {
        return IChannelHookVtbl.ServerGetSize$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*ServerGetSize)(IChannelHook*,const GUID*,const IID*,HRESULT,ULONG*);
     * }
     */
    public static MemorySegment ServerGetSize$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IChannelHookVtbl.ServerGetSize$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*ServerGetSize)(IChannelHook*,const GUID*,const IID*,HRESULT,ULONG*);
     * }
     */
    public static void ServerGetSize$set(MemorySegment seg, MemorySegment x) {
        IChannelHookVtbl.ServerGetSize$VH.set(seg, x);
    }
    public static MemorySegment ServerGetSize$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IChannelHookVtbl.ServerGetSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ServerGetSize$set(MemorySegment seg, long index, MemorySegment x) {
        IChannelHookVtbl.ServerGetSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ServerGetSize ServerGetSize(MemorySegment segment, SegmentScope scope) {
        return ServerGetSize.ofAddress(ServerGetSize$get(segment), scope);
    }
    static final FunctionDescriptor ServerFillBuffer$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor ServerFillBuffer_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle ServerFillBuffer_UP$MH = RuntimeHelper.upcallHandle(ServerFillBuffer.class, "apply", IChannelHookVtbl.ServerFillBuffer_UP$FUNC);
    static final FunctionDescriptor ServerFillBuffer_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle ServerFillBuffer_DOWN$MH = RuntimeHelper.downcallHandle(
        IChannelHookVtbl.ServerFillBuffer_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*ServerFillBuffer)(IChannelHook*,const GUID*,const IID*,ULONG*,void*,HRESULT);
     * }
     */
    public interface ServerFillBuffer {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, int _x5);
        static MemorySegment allocate(ServerFillBuffer fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IChannelHookVtbl.ServerFillBuffer_UP$MH, fi, IChannelHookVtbl.ServerFillBuffer$FUNC, scope);
        }
        static ServerFillBuffer ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, int __x5) -> {
                try {
                    IChannelHookVtbl.ServerFillBuffer_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ServerFillBuffer$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ServerFillBuffer"));
    public static VarHandle ServerFillBuffer$VH() {
        return IChannelHookVtbl.ServerFillBuffer$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*ServerFillBuffer)(IChannelHook*,const GUID*,const IID*,ULONG*,void*,HRESULT);
     * }
     */
    public static MemorySegment ServerFillBuffer$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IChannelHookVtbl.ServerFillBuffer$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*ServerFillBuffer)(IChannelHook*,const GUID*,const IID*,ULONG*,void*,HRESULT);
     * }
     */
    public static void ServerFillBuffer$set(MemorySegment seg, MemorySegment x) {
        IChannelHookVtbl.ServerFillBuffer$VH.set(seg, x);
    }
    public static MemorySegment ServerFillBuffer$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IChannelHookVtbl.ServerFillBuffer$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ServerFillBuffer$set(MemorySegment seg, long index, MemorySegment x) {
        IChannelHookVtbl.ServerFillBuffer$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ServerFillBuffer ServerFillBuffer(MemorySegment segment, SegmentScope scope) {
        return ServerFillBuffer.ofAddress(ServerFillBuffer$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


