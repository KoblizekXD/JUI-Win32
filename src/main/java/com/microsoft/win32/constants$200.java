// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
final class constants$200 {

    // Suppresses default constructor, ensuring non-instantiability.
    private constants$200() {}
    static final FunctionDescriptor CloseThreadpoolCleanupGroup$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle CloseThreadpoolCleanupGroup$MH = RuntimeHelper.downcallHandle(
        "CloseThreadpoolCleanupGroup",
        constants$200.CloseThreadpoolCleanupGroup$FUNC
    );
    static final FunctionDescriptor SetEventWhenCallbackReturns$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetEventWhenCallbackReturns$MH = RuntimeHelper.downcallHandle(
        "SetEventWhenCallbackReturns",
        constants$200.SetEventWhenCallbackReturns$FUNC
    );
    static final FunctionDescriptor ReleaseSemaphoreWhenCallbackReturns$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle ReleaseSemaphoreWhenCallbackReturns$MH = RuntimeHelper.downcallHandle(
        "ReleaseSemaphoreWhenCallbackReturns",
        constants$200.ReleaseSemaphoreWhenCallbackReturns$FUNC
    );
    static final FunctionDescriptor ReleaseMutexWhenCallbackReturns$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ReleaseMutexWhenCallbackReturns$MH = RuntimeHelper.downcallHandle(
        "ReleaseMutexWhenCallbackReturns",
        constants$200.ReleaseMutexWhenCallbackReturns$FUNC
    );
    static final FunctionDescriptor LeaveCriticalSectionWhenCallbackReturns$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle LeaveCriticalSectionWhenCallbackReturns$MH = RuntimeHelper.downcallHandle(
        "LeaveCriticalSectionWhenCallbackReturns",
        constants$200.LeaveCriticalSectionWhenCallbackReturns$FUNC
    );
    static final FunctionDescriptor FreeLibraryWhenCallbackReturns$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle FreeLibraryWhenCallbackReturns$MH = RuntimeHelper.downcallHandle(
        "FreeLibraryWhenCallbackReturns",
        constants$200.FreeLibraryWhenCallbackReturns$FUNC
    );
}


