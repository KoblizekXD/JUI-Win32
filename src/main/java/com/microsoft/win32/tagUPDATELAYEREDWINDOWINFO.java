// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct tagUPDATELAYEREDWINDOWINFO {
 *     DWORD cbSize;
 *     HDC hdcDst;
 *     const POINT* pptDst;
 *     const SIZE* psize;
 *     HDC hdcSrc;
 *     const POINT* pptSrc;
 *     COLORREF crKey;
 *     const BLENDFUNCTION* pblend;
 *     DWORD dwFlags;
 *     const RECT* prcDirty;
 * };
 * }
 */
public class tagUPDATELAYEREDWINDOWINFO {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("cbSize"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("hdcDst"),
        Constants$root.C_POINTER$LAYOUT.withName("pptDst"),
        Constants$root.C_POINTER$LAYOUT.withName("psize"),
        Constants$root.C_POINTER$LAYOUT.withName("hdcSrc"),
        Constants$root.C_POINTER$LAYOUT.withName("pptSrc"),
        Constants$root.C_LONG$LAYOUT.withName("crKey"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("pblend"),
        Constants$root.C_LONG$LAYOUT.withName("dwFlags"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("prcDirty")
    ).withName("tagUPDATELAYEREDWINDOWINFO");
    public static MemoryLayout $LAYOUT() {
        return tagUPDATELAYEREDWINDOWINFO.$struct$LAYOUT;
    }
    static final VarHandle cbSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cbSize"));
    public static VarHandle cbSize$VH() {
        return tagUPDATELAYEREDWINDOWINFO.cbSize$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD cbSize;
     * }
     */
    public static int cbSize$get(MemorySegment seg) {
        return (int)tagUPDATELAYEREDWINDOWINFO.cbSize$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD cbSize;
     * }
     */
    public static void cbSize$set(MemorySegment seg, int x) {
        tagUPDATELAYEREDWINDOWINFO.cbSize$VH.set(seg, x);
    }
    public static int cbSize$get(MemorySegment seg, long index) {
        return (int)tagUPDATELAYEREDWINDOWINFO.cbSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cbSize$set(MemorySegment seg, long index, int x) {
        tagUPDATELAYEREDWINDOWINFO.cbSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hdcDst$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hdcDst"));
    public static VarHandle hdcDst$VH() {
        return tagUPDATELAYEREDWINDOWINFO.hdcDst$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HDC hdcDst;
     * }
     */
    public static MemorySegment hdcDst$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)tagUPDATELAYEREDWINDOWINFO.hdcDst$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HDC hdcDst;
     * }
     */
    public static void hdcDst$set(MemorySegment seg, MemorySegment x) {
        tagUPDATELAYEREDWINDOWINFO.hdcDst$VH.set(seg, x);
    }
    public static MemorySegment hdcDst$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)tagUPDATELAYEREDWINDOWINFO.hdcDst$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hdcDst$set(MemorySegment seg, long index, MemorySegment x) {
        tagUPDATELAYEREDWINDOWINFO.hdcDst$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pptDst$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pptDst"));
    public static VarHandle pptDst$VH() {
        return tagUPDATELAYEREDWINDOWINFO.pptDst$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * const POINT* pptDst;
     * }
     */
    public static MemorySegment pptDst$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)tagUPDATELAYEREDWINDOWINFO.pptDst$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * const POINT* pptDst;
     * }
     */
    public static void pptDst$set(MemorySegment seg, MemorySegment x) {
        tagUPDATELAYEREDWINDOWINFO.pptDst$VH.set(seg, x);
    }
    public static MemorySegment pptDst$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)tagUPDATELAYEREDWINDOWINFO.pptDst$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pptDst$set(MemorySegment seg, long index, MemorySegment x) {
        tagUPDATELAYEREDWINDOWINFO.pptDst$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle psize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("psize"));
    public static VarHandle psize$VH() {
        return tagUPDATELAYEREDWINDOWINFO.psize$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * const SIZE* psize;
     * }
     */
    public static MemorySegment psize$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)tagUPDATELAYEREDWINDOWINFO.psize$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * const SIZE* psize;
     * }
     */
    public static void psize$set(MemorySegment seg, MemorySegment x) {
        tagUPDATELAYEREDWINDOWINFO.psize$VH.set(seg, x);
    }
    public static MemorySegment psize$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)tagUPDATELAYEREDWINDOWINFO.psize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void psize$set(MemorySegment seg, long index, MemorySegment x) {
        tagUPDATELAYEREDWINDOWINFO.psize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hdcSrc$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hdcSrc"));
    public static VarHandle hdcSrc$VH() {
        return tagUPDATELAYEREDWINDOWINFO.hdcSrc$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HDC hdcSrc;
     * }
     */
    public static MemorySegment hdcSrc$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)tagUPDATELAYEREDWINDOWINFO.hdcSrc$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HDC hdcSrc;
     * }
     */
    public static void hdcSrc$set(MemorySegment seg, MemorySegment x) {
        tagUPDATELAYEREDWINDOWINFO.hdcSrc$VH.set(seg, x);
    }
    public static MemorySegment hdcSrc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)tagUPDATELAYEREDWINDOWINFO.hdcSrc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hdcSrc$set(MemorySegment seg, long index, MemorySegment x) {
        tagUPDATELAYEREDWINDOWINFO.hdcSrc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pptSrc$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pptSrc"));
    public static VarHandle pptSrc$VH() {
        return tagUPDATELAYEREDWINDOWINFO.pptSrc$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * const POINT* pptSrc;
     * }
     */
    public static MemorySegment pptSrc$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)tagUPDATELAYEREDWINDOWINFO.pptSrc$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * const POINT* pptSrc;
     * }
     */
    public static void pptSrc$set(MemorySegment seg, MemorySegment x) {
        tagUPDATELAYEREDWINDOWINFO.pptSrc$VH.set(seg, x);
    }
    public static MemorySegment pptSrc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)tagUPDATELAYEREDWINDOWINFO.pptSrc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pptSrc$set(MemorySegment seg, long index, MemorySegment x) {
        tagUPDATELAYEREDWINDOWINFO.pptSrc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle crKey$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("crKey"));
    public static VarHandle crKey$VH() {
        return tagUPDATELAYEREDWINDOWINFO.crKey$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * COLORREF crKey;
     * }
     */
    public static int crKey$get(MemorySegment seg) {
        return (int)tagUPDATELAYEREDWINDOWINFO.crKey$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * COLORREF crKey;
     * }
     */
    public static void crKey$set(MemorySegment seg, int x) {
        tagUPDATELAYEREDWINDOWINFO.crKey$VH.set(seg, x);
    }
    public static int crKey$get(MemorySegment seg, long index) {
        return (int)tagUPDATELAYEREDWINDOWINFO.crKey$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void crKey$set(MemorySegment seg, long index, int x) {
        tagUPDATELAYEREDWINDOWINFO.crKey$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pblend$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pblend"));
    public static VarHandle pblend$VH() {
        return tagUPDATELAYEREDWINDOWINFO.pblend$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * const BLENDFUNCTION* pblend;
     * }
     */
    public static MemorySegment pblend$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)tagUPDATELAYEREDWINDOWINFO.pblend$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * const BLENDFUNCTION* pblend;
     * }
     */
    public static void pblend$set(MemorySegment seg, MemorySegment x) {
        tagUPDATELAYEREDWINDOWINFO.pblend$VH.set(seg, x);
    }
    public static MemorySegment pblend$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)tagUPDATELAYEREDWINDOWINFO.pblend$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pblend$set(MemorySegment seg, long index, MemorySegment x) {
        tagUPDATELAYEREDWINDOWINFO.pblend$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwFlags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwFlags"));
    public static VarHandle dwFlags$VH() {
        return tagUPDATELAYEREDWINDOWINFO.dwFlags$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwFlags;
     * }
     */
    public static int dwFlags$get(MemorySegment seg) {
        return (int)tagUPDATELAYEREDWINDOWINFO.dwFlags$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwFlags;
     * }
     */
    public static void dwFlags$set(MemorySegment seg, int x) {
        tagUPDATELAYEREDWINDOWINFO.dwFlags$VH.set(seg, x);
    }
    public static int dwFlags$get(MemorySegment seg, long index) {
        return (int)tagUPDATELAYEREDWINDOWINFO.dwFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwFlags$set(MemorySegment seg, long index, int x) {
        tagUPDATELAYEREDWINDOWINFO.dwFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle prcDirty$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("prcDirty"));
    public static VarHandle prcDirty$VH() {
        return tagUPDATELAYEREDWINDOWINFO.prcDirty$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * const RECT* prcDirty;
     * }
     */
    public static MemorySegment prcDirty$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)tagUPDATELAYEREDWINDOWINFO.prcDirty$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * const RECT* prcDirty;
     * }
     */
    public static void prcDirty$set(MemorySegment seg, MemorySegment x) {
        tagUPDATELAYEREDWINDOWINFO.prcDirty$VH.set(seg, x);
    }
    public static MemorySegment prcDirty$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)tagUPDATELAYEREDWINDOWINFO.prcDirty$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void prcDirty$set(MemorySegment seg, long index, MemorySegment x) {
        tagUPDATELAYEREDWINDOWINFO.prcDirty$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


