// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _PERF_INSTANCE_DEFINITION {
 *     DWORD ByteLength;
 *     DWORD ParentObjectTitleIndex;
 *     DWORD ParentObjectInstance;
 *     LONG UniqueID;
 *     DWORD NameOffset;
 *     DWORD NameLength;
 * };
 * }
 */
public class _PERF_INSTANCE_DEFINITION {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("ByteLength"),
        Constants$root.C_LONG$LAYOUT.withName("ParentObjectTitleIndex"),
        Constants$root.C_LONG$LAYOUT.withName("ParentObjectInstance"),
        Constants$root.C_LONG$LAYOUT.withName("UniqueID"),
        Constants$root.C_LONG$LAYOUT.withName("NameOffset"),
        Constants$root.C_LONG$LAYOUT.withName("NameLength")
    ).withName("_PERF_INSTANCE_DEFINITION");
    public static MemoryLayout $LAYOUT() {
        return _PERF_INSTANCE_DEFINITION.$struct$LAYOUT;
    }
    static final VarHandle ByteLength$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ByteLength"));
    public static VarHandle ByteLength$VH() {
        return _PERF_INSTANCE_DEFINITION.ByteLength$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD ByteLength;
     * }
     */
    public static int ByteLength$get(MemorySegment seg) {
        return (int)_PERF_INSTANCE_DEFINITION.ByteLength$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD ByteLength;
     * }
     */
    public static void ByteLength$set(MemorySegment seg, int x) {
        _PERF_INSTANCE_DEFINITION.ByteLength$VH.set(seg, x);
    }
    public static int ByteLength$get(MemorySegment seg, long index) {
        return (int)_PERF_INSTANCE_DEFINITION.ByteLength$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ByteLength$set(MemorySegment seg, long index, int x) {
        _PERF_INSTANCE_DEFINITION.ByteLength$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ParentObjectTitleIndex$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ParentObjectTitleIndex"));
    public static VarHandle ParentObjectTitleIndex$VH() {
        return _PERF_INSTANCE_DEFINITION.ParentObjectTitleIndex$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD ParentObjectTitleIndex;
     * }
     */
    public static int ParentObjectTitleIndex$get(MemorySegment seg) {
        return (int)_PERF_INSTANCE_DEFINITION.ParentObjectTitleIndex$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD ParentObjectTitleIndex;
     * }
     */
    public static void ParentObjectTitleIndex$set(MemorySegment seg, int x) {
        _PERF_INSTANCE_DEFINITION.ParentObjectTitleIndex$VH.set(seg, x);
    }
    public static int ParentObjectTitleIndex$get(MemorySegment seg, long index) {
        return (int)_PERF_INSTANCE_DEFINITION.ParentObjectTitleIndex$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ParentObjectTitleIndex$set(MemorySegment seg, long index, int x) {
        _PERF_INSTANCE_DEFINITION.ParentObjectTitleIndex$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ParentObjectInstance$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ParentObjectInstance"));
    public static VarHandle ParentObjectInstance$VH() {
        return _PERF_INSTANCE_DEFINITION.ParentObjectInstance$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD ParentObjectInstance;
     * }
     */
    public static int ParentObjectInstance$get(MemorySegment seg) {
        return (int)_PERF_INSTANCE_DEFINITION.ParentObjectInstance$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD ParentObjectInstance;
     * }
     */
    public static void ParentObjectInstance$set(MemorySegment seg, int x) {
        _PERF_INSTANCE_DEFINITION.ParentObjectInstance$VH.set(seg, x);
    }
    public static int ParentObjectInstance$get(MemorySegment seg, long index) {
        return (int)_PERF_INSTANCE_DEFINITION.ParentObjectInstance$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ParentObjectInstance$set(MemorySegment seg, long index, int x) {
        _PERF_INSTANCE_DEFINITION.ParentObjectInstance$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle UniqueID$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("UniqueID"));
    public static VarHandle UniqueID$VH() {
        return _PERF_INSTANCE_DEFINITION.UniqueID$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LONG UniqueID;
     * }
     */
    public static int UniqueID$get(MemorySegment seg) {
        return (int)_PERF_INSTANCE_DEFINITION.UniqueID$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LONG UniqueID;
     * }
     */
    public static void UniqueID$set(MemorySegment seg, int x) {
        _PERF_INSTANCE_DEFINITION.UniqueID$VH.set(seg, x);
    }
    public static int UniqueID$get(MemorySegment seg, long index) {
        return (int)_PERF_INSTANCE_DEFINITION.UniqueID$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void UniqueID$set(MemorySegment seg, long index, int x) {
        _PERF_INSTANCE_DEFINITION.UniqueID$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle NameOffset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("NameOffset"));
    public static VarHandle NameOffset$VH() {
        return _PERF_INSTANCE_DEFINITION.NameOffset$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD NameOffset;
     * }
     */
    public static int NameOffset$get(MemorySegment seg) {
        return (int)_PERF_INSTANCE_DEFINITION.NameOffset$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD NameOffset;
     * }
     */
    public static void NameOffset$set(MemorySegment seg, int x) {
        _PERF_INSTANCE_DEFINITION.NameOffset$VH.set(seg, x);
    }
    public static int NameOffset$get(MemorySegment seg, long index) {
        return (int)_PERF_INSTANCE_DEFINITION.NameOffset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void NameOffset$set(MemorySegment seg, long index, int x) {
        _PERF_INSTANCE_DEFINITION.NameOffset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle NameLength$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("NameLength"));
    public static VarHandle NameLength$VH() {
        return _PERF_INSTANCE_DEFINITION.NameLength$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD NameLength;
     * }
     */
    public static int NameLength$get(MemorySegment seg) {
        return (int)_PERF_INSTANCE_DEFINITION.NameLength$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD NameLength;
     * }
     */
    public static void NameLength$set(MemorySegment seg, int x) {
        _PERF_INSTANCE_DEFINITION.NameLength$VH.set(seg, x);
    }
    public static int NameLength$get(MemorySegment seg, long index) {
        return (int)_PERF_INSTANCE_DEFINITION.NameLength$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void NameLength$set(MemorySegment seg, long index, int x) {
        _PERF_INSTANCE_DEFINITION.NameLength$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


