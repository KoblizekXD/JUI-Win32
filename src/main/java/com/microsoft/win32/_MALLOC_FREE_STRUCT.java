// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _MALLOC_FREE_STRUCT {
 *     void* (*pfnAllocate)(size_t);
 *     void (*pfnFree)(void*);
 * };
 * }
 */
public class _MALLOC_FREE_STRUCT {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("pfnAllocate"),
        Constants$root.C_POINTER$LAYOUT.withName("pfnFree")
    ).withName("_MALLOC_FREE_STRUCT");
    public static MemoryLayout $LAYOUT() {
        return _MALLOC_FREE_STRUCT.$struct$LAYOUT;
    }
    static final FunctionDescriptor pfnAllocate$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final FunctionDescriptor pfnAllocate_UP$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final MethodHandle pfnAllocate_UP$MH = RuntimeHelper.upcallHandle(pfnAllocate.class, "apply", _MALLOC_FREE_STRUCT.pfnAllocate_UP$FUNC);
    static final FunctionDescriptor pfnAllocate_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final MethodHandle pfnAllocate_DOWN$MH = RuntimeHelper.downcallHandle(
        _MALLOC_FREE_STRUCT.pfnAllocate_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void* (*pfnAllocate)(size_t);
     * }
     */
    public interface pfnAllocate {

        java.lang.foreign.MemorySegment apply(long Size);
        static MemorySegment allocate(pfnAllocate fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_MALLOC_FREE_STRUCT.pfnAllocate_UP$MH, fi, _MALLOC_FREE_STRUCT.pfnAllocate$FUNC, scope);
        }
        static pfnAllocate ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (long _Size) -> {
                try {
                    return (java.lang.foreign.MemorySegment)_MALLOC_FREE_STRUCT.pfnAllocate_DOWN$MH.invokeExact(symbol, _Size);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle pfnAllocate$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pfnAllocate"));
    public static VarHandle pfnAllocate$VH() {
        return _MALLOC_FREE_STRUCT.pfnAllocate$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* (*pfnAllocate)(size_t);
     * }
     */
    public static MemorySegment pfnAllocate$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_MALLOC_FREE_STRUCT.pfnAllocate$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* (*pfnAllocate)(size_t);
     * }
     */
    public static void pfnAllocate$set(MemorySegment seg, MemorySegment x) {
        _MALLOC_FREE_STRUCT.pfnAllocate$VH.set(seg, x);
    }
    public static MemorySegment pfnAllocate$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_MALLOC_FREE_STRUCT.pfnAllocate$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pfnAllocate$set(MemorySegment seg, long index, MemorySegment x) {
        _MALLOC_FREE_STRUCT.pfnAllocate$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static pfnAllocate pfnAllocate(MemorySegment segment, SegmentScope scope) {
        return pfnAllocate.ofAddress(pfnAllocate$get(segment), scope);
    }
    static final FunctionDescriptor pfnFree$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor pfnFree_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle pfnFree_UP$MH = RuntimeHelper.upcallHandle(pfnFree.class, "apply", _MALLOC_FREE_STRUCT.pfnFree_UP$FUNC);
    static final FunctionDescriptor pfnFree_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle pfnFree_DOWN$MH = RuntimeHelper.downcallHandle(
        _MALLOC_FREE_STRUCT.pfnFree_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*pfnFree)(void*);
     * }
     */
    public interface pfnFree {

        void apply(java.lang.foreign.MemorySegment pParameter);
        static MemorySegment allocate(pfnFree fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_MALLOC_FREE_STRUCT.pfnFree_UP$MH, fi, _MALLOC_FREE_STRUCT.pfnFree$FUNC, scope);
        }
        static pfnFree ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _pParameter) -> {
                try {
                    _MALLOC_FREE_STRUCT.pfnFree_DOWN$MH.invokeExact(symbol, _pParameter);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle pfnFree$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pfnFree"));
    public static VarHandle pfnFree$VH() {
        return _MALLOC_FREE_STRUCT.pfnFree$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*pfnFree)(void*);
     * }
     */
    public static MemorySegment pfnFree$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_MALLOC_FREE_STRUCT.pfnFree$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*pfnFree)(void*);
     * }
     */
    public static void pfnFree$set(MemorySegment seg, MemorySegment x) {
        _MALLOC_FREE_STRUCT.pfnFree$VH.set(seg, x);
    }
    public static MemorySegment pfnFree$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_MALLOC_FREE_STRUCT.pfnFree$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pfnFree$set(MemorySegment seg, long index, MemorySegment x) {
        _MALLOC_FREE_STRUCT.pfnFree$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static pfnFree pfnFree(MemorySegment segment, SegmentScope scope) {
        return pfnFree.ofAddress(pfnFree$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


