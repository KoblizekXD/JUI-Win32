// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * int (*PFN_CRYPT_SIGN_AND_ENCODE_HASH_FUNC)(unsigned long long hKey,unsigned long dwCertEncodingType,struct _CRYPT_ALGORITHM_IDENTIFIER* pSignatureAlgorithm,void* pvDecodedSignPara,unsigned short* pwszCNGPubKeyAlgid,unsigned short* pwszCNGHashAlgid,unsigned char* pbComputedHash,unsigned long cbComputedHash,unsigned char* pbSignature,unsigned long* pcbSignature);
 * }
 */
public interface PFN_CRYPT_SIGN_AND_ENCODE_HASH_FUNC {

    int apply(long hKey, int dwCertEncodingType, java.lang.foreign.MemorySegment pSignatureAlgorithm, java.lang.foreign.MemorySegment pvDecodedSignPara, java.lang.foreign.MemorySegment pwszCNGPubKeyAlgid, java.lang.foreign.MemorySegment pwszCNGHashAlgid, java.lang.foreign.MemorySegment pbComputedHash, int cbComputedHash, java.lang.foreign.MemorySegment pbSignature, java.lang.foreign.MemorySegment pcbSignature);
    static MemorySegment allocate(PFN_CRYPT_SIGN_AND_ENCODE_HASH_FUNC fi, SegmentScope scope) {
        return RuntimeHelper.upcallStub(constants$776.PFN_CRYPT_SIGN_AND_ENCODE_HASH_FUNC_UP$MH, fi, constants$776.PFN_CRYPT_SIGN_AND_ENCODE_HASH_FUNC$FUNC, scope);
    }
    static PFN_CRYPT_SIGN_AND_ENCODE_HASH_FUNC ofAddress(MemorySegment addr, SegmentScope scope) {
        MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
        return (long _hKey, int _dwCertEncodingType, java.lang.foreign.MemorySegment _pSignatureAlgorithm, java.lang.foreign.MemorySegment _pvDecodedSignPara, java.lang.foreign.MemorySegment _pwszCNGPubKeyAlgid, java.lang.foreign.MemorySegment _pwszCNGHashAlgid, java.lang.foreign.MemorySegment _pbComputedHash, int _cbComputedHash, java.lang.foreign.MemorySegment _pbSignature, java.lang.foreign.MemorySegment _pcbSignature) -> {
            try {
                return (int)constants$776.PFN_CRYPT_SIGN_AND_ENCODE_HASH_FUNC_DOWN$MH.invokeExact(symbol, _hKey, _dwCertEncodingType, _pSignatureAlgorithm, _pvDecodedSignPara, _pwszCNGPubKeyAlgid, _pwszCNGHashAlgid, _pbComputedHash, _cbComputedHash, _pbSignature, _pcbSignature);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


