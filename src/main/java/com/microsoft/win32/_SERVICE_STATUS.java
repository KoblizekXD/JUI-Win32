// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _SERVICE_STATUS {
 *     DWORD dwServiceType;
 *     DWORD dwCurrentState;
 *     DWORD dwControlsAccepted;
 *     DWORD dwWin32ExitCode;
 *     DWORD dwServiceSpecificExitCode;
 *     DWORD dwCheckPoint;
 *     DWORD dwWaitHint;
 * };
 * }
 */
public class _SERVICE_STATUS {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("dwServiceType"),
        Constants$root.C_LONG$LAYOUT.withName("dwCurrentState"),
        Constants$root.C_LONG$LAYOUT.withName("dwControlsAccepted"),
        Constants$root.C_LONG$LAYOUT.withName("dwWin32ExitCode"),
        Constants$root.C_LONG$LAYOUT.withName("dwServiceSpecificExitCode"),
        Constants$root.C_LONG$LAYOUT.withName("dwCheckPoint"),
        Constants$root.C_LONG$LAYOUT.withName("dwWaitHint")
    ).withName("_SERVICE_STATUS");
    public static MemoryLayout $LAYOUT() {
        return _SERVICE_STATUS.$struct$LAYOUT;
    }
    static final VarHandle dwServiceType$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwServiceType"));
    public static VarHandle dwServiceType$VH() {
        return _SERVICE_STATUS.dwServiceType$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwServiceType;
     * }
     */
    public static int dwServiceType$get(MemorySegment seg) {
        return (int)_SERVICE_STATUS.dwServiceType$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwServiceType;
     * }
     */
    public static void dwServiceType$set(MemorySegment seg, int x) {
        _SERVICE_STATUS.dwServiceType$VH.set(seg, x);
    }
    public static int dwServiceType$get(MemorySegment seg, long index) {
        return (int)_SERVICE_STATUS.dwServiceType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwServiceType$set(MemorySegment seg, long index, int x) {
        _SERVICE_STATUS.dwServiceType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwCurrentState$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwCurrentState"));
    public static VarHandle dwCurrentState$VH() {
        return _SERVICE_STATUS.dwCurrentState$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwCurrentState;
     * }
     */
    public static int dwCurrentState$get(MemorySegment seg) {
        return (int)_SERVICE_STATUS.dwCurrentState$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwCurrentState;
     * }
     */
    public static void dwCurrentState$set(MemorySegment seg, int x) {
        _SERVICE_STATUS.dwCurrentState$VH.set(seg, x);
    }
    public static int dwCurrentState$get(MemorySegment seg, long index) {
        return (int)_SERVICE_STATUS.dwCurrentState$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwCurrentState$set(MemorySegment seg, long index, int x) {
        _SERVICE_STATUS.dwCurrentState$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwControlsAccepted$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwControlsAccepted"));
    public static VarHandle dwControlsAccepted$VH() {
        return _SERVICE_STATUS.dwControlsAccepted$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwControlsAccepted;
     * }
     */
    public static int dwControlsAccepted$get(MemorySegment seg) {
        return (int)_SERVICE_STATUS.dwControlsAccepted$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwControlsAccepted;
     * }
     */
    public static void dwControlsAccepted$set(MemorySegment seg, int x) {
        _SERVICE_STATUS.dwControlsAccepted$VH.set(seg, x);
    }
    public static int dwControlsAccepted$get(MemorySegment seg, long index) {
        return (int)_SERVICE_STATUS.dwControlsAccepted$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwControlsAccepted$set(MemorySegment seg, long index, int x) {
        _SERVICE_STATUS.dwControlsAccepted$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwWin32ExitCode$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwWin32ExitCode"));
    public static VarHandle dwWin32ExitCode$VH() {
        return _SERVICE_STATUS.dwWin32ExitCode$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwWin32ExitCode;
     * }
     */
    public static int dwWin32ExitCode$get(MemorySegment seg) {
        return (int)_SERVICE_STATUS.dwWin32ExitCode$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwWin32ExitCode;
     * }
     */
    public static void dwWin32ExitCode$set(MemorySegment seg, int x) {
        _SERVICE_STATUS.dwWin32ExitCode$VH.set(seg, x);
    }
    public static int dwWin32ExitCode$get(MemorySegment seg, long index) {
        return (int)_SERVICE_STATUS.dwWin32ExitCode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwWin32ExitCode$set(MemorySegment seg, long index, int x) {
        _SERVICE_STATUS.dwWin32ExitCode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwServiceSpecificExitCode$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwServiceSpecificExitCode"));
    public static VarHandle dwServiceSpecificExitCode$VH() {
        return _SERVICE_STATUS.dwServiceSpecificExitCode$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwServiceSpecificExitCode;
     * }
     */
    public static int dwServiceSpecificExitCode$get(MemorySegment seg) {
        return (int)_SERVICE_STATUS.dwServiceSpecificExitCode$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwServiceSpecificExitCode;
     * }
     */
    public static void dwServiceSpecificExitCode$set(MemorySegment seg, int x) {
        _SERVICE_STATUS.dwServiceSpecificExitCode$VH.set(seg, x);
    }
    public static int dwServiceSpecificExitCode$get(MemorySegment seg, long index) {
        return (int)_SERVICE_STATUS.dwServiceSpecificExitCode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwServiceSpecificExitCode$set(MemorySegment seg, long index, int x) {
        _SERVICE_STATUS.dwServiceSpecificExitCode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwCheckPoint$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwCheckPoint"));
    public static VarHandle dwCheckPoint$VH() {
        return _SERVICE_STATUS.dwCheckPoint$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwCheckPoint;
     * }
     */
    public static int dwCheckPoint$get(MemorySegment seg) {
        return (int)_SERVICE_STATUS.dwCheckPoint$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwCheckPoint;
     * }
     */
    public static void dwCheckPoint$set(MemorySegment seg, int x) {
        _SERVICE_STATUS.dwCheckPoint$VH.set(seg, x);
    }
    public static int dwCheckPoint$get(MemorySegment seg, long index) {
        return (int)_SERVICE_STATUS.dwCheckPoint$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwCheckPoint$set(MemorySegment seg, long index, int x) {
        _SERVICE_STATUS.dwCheckPoint$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwWaitHint$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwWaitHint"));
    public static VarHandle dwWaitHint$VH() {
        return _SERVICE_STATUS.dwWaitHint$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwWaitHint;
     * }
     */
    public static int dwWaitHint$get(MemorySegment seg) {
        return (int)_SERVICE_STATUS.dwWaitHint$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwWaitHint;
     * }
     */
    public static void dwWaitHint$set(MemorySegment seg, int x) {
        _SERVICE_STATUS.dwWaitHint$VH.set(seg, x);
    }
    public static int dwWaitHint$get(MemorySegment seg, long index) {
        return (int)_SERVICE_STATUS.dwWaitHint$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwWaitHint$set(MemorySegment seg, long index, int x) {
        _SERVICE_STATUS.dwWaitHint$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


