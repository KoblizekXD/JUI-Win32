// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct ICreateTypeInfoVtbl {
 *     HRESULT (*QueryInterface)(ICreateTypeInfo*,const IID*,void**);
 *     ULONG (*AddRef)(ICreateTypeInfo*);
 *     ULONG (*Release)(ICreateTypeInfo*);
 *     HRESULT (*SetGuid)(ICreateTypeInfo*,const GUID*);
 *     HRESULT (*SetTypeFlags)(ICreateTypeInfo*,UINT);
 *     HRESULT (*SetDocString)(ICreateTypeInfo*,LPOLESTR);
 *     HRESULT (*SetHelpContext)(ICreateTypeInfo*,DWORD);
 *     HRESULT (*SetVersion)(ICreateTypeInfo*,WORD,WORD);
 *     HRESULT (*AddRefTypeInfo)(ICreateTypeInfo*,ITypeInfo*,HREFTYPE*);
 *     HRESULT (*AddFuncDesc)(ICreateTypeInfo*,UINT,FUNCDESC*);
 *     HRESULT (*AddImplType)(ICreateTypeInfo*,UINT,HREFTYPE);
 *     HRESULT (*SetImplTypeFlags)(ICreateTypeInfo*,UINT,INT);
 *     HRESULT (*SetAlignment)(ICreateTypeInfo*,WORD);
 *     HRESULT (*SetSchema)(ICreateTypeInfo*,LPOLESTR);
 *     HRESULT (*AddVarDesc)(ICreateTypeInfo*,UINT,VARDESC*);
 *     HRESULT (*SetFuncAndParamNames)(ICreateTypeInfo*,UINT,LPOLESTR*,UINT);
 *     HRESULT (*SetVarName)(ICreateTypeInfo*,UINT,LPOLESTR);
 *     HRESULT (*SetTypeDescAlias)(ICreateTypeInfo*,TYPEDESC*);
 *     HRESULT (*DefineFuncAsDllEntry)(ICreateTypeInfo*,UINT,LPOLESTR,LPOLESTR);
 *     HRESULT (*SetFuncDocString)(ICreateTypeInfo*,UINT,LPOLESTR);
 *     HRESULT (*SetVarDocString)(ICreateTypeInfo*,UINT,LPOLESTR);
 *     HRESULT (*SetFuncHelpContext)(ICreateTypeInfo*,UINT,DWORD);
 *     HRESULT (*SetVarHelpContext)(ICreateTypeInfo*,UINT,DWORD);
 *     HRESULT (*SetMops)(ICreateTypeInfo*,UINT,BSTR);
 *     HRESULT (*SetTypeIdldesc)(ICreateTypeInfo*,IDLDESC*);
 *     HRESULT (*LayOut)(ICreateTypeInfo*);
 * };
 * }
 */
public class ICreateTypeInfoVtbl {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("SetGuid"),
        Constants$root.C_POINTER$LAYOUT.withName("SetTypeFlags"),
        Constants$root.C_POINTER$LAYOUT.withName("SetDocString"),
        Constants$root.C_POINTER$LAYOUT.withName("SetHelpContext"),
        Constants$root.C_POINTER$LAYOUT.withName("SetVersion"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRefTypeInfo"),
        Constants$root.C_POINTER$LAYOUT.withName("AddFuncDesc"),
        Constants$root.C_POINTER$LAYOUT.withName("AddImplType"),
        Constants$root.C_POINTER$LAYOUT.withName("SetImplTypeFlags"),
        Constants$root.C_POINTER$LAYOUT.withName("SetAlignment"),
        Constants$root.C_POINTER$LAYOUT.withName("SetSchema"),
        Constants$root.C_POINTER$LAYOUT.withName("AddVarDesc"),
        Constants$root.C_POINTER$LAYOUT.withName("SetFuncAndParamNames"),
        Constants$root.C_POINTER$LAYOUT.withName("SetVarName"),
        Constants$root.C_POINTER$LAYOUT.withName("SetTypeDescAlias"),
        Constants$root.C_POINTER$LAYOUT.withName("DefineFuncAsDllEntry"),
        Constants$root.C_POINTER$LAYOUT.withName("SetFuncDocString"),
        Constants$root.C_POINTER$LAYOUT.withName("SetVarDocString"),
        Constants$root.C_POINTER$LAYOUT.withName("SetFuncHelpContext"),
        Constants$root.C_POINTER$LAYOUT.withName("SetVarHelpContext"),
        Constants$root.C_POINTER$LAYOUT.withName("SetMops"),
        Constants$root.C_POINTER$LAYOUT.withName("SetTypeIdldesc"),
        Constants$root.C_POINTER$LAYOUT.withName("LayOut")
    ).withName("ICreateTypeInfoVtbl");
    public static MemoryLayout $LAYOUT() {
        return ICreateTypeInfoVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor QueryInterface_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_UP$MH = RuntimeHelper.upcallHandle(QueryInterface.class, "apply", ICreateTypeInfoVtbl.QueryInterface_UP$FUNC);
    static final FunctionDescriptor QueryInterface_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeInfoVtbl.QueryInterface_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(ICreateTypeInfo*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeInfoVtbl.QueryInterface_UP$MH, fi, ICreateTypeInfoVtbl.QueryInterface$FUNC, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)ICreateTypeInfoVtbl.QueryInterface_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return ICreateTypeInfoVtbl.QueryInterface$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(ICreateTypeInfo*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfoVtbl.QueryInterface$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(ICreateTypeInfo*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeInfoVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfoVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeInfoVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, SegmentScope scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor AddRef_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_UP$MH = RuntimeHelper.upcallHandle(AddRef.class, "apply", ICreateTypeInfoVtbl.AddRef_UP$FUNC);
    static final FunctionDescriptor AddRef_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeInfoVtbl.AddRef_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*AddRef)(ICreateTypeInfo*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeInfoVtbl.AddRef_UP$MH, fi, ICreateTypeInfoVtbl.AddRef$FUNC, scope);
        }
        static AddRef ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)ICreateTypeInfoVtbl.AddRef_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return ICreateTypeInfoVtbl.AddRef$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(ICreateTypeInfo*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfoVtbl.AddRef$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(ICreateTypeInfo*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeInfoVtbl.AddRef$VH.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfoVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeInfoVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, SegmentScope scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Release_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_UP$MH = RuntimeHelper.upcallHandle(Release.class, "apply", ICreateTypeInfoVtbl.Release_UP$FUNC);
    static final FunctionDescriptor Release_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeInfoVtbl.Release_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*Release)(ICreateTypeInfo*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeInfoVtbl.Release_UP$MH, fi, ICreateTypeInfoVtbl.Release$FUNC, scope);
        }
        static Release ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)ICreateTypeInfoVtbl.Release_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return ICreateTypeInfoVtbl.Release$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(ICreateTypeInfo*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfoVtbl.Release$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(ICreateTypeInfo*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeInfoVtbl.Release$VH.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfoVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeInfoVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, SegmentScope scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    static final FunctionDescriptor SetGuid$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor SetGuid_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetGuid_UP$MH = RuntimeHelper.upcallHandle(SetGuid.class, "apply", ICreateTypeInfoVtbl.SetGuid_UP$FUNC);
    static final FunctionDescriptor SetGuid_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetGuid_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeInfoVtbl.SetGuid_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetGuid)(ICreateTypeInfo*,const GUID*);
     * }
     */
    public interface SetGuid {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(SetGuid fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeInfoVtbl.SetGuid_UP$MH, fi, ICreateTypeInfoVtbl.SetGuid$FUNC, scope);
        }
        static SetGuid ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)ICreateTypeInfoVtbl.SetGuid_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetGuid$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetGuid"));
    public static VarHandle SetGuid$VH() {
        return ICreateTypeInfoVtbl.SetGuid$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetGuid)(ICreateTypeInfo*,const GUID*);
     * }
     */
    public static MemorySegment SetGuid$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfoVtbl.SetGuid$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetGuid)(ICreateTypeInfo*,const GUID*);
     * }
     */
    public static void SetGuid$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeInfoVtbl.SetGuid$VH.set(seg, x);
    }
    public static MemorySegment SetGuid$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfoVtbl.SetGuid$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetGuid$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeInfoVtbl.SetGuid$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetGuid SetGuid(MemorySegment segment, SegmentScope scope) {
        return SetGuid.ofAddress(SetGuid$get(segment), scope);
    }
    static final FunctionDescriptor SetTypeFlags$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor SetTypeFlags_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle SetTypeFlags_UP$MH = RuntimeHelper.upcallHandle(SetTypeFlags.class, "apply", ICreateTypeInfoVtbl.SetTypeFlags_UP$FUNC);
    static final FunctionDescriptor SetTypeFlags_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle SetTypeFlags_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeInfoVtbl.SetTypeFlags_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetTypeFlags)(ICreateTypeInfo*,UINT);
     * }
     */
    public interface SetTypeFlags {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(SetTypeFlags fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeInfoVtbl.SetTypeFlags_UP$MH, fi, ICreateTypeInfoVtbl.SetTypeFlags$FUNC, scope);
        }
        static SetTypeFlags ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)ICreateTypeInfoVtbl.SetTypeFlags_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetTypeFlags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetTypeFlags"));
    public static VarHandle SetTypeFlags$VH() {
        return ICreateTypeInfoVtbl.SetTypeFlags$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetTypeFlags)(ICreateTypeInfo*,UINT);
     * }
     */
    public static MemorySegment SetTypeFlags$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfoVtbl.SetTypeFlags$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetTypeFlags)(ICreateTypeInfo*,UINT);
     * }
     */
    public static void SetTypeFlags$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeInfoVtbl.SetTypeFlags$VH.set(seg, x);
    }
    public static MemorySegment SetTypeFlags$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfoVtbl.SetTypeFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetTypeFlags$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeInfoVtbl.SetTypeFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetTypeFlags SetTypeFlags(MemorySegment segment, SegmentScope scope) {
        return SetTypeFlags.ofAddress(SetTypeFlags$get(segment), scope);
    }
    static final FunctionDescriptor SetDocString$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor SetDocString_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetDocString_UP$MH = RuntimeHelper.upcallHandle(SetDocString.class, "apply", ICreateTypeInfoVtbl.SetDocString_UP$FUNC);
    static final FunctionDescriptor SetDocString_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetDocString_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeInfoVtbl.SetDocString_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetDocString)(ICreateTypeInfo*,LPOLESTR);
     * }
     */
    public interface SetDocString {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(SetDocString fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeInfoVtbl.SetDocString_UP$MH, fi, ICreateTypeInfoVtbl.SetDocString$FUNC, scope);
        }
        static SetDocString ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)ICreateTypeInfoVtbl.SetDocString_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetDocString$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetDocString"));
    public static VarHandle SetDocString$VH() {
        return ICreateTypeInfoVtbl.SetDocString$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetDocString)(ICreateTypeInfo*,LPOLESTR);
     * }
     */
    public static MemorySegment SetDocString$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfoVtbl.SetDocString$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetDocString)(ICreateTypeInfo*,LPOLESTR);
     * }
     */
    public static void SetDocString$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeInfoVtbl.SetDocString$VH.set(seg, x);
    }
    public static MemorySegment SetDocString$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfoVtbl.SetDocString$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetDocString$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeInfoVtbl.SetDocString$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetDocString SetDocString(MemorySegment segment, SegmentScope scope) {
        return SetDocString.ofAddress(SetDocString$get(segment), scope);
    }
    static final FunctionDescriptor SetHelpContext$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor SetHelpContext_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle SetHelpContext_UP$MH = RuntimeHelper.upcallHandle(SetHelpContext.class, "apply", ICreateTypeInfoVtbl.SetHelpContext_UP$FUNC);
    static final FunctionDescriptor SetHelpContext_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle SetHelpContext_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeInfoVtbl.SetHelpContext_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetHelpContext)(ICreateTypeInfo*,DWORD);
     * }
     */
    public interface SetHelpContext {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(SetHelpContext fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeInfoVtbl.SetHelpContext_UP$MH, fi, ICreateTypeInfoVtbl.SetHelpContext$FUNC, scope);
        }
        static SetHelpContext ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)ICreateTypeInfoVtbl.SetHelpContext_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetHelpContext$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetHelpContext"));
    public static VarHandle SetHelpContext$VH() {
        return ICreateTypeInfoVtbl.SetHelpContext$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetHelpContext)(ICreateTypeInfo*,DWORD);
     * }
     */
    public static MemorySegment SetHelpContext$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfoVtbl.SetHelpContext$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetHelpContext)(ICreateTypeInfo*,DWORD);
     * }
     */
    public static void SetHelpContext$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeInfoVtbl.SetHelpContext$VH.set(seg, x);
    }
    public static MemorySegment SetHelpContext$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfoVtbl.SetHelpContext$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetHelpContext$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeInfoVtbl.SetHelpContext$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetHelpContext SetHelpContext(MemorySegment segment, SegmentScope scope) {
        return SetHelpContext.ofAddress(SetHelpContext$get(segment), scope);
    }
    static final FunctionDescriptor SetVersion$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_SHORT$LAYOUT,
        Constants$root.C_SHORT$LAYOUT
    );
    static final FunctionDescriptor SetVersion_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_SHORT$LAYOUT,
        Constants$root.C_SHORT$LAYOUT
    );
    static final MethodHandle SetVersion_UP$MH = RuntimeHelper.upcallHandle(SetVersion.class, "apply", ICreateTypeInfoVtbl.SetVersion_UP$FUNC);
    static final FunctionDescriptor SetVersion_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_SHORT$LAYOUT,
        Constants$root.C_SHORT$LAYOUT
    );
    static final MethodHandle SetVersion_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeInfoVtbl.SetVersion_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetVersion)(ICreateTypeInfo*,WORD,WORD);
     * }
     */
    public interface SetVersion {

        int apply(java.lang.foreign.MemorySegment _x0, short _x1, short _x2);
        static MemorySegment allocate(SetVersion fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeInfoVtbl.SetVersion_UP$MH, fi, ICreateTypeInfoVtbl.SetVersion$FUNC, scope);
        }
        static SetVersion ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, short __x1, short __x2) -> {
                try {
                    return (int)ICreateTypeInfoVtbl.SetVersion_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetVersion$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetVersion"));
    public static VarHandle SetVersion$VH() {
        return ICreateTypeInfoVtbl.SetVersion$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetVersion)(ICreateTypeInfo*,WORD,WORD);
     * }
     */
    public static MemorySegment SetVersion$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfoVtbl.SetVersion$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetVersion)(ICreateTypeInfo*,WORD,WORD);
     * }
     */
    public static void SetVersion$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeInfoVtbl.SetVersion$VH.set(seg, x);
    }
    public static MemorySegment SetVersion$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfoVtbl.SetVersion$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetVersion$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeInfoVtbl.SetVersion$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetVersion SetVersion(MemorySegment segment, SegmentScope scope) {
        return SetVersion.ofAddress(SetVersion$get(segment), scope);
    }
    static final FunctionDescriptor AddRefTypeInfo$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor AddRefTypeInfo_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRefTypeInfo_UP$MH = RuntimeHelper.upcallHandle(AddRefTypeInfo.class, "apply", ICreateTypeInfoVtbl.AddRefTypeInfo_UP$FUNC);
    static final FunctionDescriptor AddRefTypeInfo_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRefTypeInfo_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeInfoVtbl.AddRefTypeInfo_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*AddRefTypeInfo)(ICreateTypeInfo*,ITypeInfo*,HREFTYPE*);
     * }
     */
    public interface AddRefTypeInfo {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(AddRefTypeInfo fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeInfoVtbl.AddRefTypeInfo_UP$MH, fi, ICreateTypeInfoVtbl.AddRefTypeInfo$FUNC, scope);
        }
        static AddRefTypeInfo ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)ICreateTypeInfoVtbl.AddRefTypeInfo_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRefTypeInfo$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRefTypeInfo"));
    public static VarHandle AddRefTypeInfo$VH() {
        return ICreateTypeInfoVtbl.AddRefTypeInfo$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*AddRefTypeInfo)(ICreateTypeInfo*,ITypeInfo*,HREFTYPE*);
     * }
     */
    public static MemorySegment AddRefTypeInfo$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfoVtbl.AddRefTypeInfo$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*AddRefTypeInfo)(ICreateTypeInfo*,ITypeInfo*,HREFTYPE*);
     * }
     */
    public static void AddRefTypeInfo$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeInfoVtbl.AddRefTypeInfo$VH.set(seg, x);
    }
    public static MemorySegment AddRefTypeInfo$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfoVtbl.AddRefTypeInfo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRefTypeInfo$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeInfoVtbl.AddRefTypeInfo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRefTypeInfo AddRefTypeInfo(MemorySegment segment, SegmentScope scope) {
        return AddRefTypeInfo.ofAddress(AddRefTypeInfo$get(segment), scope);
    }
    static final FunctionDescriptor AddFuncDesc$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor AddFuncDesc_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddFuncDesc_UP$MH = RuntimeHelper.upcallHandle(AddFuncDesc.class, "apply", ICreateTypeInfoVtbl.AddFuncDesc_UP$FUNC);
    static final FunctionDescriptor AddFuncDesc_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddFuncDesc_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeInfoVtbl.AddFuncDesc_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*AddFuncDesc)(ICreateTypeInfo*,UINT,FUNCDESC*);
     * }
     */
    public interface AddFuncDesc {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(AddFuncDesc fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeInfoVtbl.AddFuncDesc_UP$MH, fi, ICreateTypeInfoVtbl.AddFuncDesc$FUNC, scope);
        }
        static AddFuncDesc ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)ICreateTypeInfoVtbl.AddFuncDesc_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddFuncDesc$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddFuncDesc"));
    public static VarHandle AddFuncDesc$VH() {
        return ICreateTypeInfoVtbl.AddFuncDesc$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*AddFuncDesc)(ICreateTypeInfo*,UINT,FUNCDESC*);
     * }
     */
    public static MemorySegment AddFuncDesc$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfoVtbl.AddFuncDesc$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*AddFuncDesc)(ICreateTypeInfo*,UINT,FUNCDESC*);
     * }
     */
    public static void AddFuncDesc$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeInfoVtbl.AddFuncDesc$VH.set(seg, x);
    }
    public static MemorySegment AddFuncDesc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfoVtbl.AddFuncDesc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddFuncDesc$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeInfoVtbl.AddFuncDesc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddFuncDesc AddFuncDesc(MemorySegment segment, SegmentScope scope) {
        return AddFuncDesc.ofAddress(AddFuncDesc$get(segment), scope);
    }
    static final FunctionDescriptor AddImplType$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor AddImplType_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle AddImplType_UP$MH = RuntimeHelper.upcallHandle(AddImplType.class, "apply", ICreateTypeInfoVtbl.AddImplType_UP$FUNC);
    static final FunctionDescriptor AddImplType_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle AddImplType_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeInfoVtbl.AddImplType_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*AddImplType)(ICreateTypeInfo*,UINT,HREFTYPE);
     * }
     */
    public interface AddImplType {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2);
        static MemorySegment allocate(AddImplType fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeInfoVtbl.AddImplType_UP$MH, fi, ICreateTypeInfoVtbl.AddImplType$FUNC, scope);
        }
        static AddImplType ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2) -> {
                try {
                    return (int)ICreateTypeInfoVtbl.AddImplType_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddImplType$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddImplType"));
    public static VarHandle AddImplType$VH() {
        return ICreateTypeInfoVtbl.AddImplType$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*AddImplType)(ICreateTypeInfo*,UINT,HREFTYPE);
     * }
     */
    public static MemorySegment AddImplType$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfoVtbl.AddImplType$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*AddImplType)(ICreateTypeInfo*,UINT,HREFTYPE);
     * }
     */
    public static void AddImplType$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeInfoVtbl.AddImplType$VH.set(seg, x);
    }
    public static MemorySegment AddImplType$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfoVtbl.AddImplType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddImplType$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeInfoVtbl.AddImplType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddImplType AddImplType(MemorySegment segment, SegmentScope scope) {
        return AddImplType.ofAddress(AddImplType$get(segment), scope);
    }
    static final FunctionDescriptor SetImplTypeFlags$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor SetImplTypeFlags_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle SetImplTypeFlags_UP$MH = RuntimeHelper.upcallHandle(SetImplTypeFlags.class, "apply", ICreateTypeInfoVtbl.SetImplTypeFlags_UP$FUNC);
    static final FunctionDescriptor SetImplTypeFlags_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle SetImplTypeFlags_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeInfoVtbl.SetImplTypeFlags_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetImplTypeFlags)(ICreateTypeInfo*,UINT,INT);
     * }
     */
    public interface SetImplTypeFlags {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2);
        static MemorySegment allocate(SetImplTypeFlags fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeInfoVtbl.SetImplTypeFlags_UP$MH, fi, ICreateTypeInfoVtbl.SetImplTypeFlags$FUNC, scope);
        }
        static SetImplTypeFlags ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2) -> {
                try {
                    return (int)ICreateTypeInfoVtbl.SetImplTypeFlags_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetImplTypeFlags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetImplTypeFlags"));
    public static VarHandle SetImplTypeFlags$VH() {
        return ICreateTypeInfoVtbl.SetImplTypeFlags$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetImplTypeFlags)(ICreateTypeInfo*,UINT,INT);
     * }
     */
    public static MemorySegment SetImplTypeFlags$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfoVtbl.SetImplTypeFlags$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetImplTypeFlags)(ICreateTypeInfo*,UINT,INT);
     * }
     */
    public static void SetImplTypeFlags$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeInfoVtbl.SetImplTypeFlags$VH.set(seg, x);
    }
    public static MemorySegment SetImplTypeFlags$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfoVtbl.SetImplTypeFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetImplTypeFlags$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeInfoVtbl.SetImplTypeFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetImplTypeFlags SetImplTypeFlags(MemorySegment segment, SegmentScope scope) {
        return SetImplTypeFlags.ofAddress(SetImplTypeFlags$get(segment), scope);
    }
    static final FunctionDescriptor SetAlignment$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_SHORT$LAYOUT
    );
    static final FunctionDescriptor SetAlignment_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_SHORT$LAYOUT
    );
    static final MethodHandle SetAlignment_UP$MH = RuntimeHelper.upcallHandle(SetAlignment.class, "apply", ICreateTypeInfoVtbl.SetAlignment_UP$FUNC);
    static final FunctionDescriptor SetAlignment_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_SHORT$LAYOUT
    );
    static final MethodHandle SetAlignment_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeInfoVtbl.SetAlignment_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetAlignment)(ICreateTypeInfo*,WORD);
     * }
     */
    public interface SetAlignment {

        int apply(java.lang.foreign.MemorySegment _x0, short _x1);
        static MemorySegment allocate(SetAlignment fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeInfoVtbl.SetAlignment_UP$MH, fi, ICreateTypeInfoVtbl.SetAlignment$FUNC, scope);
        }
        static SetAlignment ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, short __x1) -> {
                try {
                    return (int)ICreateTypeInfoVtbl.SetAlignment_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetAlignment$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetAlignment"));
    public static VarHandle SetAlignment$VH() {
        return ICreateTypeInfoVtbl.SetAlignment$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetAlignment)(ICreateTypeInfo*,WORD);
     * }
     */
    public static MemorySegment SetAlignment$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfoVtbl.SetAlignment$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetAlignment)(ICreateTypeInfo*,WORD);
     * }
     */
    public static void SetAlignment$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeInfoVtbl.SetAlignment$VH.set(seg, x);
    }
    public static MemorySegment SetAlignment$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfoVtbl.SetAlignment$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetAlignment$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeInfoVtbl.SetAlignment$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetAlignment SetAlignment(MemorySegment segment, SegmentScope scope) {
        return SetAlignment.ofAddress(SetAlignment$get(segment), scope);
    }
    static final FunctionDescriptor SetSchema$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor SetSchema_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetSchema_UP$MH = RuntimeHelper.upcallHandle(SetSchema.class, "apply", ICreateTypeInfoVtbl.SetSchema_UP$FUNC);
    static final FunctionDescriptor SetSchema_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetSchema_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeInfoVtbl.SetSchema_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetSchema)(ICreateTypeInfo*,LPOLESTR);
     * }
     */
    public interface SetSchema {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(SetSchema fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeInfoVtbl.SetSchema_UP$MH, fi, ICreateTypeInfoVtbl.SetSchema$FUNC, scope);
        }
        static SetSchema ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)ICreateTypeInfoVtbl.SetSchema_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetSchema$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetSchema"));
    public static VarHandle SetSchema$VH() {
        return ICreateTypeInfoVtbl.SetSchema$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetSchema)(ICreateTypeInfo*,LPOLESTR);
     * }
     */
    public static MemorySegment SetSchema$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfoVtbl.SetSchema$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetSchema)(ICreateTypeInfo*,LPOLESTR);
     * }
     */
    public static void SetSchema$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeInfoVtbl.SetSchema$VH.set(seg, x);
    }
    public static MemorySegment SetSchema$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfoVtbl.SetSchema$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetSchema$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeInfoVtbl.SetSchema$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetSchema SetSchema(MemorySegment segment, SegmentScope scope) {
        return SetSchema.ofAddress(SetSchema$get(segment), scope);
    }
    static final FunctionDescriptor AddVarDesc$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor AddVarDesc_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddVarDesc_UP$MH = RuntimeHelper.upcallHandle(AddVarDesc.class, "apply", ICreateTypeInfoVtbl.AddVarDesc_UP$FUNC);
    static final FunctionDescriptor AddVarDesc_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddVarDesc_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeInfoVtbl.AddVarDesc_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*AddVarDesc)(ICreateTypeInfo*,UINT,VARDESC*);
     * }
     */
    public interface AddVarDesc {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(AddVarDesc fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeInfoVtbl.AddVarDesc_UP$MH, fi, ICreateTypeInfoVtbl.AddVarDesc$FUNC, scope);
        }
        static AddVarDesc ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)ICreateTypeInfoVtbl.AddVarDesc_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddVarDesc$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddVarDesc"));
    public static VarHandle AddVarDesc$VH() {
        return ICreateTypeInfoVtbl.AddVarDesc$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*AddVarDesc)(ICreateTypeInfo*,UINT,VARDESC*);
     * }
     */
    public static MemorySegment AddVarDesc$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfoVtbl.AddVarDesc$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*AddVarDesc)(ICreateTypeInfo*,UINT,VARDESC*);
     * }
     */
    public static void AddVarDesc$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeInfoVtbl.AddVarDesc$VH.set(seg, x);
    }
    public static MemorySegment AddVarDesc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfoVtbl.AddVarDesc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddVarDesc$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeInfoVtbl.AddVarDesc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddVarDesc AddVarDesc(MemorySegment segment, SegmentScope scope) {
        return AddVarDesc.ofAddress(AddVarDesc$get(segment), scope);
    }
    static final FunctionDescriptor SetFuncAndParamNames$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor SetFuncAndParamNames_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle SetFuncAndParamNames_UP$MH = RuntimeHelper.upcallHandle(SetFuncAndParamNames.class, "apply", ICreateTypeInfoVtbl.SetFuncAndParamNames_UP$FUNC);
    static final FunctionDescriptor SetFuncAndParamNames_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle SetFuncAndParamNames_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeInfoVtbl.SetFuncAndParamNames_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetFuncAndParamNames)(ICreateTypeInfo*,UINT,LPOLESTR*,UINT);
     * }
     */
    public interface SetFuncAndParamNames {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, int _x3);
        static MemorySegment allocate(SetFuncAndParamNames fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeInfoVtbl.SetFuncAndParamNames_UP$MH, fi, ICreateTypeInfoVtbl.SetFuncAndParamNames$FUNC, scope);
        }
        static SetFuncAndParamNames ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, int __x3) -> {
                try {
                    return (int)ICreateTypeInfoVtbl.SetFuncAndParamNames_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetFuncAndParamNames$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetFuncAndParamNames"));
    public static VarHandle SetFuncAndParamNames$VH() {
        return ICreateTypeInfoVtbl.SetFuncAndParamNames$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetFuncAndParamNames)(ICreateTypeInfo*,UINT,LPOLESTR*,UINT);
     * }
     */
    public static MemorySegment SetFuncAndParamNames$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfoVtbl.SetFuncAndParamNames$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetFuncAndParamNames)(ICreateTypeInfo*,UINT,LPOLESTR*,UINT);
     * }
     */
    public static void SetFuncAndParamNames$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeInfoVtbl.SetFuncAndParamNames$VH.set(seg, x);
    }
    public static MemorySegment SetFuncAndParamNames$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfoVtbl.SetFuncAndParamNames$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetFuncAndParamNames$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeInfoVtbl.SetFuncAndParamNames$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetFuncAndParamNames SetFuncAndParamNames(MemorySegment segment, SegmentScope scope) {
        return SetFuncAndParamNames.ofAddress(SetFuncAndParamNames$get(segment), scope);
    }
    static final FunctionDescriptor SetVarName$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor SetVarName_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetVarName_UP$MH = RuntimeHelper.upcallHandle(SetVarName.class, "apply", ICreateTypeInfoVtbl.SetVarName_UP$FUNC);
    static final FunctionDescriptor SetVarName_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetVarName_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeInfoVtbl.SetVarName_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetVarName)(ICreateTypeInfo*,UINT,LPOLESTR);
     * }
     */
    public interface SetVarName {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(SetVarName fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeInfoVtbl.SetVarName_UP$MH, fi, ICreateTypeInfoVtbl.SetVarName$FUNC, scope);
        }
        static SetVarName ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)ICreateTypeInfoVtbl.SetVarName_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetVarName$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetVarName"));
    public static VarHandle SetVarName$VH() {
        return ICreateTypeInfoVtbl.SetVarName$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetVarName)(ICreateTypeInfo*,UINT,LPOLESTR);
     * }
     */
    public static MemorySegment SetVarName$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfoVtbl.SetVarName$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetVarName)(ICreateTypeInfo*,UINT,LPOLESTR);
     * }
     */
    public static void SetVarName$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeInfoVtbl.SetVarName$VH.set(seg, x);
    }
    public static MemorySegment SetVarName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfoVtbl.SetVarName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetVarName$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeInfoVtbl.SetVarName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetVarName SetVarName(MemorySegment segment, SegmentScope scope) {
        return SetVarName.ofAddress(SetVarName$get(segment), scope);
    }
    static final FunctionDescriptor SetTypeDescAlias$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor SetTypeDescAlias_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetTypeDescAlias_UP$MH = RuntimeHelper.upcallHandle(SetTypeDescAlias.class, "apply", ICreateTypeInfoVtbl.SetTypeDescAlias_UP$FUNC);
    static final FunctionDescriptor SetTypeDescAlias_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetTypeDescAlias_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeInfoVtbl.SetTypeDescAlias_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetTypeDescAlias)(ICreateTypeInfo*,TYPEDESC*);
     * }
     */
    public interface SetTypeDescAlias {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(SetTypeDescAlias fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeInfoVtbl.SetTypeDescAlias_UP$MH, fi, ICreateTypeInfoVtbl.SetTypeDescAlias$FUNC, scope);
        }
        static SetTypeDescAlias ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)ICreateTypeInfoVtbl.SetTypeDescAlias_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetTypeDescAlias$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetTypeDescAlias"));
    public static VarHandle SetTypeDescAlias$VH() {
        return ICreateTypeInfoVtbl.SetTypeDescAlias$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetTypeDescAlias)(ICreateTypeInfo*,TYPEDESC*);
     * }
     */
    public static MemorySegment SetTypeDescAlias$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfoVtbl.SetTypeDescAlias$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetTypeDescAlias)(ICreateTypeInfo*,TYPEDESC*);
     * }
     */
    public static void SetTypeDescAlias$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeInfoVtbl.SetTypeDescAlias$VH.set(seg, x);
    }
    public static MemorySegment SetTypeDescAlias$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfoVtbl.SetTypeDescAlias$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetTypeDescAlias$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeInfoVtbl.SetTypeDescAlias$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetTypeDescAlias SetTypeDescAlias(MemorySegment segment, SegmentScope scope) {
        return SetTypeDescAlias.ofAddress(SetTypeDescAlias$get(segment), scope);
    }
    static final FunctionDescriptor DefineFuncAsDllEntry$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor DefineFuncAsDllEntry_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle DefineFuncAsDllEntry_UP$MH = RuntimeHelper.upcallHandle(DefineFuncAsDllEntry.class, "apply", ICreateTypeInfoVtbl.DefineFuncAsDllEntry_UP$FUNC);
    static final FunctionDescriptor DefineFuncAsDllEntry_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle DefineFuncAsDllEntry_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeInfoVtbl.DefineFuncAsDllEntry_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*DefineFuncAsDllEntry)(ICreateTypeInfo*,UINT,LPOLESTR,LPOLESTR);
     * }
     */
    public interface DefineFuncAsDllEntry {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(DefineFuncAsDllEntry fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeInfoVtbl.DefineFuncAsDllEntry_UP$MH, fi, ICreateTypeInfoVtbl.DefineFuncAsDllEntry$FUNC, scope);
        }
        static DefineFuncAsDllEntry ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)ICreateTypeInfoVtbl.DefineFuncAsDllEntry_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle DefineFuncAsDllEntry$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("DefineFuncAsDllEntry"));
    public static VarHandle DefineFuncAsDllEntry$VH() {
        return ICreateTypeInfoVtbl.DefineFuncAsDllEntry$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*DefineFuncAsDllEntry)(ICreateTypeInfo*,UINT,LPOLESTR,LPOLESTR);
     * }
     */
    public static MemorySegment DefineFuncAsDllEntry$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfoVtbl.DefineFuncAsDllEntry$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*DefineFuncAsDllEntry)(ICreateTypeInfo*,UINT,LPOLESTR,LPOLESTR);
     * }
     */
    public static void DefineFuncAsDllEntry$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeInfoVtbl.DefineFuncAsDllEntry$VH.set(seg, x);
    }
    public static MemorySegment DefineFuncAsDllEntry$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfoVtbl.DefineFuncAsDllEntry$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DefineFuncAsDllEntry$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeInfoVtbl.DefineFuncAsDllEntry$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static DefineFuncAsDllEntry DefineFuncAsDllEntry(MemorySegment segment, SegmentScope scope) {
        return DefineFuncAsDllEntry.ofAddress(DefineFuncAsDllEntry$get(segment), scope);
    }
    static final FunctionDescriptor SetFuncDocString$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor SetFuncDocString_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetFuncDocString_UP$MH = RuntimeHelper.upcallHandle(SetFuncDocString.class, "apply", ICreateTypeInfoVtbl.SetFuncDocString_UP$FUNC);
    static final FunctionDescriptor SetFuncDocString_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetFuncDocString_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeInfoVtbl.SetFuncDocString_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetFuncDocString)(ICreateTypeInfo*,UINT,LPOLESTR);
     * }
     */
    public interface SetFuncDocString {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(SetFuncDocString fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeInfoVtbl.SetFuncDocString_UP$MH, fi, ICreateTypeInfoVtbl.SetFuncDocString$FUNC, scope);
        }
        static SetFuncDocString ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)ICreateTypeInfoVtbl.SetFuncDocString_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetFuncDocString$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetFuncDocString"));
    public static VarHandle SetFuncDocString$VH() {
        return ICreateTypeInfoVtbl.SetFuncDocString$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetFuncDocString)(ICreateTypeInfo*,UINT,LPOLESTR);
     * }
     */
    public static MemorySegment SetFuncDocString$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfoVtbl.SetFuncDocString$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetFuncDocString)(ICreateTypeInfo*,UINT,LPOLESTR);
     * }
     */
    public static void SetFuncDocString$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeInfoVtbl.SetFuncDocString$VH.set(seg, x);
    }
    public static MemorySegment SetFuncDocString$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfoVtbl.SetFuncDocString$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetFuncDocString$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeInfoVtbl.SetFuncDocString$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetFuncDocString SetFuncDocString(MemorySegment segment, SegmentScope scope) {
        return SetFuncDocString.ofAddress(SetFuncDocString$get(segment), scope);
    }
    static final FunctionDescriptor SetVarDocString$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor SetVarDocString_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetVarDocString_UP$MH = RuntimeHelper.upcallHandle(SetVarDocString.class, "apply", ICreateTypeInfoVtbl.SetVarDocString_UP$FUNC);
    static final FunctionDescriptor SetVarDocString_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetVarDocString_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeInfoVtbl.SetVarDocString_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetVarDocString)(ICreateTypeInfo*,UINT,LPOLESTR);
     * }
     */
    public interface SetVarDocString {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(SetVarDocString fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeInfoVtbl.SetVarDocString_UP$MH, fi, ICreateTypeInfoVtbl.SetVarDocString$FUNC, scope);
        }
        static SetVarDocString ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)ICreateTypeInfoVtbl.SetVarDocString_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetVarDocString$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetVarDocString"));
    public static VarHandle SetVarDocString$VH() {
        return ICreateTypeInfoVtbl.SetVarDocString$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetVarDocString)(ICreateTypeInfo*,UINT,LPOLESTR);
     * }
     */
    public static MemorySegment SetVarDocString$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfoVtbl.SetVarDocString$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetVarDocString)(ICreateTypeInfo*,UINT,LPOLESTR);
     * }
     */
    public static void SetVarDocString$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeInfoVtbl.SetVarDocString$VH.set(seg, x);
    }
    public static MemorySegment SetVarDocString$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfoVtbl.SetVarDocString$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetVarDocString$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeInfoVtbl.SetVarDocString$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetVarDocString SetVarDocString(MemorySegment segment, SegmentScope scope) {
        return SetVarDocString.ofAddress(SetVarDocString$get(segment), scope);
    }
    static final FunctionDescriptor SetFuncHelpContext$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor SetFuncHelpContext_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle SetFuncHelpContext_UP$MH = RuntimeHelper.upcallHandle(SetFuncHelpContext.class, "apply", ICreateTypeInfoVtbl.SetFuncHelpContext_UP$FUNC);
    static final FunctionDescriptor SetFuncHelpContext_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle SetFuncHelpContext_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeInfoVtbl.SetFuncHelpContext_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetFuncHelpContext)(ICreateTypeInfo*,UINT,DWORD);
     * }
     */
    public interface SetFuncHelpContext {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2);
        static MemorySegment allocate(SetFuncHelpContext fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeInfoVtbl.SetFuncHelpContext_UP$MH, fi, ICreateTypeInfoVtbl.SetFuncHelpContext$FUNC, scope);
        }
        static SetFuncHelpContext ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2) -> {
                try {
                    return (int)ICreateTypeInfoVtbl.SetFuncHelpContext_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetFuncHelpContext$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetFuncHelpContext"));
    public static VarHandle SetFuncHelpContext$VH() {
        return ICreateTypeInfoVtbl.SetFuncHelpContext$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetFuncHelpContext)(ICreateTypeInfo*,UINT,DWORD);
     * }
     */
    public static MemorySegment SetFuncHelpContext$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfoVtbl.SetFuncHelpContext$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetFuncHelpContext)(ICreateTypeInfo*,UINT,DWORD);
     * }
     */
    public static void SetFuncHelpContext$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeInfoVtbl.SetFuncHelpContext$VH.set(seg, x);
    }
    public static MemorySegment SetFuncHelpContext$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfoVtbl.SetFuncHelpContext$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetFuncHelpContext$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeInfoVtbl.SetFuncHelpContext$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetFuncHelpContext SetFuncHelpContext(MemorySegment segment, SegmentScope scope) {
        return SetFuncHelpContext.ofAddress(SetFuncHelpContext$get(segment), scope);
    }
    static final FunctionDescriptor SetVarHelpContext$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor SetVarHelpContext_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle SetVarHelpContext_UP$MH = RuntimeHelper.upcallHandle(SetVarHelpContext.class, "apply", ICreateTypeInfoVtbl.SetVarHelpContext_UP$FUNC);
    static final FunctionDescriptor SetVarHelpContext_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle SetVarHelpContext_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeInfoVtbl.SetVarHelpContext_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetVarHelpContext)(ICreateTypeInfo*,UINT,DWORD);
     * }
     */
    public interface SetVarHelpContext {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2);
        static MemorySegment allocate(SetVarHelpContext fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeInfoVtbl.SetVarHelpContext_UP$MH, fi, ICreateTypeInfoVtbl.SetVarHelpContext$FUNC, scope);
        }
        static SetVarHelpContext ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2) -> {
                try {
                    return (int)ICreateTypeInfoVtbl.SetVarHelpContext_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetVarHelpContext$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetVarHelpContext"));
    public static VarHandle SetVarHelpContext$VH() {
        return ICreateTypeInfoVtbl.SetVarHelpContext$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetVarHelpContext)(ICreateTypeInfo*,UINT,DWORD);
     * }
     */
    public static MemorySegment SetVarHelpContext$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfoVtbl.SetVarHelpContext$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetVarHelpContext)(ICreateTypeInfo*,UINT,DWORD);
     * }
     */
    public static void SetVarHelpContext$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeInfoVtbl.SetVarHelpContext$VH.set(seg, x);
    }
    public static MemorySegment SetVarHelpContext$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfoVtbl.SetVarHelpContext$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetVarHelpContext$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeInfoVtbl.SetVarHelpContext$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetVarHelpContext SetVarHelpContext(MemorySegment segment, SegmentScope scope) {
        return SetVarHelpContext.ofAddress(SetVarHelpContext$get(segment), scope);
    }
    static final FunctionDescriptor SetMops$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor SetMops_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetMops_UP$MH = RuntimeHelper.upcallHandle(SetMops.class, "apply", ICreateTypeInfoVtbl.SetMops_UP$FUNC);
    static final FunctionDescriptor SetMops_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetMops_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeInfoVtbl.SetMops_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetMops)(ICreateTypeInfo*,UINT,BSTR);
     * }
     */
    public interface SetMops {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(SetMops fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeInfoVtbl.SetMops_UP$MH, fi, ICreateTypeInfoVtbl.SetMops$FUNC, scope);
        }
        static SetMops ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)ICreateTypeInfoVtbl.SetMops_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetMops$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetMops"));
    public static VarHandle SetMops$VH() {
        return ICreateTypeInfoVtbl.SetMops$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetMops)(ICreateTypeInfo*,UINT,BSTR);
     * }
     */
    public static MemorySegment SetMops$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfoVtbl.SetMops$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetMops)(ICreateTypeInfo*,UINT,BSTR);
     * }
     */
    public static void SetMops$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeInfoVtbl.SetMops$VH.set(seg, x);
    }
    public static MemorySegment SetMops$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfoVtbl.SetMops$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetMops$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeInfoVtbl.SetMops$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetMops SetMops(MemorySegment segment, SegmentScope scope) {
        return SetMops.ofAddress(SetMops$get(segment), scope);
    }
    static final FunctionDescriptor SetTypeIdldesc$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor SetTypeIdldesc_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetTypeIdldesc_UP$MH = RuntimeHelper.upcallHandle(SetTypeIdldesc.class, "apply", ICreateTypeInfoVtbl.SetTypeIdldesc_UP$FUNC);
    static final FunctionDescriptor SetTypeIdldesc_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetTypeIdldesc_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeInfoVtbl.SetTypeIdldesc_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetTypeIdldesc)(ICreateTypeInfo*,IDLDESC*);
     * }
     */
    public interface SetTypeIdldesc {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(SetTypeIdldesc fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeInfoVtbl.SetTypeIdldesc_UP$MH, fi, ICreateTypeInfoVtbl.SetTypeIdldesc$FUNC, scope);
        }
        static SetTypeIdldesc ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)ICreateTypeInfoVtbl.SetTypeIdldesc_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetTypeIdldesc$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetTypeIdldesc"));
    public static VarHandle SetTypeIdldesc$VH() {
        return ICreateTypeInfoVtbl.SetTypeIdldesc$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetTypeIdldesc)(ICreateTypeInfo*,IDLDESC*);
     * }
     */
    public static MemorySegment SetTypeIdldesc$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfoVtbl.SetTypeIdldesc$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetTypeIdldesc)(ICreateTypeInfo*,IDLDESC*);
     * }
     */
    public static void SetTypeIdldesc$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeInfoVtbl.SetTypeIdldesc$VH.set(seg, x);
    }
    public static MemorySegment SetTypeIdldesc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfoVtbl.SetTypeIdldesc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetTypeIdldesc$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeInfoVtbl.SetTypeIdldesc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetTypeIdldesc SetTypeIdldesc(MemorySegment segment, SegmentScope scope) {
        return SetTypeIdldesc.ofAddress(SetTypeIdldesc$get(segment), scope);
    }
    static final FunctionDescriptor LayOut$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor LayOut_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle LayOut_UP$MH = RuntimeHelper.upcallHandle(LayOut.class, "apply", ICreateTypeInfoVtbl.LayOut_UP$FUNC);
    static final FunctionDescriptor LayOut_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle LayOut_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeInfoVtbl.LayOut_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*LayOut)(ICreateTypeInfo*);
     * }
     */
    public interface LayOut {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(LayOut fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeInfoVtbl.LayOut_UP$MH, fi, ICreateTypeInfoVtbl.LayOut$FUNC, scope);
        }
        static LayOut ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)ICreateTypeInfoVtbl.LayOut_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle LayOut$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("LayOut"));
    public static VarHandle LayOut$VH() {
        return ICreateTypeInfoVtbl.LayOut$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*LayOut)(ICreateTypeInfo*);
     * }
     */
    public static MemorySegment LayOut$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfoVtbl.LayOut$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*LayOut)(ICreateTypeInfo*);
     * }
     */
    public static void LayOut$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeInfoVtbl.LayOut$VH.set(seg, x);
    }
    public static MemorySegment LayOut$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeInfoVtbl.LayOut$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void LayOut$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeInfoVtbl.LayOut$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static LayOut LayOut(MemorySegment segment, SegmentScope scope) {
        return LayOut.ofAddress(LayOut$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


