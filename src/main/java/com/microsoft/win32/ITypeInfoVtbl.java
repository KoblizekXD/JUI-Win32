// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct ITypeInfoVtbl {
 *     HRESULT (*QueryInterface)(ITypeInfo*,const IID*,void**);
 *     ULONG (*AddRef)(ITypeInfo*);
 *     ULONG (*Release)(ITypeInfo*);
 *     HRESULT (*GetTypeAttr)(ITypeInfo*,TYPEATTR**);
 *     HRESULT (*GetTypeComp)(ITypeInfo*,ITypeComp**);
 *     HRESULT (*GetFuncDesc)(ITypeInfo*,UINT,FUNCDESC**);
 *     HRESULT (*GetVarDesc)(ITypeInfo*,UINT,VARDESC**);
 *     HRESULT (*GetNames)(ITypeInfo*,MEMBERID,BSTR*,UINT,UINT*);
 *     HRESULT (*GetRefTypeOfImplType)(ITypeInfo*,UINT,HREFTYPE*);
 *     HRESULT (*GetImplTypeFlags)(ITypeInfo*,UINT,INT*);
 *     HRESULT (*GetIDsOfNames)(ITypeInfo*,LPOLESTR*,UINT,MEMBERID*);
 *     HRESULT (*Invoke)(ITypeInfo*,PVOID,MEMBERID,WORD,DISPPARAMS*,VARIANT*,EXCEPINFO*,UINT*);
 *     HRESULT (*GetDocumentation)(ITypeInfo*,MEMBERID,BSTR*,BSTR*,DWORD*,BSTR*);
 *     HRESULT (*GetDllEntry)(ITypeInfo*,MEMBERID,INVOKEKIND,BSTR*,BSTR*,WORD*);
 *     HRESULT (*GetRefTypeInfo)(ITypeInfo*,HREFTYPE,ITypeInfo**);
 *     HRESULT (*AddressOfMember)(ITypeInfo*,MEMBERID,INVOKEKIND,PVOID*);
 *     HRESULT (*CreateInstance)(ITypeInfo*,IUnknown*,const IID*,PVOID*);
 *     HRESULT (*GetMops)(ITypeInfo*,MEMBERID,BSTR*);
 *     HRESULT (*GetContainingTypeLib)(ITypeInfo*,ITypeLib**,UINT*);
 *     void (*ReleaseTypeAttr)(ITypeInfo*,TYPEATTR*);
 *     void (*ReleaseFuncDesc)(ITypeInfo*,FUNCDESC*);
 *     void (*ReleaseVarDesc)(ITypeInfo*,VARDESC*);
 * };
 * }
 */
public class ITypeInfoVtbl {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("GetTypeAttr"),
        Constants$root.C_POINTER$LAYOUT.withName("GetTypeComp"),
        Constants$root.C_POINTER$LAYOUT.withName("GetFuncDesc"),
        Constants$root.C_POINTER$LAYOUT.withName("GetVarDesc"),
        Constants$root.C_POINTER$LAYOUT.withName("GetNames"),
        Constants$root.C_POINTER$LAYOUT.withName("GetRefTypeOfImplType"),
        Constants$root.C_POINTER$LAYOUT.withName("GetImplTypeFlags"),
        Constants$root.C_POINTER$LAYOUT.withName("GetIDsOfNames"),
        Constants$root.C_POINTER$LAYOUT.withName("Invoke"),
        Constants$root.C_POINTER$LAYOUT.withName("GetDocumentation"),
        Constants$root.C_POINTER$LAYOUT.withName("GetDllEntry"),
        Constants$root.C_POINTER$LAYOUT.withName("GetRefTypeInfo"),
        Constants$root.C_POINTER$LAYOUT.withName("AddressOfMember"),
        Constants$root.C_POINTER$LAYOUT.withName("CreateInstance"),
        Constants$root.C_POINTER$LAYOUT.withName("GetMops"),
        Constants$root.C_POINTER$LAYOUT.withName("GetContainingTypeLib"),
        Constants$root.C_POINTER$LAYOUT.withName("ReleaseTypeAttr"),
        Constants$root.C_POINTER$LAYOUT.withName("ReleaseFuncDesc"),
        Constants$root.C_POINTER$LAYOUT.withName("ReleaseVarDesc")
    ).withName("ITypeInfoVtbl");
    public static MemoryLayout $LAYOUT() {
        return ITypeInfoVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor QueryInterface_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_UP$MH = RuntimeHelper.upcallHandle(QueryInterface.class, "apply", ITypeInfoVtbl.QueryInterface_UP$FUNC);
    static final FunctionDescriptor QueryInterface_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_DOWN$MH = RuntimeHelper.downcallHandle(
        ITypeInfoVtbl.QueryInterface_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(ITypeInfo*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ITypeInfoVtbl.QueryInterface_UP$MH, fi, ITypeInfoVtbl.QueryInterface$FUNC, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)ITypeInfoVtbl.QueryInterface_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return ITypeInfoVtbl.QueryInterface$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(ITypeInfo*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ITypeInfoVtbl.QueryInterface$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(ITypeInfo*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        ITypeInfoVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ITypeInfoVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        ITypeInfoVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, SegmentScope scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor AddRef_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_UP$MH = RuntimeHelper.upcallHandle(AddRef.class, "apply", ITypeInfoVtbl.AddRef_UP$FUNC);
    static final FunctionDescriptor AddRef_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_DOWN$MH = RuntimeHelper.downcallHandle(
        ITypeInfoVtbl.AddRef_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*AddRef)(ITypeInfo*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ITypeInfoVtbl.AddRef_UP$MH, fi, ITypeInfoVtbl.AddRef$FUNC, scope);
        }
        static AddRef ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)ITypeInfoVtbl.AddRef_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return ITypeInfoVtbl.AddRef$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(ITypeInfo*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ITypeInfoVtbl.AddRef$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(ITypeInfo*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        ITypeInfoVtbl.AddRef$VH.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ITypeInfoVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        ITypeInfoVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, SegmentScope scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Release_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_UP$MH = RuntimeHelper.upcallHandle(Release.class, "apply", ITypeInfoVtbl.Release_UP$FUNC);
    static final FunctionDescriptor Release_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_DOWN$MH = RuntimeHelper.downcallHandle(
        ITypeInfoVtbl.Release_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*Release)(ITypeInfo*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ITypeInfoVtbl.Release_UP$MH, fi, ITypeInfoVtbl.Release$FUNC, scope);
        }
        static Release ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)ITypeInfoVtbl.Release_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return ITypeInfoVtbl.Release$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(ITypeInfo*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ITypeInfoVtbl.Release$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(ITypeInfo*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        ITypeInfoVtbl.Release$VH.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ITypeInfoVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        ITypeInfoVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, SegmentScope scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    static final FunctionDescriptor GetTypeAttr$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetTypeAttr_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetTypeAttr_UP$MH = RuntimeHelper.upcallHandle(GetTypeAttr.class, "apply", ITypeInfoVtbl.GetTypeAttr_UP$FUNC);
    static final FunctionDescriptor GetTypeAttr_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetTypeAttr_DOWN$MH = RuntimeHelper.downcallHandle(
        ITypeInfoVtbl.GetTypeAttr_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetTypeAttr)(ITypeInfo*,TYPEATTR**);
     * }
     */
    public interface GetTypeAttr {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetTypeAttr fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ITypeInfoVtbl.GetTypeAttr_UP$MH, fi, ITypeInfoVtbl.GetTypeAttr$FUNC, scope);
        }
        static GetTypeAttr ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)ITypeInfoVtbl.GetTypeAttr_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetTypeAttr$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetTypeAttr"));
    public static VarHandle GetTypeAttr$VH() {
        return ITypeInfoVtbl.GetTypeAttr$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetTypeAttr)(ITypeInfo*,TYPEATTR**);
     * }
     */
    public static MemorySegment GetTypeAttr$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ITypeInfoVtbl.GetTypeAttr$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetTypeAttr)(ITypeInfo*,TYPEATTR**);
     * }
     */
    public static void GetTypeAttr$set(MemorySegment seg, MemorySegment x) {
        ITypeInfoVtbl.GetTypeAttr$VH.set(seg, x);
    }
    public static MemorySegment GetTypeAttr$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ITypeInfoVtbl.GetTypeAttr$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTypeAttr$set(MemorySegment seg, long index, MemorySegment x) {
        ITypeInfoVtbl.GetTypeAttr$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTypeAttr GetTypeAttr(MemorySegment segment, SegmentScope scope) {
        return GetTypeAttr.ofAddress(GetTypeAttr$get(segment), scope);
    }
    static final FunctionDescriptor GetTypeComp$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetTypeComp_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetTypeComp_UP$MH = RuntimeHelper.upcallHandle(GetTypeComp.class, "apply", ITypeInfoVtbl.GetTypeComp_UP$FUNC);
    static final FunctionDescriptor GetTypeComp_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetTypeComp_DOWN$MH = RuntimeHelper.downcallHandle(
        ITypeInfoVtbl.GetTypeComp_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetTypeComp)(ITypeInfo*,ITypeComp**);
     * }
     */
    public interface GetTypeComp {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetTypeComp fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ITypeInfoVtbl.GetTypeComp_UP$MH, fi, ITypeInfoVtbl.GetTypeComp$FUNC, scope);
        }
        static GetTypeComp ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)ITypeInfoVtbl.GetTypeComp_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetTypeComp$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetTypeComp"));
    public static VarHandle GetTypeComp$VH() {
        return ITypeInfoVtbl.GetTypeComp$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetTypeComp)(ITypeInfo*,ITypeComp**);
     * }
     */
    public static MemorySegment GetTypeComp$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ITypeInfoVtbl.GetTypeComp$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetTypeComp)(ITypeInfo*,ITypeComp**);
     * }
     */
    public static void GetTypeComp$set(MemorySegment seg, MemorySegment x) {
        ITypeInfoVtbl.GetTypeComp$VH.set(seg, x);
    }
    public static MemorySegment GetTypeComp$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ITypeInfoVtbl.GetTypeComp$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTypeComp$set(MemorySegment seg, long index, MemorySegment x) {
        ITypeInfoVtbl.GetTypeComp$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTypeComp GetTypeComp(MemorySegment segment, SegmentScope scope) {
        return GetTypeComp.ofAddress(GetTypeComp$get(segment), scope);
    }
    static final FunctionDescriptor GetFuncDesc$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetFuncDesc_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetFuncDesc_UP$MH = RuntimeHelper.upcallHandle(GetFuncDesc.class, "apply", ITypeInfoVtbl.GetFuncDesc_UP$FUNC);
    static final FunctionDescriptor GetFuncDesc_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetFuncDesc_DOWN$MH = RuntimeHelper.downcallHandle(
        ITypeInfoVtbl.GetFuncDesc_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetFuncDesc)(ITypeInfo*,UINT,FUNCDESC**);
     * }
     */
    public interface GetFuncDesc {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetFuncDesc fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ITypeInfoVtbl.GetFuncDesc_UP$MH, fi, ITypeInfoVtbl.GetFuncDesc$FUNC, scope);
        }
        static GetFuncDesc ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)ITypeInfoVtbl.GetFuncDesc_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetFuncDesc$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetFuncDesc"));
    public static VarHandle GetFuncDesc$VH() {
        return ITypeInfoVtbl.GetFuncDesc$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetFuncDesc)(ITypeInfo*,UINT,FUNCDESC**);
     * }
     */
    public static MemorySegment GetFuncDesc$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ITypeInfoVtbl.GetFuncDesc$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetFuncDesc)(ITypeInfo*,UINT,FUNCDESC**);
     * }
     */
    public static void GetFuncDesc$set(MemorySegment seg, MemorySegment x) {
        ITypeInfoVtbl.GetFuncDesc$VH.set(seg, x);
    }
    public static MemorySegment GetFuncDesc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ITypeInfoVtbl.GetFuncDesc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetFuncDesc$set(MemorySegment seg, long index, MemorySegment x) {
        ITypeInfoVtbl.GetFuncDesc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetFuncDesc GetFuncDesc(MemorySegment segment, SegmentScope scope) {
        return GetFuncDesc.ofAddress(GetFuncDesc$get(segment), scope);
    }
    static final FunctionDescriptor GetVarDesc$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetVarDesc_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetVarDesc_UP$MH = RuntimeHelper.upcallHandle(GetVarDesc.class, "apply", ITypeInfoVtbl.GetVarDesc_UP$FUNC);
    static final FunctionDescriptor GetVarDesc_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetVarDesc_DOWN$MH = RuntimeHelper.downcallHandle(
        ITypeInfoVtbl.GetVarDesc_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetVarDesc)(ITypeInfo*,UINT,VARDESC**);
     * }
     */
    public interface GetVarDesc {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetVarDesc fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ITypeInfoVtbl.GetVarDesc_UP$MH, fi, ITypeInfoVtbl.GetVarDesc$FUNC, scope);
        }
        static GetVarDesc ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)ITypeInfoVtbl.GetVarDesc_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetVarDesc$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetVarDesc"));
    public static VarHandle GetVarDesc$VH() {
        return ITypeInfoVtbl.GetVarDesc$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetVarDesc)(ITypeInfo*,UINT,VARDESC**);
     * }
     */
    public static MemorySegment GetVarDesc$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ITypeInfoVtbl.GetVarDesc$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetVarDesc)(ITypeInfo*,UINT,VARDESC**);
     * }
     */
    public static void GetVarDesc$set(MemorySegment seg, MemorySegment x) {
        ITypeInfoVtbl.GetVarDesc$VH.set(seg, x);
    }
    public static MemorySegment GetVarDesc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ITypeInfoVtbl.GetVarDesc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetVarDesc$set(MemorySegment seg, long index, MemorySegment x) {
        ITypeInfoVtbl.GetVarDesc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetVarDesc GetVarDesc(MemorySegment segment, SegmentScope scope) {
        return GetVarDesc.ofAddress(GetVarDesc$get(segment), scope);
    }
    static final FunctionDescriptor GetNames$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetNames_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetNames_UP$MH = RuntimeHelper.upcallHandle(GetNames.class, "apply", ITypeInfoVtbl.GetNames_UP$FUNC);
    static final FunctionDescriptor GetNames_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetNames_DOWN$MH = RuntimeHelper.downcallHandle(
        ITypeInfoVtbl.GetNames_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetNames)(ITypeInfo*,MEMBERID,BSTR*,UINT,UINT*);
     * }
     */
    public interface GetNames {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, int _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(GetNames fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ITypeInfoVtbl.GetNames_UP$MH, fi, ITypeInfoVtbl.GetNames$FUNC, scope);
        }
        static GetNames ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, int __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (int)ITypeInfoVtbl.GetNames_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetNames$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetNames"));
    public static VarHandle GetNames$VH() {
        return ITypeInfoVtbl.GetNames$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetNames)(ITypeInfo*,MEMBERID,BSTR*,UINT,UINT*);
     * }
     */
    public static MemorySegment GetNames$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ITypeInfoVtbl.GetNames$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetNames)(ITypeInfo*,MEMBERID,BSTR*,UINT,UINT*);
     * }
     */
    public static void GetNames$set(MemorySegment seg, MemorySegment x) {
        ITypeInfoVtbl.GetNames$VH.set(seg, x);
    }
    public static MemorySegment GetNames$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ITypeInfoVtbl.GetNames$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetNames$set(MemorySegment seg, long index, MemorySegment x) {
        ITypeInfoVtbl.GetNames$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetNames GetNames(MemorySegment segment, SegmentScope scope) {
        return GetNames.ofAddress(GetNames$get(segment), scope);
    }
    static final FunctionDescriptor GetRefTypeOfImplType$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetRefTypeOfImplType_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetRefTypeOfImplType_UP$MH = RuntimeHelper.upcallHandle(GetRefTypeOfImplType.class, "apply", ITypeInfoVtbl.GetRefTypeOfImplType_UP$FUNC);
    static final FunctionDescriptor GetRefTypeOfImplType_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetRefTypeOfImplType_DOWN$MH = RuntimeHelper.downcallHandle(
        ITypeInfoVtbl.GetRefTypeOfImplType_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetRefTypeOfImplType)(ITypeInfo*,UINT,HREFTYPE*);
     * }
     */
    public interface GetRefTypeOfImplType {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetRefTypeOfImplType fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ITypeInfoVtbl.GetRefTypeOfImplType_UP$MH, fi, ITypeInfoVtbl.GetRefTypeOfImplType$FUNC, scope);
        }
        static GetRefTypeOfImplType ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)ITypeInfoVtbl.GetRefTypeOfImplType_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetRefTypeOfImplType$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetRefTypeOfImplType"));
    public static VarHandle GetRefTypeOfImplType$VH() {
        return ITypeInfoVtbl.GetRefTypeOfImplType$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetRefTypeOfImplType)(ITypeInfo*,UINT,HREFTYPE*);
     * }
     */
    public static MemorySegment GetRefTypeOfImplType$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ITypeInfoVtbl.GetRefTypeOfImplType$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetRefTypeOfImplType)(ITypeInfo*,UINT,HREFTYPE*);
     * }
     */
    public static void GetRefTypeOfImplType$set(MemorySegment seg, MemorySegment x) {
        ITypeInfoVtbl.GetRefTypeOfImplType$VH.set(seg, x);
    }
    public static MemorySegment GetRefTypeOfImplType$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ITypeInfoVtbl.GetRefTypeOfImplType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetRefTypeOfImplType$set(MemorySegment seg, long index, MemorySegment x) {
        ITypeInfoVtbl.GetRefTypeOfImplType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetRefTypeOfImplType GetRefTypeOfImplType(MemorySegment segment, SegmentScope scope) {
        return GetRefTypeOfImplType.ofAddress(GetRefTypeOfImplType$get(segment), scope);
    }
    static final FunctionDescriptor GetImplTypeFlags$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetImplTypeFlags_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetImplTypeFlags_UP$MH = RuntimeHelper.upcallHandle(GetImplTypeFlags.class, "apply", ITypeInfoVtbl.GetImplTypeFlags_UP$FUNC);
    static final FunctionDescriptor GetImplTypeFlags_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetImplTypeFlags_DOWN$MH = RuntimeHelper.downcallHandle(
        ITypeInfoVtbl.GetImplTypeFlags_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetImplTypeFlags)(ITypeInfo*,UINT,INT*);
     * }
     */
    public interface GetImplTypeFlags {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetImplTypeFlags fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ITypeInfoVtbl.GetImplTypeFlags_UP$MH, fi, ITypeInfoVtbl.GetImplTypeFlags$FUNC, scope);
        }
        static GetImplTypeFlags ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)ITypeInfoVtbl.GetImplTypeFlags_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetImplTypeFlags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetImplTypeFlags"));
    public static VarHandle GetImplTypeFlags$VH() {
        return ITypeInfoVtbl.GetImplTypeFlags$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetImplTypeFlags)(ITypeInfo*,UINT,INT*);
     * }
     */
    public static MemorySegment GetImplTypeFlags$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ITypeInfoVtbl.GetImplTypeFlags$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetImplTypeFlags)(ITypeInfo*,UINT,INT*);
     * }
     */
    public static void GetImplTypeFlags$set(MemorySegment seg, MemorySegment x) {
        ITypeInfoVtbl.GetImplTypeFlags$VH.set(seg, x);
    }
    public static MemorySegment GetImplTypeFlags$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ITypeInfoVtbl.GetImplTypeFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetImplTypeFlags$set(MemorySegment seg, long index, MemorySegment x) {
        ITypeInfoVtbl.GetImplTypeFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetImplTypeFlags GetImplTypeFlags(MemorySegment segment, SegmentScope scope) {
        return GetImplTypeFlags.ofAddress(GetImplTypeFlags$get(segment), scope);
    }
    static final FunctionDescriptor GetIDsOfNames$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetIDsOfNames_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetIDsOfNames_UP$MH = RuntimeHelper.upcallHandle(GetIDsOfNames.class, "apply", ITypeInfoVtbl.GetIDsOfNames_UP$FUNC);
    static final FunctionDescriptor GetIDsOfNames_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetIDsOfNames_DOWN$MH = RuntimeHelper.downcallHandle(
        ITypeInfoVtbl.GetIDsOfNames_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetIDsOfNames)(ITypeInfo*,LPOLESTR*,UINT,MEMBERID*);
     * }
     */
    public interface GetIDsOfNames {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(GetIDsOfNames fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ITypeInfoVtbl.GetIDsOfNames_UP$MH, fi, ITypeInfoVtbl.GetIDsOfNames$FUNC, scope);
        }
        static GetIDsOfNames ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)ITypeInfoVtbl.GetIDsOfNames_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetIDsOfNames$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetIDsOfNames"));
    public static VarHandle GetIDsOfNames$VH() {
        return ITypeInfoVtbl.GetIDsOfNames$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetIDsOfNames)(ITypeInfo*,LPOLESTR*,UINT,MEMBERID*);
     * }
     */
    public static MemorySegment GetIDsOfNames$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ITypeInfoVtbl.GetIDsOfNames$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetIDsOfNames)(ITypeInfo*,LPOLESTR*,UINT,MEMBERID*);
     * }
     */
    public static void GetIDsOfNames$set(MemorySegment seg, MemorySegment x) {
        ITypeInfoVtbl.GetIDsOfNames$VH.set(seg, x);
    }
    public static MemorySegment GetIDsOfNames$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ITypeInfoVtbl.GetIDsOfNames$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetIDsOfNames$set(MemorySegment seg, long index, MemorySegment x) {
        ITypeInfoVtbl.GetIDsOfNames$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetIDsOfNames GetIDsOfNames(MemorySegment segment, SegmentScope scope) {
        return GetIDsOfNames.ofAddress(GetIDsOfNames$get(segment), scope);
    }
    static final FunctionDescriptor Invoke$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_SHORT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Invoke_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_SHORT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Invoke_UP$MH = RuntimeHelper.upcallHandle(Invoke.class, "apply", ITypeInfoVtbl.Invoke_UP$FUNC);
    static final FunctionDescriptor Invoke_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_SHORT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Invoke_DOWN$MH = RuntimeHelper.downcallHandle(
        ITypeInfoVtbl.Invoke_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*Invoke)(ITypeInfo*,PVOID,MEMBERID,WORD,DISPPARAMS*,VARIANT*,EXCEPINFO*,UINT*);
     * }
     */
    public interface Invoke {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, short _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5, java.lang.foreign.MemorySegment _x6, java.lang.foreign.MemorySegment _x7);
        static MemorySegment allocate(Invoke fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ITypeInfoVtbl.Invoke_UP$MH, fi, ITypeInfoVtbl.Invoke$FUNC, scope);
        }
        static Invoke ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, short __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5, java.lang.foreign.MemorySegment __x6, java.lang.foreign.MemorySegment __x7) -> {
                try {
                    return (int)ITypeInfoVtbl.Invoke_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6, __x7);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Invoke$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Invoke"));
    public static VarHandle Invoke$VH() {
        return ITypeInfoVtbl.Invoke$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Invoke)(ITypeInfo*,PVOID,MEMBERID,WORD,DISPPARAMS*,VARIANT*,EXCEPINFO*,UINT*);
     * }
     */
    public static MemorySegment Invoke$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ITypeInfoVtbl.Invoke$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Invoke)(ITypeInfo*,PVOID,MEMBERID,WORD,DISPPARAMS*,VARIANT*,EXCEPINFO*,UINT*);
     * }
     */
    public static void Invoke$set(MemorySegment seg, MemorySegment x) {
        ITypeInfoVtbl.Invoke$VH.set(seg, x);
    }
    public static MemorySegment Invoke$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ITypeInfoVtbl.Invoke$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Invoke$set(MemorySegment seg, long index, MemorySegment x) {
        ITypeInfoVtbl.Invoke$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Invoke Invoke(MemorySegment segment, SegmentScope scope) {
        return Invoke.ofAddress(Invoke$get(segment), scope);
    }
    static final FunctionDescriptor GetDocumentation$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetDocumentation_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetDocumentation_UP$MH = RuntimeHelper.upcallHandle(GetDocumentation.class, "apply", ITypeInfoVtbl.GetDocumentation_UP$FUNC);
    static final FunctionDescriptor GetDocumentation_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetDocumentation_DOWN$MH = RuntimeHelper.downcallHandle(
        ITypeInfoVtbl.GetDocumentation_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetDocumentation)(ITypeInfo*,MEMBERID,BSTR*,BSTR*,DWORD*,BSTR*);
     * }
     */
    public interface GetDocumentation {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5);
        static MemorySegment allocate(GetDocumentation fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ITypeInfoVtbl.GetDocumentation_UP$MH, fi, ITypeInfoVtbl.GetDocumentation$FUNC, scope);
        }
        static GetDocumentation ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5) -> {
                try {
                    return (int)ITypeInfoVtbl.GetDocumentation_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetDocumentation$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetDocumentation"));
    public static VarHandle GetDocumentation$VH() {
        return ITypeInfoVtbl.GetDocumentation$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetDocumentation)(ITypeInfo*,MEMBERID,BSTR*,BSTR*,DWORD*,BSTR*);
     * }
     */
    public static MemorySegment GetDocumentation$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ITypeInfoVtbl.GetDocumentation$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetDocumentation)(ITypeInfo*,MEMBERID,BSTR*,BSTR*,DWORD*,BSTR*);
     * }
     */
    public static void GetDocumentation$set(MemorySegment seg, MemorySegment x) {
        ITypeInfoVtbl.GetDocumentation$VH.set(seg, x);
    }
    public static MemorySegment GetDocumentation$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ITypeInfoVtbl.GetDocumentation$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDocumentation$set(MemorySegment seg, long index, MemorySegment x) {
        ITypeInfoVtbl.GetDocumentation$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDocumentation GetDocumentation(MemorySegment segment, SegmentScope scope) {
        return GetDocumentation.ofAddress(GetDocumentation$get(segment), scope);
    }
    static final FunctionDescriptor GetDllEntry$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetDllEntry_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetDllEntry_UP$MH = RuntimeHelper.upcallHandle(GetDllEntry.class, "apply", ITypeInfoVtbl.GetDllEntry_UP$FUNC);
    static final FunctionDescriptor GetDllEntry_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetDllEntry_DOWN$MH = RuntimeHelper.downcallHandle(
        ITypeInfoVtbl.GetDllEntry_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetDllEntry)(ITypeInfo*,MEMBERID,INVOKEKIND,BSTR*,BSTR*,WORD*);
     * }
     */
    public interface GetDllEntry {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5);
        static MemorySegment allocate(GetDllEntry fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ITypeInfoVtbl.GetDllEntry_UP$MH, fi, ITypeInfoVtbl.GetDllEntry$FUNC, scope);
        }
        static GetDllEntry ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5) -> {
                try {
                    return (int)ITypeInfoVtbl.GetDllEntry_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetDllEntry$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetDllEntry"));
    public static VarHandle GetDllEntry$VH() {
        return ITypeInfoVtbl.GetDllEntry$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetDllEntry)(ITypeInfo*,MEMBERID,INVOKEKIND,BSTR*,BSTR*,WORD*);
     * }
     */
    public static MemorySegment GetDllEntry$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ITypeInfoVtbl.GetDllEntry$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetDllEntry)(ITypeInfo*,MEMBERID,INVOKEKIND,BSTR*,BSTR*,WORD*);
     * }
     */
    public static void GetDllEntry$set(MemorySegment seg, MemorySegment x) {
        ITypeInfoVtbl.GetDllEntry$VH.set(seg, x);
    }
    public static MemorySegment GetDllEntry$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ITypeInfoVtbl.GetDllEntry$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDllEntry$set(MemorySegment seg, long index, MemorySegment x) {
        ITypeInfoVtbl.GetDllEntry$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDllEntry GetDllEntry(MemorySegment segment, SegmentScope scope) {
        return GetDllEntry.ofAddress(GetDllEntry$get(segment), scope);
    }
    static final FunctionDescriptor GetRefTypeInfo$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetRefTypeInfo_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetRefTypeInfo_UP$MH = RuntimeHelper.upcallHandle(GetRefTypeInfo.class, "apply", ITypeInfoVtbl.GetRefTypeInfo_UP$FUNC);
    static final FunctionDescriptor GetRefTypeInfo_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetRefTypeInfo_DOWN$MH = RuntimeHelper.downcallHandle(
        ITypeInfoVtbl.GetRefTypeInfo_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetRefTypeInfo)(ITypeInfo*,HREFTYPE,ITypeInfo**);
     * }
     */
    public interface GetRefTypeInfo {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetRefTypeInfo fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ITypeInfoVtbl.GetRefTypeInfo_UP$MH, fi, ITypeInfoVtbl.GetRefTypeInfo$FUNC, scope);
        }
        static GetRefTypeInfo ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)ITypeInfoVtbl.GetRefTypeInfo_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetRefTypeInfo$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetRefTypeInfo"));
    public static VarHandle GetRefTypeInfo$VH() {
        return ITypeInfoVtbl.GetRefTypeInfo$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetRefTypeInfo)(ITypeInfo*,HREFTYPE,ITypeInfo**);
     * }
     */
    public static MemorySegment GetRefTypeInfo$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ITypeInfoVtbl.GetRefTypeInfo$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetRefTypeInfo)(ITypeInfo*,HREFTYPE,ITypeInfo**);
     * }
     */
    public static void GetRefTypeInfo$set(MemorySegment seg, MemorySegment x) {
        ITypeInfoVtbl.GetRefTypeInfo$VH.set(seg, x);
    }
    public static MemorySegment GetRefTypeInfo$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ITypeInfoVtbl.GetRefTypeInfo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetRefTypeInfo$set(MemorySegment seg, long index, MemorySegment x) {
        ITypeInfoVtbl.GetRefTypeInfo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetRefTypeInfo GetRefTypeInfo(MemorySegment segment, SegmentScope scope) {
        return GetRefTypeInfo.ofAddress(GetRefTypeInfo$get(segment), scope);
    }
    static final FunctionDescriptor AddressOfMember$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor AddressOfMember_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddressOfMember_UP$MH = RuntimeHelper.upcallHandle(AddressOfMember.class, "apply", ITypeInfoVtbl.AddressOfMember_UP$FUNC);
    static final FunctionDescriptor AddressOfMember_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddressOfMember_DOWN$MH = RuntimeHelper.downcallHandle(
        ITypeInfoVtbl.AddressOfMember_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*AddressOfMember)(ITypeInfo*,MEMBERID,INVOKEKIND,PVOID*);
     * }
     */
    public interface AddressOfMember {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(AddressOfMember fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ITypeInfoVtbl.AddressOfMember_UP$MH, fi, ITypeInfoVtbl.AddressOfMember$FUNC, scope);
        }
        static AddressOfMember ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)ITypeInfoVtbl.AddressOfMember_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddressOfMember$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddressOfMember"));
    public static VarHandle AddressOfMember$VH() {
        return ITypeInfoVtbl.AddressOfMember$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*AddressOfMember)(ITypeInfo*,MEMBERID,INVOKEKIND,PVOID*);
     * }
     */
    public static MemorySegment AddressOfMember$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ITypeInfoVtbl.AddressOfMember$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*AddressOfMember)(ITypeInfo*,MEMBERID,INVOKEKIND,PVOID*);
     * }
     */
    public static void AddressOfMember$set(MemorySegment seg, MemorySegment x) {
        ITypeInfoVtbl.AddressOfMember$VH.set(seg, x);
    }
    public static MemorySegment AddressOfMember$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ITypeInfoVtbl.AddressOfMember$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddressOfMember$set(MemorySegment seg, long index, MemorySegment x) {
        ITypeInfoVtbl.AddressOfMember$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddressOfMember AddressOfMember(MemorySegment segment, SegmentScope scope) {
        return AddressOfMember.ofAddress(AddressOfMember$get(segment), scope);
    }
    static final FunctionDescriptor CreateInstance$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor CreateInstance_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle CreateInstance_UP$MH = RuntimeHelper.upcallHandle(CreateInstance.class, "apply", ITypeInfoVtbl.CreateInstance_UP$FUNC);
    static final FunctionDescriptor CreateInstance_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle CreateInstance_DOWN$MH = RuntimeHelper.downcallHandle(
        ITypeInfoVtbl.CreateInstance_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*CreateInstance)(ITypeInfo*,IUnknown*,const IID*,PVOID*);
     * }
     */
    public interface CreateInstance {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(CreateInstance fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ITypeInfoVtbl.CreateInstance_UP$MH, fi, ITypeInfoVtbl.CreateInstance$FUNC, scope);
        }
        static CreateInstance ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)ITypeInfoVtbl.CreateInstance_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle CreateInstance$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("CreateInstance"));
    public static VarHandle CreateInstance$VH() {
        return ITypeInfoVtbl.CreateInstance$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*CreateInstance)(ITypeInfo*,IUnknown*,const IID*,PVOID*);
     * }
     */
    public static MemorySegment CreateInstance$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ITypeInfoVtbl.CreateInstance$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*CreateInstance)(ITypeInfo*,IUnknown*,const IID*,PVOID*);
     * }
     */
    public static void CreateInstance$set(MemorySegment seg, MemorySegment x) {
        ITypeInfoVtbl.CreateInstance$VH.set(seg, x);
    }
    public static MemorySegment CreateInstance$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ITypeInfoVtbl.CreateInstance$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CreateInstance$set(MemorySegment seg, long index, MemorySegment x) {
        ITypeInfoVtbl.CreateInstance$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static CreateInstance CreateInstance(MemorySegment segment, SegmentScope scope) {
        return CreateInstance.ofAddress(CreateInstance$get(segment), scope);
    }
    static final FunctionDescriptor GetMops$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetMops_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetMops_UP$MH = RuntimeHelper.upcallHandle(GetMops.class, "apply", ITypeInfoVtbl.GetMops_UP$FUNC);
    static final FunctionDescriptor GetMops_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetMops_DOWN$MH = RuntimeHelper.downcallHandle(
        ITypeInfoVtbl.GetMops_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetMops)(ITypeInfo*,MEMBERID,BSTR*);
     * }
     */
    public interface GetMops {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetMops fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ITypeInfoVtbl.GetMops_UP$MH, fi, ITypeInfoVtbl.GetMops$FUNC, scope);
        }
        static GetMops ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)ITypeInfoVtbl.GetMops_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetMops$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetMops"));
    public static VarHandle GetMops$VH() {
        return ITypeInfoVtbl.GetMops$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetMops)(ITypeInfo*,MEMBERID,BSTR*);
     * }
     */
    public static MemorySegment GetMops$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ITypeInfoVtbl.GetMops$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetMops)(ITypeInfo*,MEMBERID,BSTR*);
     * }
     */
    public static void GetMops$set(MemorySegment seg, MemorySegment x) {
        ITypeInfoVtbl.GetMops$VH.set(seg, x);
    }
    public static MemorySegment GetMops$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ITypeInfoVtbl.GetMops$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetMops$set(MemorySegment seg, long index, MemorySegment x) {
        ITypeInfoVtbl.GetMops$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetMops GetMops(MemorySegment segment, SegmentScope scope) {
        return GetMops.ofAddress(GetMops$get(segment), scope);
    }
    static final FunctionDescriptor GetContainingTypeLib$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetContainingTypeLib_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetContainingTypeLib_UP$MH = RuntimeHelper.upcallHandle(GetContainingTypeLib.class, "apply", ITypeInfoVtbl.GetContainingTypeLib_UP$FUNC);
    static final FunctionDescriptor GetContainingTypeLib_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetContainingTypeLib_DOWN$MH = RuntimeHelper.downcallHandle(
        ITypeInfoVtbl.GetContainingTypeLib_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetContainingTypeLib)(ITypeInfo*,ITypeLib**,UINT*);
     * }
     */
    public interface GetContainingTypeLib {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetContainingTypeLib fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ITypeInfoVtbl.GetContainingTypeLib_UP$MH, fi, ITypeInfoVtbl.GetContainingTypeLib$FUNC, scope);
        }
        static GetContainingTypeLib ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)ITypeInfoVtbl.GetContainingTypeLib_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetContainingTypeLib$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetContainingTypeLib"));
    public static VarHandle GetContainingTypeLib$VH() {
        return ITypeInfoVtbl.GetContainingTypeLib$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetContainingTypeLib)(ITypeInfo*,ITypeLib**,UINT*);
     * }
     */
    public static MemorySegment GetContainingTypeLib$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ITypeInfoVtbl.GetContainingTypeLib$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetContainingTypeLib)(ITypeInfo*,ITypeLib**,UINT*);
     * }
     */
    public static void GetContainingTypeLib$set(MemorySegment seg, MemorySegment x) {
        ITypeInfoVtbl.GetContainingTypeLib$VH.set(seg, x);
    }
    public static MemorySegment GetContainingTypeLib$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ITypeInfoVtbl.GetContainingTypeLib$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetContainingTypeLib$set(MemorySegment seg, long index, MemorySegment x) {
        ITypeInfoVtbl.GetContainingTypeLib$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetContainingTypeLib GetContainingTypeLib(MemorySegment segment, SegmentScope scope) {
        return GetContainingTypeLib.ofAddress(GetContainingTypeLib$get(segment), scope);
    }
    static final FunctionDescriptor ReleaseTypeAttr$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor ReleaseTypeAttr_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ReleaseTypeAttr_UP$MH = RuntimeHelper.upcallHandle(ReleaseTypeAttr.class, "apply", ITypeInfoVtbl.ReleaseTypeAttr_UP$FUNC);
    static final FunctionDescriptor ReleaseTypeAttr_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ReleaseTypeAttr_DOWN$MH = RuntimeHelper.downcallHandle(
        ITypeInfoVtbl.ReleaseTypeAttr_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*ReleaseTypeAttr)(ITypeInfo*,TYPEATTR*);
     * }
     */
    public interface ReleaseTypeAttr {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(ReleaseTypeAttr fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ITypeInfoVtbl.ReleaseTypeAttr_UP$MH, fi, ITypeInfoVtbl.ReleaseTypeAttr$FUNC, scope);
        }
        static ReleaseTypeAttr ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    ITypeInfoVtbl.ReleaseTypeAttr_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ReleaseTypeAttr$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ReleaseTypeAttr"));
    public static VarHandle ReleaseTypeAttr$VH() {
        return ITypeInfoVtbl.ReleaseTypeAttr$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*ReleaseTypeAttr)(ITypeInfo*,TYPEATTR*);
     * }
     */
    public static MemorySegment ReleaseTypeAttr$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ITypeInfoVtbl.ReleaseTypeAttr$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*ReleaseTypeAttr)(ITypeInfo*,TYPEATTR*);
     * }
     */
    public static void ReleaseTypeAttr$set(MemorySegment seg, MemorySegment x) {
        ITypeInfoVtbl.ReleaseTypeAttr$VH.set(seg, x);
    }
    public static MemorySegment ReleaseTypeAttr$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ITypeInfoVtbl.ReleaseTypeAttr$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ReleaseTypeAttr$set(MemorySegment seg, long index, MemorySegment x) {
        ITypeInfoVtbl.ReleaseTypeAttr$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ReleaseTypeAttr ReleaseTypeAttr(MemorySegment segment, SegmentScope scope) {
        return ReleaseTypeAttr.ofAddress(ReleaseTypeAttr$get(segment), scope);
    }
    static final FunctionDescriptor ReleaseFuncDesc$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor ReleaseFuncDesc_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ReleaseFuncDesc_UP$MH = RuntimeHelper.upcallHandle(ReleaseFuncDesc.class, "apply", ITypeInfoVtbl.ReleaseFuncDesc_UP$FUNC);
    static final FunctionDescriptor ReleaseFuncDesc_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ReleaseFuncDesc_DOWN$MH = RuntimeHelper.downcallHandle(
        ITypeInfoVtbl.ReleaseFuncDesc_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*ReleaseFuncDesc)(ITypeInfo*,FUNCDESC*);
     * }
     */
    public interface ReleaseFuncDesc {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(ReleaseFuncDesc fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ITypeInfoVtbl.ReleaseFuncDesc_UP$MH, fi, ITypeInfoVtbl.ReleaseFuncDesc$FUNC, scope);
        }
        static ReleaseFuncDesc ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    ITypeInfoVtbl.ReleaseFuncDesc_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ReleaseFuncDesc$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ReleaseFuncDesc"));
    public static VarHandle ReleaseFuncDesc$VH() {
        return ITypeInfoVtbl.ReleaseFuncDesc$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*ReleaseFuncDesc)(ITypeInfo*,FUNCDESC*);
     * }
     */
    public static MemorySegment ReleaseFuncDesc$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ITypeInfoVtbl.ReleaseFuncDesc$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*ReleaseFuncDesc)(ITypeInfo*,FUNCDESC*);
     * }
     */
    public static void ReleaseFuncDesc$set(MemorySegment seg, MemorySegment x) {
        ITypeInfoVtbl.ReleaseFuncDesc$VH.set(seg, x);
    }
    public static MemorySegment ReleaseFuncDesc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ITypeInfoVtbl.ReleaseFuncDesc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ReleaseFuncDesc$set(MemorySegment seg, long index, MemorySegment x) {
        ITypeInfoVtbl.ReleaseFuncDesc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ReleaseFuncDesc ReleaseFuncDesc(MemorySegment segment, SegmentScope scope) {
        return ReleaseFuncDesc.ofAddress(ReleaseFuncDesc$get(segment), scope);
    }
    static final FunctionDescriptor ReleaseVarDesc$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor ReleaseVarDesc_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ReleaseVarDesc_UP$MH = RuntimeHelper.upcallHandle(ReleaseVarDesc.class, "apply", ITypeInfoVtbl.ReleaseVarDesc_UP$FUNC);
    static final FunctionDescriptor ReleaseVarDesc_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ReleaseVarDesc_DOWN$MH = RuntimeHelper.downcallHandle(
        ITypeInfoVtbl.ReleaseVarDesc_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*ReleaseVarDesc)(ITypeInfo*,VARDESC*);
     * }
     */
    public interface ReleaseVarDesc {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(ReleaseVarDesc fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ITypeInfoVtbl.ReleaseVarDesc_UP$MH, fi, ITypeInfoVtbl.ReleaseVarDesc$FUNC, scope);
        }
        static ReleaseVarDesc ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    ITypeInfoVtbl.ReleaseVarDesc_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ReleaseVarDesc$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ReleaseVarDesc"));
    public static VarHandle ReleaseVarDesc$VH() {
        return ITypeInfoVtbl.ReleaseVarDesc$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*ReleaseVarDesc)(ITypeInfo*,VARDESC*);
     * }
     */
    public static MemorySegment ReleaseVarDesc$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ITypeInfoVtbl.ReleaseVarDesc$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*ReleaseVarDesc)(ITypeInfo*,VARDESC*);
     * }
     */
    public static void ReleaseVarDesc$set(MemorySegment seg, MemorySegment x) {
        ITypeInfoVtbl.ReleaseVarDesc$VH.set(seg, x);
    }
    public static MemorySegment ReleaseVarDesc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ITypeInfoVtbl.ReleaseVarDesc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ReleaseVarDesc$set(MemorySegment seg, long index, MemorySegment x) {
        ITypeInfoVtbl.ReleaseVarDesc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ReleaseVarDesc ReleaseVarDesc(MemorySegment segment, SegmentScope scope) {
        return ReleaseVarDesc.ofAddress(ReleaseVarDesc$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


