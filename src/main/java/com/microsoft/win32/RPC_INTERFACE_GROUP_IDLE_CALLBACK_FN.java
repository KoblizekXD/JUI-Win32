// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * void (*RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN)(RPC_INTERFACE_GROUP IfGroup,void* IdleCallbackContext,unsigned long IsGroupIdle);
 * }
 */
public interface RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN {

    void apply(java.lang.foreign.MemorySegment IfGroup, java.lang.foreign.MemorySegment IdleCallbackContext, int IsGroupIdle);
    static MemorySegment allocate(RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN fi, SegmentScope scope) {
        return RuntimeHelper.upcallStub(constants$657.RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN_UP$MH, fi, constants$657.RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN$FUNC, scope);
    }
    static RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN ofAddress(MemorySegment addr, SegmentScope scope) {
        MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
        return (java.lang.foreign.MemorySegment _IfGroup, java.lang.foreign.MemorySegment _IdleCallbackContext, int _IsGroupIdle) -> {
            try {
                constants$657.RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN_DOWN$MH.invokeExact(symbol, _IfGroup, _IdleCallbackContext, _IsGroupIdle);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


