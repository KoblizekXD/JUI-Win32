// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IHttpNegotiate3Vtbl {
 *     HRESULT (*QueryInterface)(IHttpNegotiate3*,const IID*,void**);
 *     ULONG (*AddRef)(IHttpNegotiate3*);
 *     ULONG (*Release)(IHttpNegotiate3*);
 *     HRESULT (*BeginningTransaction)(IHttpNegotiate3*,LPCWSTR,LPCWSTR,DWORD,LPWSTR*);
 *     HRESULT (*OnResponse)(IHttpNegotiate3*,DWORD,LPCWSTR,LPCWSTR,LPWSTR*);
 *     HRESULT (*GetRootSecurityId)(IHttpNegotiate3*,BYTE*,DWORD*,DWORD_PTR);
 *     HRESULT (*GetSerializedClientCertContext)(IHttpNegotiate3*,BYTE**,DWORD*);
 * };
 * }
 */
public class IHttpNegotiate3Vtbl {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("BeginningTransaction"),
        Constants$root.C_POINTER$LAYOUT.withName("OnResponse"),
        Constants$root.C_POINTER$LAYOUT.withName("GetRootSecurityId"),
        Constants$root.C_POINTER$LAYOUT.withName("GetSerializedClientCertContext")
    ).withName("IHttpNegotiate3Vtbl");
    public static MemoryLayout $LAYOUT() {
        return IHttpNegotiate3Vtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor QueryInterface_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_UP$MH = RuntimeHelper.upcallHandle(QueryInterface.class, "apply", IHttpNegotiate3Vtbl.QueryInterface_UP$FUNC);
    static final FunctionDescriptor QueryInterface_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_DOWN$MH = RuntimeHelper.downcallHandle(
        IHttpNegotiate3Vtbl.QueryInterface_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(IHttpNegotiate3*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IHttpNegotiate3Vtbl.QueryInterface_UP$MH, fi, IHttpNegotiate3Vtbl.QueryInterface$FUNC, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IHttpNegotiate3Vtbl.QueryInterface_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return IHttpNegotiate3Vtbl.QueryInterface$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IHttpNegotiate3*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IHttpNegotiate3Vtbl.QueryInterface$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IHttpNegotiate3*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        IHttpNegotiate3Vtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IHttpNegotiate3Vtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        IHttpNegotiate3Vtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, SegmentScope scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor AddRef_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_UP$MH = RuntimeHelper.upcallHandle(AddRef.class, "apply", IHttpNegotiate3Vtbl.AddRef_UP$FUNC);
    static final FunctionDescriptor AddRef_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_DOWN$MH = RuntimeHelper.downcallHandle(
        IHttpNegotiate3Vtbl.AddRef_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*AddRef)(IHttpNegotiate3*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IHttpNegotiate3Vtbl.AddRef_UP$MH, fi, IHttpNegotiate3Vtbl.AddRef$FUNC, scope);
        }
        static AddRef ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IHttpNegotiate3Vtbl.AddRef_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return IHttpNegotiate3Vtbl.AddRef$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(IHttpNegotiate3*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IHttpNegotiate3Vtbl.AddRef$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(IHttpNegotiate3*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        IHttpNegotiate3Vtbl.AddRef$VH.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IHttpNegotiate3Vtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        IHttpNegotiate3Vtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, SegmentScope scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Release_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_UP$MH = RuntimeHelper.upcallHandle(Release.class, "apply", IHttpNegotiate3Vtbl.Release_UP$FUNC);
    static final FunctionDescriptor Release_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_DOWN$MH = RuntimeHelper.downcallHandle(
        IHttpNegotiate3Vtbl.Release_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*Release)(IHttpNegotiate3*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IHttpNegotiate3Vtbl.Release_UP$MH, fi, IHttpNegotiate3Vtbl.Release$FUNC, scope);
        }
        static Release ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IHttpNegotiate3Vtbl.Release_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return IHttpNegotiate3Vtbl.Release$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(IHttpNegotiate3*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IHttpNegotiate3Vtbl.Release$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(IHttpNegotiate3*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        IHttpNegotiate3Vtbl.Release$VH.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IHttpNegotiate3Vtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        IHttpNegotiate3Vtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, SegmentScope scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    static final FunctionDescriptor BeginningTransaction$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor BeginningTransaction_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle BeginningTransaction_UP$MH = RuntimeHelper.upcallHandle(BeginningTransaction.class, "apply", IHttpNegotiate3Vtbl.BeginningTransaction_UP$FUNC);
    static final FunctionDescriptor BeginningTransaction_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle BeginningTransaction_DOWN$MH = RuntimeHelper.downcallHandle(
        IHttpNegotiate3Vtbl.BeginningTransaction_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*BeginningTransaction)(IHttpNegotiate3*,LPCWSTR,LPCWSTR,DWORD,LPWSTR*);
     * }
     */
    public interface BeginningTransaction {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(BeginningTransaction fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IHttpNegotiate3Vtbl.BeginningTransaction_UP$MH, fi, IHttpNegotiate3Vtbl.BeginningTransaction$FUNC, scope);
        }
        static BeginningTransaction ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (int)IHttpNegotiate3Vtbl.BeginningTransaction_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle BeginningTransaction$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("BeginningTransaction"));
    public static VarHandle BeginningTransaction$VH() {
        return IHttpNegotiate3Vtbl.BeginningTransaction$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*BeginningTransaction)(IHttpNegotiate3*,LPCWSTR,LPCWSTR,DWORD,LPWSTR*);
     * }
     */
    public static MemorySegment BeginningTransaction$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IHttpNegotiate3Vtbl.BeginningTransaction$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*BeginningTransaction)(IHttpNegotiate3*,LPCWSTR,LPCWSTR,DWORD,LPWSTR*);
     * }
     */
    public static void BeginningTransaction$set(MemorySegment seg, MemorySegment x) {
        IHttpNegotiate3Vtbl.BeginningTransaction$VH.set(seg, x);
    }
    public static MemorySegment BeginningTransaction$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IHttpNegotiate3Vtbl.BeginningTransaction$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void BeginningTransaction$set(MemorySegment seg, long index, MemorySegment x) {
        IHttpNegotiate3Vtbl.BeginningTransaction$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static BeginningTransaction BeginningTransaction(MemorySegment segment, SegmentScope scope) {
        return BeginningTransaction.ofAddress(BeginningTransaction$get(segment), scope);
    }
    static final FunctionDescriptor OnResponse$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor OnResponse_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle OnResponse_UP$MH = RuntimeHelper.upcallHandle(OnResponse.class, "apply", IHttpNegotiate3Vtbl.OnResponse_UP$FUNC);
    static final FunctionDescriptor OnResponse_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle OnResponse_DOWN$MH = RuntimeHelper.downcallHandle(
        IHttpNegotiate3Vtbl.OnResponse_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*OnResponse)(IHttpNegotiate3*,DWORD,LPCWSTR,LPCWSTR,LPWSTR*);
     * }
     */
    public interface OnResponse {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(OnResponse fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IHttpNegotiate3Vtbl.OnResponse_UP$MH, fi, IHttpNegotiate3Vtbl.OnResponse$FUNC, scope);
        }
        static OnResponse ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (int)IHttpNegotiate3Vtbl.OnResponse_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle OnResponse$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("OnResponse"));
    public static VarHandle OnResponse$VH() {
        return IHttpNegotiate3Vtbl.OnResponse$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*OnResponse)(IHttpNegotiate3*,DWORD,LPCWSTR,LPCWSTR,LPWSTR*);
     * }
     */
    public static MemorySegment OnResponse$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IHttpNegotiate3Vtbl.OnResponse$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*OnResponse)(IHttpNegotiate3*,DWORD,LPCWSTR,LPCWSTR,LPWSTR*);
     * }
     */
    public static void OnResponse$set(MemorySegment seg, MemorySegment x) {
        IHttpNegotiate3Vtbl.OnResponse$VH.set(seg, x);
    }
    public static MemorySegment OnResponse$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IHttpNegotiate3Vtbl.OnResponse$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void OnResponse$set(MemorySegment seg, long index, MemorySegment x) {
        IHttpNegotiate3Vtbl.OnResponse$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static OnResponse OnResponse(MemorySegment segment, SegmentScope scope) {
        return OnResponse.ofAddress(OnResponse$get(segment), scope);
    }
    static final FunctionDescriptor GetRootSecurityId$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final FunctionDescriptor GetRootSecurityId_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final MethodHandle GetRootSecurityId_UP$MH = RuntimeHelper.upcallHandle(GetRootSecurityId.class, "apply", IHttpNegotiate3Vtbl.GetRootSecurityId_UP$FUNC);
    static final FunctionDescriptor GetRootSecurityId_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final MethodHandle GetRootSecurityId_DOWN$MH = RuntimeHelper.downcallHandle(
        IHttpNegotiate3Vtbl.GetRootSecurityId_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetRootSecurityId)(IHttpNegotiate3*,BYTE*,DWORD*,DWORD_PTR);
     * }
     */
    public interface GetRootSecurityId {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, long _x3);
        static MemorySegment allocate(GetRootSecurityId fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IHttpNegotiate3Vtbl.GetRootSecurityId_UP$MH, fi, IHttpNegotiate3Vtbl.GetRootSecurityId$FUNC, scope);
        }
        static GetRootSecurityId ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, long __x3) -> {
                try {
                    return (int)IHttpNegotiate3Vtbl.GetRootSecurityId_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetRootSecurityId$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetRootSecurityId"));
    public static VarHandle GetRootSecurityId$VH() {
        return IHttpNegotiate3Vtbl.GetRootSecurityId$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetRootSecurityId)(IHttpNegotiate3*,BYTE*,DWORD*,DWORD_PTR);
     * }
     */
    public static MemorySegment GetRootSecurityId$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IHttpNegotiate3Vtbl.GetRootSecurityId$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetRootSecurityId)(IHttpNegotiate3*,BYTE*,DWORD*,DWORD_PTR);
     * }
     */
    public static void GetRootSecurityId$set(MemorySegment seg, MemorySegment x) {
        IHttpNegotiate3Vtbl.GetRootSecurityId$VH.set(seg, x);
    }
    public static MemorySegment GetRootSecurityId$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IHttpNegotiate3Vtbl.GetRootSecurityId$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetRootSecurityId$set(MemorySegment seg, long index, MemorySegment x) {
        IHttpNegotiate3Vtbl.GetRootSecurityId$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetRootSecurityId GetRootSecurityId(MemorySegment segment, SegmentScope scope) {
        return GetRootSecurityId.ofAddress(GetRootSecurityId$get(segment), scope);
    }
    static final FunctionDescriptor GetSerializedClientCertContext$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetSerializedClientCertContext_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetSerializedClientCertContext_UP$MH = RuntimeHelper.upcallHandle(GetSerializedClientCertContext.class, "apply", IHttpNegotiate3Vtbl.GetSerializedClientCertContext_UP$FUNC);
    static final FunctionDescriptor GetSerializedClientCertContext_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetSerializedClientCertContext_DOWN$MH = RuntimeHelper.downcallHandle(
        IHttpNegotiate3Vtbl.GetSerializedClientCertContext_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetSerializedClientCertContext)(IHttpNegotiate3*,BYTE**,DWORD*);
     * }
     */
    public interface GetSerializedClientCertContext {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetSerializedClientCertContext fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IHttpNegotiate3Vtbl.GetSerializedClientCertContext_UP$MH, fi, IHttpNegotiate3Vtbl.GetSerializedClientCertContext$FUNC, scope);
        }
        static GetSerializedClientCertContext ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IHttpNegotiate3Vtbl.GetSerializedClientCertContext_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetSerializedClientCertContext$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetSerializedClientCertContext"));
    public static VarHandle GetSerializedClientCertContext$VH() {
        return IHttpNegotiate3Vtbl.GetSerializedClientCertContext$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetSerializedClientCertContext)(IHttpNegotiate3*,BYTE**,DWORD*);
     * }
     */
    public static MemorySegment GetSerializedClientCertContext$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IHttpNegotiate3Vtbl.GetSerializedClientCertContext$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetSerializedClientCertContext)(IHttpNegotiate3*,BYTE**,DWORD*);
     * }
     */
    public static void GetSerializedClientCertContext$set(MemorySegment seg, MemorySegment x) {
        IHttpNegotiate3Vtbl.GetSerializedClientCertContext$VH.set(seg, x);
    }
    public static MemorySegment GetSerializedClientCertContext$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IHttpNegotiate3Vtbl.GetSerializedClientCertContext$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetSerializedClientCertContext$set(MemorySegment seg, long index, MemorySegment x) {
        IHttpNegotiate3Vtbl.GetSerializedClientCertContext$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetSerializedClientCertContext GetSerializedClientCertContext(MemorySegment segment, SegmentScope scope) {
        return GetSerializedClientCertContext.ofAddress(GetSerializedClientCertContext$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


