// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * int (*EDITWORDBREAKPROC)(char*,int,int,int);
 * }
 */
public interface EDITWORDBREAKPROC {

    int apply(java.lang.foreign.MemorySegment lpch, int ichCurrent, int cch, int code);
    static MemorySegment allocate(EDITWORDBREAKPROC fi, SegmentScope scope) {
        return RuntimeHelper.upcallStub(constants$394.EDITWORDBREAKPROC_UP$MH, fi, constants$394.EDITWORDBREAKPROC$FUNC, scope);
    }
    static EDITWORDBREAKPROC ofAddress(MemorySegment addr, SegmentScope scope) {
        MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
        return (java.lang.foreign.MemorySegment _lpch, int _ichCurrent, int _cch, int _code) -> {
            try {
                return (int)constants$395.EDITWORDBREAKPROC_DOWN$MH.invokeExact(symbol, _lpch, _ichCurrent, _cch, _code);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


