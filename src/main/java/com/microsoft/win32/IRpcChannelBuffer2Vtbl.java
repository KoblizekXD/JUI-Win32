// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IRpcChannelBuffer2Vtbl {
 *     HRESULT (*QueryInterface)(IRpcChannelBuffer2*,const IID*,void**);
 *     ULONG (*AddRef)(IRpcChannelBuffer2*);
 *     ULONG (*Release)(IRpcChannelBuffer2*);
 *     HRESULT (*GetBuffer)(IRpcChannelBuffer2*,RPCOLEMESSAGE*,const IID*);
 *     HRESULT (*SendReceive)(IRpcChannelBuffer2*,RPCOLEMESSAGE*,ULONG*);
 *     HRESULT (*FreeBuffer)(IRpcChannelBuffer2*,RPCOLEMESSAGE*);
 *     HRESULT (*GetDestCtx)(IRpcChannelBuffer2*,DWORD*,void**);
 *     HRESULT (*IsConnected)(IRpcChannelBuffer2*);
 *     HRESULT (*GetProtocolVersion)(IRpcChannelBuffer2*,DWORD*);
 * };
 * }
 */
public class IRpcChannelBuffer2Vtbl {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("GetBuffer"),
        Constants$root.C_POINTER$LAYOUT.withName("SendReceive"),
        Constants$root.C_POINTER$LAYOUT.withName("FreeBuffer"),
        Constants$root.C_POINTER$LAYOUT.withName("GetDestCtx"),
        Constants$root.C_POINTER$LAYOUT.withName("IsConnected"),
        Constants$root.C_POINTER$LAYOUT.withName("GetProtocolVersion")
    ).withName("IRpcChannelBuffer2Vtbl");
    public static MemoryLayout $LAYOUT() {
        return IRpcChannelBuffer2Vtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor QueryInterface_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_UP$MH = RuntimeHelper.upcallHandle(QueryInterface.class, "apply", IRpcChannelBuffer2Vtbl.QueryInterface_UP$FUNC);
    static final FunctionDescriptor QueryInterface_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_DOWN$MH = RuntimeHelper.downcallHandle(
        IRpcChannelBuffer2Vtbl.QueryInterface_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(IRpcChannelBuffer2*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IRpcChannelBuffer2Vtbl.QueryInterface_UP$MH, fi, IRpcChannelBuffer2Vtbl.QueryInterface$FUNC, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IRpcChannelBuffer2Vtbl.QueryInterface_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return IRpcChannelBuffer2Vtbl.QueryInterface$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IRpcChannelBuffer2*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IRpcChannelBuffer2Vtbl.QueryInterface$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IRpcChannelBuffer2*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        IRpcChannelBuffer2Vtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IRpcChannelBuffer2Vtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        IRpcChannelBuffer2Vtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, SegmentScope scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor AddRef_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_UP$MH = RuntimeHelper.upcallHandle(AddRef.class, "apply", IRpcChannelBuffer2Vtbl.AddRef_UP$FUNC);
    static final FunctionDescriptor AddRef_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_DOWN$MH = RuntimeHelper.downcallHandle(
        IRpcChannelBuffer2Vtbl.AddRef_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*AddRef)(IRpcChannelBuffer2*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IRpcChannelBuffer2Vtbl.AddRef_UP$MH, fi, IRpcChannelBuffer2Vtbl.AddRef$FUNC, scope);
        }
        static AddRef ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IRpcChannelBuffer2Vtbl.AddRef_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return IRpcChannelBuffer2Vtbl.AddRef$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(IRpcChannelBuffer2*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IRpcChannelBuffer2Vtbl.AddRef$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(IRpcChannelBuffer2*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        IRpcChannelBuffer2Vtbl.AddRef$VH.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IRpcChannelBuffer2Vtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        IRpcChannelBuffer2Vtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, SegmentScope scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Release_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_UP$MH = RuntimeHelper.upcallHandle(Release.class, "apply", IRpcChannelBuffer2Vtbl.Release_UP$FUNC);
    static final FunctionDescriptor Release_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_DOWN$MH = RuntimeHelper.downcallHandle(
        IRpcChannelBuffer2Vtbl.Release_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*Release)(IRpcChannelBuffer2*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IRpcChannelBuffer2Vtbl.Release_UP$MH, fi, IRpcChannelBuffer2Vtbl.Release$FUNC, scope);
        }
        static Release ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IRpcChannelBuffer2Vtbl.Release_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return IRpcChannelBuffer2Vtbl.Release$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(IRpcChannelBuffer2*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IRpcChannelBuffer2Vtbl.Release$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(IRpcChannelBuffer2*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        IRpcChannelBuffer2Vtbl.Release$VH.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IRpcChannelBuffer2Vtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        IRpcChannelBuffer2Vtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, SegmentScope scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    static final FunctionDescriptor GetBuffer$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetBuffer_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetBuffer_UP$MH = RuntimeHelper.upcallHandle(GetBuffer.class, "apply", IRpcChannelBuffer2Vtbl.GetBuffer_UP$FUNC);
    static final FunctionDescriptor GetBuffer_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetBuffer_DOWN$MH = RuntimeHelper.downcallHandle(
        IRpcChannelBuffer2Vtbl.GetBuffer_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetBuffer)(IRpcChannelBuffer2*,RPCOLEMESSAGE*,const IID*);
     * }
     */
    public interface GetBuffer {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetBuffer fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IRpcChannelBuffer2Vtbl.GetBuffer_UP$MH, fi, IRpcChannelBuffer2Vtbl.GetBuffer$FUNC, scope);
        }
        static GetBuffer ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IRpcChannelBuffer2Vtbl.GetBuffer_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetBuffer$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetBuffer"));
    public static VarHandle GetBuffer$VH() {
        return IRpcChannelBuffer2Vtbl.GetBuffer$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetBuffer)(IRpcChannelBuffer2*,RPCOLEMESSAGE*,const IID*);
     * }
     */
    public static MemorySegment GetBuffer$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IRpcChannelBuffer2Vtbl.GetBuffer$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetBuffer)(IRpcChannelBuffer2*,RPCOLEMESSAGE*,const IID*);
     * }
     */
    public static void GetBuffer$set(MemorySegment seg, MemorySegment x) {
        IRpcChannelBuffer2Vtbl.GetBuffer$VH.set(seg, x);
    }
    public static MemorySegment GetBuffer$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IRpcChannelBuffer2Vtbl.GetBuffer$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetBuffer$set(MemorySegment seg, long index, MemorySegment x) {
        IRpcChannelBuffer2Vtbl.GetBuffer$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetBuffer GetBuffer(MemorySegment segment, SegmentScope scope) {
        return GetBuffer.ofAddress(GetBuffer$get(segment), scope);
    }
    static final FunctionDescriptor SendReceive$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor SendReceive_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SendReceive_UP$MH = RuntimeHelper.upcallHandle(SendReceive.class, "apply", IRpcChannelBuffer2Vtbl.SendReceive_UP$FUNC);
    static final FunctionDescriptor SendReceive_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SendReceive_DOWN$MH = RuntimeHelper.downcallHandle(
        IRpcChannelBuffer2Vtbl.SendReceive_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SendReceive)(IRpcChannelBuffer2*,RPCOLEMESSAGE*,ULONG*);
     * }
     */
    public interface SendReceive {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(SendReceive fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IRpcChannelBuffer2Vtbl.SendReceive_UP$MH, fi, IRpcChannelBuffer2Vtbl.SendReceive$FUNC, scope);
        }
        static SendReceive ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IRpcChannelBuffer2Vtbl.SendReceive_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SendReceive$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SendReceive"));
    public static VarHandle SendReceive$VH() {
        return IRpcChannelBuffer2Vtbl.SendReceive$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SendReceive)(IRpcChannelBuffer2*,RPCOLEMESSAGE*,ULONG*);
     * }
     */
    public static MemorySegment SendReceive$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IRpcChannelBuffer2Vtbl.SendReceive$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SendReceive)(IRpcChannelBuffer2*,RPCOLEMESSAGE*,ULONG*);
     * }
     */
    public static void SendReceive$set(MemorySegment seg, MemorySegment x) {
        IRpcChannelBuffer2Vtbl.SendReceive$VH.set(seg, x);
    }
    public static MemorySegment SendReceive$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IRpcChannelBuffer2Vtbl.SendReceive$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SendReceive$set(MemorySegment seg, long index, MemorySegment x) {
        IRpcChannelBuffer2Vtbl.SendReceive$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SendReceive SendReceive(MemorySegment segment, SegmentScope scope) {
        return SendReceive.ofAddress(SendReceive$get(segment), scope);
    }
    static final FunctionDescriptor FreeBuffer$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor FreeBuffer_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle FreeBuffer_UP$MH = RuntimeHelper.upcallHandle(FreeBuffer.class, "apply", IRpcChannelBuffer2Vtbl.FreeBuffer_UP$FUNC);
    static final FunctionDescriptor FreeBuffer_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle FreeBuffer_DOWN$MH = RuntimeHelper.downcallHandle(
        IRpcChannelBuffer2Vtbl.FreeBuffer_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*FreeBuffer)(IRpcChannelBuffer2*,RPCOLEMESSAGE*);
     * }
     */
    public interface FreeBuffer {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(FreeBuffer fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IRpcChannelBuffer2Vtbl.FreeBuffer_UP$MH, fi, IRpcChannelBuffer2Vtbl.FreeBuffer$FUNC, scope);
        }
        static FreeBuffer ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IRpcChannelBuffer2Vtbl.FreeBuffer_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle FreeBuffer$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("FreeBuffer"));
    public static VarHandle FreeBuffer$VH() {
        return IRpcChannelBuffer2Vtbl.FreeBuffer$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*FreeBuffer)(IRpcChannelBuffer2*,RPCOLEMESSAGE*);
     * }
     */
    public static MemorySegment FreeBuffer$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IRpcChannelBuffer2Vtbl.FreeBuffer$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*FreeBuffer)(IRpcChannelBuffer2*,RPCOLEMESSAGE*);
     * }
     */
    public static void FreeBuffer$set(MemorySegment seg, MemorySegment x) {
        IRpcChannelBuffer2Vtbl.FreeBuffer$VH.set(seg, x);
    }
    public static MemorySegment FreeBuffer$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IRpcChannelBuffer2Vtbl.FreeBuffer$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void FreeBuffer$set(MemorySegment seg, long index, MemorySegment x) {
        IRpcChannelBuffer2Vtbl.FreeBuffer$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static FreeBuffer FreeBuffer(MemorySegment segment, SegmentScope scope) {
        return FreeBuffer.ofAddress(FreeBuffer$get(segment), scope);
    }
    static final FunctionDescriptor GetDestCtx$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetDestCtx_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetDestCtx_UP$MH = RuntimeHelper.upcallHandle(GetDestCtx.class, "apply", IRpcChannelBuffer2Vtbl.GetDestCtx_UP$FUNC);
    static final FunctionDescriptor GetDestCtx_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetDestCtx_DOWN$MH = RuntimeHelper.downcallHandle(
        IRpcChannelBuffer2Vtbl.GetDestCtx_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetDestCtx)(IRpcChannelBuffer2*,DWORD*,void**);
     * }
     */
    public interface GetDestCtx {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetDestCtx fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IRpcChannelBuffer2Vtbl.GetDestCtx_UP$MH, fi, IRpcChannelBuffer2Vtbl.GetDestCtx$FUNC, scope);
        }
        static GetDestCtx ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IRpcChannelBuffer2Vtbl.GetDestCtx_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetDestCtx$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetDestCtx"));
    public static VarHandle GetDestCtx$VH() {
        return IRpcChannelBuffer2Vtbl.GetDestCtx$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetDestCtx)(IRpcChannelBuffer2*,DWORD*,void**);
     * }
     */
    public static MemorySegment GetDestCtx$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IRpcChannelBuffer2Vtbl.GetDestCtx$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetDestCtx)(IRpcChannelBuffer2*,DWORD*,void**);
     * }
     */
    public static void GetDestCtx$set(MemorySegment seg, MemorySegment x) {
        IRpcChannelBuffer2Vtbl.GetDestCtx$VH.set(seg, x);
    }
    public static MemorySegment GetDestCtx$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IRpcChannelBuffer2Vtbl.GetDestCtx$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDestCtx$set(MemorySegment seg, long index, MemorySegment x) {
        IRpcChannelBuffer2Vtbl.GetDestCtx$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDestCtx GetDestCtx(MemorySegment segment, SegmentScope scope) {
        return GetDestCtx.ofAddress(GetDestCtx$get(segment), scope);
    }
    static final FunctionDescriptor IsConnected$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor IsConnected_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle IsConnected_UP$MH = RuntimeHelper.upcallHandle(IsConnected.class, "apply", IRpcChannelBuffer2Vtbl.IsConnected_UP$FUNC);
    static final FunctionDescriptor IsConnected_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle IsConnected_DOWN$MH = RuntimeHelper.downcallHandle(
        IRpcChannelBuffer2Vtbl.IsConnected_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*IsConnected)(IRpcChannelBuffer2*);
     * }
     */
    public interface IsConnected {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(IsConnected fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IRpcChannelBuffer2Vtbl.IsConnected_UP$MH, fi, IRpcChannelBuffer2Vtbl.IsConnected$FUNC, scope);
        }
        static IsConnected ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IRpcChannelBuffer2Vtbl.IsConnected_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle IsConnected$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("IsConnected"));
    public static VarHandle IsConnected$VH() {
        return IRpcChannelBuffer2Vtbl.IsConnected$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*IsConnected)(IRpcChannelBuffer2*);
     * }
     */
    public static MemorySegment IsConnected$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IRpcChannelBuffer2Vtbl.IsConnected$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*IsConnected)(IRpcChannelBuffer2*);
     * }
     */
    public static void IsConnected$set(MemorySegment seg, MemorySegment x) {
        IRpcChannelBuffer2Vtbl.IsConnected$VH.set(seg, x);
    }
    public static MemorySegment IsConnected$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IRpcChannelBuffer2Vtbl.IsConnected$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void IsConnected$set(MemorySegment seg, long index, MemorySegment x) {
        IRpcChannelBuffer2Vtbl.IsConnected$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static IsConnected IsConnected(MemorySegment segment, SegmentScope scope) {
        return IsConnected.ofAddress(IsConnected$get(segment), scope);
    }
    static final FunctionDescriptor GetProtocolVersion$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetProtocolVersion_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetProtocolVersion_UP$MH = RuntimeHelper.upcallHandle(GetProtocolVersion.class, "apply", IRpcChannelBuffer2Vtbl.GetProtocolVersion_UP$FUNC);
    static final FunctionDescriptor GetProtocolVersion_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetProtocolVersion_DOWN$MH = RuntimeHelper.downcallHandle(
        IRpcChannelBuffer2Vtbl.GetProtocolVersion_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetProtocolVersion)(IRpcChannelBuffer2*,DWORD*);
     * }
     */
    public interface GetProtocolVersion {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetProtocolVersion fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IRpcChannelBuffer2Vtbl.GetProtocolVersion_UP$MH, fi, IRpcChannelBuffer2Vtbl.GetProtocolVersion$FUNC, scope);
        }
        static GetProtocolVersion ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IRpcChannelBuffer2Vtbl.GetProtocolVersion_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetProtocolVersion$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetProtocolVersion"));
    public static VarHandle GetProtocolVersion$VH() {
        return IRpcChannelBuffer2Vtbl.GetProtocolVersion$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetProtocolVersion)(IRpcChannelBuffer2*,DWORD*);
     * }
     */
    public static MemorySegment GetProtocolVersion$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IRpcChannelBuffer2Vtbl.GetProtocolVersion$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetProtocolVersion)(IRpcChannelBuffer2*,DWORD*);
     * }
     */
    public static void GetProtocolVersion$set(MemorySegment seg, MemorySegment x) {
        IRpcChannelBuffer2Vtbl.GetProtocolVersion$VH.set(seg, x);
    }
    public static MemorySegment GetProtocolVersion$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IRpcChannelBuffer2Vtbl.GetProtocolVersion$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetProtocolVersion$set(MemorySegment seg, long index, MemorySegment x) {
        IRpcChannelBuffer2Vtbl.GetProtocolVersion$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetProtocolVersion GetProtocolVersion(MemorySegment segment, SegmentScope scope) {
        return GetProtocolVersion.ofAddress(GetProtocolVersion$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


