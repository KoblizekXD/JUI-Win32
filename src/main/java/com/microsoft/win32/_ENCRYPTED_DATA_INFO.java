// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _ENCRYPTED_DATA_INFO {
 *     DWORDLONG StartingFileOffset;
 *     DWORD OutputBufferOffset;
 *     DWORD BytesWithinFileSize;
 *     DWORD BytesWithinValidDataLength;
 *     WORD CompressionFormat;
 *     BYTE DataUnitShift;
 *     BYTE ChunkShift;
 *     BYTE ClusterShift;
 *     BYTE EncryptionFormat;
 *     WORD NumberOfDataBlocks;
 *     DWORD DataBlockSize[1];
 * };
 * }
 */
public class _ENCRYPTED_DATA_INFO {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG_LONG$LAYOUT.withName("StartingFileOffset"),
        Constants$root.C_LONG$LAYOUT.withName("OutputBufferOffset"),
        Constants$root.C_LONG$LAYOUT.withName("BytesWithinFileSize"),
        Constants$root.C_LONG$LAYOUT.withName("BytesWithinValidDataLength"),
        Constants$root.C_SHORT$LAYOUT.withName("CompressionFormat"),
        Constants$root.C_CHAR$LAYOUT.withName("DataUnitShift"),
        Constants$root.C_CHAR$LAYOUT.withName("ChunkShift"),
        Constants$root.C_CHAR$LAYOUT.withName("ClusterShift"),
        Constants$root.C_CHAR$LAYOUT.withName("EncryptionFormat"),
        Constants$root.C_SHORT$LAYOUT.withName("NumberOfDataBlocks"),
        MemoryLayout.sequenceLayout(1, Constants$root.C_LONG$LAYOUT).withName("DataBlockSize")
    ).withName("_ENCRYPTED_DATA_INFO");
    public static MemoryLayout $LAYOUT() {
        return _ENCRYPTED_DATA_INFO.$struct$LAYOUT;
    }
    static final VarHandle StartingFileOffset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("StartingFileOffset"));
    public static VarHandle StartingFileOffset$VH() {
        return _ENCRYPTED_DATA_INFO.StartingFileOffset$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORDLONG StartingFileOffset;
     * }
     */
    public static long StartingFileOffset$get(MemorySegment seg) {
        return (long)_ENCRYPTED_DATA_INFO.StartingFileOffset$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORDLONG StartingFileOffset;
     * }
     */
    public static void StartingFileOffset$set(MemorySegment seg, long x) {
        _ENCRYPTED_DATA_INFO.StartingFileOffset$VH.set(seg, x);
    }
    public static long StartingFileOffset$get(MemorySegment seg, long index) {
        return (long)_ENCRYPTED_DATA_INFO.StartingFileOffset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void StartingFileOffset$set(MemorySegment seg, long index, long x) {
        _ENCRYPTED_DATA_INFO.StartingFileOffset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle OutputBufferOffset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("OutputBufferOffset"));
    public static VarHandle OutputBufferOffset$VH() {
        return _ENCRYPTED_DATA_INFO.OutputBufferOffset$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD OutputBufferOffset;
     * }
     */
    public static int OutputBufferOffset$get(MemorySegment seg) {
        return (int)_ENCRYPTED_DATA_INFO.OutputBufferOffset$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD OutputBufferOffset;
     * }
     */
    public static void OutputBufferOffset$set(MemorySegment seg, int x) {
        _ENCRYPTED_DATA_INFO.OutputBufferOffset$VH.set(seg, x);
    }
    public static int OutputBufferOffset$get(MemorySegment seg, long index) {
        return (int)_ENCRYPTED_DATA_INFO.OutputBufferOffset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void OutputBufferOffset$set(MemorySegment seg, long index, int x) {
        _ENCRYPTED_DATA_INFO.OutputBufferOffset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle BytesWithinFileSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("BytesWithinFileSize"));
    public static VarHandle BytesWithinFileSize$VH() {
        return _ENCRYPTED_DATA_INFO.BytesWithinFileSize$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD BytesWithinFileSize;
     * }
     */
    public static int BytesWithinFileSize$get(MemorySegment seg) {
        return (int)_ENCRYPTED_DATA_INFO.BytesWithinFileSize$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD BytesWithinFileSize;
     * }
     */
    public static void BytesWithinFileSize$set(MemorySegment seg, int x) {
        _ENCRYPTED_DATA_INFO.BytesWithinFileSize$VH.set(seg, x);
    }
    public static int BytesWithinFileSize$get(MemorySegment seg, long index) {
        return (int)_ENCRYPTED_DATA_INFO.BytesWithinFileSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void BytesWithinFileSize$set(MemorySegment seg, long index, int x) {
        _ENCRYPTED_DATA_INFO.BytesWithinFileSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle BytesWithinValidDataLength$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("BytesWithinValidDataLength"));
    public static VarHandle BytesWithinValidDataLength$VH() {
        return _ENCRYPTED_DATA_INFO.BytesWithinValidDataLength$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD BytesWithinValidDataLength;
     * }
     */
    public static int BytesWithinValidDataLength$get(MemorySegment seg) {
        return (int)_ENCRYPTED_DATA_INFO.BytesWithinValidDataLength$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD BytesWithinValidDataLength;
     * }
     */
    public static void BytesWithinValidDataLength$set(MemorySegment seg, int x) {
        _ENCRYPTED_DATA_INFO.BytesWithinValidDataLength$VH.set(seg, x);
    }
    public static int BytesWithinValidDataLength$get(MemorySegment seg, long index) {
        return (int)_ENCRYPTED_DATA_INFO.BytesWithinValidDataLength$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void BytesWithinValidDataLength$set(MemorySegment seg, long index, int x) {
        _ENCRYPTED_DATA_INFO.BytesWithinValidDataLength$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle CompressionFormat$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("CompressionFormat"));
    public static VarHandle CompressionFormat$VH() {
        return _ENCRYPTED_DATA_INFO.CompressionFormat$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD CompressionFormat;
     * }
     */
    public static short CompressionFormat$get(MemorySegment seg) {
        return (short)_ENCRYPTED_DATA_INFO.CompressionFormat$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD CompressionFormat;
     * }
     */
    public static void CompressionFormat$set(MemorySegment seg, short x) {
        _ENCRYPTED_DATA_INFO.CompressionFormat$VH.set(seg, x);
    }
    public static short CompressionFormat$get(MemorySegment seg, long index) {
        return (short)_ENCRYPTED_DATA_INFO.CompressionFormat$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CompressionFormat$set(MemorySegment seg, long index, short x) {
        _ENCRYPTED_DATA_INFO.CompressionFormat$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle DataUnitShift$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("DataUnitShift"));
    public static VarHandle DataUnitShift$VH() {
        return _ENCRYPTED_DATA_INFO.DataUnitShift$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE DataUnitShift;
     * }
     */
    public static byte DataUnitShift$get(MemorySegment seg) {
        return (byte)_ENCRYPTED_DATA_INFO.DataUnitShift$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE DataUnitShift;
     * }
     */
    public static void DataUnitShift$set(MemorySegment seg, byte x) {
        _ENCRYPTED_DATA_INFO.DataUnitShift$VH.set(seg, x);
    }
    public static byte DataUnitShift$get(MemorySegment seg, long index) {
        return (byte)_ENCRYPTED_DATA_INFO.DataUnitShift$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DataUnitShift$set(MemorySegment seg, long index, byte x) {
        _ENCRYPTED_DATA_INFO.DataUnitShift$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ChunkShift$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ChunkShift"));
    public static VarHandle ChunkShift$VH() {
        return _ENCRYPTED_DATA_INFO.ChunkShift$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE ChunkShift;
     * }
     */
    public static byte ChunkShift$get(MemorySegment seg) {
        return (byte)_ENCRYPTED_DATA_INFO.ChunkShift$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE ChunkShift;
     * }
     */
    public static void ChunkShift$set(MemorySegment seg, byte x) {
        _ENCRYPTED_DATA_INFO.ChunkShift$VH.set(seg, x);
    }
    public static byte ChunkShift$get(MemorySegment seg, long index) {
        return (byte)_ENCRYPTED_DATA_INFO.ChunkShift$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ChunkShift$set(MemorySegment seg, long index, byte x) {
        _ENCRYPTED_DATA_INFO.ChunkShift$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ClusterShift$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ClusterShift"));
    public static VarHandle ClusterShift$VH() {
        return _ENCRYPTED_DATA_INFO.ClusterShift$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE ClusterShift;
     * }
     */
    public static byte ClusterShift$get(MemorySegment seg) {
        return (byte)_ENCRYPTED_DATA_INFO.ClusterShift$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE ClusterShift;
     * }
     */
    public static void ClusterShift$set(MemorySegment seg, byte x) {
        _ENCRYPTED_DATA_INFO.ClusterShift$VH.set(seg, x);
    }
    public static byte ClusterShift$get(MemorySegment seg, long index) {
        return (byte)_ENCRYPTED_DATA_INFO.ClusterShift$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ClusterShift$set(MemorySegment seg, long index, byte x) {
        _ENCRYPTED_DATA_INFO.ClusterShift$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle EncryptionFormat$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("EncryptionFormat"));
    public static VarHandle EncryptionFormat$VH() {
        return _ENCRYPTED_DATA_INFO.EncryptionFormat$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE EncryptionFormat;
     * }
     */
    public static byte EncryptionFormat$get(MemorySegment seg) {
        return (byte)_ENCRYPTED_DATA_INFO.EncryptionFormat$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE EncryptionFormat;
     * }
     */
    public static void EncryptionFormat$set(MemorySegment seg, byte x) {
        _ENCRYPTED_DATA_INFO.EncryptionFormat$VH.set(seg, x);
    }
    public static byte EncryptionFormat$get(MemorySegment seg, long index) {
        return (byte)_ENCRYPTED_DATA_INFO.EncryptionFormat$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void EncryptionFormat$set(MemorySegment seg, long index, byte x) {
        _ENCRYPTED_DATA_INFO.EncryptionFormat$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle NumberOfDataBlocks$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("NumberOfDataBlocks"));
    public static VarHandle NumberOfDataBlocks$VH() {
        return _ENCRYPTED_DATA_INFO.NumberOfDataBlocks$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD NumberOfDataBlocks;
     * }
     */
    public static short NumberOfDataBlocks$get(MemorySegment seg) {
        return (short)_ENCRYPTED_DATA_INFO.NumberOfDataBlocks$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD NumberOfDataBlocks;
     * }
     */
    public static void NumberOfDataBlocks$set(MemorySegment seg, short x) {
        _ENCRYPTED_DATA_INFO.NumberOfDataBlocks$VH.set(seg, x);
    }
    public static short NumberOfDataBlocks$get(MemorySegment seg, long index) {
        return (short)_ENCRYPTED_DATA_INFO.NumberOfDataBlocks$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void NumberOfDataBlocks$set(MemorySegment seg, long index, short x) {
        _ENCRYPTED_DATA_INFO.NumberOfDataBlocks$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment DataBlockSize$slice(MemorySegment seg) {
        return seg.asSlice(28, 4);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


