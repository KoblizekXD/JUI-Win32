// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class windows_h_12 extends windows_h_11 {

    /**
     * {@snippet :
     * #define IME_KHOTKEY_HANJACONVERT 81
     * }
     */
    public static int IME_KHOTKEY_HANJACONVERT() {
        return (int)81L;
    }
    /**
     * {@snippet :
     * #define IME_KHOTKEY_ENGLISH 82
     * }
     */
    public static int IME_KHOTKEY_ENGLISH() {
        return (int)82L;
    }
    /**
     * {@snippet :
     * #define IME_THOTKEY_IME_NONIME_TOGGLE 112
     * }
     */
    public static int IME_THOTKEY_IME_NONIME_TOGGLE() {
        return (int)112L;
    }
    /**
     * {@snippet :
     * #define IME_THOTKEY_SHAPE_TOGGLE 113
     * }
     */
    public static int IME_THOTKEY_SHAPE_TOGGLE() {
        return (int)113L;
    }
    /**
     * {@snippet :
     * #define IME_THOTKEY_SYMBOL_TOGGLE 114
     * }
     */
    public static int IME_THOTKEY_SYMBOL_TOGGLE() {
        return (int)114L;
    }
    /**
     * {@snippet :
     * #define IME_HOTKEY_DSWITCH_FIRST 256
     * }
     */
    public static int IME_HOTKEY_DSWITCH_FIRST() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * #define IME_HOTKEY_DSWITCH_LAST 287
     * }
     */
    public static int IME_HOTKEY_DSWITCH_LAST() {
        return (int)287L;
    }
    /**
     * {@snippet :
     * #define IME_HOTKEY_PRIVATE_FIRST 512
     * }
     */
    public static int IME_HOTKEY_PRIVATE_FIRST() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * #define IME_ITHOTKEY_RESEND_RESULTSTR 512
     * }
     */
    public static int IME_ITHOTKEY_RESEND_RESULTSTR() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * #define IME_ITHOTKEY_PREVIOUS_COMPOSITION 513
     * }
     */
    public static int IME_ITHOTKEY_PREVIOUS_COMPOSITION() {
        return (int)513L;
    }
    /**
     * {@snippet :
     * #define IME_ITHOTKEY_UISTYLE_TOGGLE 514
     * }
     */
    public static int IME_ITHOTKEY_UISTYLE_TOGGLE() {
        return (int)514L;
    }
    /**
     * {@snippet :
     * #define IME_ITHOTKEY_RECONVERTSTRING 515
     * }
     */
    public static int IME_ITHOTKEY_RECONVERTSTRING() {
        return (int)515L;
    }
    /**
     * {@snippet :
     * #define IME_HOTKEY_PRIVATE_LAST 543
     * }
     */
    public static int IME_HOTKEY_PRIVATE_LAST() {
        return (int)543L;
    }
    /**
     * {@snippet :
     * #define GCS_COMPREADSTR 1
     * }
     */
    public static int GCS_COMPREADSTR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define GCS_COMPREADATTR 2
     * }
     */
    public static int GCS_COMPREADATTR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define GCS_COMPREADCLAUSE 4
     * }
     */
    public static int GCS_COMPREADCLAUSE() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define GCS_COMPSTR 8
     * }
     */
    public static int GCS_COMPSTR() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define GCS_COMPATTR 16
     * }
     */
    public static int GCS_COMPATTR() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define GCS_COMPCLAUSE 32
     * }
     */
    public static int GCS_COMPCLAUSE() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define GCS_CURSORPOS 128
     * }
     */
    public static int GCS_CURSORPOS() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * #define GCS_DELTASTART 256
     * }
     */
    public static int GCS_DELTASTART() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * #define GCS_RESULTREADSTR 512
     * }
     */
    public static int GCS_RESULTREADSTR() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * #define GCS_RESULTREADCLAUSE 1024
     * }
     */
    public static int GCS_RESULTREADCLAUSE() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * #define GCS_RESULTSTR 2048
     * }
     */
    public static int GCS_RESULTSTR() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * #define GCS_RESULTCLAUSE 4096
     * }
     */
    public static int GCS_RESULTCLAUSE() {
        return (int)4096L;
    }
    /**
     * {@snippet :
     * #define CS_INSERTCHAR 8192
     * }
     */
    public static int CS_INSERTCHAR() {
        return (int)8192L;
    }
    /**
     * {@snippet :
     * #define CS_NOMOVECARET 16384
     * }
     */
    public static int CS_NOMOVECARET() {
        return (int)16384L;
    }
    /**
     * {@snippet :
     * #define IMEVER_0310 196618
     * }
     */
    public static int IMEVER_0310() {
        return (int)196618L;
    }
    /**
     * {@snippet :
     * #define IMEVER_0400 262144
     * }
     */
    public static int IMEVER_0400() {
        return (int)262144L;
    }
    /**
     * {@snippet :
     * #define IME_PROP_AT_CARET 65536
     * }
     */
    public static int IME_PROP_AT_CARET() {
        return (int)65536L;
    }
    /**
     * {@snippet :
     * #define IME_PROP_SPECIAL_UI 131072
     * }
     */
    public static int IME_PROP_SPECIAL_UI() {
        return (int)131072L;
    }
    /**
     * {@snippet :
     * #define IME_PROP_CANDLIST_START_FROM_1 262144
     * }
     */
    public static int IME_PROP_CANDLIST_START_FROM_1() {
        return (int)262144L;
    }
    /**
     * {@snippet :
     * #define IME_PROP_UNICODE 524288
     * }
     */
    public static int IME_PROP_UNICODE() {
        return (int)524288L;
    }
    /**
     * {@snippet :
     * #define IME_PROP_COMPLETE_ON_UNSELECT 1048576
     * }
     */
    public static int IME_PROP_COMPLETE_ON_UNSELECT() {
        return (int)1048576L;
    }
    /**
     * {@snippet :
     * #define UI_CAP_2700 1
     * }
     */
    public static int UI_CAP_2700() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define UI_CAP_ROT90 2
     * }
     */
    public static int UI_CAP_ROT90() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define UI_CAP_ROTANY 4
     * }
     */
    public static int UI_CAP_ROTANY() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define SCS_CAP_COMPSTR 1
     * }
     */
    public static int SCS_CAP_COMPSTR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SCS_CAP_MAKEREAD 2
     * }
     */
    public static int SCS_CAP_MAKEREAD() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define SCS_CAP_SETRECONVERTSTRING 4
     * }
     */
    public static int SCS_CAP_SETRECONVERTSTRING() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define SELECT_CAP_CONVERSION 1
     * }
     */
    public static int SELECT_CAP_CONVERSION() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SELECT_CAP_SENTENCE 2
     * }
     */
    public static int SELECT_CAP_SENTENCE() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define GGL_LEVEL 1
     * }
     */
    public static int GGL_LEVEL() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define GGL_INDEX 2
     * }
     */
    public static int GGL_INDEX() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define GGL_STRING 3
     * }
     */
    public static int GGL_STRING() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define GGL_PRIVATE 4
     * }
     */
    public static int GGL_PRIVATE() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define GL_LEVEL_NOGUIDELINE 0
     * }
     */
    public static int GL_LEVEL_NOGUIDELINE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define GL_LEVEL_FATAL 1
     * }
     */
    public static int GL_LEVEL_FATAL() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define GL_LEVEL_ERROR 2
     * }
     */
    public static int GL_LEVEL_ERROR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define GL_LEVEL_WARNING 3
     * }
     */
    public static int GL_LEVEL_WARNING() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define GL_LEVEL_INFORMATION 4
     * }
     */
    public static int GL_LEVEL_INFORMATION() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define GL_ID_UNKNOWN 0
     * }
     */
    public static int GL_ID_UNKNOWN() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define GL_ID_NOMODULE 1
     * }
     */
    public static int GL_ID_NOMODULE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define GL_ID_NODICTIONARY 16
     * }
     */
    public static int GL_ID_NODICTIONARY() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define GL_ID_CANNOTSAVE 17
     * }
     */
    public static int GL_ID_CANNOTSAVE() {
        return (int)17L;
    }
    /**
     * {@snippet :
     * #define GL_ID_NOCONVERT 32
     * }
     */
    public static int GL_ID_NOCONVERT() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define GL_ID_TYPINGERROR 33
     * }
     */
    public static int GL_ID_TYPINGERROR() {
        return (int)33L;
    }
    /**
     * {@snippet :
     * #define GL_ID_TOOMANYSTROKE 34
     * }
     */
    public static int GL_ID_TOOMANYSTROKE() {
        return (int)34L;
    }
    /**
     * {@snippet :
     * #define GL_ID_READINGCONFLICT 35
     * }
     */
    public static int GL_ID_READINGCONFLICT() {
        return (int)35L;
    }
    /**
     * {@snippet :
     * #define GL_ID_INPUTREADING 36
     * }
     */
    public static int GL_ID_INPUTREADING() {
        return (int)36L;
    }
    /**
     * {@snippet :
     * #define GL_ID_INPUTRADICAL 37
     * }
     */
    public static int GL_ID_INPUTRADICAL() {
        return (int)37L;
    }
    /**
     * {@snippet :
     * #define GL_ID_INPUTCODE 38
     * }
     */
    public static int GL_ID_INPUTCODE() {
        return (int)38L;
    }
    /**
     * {@snippet :
     * #define GL_ID_INPUTSYMBOL 39
     * }
     */
    public static int GL_ID_INPUTSYMBOL() {
        return (int)39L;
    }
    /**
     * {@snippet :
     * #define GL_ID_CHOOSECANDIDATE 40
     * }
     */
    public static int GL_ID_CHOOSECANDIDATE() {
        return (int)40L;
    }
    /**
     * {@snippet :
     * #define GL_ID_REVERSECONVERSION 41
     * }
     */
    public static int GL_ID_REVERSECONVERSION() {
        return (int)41L;
    }
    /**
     * {@snippet :
     * #define GL_ID_PRIVATE_FIRST 32768
     * }
     */
    public static int GL_ID_PRIVATE_FIRST() {
        return (int)32768L;
    }
    /**
     * {@snippet :
     * #define GL_ID_PRIVATE_LAST 65535
     * }
     */
    public static int GL_ID_PRIVATE_LAST() {
        return (int)65535L;
    }
    /**
     * {@snippet :
     * #define IGP_PROPERTY 4
     * }
     */
    public static int IGP_PROPERTY() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define IGP_CONVERSION 8
     * }
     */
    public static int IGP_CONVERSION() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define IGP_SENTENCE 12
     * }
     */
    public static int IGP_SENTENCE() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * #define IGP_UI 16
     * }
     */
    public static int IGP_UI() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define IGP_SETCOMPSTR 20
     * }
     */
    public static int IGP_SETCOMPSTR() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * #define IGP_SELECT 24
     * }
     */
    public static int IGP_SELECT() {
        return (int)24L;
    }
    /**
     * {@snippet :
     * #define SCS_SETRECONVERTSTRING 65536
     * }
     */
    public static int SCS_SETRECONVERTSTRING() {
        return (int)65536L;
    }
    /**
     * {@snippet :
     * #define SCS_QUERYRECONVERTSTRING 131072
     * }
     */
    public static int SCS_QUERYRECONVERTSTRING() {
        return (int)131072L;
    }
    /**
     * {@snippet :
     * #define ATTR_INPUT 0
     * }
     */
    public static int ATTR_INPUT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define ATTR_TARGET_CONVERTED 1
     * }
     */
    public static int ATTR_TARGET_CONVERTED() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define ATTR_CONVERTED 2
     * }
     */
    public static int ATTR_CONVERTED() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define ATTR_TARGET_NOTCONVERTED 3
     * }
     */
    public static int ATTR_TARGET_NOTCONVERTED() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define ATTR_INPUT_ERROR 4
     * }
     */
    public static int ATTR_INPUT_ERROR() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define ATTR_FIXEDCONVERTED 5
     * }
     */
    public static int ATTR_FIXEDCONVERTED() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * #define CFS_DEFAULT 0
     * }
     */
    public static int CFS_DEFAULT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define CFS_RECT 1
     * }
     */
    public static int CFS_RECT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define CFS_POINT 2
     * }
     */
    public static int CFS_POINT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define CFS_FORCE_POSITION 32
     * }
     */
    public static int CFS_FORCE_POSITION() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define CFS_CANDIDATEPOS 64
     * }
     */
    public static int CFS_CANDIDATEPOS() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define CFS_EXCLUDE 128
     * }
     */
    public static int CFS_EXCLUDE() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * #define GCL_CONVERSION 1
     * }
     */
    public static int GCL_CONVERSION() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define GCL_REVERSECONVERSION 2
     * }
     */
    public static int GCL_REVERSECONVERSION() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define GCL_REVERSE_LENGTH 3
     * }
     */
    public static int GCL_REVERSE_LENGTH() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define IME_CMODE_ALPHANUMERIC 0
     * }
     */
    public static int IME_CMODE_ALPHANUMERIC() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define IME_CMODE_NATIVE 1
     * }
     */
    public static int IME_CMODE_NATIVE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define IME_CMODE_KATAKANA 2
     * }
     */
    public static int IME_CMODE_KATAKANA() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define IME_CMODE_LANGUAGE 3
     * }
     */
    public static int IME_CMODE_LANGUAGE() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define IME_CMODE_FULLSHAPE 8
     * }
     */
    public static int IME_CMODE_FULLSHAPE() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define IME_CMODE_ROMAN 16
     * }
     */
    public static int IME_CMODE_ROMAN() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define IME_CMODE_CHARCODE 32
     * }
     */
    public static int IME_CMODE_CHARCODE() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define IME_CMODE_HANJACONVERT 64
     * }
     */
    public static int IME_CMODE_HANJACONVERT() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define IME_CMODE_NATIVESYMBOL 128
     * }
     */
    public static int IME_CMODE_NATIVESYMBOL() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * #define IME_CMODE_SOFTKBD 128
     * }
     */
    public static int IME_CMODE_SOFTKBD() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * #define IME_CMODE_NOCONVERSION 256
     * }
     */
    public static int IME_CMODE_NOCONVERSION() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * #define IME_CMODE_EUDC 512
     * }
     */
    public static int IME_CMODE_EUDC() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * #define IME_CMODE_SYMBOL 1024
     * }
     */
    public static int IME_CMODE_SYMBOL() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * #define IME_CMODE_FIXED 2048
     * }
     */
    public static int IME_CMODE_FIXED() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * #define IME_SMODE_NONE 0
     * }
     */
    public static int IME_SMODE_NONE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define IME_SMODE_PLAURALCLAUSE 1
     * }
     */
    public static int IME_SMODE_PLAURALCLAUSE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define IME_SMODE_SINGLECONVERT 2
     * }
     */
    public static int IME_SMODE_SINGLECONVERT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define IME_SMODE_AUTOMATIC 4
     * }
     */
    public static int IME_SMODE_AUTOMATIC() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define IME_SMODE_PHRASEPREDICT 8
     * }
     */
    public static int IME_SMODE_PHRASEPREDICT() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define IME_SMODE_CONVERSATION 16
     * }
     */
    public static int IME_SMODE_CONVERSATION() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define IME_SMODE_RESERVED 61440
     * }
     */
    public static int IME_SMODE_RESERVED() {
        return (int)61440L;
    }
    /**
     * {@snippet :
     * #define IME_CAND_UNKNOWN 0
     * }
     */
    public static int IME_CAND_UNKNOWN() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define IME_CAND_READ 1
     * }
     */
    public static int IME_CAND_READ() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define IME_CAND_CODE 2
     * }
     */
    public static int IME_CAND_CODE() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define IME_CAND_MEANING 3
     * }
     */
    public static int IME_CAND_MEANING() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define IME_CAND_RADICAL 4
     * }
     */
    public static int IME_CAND_RADICAL() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define IME_CAND_STROKE 5
     * }
     */
    public static int IME_CAND_STROKE() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * #define IMN_CLOSESTATUSWINDOW 1
     * }
     */
    public static int IMN_CLOSESTATUSWINDOW() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define IMN_OPENSTATUSWINDOW 2
     * }
     */
    public static int IMN_OPENSTATUSWINDOW() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define IMN_CHANGECANDIDATE 3
     * }
     */
    public static int IMN_CHANGECANDIDATE() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define IMN_CLOSECANDIDATE 4
     * }
     */
    public static int IMN_CLOSECANDIDATE() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define IMN_OPENCANDIDATE 5
     * }
     */
    public static int IMN_OPENCANDIDATE() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * #define IMN_SETCONVERSIONMODE 6
     * }
     */
    public static int IMN_SETCONVERSIONMODE() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * #define IMN_SETSENTENCEMODE 7
     * }
     */
    public static int IMN_SETSENTENCEMODE() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * #define IMN_SETOPENSTATUS 8
     * }
     */
    public static int IMN_SETOPENSTATUS() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define IMN_SETCANDIDATEPOS 9
     * }
     */
    public static int IMN_SETCANDIDATEPOS() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * #define IMN_SETCOMPOSITIONFONT 10
     * }
     */
    public static int IMN_SETCOMPOSITIONFONT() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * #define IMN_SETCOMPOSITIONWINDOW 11
     * }
     */
    public static int IMN_SETCOMPOSITIONWINDOW() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * #define IMN_SETSTATUSWINDOWPOS 12
     * }
     */
    public static int IMN_SETSTATUSWINDOWPOS() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * #define IMN_GUIDELINE 13
     * }
     */
    public static int IMN_GUIDELINE() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * #define IMN_PRIVATE 14
     * }
     */
    public static int IMN_PRIVATE() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * #define IMR_COMPOSITIONWINDOW 1
     * }
     */
    public static int IMR_COMPOSITIONWINDOW() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define IMR_CANDIDATEWINDOW 2
     * }
     */
    public static int IMR_CANDIDATEWINDOW() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define IMR_COMPOSITIONFONT 3
     * }
     */
    public static int IMR_COMPOSITIONFONT() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define IMR_RECONVERTSTRING 4
     * }
     */
    public static int IMR_RECONVERTSTRING() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define IMR_CONFIRMRECONVERTSTRING 5
     * }
     */
    public static int IMR_CONFIRMRECONVERTSTRING() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * #define IMR_QUERYCHARPOSITION 6
     * }
     */
    public static int IMR_QUERYCHARPOSITION() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * #define IMR_DOCUMENTFEED 7
     * }
     */
    public static int IMR_DOCUMENTFEED() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * #define IME_CONFIG_GENERAL 1
     * }
     */
    public static int IME_CONFIG_GENERAL() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define IME_CONFIG_REGISTERWORD 2
     * }
     */
    public static int IME_CONFIG_REGISTERWORD() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define IME_CONFIG_SELECTDICTIONARY 3
     * }
     */
    public static int IME_CONFIG_SELECTDICTIONARY() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define IME_ESC_QUERY_SUPPORT 3
     * }
     */
    public static int IME_ESC_QUERY_SUPPORT() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define IME_ESC_RESERVED_FIRST 4
     * }
     */
    public static int IME_ESC_RESERVED_FIRST() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define IME_ESC_RESERVED_LAST 2047
     * }
     */
    public static int IME_ESC_RESERVED_LAST() {
        return (int)2047L;
    }
    /**
     * {@snippet :
     * #define IME_ESC_PRIVATE_FIRST 2048
     * }
     */
    public static int IME_ESC_PRIVATE_FIRST() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * #define IME_ESC_PRIVATE_LAST 4095
     * }
     */
    public static int IME_ESC_PRIVATE_LAST() {
        return (int)4095L;
    }
    /**
     * {@snippet :
     * #define IME_ESC_SEQUENCE_TO_INTERNAL 4097
     * }
     */
    public static int IME_ESC_SEQUENCE_TO_INTERNAL() {
        return (int)4097L;
    }
    /**
     * {@snippet :
     * #define IME_ESC_GET_EUDC_DICTIONARY 4099
     * }
     */
    public static int IME_ESC_GET_EUDC_DICTIONARY() {
        return (int)4099L;
    }
    /**
     * {@snippet :
     * #define IME_ESC_SET_EUDC_DICTIONARY 4100
     * }
     */
    public static int IME_ESC_SET_EUDC_DICTIONARY() {
        return (int)4100L;
    }
    /**
     * {@snippet :
     * #define IME_ESC_MAX_KEY 4101
     * }
     */
    public static int IME_ESC_MAX_KEY() {
        return (int)4101L;
    }
    /**
     * {@snippet :
     * #define IME_ESC_IME_NAME 4102
     * }
     */
    public static int IME_ESC_IME_NAME() {
        return (int)4102L;
    }
    /**
     * {@snippet :
     * #define IME_ESC_SYNC_HOTKEY 4103
     * }
     */
    public static int IME_ESC_SYNC_HOTKEY() {
        return (int)4103L;
    }
    /**
     * {@snippet :
     * #define IME_ESC_HANJA_MODE 4104
     * }
     */
    public static int IME_ESC_HANJA_MODE() {
        return (int)4104L;
    }
    /**
     * {@snippet :
     * #define IME_ESC_AUTOMATA 4105
     * }
     */
    public static int IME_ESC_AUTOMATA() {
        return (int)4105L;
    }
    /**
     * {@snippet :
     * #define IME_ESC_PRIVATE_HOTKEY 4106
     * }
     */
    public static int IME_ESC_PRIVATE_HOTKEY() {
        return (int)4106L;
    }
    /**
     * {@snippet :
     * #define IME_ESC_GETHELPFILENAME 4107
     * }
     */
    public static int IME_ESC_GETHELPFILENAME() {
        return (int)4107L;
    }
    /**
     * {@snippet :
     * #define IME_REGWORD_STYLE_EUDC 1
     * }
     */
    public static int IME_REGWORD_STYLE_EUDC() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define IACE_CHILDREN 1
     * }
     */
    public static int IACE_CHILDREN() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define IACE_DEFAULT 16
     * }
     */
    public static int IACE_DEFAULT() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define IACE_IGNORENOCONTEXT 32
     * }
     */
    public static int IACE_IGNORENOCONTEXT() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define IGIMIF_RIGHTMENU 1
     * }
     */
    public static int IGIMIF_RIGHTMENU() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define IGIMII_CMODE 1
     * }
     */
    public static int IGIMII_CMODE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define IGIMII_SMODE 2
     * }
     */
    public static int IGIMII_SMODE() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define IGIMII_CONFIGURE 4
     * }
     */
    public static int IGIMII_CONFIGURE() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define IGIMII_TOOLS 8
     * }
     */
    public static int IGIMII_TOOLS() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define IGIMII_HELP 16
     * }
     */
    public static int IGIMII_HELP() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define IGIMII_OTHER 32
     * }
     */
    public static int IGIMII_OTHER() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define IGIMII_INPUTTOOLS 64
     * }
     */
    public static int IGIMII_INPUTTOOLS() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define IMFT_RADIOCHECK 1
     * }
     */
    public static int IMFT_RADIOCHECK() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define IMFT_SEPARATOR 2
     * }
     */
    public static int IMFT_SEPARATOR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define IMFT_SUBMENU 4
     * }
     */
    public static int IMFT_SUBMENU() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define SOFTKEYBOARD_TYPE_T1 1
     * }
     */
    public static int SOFTKEYBOARD_TYPE_T1() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SOFTKEYBOARD_TYPE_C1 2
     * }
     */
    public static int SOFTKEYBOARD_TYPE_C1() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * typedef unsigned long long uintptr_t;
     * }
     */
    public static final OfLong uintptr_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef char* va_list;
     * }
     */
    public static final OfAddress va_list = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle __va_start$MH() {
        return RuntimeHelper.requireNonNull(constants$0.__va_start$MH,"__va_start");
    }
    /**
     * {@snippet :
     * void __va_start(va_list*,...);
     * }
     */
    public static void __va_start(MemorySegment x0, Object... x1) {
        var mh$ = __va_start$MH();
        try {
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned long long size_t;
     * }
     */
    public static final OfLong size_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long long ptrdiff_t;
     * }
     */
    public static final OfLong ptrdiff_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long long intptr_t;
     * }
     */
    public static final OfLong intptr_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short wchar_t;
     * }
     */
    public static final OfShort wchar_t = Constants$root.C_SHORT$LAYOUT;
    public static MethodHandle __security_init_cookie$MH() {
        return RuntimeHelper.requireNonNull(constants$0.__security_init_cookie$MH,"__security_init_cookie");
    }
    /**
     * {@snippet :
     * void __security_init_cookie();
     * }
     */
    public static void __security_init_cookie() {
        var mh$ = __security_init_cookie$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __security_check_cookie$MH() {
        return RuntimeHelper.requireNonNull(constants$0.__security_check_cookie$MH,"__security_check_cookie");
    }
    /**
     * {@snippet :
     * void __security_check_cookie(uintptr_t _StackCookie);
     * }
     */
    public static void __security_check_cookie(long _StackCookie) {
        var mh$ = __security_check_cookie$MH();
        try {
            mh$.invokeExact(_StackCookie);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __report_gsfailure$MH() {
        return RuntimeHelper.requireNonNull(constants$0.__report_gsfailure$MH,"__report_gsfailure");
    }
    /**
     * {@snippet :
     * void __report_gsfailure(uintptr_t _StackCookie);
     * }
     */
    public static void __report_gsfailure(long _StackCookie) {
        var mh$ = __report_gsfailure$MH();
        try {
            mh$.invokeExact(_StackCookie);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemoryLayout __security_cookie$LAYOUT() {
        return constants$0.__security_cookie$LAYOUT;
    }
    public static VarHandle __security_cookie$VH() {
        return constants$0.__security_cookie$VH;
    }
    public static MemorySegment __security_cookie$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$0.__security_cookie$SEGMENT,"__security_cookie");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * uintptr_t __security_cookie;
     * }
     */
    public static long __security_cookie$get() {
        return (long) constants$0.__security_cookie$VH.get(RuntimeHelper.requireNonNull(constants$0.__security_cookie$SEGMENT, "__security_cookie"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * uintptr_t __security_cookie;
     * }
     */
    public static void __security_cookie$set(long x) {
        constants$0.__security_cookie$VH.set(RuntimeHelper.requireNonNull(constants$0.__security_cookie$SEGMENT, "__security_cookie"), x);
    }
    /**
     * {@snippet :
     * enum _EXCEPTION_DISPOSITION.ExceptionContinueExecution = 0;
     * }
     */
    public static int ExceptionContinueExecution() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum _EXCEPTION_DISPOSITION.ExceptionContinueSearch = 1;
     * }
     */
    public static int ExceptionContinueSearch() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum _EXCEPTION_DISPOSITION.ExceptionNestedException = 2;
     * }
     */
    public static int ExceptionNestedException() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum _EXCEPTION_DISPOSITION.ExceptionCollidedUnwind = 3;
     * }
     */
    public static int ExceptionCollidedUnwind() {
        return (int)3L;
    }
    public static MethodHandle __C_specific_handler$MH() {
        return RuntimeHelper.requireNonNull(constants$0.__C_specific_handler$MH,"__C_specific_handler");
    }
    /**
     * {@snippet :
     * EXCEPTION_DISPOSITION __C_specific_handler(struct _EXCEPTION_RECORD* ExceptionRecord, void* EstablisherFrame, struct _CONTEXT* ContextRecord, struct _DISPATCHER_CONTEXT* DispatcherContext);
     * }
     */
    public static int __C_specific_handler(MemorySegment ExceptionRecord, MemorySegment EstablisherFrame, MemorySegment ContextRecord, MemorySegment DispatcherContext) {
        var mh$ = __C_specific_handler$MH();
        try {
            return (int)mh$.invokeExact(ExceptionRecord, EstablisherFrame, ContextRecord, DispatcherContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _exception_code$MH() {
        return RuntimeHelper.requireNonNull(constants$1._exception_code$MH,"_exception_code");
    }
    /**
     * {@snippet :
     * unsigned long _exception_code();
     * }
     */
    public static int _exception_code() {
        var mh$ = _exception_code$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _exception_info$MH() {
        return RuntimeHelper.requireNonNull(constants$1._exception_info$MH,"_exception_info");
    }
    /**
     * {@snippet :
     * void* _exception_info();
     * }
     */
    public static MemorySegment _exception_info() {
        var mh$ = _exception_info$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _abnormal_termination$MH() {
        return RuntimeHelper.requireNonNull(constants$1._abnormal_termination$MH,"_abnormal_termination");
    }
    /**
     * {@snippet :
     * int _abnormal_termination();
     * }
     */
    public static int _abnormal_termination() {
        var mh$ = _abnormal_termination$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef char* __gnuc_va_list;
     * }
     */
    public static final OfAddress __gnuc_va_list = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long ULONG;
     * }
     */
    public static final OfInt ULONG = Constants$root.C_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long* PULONG;
     * }
     */
    public static final OfAddress PULONG = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short USHORT;
     * }
     */
    public static final OfShort USHORT = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short* PUSHORT;
     * }
     */
    public static final OfAddress PUSHORT = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned char UCHAR;
     * }
     */
    public static final OfByte UCHAR = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned char* PUCHAR;
     * }
     */
    public static final OfAddress PUCHAR = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef char* PSZ;
     * }
     */
    public static final OfAddress PSZ = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long DWORD;
     * }
     */
    public static final OfInt DWORD = Constants$root.C_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef int BOOL;
     * }
     */
    public static final OfInt BOOL = Constants$root.C_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned char BYTE;
     * }
     */
    public static final OfByte BYTE = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short WORD;
     * }
     */
    public static final OfShort WORD = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef float FLOAT;
     * }
     */
    public static final OfFloat FLOAT = Constants$root.C_FLOAT$LAYOUT;
    /**
     * {@snippet :
     * typedef float* PFLOAT;
     * }
     */
    public static final OfAddress PFLOAT = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef int* PBOOL;
     * }
     */
    public static final OfAddress PBOOL = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef int* LPBOOL;
     * }
     */
    public static final OfAddress LPBOOL = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned char* PBYTE;
     * }
     */
    public static final OfAddress PBYTE = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned char* LPBYTE;
     * }
     */
    public static final OfAddress LPBYTE = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef int* PINT;
     * }
     */
    public static final OfAddress PINT = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef int* LPINT;
     * }
     */
    public static final OfAddress LPINT = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short* PWORD;
     * }
     */
    public static final OfAddress PWORD = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short* LPWORD;
     * }
     */
    public static final OfAddress LPWORD = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef long* LPLONG;
     * }
     */
    public static final OfAddress LPLONG = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long* PDWORD;
     * }
     */
    public static final OfAddress PDWORD = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long* LPDWORD;
     * }
     */
    public static final OfAddress LPDWORD = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef void* LPVOID;
     * }
     */
    public static final OfAddress LPVOID = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef void* LPCVOID;
     * }
     */
    public static final OfAddress LPCVOID = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef int INT;
     * }
     */
    public static final OfInt INT = Constants$root.C_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int UINT;
     * }
     */
    public static final OfInt UINT = Constants$root.C_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int* PUINT;
     * }
     */
    public static final OfAddress PUINT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle _invalid_parameter_noinfo$MH() {
        return RuntimeHelper.requireNonNull(constants$1._invalid_parameter_noinfo$MH,"_invalid_parameter_noinfo");
    }
    /**
     * {@snippet :
     * void _invalid_parameter_noinfo();
     * }
     */
    public static void _invalid_parameter_noinfo() {
        var mh$ = _invalid_parameter_noinfo$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _invalid_parameter_noinfo_noreturn$MH() {
        return RuntimeHelper.requireNonNull(constants$1._invalid_parameter_noinfo_noreturn$MH,"_invalid_parameter_noinfo_noreturn");
    }
    /**
     * {@snippet :
     * void _invalid_parameter_noinfo_noreturn();
     * }
     */
    public static void _invalid_parameter_noinfo_noreturn() {
        var mh$ = _invalid_parameter_noinfo_noreturn$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _invoke_watson$MH() {
        return RuntimeHelper.requireNonNull(constants$1._invoke_watson$MH,"_invoke_watson");
    }
    /**
     * {@snippet :
     * void _invoke_watson(const wchar_t* _Expression, const wchar_t* _FunctionName, const wchar_t* _FileName, unsigned int _LineNo, uintptr_t _Reserved);
     * }
     */
    public static void _invoke_watson(MemorySegment _Expression, MemorySegment _FunctionName, MemorySegment _FileName, int _LineNo, long _Reserved) {
        var mh$ = _invoke_watson$MH();
        try {
            mh$.invokeExact(_Expression, _FunctionName, _FileName, _LineNo, _Reserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef int errno_t;
     * }
     */
    public static final OfInt errno_t = Constants$root.C_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short wint_t;
     * }
     */
    public static final OfShort wint_t = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short wctype_t;
     * }
     */
    public static final OfShort wctype_t = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef long __time32_t;
     * }
     */
    public static final OfInt __time32_t = Constants$root.C_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long long __time64_t;
     * }
     */
    public static final OfLong __time64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef struct __crt_locale_pointers* _locale_t;
     * }
     */
    public static final OfAddress _locale_t = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef long long time_t;
     * }
     */
    public static final OfLong time_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long long rsize_t;
     * }
     */
    public static final OfLong rsize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static MethodHandle __pctype_func$MH() {
        return RuntimeHelper.requireNonNull(constants$2.__pctype_func$MH,"__pctype_func");
    }
    /**
     * {@snippet :
     * unsigned short* __pctype_func();
     * }
     */
    public static MemorySegment __pctype_func() {
        var mh$ = __pctype_func$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __pwctype_func$MH() {
        return RuntimeHelper.requireNonNull(constants$2.__pwctype_func$MH,"__pwctype_func");
    }
    /**
     * {@snippet :
     * const wctype_t* __pwctype_func();
     * }
     */
    public static MemorySegment __pwctype_func() {
        var mh$ = __pwctype_func$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle iswalnum$MH() {
        return RuntimeHelper.requireNonNull(constants$2.iswalnum$MH,"iswalnum");
    }
    /**
     * {@snippet :
     * int iswalnum(wint_t _C);
     * }
     */
    public static int iswalnum(short _C) {
        var mh$ = iswalnum$MH();
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle iswalpha$MH() {
        return RuntimeHelper.requireNonNull(constants$2.iswalpha$MH,"iswalpha");
    }
    /**
     * {@snippet :
     * int iswalpha(wint_t _C);
     * }
     */
    public static int iswalpha(short _C) {
        var mh$ = iswalpha$MH();
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle iswascii$MH() {
        return RuntimeHelper.requireNonNull(constants$2.iswascii$MH,"iswascii");
    }
    /**
     * {@snippet :
     * int iswascii(wint_t _C);
     * }
     */
    public static int iswascii(short _C) {
        var mh$ = iswascii$MH();
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle iswblank$MH() {
        return RuntimeHelper.requireNonNull(constants$2.iswblank$MH,"iswblank");
    }
    /**
     * {@snippet :
     * int iswblank(wint_t _C);
     * }
     */
    public static int iswblank(short _C) {
        var mh$ = iswblank$MH();
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle iswcntrl$MH() {
        return RuntimeHelper.requireNonNull(constants$3.iswcntrl$MH,"iswcntrl");
    }
    /**
     * {@snippet :
     * int iswcntrl(wint_t _C);
     * }
     */
    public static int iswcntrl(short _C) {
        var mh$ = iswcntrl$MH();
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle iswdigit$MH() {
        return RuntimeHelper.requireNonNull(constants$3.iswdigit$MH,"iswdigit");
    }
    /**
     * {@snippet :
     * int iswdigit(wint_t _C);
     * }
     */
    public static int iswdigit(short _C) {
        var mh$ = iswdigit$MH();
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle iswgraph$MH() {
        return RuntimeHelper.requireNonNull(constants$3.iswgraph$MH,"iswgraph");
    }
    /**
     * {@snippet :
     * int iswgraph(wint_t _C);
     * }
     */
    public static int iswgraph(short _C) {
        var mh$ = iswgraph$MH();
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle iswlower$MH() {
        return RuntimeHelper.requireNonNull(constants$3.iswlower$MH,"iswlower");
    }
    /**
     * {@snippet :
     * int iswlower(wint_t _C);
     * }
     */
    public static int iswlower(short _C) {
        var mh$ = iswlower$MH();
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle iswprint$MH() {
        return RuntimeHelper.requireNonNull(constants$3.iswprint$MH,"iswprint");
    }
    /**
     * {@snippet :
     * int iswprint(wint_t _C);
     * }
     */
    public static int iswprint(short _C) {
        var mh$ = iswprint$MH();
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle iswpunct$MH() {
        return RuntimeHelper.requireNonNull(constants$3.iswpunct$MH,"iswpunct");
    }
    /**
     * {@snippet :
     * int iswpunct(wint_t _C);
     * }
     */
    public static int iswpunct(short _C) {
        var mh$ = iswpunct$MH();
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle iswspace$MH() {
        return RuntimeHelper.requireNonNull(constants$4.iswspace$MH,"iswspace");
    }
    /**
     * {@snippet :
     * int iswspace(wint_t _C);
     * }
     */
    public static int iswspace(short _C) {
        var mh$ = iswspace$MH();
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle iswupper$MH() {
        return RuntimeHelper.requireNonNull(constants$4.iswupper$MH,"iswupper");
    }
    /**
     * {@snippet :
     * int iswupper(wint_t _C);
     * }
     */
    public static int iswupper(short _C) {
        var mh$ = iswupper$MH();
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle iswxdigit$MH() {
        return RuntimeHelper.requireNonNull(constants$4.iswxdigit$MH,"iswxdigit");
    }
    /**
     * {@snippet :
     * int iswxdigit(wint_t _C);
     * }
     */
    public static int iswxdigit(short _C) {
        var mh$ = iswxdigit$MH();
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __iswcsymf$MH() {
        return RuntimeHelper.requireNonNull(constants$4.__iswcsymf$MH,"__iswcsymf");
    }
    /**
     * {@snippet :
     * int __iswcsymf(wint_t _C);
     * }
     */
    public static int __iswcsymf(short _C) {
        var mh$ = __iswcsymf$MH();
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __iswcsym$MH() {
        return RuntimeHelper.requireNonNull(constants$4.__iswcsym$MH,"__iswcsym");
    }
    /**
     * {@snippet :
     * int __iswcsym(wint_t _C);
     * }
     */
    public static int __iswcsym(short _C) {
        var mh$ = __iswcsym$MH();
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _iswalnum_l$MH() {
        return RuntimeHelper.requireNonNull(constants$4._iswalnum_l$MH,"_iswalnum_l");
    }
    /**
     * {@snippet :
     * int _iswalnum_l(wint_t _C, _locale_t _Locale);
     * }
     */
    public static int _iswalnum_l(short _C, MemorySegment _Locale) {
        var mh$ = _iswalnum_l$MH();
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _iswalpha_l$MH() {
        return RuntimeHelper.requireNonNull(constants$5._iswalpha_l$MH,"_iswalpha_l");
    }
    /**
     * {@snippet :
     * int _iswalpha_l(wint_t _C, _locale_t _Locale);
     * }
     */
    public static int _iswalpha_l(short _C, MemorySegment _Locale) {
        var mh$ = _iswalpha_l$MH();
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _iswblank_l$MH() {
        return RuntimeHelper.requireNonNull(constants$5._iswblank_l$MH,"_iswblank_l");
    }
    /**
     * {@snippet :
     * int _iswblank_l(wint_t _C, _locale_t _Locale);
     * }
     */
    public static int _iswblank_l(short _C, MemorySegment _Locale) {
        var mh$ = _iswblank_l$MH();
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _iswcntrl_l$MH() {
        return RuntimeHelper.requireNonNull(constants$5._iswcntrl_l$MH,"_iswcntrl_l");
    }
    /**
     * {@snippet :
     * int _iswcntrl_l(wint_t _C, _locale_t _Locale);
     * }
     */
    public static int _iswcntrl_l(short _C, MemorySegment _Locale) {
        var mh$ = _iswcntrl_l$MH();
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _iswdigit_l$MH() {
        return RuntimeHelper.requireNonNull(constants$5._iswdigit_l$MH,"_iswdigit_l");
    }
    /**
     * {@snippet :
     * int _iswdigit_l(wint_t _C, _locale_t _Locale);
     * }
     */
    public static int _iswdigit_l(short _C, MemorySegment _Locale) {
        var mh$ = _iswdigit_l$MH();
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _iswgraph_l$MH() {
        return RuntimeHelper.requireNonNull(constants$5._iswgraph_l$MH,"_iswgraph_l");
    }
    /**
     * {@snippet :
     * int _iswgraph_l(wint_t _C, _locale_t _Locale);
     * }
     */
    public static int _iswgraph_l(short _C, MemorySegment _Locale) {
        var mh$ = _iswgraph_l$MH();
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _iswlower_l$MH() {
        return RuntimeHelper.requireNonNull(constants$5._iswlower_l$MH,"_iswlower_l");
    }
    /**
     * {@snippet :
     * int _iswlower_l(wint_t _C, _locale_t _Locale);
     * }
     */
    public static int _iswlower_l(short _C, MemorySegment _Locale) {
        var mh$ = _iswlower_l$MH();
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _iswprint_l$MH() {
        return RuntimeHelper.requireNonNull(constants$6._iswprint_l$MH,"_iswprint_l");
    }
    /**
     * {@snippet :
     * int _iswprint_l(wint_t _C, _locale_t _Locale);
     * }
     */
    public static int _iswprint_l(short _C, MemorySegment _Locale) {
        var mh$ = _iswprint_l$MH();
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _iswpunct_l$MH() {
        return RuntimeHelper.requireNonNull(constants$6._iswpunct_l$MH,"_iswpunct_l");
    }
    /**
     * {@snippet :
     * int _iswpunct_l(wint_t _C, _locale_t _Locale);
     * }
     */
    public static int _iswpunct_l(short _C, MemorySegment _Locale) {
        var mh$ = _iswpunct_l$MH();
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _iswspace_l$MH() {
        return RuntimeHelper.requireNonNull(constants$6._iswspace_l$MH,"_iswspace_l");
    }
    /**
     * {@snippet :
     * int _iswspace_l(wint_t _C, _locale_t _Locale);
     * }
     */
    public static int _iswspace_l(short _C, MemorySegment _Locale) {
        var mh$ = _iswspace_l$MH();
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _iswupper_l$MH() {
        return RuntimeHelper.requireNonNull(constants$6._iswupper_l$MH,"_iswupper_l");
    }
    /**
     * {@snippet :
     * int _iswupper_l(wint_t _C, _locale_t _Locale);
     * }
     */
    public static int _iswupper_l(short _C, MemorySegment _Locale) {
        var mh$ = _iswupper_l$MH();
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _iswxdigit_l$MH() {
        return RuntimeHelper.requireNonNull(constants$6._iswxdigit_l$MH,"_iswxdigit_l");
    }
    /**
     * {@snippet :
     * int _iswxdigit_l(wint_t _C, _locale_t _Locale);
     * }
     */
    public static int _iswxdigit_l(short _C, MemorySegment _Locale) {
        var mh$ = _iswxdigit_l$MH();
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _iswcsymf_l$MH() {
        return RuntimeHelper.requireNonNull(constants$6._iswcsymf_l$MH,"_iswcsymf_l");
    }
    /**
     * {@snippet :
     * int _iswcsymf_l(wint_t _C, _locale_t _Locale);
     * }
     */
    public static int _iswcsymf_l(short _C, MemorySegment _Locale) {
        var mh$ = _iswcsymf_l$MH();
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _iswcsym_l$MH() {
        return RuntimeHelper.requireNonNull(constants$7._iswcsym_l$MH,"_iswcsym_l");
    }
    /**
     * {@snippet :
     * int _iswcsym_l(wint_t _C, _locale_t _Locale);
     * }
     */
    public static int _iswcsym_l(short _C, MemorySegment _Locale) {
        var mh$ = _iswcsym_l$MH();
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle towupper$MH() {
        return RuntimeHelper.requireNonNull(constants$7.towupper$MH,"towupper");
    }
    /**
     * {@snippet :
     * wint_t towupper(wint_t _C);
     * }
     */
    public static short towupper(short _C) {
        var mh$ = towupper$MH();
        try {
            return (short)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle towlower$MH() {
        return RuntimeHelper.requireNonNull(constants$7.towlower$MH,"towlower");
    }
    /**
     * {@snippet :
     * wint_t towlower(wint_t _C);
     * }
     */
    public static short towlower(short _C) {
        var mh$ = towlower$MH();
        try {
            return (short)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle iswctype$MH() {
        return RuntimeHelper.requireNonNull(constants$7.iswctype$MH,"iswctype");
    }
    /**
     * {@snippet :
     * int iswctype(wint_t _C, wctype_t _Type);
     * }
     */
    public static int iswctype(short _C, short _Type) {
        var mh$ = iswctype$MH();
        try {
            return (int)mh$.invokeExact(_C, _Type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _towupper_l$MH() {
        return RuntimeHelper.requireNonNull(constants$7._towupper_l$MH,"_towupper_l");
    }
    /**
     * {@snippet :
     * wint_t _towupper_l(wint_t _C, _locale_t _Locale);
     * }
     */
    public static short _towupper_l(short _C, MemorySegment _Locale) {
        var mh$ = _towupper_l$MH();
        try {
            return (short)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _towlower_l$MH() {
        return RuntimeHelper.requireNonNull(constants$7._towlower_l$MH,"_towlower_l");
    }
    /**
     * {@snippet :
     * wint_t _towlower_l(wint_t _C, _locale_t _Locale);
     * }
     */
    public static short _towlower_l(short _C, MemorySegment _Locale) {
        var mh$ = _towlower_l$MH();
        try {
            return (short)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _iswctype_l$MH() {
        return RuntimeHelper.requireNonNull(constants$8._iswctype_l$MH,"_iswctype_l");
    }
    /**
     * {@snippet :
     * int _iswctype_l(wint_t _C, wctype_t _Type, _locale_t _Locale);
     * }
     */
    public static int _iswctype_l(short _C, short _Type, MemorySegment _Locale) {
        var mh$ = _iswctype_l$MH();
        try {
            return (int)mh$.invokeExact(_C, _Type, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isleadbyte$MH() {
        return RuntimeHelper.requireNonNull(constants$8.isleadbyte$MH,"isleadbyte");
    }
    /**
     * {@snippet :
     * int isleadbyte(int _C);
     * }
     */
    public static int isleadbyte(int _C) {
        var mh$ = isleadbyte$MH();
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _isleadbyte_l$MH() {
        return RuntimeHelper.requireNonNull(constants$8._isleadbyte_l$MH,"_isleadbyte_l");
    }
    /**
     * {@snippet :
     * int _isleadbyte_l(int _C, _locale_t _Locale);
     * }
     */
    public static int _isleadbyte_l(int _C, MemorySegment _Locale) {
        var mh$ = _isleadbyte_l$MH();
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle is_wctype$MH() {
        return RuntimeHelper.requireNonNull(constants$8.is_wctype$MH,"is_wctype");
    }
    /**
     * {@snippet :
     * int is_wctype(wint_t _C, wctype_t _Type);
     * }
     */
    public static int is_wctype(short _C, short _Type) {
        var mh$ = is_wctype$MH();
        try {
            return (int)mh$.invokeExact(_C, _Type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _isctype$MH() {
        return RuntimeHelper.requireNonNull(constants$8._isctype$MH,"_isctype");
    }
    /**
     * {@snippet :
     * int _isctype(int _C, int _Type);
     * }
     */
    public static int _isctype(int _C, int _Type) {
        var mh$ = _isctype$MH();
        try {
            return (int)mh$.invokeExact(_C, _Type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _isctype_l$MH() {
        return RuntimeHelper.requireNonNull(constants$8._isctype_l$MH,"_isctype_l");
    }
    /**
     * {@snippet :
     * int _isctype_l(int _C, int _Type, _locale_t _Locale);
     * }
     */
    public static int _isctype_l(int _C, int _Type, MemorySegment _Locale) {
        var mh$ = _isctype_l$MH();
        try {
            return (int)mh$.invokeExact(_C, _Type, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isalpha$MH() {
        return RuntimeHelper.requireNonNull(constants$9.isalpha$MH,"isalpha");
    }
    /**
     * {@snippet :
     * int isalpha(int _C);
     * }
     */
    public static int isalpha(int _C) {
        var mh$ = isalpha$MH();
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _isalpha_l$MH() {
        return RuntimeHelper.requireNonNull(constants$9._isalpha_l$MH,"_isalpha_l");
    }
    /**
     * {@snippet :
     * int _isalpha_l(int _C, _locale_t _Locale);
     * }
     */
    public static int _isalpha_l(int _C, MemorySegment _Locale) {
        var mh$ = _isalpha_l$MH();
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isupper$MH() {
        return RuntimeHelper.requireNonNull(constants$9.isupper$MH,"isupper");
    }
    /**
     * {@snippet :
     * int isupper(int _C);
     * }
     */
    public static int isupper(int _C) {
        var mh$ = isupper$MH();
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _isupper_l$MH() {
        return RuntimeHelper.requireNonNull(constants$9._isupper_l$MH,"_isupper_l");
    }
    /**
     * {@snippet :
     * int _isupper_l(int _C, _locale_t _Locale);
     * }
     */
    public static int _isupper_l(int _C, MemorySegment _Locale) {
        var mh$ = _isupper_l$MH();
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle islower$MH() {
        return RuntimeHelper.requireNonNull(constants$9.islower$MH,"islower");
    }
    /**
     * {@snippet :
     * int islower(int _C);
     * }
     */
    public static int islower(int _C) {
        var mh$ = islower$MH();
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _islower_l$MH() {
        return RuntimeHelper.requireNonNull(constants$9._islower_l$MH,"_islower_l");
    }
    /**
     * {@snippet :
     * int _islower_l(int _C, _locale_t _Locale);
     * }
     */
    public static int _islower_l(int _C, MemorySegment _Locale) {
        var mh$ = _islower_l$MH();
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isdigit$MH() {
        return RuntimeHelper.requireNonNull(constants$10.isdigit$MH,"isdigit");
    }
    /**
     * {@snippet :
     * int isdigit(int _C);
     * }
     */
    public static int isdigit(int _C) {
        var mh$ = isdigit$MH();
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _isdigit_l$MH() {
        return RuntimeHelper.requireNonNull(constants$10._isdigit_l$MH,"_isdigit_l");
    }
    /**
     * {@snippet :
     * int _isdigit_l(int _C, _locale_t _Locale);
     * }
     */
    public static int _isdigit_l(int _C, MemorySegment _Locale) {
        var mh$ = _isdigit_l$MH();
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isxdigit$MH() {
        return RuntimeHelper.requireNonNull(constants$10.isxdigit$MH,"isxdigit");
    }
    /**
     * {@snippet :
     * int isxdigit(int _C);
     * }
     */
    public static int isxdigit(int _C) {
        var mh$ = isxdigit$MH();
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _isxdigit_l$MH() {
        return RuntimeHelper.requireNonNull(constants$10._isxdigit_l$MH,"_isxdigit_l");
    }
    /**
     * {@snippet :
     * int _isxdigit_l(int _C, _locale_t _Locale);
     * }
     */
    public static int _isxdigit_l(int _C, MemorySegment _Locale) {
        var mh$ = _isxdigit_l$MH();
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isspace$MH() {
        return RuntimeHelper.requireNonNull(constants$10.isspace$MH,"isspace");
    }
    /**
     * {@snippet :
     * int isspace(int _C);
     * }
     */
    public static int isspace(int _C) {
        var mh$ = isspace$MH();
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _isspace_l$MH() {
        return RuntimeHelper.requireNonNull(constants$10._isspace_l$MH,"_isspace_l");
    }
    /**
     * {@snippet :
     * int _isspace_l(int _C, _locale_t _Locale);
     * }
     */
    public static int _isspace_l(int _C, MemorySegment _Locale) {
        var mh$ = _isspace_l$MH();
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ispunct$MH() {
        return RuntimeHelper.requireNonNull(constants$11.ispunct$MH,"ispunct");
    }
    /**
     * {@snippet :
     * int ispunct(int _C);
     * }
     */
    public static int ispunct(int _C) {
        var mh$ = ispunct$MH();
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _ispunct_l$MH() {
        return RuntimeHelper.requireNonNull(constants$11._ispunct_l$MH,"_ispunct_l");
    }
    /**
     * {@snippet :
     * int _ispunct_l(int _C, _locale_t _Locale);
     * }
     */
    public static int _ispunct_l(int _C, MemorySegment _Locale) {
        var mh$ = _ispunct_l$MH();
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isblank$MH() {
        return RuntimeHelper.requireNonNull(constants$11.isblank$MH,"isblank");
    }
    /**
     * {@snippet :
     * int isblank(int _C);
     * }
     */
    public static int isblank(int _C) {
        var mh$ = isblank$MH();
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _isblank_l$MH() {
        return RuntimeHelper.requireNonNull(constants$11._isblank_l$MH,"_isblank_l");
    }
    /**
     * {@snippet :
     * int _isblank_l(int _C, _locale_t _Locale);
     * }
     */
    public static int _isblank_l(int _C, MemorySegment _Locale) {
        var mh$ = _isblank_l$MH();
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isalnum$MH() {
        return RuntimeHelper.requireNonNull(constants$11.isalnum$MH,"isalnum");
    }
    /**
     * {@snippet :
     * int isalnum(int _C);
     * }
     */
    public static int isalnum(int _C) {
        var mh$ = isalnum$MH();
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _isalnum_l$MH() {
        return RuntimeHelper.requireNonNull(constants$11._isalnum_l$MH,"_isalnum_l");
    }
    /**
     * {@snippet :
     * int _isalnum_l(int _C, _locale_t _Locale);
     * }
     */
    public static int _isalnum_l(int _C, MemorySegment _Locale) {
        var mh$ = _isalnum_l$MH();
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isprint$MH() {
        return RuntimeHelper.requireNonNull(constants$12.isprint$MH,"isprint");
    }
    /**
     * {@snippet :
     * int isprint(int _C);
     * }
     */
    public static int isprint(int _C) {
        var mh$ = isprint$MH();
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _isprint_l$MH() {
        return RuntimeHelper.requireNonNull(constants$12._isprint_l$MH,"_isprint_l");
    }
    /**
     * {@snippet :
     * int _isprint_l(int _C, _locale_t _Locale);
     * }
     */
    public static int _isprint_l(int _C, MemorySegment _Locale) {
        var mh$ = _isprint_l$MH();
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isgraph$MH() {
        return RuntimeHelper.requireNonNull(constants$12.isgraph$MH,"isgraph");
    }
    /**
     * {@snippet :
     * int isgraph(int _C);
     * }
     */
    public static int isgraph(int _C) {
        var mh$ = isgraph$MH();
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _isgraph_l$MH() {
        return RuntimeHelper.requireNonNull(constants$12._isgraph_l$MH,"_isgraph_l");
    }
    /**
     * {@snippet :
     * int _isgraph_l(int _C, _locale_t _Locale);
     * }
     */
    public static int _isgraph_l(int _C, MemorySegment _Locale) {
        var mh$ = _isgraph_l$MH();
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle iscntrl$MH() {
        return RuntimeHelper.requireNonNull(constants$12.iscntrl$MH,"iscntrl");
    }
    /**
     * {@snippet :
     * int iscntrl(int _C);
     * }
     */
    public static int iscntrl(int _C) {
        var mh$ = iscntrl$MH();
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _iscntrl_l$MH() {
        return RuntimeHelper.requireNonNull(constants$12._iscntrl_l$MH,"_iscntrl_l");
    }
    /**
     * {@snippet :
     * int _iscntrl_l(int _C, _locale_t _Locale);
     * }
     */
    public static int _iscntrl_l(int _C, MemorySegment _Locale) {
        var mh$ = _iscntrl_l$MH();
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle toupper$MH() {
        return RuntimeHelper.requireNonNull(constants$13.toupper$MH,"toupper");
    }
    /**
     * {@snippet :
     * int toupper(int _C);
     * }
     */
    public static int toupper(int _C) {
        var mh$ = toupper$MH();
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tolower$MH() {
        return RuntimeHelper.requireNonNull(constants$13.tolower$MH,"tolower");
    }
    /**
     * {@snippet :
     * int tolower(int _C);
     * }
     */
    public static int tolower(int _C) {
        var mh$ = tolower$MH();
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _tolower$MH() {
        return RuntimeHelper.requireNonNull(constants$13._tolower$MH,"_tolower");
    }
    /**
     * {@snippet :
     * int _tolower(int _C);
     * }
     */
    public static int _tolower(int _C) {
        var mh$ = _tolower$MH();
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _tolower_l$MH() {
        return RuntimeHelper.requireNonNull(constants$13._tolower_l$MH,"_tolower_l");
    }
    /**
     * {@snippet :
     * int _tolower_l(int _C, _locale_t _Locale);
     * }
     */
    public static int _tolower_l(int _C, MemorySegment _Locale) {
        var mh$ = _tolower_l$MH();
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _toupper$MH() {
        return RuntimeHelper.requireNonNull(constants$13._toupper$MH,"_toupper");
    }
    /**
     * {@snippet :
     * int _toupper(int _C);
     * }
     */
    public static int _toupper(int _C) {
        var mh$ = _toupper$MH();
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _toupper_l$MH() {
        return RuntimeHelper.requireNonNull(constants$13._toupper_l$MH,"_toupper_l");
    }
    /**
     * {@snippet :
     * int _toupper_l(int _C, _locale_t _Locale);
     * }
     */
    public static int _toupper_l(int _C, MemorySegment _Locale) {
        var mh$ = _toupper_l$MH();
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __isascii$MH() {
        return RuntimeHelper.requireNonNull(constants$14.__isascii$MH,"__isascii");
    }
    /**
     * {@snippet :
     * int __isascii(int _C);
     * }
     */
    public static int __isascii(int _C) {
        var mh$ = __isascii$MH();
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __toascii$MH() {
        return RuntimeHelper.requireNonNull(constants$14.__toascii$MH,"__toascii");
    }
    /**
     * {@snippet :
     * int __toascii(int _C);
     * }
     */
    public static int __toascii(int _C) {
        var mh$ = __toascii$MH();
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __iscsymf$MH() {
        return RuntimeHelper.requireNonNull(constants$14.__iscsymf$MH,"__iscsymf");
    }
    /**
     * {@snippet :
     * int __iscsymf(int _C);
     * }
     */
    public static int __iscsymf(int _C) {
        var mh$ = __iscsymf$MH();
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __iscsym$MH() {
        return RuntimeHelper.requireNonNull(constants$14.__iscsym$MH,"__iscsym");
    }
    /**
     * {@snippet :
     * int __iscsym(int _C);
     * }
     */
    public static int __iscsym(int _C) {
        var mh$ = __iscsym$MH();
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ___mb_cur_max_func$MH() {
        return RuntimeHelper.requireNonNull(constants$14.___mb_cur_max_func$MH,"___mb_cur_max_func");
    }
    /**
     * {@snippet :
     * int ___mb_cur_max_func();
     * }
     */
    public static int ___mb_cur_max_func() {
        var mh$ = ___mb_cur_max_func$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ___mb_cur_max_l_func$MH() {
        return RuntimeHelper.requireNonNull(constants$14.___mb_cur_max_l_func$MH,"___mb_cur_max_l_func");
    }
    /**
     * {@snippet :
     * int ___mb_cur_max_l_func(_locale_t _Locale);
     * }
     */
    public static int ___mb_cur_max_l_func(MemorySegment _Locale) {
        var mh$ = ___mb_cur_max_l_func$MH();
        try {
            return (int)mh$.invokeExact(_Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned long long POINTER_64_INT;
     * }
     */
    public static final OfLong POINTER_64_INT = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef signed char INT8;
     * }
     */
    public static final OfByte INT8 = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef signed char* PINT8;
     * }
     */
    public static final OfAddress PINT8 = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef short INT16;
     * }
     */
    public static final OfShort INT16 = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef short* PINT16;
     * }
     */
    public static final OfAddress PINT16 = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef int INT32;
     * }
     */
    public static final OfInt INT32 = Constants$root.C_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef int* PINT32;
     * }
     */
    public static final OfAddress PINT32 = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef long long INT64;
     * }
     */
    public static final OfLong INT64 = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long long* PINT64;
     * }
     */
    public static final OfAddress PINT64 = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned char UINT8;
     * }
     */
    public static final OfByte UINT8 = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned char* PUINT8;
     * }
     */
    public static final OfAddress PUINT8 = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short UINT16;
     * }
     */
    public static final OfShort UINT16 = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short* PUINT16;
     * }
     */
    public static final OfAddress PUINT16 = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int UINT32;
     * }
     */
    public static final OfInt UINT32 = Constants$root.C_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int* PUINT32;
     * }
     */
    public static final OfAddress PUINT32 = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long long UINT64;
     * }
     */
    public static final OfLong UINT64 = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long long* PUINT64;
     * }
     */
    public static final OfAddress PUINT64 = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef int LONG32;
     * }
     */
    public static final OfInt LONG32 = Constants$root.C_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef int* PLONG32;
     * }
     */
    public static final OfAddress PLONG32 = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int ULONG32;
     * }
     */
    public static final OfInt ULONG32 = Constants$root.C_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int* PULONG32;
     * }
     */
    public static final OfAddress PULONG32 = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int DWORD32;
     * }
     */
    public static final OfInt DWORD32 = Constants$root.C_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int* PDWORD32;
     * }
     */
    public static final OfAddress PDWORD32 = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef long long INT_PTR;
     * }
     */
    public static final OfLong INT_PTR = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long long* PINT_PTR;
     * }
     */
    public static final OfAddress PINT_PTR = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long long UINT_PTR;
     * }
     */
    public static final OfLong UINT_PTR = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long long* PUINT_PTR;
     * }
     */
    public static final OfAddress PUINT_PTR = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef long long LONG_PTR;
     * }
     */
    public static final OfLong LONG_PTR = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long long* PLONG_PTR;
     * }
     */
    public static final OfAddress PLONG_PTR = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long long ULONG_PTR;
     * }
     */
    public static final OfLong ULONG_PTR = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long long* PULONG_PTR;
     * }
     */
    public static final OfAddress PULONG_PTR = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef void* HANDLE64;
     * }
     */
    public static final OfAddress HANDLE64 = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef void** PHANDLE64;
     * }
     */
    public static final OfAddress PHANDLE64 = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef long long SHANDLE_PTR;
     * }
     */
    public static final OfLong SHANDLE_PTR = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long long HANDLE_PTR;
     * }
     */
    public static final OfLong HANDLE_PTR = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int UHALF_PTR;
     * }
     */
    public static final OfInt UHALF_PTR = Constants$root.C_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int* PUHALF_PTR;
     * }
     */
    public static final OfAddress PUHALF_PTR = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef int HALF_PTR;
     * }
     */
    public static final OfInt HALF_PTR = Constants$root.C_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef int* PHALF_PTR;
     * }
     */
    public static final OfAddress PHALF_PTR = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long long SIZE_T;
     * }
     */
    public static final OfLong SIZE_T$0 = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long long* PSIZE_T;
     * }
     */
    public static final OfAddress PSIZE_T = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef long long SSIZE_T;
     * }
     */
    public static final OfLong SSIZE_T = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long long* PSSIZE_T;
     * }
     */
    public static final OfAddress PSSIZE_T = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long long DWORD_PTR;
     * }
     */
    public static final OfLong DWORD_PTR = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long long* PDWORD_PTR;
     * }
     */
    public static final OfAddress PDWORD_PTR = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef long long LONG64;
     * }
     */
    public static final OfLong LONG64 = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long long* PLONG64;
     * }
     */
    public static final OfAddress PLONG64 = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long long ULONG64;
     * }
     */
    public static final OfLong ULONG64 = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long long* PULONG64;
     * }
     */
    public static final OfAddress PULONG64 = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long long DWORD64;
     * }
     */
    public static final OfLong DWORD64 = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long long* PDWORD64;
     * }
     */
    public static final OfAddress PDWORD64 = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long long KAFFINITY;
     * }
     */
    public static final OfLong KAFFINITY = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long long* PKAFFINITY;
     * }
     */
    public static final OfAddress PKAFFINITY = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef void* PVOID;
     * }
     */
    public static final OfAddress PVOID = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef void* PVOID64;
     * }
     */
    public static final OfAddress PVOID64 = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef char CHAR;
     * }
     */
    public static final OfByte CHAR = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef short SHORT;
     * }
     */
    public static final OfShort SHORT = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef long LONG;
     * }
     */
    public static final OfInt LONG = Constants$root.C_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short WCHAR;
     * }
     */
    public static final OfShort WCHAR = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short* PWCHAR;
     * }
     */
    public static final OfAddress PWCHAR = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short* LPWCH;
     * }
     */
    public static final OfAddress LPWCH = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short* PWCH;
     * }
     */
    public static final OfAddress PWCH = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short* LPCWCH;
     * }
     */
    public static final OfAddress LPCWCH = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short* PCWCH;
     * }
     */
    public static final OfAddress PCWCH = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short* NWPSTR;
     * }
     */
    public static final OfAddress NWPSTR = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short* LPWSTR;
     * }
     */
    public static final OfAddress LPWSTR = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short* PWSTR;
     * }
     */
    public static final OfAddress PWSTR = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short** PZPWSTR;
     * }
     */
    public static final OfAddress PZPWSTR = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short** PCZPWSTR;
     * }
     */
    public static final OfAddress PCZPWSTR = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short* LPUWSTR;
     * }
     */
    public static final OfAddress LPUWSTR = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short* PUWSTR;
     * }
     */
    public static final OfAddress PUWSTR = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short* LPCWSTR;
     * }
     */
    public static final OfAddress LPCWSTR = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short* PCWSTR;
     * }
     */
    public static final OfAddress PCWSTR = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short** PZPCWSTR;
     * }
     */
    public static final OfAddress PZPCWSTR = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short** PCZPCWSTR;
     * }
     */
    public static final OfAddress PCZPCWSTR = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short* LPCUWSTR;
     * }
     */
    public static final OfAddress LPCUWSTR = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short* PCUWSTR;
     * }
     */
    public static final OfAddress PCUWSTR = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short* PZZWSTR;
     * }
     */
    public static final OfAddress PZZWSTR = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short* PCZZWSTR;
     * }
     */
    public static final OfAddress PCZZWSTR = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short* PUZZWSTR;
     * }
     */
    public static final OfAddress PUZZWSTR = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short* PCUZZWSTR;
     * }
     */
    public static final OfAddress PCUZZWSTR = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short* PNZWCH;
     * }
     */
    public static final OfAddress PNZWCH = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short* PCNZWCH;
     * }
     */
    public static final OfAddress PCNZWCH = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short* PUNZWCH;
     * }
     */
    public static final OfAddress PUNZWCH = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short* PCUNZWCH;
     * }
     */
    public static final OfAddress PCUNZWCH = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short* LPCWCHAR;
     * }
     */
    public static final OfAddress LPCWCHAR = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short* PCWCHAR;
     * }
     */
    public static final OfAddress PCWCHAR = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short* LPCUWCHAR;
     * }
     */
    public static final OfAddress LPCUWCHAR = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short* PCUWCHAR;
     * }
     */
    public static final OfAddress PCUWCHAR = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long UCSCHAR;
     * }
     */
    public static final OfInt UCSCHAR = Constants$root.C_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long* PUCSCHAR;
     * }
     */
    public static final OfAddress PUCSCHAR = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long* PCUCSCHAR;
     * }
     */
    public static final OfAddress PCUCSCHAR = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long* PUCSSTR;
     * }
     */
    public static final OfAddress PUCSSTR = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long* PUUCSSTR;
     * }
     */
    public static final OfAddress PUUCSSTR = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long* PCUCSSTR;
     * }
     */
    public static final OfAddress PCUCSSTR = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long* PCUUCSSTR;
     * }
     */
    public static final OfAddress PCUUCSSTR = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long* PUUCSCHAR;
     * }
     */
    public static final OfAddress PUUCSCHAR = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long* PCUUCSCHAR;
     * }
     */
    public static final OfAddress PCUUCSCHAR = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef char* PCHAR;
     * }
     */
    public static final OfAddress PCHAR = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef char* LPCH;
     * }
     */
    public static final OfAddress LPCH = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef char* PCH;
     * }
     */
    public static final OfAddress PCH = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef char* LPCCH;
     * }
     */
    public static final OfAddress LPCCH = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef char* PCCH;
     * }
     */
    public static final OfAddress PCCH = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef char* NPSTR;
     * }
     */
    public static final OfAddress NPSTR = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef char* LPSTR;
     * }
     */
    public static final OfAddress LPSTR = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef char* PSTR;
     * }
     */
    public static final OfAddress PSTR = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef char** PZPSTR;
     * }
     */
    public static final OfAddress PZPSTR = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef char** PCZPSTR;
     * }
     */
    public static final OfAddress PCZPSTR = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef char* LPCSTR;
     * }
     */
    public static final OfAddress LPCSTR = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef char* PCSTR;
     * }
     */
    public static final OfAddress PCSTR = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef char** PZPCSTR;
     * }
     */
    public static final OfAddress PZPCSTR = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef char** PCZPCSTR;
     * }
     */
    public static final OfAddress PCZPCSTR = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef char* PZZSTR;
     * }
     */
    public static final OfAddress PZZSTR = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef char* PCZZSTR;
     * }
     */
    public static final OfAddress PCZZSTR = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef char* PNZCH;
     * }
     */
    public static final OfAddress PNZCH = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef char* PCNZCH;
     * }
     */
    public static final OfAddress PCNZCH = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef char TCHAR;
     * }
     */
    public static final OfByte TCHAR = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef char* PTCHAR;
     * }
     */
    public static final OfAddress PTCHAR = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned char TBYTE;
     * }
     */
    public static final OfByte TBYTE = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned char* PTBYTE;
     * }
     */
    public static final OfAddress PTBYTE = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef char* LPTCH;
     * }
     */
    public static final OfAddress LPTCH = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef char* PTCH;
     * }
     */
    public static final OfAddress PTCH = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef char* LPCTCH;
     * }
     */
    public static final OfAddress LPCTCH = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef char* PCTCH;
     * }
     */
    public static final OfAddress PCTCH = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef char* PTSTR;
     * }
     */
    public static final OfAddress PTSTR = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef char* LPTSTR;
     * }
     */
    public static final OfAddress LPTSTR = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef char* PUTSTR;
     * }
     */
    public static final OfAddress PUTSTR = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef char* LPUTSTR;
     * }
     */
    public static final OfAddress LPUTSTR = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef char* PCTSTR;
     * }
     */
    public static final OfAddress PCTSTR = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef char* LPCTSTR;
     * }
     */
    public static final OfAddress LPCTSTR = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef char* PCUTSTR;
     * }
     */
    public static final OfAddress PCUTSTR = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef char* LPCUTSTR;
     * }
     */
    public static final OfAddress LPCUTSTR = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef char* PZZTSTR;
     * }
     */
    public static final OfAddress PZZTSTR = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef char* PUZZTSTR;
     * }
     */
    public static final OfAddress PUZZTSTR = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef char* PCZZTSTR;
     * }
     */
    public static final OfAddress PCZZTSTR = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef char* PCUZZTSTR;
     * }
     */
    public static final OfAddress PCUZZTSTR = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef char** PZPTSTR;
     * }
     */
    public static final OfAddress PZPTSTR = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef char* PNZTCH;
     * }
     */
    public static final OfAddress PNZTCH = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef char* PUNZTCH;
     * }
     */
    public static final OfAddress PUNZTCH = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef char* PCNZTCH;
     * }
     */
    public static final OfAddress PCNZTCH = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef char* PCUNZTCH;
     * }
     */
    public static final OfAddress PCUNZTCH = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef short* PSHORT;
     * }
     */
    public static final OfAddress PSHORT = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef long* PLONG;
     * }
     */
    public static final OfAddress PLONG = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _PROCESSOR_NUMBER* PPROCESSOR_NUMBER;
     * }
     */
    public static final OfAddress PPROCESSOR_NUMBER = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GROUP_AFFINITY* PGROUP_AFFINITY;
     * }
     */
    public static final OfAddress PGROUP_AFFINITY = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef void* HANDLE;
     * }
     */
    public static final OfAddress HANDLE = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef void** PHANDLE;
     * }
     */
    public static final OfAddress PHANDLE = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned char FCHAR;
     * }
     */
    public static final OfByte FCHAR = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short FSHORT;
     * }
     */
    public static final OfShort FSHORT = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long FLONG;
     * }
     */
    public static final OfInt FLONG = Constants$root.C_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long HRESULT;
     * }
     */
    public static final OfInt HRESULT = Constants$root.C_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef char CCHAR;
     * }
     */
    public static final OfByte CCHAR = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long LCID;
     * }
     */
    public static final OfInt LCID = Constants$root.C_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long* PLCID;
     * }
     */
    public static final OfAddress PLCID = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short LANGID;
     * }
     */
    public static final OfShort LANGID = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * enum .UNSPECIFIED_COMPARTMENT_ID = 0;
     * }
     */
    public static int UNSPECIFIED_COMPARTMENT_ID() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .DEFAULT_COMPARTMENT_ID = 1;
     * }
     */
    public static int DEFAULT_COMPARTMENT_ID() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * typedef enum * PCOMPARTMENT_ID;
     * }
     */
    public static final OfAddress PCOMPARTMENT_ID = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _FLOAT128* PFLOAT128;
     * }
     */
    public static final OfAddress PFLOAT128 = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef long long LONGLONG;
     * }
     */
    public static final OfLong LONGLONG = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long long ULONGLONG;
     * }
     */
    public static final OfLong ULONGLONG = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long long* PLONGLONG;
     * }
     */
    public static final OfAddress PLONGLONG = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long long* PULONGLONG;
     * }
     */
    public static final OfAddress PULONGLONG = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef long long USN;
     * }
     */
    public static final OfLong USN = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef union _LARGE_INTEGER* PLARGE_INTEGER;
     * }
     */
    public static final OfAddress PLARGE_INTEGER = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef union _ULARGE_INTEGER* PULARGE_INTEGER;
     * }
     */
    public static final OfAddress PULARGE_INTEGER = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef long long RTL_REFERENCE_COUNT;
     * }
     */
    public static final OfLong RTL_REFERENCE_COUNT = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long long* PRTL_REFERENCE_COUNT;
     * }
     */
    public static final OfAddress PRTL_REFERENCE_COUNT = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef long RTL_REFERENCE_COUNT32;
     * }
     */
    public static final OfInt RTL_REFERENCE_COUNT32 = Constants$root.C_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long* PRTL_REFERENCE_COUNT32;
     * }
     */
    public static final OfAddress PRTL_REFERENCE_COUNT32 = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _LUID* PLUID;
     * }
     */
    public static final OfAddress PLUID = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long long DWORDLONG;
     * }
     */
    public static final OfLong DWORDLONG = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long long* PDWORDLONG;
     * }
     */
    public static final OfAddress PDWORDLONG = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle _rotl8$MH() {
        return RuntimeHelper.requireNonNull(constants$15._rotl8$MH,"_rotl8");
    }
    /**
     * {@snippet :
     * unsigned char _rotl8(unsigned char Value, unsigned char Shift);
     * }
     */
    public static byte _rotl8(byte Value, byte Shift) {
        var mh$ = _rotl8$MH();
        try {
            return (byte)mh$.invokeExact(Value, Shift);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _rotl16$MH() {
        return RuntimeHelper.requireNonNull(constants$15._rotl16$MH,"_rotl16");
    }
    /**
     * {@snippet :
     * unsigned short _rotl16(unsigned short Value, unsigned char Shift);
     * }
     */
    public static short _rotl16(short Value, byte Shift) {
        var mh$ = _rotl16$MH();
        try {
            return (short)mh$.invokeExact(Value, Shift);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _rotr8$MH() {
        return RuntimeHelper.requireNonNull(constants$15._rotr8$MH,"_rotr8");
    }
    /**
     * {@snippet :
     * unsigned char _rotr8(unsigned char Value, unsigned char Shift);
     * }
     */
    public static byte _rotr8(byte Value, byte Shift) {
        var mh$ = _rotr8$MH();
        try {
            return (byte)mh$.invokeExact(Value, Shift);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _rotr16$MH() {
        return RuntimeHelper.requireNonNull(constants$15._rotr16$MH,"_rotr16");
    }
    /**
     * {@snippet :
     * unsigned short _rotr16(unsigned short Value, unsigned char Shift);
     * }
     */
    public static short _rotr16(short Value, byte Shift) {
        var mh$ = _rotr16$MH();
        try {
            return (short)mh$.invokeExact(Value, Shift);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _rotl$MH() {
        return RuntimeHelper.requireNonNull(constants$15._rotl$MH,"_rotl");
    }
    /**
     * {@snippet :
     * unsigned int _rotl(unsigned int Value, int Shift);
     * }
     */
    public static int _rotl(int Value, int Shift) {
        var mh$ = _rotl$MH();
        try {
            return (int)mh$.invokeExact(Value, Shift);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _rotl64$MH() {
        return RuntimeHelper.requireNonNull(constants$15._rotl64$MH,"_rotl64");
    }
    /**
     * {@snippet :
     * unsigned long long _rotl64(unsigned long long Value, int Shift);
     * }
     */
    public static long _rotl64(long Value, int Shift) {
        var mh$ = _rotl64$MH();
        try {
            return (long)mh$.invokeExact(Value, Shift);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _rotr$MH() {
        return RuntimeHelper.requireNonNull(constants$16._rotr$MH,"_rotr");
    }
    /**
     * {@snippet :
     * unsigned int _rotr(unsigned int Value, int Shift);
     * }
     */
    public static int _rotr(int Value, int Shift) {
        var mh$ = _rotr$MH();
        try {
            return (int)mh$.invokeExact(Value, Shift);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _rotr64$MH() {
        return RuntimeHelper.requireNonNull(constants$16._rotr64$MH,"_rotr64");
    }
    /**
     * {@snippet :
     * unsigned long long _rotr64(unsigned long long Value, int Shift);
     * }
     */
    public static long _rotr64(long Value, int Shift) {
        var mh$ = _rotr64$MH();
        try {
            return (long)mh$.invokeExact(Value, Shift);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned char BOOLEAN;
     * }
     */
    public static final OfByte BOOLEAN = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned char* PBOOLEAN;
     * }
     */
    public static final OfAddress PBOOLEAN = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _LIST_ENTRY* PLIST_ENTRY;
     * }
     */
    public static final OfAddress PLIST_ENTRY = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _LIST_ENTRY* PRLIST_ENTRY;
     * }
     */
    public static final OfAddress PRLIST_ENTRY = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _SINGLE_LIST_ENTRY* PSINGLE_LIST_ENTRY;
     * }
     */
    public static final OfAddress PSINGLE_LIST_ENTRY = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct LIST_ENTRY32* PLIST_ENTRY32;
     * }
     */
    public static final OfAddress PLIST_ENTRY32 = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct LIST_ENTRY64* PLIST_ENTRY64;
     * }
     */
    public static final OfAddress PLIST_ENTRY64 = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GUID* LPGUID;
     * }
     */
    public static final OfAddress LPGUID = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GUID* LPCGUID;
     * }
     */
    public static final OfAddress LPCGUID = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GUID* LPIID;
     * }
     */
    public static final OfAddress LPIID = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GUID* LPCLSID;
     * }
     */
    public static final OfAddress LPCLSID = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GUID* LPFMTID;
     * }
     */
    public static final OfAddress LPFMTID = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle _errno$MH() {
        return RuntimeHelper.requireNonNull(constants$16._errno$MH,"_errno");
    }
    /**
     * {@snippet :
     * int* _errno();
     * }
     */
    public static MemorySegment _errno() {
        var mh$ = _errno$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _set_errno$MH() {
        return RuntimeHelper.requireNonNull(constants$16._set_errno$MH,"_set_errno");
    }
    /**
     * {@snippet :
     * errno_t _set_errno(int _Value);
     * }
     */
    public static int _set_errno(int _Value) {
        var mh$ = _set_errno$MH();
        try {
            return (int)mh$.invokeExact(_Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _get_errno$MH() {
        return RuntimeHelper.requireNonNull(constants$16._get_errno$MH,"_get_errno");
    }
    /**
     * {@snippet :
     * errno_t _get_errno(int* _Value);
     * }
     */
    public static int _get_errno(MemorySegment _Value) {
        var mh$ = _get_errno$MH();
        try {
            return (int)mh$.invokeExact(_Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __doserrno$MH() {
        return RuntimeHelper.requireNonNull(constants$16.__doserrno$MH,"__doserrno");
    }
    /**
     * {@snippet :
     * unsigned long* __doserrno();
     * }
     */
    public static MemorySegment __doserrno() {
        var mh$ = __doserrno$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _set_doserrno$MH() {
        return RuntimeHelper.requireNonNull(constants$17._set_doserrno$MH,"_set_doserrno");
    }
    /**
     * {@snippet :
     * errno_t _set_doserrno(unsigned long _Value);
     * }
     */
    public static int _set_doserrno(int _Value) {
        var mh$ = _set_doserrno$MH();
        try {
            return (int)mh$.invokeExact(_Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _get_doserrno$MH() {
        return RuntimeHelper.requireNonNull(constants$17._get_doserrno$MH,"_get_doserrno");
    }
    /**
     * {@snippet :
     * errno_t _get_doserrno(unsigned long* _Value);
     * }
     */
    public static int _get_doserrno(MemorySegment _Value) {
        var mh$ = _get_doserrno$MH();
        try {
            return (int)mh$.invokeExact(_Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle memchr$MH() {
        return RuntimeHelper.requireNonNull(constants$17.memchr$MH,"memchr");
    }
    /**
     * {@snippet :
     * void* memchr(void* _Buf, int _Val, size_t _MaxCount);
     * }
     */
    public static MemorySegment memchr(MemorySegment _Buf, int _Val, long _MaxCount) {
        var mh$ = memchr$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Buf, _Val, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle memcmp$MH() {
        return RuntimeHelper.requireNonNull(constants$17.memcmp$MH,"memcmp");
    }
    /**
     * {@snippet :
     * int memcmp(void* _Buf1, void* _Buf2, size_t _Size);
     * }
     */
    public static int memcmp(MemorySegment _Buf1, MemorySegment _Buf2, long _Size) {
        var mh$ = memcmp$MH();
        try {
            return (int)mh$.invokeExact(_Buf1, _Buf2, _Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle memcpy$MH() {
        return RuntimeHelper.requireNonNull(constants$17.memcpy$MH,"memcpy");
    }
    /**
     * {@snippet :
     * void* memcpy(void* _Dst, void* _Src, size_t _Size);
     * }
     */
    public static MemorySegment memcpy(MemorySegment _Dst, MemorySegment _Src, long _Size) {
        var mh$ = memcpy$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Dst, _Src, _Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle memmove$MH() {
        return RuntimeHelper.requireNonNull(constants$17.memmove$MH,"memmove");
    }
    /**
     * {@snippet :
     * void* memmove(void* _Dst, void* _Src, size_t _Size);
     * }
     */
    public static MemorySegment memmove(MemorySegment _Dst, MemorySegment _Src, long _Size) {
        var mh$ = memmove$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Dst, _Src, _Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle memset$MH() {
        return RuntimeHelper.requireNonNull(constants$18.memset$MH,"memset");
    }
    /**
     * {@snippet :
     * void* memset(void* _Dst, int _Val, size_t _Size);
     * }
     */
    public static MemorySegment memset(MemorySegment _Dst, int _Val, long _Size) {
        var mh$ = memset$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Dst, _Val, _Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strchr$MH() {
        return RuntimeHelper.requireNonNull(constants$18.strchr$MH,"strchr");
    }
    /**
     * {@snippet :
     * char* strchr(char* _Str, int _Val);
     * }
     */
    public static MemorySegment strchr(MemorySegment _Str, int _Val) {
        var mh$ = strchr$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Str, _Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strrchr$MH() {
        return RuntimeHelper.requireNonNull(constants$18.strrchr$MH,"strrchr");
    }
    /**
     * {@snippet :
     * char* strrchr(char* _Str, int _Ch);
     * }
     */
    public static MemorySegment strrchr(MemorySegment _Str, int _Ch) {
        var mh$ = strrchr$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Str, _Ch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strstr$MH() {
        return RuntimeHelper.requireNonNull(constants$18.strstr$MH,"strstr");
    }
    /**
     * {@snippet :
     * char* strstr(char* _Str, char* _SubStr);
     * }
     */
    public static MemorySegment strstr(MemorySegment _Str, MemorySegment _SubStr) {
        var mh$ = strstr$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Str, _SubStr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcschr$MH() {
        return RuntimeHelper.requireNonNull(constants$18.wcschr$MH,"wcschr");
    }
    /**
     * {@snippet :
     * unsigned short* wcschr(const wchar_t* _Str, wchar_t _Ch);
     * }
     */
    public static MemorySegment wcschr(MemorySegment _Str, short _Ch) {
        var mh$ = wcschr$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Str, _Ch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcsrchr$MH() {
        return RuntimeHelper.requireNonNull(constants$18.wcsrchr$MH,"wcsrchr");
    }
    /**
     * {@snippet :
     * wchar_t* wcsrchr(const wchar_t* _Str, wchar_t _Ch);
     * }
     */
    public static MemorySegment wcsrchr(MemorySegment _Str, short _Ch) {
        var mh$ = wcsrchr$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Str, _Ch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcsstr$MH() {
        return RuntimeHelper.requireNonNull(constants$19.wcsstr$MH,"wcsstr");
    }
    /**
     * {@snippet :
     * wchar_t* wcsstr(const wchar_t* _Str, const wchar_t* _SubStr);
     * }
     */
    public static MemorySegment wcsstr(MemorySegment _Str, MemorySegment _SubStr) {
        var mh$ = wcsstr$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Str, _SubStr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _memicmp$MH() {
        return RuntimeHelper.requireNonNull(constants$19._memicmp$MH,"_memicmp");
    }
    /**
     * {@snippet :
     * int _memicmp(void* _Buf1, void* _Buf2, size_t _Size);
     * }
     */
    public static int _memicmp(MemorySegment _Buf1, MemorySegment _Buf2, long _Size) {
        var mh$ = _memicmp$MH();
        try {
            return (int)mh$.invokeExact(_Buf1, _Buf2, _Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _memicmp_l$MH() {
        return RuntimeHelper.requireNonNull(constants$19._memicmp_l$MH,"_memicmp_l");
    }
    /**
     * {@snippet :
     * int _memicmp_l(void* _Buf1, void* _Buf2, size_t _Size, _locale_t _Locale);
     * }
     */
    public static int _memicmp_l(MemorySegment _Buf1, MemorySegment _Buf2, long _Size, MemorySegment _Locale) {
        var mh$ = _memicmp_l$MH();
        try {
            return (int)mh$.invokeExact(_Buf1, _Buf2, _Size, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle memccpy$MH() {
        return RuntimeHelper.requireNonNull(constants$19.memccpy$MH,"memccpy");
    }
    /**
     * {@snippet :
     * void* memccpy(void* _Dst, void* _Src, int _Val, size_t _Size);
     * }
     */
    public static MemorySegment memccpy(MemorySegment _Dst, MemorySegment _Src, int _Val, long _Size) {
        var mh$ = memccpy$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Dst, _Src, _Val, _Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle memicmp$MH() {
        return RuntimeHelper.requireNonNull(constants$19.memicmp$MH,"memicmp");
    }
    /**
     * {@snippet :
     * int memicmp(void* _Buf1, void* _Buf2, size_t _Size);
     * }
     */
    public static int memicmp(MemorySegment _Buf1, MemorySegment _Buf2, long _Size) {
        var mh$ = memicmp$MH();
        try {
            return (int)mh$.invokeExact(_Buf1, _Buf2, _Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcscat_s$MH() {
        return RuntimeHelper.requireNonNull(constants$19.wcscat_s$MH,"wcscat_s");
    }
    /**
     * {@snippet :
     * errno_t wcscat_s(wchar_t* _Destination, rsize_t _SizeInWords, const wchar_t* _Source);
     * }
     */
    public static int wcscat_s(MemorySegment _Destination, long _SizeInWords, MemorySegment _Source) {
        var mh$ = wcscat_s$MH();
        try {
            return (int)mh$.invokeExact(_Destination, _SizeInWords, _Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcscpy_s$MH() {
        return RuntimeHelper.requireNonNull(constants$20.wcscpy_s$MH,"wcscpy_s");
    }
    /**
     * {@snippet :
     * errno_t wcscpy_s(wchar_t* _Destination, rsize_t _SizeInWords, const wchar_t* _Source);
     * }
     */
    public static int wcscpy_s(MemorySegment _Destination, long _SizeInWords, MemorySegment _Source) {
        var mh$ = wcscpy_s$MH();
        try {
            return (int)mh$.invokeExact(_Destination, _SizeInWords, _Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcsncat_s$MH() {
        return RuntimeHelper.requireNonNull(constants$20.wcsncat_s$MH,"wcsncat_s");
    }
    /**
     * {@snippet :
     * errno_t wcsncat_s(wchar_t* _Destination, rsize_t _SizeInWords, const wchar_t* _Source, rsize_t _MaxCount);
     * }
     */
    public static int wcsncat_s(MemorySegment _Destination, long _SizeInWords, MemorySegment _Source, long _MaxCount) {
        var mh$ = wcsncat_s$MH();
        try {
            return (int)mh$.invokeExact(_Destination, _SizeInWords, _Source, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcsncpy_s$MH() {
        return RuntimeHelper.requireNonNull(constants$20.wcsncpy_s$MH,"wcsncpy_s");
    }
    /**
     * {@snippet :
     * errno_t wcsncpy_s(wchar_t* _Destination, rsize_t _SizeInWords, const wchar_t* _Source, rsize_t _MaxCount);
     * }
     */
    public static int wcsncpy_s(MemorySegment _Destination, long _SizeInWords, MemorySegment _Source, long _MaxCount) {
        var mh$ = wcsncpy_s$MH();
        try {
            return (int)mh$.invokeExact(_Destination, _SizeInWords, _Source, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstok_s$MH() {
        return RuntimeHelper.requireNonNull(constants$20.wcstok_s$MH,"wcstok_s");
    }
    /**
     * {@snippet :
     * wchar_t* wcstok_s(wchar_t* _String, const wchar_t* _Delimiter, wchar_t** _Context);
     * }
     */
    public static MemorySegment wcstok_s(MemorySegment _String, MemorySegment _Delimiter, MemorySegment _Context) {
        var mh$ = wcstok_s$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_String, _Delimiter, _Context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcsdup$MH() {
        return RuntimeHelper.requireNonNull(constants$20._wcsdup$MH,"_wcsdup");
    }
    /**
     * {@snippet :
     * wchar_t* _wcsdup(const wchar_t* _String);
     * }
     */
    public static MemorySegment _wcsdup(MemorySegment _String) {
        var mh$ = _wcsdup$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcscat$MH() {
        return RuntimeHelper.requireNonNull(constants$20.wcscat$MH,"wcscat");
    }
    /**
     * {@snippet :
     * wchar_t* wcscat(wchar_t* _Destination, const wchar_t* _Source);
     * }
     */
    public static MemorySegment wcscat(MemorySegment _Destination, MemorySegment _Source) {
        var mh$ = wcscat$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Destination, _Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcscmp$MH() {
        return RuntimeHelper.requireNonNull(constants$21.wcscmp$MH,"wcscmp");
    }
    /**
     * {@snippet :
     * int wcscmp(const wchar_t* _String1, const wchar_t* _String2);
     * }
     */
    public static int wcscmp(MemorySegment _String1, MemorySegment _String2) {
        var mh$ = wcscmp$MH();
        try {
            return (int)mh$.invokeExact(_String1, _String2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcscpy$MH() {
        return RuntimeHelper.requireNonNull(constants$21.wcscpy$MH,"wcscpy");
    }
    /**
     * {@snippet :
     * wchar_t* wcscpy(wchar_t* _Destination, const wchar_t* _Source);
     * }
     */
    public static MemorySegment wcscpy(MemorySegment _Destination, MemorySegment _Source) {
        var mh$ = wcscpy$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Destination, _Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcscspn$MH() {
        return RuntimeHelper.requireNonNull(constants$21.wcscspn$MH,"wcscspn");
    }
    /**
     * {@snippet :
     * size_t wcscspn(const wchar_t* _String, const wchar_t* _Control);
     * }
     */
    public static long wcscspn(MemorySegment _String, MemorySegment _Control) {
        var mh$ = wcscspn$MH();
        try {
            return (long)mh$.invokeExact(_String, _Control);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcslen$MH() {
        return RuntimeHelper.requireNonNull(constants$21.wcslen$MH,"wcslen");
    }
    /**
     * {@snippet :
     * unsigned long long wcslen(const wchar_t* _String);
     * }
     */
    public static long wcslen(MemorySegment _String) {
        var mh$ = wcslen$MH();
        try {
            return (long)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcsnlen$MH() {
        return RuntimeHelper.requireNonNull(constants$21.wcsnlen$MH,"wcsnlen");
    }
    /**
     * {@snippet :
     * size_t wcsnlen(const wchar_t* _Source, size_t _MaxCount);
     * }
     */
    public static long wcsnlen(MemorySegment _Source, long _MaxCount) {
        var mh$ = wcsnlen$MH();
        try {
            return (long)mh$.invokeExact(_Source, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcsncat$MH() {
        return RuntimeHelper.requireNonNull(constants$21.wcsncat$MH,"wcsncat");
    }
    /**
     * {@snippet :
     * wchar_t* wcsncat(wchar_t* _Destination, const wchar_t* _Source, size_t _Count);
     * }
     */
    public static MemorySegment wcsncat(MemorySegment _Destination, MemorySegment _Source, long _Count) {
        var mh$ = wcsncat$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Destination, _Source, _Count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcsncmp$MH() {
        return RuntimeHelper.requireNonNull(constants$22.wcsncmp$MH,"wcsncmp");
    }
    /**
     * {@snippet :
     * int wcsncmp(const wchar_t* _String1, const wchar_t* _String2, size_t _MaxCount);
     * }
     */
    public static int wcsncmp(MemorySegment _String1, MemorySegment _String2, long _MaxCount) {
        var mh$ = wcsncmp$MH();
        try {
            return (int)mh$.invokeExact(_String1, _String2, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcsncpy$MH() {
        return RuntimeHelper.requireNonNull(constants$22.wcsncpy$MH,"wcsncpy");
    }
    /**
     * {@snippet :
     * wchar_t* wcsncpy(wchar_t* _Destination, const wchar_t* _Source, size_t _Count);
     * }
     */
    public static MemorySegment wcsncpy(MemorySegment _Destination, MemorySegment _Source, long _Count) {
        var mh$ = wcsncpy$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Destination, _Source, _Count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcspbrk$MH() {
        return RuntimeHelper.requireNonNull(constants$22.wcspbrk$MH,"wcspbrk");
    }
    /**
     * {@snippet :
     * wchar_t* wcspbrk(const wchar_t* _String, const wchar_t* _Control);
     * }
     */
    public static MemorySegment wcspbrk(MemorySegment _String, MemorySegment _Control) {
        var mh$ = wcspbrk$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_String, _Control);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcsspn$MH() {
        return RuntimeHelper.requireNonNull(constants$22.wcsspn$MH,"wcsspn");
    }
    /**
     * {@snippet :
     * size_t wcsspn(const wchar_t* _String, const wchar_t* _Control);
     * }
     */
    public static long wcsspn(MemorySegment _String, MemorySegment _Control) {
        var mh$ = wcsspn$MH();
        try {
            return (long)mh$.invokeExact(_String, _Control);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstok$MH() {
        return RuntimeHelper.requireNonNull(constants$22.wcstok$MH,"wcstok");
    }
    /**
     * {@snippet :
     * wchar_t* wcstok(wchar_t* _String, const wchar_t* _Delimiter, wchar_t** _Context);
     * }
     */
    public static MemorySegment wcstok(MemorySegment _String, MemorySegment _Delimiter, MemorySegment _Context) {
        var mh$ = wcstok$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_String, _Delimiter, _Context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcserror$MH() {
        return RuntimeHelper.requireNonNull(constants$22._wcserror$MH,"_wcserror");
    }
    /**
     * {@snippet :
     * wchar_t* _wcserror(int _ErrorNumber);
     * }
     */
    public static MemorySegment _wcserror(int _ErrorNumber) {
        var mh$ = _wcserror$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_ErrorNumber);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcserror_s$MH() {
        return RuntimeHelper.requireNonNull(constants$23._wcserror_s$MH,"_wcserror_s");
    }
    /**
     * {@snippet :
     * errno_t _wcserror_s(wchar_t* _Buffer, size_t _SizeInWords, int _ErrorNumber);
     * }
     */
    public static int _wcserror_s(MemorySegment _Buffer, long _SizeInWords, int _ErrorNumber) {
        var mh$ = _wcserror_s$MH();
        try {
            return (int)mh$.invokeExact(_Buffer, _SizeInWords, _ErrorNumber);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __wcserror$MH() {
        return RuntimeHelper.requireNonNull(constants$23.__wcserror$MH,"__wcserror");
    }
    /**
     * {@snippet :
     * wchar_t* __wcserror(const wchar_t* _String);
     * }
     */
    public static MemorySegment __wcserror(MemorySegment _String) {
        var mh$ = __wcserror$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __wcserror_s$MH() {
        return RuntimeHelper.requireNonNull(constants$23.__wcserror_s$MH,"__wcserror_s");
    }
    /**
     * {@snippet :
     * errno_t __wcserror_s(wchar_t* _Buffer, size_t _SizeInWords, const wchar_t* _ErrorMessage);
     * }
     */
    public static int __wcserror_s(MemorySegment _Buffer, long _SizeInWords, MemorySegment _ErrorMessage) {
        var mh$ = __wcserror_s$MH();
        try {
            return (int)mh$.invokeExact(_Buffer, _SizeInWords, _ErrorMessage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcsicmp$MH() {
        return RuntimeHelper.requireNonNull(constants$23._wcsicmp$MH,"_wcsicmp");
    }
    /**
     * {@snippet :
     * int _wcsicmp(const wchar_t* _String1, const wchar_t* _String2);
     * }
     */
    public static int _wcsicmp(MemorySegment _String1, MemorySegment _String2) {
        var mh$ = _wcsicmp$MH();
        try {
            return (int)mh$.invokeExact(_String1, _String2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcsicmp_l$MH() {
        return RuntimeHelper.requireNonNull(constants$23._wcsicmp_l$MH,"_wcsicmp_l");
    }
    /**
     * {@snippet :
     * int _wcsicmp_l(const wchar_t* _String1, const wchar_t* _String2, _locale_t _Locale);
     * }
     */
    public static int _wcsicmp_l(MemorySegment _String1, MemorySegment _String2, MemorySegment _Locale) {
        var mh$ = _wcsicmp_l$MH();
        try {
            return (int)mh$.invokeExact(_String1, _String2, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcsnicmp$MH() {
        return RuntimeHelper.requireNonNull(constants$23._wcsnicmp$MH,"_wcsnicmp");
    }
    /**
     * {@snippet :
     * int _wcsnicmp(const wchar_t* _String1, const wchar_t* _String2, size_t _MaxCount);
     * }
     */
    public static int _wcsnicmp(MemorySegment _String1, MemorySegment _String2, long _MaxCount) {
        var mh$ = _wcsnicmp$MH();
        try {
            return (int)mh$.invokeExact(_String1, _String2, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcsnicmp_l$MH() {
        return RuntimeHelper.requireNonNull(constants$24._wcsnicmp_l$MH,"_wcsnicmp_l");
    }
    /**
     * {@snippet :
     * int _wcsnicmp_l(const wchar_t* _String1, const wchar_t* _String2, size_t _MaxCount, _locale_t _Locale);
     * }
     */
    public static int _wcsnicmp_l(MemorySegment _String1, MemorySegment _String2, long _MaxCount, MemorySegment _Locale) {
        var mh$ = _wcsnicmp_l$MH();
        try {
            return (int)mh$.invokeExact(_String1, _String2, _MaxCount, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcsnset_s$MH() {
        return RuntimeHelper.requireNonNull(constants$24._wcsnset_s$MH,"_wcsnset_s");
    }
    /**
     * {@snippet :
     * errno_t _wcsnset_s(wchar_t* _Destination, size_t _SizeInWords, wchar_t _Value, size_t _MaxCount);
     * }
     */
    public static int _wcsnset_s(MemorySegment _Destination, long _SizeInWords, short _Value, long _MaxCount) {
        var mh$ = _wcsnset_s$MH();
        try {
            return (int)mh$.invokeExact(_Destination, _SizeInWords, _Value, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcsnset$MH() {
        return RuntimeHelper.requireNonNull(constants$24._wcsnset$MH,"_wcsnset");
    }
    /**
     * {@snippet :
     * wchar_t* _wcsnset(wchar_t* _String, wchar_t _Value, size_t _MaxCount);
     * }
     */
    public static MemorySegment _wcsnset(MemorySegment _String, short _Value, long _MaxCount) {
        var mh$ = _wcsnset$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_String, _Value, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcsrev$MH() {
        return RuntimeHelper.requireNonNull(constants$24._wcsrev$MH,"_wcsrev");
    }
    /**
     * {@snippet :
     * wchar_t* _wcsrev(wchar_t* _String);
     * }
     */
    public static MemorySegment _wcsrev(MemorySegment _String) {
        var mh$ = _wcsrev$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcsset_s$MH() {
        return RuntimeHelper.requireNonNull(constants$24._wcsset_s$MH,"_wcsset_s");
    }
    /**
     * {@snippet :
     * errno_t _wcsset_s(wchar_t* _Destination, size_t _SizeInWords, wchar_t _Value);
     * }
     */
    public static int _wcsset_s(MemorySegment _Destination, long _SizeInWords, short _Value) {
        var mh$ = _wcsset_s$MH();
        try {
            return (int)mh$.invokeExact(_Destination, _SizeInWords, _Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcsset$MH() {
        return RuntimeHelper.requireNonNull(constants$24._wcsset$MH,"_wcsset");
    }
    /**
     * {@snippet :
     * wchar_t* _wcsset(wchar_t* _String, wchar_t _Value);
     * }
     */
    public static MemorySegment _wcsset(MemorySegment _String, short _Value) {
        var mh$ = _wcsset$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_String, _Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcslwr_s$MH() {
        return RuntimeHelper.requireNonNull(constants$25._wcslwr_s$MH,"_wcslwr_s");
    }
    /**
     * {@snippet :
     * errno_t _wcslwr_s(wchar_t* _String, size_t _SizeInWords);
     * }
     */
    public static int _wcslwr_s(MemorySegment _String, long _SizeInWords) {
        var mh$ = _wcslwr_s$MH();
        try {
            return (int)mh$.invokeExact(_String, _SizeInWords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcslwr$MH() {
        return RuntimeHelper.requireNonNull(constants$25._wcslwr$MH,"_wcslwr");
    }
    /**
     * {@snippet :
     * wchar_t* _wcslwr(wchar_t* _String);
     * }
     */
    public static MemorySegment _wcslwr(MemorySegment _String) {
        var mh$ = _wcslwr$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcslwr_s_l$MH() {
        return RuntimeHelper.requireNonNull(constants$25._wcslwr_s_l$MH,"_wcslwr_s_l");
    }
    /**
     * {@snippet :
     * errno_t _wcslwr_s_l(wchar_t* _String, size_t _SizeInWords, _locale_t _Locale);
     * }
     */
    public static int _wcslwr_s_l(MemorySegment _String, long _SizeInWords, MemorySegment _Locale) {
        var mh$ = _wcslwr_s_l$MH();
        try {
            return (int)mh$.invokeExact(_String, _SizeInWords, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcslwr_l$MH() {
        return RuntimeHelper.requireNonNull(constants$25._wcslwr_l$MH,"_wcslwr_l");
    }
    /**
     * {@snippet :
     * wchar_t* _wcslwr_l(wchar_t* _String, _locale_t _Locale);
     * }
     */
    public static MemorySegment _wcslwr_l(MemorySegment _String, MemorySegment _Locale) {
        var mh$ = _wcslwr_l$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcsupr_s$MH() {
        return RuntimeHelper.requireNonNull(constants$25._wcsupr_s$MH,"_wcsupr_s");
    }
    /**
     * {@snippet :
     * errno_t _wcsupr_s(wchar_t* _String, size_t _Size);
     * }
     */
    public static int _wcsupr_s(MemorySegment _String, long _Size) {
        var mh$ = _wcsupr_s$MH();
        try {
            return (int)mh$.invokeExact(_String, _Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcsupr$MH() {
        return RuntimeHelper.requireNonNull(constants$25._wcsupr$MH,"_wcsupr");
    }
    /**
     * {@snippet :
     * wchar_t* _wcsupr(wchar_t* _String);
     * }
     */
    public static MemorySegment _wcsupr(MemorySegment _String) {
        var mh$ = _wcsupr$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcsupr_s_l$MH() {
        return RuntimeHelper.requireNonNull(constants$26._wcsupr_s_l$MH,"_wcsupr_s_l");
    }
    /**
     * {@snippet :
     * errno_t _wcsupr_s_l(wchar_t* _String, size_t _Size, _locale_t _Locale);
     * }
     */
    public static int _wcsupr_s_l(MemorySegment _String, long _Size, MemorySegment _Locale) {
        var mh$ = _wcsupr_s_l$MH();
        try {
            return (int)mh$.invokeExact(_String, _Size, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcsupr_l$MH() {
        return RuntimeHelper.requireNonNull(constants$26._wcsupr_l$MH,"_wcsupr_l");
    }
    /**
     * {@snippet :
     * wchar_t* _wcsupr_l(wchar_t* _String, _locale_t _Locale);
     * }
     */
    public static MemorySegment _wcsupr_l(MemorySegment _String, MemorySegment _Locale) {
        var mh$ = _wcsupr_l$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcsxfrm$MH() {
        return RuntimeHelper.requireNonNull(constants$26.wcsxfrm$MH,"wcsxfrm");
    }
    /**
     * {@snippet :
     * size_t wcsxfrm(wchar_t* _Destination, const wchar_t* _Source, size_t _MaxCount);
     * }
     */
    public static long wcsxfrm(MemorySegment _Destination, MemorySegment _Source, long _MaxCount) {
        var mh$ = wcsxfrm$MH();
        try {
            return (long)mh$.invokeExact(_Destination, _Source, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcsxfrm_l$MH() {
        return RuntimeHelper.requireNonNull(constants$26._wcsxfrm_l$MH,"_wcsxfrm_l");
    }
    /**
     * {@snippet :
     * size_t _wcsxfrm_l(wchar_t* _Destination, const wchar_t* _Source, size_t _MaxCount, _locale_t _Locale);
     * }
     */
    public static long _wcsxfrm_l(MemorySegment _Destination, MemorySegment _Source, long _MaxCount, MemorySegment _Locale) {
        var mh$ = _wcsxfrm_l$MH();
        try {
            return (long)mh$.invokeExact(_Destination, _Source, _MaxCount, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcscoll$MH() {
        return RuntimeHelper.requireNonNull(constants$26.wcscoll$MH,"wcscoll");
    }
    /**
     * {@snippet :
     * int wcscoll(const wchar_t* _String1, const wchar_t* _String2);
     * }
     */
    public static int wcscoll(MemorySegment _String1, MemorySegment _String2) {
        var mh$ = wcscoll$MH();
        try {
            return (int)mh$.invokeExact(_String1, _String2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcscoll_l$MH() {
        return RuntimeHelper.requireNonNull(constants$26._wcscoll_l$MH,"_wcscoll_l");
    }
    /**
     * {@snippet :
     * int _wcscoll_l(const wchar_t* _String1, const wchar_t* _String2, _locale_t _Locale);
     * }
     */
    public static int _wcscoll_l(MemorySegment _String1, MemorySegment _String2, MemorySegment _Locale) {
        var mh$ = _wcscoll_l$MH();
        try {
            return (int)mh$.invokeExact(_String1, _String2, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcsicoll$MH() {
        return RuntimeHelper.requireNonNull(constants$27._wcsicoll$MH,"_wcsicoll");
    }
    /**
     * {@snippet :
     * int _wcsicoll(const wchar_t* _String1, const wchar_t* _String2);
     * }
     */
    public static int _wcsicoll(MemorySegment _String1, MemorySegment _String2) {
        var mh$ = _wcsicoll$MH();
        try {
            return (int)mh$.invokeExact(_String1, _String2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcsicoll_l$MH() {
        return RuntimeHelper.requireNonNull(constants$27._wcsicoll_l$MH,"_wcsicoll_l");
    }
    /**
     * {@snippet :
     * int _wcsicoll_l(const wchar_t* _String1, const wchar_t* _String2, _locale_t _Locale);
     * }
     */
    public static int _wcsicoll_l(MemorySegment _String1, MemorySegment _String2, MemorySegment _Locale) {
        var mh$ = _wcsicoll_l$MH();
        try {
            return (int)mh$.invokeExact(_String1, _String2, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcsncoll$MH() {
        return RuntimeHelper.requireNonNull(constants$27._wcsncoll$MH,"_wcsncoll");
    }
    /**
     * {@snippet :
     * int _wcsncoll(const wchar_t* _String1, const wchar_t* _String2, size_t _MaxCount);
     * }
     */
    public static int _wcsncoll(MemorySegment _String1, MemorySegment _String2, long _MaxCount) {
        var mh$ = _wcsncoll$MH();
        try {
            return (int)mh$.invokeExact(_String1, _String2, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcsncoll_l$MH() {
        return RuntimeHelper.requireNonNull(constants$27._wcsncoll_l$MH,"_wcsncoll_l");
    }
    /**
     * {@snippet :
     * int _wcsncoll_l(const wchar_t* _String1, const wchar_t* _String2, size_t _MaxCount, _locale_t _Locale);
     * }
     */
    public static int _wcsncoll_l(MemorySegment _String1, MemorySegment _String2, long _MaxCount, MemorySegment _Locale) {
        var mh$ = _wcsncoll_l$MH();
        try {
            return (int)mh$.invokeExact(_String1, _String2, _MaxCount, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcsnicoll$MH() {
        return RuntimeHelper.requireNonNull(constants$27._wcsnicoll$MH,"_wcsnicoll");
    }
    /**
     * {@snippet :
     * int _wcsnicoll(const wchar_t* _String1, const wchar_t* _String2, size_t _MaxCount);
     * }
     */
    public static int _wcsnicoll(MemorySegment _String1, MemorySegment _String2, long _MaxCount) {
        var mh$ = _wcsnicoll$MH();
        try {
            return (int)mh$.invokeExact(_String1, _String2, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcsnicoll_l$MH() {
        return RuntimeHelper.requireNonNull(constants$27._wcsnicoll_l$MH,"_wcsnicoll_l");
    }
    /**
     * {@snippet :
     * int _wcsnicoll_l(const wchar_t* _String1, const wchar_t* _String2, size_t _MaxCount, _locale_t _Locale);
     * }
     */
    public static int _wcsnicoll_l(MemorySegment _String1, MemorySegment _String2, long _MaxCount, MemorySegment _Locale) {
        var mh$ = _wcsnicoll_l$MH();
        try {
            return (int)mh$.invokeExact(_String1, _String2, _MaxCount, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcsdup$MH() {
        return RuntimeHelper.requireNonNull(constants$28.wcsdup$MH,"wcsdup");
    }
    /**
     * {@snippet :
     * wchar_t* wcsdup(const wchar_t* _String);
     * }
     */
    public static MemorySegment wcsdup(MemorySegment _String) {
        var mh$ = wcsdup$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcsicmp$MH() {
        return RuntimeHelper.requireNonNull(constants$28.wcsicmp$MH,"wcsicmp");
    }
    /**
     * {@snippet :
     * int wcsicmp(const wchar_t* _String1, const wchar_t* _String2);
     * }
     */
    public static int wcsicmp(MemorySegment _String1, MemorySegment _String2) {
        var mh$ = wcsicmp$MH();
        try {
            return (int)mh$.invokeExact(_String1, _String2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcsnicmp$MH() {
        return RuntimeHelper.requireNonNull(constants$28.wcsnicmp$MH,"wcsnicmp");
    }
    /**
     * {@snippet :
     * int wcsnicmp(const wchar_t* _String1, const wchar_t* _String2, size_t _MaxCount);
     * }
     */
    public static int wcsnicmp(MemorySegment _String1, MemorySegment _String2, long _MaxCount) {
        var mh$ = wcsnicmp$MH();
        try {
            return (int)mh$.invokeExact(_String1, _String2, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcsnset$MH() {
        return RuntimeHelper.requireNonNull(constants$28.wcsnset$MH,"wcsnset");
    }
    /**
     * {@snippet :
     * wchar_t* wcsnset(wchar_t* _String, wchar_t _Value, size_t _MaxCount);
     * }
     */
    public static MemorySegment wcsnset(MemorySegment _String, short _Value, long _MaxCount) {
        var mh$ = wcsnset$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_String, _Value, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcsrev$MH() {
        return RuntimeHelper.requireNonNull(constants$28.wcsrev$MH,"wcsrev");
    }
    /**
     * {@snippet :
     * wchar_t* wcsrev(wchar_t* _String);
     * }
     */
    public static MemorySegment wcsrev(MemorySegment _String) {
        var mh$ = wcsrev$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcsset$MH() {
        return RuntimeHelper.requireNonNull(constants$28.wcsset$MH,"wcsset");
    }
    /**
     * {@snippet :
     * wchar_t* wcsset(wchar_t* _String, wchar_t _Value);
     * }
     */
    public static MemorySegment wcsset(MemorySegment _String, short _Value) {
        var mh$ = wcsset$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_String, _Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcslwr$MH() {
        return RuntimeHelper.requireNonNull(constants$29.wcslwr$MH,"wcslwr");
    }
    /**
     * {@snippet :
     * wchar_t* wcslwr(wchar_t* _String);
     * }
     */
    public static MemorySegment wcslwr(MemorySegment _String) {
        var mh$ = wcslwr$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcsupr$MH() {
        return RuntimeHelper.requireNonNull(constants$29.wcsupr$MH,"wcsupr");
    }
    /**
     * {@snippet :
     * wchar_t* wcsupr(wchar_t* _String);
     * }
     */
    public static MemorySegment wcsupr(MemorySegment _String) {
        var mh$ = wcsupr$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcsicoll$MH() {
        return RuntimeHelper.requireNonNull(constants$29.wcsicoll$MH,"wcsicoll");
    }
    /**
     * {@snippet :
     * int wcsicoll(const wchar_t* _String1, const wchar_t* _String2);
     * }
     */
    public static int wcsicoll(MemorySegment _String1, MemorySegment _String2) {
        var mh$ = wcsicoll$MH();
        try {
            return (int)mh$.invokeExact(_String1, _String2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcpy_s$MH() {
        return RuntimeHelper.requireNonNull(constants$29.strcpy_s$MH,"strcpy_s");
    }
    /**
     * {@snippet :
     * errno_t strcpy_s(char* _Destination, rsize_t _SizeInBytes, char* _Source);
     * }
     */
    public static int strcpy_s(MemorySegment _Destination, long _SizeInBytes, MemorySegment _Source) {
        var mh$ = strcpy_s$MH();
        try {
            return (int)mh$.invokeExact(_Destination, _SizeInBytes, _Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcat_s$MH() {
        return RuntimeHelper.requireNonNull(constants$29.strcat_s$MH,"strcat_s");
    }
    /**
     * {@snippet :
     * errno_t strcat_s(char* _Destination, rsize_t _SizeInBytes, char* _Source);
     * }
     */
    public static int strcat_s(MemorySegment _Destination, long _SizeInBytes, MemorySegment _Source) {
        var mh$ = strcat_s$MH();
        try {
            return (int)mh$.invokeExact(_Destination, _SizeInBytes, _Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strerror_s$MH() {
        return RuntimeHelper.requireNonNull(constants$29.strerror_s$MH,"strerror_s");
    }
    /**
     * {@snippet :
     * errno_t strerror_s(char* _Buffer, size_t _SizeInBytes, int _ErrorNumber);
     * }
     */
    public static int strerror_s(MemorySegment _Buffer, long _SizeInBytes, int _ErrorNumber) {
        var mh$ = strerror_s$MH();
        try {
            return (int)mh$.invokeExact(_Buffer, _SizeInBytes, _ErrorNumber);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strncat_s$MH() {
        return RuntimeHelper.requireNonNull(constants$30.strncat_s$MH,"strncat_s");
    }
    /**
     * {@snippet :
     * errno_t strncat_s(char* _Destination, rsize_t _SizeInBytes, char* _Source, rsize_t _MaxCount);
     * }
     */
    public static int strncat_s(MemorySegment _Destination, long _SizeInBytes, MemorySegment _Source, long _MaxCount) {
        var mh$ = strncat_s$MH();
        try {
            return (int)mh$.invokeExact(_Destination, _SizeInBytes, _Source, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strncpy_s$MH() {
        return RuntimeHelper.requireNonNull(constants$30.strncpy_s$MH,"strncpy_s");
    }
    /**
     * {@snippet :
     * errno_t strncpy_s(char* _Destination, rsize_t _SizeInBytes, char* _Source, rsize_t _MaxCount);
     * }
     */
    public static int strncpy_s(MemorySegment _Destination, long _SizeInBytes, MemorySegment _Source, long _MaxCount) {
        var mh$ = strncpy_s$MH();
        try {
            return (int)mh$.invokeExact(_Destination, _SizeInBytes, _Source, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtok_s$MH() {
        return RuntimeHelper.requireNonNull(constants$30.strtok_s$MH,"strtok_s");
    }
    /**
     * {@snippet :
     * char* strtok_s(char* _String, char* _Delimiter, char** _Context);
     * }
     */
    public static MemorySegment strtok_s(MemorySegment _String, MemorySegment _Delimiter, MemorySegment _Context) {
        var mh$ = strtok_s$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_String, _Delimiter, _Context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _memccpy$MH() {
        return RuntimeHelper.requireNonNull(constants$30._memccpy$MH,"_memccpy");
    }
    /**
     * {@snippet :
     * void* _memccpy(void* _Dst, void* _Src, int _Val, size_t _MaxCount);
     * }
     */
    public static MemorySegment _memccpy(MemorySegment _Dst, MemorySegment _Src, int _Val, long _MaxCount) {
        var mh$ = _memccpy$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Dst, _Src, _Val, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcat$MH() {
        return RuntimeHelper.requireNonNull(constants$30.strcat$MH,"strcat");
    }
    /**
     * {@snippet :
     * char* strcat(char* _Destination, char* _Source);
     * }
     */
    public static MemorySegment strcat(MemorySegment _Destination, MemorySegment _Source) {
        var mh$ = strcat$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Destination, _Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcmp$MH() {
        return RuntimeHelper.requireNonNull(constants$30.strcmp$MH,"strcmp");
    }
    /**
     * {@snippet :
     * int strcmp(char* _Str1, char* _Str2);
     * }
     */
    public static int strcmp(MemorySegment _Str1, MemorySegment _Str2) {
        var mh$ = strcmp$MH();
        try {
            return (int)mh$.invokeExact(_Str1, _Str2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strcmpi$MH() {
        return RuntimeHelper.requireNonNull(constants$31._strcmpi$MH,"_strcmpi");
    }
    /**
     * {@snippet :
     * int _strcmpi(char* _String1, char* _String2);
     * }
     */
    public static int _strcmpi(MemorySegment _String1, MemorySegment _String2) {
        var mh$ = _strcmpi$MH();
        try {
            return (int)mh$.invokeExact(_String1, _String2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcoll$MH() {
        return RuntimeHelper.requireNonNull(constants$31.strcoll$MH,"strcoll");
    }
    /**
     * {@snippet :
     * int strcoll(char* _String1, char* _String2);
     * }
     */
    public static int strcoll(MemorySegment _String1, MemorySegment _String2) {
        var mh$ = strcoll$MH();
        try {
            return (int)mh$.invokeExact(_String1, _String2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strcoll_l$MH() {
        return RuntimeHelper.requireNonNull(constants$31._strcoll_l$MH,"_strcoll_l");
    }
    /**
     * {@snippet :
     * int _strcoll_l(char* _String1, char* _String2, _locale_t _Locale);
     * }
     */
    public static int _strcoll_l(MemorySegment _String1, MemorySegment _String2, MemorySegment _Locale) {
        var mh$ = _strcoll_l$MH();
        try {
            return (int)mh$.invokeExact(_String1, _String2, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcpy$MH() {
        return RuntimeHelper.requireNonNull(constants$31.strcpy$MH,"strcpy");
    }
    /**
     * {@snippet :
     * char* strcpy(char* _Destination, char* _Source);
     * }
     */
    public static MemorySegment strcpy(MemorySegment _Destination, MemorySegment _Source) {
        var mh$ = strcpy$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Destination, _Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcspn$MH() {
        return RuntimeHelper.requireNonNull(constants$31.strcspn$MH,"strcspn");
    }
    /**
     * {@snippet :
     * unsigned long long strcspn(char* _Str, char* _Control);
     * }
     */
    public static long strcspn(MemorySegment _Str, MemorySegment _Control) {
        var mh$ = strcspn$MH();
        try {
            return (long)mh$.invokeExact(_Str, _Control);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strdup$MH() {
        return RuntimeHelper.requireNonNull(constants$31._strdup$MH,"_strdup");
    }
    /**
     * {@snippet :
     * char* _strdup(char* _Source);
     * }
     */
    public static MemorySegment _strdup(MemorySegment _Source) {
        var mh$ = _strdup$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strerror$MH() {
        return RuntimeHelper.requireNonNull(constants$32._strerror$MH,"_strerror");
    }
    /**
     * {@snippet :
     * char* _strerror(char* _ErrorMessage);
     * }
     */
    public static MemorySegment _strerror(MemorySegment _ErrorMessage) {
        var mh$ = _strerror$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_ErrorMessage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strerror_s$MH() {
        return RuntimeHelper.requireNonNull(constants$32._strerror_s$MH,"_strerror_s");
    }
    /**
     * {@snippet :
     * errno_t _strerror_s(char* _Buffer, size_t _SizeInBytes, char* _ErrorMessage);
     * }
     */
    public static int _strerror_s(MemorySegment _Buffer, long _SizeInBytes, MemorySegment _ErrorMessage) {
        var mh$ = _strerror_s$MH();
        try {
            return (int)mh$.invokeExact(_Buffer, _SizeInBytes, _ErrorMessage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strerror$MH() {
        return RuntimeHelper.requireNonNull(constants$32.strerror$MH,"strerror");
    }
    /**
     * {@snippet :
     * char* strerror(int _ErrorMessage);
     * }
     */
    public static MemorySegment strerror(int _ErrorMessage) {
        var mh$ = strerror$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_ErrorMessage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _stricmp$MH() {
        return RuntimeHelper.requireNonNull(constants$32._stricmp$MH,"_stricmp");
    }
    /**
     * {@snippet :
     * int _stricmp(char* _String1, char* _String2);
     * }
     */
    public static int _stricmp(MemorySegment _String1, MemorySegment _String2) {
        var mh$ = _stricmp$MH();
        try {
            return (int)mh$.invokeExact(_String1, _String2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _stricoll$MH() {
        return RuntimeHelper.requireNonNull(constants$32._stricoll$MH,"_stricoll");
    }
    /**
     * {@snippet :
     * int _stricoll(char* _String1, char* _String2);
     * }
     */
    public static int _stricoll(MemorySegment _String1, MemorySegment _String2) {
        var mh$ = _stricoll$MH();
        try {
            return (int)mh$.invokeExact(_String1, _String2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _stricoll_l$MH() {
        return RuntimeHelper.requireNonNull(constants$32._stricoll_l$MH,"_stricoll_l");
    }
    /**
     * {@snippet :
     * int _stricoll_l(char* _String1, char* _String2, _locale_t _Locale);
     * }
     */
    public static int _stricoll_l(MemorySegment _String1, MemorySegment _String2, MemorySegment _Locale) {
        var mh$ = _stricoll_l$MH();
        try {
            return (int)mh$.invokeExact(_String1, _String2, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _stricmp_l$MH() {
        return RuntimeHelper.requireNonNull(constants$33._stricmp_l$MH,"_stricmp_l");
    }
    /**
     * {@snippet :
     * int _stricmp_l(char* _String1, char* _String2, _locale_t _Locale);
     * }
     */
    public static int _stricmp_l(MemorySegment _String1, MemorySegment _String2, MemorySegment _Locale) {
        var mh$ = _stricmp_l$MH();
        try {
            return (int)mh$.invokeExact(_String1, _String2, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strlen$MH() {
        return RuntimeHelper.requireNonNull(constants$33.strlen$MH,"strlen");
    }
    /**
     * {@snippet :
     * unsigned long long strlen(char* _Str);
     * }
     */
    public static long strlen(MemorySegment _Str) {
        var mh$ = strlen$MH();
        try {
            return (long)mh$.invokeExact(_Str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strlwr_s$MH() {
        return RuntimeHelper.requireNonNull(constants$33._strlwr_s$MH,"_strlwr_s");
    }
    /**
     * {@snippet :
     * errno_t _strlwr_s(char* _String, size_t _Size);
     * }
     */
    public static int _strlwr_s(MemorySegment _String, long _Size) {
        var mh$ = _strlwr_s$MH();
        try {
            return (int)mh$.invokeExact(_String, _Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strlwr$MH() {
        return RuntimeHelper.requireNonNull(constants$33._strlwr$MH,"_strlwr");
    }
    /**
     * {@snippet :
     * char* _strlwr(char* _String);
     * }
     */
    public static MemorySegment _strlwr(MemorySegment _String) {
        var mh$ = _strlwr$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strlwr_s_l$MH() {
        return RuntimeHelper.requireNonNull(constants$33._strlwr_s_l$MH,"_strlwr_s_l");
    }
    /**
     * {@snippet :
     * errno_t _strlwr_s_l(char* _String, size_t _Size, _locale_t _Locale);
     * }
     */
    public static int _strlwr_s_l(MemorySegment _String, long _Size, MemorySegment _Locale) {
        var mh$ = _strlwr_s_l$MH();
        try {
            return (int)mh$.invokeExact(_String, _Size, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strlwr_l$MH() {
        return RuntimeHelper.requireNonNull(constants$33._strlwr_l$MH,"_strlwr_l");
    }
    /**
     * {@snippet :
     * char* _strlwr_l(char* _String, _locale_t _Locale);
     * }
     */
    public static MemorySegment _strlwr_l(MemorySegment _String, MemorySegment _Locale) {
        var mh$ = _strlwr_l$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strncat$MH() {
        return RuntimeHelper.requireNonNull(constants$34.strncat$MH,"strncat");
    }
    /**
     * {@snippet :
     * char* strncat(char* _Destination, char* _Source, size_t _Count);
     * }
     */
    public static MemorySegment strncat(MemorySegment _Destination, MemorySegment _Source, long _Count) {
        var mh$ = strncat$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Destination, _Source, _Count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strncmp$MH() {
        return RuntimeHelper.requireNonNull(constants$34.strncmp$MH,"strncmp");
    }
    /**
     * {@snippet :
     * int strncmp(char* _Str1, char* _Str2, size_t _MaxCount);
     * }
     */
    public static int strncmp(MemorySegment _Str1, MemorySegment _Str2, long _MaxCount) {
        var mh$ = strncmp$MH();
        try {
            return (int)mh$.invokeExact(_Str1, _Str2, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strnicmp$MH() {
        return RuntimeHelper.requireNonNull(constants$34._strnicmp$MH,"_strnicmp");
    }
    /**
     * {@snippet :
     * int _strnicmp(char* _String1, char* _String2, size_t _MaxCount);
     * }
     */
    public static int _strnicmp(MemorySegment _String1, MemorySegment _String2, long _MaxCount) {
        var mh$ = _strnicmp$MH();
        try {
            return (int)mh$.invokeExact(_String1, _String2, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strnicmp_l$MH() {
        return RuntimeHelper.requireNonNull(constants$34._strnicmp_l$MH,"_strnicmp_l");
    }
    /**
     * {@snippet :
     * int _strnicmp_l(char* _String1, char* _String2, size_t _MaxCount, _locale_t _Locale);
     * }
     */
    public static int _strnicmp_l(MemorySegment _String1, MemorySegment _String2, long _MaxCount, MemorySegment _Locale) {
        var mh$ = _strnicmp_l$MH();
        try {
            return (int)mh$.invokeExact(_String1, _String2, _MaxCount, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strnicoll$MH() {
        return RuntimeHelper.requireNonNull(constants$34._strnicoll$MH,"_strnicoll");
    }
    /**
     * {@snippet :
     * int _strnicoll(char* _String1, char* _String2, size_t _MaxCount);
     * }
     */
    public static int _strnicoll(MemorySegment _String1, MemorySegment _String2, long _MaxCount) {
        var mh$ = _strnicoll$MH();
        try {
            return (int)mh$.invokeExact(_String1, _String2, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strnicoll_l$MH() {
        return RuntimeHelper.requireNonNull(constants$34._strnicoll_l$MH,"_strnicoll_l");
    }
    /**
     * {@snippet :
     * int _strnicoll_l(char* _String1, char* _String2, size_t _MaxCount, _locale_t _Locale);
     * }
     */
    public static int _strnicoll_l(MemorySegment _String1, MemorySegment _String2, long _MaxCount, MemorySegment _Locale) {
        var mh$ = _strnicoll_l$MH();
        try {
            return (int)mh$.invokeExact(_String1, _String2, _MaxCount, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strncoll$MH() {
        return RuntimeHelper.requireNonNull(constants$35._strncoll$MH,"_strncoll");
    }
    /**
     * {@snippet :
     * int _strncoll(char* _String1, char* _String2, size_t _MaxCount);
     * }
     */
    public static int _strncoll(MemorySegment _String1, MemorySegment _String2, long _MaxCount) {
        var mh$ = _strncoll$MH();
        try {
            return (int)mh$.invokeExact(_String1, _String2, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strncoll_l$MH() {
        return RuntimeHelper.requireNonNull(constants$35._strncoll_l$MH,"_strncoll_l");
    }
    /**
     * {@snippet :
     * int _strncoll_l(char* _String1, char* _String2, size_t _MaxCount, _locale_t _Locale);
     * }
     */
    public static int _strncoll_l(MemorySegment _String1, MemorySegment _String2, long _MaxCount, MemorySegment _Locale) {
        var mh$ = _strncoll_l$MH();
        try {
            return (int)mh$.invokeExact(_String1, _String2, _MaxCount, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __strncnt$MH() {
        return RuntimeHelper.requireNonNull(constants$35.__strncnt$MH,"__strncnt");
    }
    /**
     * {@snippet :
     * size_t __strncnt(char* _String, size_t _Count);
     * }
     */
    public static long __strncnt(MemorySegment _String, long _Count) {
        var mh$ = __strncnt$MH();
        try {
            return (long)mh$.invokeExact(_String, _Count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strncpy$MH() {
        return RuntimeHelper.requireNonNull(constants$35.strncpy$MH,"strncpy");
    }
    /**
     * {@snippet :
     * char* strncpy(char* _Destination, char* _Source, size_t _Count);
     * }
     */
    public static MemorySegment strncpy(MemorySegment _Destination, MemorySegment _Source, long _Count) {
        var mh$ = strncpy$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Destination, _Source, _Count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strnlen$MH() {
        return RuntimeHelper.requireNonNull(constants$35.strnlen$MH,"strnlen");
    }
    /**
     * {@snippet :
     * size_t strnlen(char* _String, size_t _MaxCount);
     * }
     */
    public static long strnlen(MemorySegment _String, long _MaxCount) {
        var mh$ = strnlen$MH();
        try {
            return (long)mh$.invokeExact(_String, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strnset_s$MH() {
        return RuntimeHelper.requireNonNull(constants$35._strnset_s$MH,"_strnset_s");
    }
    /**
     * {@snippet :
     * errno_t _strnset_s(char* _String, size_t _SizeInBytes, int _Value, size_t _MaxCount);
     * }
     */
    public static int _strnset_s(MemorySegment _String, long _SizeInBytes, int _Value, long _MaxCount) {
        var mh$ = _strnset_s$MH();
        try {
            return (int)mh$.invokeExact(_String, _SizeInBytes, _Value, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strnset$MH() {
        return RuntimeHelper.requireNonNull(constants$36._strnset$MH,"_strnset");
    }
    /**
     * {@snippet :
     * char* _strnset(char* _Destination, int _Value, size_t _Count);
     * }
     */
    public static MemorySegment _strnset(MemorySegment _Destination, int _Value, long _Count) {
        var mh$ = _strnset$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Destination, _Value, _Count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strpbrk$MH() {
        return RuntimeHelper.requireNonNull(constants$36.strpbrk$MH,"strpbrk");
    }
    /**
     * {@snippet :
     * char* strpbrk(char* _Str, char* _Control);
     * }
     */
    public static MemorySegment strpbrk(MemorySegment _Str, MemorySegment _Control) {
        var mh$ = strpbrk$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Str, _Control);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strrev$MH() {
        return RuntimeHelper.requireNonNull(constants$36._strrev$MH,"_strrev");
    }
    /**
     * {@snippet :
     * char* _strrev(char* _Str);
     * }
     */
    public static MemorySegment _strrev(MemorySegment _Str) {
        var mh$ = _strrev$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strset_s$MH() {
        return RuntimeHelper.requireNonNull(constants$36._strset_s$MH,"_strset_s");
    }
    /**
     * {@snippet :
     * errno_t _strset_s(char* _Destination, size_t _DestinationSize, int _Value);
     * }
     */
    public static int _strset_s(MemorySegment _Destination, long _DestinationSize, int _Value) {
        var mh$ = _strset_s$MH();
        try {
            return (int)mh$.invokeExact(_Destination, _DestinationSize, _Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strset$MH() {
        return RuntimeHelper.requireNonNull(constants$36._strset$MH,"_strset");
    }
    /**
     * {@snippet :
     * char* _strset(char* _Destination, int _Value);
     * }
     */
    public static MemorySegment _strset(MemorySegment _Destination, int _Value) {
        var mh$ = _strset$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_Destination, _Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strspn$MH() {
        return RuntimeHelper.requireNonNull(constants$36.strspn$MH,"strspn");
    }
    /**
     * {@snippet :
     * unsigned long long strspn(char* _Str, char* _Control);
     * }
     */
    public static long strspn(MemorySegment _Str, MemorySegment _Control) {
        var mh$ = strspn$MH();
        try {
            return (long)mh$.invokeExact(_Str, _Control);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtok$MH() {
        return RuntimeHelper.requireNonNull(constants$37.strtok$MH,"strtok");
    }
    /**
     * {@snippet :
     * char* strtok(char* _String, char* _Delimiter);
     * }
     */
    public static MemorySegment strtok(MemorySegment _String, MemorySegment _Delimiter) {
        var mh$ = strtok$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_String, _Delimiter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strupr_s$MH() {
        return RuntimeHelper.requireNonNull(constants$37._strupr_s$MH,"_strupr_s");
    }
    /**
     * {@snippet :
     * errno_t _strupr_s(char* _String, size_t _Size);
     * }
     */
    public static int _strupr_s(MemorySegment _String, long _Size) {
        var mh$ = _strupr_s$MH();
        try {
            return (int)mh$.invokeExact(_String, _Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strupr$MH() {
        return RuntimeHelper.requireNonNull(constants$37._strupr$MH,"_strupr");
    }
    /**
     * {@snippet :
     * char* _strupr(char* _String);
     * }
     */
    public static MemorySegment _strupr(MemorySegment _String) {
        var mh$ = _strupr$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strupr_s_l$MH() {
        return RuntimeHelper.requireNonNull(constants$37._strupr_s_l$MH,"_strupr_s_l");
    }
    /**
     * {@snippet :
     * errno_t _strupr_s_l(char* _String, size_t _Size, _locale_t _Locale);
     * }
     */
    public static int _strupr_s_l(MemorySegment _String, long _Size, MemorySegment _Locale) {
        var mh$ = _strupr_s_l$MH();
        try {
            return (int)mh$.invokeExact(_String, _Size, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strupr_l$MH() {
        return RuntimeHelper.requireNonNull(constants$37._strupr_l$MH,"_strupr_l");
    }
    /**
     * {@snippet :
     * char* _strupr_l(char* _String, _locale_t _Locale);
     * }
     */
    public static MemorySegment _strupr_l(MemorySegment _String, MemorySegment _Locale) {
        var mh$ = _strupr_l$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strxfrm$MH() {
        return RuntimeHelper.requireNonNull(constants$37.strxfrm$MH,"strxfrm");
    }
    /**
     * {@snippet :
     * unsigned long long strxfrm(char* _Destination, char* _Source, size_t _MaxCount);
     * }
     */
    public static long strxfrm(MemorySegment _Destination, MemorySegment _Source, long _MaxCount) {
        var mh$ = strxfrm$MH();
        try {
            return (long)mh$.invokeExact(_Destination, _Source, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strxfrm_l$MH() {
        return RuntimeHelper.requireNonNull(constants$38._strxfrm_l$MH,"_strxfrm_l");
    }
    /**
     * {@snippet :
     * size_t _strxfrm_l(char* _Destination, char* _Source, size_t _MaxCount, _locale_t _Locale);
     * }
     */
    public static long _strxfrm_l(MemorySegment _Destination, MemorySegment _Source, long _MaxCount, MemorySegment _Locale) {
        var mh$ = _strxfrm_l$MH();
        try {
            return (long)mh$.invokeExact(_Destination, _Source, _MaxCount, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strdup$MH() {
        return RuntimeHelper.requireNonNull(constants$38.strdup$MH,"strdup");
    }
    /**
     * {@snippet :
     * char* strdup(char* _String);
     * }
     */
    public static MemorySegment strdup(MemorySegment _String) {
        var mh$ = strdup$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcmpi$MH() {
        return RuntimeHelper.requireNonNull(constants$38.strcmpi$MH,"strcmpi");
    }
    /**
     * {@snippet :
     * int strcmpi(char* _String1, char* _String2);
     * }
     */
    public static int strcmpi(MemorySegment _String1, MemorySegment _String2) {
        var mh$ = strcmpi$MH();
        try {
            return (int)mh$.invokeExact(_String1, _String2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle stricmp$MH() {
        return RuntimeHelper.requireNonNull(constants$38.stricmp$MH,"stricmp");
    }
    /**
     * {@snippet :
     * int stricmp(char* _String1, char* _String2);
     * }
     */
    public static int stricmp(MemorySegment _String1, MemorySegment _String2) {
        var mh$ = stricmp$MH();
        try {
            return (int)mh$.invokeExact(_String1, _String2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strlwr$MH() {
        return RuntimeHelper.requireNonNull(constants$38.strlwr$MH,"strlwr");
    }
    /**
     * {@snippet :
     * char* strlwr(char* _String);
     * }
     */
    public static MemorySegment strlwr(MemorySegment _String) {
        var mh$ = strlwr$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strnicmp$MH() {
        return RuntimeHelper.requireNonNull(constants$38.strnicmp$MH,"strnicmp");
    }
    /**
     * {@snippet :
     * int strnicmp(char* _String1, char* _String2, size_t _MaxCount);
     * }
     */
    public static int strnicmp(MemorySegment _String1, MemorySegment _String2, long _MaxCount) {
        var mh$ = strnicmp$MH();
        try {
            return (int)mh$.invokeExact(_String1, _String2, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strnset$MH() {
        return RuntimeHelper.requireNonNull(constants$39.strnset$MH,"strnset");
    }
    /**
     * {@snippet :
     * char* strnset(char* _String, int _Value, size_t _MaxCount);
     * }
     */
    public static MemorySegment strnset(MemorySegment _String, int _Value, long _MaxCount) {
        var mh$ = strnset$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_String, _Value, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strrev$MH() {
        return RuntimeHelper.requireNonNull(constants$39.strrev$MH,"strrev");
    }
    /**
     * {@snippet :
     * char* strrev(char* _String);
     * }
     */
    public static MemorySegment strrev(MemorySegment _String) {
        var mh$ = strrev$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strset$MH() {
        return RuntimeHelper.requireNonNull(constants$39.strset$MH,"strset");
    }
    /**
     * {@snippet :
     * char* strset(char* _String, int _Value);
     * }
     */
    public static MemorySegment strset(MemorySegment _String, int _Value) {
        var mh$ = strset$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_String, _Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strupr$MH() {
        return RuntimeHelper.requireNonNull(constants$39.strupr$MH,"strupr");
    }
    /**
     * {@snippet :
     * char* strupr(char* _String);
     * }
     */
    public static MemorySegment strupr(MemorySegment _String) {
        var mh$ = strupr$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned long long KSPIN_LOCK;
     * }
     */
    public static final OfLong KSPIN_LOCK = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long long* PKSPIN_LOCK;
     * }
     */
    public static final OfAddress PKSPIN_LOCK = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _M128A* PM128A;
     * }
     */
    public static final OfAddress PM128A = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _XSAVE_FORMAT* PXSAVE_FORMAT;
     * }
     */
    public static final OfAddress PXSAVE_FORMAT = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _XSAVE_CET_U_FORMAT* PXSAVE_CET_U_FORMAT;
     * }
     */
    public static final OfAddress PXSAVE_CET_U_FORMAT = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _XSAVE_AREA_HEADER* PXSAVE_AREA_HEADER;
     * }
     */
    public static final OfAddress PXSAVE_AREA_HEADER = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _XSAVE_AREA* PXSAVE_AREA;
     * }
     */
    public static final OfAddress PXSAVE_AREA = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _XSTATE_CONTEXT* PXSTATE_CONTEXT;
     * }
     */
    public static final OfAddress PXSTATE_CONTEXT = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _KERNEL_CET_CONTEXT* PKERNEL_CET_CONTEXT;
     * }
     */
    public static final OfAddress PKERNEL_CET_CONTEXT = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _SCOPE_TABLE_AMD64* PSCOPE_TABLE_AMD64;
     * }
     */
    public static final OfAddress PSCOPE_TABLE_AMD64 = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle _bittest$MH() {
        return RuntimeHelper.requireNonNull(constants$40._bittest$MH,"_bittest");
    }
    /**
     * {@snippet :
     * unsigned char _bittest(const LONG* Base, LONG Offset);
     * }
     */
    public static byte _bittest(MemorySegment Base, int Offset) {
        var mh$ = _bittest$MH();
        try {
            return (byte)mh$.invokeExact(Base, Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _bittestandcomplement$MH() {
        return RuntimeHelper.requireNonNull(constants$40._bittestandcomplement$MH,"_bittestandcomplement");
    }
    /**
     * {@snippet :
     * unsigned char _bittestandcomplement(LONG* Base, LONG Offset);
     * }
     */
    public static byte _bittestandcomplement(MemorySegment Base, int Offset) {
        var mh$ = _bittestandcomplement$MH();
        try {
            return (byte)mh$.invokeExact(Base, Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _bittestandset$MH() {
        return RuntimeHelper.requireNonNull(constants$40._bittestandset$MH,"_bittestandset");
    }
    /**
     * {@snippet :
     * unsigned char _bittestandset(LONG* Base, LONG Offset);
     * }
     */
    public static byte _bittestandset(MemorySegment Base, int Offset) {
        var mh$ = _bittestandset$MH();
        try {
            return (byte)mh$.invokeExact(Base, Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _bittestandreset$MH() {
        return RuntimeHelper.requireNonNull(constants$40._bittestandreset$MH,"_bittestandreset");
    }
    /**
     * {@snippet :
     * unsigned char _bittestandreset(LONG* Base, LONG Offset);
     * }
     */
    public static byte _bittestandreset(MemorySegment Base, int Offset) {
        var mh$ = _bittestandreset$MH();
        try {
            return (byte)mh$.invokeExact(Base, Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _interlockedbittestandset$MH() {
        return RuntimeHelper.requireNonNull(constants$41._interlockedbittestandset$MH,"_interlockedbittestandset");
    }
    /**
     * {@snippet :
     * unsigned char _interlockedbittestandset(volatile LONG* Base, LONG Offset);
     * }
     */
    public static byte _interlockedbittestandset(MemorySegment Base, int Offset) {
        var mh$ = _interlockedbittestandset$MH();
        try {
            return (byte)mh$.invokeExact(Base, Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _interlockedbittestandreset$MH() {
        return RuntimeHelper.requireNonNull(constants$41._interlockedbittestandreset$MH,"_interlockedbittestandreset");
    }
    /**
     * {@snippet :
     * unsigned char _interlockedbittestandreset(volatile LONG* Base, LONG Offset);
     * }
     */
    public static byte _interlockedbittestandreset(MemorySegment Base, int Offset) {
        var mh$ = _interlockedbittestandreset$MH();
        try {
            return (byte)mh$.invokeExact(Base, Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _bittest64$MH() {
        return RuntimeHelper.requireNonNull(constants$41._bittest64$MH,"_bittest64");
    }
    /**
     * {@snippet :
     * unsigned char _bittest64(const LONG64* Base, LONG64 Offset);
     * }
     */
    public static byte _bittest64(MemorySegment Base, long Offset) {
        var mh$ = _bittest64$MH();
        try {
            return (byte)mh$.invokeExact(Base, Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _bittestandcomplement64$MH() {
        return RuntimeHelper.requireNonNull(constants$41._bittestandcomplement64$MH,"_bittestandcomplement64");
    }
    /**
     * {@snippet :
     * unsigned char _bittestandcomplement64(LONG64* Base, LONG64 Offset);
     * }
     */
    public static byte _bittestandcomplement64(MemorySegment Base, long Offset) {
        var mh$ = _bittestandcomplement64$MH();
        try {
            return (byte)mh$.invokeExact(Base, Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _bittestandset64$MH() {
        return RuntimeHelper.requireNonNull(constants$41._bittestandset64$MH,"_bittestandset64");
    }
    /**
     * {@snippet :
     * unsigned char _bittestandset64(LONG64* Base, LONG64 Offset);
     * }
     */
    public static byte _bittestandset64(MemorySegment Base, long Offset) {
        var mh$ = _bittestandset64$MH();
        try {
            return (byte)mh$.invokeExact(Base, Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _bittestandreset64$MH() {
        return RuntimeHelper.requireNonNull(constants$41._bittestandreset64$MH,"_bittestandreset64");
    }
    /**
     * {@snippet :
     * unsigned char _bittestandreset64(LONG64* Base, LONG64 Offset);
     * }
     */
    public static byte _bittestandreset64(MemorySegment Base, long Offset) {
        var mh$ = _bittestandreset64$MH();
        try {
            return (byte)mh$.invokeExact(Base, Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _interlockedbittestandset64$MH() {
        return RuntimeHelper.requireNonNull(constants$42._interlockedbittestandset64$MH,"_interlockedbittestandset64");
    }
    /**
     * {@snippet :
     * unsigned char _interlockedbittestandset64(volatile LONG64* Base, LONG64 Offset);
     * }
     */
    public static byte _interlockedbittestandset64(MemorySegment Base, long Offset) {
        var mh$ = _interlockedbittestandset64$MH();
        try {
            return (byte)mh$.invokeExact(Base, Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _interlockedbittestandreset64$MH() {
        return RuntimeHelper.requireNonNull(constants$42._interlockedbittestandreset64$MH,"_interlockedbittestandreset64");
    }
    /**
     * {@snippet :
     * unsigned char _interlockedbittestandreset64(volatile LONG64* Base, LONG64 Offset);
     * }
     */
    public static byte _interlockedbittestandreset64(MemorySegment Base, long Offset) {
        var mh$ = _interlockedbittestandreset64$MH();
        try {
            return (byte)mh$.invokeExact(Base, Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _BitScanForward$MH() {
        return RuntimeHelper.requireNonNull(constants$42._BitScanForward$MH,"_BitScanForward");
    }
    /**
     * {@snippet :
     * unsigned char _BitScanForward(DWORD* Index, DWORD Mask);
     * }
     */
    public static byte _BitScanForward(MemorySegment Index, int Mask) {
        var mh$ = _BitScanForward$MH();
        try {
            return (byte)mh$.invokeExact(Index, Mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _BitScanReverse$MH() {
        return RuntimeHelper.requireNonNull(constants$42._BitScanReverse$MH,"_BitScanReverse");
    }
    /**
     * {@snippet :
     * unsigned char _BitScanReverse(DWORD* Index, DWORD Mask);
     * }
     */
    public static byte _BitScanReverse(MemorySegment Index, int Mask) {
        var mh$ = _BitScanReverse$MH();
        try {
            return (byte)mh$.invokeExact(Index, Mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _BitScanForward64$MH() {
        return RuntimeHelper.requireNonNull(constants$42._BitScanForward64$MH,"_BitScanForward64");
    }
    /**
     * {@snippet :
     * unsigned char _BitScanForward64(DWORD* Index, DWORD64 Mask);
     * }
     */
    public static byte _BitScanForward64(MemorySegment Index, long Mask) {
        var mh$ = _BitScanForward64$MH();
        try {
            return (byte)mh$.invokeExact(Index, Mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _BitScanReverse64$MH() {
        return RuntimeHelper.requireNonNull(constants$42._BitScanReverse64$MH,"_BitScanReverse64");
    }
    /**
     * {@snippet :
     * unsigned char _BitScanReverse64(DWORD* Index, DWORD64 Mask);
     * }
     */
    public static byte _BitScanReverse64(MemorySegment Index, long Mask) {
        var mh$ = _BitScanReverse64$MH();
        try {
            return (byte)mh$.invokeExact(Index, Mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedIncrement16$MH() {
        return RuntimeHelper.requireNonNull(constants$43._InterlockedIncrement16$MH,"_InterlockedIncrement16");
    }
    /**
     * {@snippet :
     * short _InterlockedIncrement16(volatile SHORT* Addend);
     * }
     */
    public static short _InterlockedIncrement16(MemorySegment Addend) {
        var mh$ = _InterlockedIncrement16$MH();
        try {
            return (short)mh$.invokeExact(Addend);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedDecrement16$MH() {
        return RuntimeHelper.requireNonNull(constants$43._InterlockedDecrement16$MH,"_InterlockedDecrement16");
    }
    /**
     * {@snippet :
     * short _InterlockedDecrement16(volatile SHORT* Addend);
     * }
     */
    public static short _InterlockedDecrement16(MemorySegment Addend) {
        var mh$ = _InterlockedDecrement16$MH();
        try {
            return (short)mh$.invokeExact(Addend);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedCompareExchange16$MH() {
        return RuntimeHelper.requireNonNull(constants$43._InterlockedCompareExchange16$MH,"_InterlockedCompareExchange16");
    }
    /**
     * {@snippet :
     * short _InterlockedCompareExchange16(volatile SHORT* Destination, SHORT ExChange, SHORT Comperand);
     * }
     */
    public static short _InterlockedCompareExchange16(MemorySegment Destination, short ExChange, short Comperand) {
        var mh$ = _InterlockedCompareExchange16$MH();
        try {
            return (short)mh$.invokeExact(Destination, ExChange, Comperand);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedAnd$MH() {
        return RuntimeHelper.requireNonNull(constants$43._InterlockedAnd$MH,"_InterlockedAnd");
    }
    /**
     * {@snippet :
     * long _InterlockedAnd(volatile LONG* Destination, LONG Value);
     * }
     */
    public static int _InterlockedAnd(MemorySegment Destination, int Value) {
        var mh$ = _InterlockedAnd$MH();
        try {
            return (int)mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedOr$MH() {
        return RuntimeHelper.requireNonNull(constants$43._InterlockedOr$MH,"_InterlockedOr");
    }
    /**
     * {@snippet :
     * long _InterlockedOr(volatile LONG* Destination, LONG Value);
     * }
     */
    public static int _InterlockedOr(MemorySegment Destination, int Value) {
        var mh$ = _InterlockedOr$MH();
        try {
            return (int)mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedXor$MH() {
        return RuntimeHelper.requireNonNull(constants$43._InterlockedXor$MH,"_InterlockedXor");
    }
    /**
     * {@snippet :
     * long _InterlockedXor(volatile LONG* Destination, LONG Value);
     * }
     */
    public static int _InterlockedXor(MemorySegment Destination, int Value) {
        var mh$ = _InterlockedXor$MH();
        try {
            return (int)mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedAnd64$MH() {
        return RuntimeHelper.requireNonNull(constants$44._InterlockedAnd64$MH,"_InterlockedAnd64");
    }
    /**
     * {@snippet :
     * long long _InterlockedAnd64(volatile LONG64* Destination, LONG64 Value);
     * }
     */
    public static long _InterlockedAnd64(MemorySegment Destination, long Value) {
        var mh$ = _InterlockedAnd64$MH();
        try {
            return (long)mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedOr64$MH() {
        return RuntimeHelper.requireNonNull(constants$44._InterlockedOr64$MH,"_InterlockedOr64");
    }
    /**
     * {@snippet :
     * long long _InterlockedOr64(volatile LONG64* Destination, LONG64 Value);
     * }
     */
    public static long _InterlockedOr64(MemorySegment Destination, long Value) {
        var mh$ = _InterlockedOr64$MH();
        try {
            return (long)mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedXor64$MH() {
        return RuntimeHelper.requireNonNull(constants$44._InterlockedXor64$MH,"_InterlockedXor64");
    }
    /**
     * {@snippet :
     * long long _InterlockedXor64(volatile LONG64* Destination, LONG64 Value);
     * }
     */
    public static long _InterlockedXor64(MemorySegment Destination, long Value) {
        var mh$ = _InterlockedXor64$MH();
        try {
            return (long)mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedIncrement$MH() {
        return RuntimeHelper.requireNonNull(constants$44._InterlockedIncrement$MH,"_InterlockedIncrement");
    }
    /**
     * {@snippet :
     * long _InterlockedIncrement(volatile LONG* Addend);
     * }
     */
    public static int _InterlockedIncrement(MemorySegment Addend) {
        var mh$ = _InterlockedIncrement$MH();
        try {
            return (int)mh$.invokeExact(Addend);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedDecrement$MH() {
        return RuntimeHelper.requireNonNull(constants$44._InterlockedDecrement$MH,"_InterlockedDecrement");
    }
    /**
     * {@snippet :
     * long _InterlockedDecrement(volatile LONG* Addend);
     * }
     */
    public static int _InterlockedDecrement(MemorySegment Addend) {
        var mh$ = _InterlockedDecrement$MH();
        try {
            return (int)mh$.invokeExact(Addend);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedExchange$MH() {
        return RuntimeHelper.requireNonNull(constants$44._InterlockedExchange$MH,"_InterlockedExchange");
    }
    /**
     * {@snippet :
     * long _InterlockedExchange(volatile LONG* Target, LONG Value);
     * }
     */
    public static int _InterlockedExchange(MemorySegment Target, int Value) {
        var mh$ = _InterlockedExchange$MH();
        try {
            return (int)mh$.invokeExact(Target, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedExchangeAdd$MH() {
        return RuntimeHelper.requireNonNull(constants$45._InterlockedExchangeAdd$MH,"_InterlockedExchangeAdd");
    }
    /**
     * {@snippet :
     * long _InterlockedExchangeAdd(volatile LONG* Addend, LONG Value);
     * }
     */
    public static int _InterlockedExchangeAdd(MemorySegment Addend, int Value) {
        var mh$ = _InterlockedExchangeAdd$MH();
        try {
            return (int)mh$.invokeExact(Addend, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedCompareExchange$MH() {
        return RuntimeHelper.requireNonNull(constants$45._InterlockedCompareExchange$MH,"_InterlockedCompareExchange");
    }
    /**
     * {@snippet :
     * long _InterlockedCompareExchange(volatile LONG* Destination, LONG ExChange, LONG Comperand);
     * }
     */
    public static int _InterlockedCompareExchange(MemorySegment Destination, int ExChange, int Comperand) {
        var mh$ = _InterlockedCompareExchange$MH();
        try {
            return (int)mh$.invokeExact(Destination, ExChange, Comperand);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedIncrement64$MH() {
        return RuntimeHelper.requireNonNull(constants$45._InterlockedIncrement64$MH,"_InterlockedIncrement64");
    }
    /**
     * {@snippet :
     * long long _InterlockedIncrement64(volatile LONG64* Addend);
     * }
     */
    public static long _InterlockedIncrement64(MemorySegment Addend) {
        var mh$ = _InterlockedIncrement64$MH();
        try {
            return (long)mh$.invokeExact(Addend);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedDecrement64$MH() {
        return RuntimeHelper.requireNonNull(constants$45._InterlockedDecrement64$MH,"_InterlockedDecrement64");
    }
    /**
     * {@snippet :
     * long long _InterlockedDecrement64(volatile LONG64* Addend);
     * }
     */
    public static long _InterlockedDecrement64(MemorySegment Addend) {
        var mh$ = _InterlockedDecrement64$MH();
        try {
            return (long)mh$.invokeExact(Addend);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedExchange64$MH() {
        return RuntimeHelper.requireNonNull(constants$45._InterlockedExchange64$MH,"_InterlockedExchange64");
    }
    /**
     * {@snippet :
     * long long _InterlockedExchange64(volatile LONG64* Target, LONG64 Value);
     * }
     */
    public static long _InterlockedExchange64(MemorySegment Target, long Value) {
        var mh$ = _InterlockedExchange64$MH();
        try {
            return (long)mh$.invokeExact(Target, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedExchangeAdd64$MH() {
        return RuntimeHelper.requireNonNull(constants$45._InterlockedExchangeAdd64$MH,"_InterlockedExchangeAdd64");
    }
    /**
     * {@snippet :
     * long long _InterlockedExchangeAdd64(volatile LONG64* Addend, LONG64 Value);
     * }
     */
    public static long _InterlockedExchangeAdd64(MemorySegment Addend, long Value) {
        var mh$ = _InterlockedExchangeAdd64$MH();
        try {
            return (long)mh$.invokeExact(Addend, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedCompareExchange64$MH() {
        return RuntimeHelper.requireNonNull(constants$46._InterlockedCompareExchange64$MH,"_InterlockedCompareExchange64");
    }
    /**
     * {@snippet :
     * long long _InterlockedCompareExchange64(volatile LONG64* Destination, LONG64 ExChange, LONG64 Comperand);
     * }
     */
    public static long _InterlockedCompareExchange64(MemorySegment Destination, long ExChange, long Comperand) {
        var mh$ = _InterlockedCompareExchange64$MH();
        try {
            return (long)mh$.invokeExact(Destination, ExChange, Comperand);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedCompareExchange128$MH() {
        return RuntimeHelper.requireNonNull(constants$46._InterlockedCompareExchange128$MH,"_InterlockedCompareExchange128");
    }
    /**
     * {@snippet :
     * unsigned char _InterlockedCompareExchange128(volatile LONG64* Destination, LONG64 ExchangeHigh, LONG64 ExchangeLow, LONG64* ComparandResult);
     * }
     */
    public static byte _InterlockedCompareExchange128(MemorySegment Destination, long ExchangeHigh, long ExchangeLow, MemorySegment ComparandResult) {
        var mh$ = _InterlockedCompareExchange128$MH();
        try {
            return (byte)mh$.invokeExact(Destination, ExchangeHigh, ExchangeLow, ComparandResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedCompareExchangePointer$MH() {
        return RuntimeHelper.requireNonNull(constants$46._InterlockedCompareExchangePointer$MH,"_InterlockedCompareExchangePointer");
    }
    /**
     * {@snippet :
     * void* _InterlockedCompareExchangePointer(volatile PVOID* Destination, PVOID Exchange, PVOID Comperand);
     * }
     */
    public static MemorySegment _InterlockedCompareExchangePointer(MemorySegment Destination, MemorySegment Exchange, MemorySegment Comperand) {
        var mh$ = _InterlockedCompareExchangePointer$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(Destination, Exchange, Comperand);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedExchangePointer$MH() {
        return RuntimeHelper.requireNonNull(constants$46._InterlockedExchangePointer$MH,"_InterlockedExchangePointer");
    }
    /**
     * {@snippet :
     * void* _InterlockedExchangePointer(volatile PVOID* Target, PVOID Value);
     * }
     */
    public static MemorySegment _InterlockedExchangePointer(MemorySegment Target, MemorySegment Value) {
        var mh$ = _InterlockedExchangePointer$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(Target, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedExchange8$MH() {
        return RuntimeHelper.requireNonNull(constants$46._InterlockedExchange8$MH,"_InterlockedExchange8");
    }
    /**
     * {@snippet :
     * char _InterlockedExchange8(volatile CHAR* Target, CHAR Value);
     * }
     */
    public static byte _InterlockedExchange8(MemorySegment Target, byte Value) {
        var mh$ = _InterlockedExchange8$MH();
        try {
            return (byte)mh$.invokeExact(Target, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedExchange16$MH() {
        return RuntimeHelper.requireNonNull(constants$46._InterlockedExchange16$MH,"_InterlockedExchange16");
    }
    /**
     * {@snippet :
     * short _InterlockedExchange16(volatile SHORT* Destination, SHORT ExChange);
     * }
     */
    public static short _InterlockedExchange16(MemorySegment Destination, short ExChange) {
        var mh$ = _InterlockedExchange16$MH();
        try {
            return (short)mh$.invokeExact(Destination, ExChange);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedExchangeAdd8$MH() {
        return RuntimeHelper.requireNonNull(constants$47._InterlockedExchangeAdd8$MH,"_InterlockedExchangeAdd8");
    }
    /**
     * {@snippet :
     * char _InterlockedExchangeAdd8(char* _Addend, char _Value);
     * }
     */
    public static byte _InterlockedExchangeAdd8(MemorySegment _Addend, byte _Value) {
        var mh$ = _InterlockedExchangeAdd8$MH();
        try {
            return (byte)mh$.invokeExact(_Addend, _Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedAnd8$MH() {
        return RuntimeHelper.requireNonNull(constants$47._InterlockedAnd8$MH,"_InterlockedAnd8");
    }
    /**
     * {@snippet :
     * char _InterlockedAnd8(char* Destination, char Value);
     * }
     */
    public static byte _InterlockedAnd8(MemorySegment Destination, byte Value) {
        var mh$ = _InterlockedAnd8$MH();
        try {
            return (byte)mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedOr8$MH() {
        return RuntimeHelper.requireNonNull(constants$47._InterlockedOr8$MH,"_InterlockedOr8");
    }
    /**
     * {@snippet :
     * char _InterlockedOr8(char* Destination, char Value);
     * }
     */
    public static byte _InterlockedOr8(MemorySegment Destination, byte Value) {
        var mh$ = _InterlockedOr8$MH();
        try {
            return (byte)mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedXor8$MH() {
        return RuntimeHelper.requireNonNull(constants$47._InterlockedXor8$MH,"_InterlockedXor8");
    }
    /**
     * {@snippet :
     * char _InterlockedXor8(char* Destination, char Value);
     * }
     */
    public static byte _InterlockedXor8(MemorySegment Destination, byte Value) {
        var mh$ = _InterlockedXor8$MH();
        try {
            return (byte)mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedAnd16$MH() {
        return RuntimeHelper.requireNonNull(constants$47._InterlockedAnd16$MH,"_InterlockedAnd16");
    }
    /**
     * {@snippet :
     * short _InterlockedAnd16(volatile SHORT* Destination, SHORT Value);
     * }
     */
    public static short _InterlockedAnd16(MemorySegment Destination, short Value) {
        var mh$ = _InterlockedAnd16$MH();
        try {
            return (short)mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedOr16$MH() {
        return RuntimeHelper.requireNonNull(constants$47._InterlockedOr16$MH,"_InterlockedOr16");
    }
    /**
     * {@snippet :
     * short _InterlockedOr16(volatile SHORT* Destination, SHORT Value);
     * }
     */
    public static short _InterlockedOr16(MemorySegment Destination, short Value) {
        var mh$ = _InterlockedOr16$MH();
        try {
            return (short)mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedXor16$MH() {
        return RuntimeHelper.requireNonNull(constants$48._InterlockedXor16$MH,"_InterlockedXor16");
    }
    /**
     * {@snippet :
     * short _InterlockedXor16(volatile SHORT* Destination, SHORT Value);
     * }
     */
    public static short _InterlockedXor16(MemorySegment Destination, short Value) {
        var mh$ = _InterlockedXor16$MH();
        try {
            return (short)mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __cpuidex$MH() {
        return RuntimeHelper.requireNonNull(constants$48.__cpuidex$MH,"__cpuidex");
    }
    /**
     * {@snippet :
     * void __cpuidex(int CPUInfo[4], int Function, int SubLeaf);
     * }
     */
    public static void __cpuidex(MemorySegment CPUInfo, int Function, int SubLeaf) {
        var mh$ = __cpuidex$MH();
        try {
            mh$.invokeExact(CPUInfo, Function, SubLeaf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mm_clflush$MH() {
        return RuntimeHelper.requireNonNull(constants$48._mm_clflush$MH,"_mm_clflush");
    }
    /**
     * {@snippet :
     * void _mm_clflush(void* Address);
     * }
     */
    public static void _mm_clflush(MemorySegment Address) {
        var mh$ = _mm_clflush$MH();
        try {
            mh$.invokeExact(Address);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _ReadWriteBarrier$MH() {
        return RuntimeHelper.requireNonNull(constants$48._ReadWriteBarrier$MH,"_ReadWriteBarrier");
    }
    /**
     * {@snippet :
     * void _ReadWriteBarrier();
     * }
     */
    public static void _ReadWriteBarrier() {
        var mh$ = _ReadWriteBarrier$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __faststorefence$MH() {
        return RuntimeHelper.requireNonNull(constants$48.__faststorefence$MH,"__faststorefence");
    }
    /**
     * {@snippet :
     * void __faststorefence();
     * }
     */
    public static void __faststorefence() {
        var mh$ = __faststorefence$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mm_lfence$MH() {
        return RuntimeHelper.requireNonNull(constants$48._mm_lfence$MH,"_mm_lfence");
    }
    /**
     * {@snippet :
     * void _mm_lfence();
     * }
     */
    public static void _mm_lfence() {
        var mh$ = _mm_lfence$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mm_mfence$MH() {
        return RuntimeHelper.requireNonNull(constants$49._mm_mfence$MH,"_mm_mfence");
    }
    /**
     * {@snippet :
     * void _mm_mfence();
     * }
     */
    public static void _mm_mfence() {
        var mh$ = _mm_mfence$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mm_sfence$MH() {
        return RuntimeHelper.requireNonNull(constants$49._mm_sfence$MH,"_mm_sfence");
    }
    /**
     * {@snippet :
     * void _mm_sfence();
     * }
     */
    public static void _mm_sfence() {
        var mh$ = _mm_sfence$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mm_pause$MH() {
        return RuntimeHelper.requireNonNull(constants$49._mm_pause$MH,"_mm_pause");
    }
    /**
     * {@snippet :
     * void _mm_pause();
     * }
     */
    public static void _mm_pause() {
        var mh$ = _mm_pause$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mm_prefetch$MH() {
        return RuntimeHelper.requireNonNull(constants$49._mm_prefetch$MH,"_mm_prefetch");
    }
    /**
     * {@snippet :
     * void _mm_prefetch(const CHAR* a, int sel);
     * }
     */
    public static void _mm_prefetch(MemorySegment a, int sel) {
        var mh$ = _mm_prefetch$MH();
        try {
            mh$.invokeExact(a, sel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _m_prefetchw$MH() {
        return RuntimeHelper.requireNonNull(constants$49._m_prefetchw$MH,"_m_prefetchw");
    }
    /**
     * {@snippet :
     * void _m_prefetchw(void* Source);
     * }
     */
    public static void _m_prefetchw(MemorySegment Source) {
        var mh$ = _m_prefetchw$MH();
        try {
            mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mm_getcsr$MH() {
        return RuntimeHelper.requireNonNull(constants$49._mm_getcsr$MH,"_mm_getcsr");
    }
    /**
     * {@snippet :
     * unsigned int _mm_getcsr();
     * }
     */
    public static int _mm_getcsr() {
        var mh$ = _mm_getcsr$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mm_setcsr$MH() {
        return RuntimeHelper.requireNonNull(constants$50._mm_setcsr$MH,"_mm_setcsr");
    }
    /**
     * {@snippet :
     * void _mm_setcsr(unsigned int MxCsr);
     * }
     */
    public static void _mm_setcsr(int MxCsr) {
        var mh$ = _mm_setcsr$MH();
        try {
            mh$.invokeExact(MxCsr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __getcallerseflags$MH() {
        return RuntimeHelper.requireNonNull(constants$50.__getcallerseflags$MH,"__getcallerseflags");
    }
    /**
     * {@snippet :
     * unsigned int __getcallerseflags();
     * }
     */
    public static int __getcallerseflags() {
        var mh$ = __getcallerseflags$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __segmentlimit$MH() {
        return RuntimeHelper.requireNonNull(constants$50.__segmentlimit$MH,"__segmentlimit");
    }
    /**
     * {@snippet :
     * DWORD __segmentlimit(DWORD Selector);
     * }
     */
    public static int __segmentlimit(int Selector) {
        var mh$ = __segmentlimit$MH();
        try {
            return (int)mh$.invokeExact(Selector);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __readpmc$MH() {
        return RuntimeHelper.requireNonNull(constants$50.__readpmc$MH,"__readpmc");
    }
    /**
     * {@snippet :
     * DWORD64 __readpmc(DWORD Counter);
     * }
     */
    public static long __readpmc(int Counter) {
        var mh$ = __readpmc$MH();
        try {
            return (long)mh$.invokeExact(Counter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __rdtsc$MH() {
        return RuntimeHelper.requireNonNull(constants$50.__rdtsc$MH,"__rdtsc");
    }
    /**
     * {@snippet :
     * unsigned long long __rdtsc();
     * }
     */
    public static long __rdtsc() {
        var mh$ = __rdtsc$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __movsb$MH() {
        return RuntimeHelper.requireNonNull(constants$50.__movsb$MH,"__movsb");
    }
    /**
     * {@snippet :
     * void __movsb(PBYTE Destination, const BYTE* Source, SIZE_T Count);
     * }
     */
    public static void __movsb(MemorySegment Destination, MemorySegment Source, long Count) {
        var mh$ = __movsb$MH();
        try {
            mh$.invokeExact(Destination, Source, Count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __movsw$MH() {
        return RuntimeHelper.requireNonNull(constants$51.__movsw$MH,"__movsw");
    }
    /**
     * {@snippet :
     * void __movsw(PWORD Destination, const WORD* Source, SIZE_T Count);
     * }
     */
    public static void __movsw(MemorySegment Destination, MemorySegment Source, long Count) {
        var mh$ = __movsw$MH();
        try {
            mh$.invokeExact(Destination, Source, Count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __movsd$MH() {
        return RuntimeHelper.requireNonNull(constants$51.__movsd$MH,"__movsd");
    }
    /**
     * {@snippet :
     * void __movsd(PDWORD Destination, const DWORD* Source, SIZE_T Count);
     * }
     */
    public static void __movsd(MemorySegment Destination, MemorySegment Source, long Count) {
        var mh$ = __movsd$MH();
        try {
            mh$.invokeExact(Destination, Source, Count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __movsq$MH() {
        return RuntimeHelper.requireNonNull(constants$51.__movsq$MH,"__movsq");
    }
    /**
     * {@snippet :
     * void __movsq(PDWORD64 Destination, const DWORD64* Source, SIZE_T Count);
     * }
     */
    public static void __movsq(MemorySegment Destination, MemorySegment Source, long Count) {
        var mh$ = __movsq$MH();
        try {
            mh$.invokeExact(Destination, Source, Count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __stosb$MH() {
        return RuntimeHelper.requireNonNull(constants$51.__stosb$MH,"__stosb");
    }
    /**
     * {@snippet :
     * void __stosb(PBYTE Destination, BYTE Value, SIZE_T Count);
     * }
     */
    public static void __stosb(MemorySegment Destination, byte Value, long Count) {
        var mh$ = __stosb$MH();
        try {
            mh$.invokeExact(Destination, Value, Count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __stosw$MH() {
        return RuntimeHelper.requireNonNull(constants$51.__stosw$MH,"__stosw");
    }
    /**
     * {@snippet :
     * void __stosw(PWORD Destination, WORD Value, SIZE_T Count);
     * }
     */
    public static void __stosw(MemorySegment Destination, short Value, long Count) {
        var mh$ = __stosw$MH();
        try {
            mh$.invokeExact(Destination, Value, Count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __stosd$MH() {
        return RuntimeHelper.requireNonNull(constants$51.__stosd$MH,"__stosd");
    }
    /**
     * {@snippet :
     * void __stosd(PDWORD Destination, DWORD Value, SIZE_T Count);
     * }
     */
    public static void __stosd(MemorySegment Destination, int Value, long Count) {
        var mh$ = __stosd$MH();
        try {
            mh$.invokeExact(Destination, Value, Count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __stosq$MH() {
        return RuntimeHelper.requireNonNull(constants$52.__stosq$MH,"__stosq");
    }
    /**
     * {@snippet :
     * void __stosq(PDWORD64 Destination, DWORD64 Value, SIZE_T Count);
     * }
     */
    public static void __stosq(MemorySegment Destination, long Value, long Count) {
        var mh$ = __stosq$MH();
        try {
            mh$.invokeExact(Destination, Value, Count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __mulh$MH() {
        return RuntimeHelper.requireNonNull(constants$52.__mulh$MH,"__mulh");
    }
    /**
     * {@snippet :
     * long long __mulh(LONG64 Multiplier, LONG64 Multiplicand);
     * }
     */
    public static long __mulh(long Multiplier, long Multiplicand) {
        var mh$ = __mulh$MH();
        try {
            return (long)mh$.invokeExact(Multiplier, Multiplicand);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __umulh$MH() {
        return RuntimeHelper.requireNonNull(constants$52.__umulh$MH,"__umulh");
    }
    /**
     * {@snippet :
     * unsigned long long __umulh(DWORD64 Multiplier, DWORD64 Multiplicand);
     * }
     */
    public static long __umulh(long Multiplier, long Multiplicand) {
        var mh$ = __umulh$MH();
        try {
            return (long)mh$.invokeExact(Multiplier, Multiplicand);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __popcnt64$MH() {
        return RuntimeHelper.requireNonNull(constants$52.__popcnt64$MH,"__popcnt64");
    }
    /**
     * {@snippet :
     * unsigned long long __popcnt64(DWORD64 operand);
     * }
     */
    public static long __popcnt64(long operand) {
        var mh$ = __popcnt64$MH();
        try {
            return (long)mh$.invokeExact(operand);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __shiftleft128$MH() {
        return RuntimeHelper.requireNonNull(constants$52.__shiftleft128$MH,"__shiftleft128");
    }
    /**
     * {@snippet :
     * unsigned long long __shiftleft128(DWORD64 LowPart, DWORD64 HighPart, BYTE Shift);
     * }
     */
    public static long __shiftleft128(long LowPart, long HighPart, byte Shift) {
        var mh$ = __shiftleft128$MH();
        try {
            return (long)mh$.invokeExact(LowPart, HighPart, Shift);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __shiftright128$MH() {
        return RuntimeHelper.requireNonNull(constants$52.__shiftright128$MH,"__shiftright128");
    }
    /**
     * {@snippet :
     * unsigned long long __shiftright128(DWORD64 LowPart, DWORD64 HighPart, BYTE Shift);
     * }
     */
    public static long __shiftright128(long LowPart, long HighPart, byte Shift) {
        var mh$ = __shiftright128$MH();
        try {
            return (long)mh$.invokeExact(LowPart, HighPart, Shift);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mul128$MH() {
        return RuntimeHelper.requireNonNull(constants$53._mul128$MH,"_mul128");
    }
    /**
     * {@snippet :
     * long long _mul128(LONG64 Multiplier, LONG64 Multiplicand, LONG64* HighProduct);
     * }
     */
    public static long _mul128(long Multiplier, long Multiplicand, MemorySegment HighProduct) {
        var mh$ = _mul128$MH();
        try {
            return (long)mh$.invokeExact(Multiplier, Multiplicand, HighProduct);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnsignedMultiply128$MH() {
        return RuntimeHelper.requireNonNull(constants$53.UnsignedMultiply128$MH,"UnsignedMultiply128");
    }
    /**
     * {@snippet :
     * DWORD64 UnsignedMultiply128(DWORD64 Multiplier, DWORD64 Multiplicand, DWORD64* HighProduct);
     * }
     */
    public static long UnsignedMultiply128(long Multiplier, long Multiplicand, MemorySegment HighProduct) {
        var mh$ = UnsignedMultiply128$MH();
        try {
            return (long)mh$.invokeExact(Multiplier, Multiplicand, HighProduct);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _umul128$MH() {
        return RuntimeHelper.requireNonNull(constants$53._umul128$MH,"_umul128");
    }
    /**
     * {@snippet :
     * unsigned long long _umul128(DWORD64 Multiplier, DWORD64 Multiplicand, DWORD64* HighProduct);
     * }
     */
    public static long _umul128(long Multiplier, long Multiplicand, MemorySegment HighProduct) {
        var mh$ = _umul128$MH();
        try {
            return (long)mh$.invokeExact(Multiplier, Multiplicand, HighProduct);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __readgsbyte$MH() {
        return RuntimeHelper.requireNonNull(constants$53.__readgsbyte$MH,"__readgsbyte");
    }
    /**
     * {@snippet :
     * unsigned char __readgsbyte(DWORD Offset);
     * }
     */
    public static byte __readgsbyte(int Offset) {
        var mh$ = __readgsbyte$MH();
        try {
            return (byte)mh$.invokeExact(Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __readgsword$MH() {
        return RuntimeHelper.requireNonNull(constants$53.__readgsword$MH,"__readgsword");
    }
    /**
     * {@snippet :
     * unsigned short __readgsword(DWORD Offset);
     * }
     */
    public static short __readgsword(int Offset) {
        var mh$ = __readgsword$MH();
        try {
            return (short)mh$.invokeExact(Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __readgsdword$MH() {
        return RuntimeHelper.requireNonNull(constants$53.__readgsdword$MH,"__readgsdword");
    }
    /**
     * {@snippet :
     * unsigned long __readgsdword(DWORD Offset);
     * }
     */
    public static int __readgsdword(int Offset) {
        var mh$ = __readgsdword$MH();
        try {
            return (int)mh$.invokeExact(Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __readgsqword$MH() {
        return RuntimeHelper.requireNonNull(constants$54.__readgsqword$MH,"__readgsqword");
    }
    /**
     * {@snippet :
     * unsigned long long __readgsqword(DWORD Offset);
     * }
     */
    public static long __readgsqword(int Offset) {
        var mh$ = __readgsqword$MH();
        try {
            return (long)mh$.invokeExact(Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __writegsbyte$MH() {
        return RuntimeHelper.requireNonNull(constants$54.__writegsbyte$MH,"__writegsbyte");
    }
    /**
     * {@snippet :
     * void __writegsbyte(DWORD Offset, BYTE Data);
     * }
     */
    public static void __writegsbyte(int Offset, byte Data) {
        var mh$ = __writegsbyte$MH();
        try {
            mh$.invokeExact(Offset, Data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __writegsword$MH() {
        return RuntimeHelper.requireNonNull(constants$54.__writegsword$MH,"__writegsword");
    }
    /**
     * {@snippet :
     * void __writegsword(DWORD Offset, WORD Data);
     * }
     */
    public static void __writegsword(int Offset, short Data) {
        var mh$ = __writegsword$MH();
        try {
            mh$.invokeExact(Offset, Data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __writegsdword$MH() {
        return RuntimeHelper.requireNonNull(constants$54.__writegsdword$MH,"__writegsdword");
    }
    /**
     * {@snippet :
     * void __writegsdword(DWORD Offset, DWORD Data);
     * }
     */
    public static void __writegsdword(int Offset, int Data) {
        var mh$ = __writegsdword$MH();
        try {
            mh$.invokeExact(Offset, Data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __writegsqword$MH() {
        return RuntimeHelper.requireNonNull(constants$54.__writegsqword$MH,"__writegsqword");
    }
    /**
     * {@snippet :
     * void __writegsqword(DWORD Offset, DWORD64 Data);
     * }
     */
    public static void __writegsqword(int Offset, long Data) {
        var mh$ = __writegsqword$MH();
        try {
            mh$.invokeExact(Offset, Data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __incgsbyte$MH() {
        return RuntimeHelper.requireNonNull(constants$54.__incgsbyte$MH,"__incgsbyte");
    }
    /**
     * {@snippet :
     * void __incgsbyte(DWORD Offset);
     * }
     */
    public static void __incgsbyte(int Offset) {
        var mh$ = __incgsbyte$MH();
        try {
            mh$.invokeExact(Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __addgsbyte$MH() {
        return RuntimeHelper.requireNonNull(constants$55.__addgsbyte$MH,"__addgsbyte");
    }
    /**
     * {@snippet :
     * void __addgsbyte(DWORD Offset, BYTE Value);
     * }
     */
    public static void __addgsbyte(int Offset, byte Value) {
        var mh$ = __addgsbyte$MH();
        try {
            mh$.invokeExact(Offset, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __incgsword$MH() {
        return RuntimeHelper.requireNonNull(constants$55.__incgsword$MH,"__incgsword");
    }
    /**
     * {@snippet :
     * void __incgsword(DWORD Offset);
     * }
     */
    public static void __incgsword(int Offset) {
        var mh$ = __incgsword$MH();
        try {
            mh$.invokeExact(Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __addgsword$MH() {
        return RuntimeHelper.requireNonNull(constants$55.__addgsword$MH,"__addgsword");
    }
    /**
     * {@snippet :
     * void __addgsword(DWORD Offset, WORD Value);
     * }
     */
    public static void __addgsword(int Offset, short Value) {
        var mh$ = __addgsword$MH();
        try {
            mh$.invokeExact(Offset, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __incgsdword$MH() {
        return RuntimeHelper.requireNonNull(constants$55.__incgsdword$MH,"__incgsdword");
    }
    /**
     * {@snippet :
     * void __incgsdword(DWORD Offset);
     * }
     */
    public static void __incgsdword(int Offset) {
        var mh$ = __incgsdword$MH();
        try {
            mh$.invokeExact(Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __addgsdword$MH() {
        return RuntimeHelper.requireNonNull(constants$55.__addgsdword$MH,"__addgsdword");
    }
    /**
     * {@snippet :
     * void __addgsdword(DWORD Offset, DWORD Value);
     * }
     */
    public static void __addgsdword(int Offset, int Value) {
        var mh$ = __addgsdword$MH();
        try {
            mh$.invokeExact(Offset, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __incgsqword$MH() {
        return RuntimeHelper.requireNonNull(constants$55.__incgsqword$MH,"__incgsqword");
    }
    /**
     * {@snippet :
     * void __incgsqword(DWORD Offset);
     * }
     */
    public static void __incgsqword(int Offset) {
        var mh$ = __incgsqword$MH();
        try {
            mh$.invokeExact(Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __addgsqword$MH() {
        return RuntimeHelper.requireNonNull(constants$56.__addgsqword$MH,"__addgsqword");
    }
    /**
     * {@snippet :
     * void __addgsqword(DWORD Offset, DWORD64 Value);
     * }
     */
    public static void __addgsqword(int Offset, long Value) {
        var mh$ = __addgsqword$MH();
        try {
            mh$.invokeExact(Offset, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _XSAVE_FORMAT* PXMM_SAVE_AREA32;
     * }
     */
    public static final OfAddress PXMM_SAVE_AREA32 = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _CONTEXT* PCONTEXT;
     * }
     */
    public static final OfAddress PCONTEXT = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _IMAGE_RUNTIME_FUNCTION_ENTRY* PRUNTIME_FUNCTION;
     * }
     */
    public static final OfAddress PRUNTIME_FUNCTION = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _SCOPE_TABLE_AMD64* PSCOPE_TABLE;
     * }
     */
    public static final OfAddress PSCOPE_TABLE = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _DISPATCHER_CONTEXT* PDISPATCHER_CONTEXT;
     * }
     */
    public static final OfAddress PDISPATCHER_CONTEXT = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _KNONVOLATILE_CONTEXT_POINTERS* PKNONVOLATILE_CONTEXT_POINTERS;
     * }
     */
    public static final OfAddress PKNONVOLATILE_CONTEXT_POINTERS = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _SCOPE_TABLE_ARM* PSCOPE_TABLE_ARM;
     * }
     */
    public static final OfAddress PSCOPE_TABLE_ARM = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _SCOPE_TABLE_ARM64* PSCOPE_TABLE_ARM64;
     * }
     */
    public static final OfAddress PSCOPE_TABLE_ARM64 = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef union _ARM64_NT_NEON128* PARM64_NT_NEON128;
     * }
     */
    public static final OfAddress PARM64_NT_NEON128 = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _ARM64_NT_CONTEXT* PARM64_NT_CONTEXT;
     * }
     */
    public static final OfAddress PARM64_NT_CONTEXT = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _ARM64EC_NT_CONTEXT* PARM64EC_NT_CONTEXT;
     * }
     */
    public static final OfAddress PARM64EC_NT_CONTEXT = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY* PARM64_RUNTIME_FUNCTION;
     * }
     */
    public static final OfAddress PARM64_RUNTIME_FUNCTION = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _DISPATCHER_CONTEXT_ARM64* PDISPATCHER_CONTEXT_ARM64;
     * }
     */
    public static final OfAddress PDISPATCHER_CONTEXT_ARM64 = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64* PKNONVOLATILE_CONTEXT_POINTERS_ARM64;
     * }
     */
    public static final OfAddress PKNONVOLATILE_CONTEXT_POINTERS_ARM64 = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle __int2c$MH() {
        return RuntimeHelper.requireNonNull(constants$58.__int2c$MH,"__int2c");
    }
    /**
     * {@snippet :
     * void __int2c();
     * }
     */
    public static void __int2c() {
        var mh$ = __int2c$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _LDT_ENTRY* PLDT_ENTRY;
     * }
     */
    public static final OfAddress PLDT_ENTRY = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _WOW64_FLOATING_SAVE_AREA* PWOW64_FLOATING_SAVE_AREA;
     * }
     */
    public static final OfAddress PWOW64_FLOATING_SAVE_AREA = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _WOW64_CONTEXT* PWOW64_CONTEXT;
     * }
     */
    public static final OfAddress PWOW64_CONTEXT = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _WOW64_LDT_ENTRY* PWOW64_LDT_ENTRY;
     * }
     */
    public static final OfAddress PWOW64_LDT_ENTRY = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _WOW64_DESCRIPTOR_TABLE_ENTRY* PWOW64_DESCRIPTOR_TABLE_ENTRY;
     * }
     */
    public static final OfAddress PWOW64_DESCRIPTOR_TABLE_ENTRY = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _EXCEPTION_RECORD* PEXCEPTION_RECORD;
     * }
     */
    public static final OfAddress PEXCEPTION_RECORD = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _EXCEPTION_RECORD32* PEXCEPTION_RECORD32;
     * }
     */
    public static final OfAddress PEXCEPTION_RECORD32 = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _EXCEPTION_RECORD64* PEXCEPTION_RECORD64;
     * }
     */
    public static final OfAddress PEXCEPTION_RECORD64 = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _EXCEPTION_POINTERS* PEXCEPTION_POINTERS;
     * }
     */
    public static final OfAddress PEXCEPTION_POINTERS = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef void* PACCESS_TOKEN;
     * }
     */
    public static final OfAddress PACCESS_TOKEN = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef void* PSECURITY_DESCRIPTOR;
     * }
     */
    public static final OfAddress PSECURITY_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef void* PSID;
     * }
     */
    public static final OfAddress PSID = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef void* PCLAIMS_BLOB;
     * }
     */
    public static final OfAddress PCLAIMS_BLOB = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long ACCESS_MASK;
     * }
     */
    public static final OfInt ACCESS_MASK = Constants$root.C_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long* PACCESS_MASK;
     * }
     */
    public static final OfAddress PACCESS_MASK = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _GENERIC_MAPPING* PGENERIC_MAPPING;
     * }
     */
    public static final OfAddress PGENERIC_MAPPING = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _LUID_AND_ATTRIBUTES* PLUID_AND_ATTRIBUTES;
     * }
     */
    public static final OfAddress PLUID_AND_ATTRIBUTES = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _LUID_AND_ATTRIBUTES *PLUID_AND_ATTRIBUTES_ARRAY[1];
     * }
     */
    public static final OfAddress PLUID_AND_ATTRIBUTES_ARRAY = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _SID_IDENTIFIER_AUTHORITY* PSID_IDENTIFIER_AUTHORITY;
     * }
     */
    public static final OfAddress PSID_IDENTIFIER_AUTHORITY = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _SID* PISID;
     * }
     */
    public static final OfAddress PISID = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef union _SE_SID* PSE_SID;
     * }
     */
    public static final OfAddress PSE_SID = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * enum _SID_NAME_USE.SidTypeUser = 1;
     * }
     */
    public static int SidTypeUser() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum _SID_NAME_USE.SidTypeGroup = 2;
     * }
     */
    public static int SidTypeGroup() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum _SID_NAME_USE.SidTypeDomain = 3;
     * }
     */
    public static int SidTypeDomain() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum _SID_NAME_USE.SidTypeAlias = 4;
     * }
     */
    public static int SidTypeAlias() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum _SID_NAME_USE.SidTypeWellKnownGroup = 5;
     * }
     */
    public static int SidTypeWellKnownGroup() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum _SID_NAME_USE.SidTypeDeletedAccount = 6;
     * }
     */
    public static int SidTypeDeletedAccount() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum _SID_NAME_USE.SidTypeInvalid = 7;
     * }
     */
    public static int SidTypeInvalid() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum _SID_NAME_USE.SidTypeUnknown = 8;
     * }
     */
    public static int SidTypeUnknown() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum _SID_NAME_USE.SidTypeComputer = 9;
     * }
     */
    public static int SidTypeComputer() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum _SID_NAME_USE.SidTypeLabel = 10;
     * }
     */
    public static int SidTypeLabel() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum _SID_NAME_USE.SidTypeLogonSession = 11;
     * }
     */
    public static int SidTypeLogonSession() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * typedef enum _SID_NAME_USE* PSID_NAME_USE;
     * }
     */
    public static final OfAddress PSID_NAME_USE = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _SID_AND_ATTRIBUTES* PSID_AND_ATTRIBUTES;
     * }
     */
    public static final OfAddress PSID_AND_ATTRIBUTES = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _SID_AND_ATTRIBUTES *PSID_AND_ATTRIBUTES_ARRAY[1];
     * }
     */
    public static final OfAddress PSID_AND_ATTRIBUTES_ARRAY = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long long SID_HASH_ENTRY;
     * }
     */
    public static final OfLong SID_HASH_ENTRY = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long long* PSID_HASH_ENTRY;
     * }
     */
    public static final OfAddress PSID_HASH_ENTRY = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _SID_AND_ATTRIBUTES_HASH* PSID_AND_ATTRIBUTES_HASH;
     * }
     */
    public static final OfAddress PSID_AND_ATTRIBUTES_HASH = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * enum .WinNullSid = 0;
     * }
     */
    public static int WinNullSid() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .WinWorldSid = 1;
     * }
     */
    public static int WinWorldSid() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .WinLocalSid = 2;
     * }
     */
    public static int WinLocalSid() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .WinCreatorOwnerSid = 3;
     * }
     */
    public static int WinCreatorOwnerSid() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .WinCreatorGroupSid = 4;
     * }
     */
    public static int WinCreatorGroupSid() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .WinCreatorOwnerServerSid = 5;
     * }
     */
    public static int WinCreatorOwnerServerSid() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum .WinCreatorGroupServerSid = 6;
     * }
     */
    public static int WinCreatorGroupServerSid() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum .WinNtAuthoritySid = 7;
     * }
     */
    public static int WinNtAuthoritySid() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum .WinDialupSid = 8;
     * }
     */
    public static int WinDialupSid() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum .WinNetworkSid = 9;
     * }
     */
    public static int WinNetworkSid() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum .WinBatchSid = 10;
     * }
     */
    public static int WinBatchSid() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum .WinInteractiveSid = 11;
     * }
     */
    public static int WinInteractiveSid() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum .WinServiceSid = 12;
     * }
     */
    public static int WinServiceSid() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * enum .WinAnonymousSid = 13;
     * }
     */
    public static int WinAnonymousSid() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * enum .WinProxySid = 14;
     * }
     */
    public static int WinProxySid() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * enum .WinEnterpriseControllersSid = 15;
     * }
     */
    public static int WinEnterpriseControllersSid() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * enum .WinSelfSid = 16;
     * }
     */
    public static int WinSelfSid() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum .WinAuthenticatedUserSid = 17;
     * }
     */
    public static int WinAuthenticatedUserSid() {
        return (int)17L;
    }
    /**
     * {@snippet :
     * enum .WinRestrictedCodeSid = 18;
     * }
     */
    public static int WinRestrictedCodeSid() {
        return (int)18L;
    }
    /**
     * {@snippet :
     * enum .WinTerminalServerSid = 19;
     * }
     */
    public static int WinTerminalServerSid() {
        return (int)19L;
    }
    /**
     * {@snippet :
     * enum .WinRemoteLogonIdSid = 20;
     * }
     */
    public static int WinRemoteLogonIdSid() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * enum .WinLogonIdsSid = 21;
     * }
     */
    public static int WinLogonIdsSid() {
        return (int)21L;
    }
    /**
     * {@snippet :
     * enum .WinLocalSystemSid = 22;
     * }
     */
    public static int WinLocalSystemSid() {
        return (int)22L;
    }
    /**
     * {@snippet :
     * enum .WinLocalServiceSid = 23;
     * }
     */
    public static int WinLocalServiceSid() {
        return (int)23L;
    }
    /**
     * {@snippet :
     * enum .WinNetworkServiceSid = 24;
     * }
     */
    public static int WinNetworkServiceSid() {
        return (int)24L;
    }
    /**
     * {@snippet :
     * enum .WinBuiltinDomainSid = 25;
     * }
     */
    public static int WinBuiltinDomainSid() {
        return (int)25L;
    }
    /**
     * {@snippet :
     * enum .WinBuiltinAdministratorsSid = 26;
     * }
     */
    public static int WinBuiltinAdministratorsSid() {
        return (int)26L;
    }
    /**
     * {@snippet :
     * enum .WinBuiltinUsersSid = 27;
     * }
     */
    public static int WinBuiltinUsersSid() {
        return (int)27L;
    }
    /**
     * {@snippet :
     * enum .WinBuiltinGuestsSid = 28;
     * }
     */
    public static int WinBuiltinGuestsSid() {
        return (int)28L;
    }
    /**
     * {@snippet :
     * enum .WinBuiltinPowerUsersSid = 29;
     * }
     */
    public static int WinBuiltinPowerUsersSid() {
        return (int)29L;
    }
    /**
     * {@snippet :
     * enum .WinBuiltinAccountOperatorsSid = 30;
     * }
     */
    public static int WinBuiltinAccountOperatorsSid() {
        return (int)30L;
    }
    /**
     * {@snippet :
     * enum .WinBuiltinSystemOperatorsSid = 31;
     * }
     */
    public static int WinBuiltinSystemOperatorsSid() {
        return (int)31L;
    }
    /**
     * {@snippet :
     * enum .WinBuiltinPrintOperatorsSid = 32;
     * }
     */
    public static int WinBuiltinPrintOperatorsSid() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * enum .WinBuiltinBackupOperatorsSid = 33;
     * }
     */
    public static int WinBuiltinBackupOperatorsSid() {
        return (int)33L;
    }
    /**
     * {@snippet :
     * enum .WinBuiltinReplicatorSid = 34;
     * }
     */
    public static int WinBuiltinReplicatorSid() {
        return (int)34L;
    }
    /**
     * {@snippet :
     * enum .WinBuiltinPreWindows2000CompatibleAccessSid = 35;
     * }
     */
    public static int WinBuiltinPreWindows2000CompatibleAccessSid() {
        return (int)35L;
    }
    /**
     * {@snippet :
     * enum .WinBuiltinRemoteDesktopUsersSid = 36;
     * }
     */
    public static int WinBuiltinRemoteDesktopUsersSid() {
        return (int)36L;
    }
    /**
     * {@snippet :
     * enum .WinBuiltinNetworkConfigurationOperatorsSid = 37;
     * }
     */
    public static int WinBuiltinNetworkConfigurationOperatorsSid() {
        return (int)37L;
    }
    /**
     * {@snippet :
     * enum .WinAccountAdministratorSid = 38;
     * }
     */
    public static int WinAccountAdministratorSid() {
        return (int)38L;
    }
    /**
     * {@snippet :
     * enum .WinAccountGuestSid = 39;
     * }
     */
    public static int WinAccountGuestSid() {
        return (int)39L;
    }
    /**
     * {@snippet :
     * enum .WinAccountKrbtgtSid = 40;
     * }
     */
    public static int WinAccountKrbtgtSid() {
        return (int)40L;
    }
    /**
     * {@snippet :
     * enum .WinAccountDomainAdminsSid = 41;
     * }
     */
    public static int WinAccountDomainAdminsSid() {
        return (int)41L;
    }
    /**
     * {@snippet :
     * enum .WinAccountDomainUsersSid = 42;
     * }
     */
    public static int WinAccountDomainUsersSid() {
        return (int)42L;
    }
    /**
     * {@snippet :
     * enum .WinAccountDomainGuestsSid = 43;
     * }
     */
    public static int WinAccountDomainGuestsSid() {
        return (int)43L;
    }
    /**
     * {@snippet :
     * enum .WinAccountComputersSid = 44;
     * }
     */
    public static int WinAccountComputersSid() {
        return (int)44L;
    }
    /**
     * {@snippet :
     * enum .WinAccountControllersSid = 45;
     * }
     */
    public static int WinAccountControllersSid() {
        return (int)45L;
    }
    /**
     * {@snippet :
     * enum .WinAccountCertAdminsSid = 46;
     * }
     */
    public static int WinAccountCertAdminsSid() {
        return (int)46L;
    }
    /**
     * {@snippet :
     * enum .WinAccountSchemaAdminsSid = 47;
     * }
     */
    public static int WinAccountSchemaAdminsSid() {
        return (int)47L;
    }
    /**
     * {@snippet :
     * enum .WinAccountEnterpriseAdminsSid = 48;
     * }
     */
    public static int WinAccountEnterpriseAdminsSid() {
        return (int)48L;
    }
    /**
     * {@snippet :
     * enum .WinAccountPolicyAdminsSid = 49;
     * }
     */
    public static int WinAccountPolicyAdminsSid() {
        return (int)49L;
    }
    /**
     * {@snippet :
     * enum .WinAccountRasAndIasServersSid = 50;
     * }
     */
    public static int WinAccountRasAndIasServersSid() {
        return (int)50L;
    }
    /**
     * {@snippet :
     * enum .WinNTLMAuthenticationSid = 51;
     * }
     */
    public static int WinNTLMAuthenticationSid() {
        return (int)51L;
    }
    /**
     * {@snippet :
     * enum .WinDigestAuthenticationSid = 52;
     * }
     */
    public static int WinDigestAuthenticationSid() {
        return (int)52L;
    }
    /**
     * {@snippet :
     * enum .WinSChannelAuthenticationSid = 53;
     * }
     */
    public static int WinSChannelAuthenticationSid() {
        return (int)53L;
    }
    /**
     * {@snippet :
     * enum .WinThisOrganizationSid = 54;
     * }
     */
    public static int WinThisOrganizationSid() {
        return (int)54L;
    }
    /**
     * {@snippet :
     * enum .WinOtherOrganizationSid = 55;
     * }
     */
    public static int WinOtherOrganizationSid() {
        return (int)55L;
    }
    /**
     * {@snippet :
     * enum .WinBuiltinIncomingForestTrustBuildersSid = 56;
     * }
     */
    public static int WinBuiltinIncomingForestTrustBuildersSid() {
        return (int)56L;
    }
    /**
     * {@snippet :
     * enum .WinBuiltinPerfMonitoringUsersSid = 57;
     * }
     */
    public static int WinBuiltinPerfMonitoringUsersSid() {
        return (int)57L;
    }
    /**
     * {@snippet :
     * enum .WinBuiltinPerfLoggingUsersSid = 58;
     * }
     */
    public static int WinBuiltinPerfLoggingUsersSid() {
        return (int)58L;
    }
    /**
     * {@snippet :
     * enum .WinBuiltinAuthorizationAccessSid = 59;
     * }
     */
    public static int WinBuiltinAuthorizationAccessSid() {
        return (int)59L;
    }
    /**
     * {@snippet :
     * enum .WinBuiltinTerminalServerLicenseServersSid = 60;
     * }
     */
    public static int WinBuiltinTerminalServerLicenseServersSid() {
        return (int)60L;
    }
    /**
     * {@snippet :
     * enum .WinBuiltinDCOMUsersSid = 61;
     * }
     */
    public static int WinBuiltinDCOMUsersSid() {
        return (int)61L;
    }
    /**
     * {@snippet :
     * enum .WinBuiltinIUsersSid = 62;
     * }
     */
    public static int WinBuiltinIUsersSid() {
        return (int)62L;
    }
    /**
     * {@snippet :
     * enum .WinIUserSid = 63;
     * }
     */
    public static int WinIUserSid() {
        return (int)63L;
    }
    /**
     * {@snippet :
     * enum .WinBuiltinCryptoOperatorsSid = 64;
     * }
     */
    public static int WinBuiltinCryptoOperatorsSid() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * enum .WinUntrustedLabelSid = 65;
     * }
     */
    public static int WinUntrustedLabelSid() {
        return (int)65L;
    }
    /**
     * {@snippet :
     * enum .WinLowLabelSid = 66;
     * }
     */
    public static int WinLowLabelSid() {
        return (int)66L;
    }
    /**
     * {@snippet :
     * enum .WinMediumLabelSid = 67;
     * }
     */
    public static int WinMediumLabelSid() {
        return (int)67L;
    }
    /**
     * {@snippet :
     * enum .WinHighLabelSid = 68;
     * }
     */
    public static int WinHighLabelSid() {
        return (int)68L;
    }
    /**
     * {@snippet :
     * enum .WinSystemLabelSid = 69;
     * }
     */
    public static int WinSystemLabelSid() {
        return (int)69L;
    }
    /**
     * {@snippet :
     * enum .WinWriteRestrictedCodeSid = 70;
     * }
     */
    public static int WinWriteRestrictedCodeSid() {
        return (int)70L;
    }
    /**
     * {@snippet :
     * enum .WinCreatorOwnerRightsSid = 71;
     * }
     */
    public static int WinCreatorOwnerRightsSid() {
        return (int)71L;
    }
    /**
     * {@snippet :
     * enum .WinCacheablePrincipalsGroupSid = 72;
     * }
     */
    public static int WinCacheablePrincipalsGroupSid() {
        return (int)72L;
    }
    /**
     * {@snippet :
     * enum .WinNonCacheablePrincipalsGroupSid = 73;
     * }
     */
    public static int WinNonCacheablePrincipalsGroupSid() {
        return (int)73L;
    }
    /**
     * {@snippet :
     * enum .WinEnterpriseReadonlyControllersSid = 74;
     * }
     */
    public static int WinEnterpriseReadonlyControllersSid() {
        return (int)74L;
    }
    /**
     * {@snippet :
     * enum .WinAccountReadonlyControllersSid = 75;
     * }
     */
    public static int WinAccountReadonlyControllersSid() {
        return (int)75L;
    }
    /**
     * {@snippet :
     * enum .WinBuiltinEventLogReadersGroup = 76;
     * }
     */
    public static int WinBuiltinEventLogReadersGroup() {
        return (int)76L;
    }
    /**
     * {@snippet :
     * enum .WinNewEnterpriseReadonlyControllersSid = 77;
     * }
     */
    public static int WinNewEnterpriseReadonlyControllersSid() {
        return (int)77L;
    }
    /**
     * {@snippet :
     * enum .WinBuiltinCertSvcDComAccessGroup = 78;
     * }
     */
    public static int WinBuiltinCertSvcDComAccessGroup() {
        return (int)78L;
    }
    /**
     * {@snippet :
     * enum .WinMediumPlusLabelSid = 79;
     * }
     */
    public static int WinMediumPlusLabelSid() {
        return (int)79L;
    }
    /**
     * {@snippet :
     * enum .WinLocalLogonSid = 80;
     * }
     */
    public static int WinLocalLogonSid() {
        return (int)80L;
    }
    /**
     * {@snippet :
     * enum .WinConsoleLogonSid = 81;
     * }
     */
    public static int WinConsoleLogonSid() {
        return (int)81L;
    }
    /**
     * {@snippet :
     * enum .WinThisOrganizationCertificateSid = 82;
     * }
     */
    public static int WinThisOrganizationCertificateSid() {
        return (int)82L;
    }
    /**
     * {@snippet :
     * enum .WinApplicationPackageAuthoritySid = 83;
     * }
     */
    public static int WinApplicationPackageAuthoritySid() {
        return (int)83L;
    }
    /**
     * {@snippet :
     * enum .WinBuiltinAnyPackageSid = 84;
     * }
     */
    public static int WinBuiltinAnyPackageSid() {
        return (int)84L;
    }
    /**
     * {@snippet :
     * enum .WinCapabilityInternetClientSid = 85;
     * }
     */
    public static int WinCapabilityInternetClientSid() {
        return (int)85L;
    }
    /**
     * {@snippet :
     * enum .WinCapabilityInternetClientServerSid = 86;
     * }
     */
    public static int WinCapabilityInternetClientServerSid() {
        return (int)86L;
    }
    /**
     * {@snippet :
     * enum .WinCapabilityPrivateNetworkClientServerSid = 87;
     * }
     */
    public static int WinCapabilityPrivateNetworkClientServerSid() {
        return (int)87L;
    }
    /**
     * {@snippet :
     * enum .WinCapabilityPicturesLibrarySid = 88;
     * }
     */
    public static int WinCapabilityPicturesLibrarySid() {
        return (int)88L;
    }
    /**
     * {@snippet :
     * enum .WinCapabilityVideosLibrarySid = 89;
     * }
     */
    public static int WinCapabilityVideosLibrarySid() {
        return (int)89L;
    }
    /**
     * {@snippet :
     * enum .WinCapabilityMusicLibrarySid = 90;
     * }
     */
    public static int WinCapabilityMusicLibrarySid() {
        return (int)90L;
    }
    /**
     * {@snippet :
     * enum .WinCapabilityDocumentsLibrarySid = 91;
     * }
     */
    public static int WinCapabilityDocumentsLibrarySid() {
        return (int)91L;
    }
    /**
     * {@snippet :
     * enum .WinCapabilitySharedUserCertificatesSid = 92;
     * }
     */
    public static int WinCapabilitySharedUserCertificatesSid() {
        return (int)92L;
    }
    /**
     * {@snippet :
     * enum .WinCapabilityEnterpriseAuthenticationSid = 93;
     * }
     */
    public static int WinCapabilityEnterpriseAuthenticationSid() {
        return (int)93L;
    }
    /**
     * {@snippet :
     * enum .WinCapabilityRemovableStorageSid = 94;
     * }
     */
    public static int WinCapabilityRemovableStorageSid() {
        return (int)94L;
    }
    /**
     * {@snippet :
     * enum .WinBuiltinRDSRemoteAccessServersSid = 95;
     * }
     */
    public static int WinBuiltinRDSRemoteAccessServersSid() {
        return (int)95L;
    }
    /**
     * {@snippet :
     * enum .WinBuiltinRDSEndpointServersSid = 96;
     * }
     */
    public static int WinBuiltinRDSEndpointServersSid() {
        return (int)96L;
    }
    /**
     * {@snippet :
     * enum .WinBuiltinRDSManagementServersSid = 97;
     * }
     */
    public static int WinBuiltinRDSManagementServersSid() {
        return (int)97L;
    }
    /**
     * {@snippet :
     * enum .WinUserModeDriversSid = 98;
     * }
     */
    public static int WinUserModeDriversSid() {
        return (int)98L;
    }
    /**
     * {@snippet :
     * enum .WinBuiltinHyperVAdminsSid = 99;
     * }
     */
    public static int WinBuiltinHyperVAdminsSid() {
        return (int)99L;
    }
    /**
     * {@snippet :
     * enum .WinAccountCloneableControllersSid = 100;
     * }
     */
    public static int WinAccountCloneableControllersSid() {
        return (int)100L;
    }
    /**
     * {@snippet :
     * enum .WinBuiltinAccessControlAssistanceOperatorsSid = 101;
     * }
     */
    public static int WinBuiltinAccessControlAssistanceOperatorsSid() {
        return (int)101L;
    }
    /**
     * {@snippet :
     * enum .WinBuiltinRemoteManagementUsersSid = 102;
     * }
     */
    public static int WinBuiltinRemoteManagementUsersSid() {
        return (int)102L;
    }
    /**
     * {@snippet :
     * enum .WinAuthenticationAuthorityAssertedSid = 103;
     * }
     */
    public static int WinAuthenticationAuthorityAssertedSid() {
        return (int)103L;
    }
    /**
     * {@snippet :
     * enum .WinAuthenticationServiceAssertedSid = 104;
     * }
     */
    public static int WinAuthenticationServiceAssertedSid() {
        return (int)104L;
    }
    /**
     * {@snippet :
     * enum .WinLocalAccountSid = 105;
     * }
     */
    public static int WinLocalAccountSid() {
        return (int)105L;
    }
    /**
     * {@snippet :
     * enum .WinLocalAccountAndAdministratorSid = 106;
     * }
     */
    public static int WinLocalAccountAndAdministratorSid() {
        return (int)106L;
    }
    /**
     * {@snippet :
     * enum .WinAccountProtectedUsersSid = 107;
     * }
     */
    public static int WinAccountProtectedUsersSid() {
        return (int)107L;
    }
    /**
     * {@snippet :
     * enum .WinCapabilityAppointmentsSid = 108;
     * }
     */
    public static int WinCapabilityAppointmentsSid() {
        return (int)108L;
    }
    /**
     * {@snippet :
     * enum .WinCapabilityContactsSid = 109;
     * }
     */
    public static int WinCapabilityContactsSid() {
        return (int)109L;
    }
    /**
     * {@snippet :
     * enum .WinAccountDefaultSystemManagedSid = 110;
     * }
     */
    public static int WinAccountDefaultSystemManagedSid() {
        return (int)110L;
    }
    /**
     * {@snippet :
     * enum .WinBuiltinDefaultSystemManagedGroupSid = 111;
     * }
     */
    public static int WinBuiltinDefaultSystemManagedGroupSid() {
        return (int)111L;
    }
    /**
     * {@snippet :
     * enum .WinBuiltinStorageReplicaAdminsSid = 112;
     * }
     */
    public static int WinBuiltinStorageReplicaAdminsSid() {
        return (int)112L;
    }
    /**
     * {@snippet :
     * enum .WinAccountKeyAdminsSid = 113;
     * }
     */
    public static int WinAccountKeyAdminsSid() {
        return (int)113L;
    }
    /**
     * {@snippet :
     * enum .WinAccountEnterpriseKeyAdminsSid = 114;
     * }
     */
    public static int WinAccountEnterpriseKeyAdminsSid() {
        return (int)114L;
    }
    /**
     * {@snippet :
     * enum .WinAuthenticationKeyTrustSid = 115;
     * }
     */
    public static int WinAuthenticationKeyTrustSid() {
        return (int)115L;
    }
    /**
     * {@snippet :
     * enum .WinAuthenticationKeyPropertyMFASid = 116;
     * }
     */
    public static int WinAuthenticationKeyPropertyMFASid() {
        return (int)116L;
    }
    /**
     * {@snippet :
     * enum .WinAuthenticationKeyPropertyAttestationSid = 117;
     * }
     */
    public static int WinAuthenticationKeyPropertyAttestationSid() {
        return (int)117L;
    }
    /**
     * {@snippet :
     * enum .WinAuthenticationFreshKeyAuthSid = 118;
     * }
     */
    public static int WinAuthenticationFreshKeyAuthSid() {
        return (int)118L;
    }
    /**
     * {@snippet :
     * enum .WinBuiltinDeviceOwnersSid = 119;
     * }
     */
    public static int WinBuiltinDeviceOwnersSid() {
        return (int)119L;
    }
    /**
     * {@snippet :
     * typedef struct _ACL* PACL;
     * }
     */
    public static final OfAddress PACL = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _ACE_HEADER* PACE_HEADER;
     * }
     */
    public static final OfAddress PACE_HEADER = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _ACCESS_ALLOWED_ACE* PACCESS_ALLOWED_ACE;
     * }
     */
    public static final OfAddress PACCESS_ALLOWED_ACE = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _ACCESS_DENIED_ACE* PACCESS_DENIED_ACE;
     * }
     */
    public static final OfAddress PACCESS_DENIED_ACE = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _SYSTEM_AUDIT_ACE* PSYSTEM_AUDIT_ACE;
     * }
     */
    public static final OfAddress PSYSTEM_AUDIT_ACE = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _SYSTEM_ALARM_ACE* PSYSTEM_ALARM_ACE;
     * }
     */
    public static final OfAddress PSYSTEM_ALARM_ACE = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _SYSTEM_RESOURCE_ATTRIBUTE_ACE* PSYSTEM_RESOURCE_ATTRIBUTE_ACE;
     * }
     */
    public static final OfAddress PSYSTEM_RESOURCE_ATTRIBUTE_ACE = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _SYSTEM_SCOPED_POLICY_ID_ACE* PSYSTEM_SCOPED_POLICY_ID_ACE;
     * }
     */
    public static final OfAddress PSYSTEM_SCOPED_POLICY_ID_ACE = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _SYSTEM_MANDATORY_LABEL_ACE* PSYSTEM_MANDATORY_LABEL_ACE;
     * }
     */
    public static final OfAddress PSYSTEM_MANDATORY_LABEL_ACE = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _SYSTEM_PROCESS_TRUST_LABEL_ACE* PSYSTEM_PROCESS_TRUST_LABEL_ACE;
     * }
     */
    public static final OfAddress PSYSTEM_PROCESS_TRUST_LABEL_ACE = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _SYSTEM_ACCESS_FILTER_ACE* PSYSTEM_ACCESS_FILTER_ACE;
     * }
     */
    public static final OfAddress PSYSTEM_ACCESS_FILTER_ACE = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _ACCESS_ALLOWED_OBJECT_ACE* PACCESS_ALLOWED_OBJECT_ACE;
     * }
     */
    public static final OfAddress PACCESS_ALLOWED_OBJECT_ACE = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _ACCESS_DENIED_OBJECT_ACE* PACCESS_DENIED_OBJECT_ACE;
     * }
     */
    public static final OfAddress PACCESS_DENIED_OBJECT_ACE = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _SYSTEM_AUDIT_OBJECT_ACE* PSYSTEM_AUDIT_OBJECT_ACE;
     * }
     */
    public static final OfAddress PSYSTEM_AUDIT_OBJECT_ACE = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _SYSTEM_ALARM_OBJECT_ACE* PSYSTEM_ALARM_OBJECT_ACE;
     * }
     */
    public static final OfAddress PSYSTEM_ALARM_OBJECT_ACE = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _ACCESS_ALLOWED_CALLBACK_ACE* PACCESS_ALLOWED_CALLBACK_ACE;
     * }
     */
    public static final OfAddress PACCESS_ALLOWED_CALLBACK_ACE = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _ACCESS_DENIED_CALLBACK_ACE* PACCESS_DENIED_CALLBACK_ACE;
     * }
     */
    public static final OfAddress PACCESS_DENIED_CALLBACK_ACE = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _SYSTEM_AUDIT_CALLBACK_ACE* PSYSTEM_AUDIT_CALLBACK_ACE;
     * }
     */
    public static final OfAddress PSYSTEM_AUDIT_CALLBACK_ACE = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _SYSTEM_ALARM_CALLBACK_ACE* PSYSTEM_ALARM_CALLBACK_ACE;
     * }
     */
    public static final OfAddress PSYSTEM_ALARM_CALLBACK_ACE = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE* PACCESS_ALLOWED_CALLBACK_OBJECT_ACE;
     * }
     */
    public static final OfAddress PACCESS_ALLOWED_CALLBACK_OBJECT_ACE = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _ACCESS_DENIED_CALLBACK_OBJECT_ACE* PACCESS_DENIED_CALLBACK_OBJECT_ACE;
     * }
     */
    public static final OfAddress PACCESS_DENIED_CALLBACK_OBJECT_ACE = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE* PSYSTEM_AUDIT_CALLBACK_OBJECT_ACE;
     * }
     */
    public static final OfAddress PSYSTEM_AUDIT_CALLBACK_OBJECT_ACE = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _SYSTEM_ALARM_CALLBACK_OBJECT_ACE* PSYSTEM_ALARM_CALLBACK_OBJECT_ACE;
     * }
     */
    public static final OfAddress PSYSTEM_ALARM_CALLBACK_OBJECT_ACE = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * enum _ACL_INFORMATION_CLASS.AclRevisionInformation = 1;
     * }
     */
    public static int AclRevisionInformation() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum _ACL_INFORMATION_CLASS.AclSizeInformation = 2;
     * }
     */
    public static int AclSizeInformation() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * typedef struct _ACL_REVISION_INFORMATION* PACL_REVISION_INFORMATION;
     * }
     */
    public static final OfAddress PACL_REVISION_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _ACL_SIZE_INFORMATION* PACL_SIZE_INFORMATION;
     * }
     */
    public static final OfAddress PACL_SIZE_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short SECURITY_DESCRIPTOR_CONTROL;
     * }
     */
    public static final OfShort SECURITY_DESCRIPTOR_CONTROL = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short* PSECURITY_DESCRIPTOR_CONTROL;
     * }
     */
    public static final OfAddress PSECURITY_DESCRIPTOR_CONTROL = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _SECURITY_DESCRIPTOR_RELATIVE* PISECURITY_DESCRIPTOR_RELATIVE;
     * }
     */
    public static final OfAddress PISECURITY_DESCRIPTOR_RELATIVE = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _SECURITY_DESCRIPTOR* PISECURITY_DESCRIPTOR;
     * }
     */
    public static final OfAddress PISECURITY_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _SECURITY_OBJECT_AI_PARAMS* PSECURITY_OBJECT_AI_PARAMS;
     * }
     */
    public static final OfAddress PSECURITY_OBJECT_AI_PARAMS = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _OBJECT_TYPE_LIST* POBJECT_TYPE_LIST;
     * }
     */
    public static final OfAddress POBJECT_TYPE_LIST = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * enum _AUDIT_EVENT_TYPE.AuditEventObjectAccess = 0;
     * }
     */
    public static int AuditEventObjectAccess() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum _AUDIT_EVENT_TYPE.AuditEventDirectoryServiceAccess = 1;
     * }
     */
    public static int AuditEventDirectoryServiceAccess() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * typedef enum _AUDIT_EVENT_TYPE* PAUDIT_EVENT_TYPE;
     * }
     */
    public static final OfAddress PAUDIT_EVENT_TYPE = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _PRIVILEGE_SET* PPRIVILEGE_SET;
     * }
     */
    public static final OfAddress PPRIVILEGE_SET = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * enum _ACCESS_REASON_TYPE.AccessReasonNone = 0;
     * }
     */
    public static int AccessReasonNone() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum _ACCESS_REASON_TYPE.AccessReasonAllowedAce = 65536;
     * }
     */
    public static int AccessReasonAllowedAce() {
        return (int)65536L;
    }
    /**
     * {@snippet :
     * enum _ACCESS_REASON_TYPE.AccessReasonDeniedAce = 131072;
     * }
     */
    public static int AccessReasonDeniedAce() {
        return (int)131072L;
    }
    /**
     * {@snippet :
     * enum _ACCESS_REASON_TYPE.AccessReasonAllowedParentAce = 196608;
     * }
     */
    public static int AccessReasonAllowedParentAce() {
        return (int)196608L;
    }
    /**
     * {@snippet :
     * enum _ACCESS_REASON_TYPE.AccessReasonDeniedParentAce = 262144;
     * }
     */
    public static int AccessReasonDeniedParentAce() {
        return (int)262144L;
    }
    /**
     * {@snippet :
     * enum _ACCESS_REASON_TYPE.AccessReasonNotGrantedByCape = 327680;
     * }
     */
    public static int AccessReasonNotGrantedByCape() {
        return (int)327680L;
    }
    /**
     * {@snippet :
     * enum _ACCESS_REASON_TYPE.AccessReasonNotGrantedByParentCape = 393216;
     * }
     */
    public static int AccessReasonNotGrantedByParentCape() {
        return (int)393216L;
    }
    /**
     * {@snippet :
     * enum _ACCESS_REASON_TYPE.AccessReasonNotGrantedToAppContainer = 458752;
     * }
     */
    public static int AccessReasonNotGrantedToAppContainer() {
        return (int)458752L;
    }
    /**
     * {@snippet :
     * enum _ACCESS_REASON_TYPE.AccessReasonMissingPrivilege = 1048576;
     * }
     */
    public static int AccessReasonMissingPrivilege() {
        return (int)1048576L;
    }
    /**
     * {@snippet :
     * enum _ACCESS_REASON_TYPE.AccessReasonFromPrivilege = 2097152;
     * }
     */
    public static int AccessReasonFromPrivilege() {
        return (int)2097152L;
    }
    /**
     * {@snippet :
     * enum _ACCESS_REASON_TYPE.AccessReasonIntegrityLevel = 3145728;
     * }
     */
    public static int AccessReasonIntegrityLevel() {
        return (int)3145728L;
    }
    /**
     * {@snippet :
     * enum _ACCESS_REASON_TYPE.AccessReasonOwnership = 4194304;
     * }
     */
    public static int AccessReasonOwnership() {
        return (int)4194304L;
    }
    /**
     * {@snippet :
     * enum _ACCESS_REASON_TYPE.AccessReasonNullDacl = 5242880;
     * }
     */
    public static int AccessReasonNullDacl() {
        return (int)5242880L;
    }
    /**
     * {@snippet :
     * enum _ACCESS_REASON_TYPE.AccessReasonEmptyDacl = 6291456;
     * }
     */
    public static int AccessReasonEmptyDacl() {
        return (int)6291456L;
    }
    /**
     * {@snippet :
     * enum _ACCESS_REASON_TYPE.AccessReasonNoSD = 7340032;
     * }
     */
    public static int AccessReasonNoSD() {
        return (int)7340032L;
    }
    /**
     * {@snippet :
     * enum _ACCESS_REASON_TYPE.AccessReasonNoGrant = 8388608;
     * }
     */
    public static int AccessReasonNoGrant() {
        return (int)8388608L;
    }
    /**
     * {@snippet :
     * enum _ACCESS_REASON_TYPE.AccessReasonTrustLabel = 9437184;
     * }
     */
    public static int AccessReasonTrustLabel() {
        return (int)9437184L;
    }
    /**
     * {@snippet :
     * enum _ACCESS_REASON_TYPE.AccessReasonFilterAce = 10485760;
     * }
     */
    public static int AccessReasonFilterAce() {
        return (int)10485760L;
    }
    /**
     * {@snippet :
     * typedef unsigned long ACCESS_REASON;
     * }
     */
    public static final OfInt ACCESS_REASON = Constants$root.C_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _ACCESS_REASONS* PACCESS_REASONS;
     * }
     */
    public static final OfAddress PACCESS_REASONS = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _SE_SECURITY_DESCRIPTOR* PSE_SECURITY_DESCRIPTOR;
     * }
     */
    public static final OfAddress PSE_SECURITY_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _SE_ACCESS_REQUEST* PSE_ACCESS_REQUEST;
     * }
     */
    public static final OfAddress PSE_ACCESS_REQUEST = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _SE_ACCESS_REPLY* PSE_ACCESS_REPLY;
     * }
     */
    public static final OfAddress PSE_ACCESS_REPLY = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * enum _SECURITY_IMPERSONATION_LEVEL.SecurityAnonymous = 0;
     * }
     */
    public static int SecurityAnonymous() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum _SECURITY_IMPERSONATION_LEVEL.SecurityIdentification = 1;
     * }
     */
    public static int SecurityIdentification() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum _SECURITY_IMPERSONATION_LEVEL.SecurityImpersonation = 2;
     * }
     */
    public static int SecurityImpersonation() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum _SECURITY_IMPERSONATION_LEVEL.SecurityDelegation = 3;
     * }
     */
    public static int SecurityDelegation() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * typedef enum _SECURITY_IMPERSONATION_LEVEL* PSECURITY_IMPERSONATION_LEVEL;
     * }
     */
    public static final OfAddress PSECURITY_IMPERSONATION_LEVEL = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * enum _TOKEN_TYPE.TokenPrimary = 1;
     * }
     */
    public static int TokenPrimary() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum _TOKEN_TYPE.TokenImpersonation = 2;
     * }
     */
    public static int TokenImpersonation() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * typedef enum _TOKEN_TYPE* PTOKEN_TYPE;
     * }
     */
    public static final OfAddress PTOKEN_TYPE = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * enum _TOKEN_ELEVATION_TYPE.TokenElevationTypeDefault = 1;
     * }
     */
    public static int TokenElevationTypeDefault() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum _TOKEN_ELEVATION_TYPE.TokenElevationTypeFull = 2;
     * }
     */
    public static int TokenElevationTypeFull() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum _TOKEN_ELEVATION_TYPE.TokenElevationTypeLimited = 3;
     * }
     */
    public static int TokenElevationTypeLimited() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * typedef enum _TOKEN_ELEVATION_TYPE* PTOKEN_ELEVATION_TYPE;
     * }
     */
    public static final OfAddress PTOKEN_ELEVATION_TYPE = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * enum _TOKEN_INFORMATION_CLASS.TokenUser = 1;
     * }
     */
    public static int TokenUser() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum _TOKEN_INFORMATION_CLASS.TokenGroups = 2;
     * }
     */
    public static int TokenGroups() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum _TOKEN_INFORMATION_CLASS.TokenPrivileges = 3;
     * }
     */
    public static int TokenPrivileges() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum _TOKEN_INFORMATION_CLASS.TokenOwner = 4;
     * }
     */
    public static int TokenOwner() {
        return (int)4L;
    }
}


