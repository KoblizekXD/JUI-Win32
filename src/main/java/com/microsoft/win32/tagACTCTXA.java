// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct tagACTCTXA {
 *     ULONG cbSize;
 *     DWORD dwFlags;
 *     LPCSTR lpSource;
 *     USHORT wProcessorArchitecture;
 *     LANGID wLangId;
 *     LPCSTR lpAssemblyDirectory;
 *     LPCSTR lpResourceName;
 *     LPCSTR lpApplicationName;
 *     HMODULE hModule;
 * };
 * }
 */
public class tagACTCTXA {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("cbSize"),
        Constants$root.C_LONG$LAYOUT.withName("dwFlags"),
        Constants$root.C_POINTER$LAYOUT.withName("lpSource"),
        Constants$root.C_SHORT$LAYOUT.withName("wProcessorArchitecture"),
        Constants$root.C_SHORT$LAYOUT.withName("wLangId"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("lpAssemblyDirectory"),
        Constants$root.C_POINTER$LAYOUT.withName("lpResourceName"),
        Constants$root.C_POINTER$LAYOUT.withName("lpApplicationName"),
        Constants$root.C_POINTER$LAYOUT.withName("hModule")
    ).withName("tagACTCTXA");
    public static MemoryLayout $LAYOUT() {
        return tagACTCTXA.$struct$LAYOUT;
    }
    static final VarHandle cbSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cbSize"));
    public static VarHandle cbSize$VH() {
        return tagACTCTXA.cbSize$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG cbSize;
     * }
     */
    public static int cbSize$get(MemorySegment seg) {
        return (int)tagACTCTXA.cbSize$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG cbSize;
     * }
     */
    public static void cbSize$set(MemorySegment seg, int x) {
        tagACTCTXA.cbSize$VH.set(seg, x);
    }
    public static int cbSize$get(MemorySegment seg, long index) {
        return (int)tagACTCTXA.cbSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cbSize$set(MemorySegment seg, long index, int x) {
        tagACTCTXA.cbSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwFlags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwFlags"));
    public static VarHandle dwFlags$VH() {
        return tagACTCTXA.dwFlags$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwFlags;
     * }
     */
    public static int dwFlags$get(MemorySegment seg) {
        return (int)tagACTCTXA.dwFlags$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwFlags;
     * }
     */
    public static void dwFlags$set(MemorySegment seg, int x) {
        tagACTCTXA.dwFlags$VH.set(seg, x);
    }
    public static int dwFlags$get(MemorySegment seg, long index) {
        return (int)tagACTCTXA.dwFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwFlags$set(MemorySegment seg, long index, int x) {
        tagACTCTXA.dwFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lpSource$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lpSource"));
    public static VarHandle lpSource$VH() {
        return tagACTCTXA.lpSource$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPCSTR lpSource;
     * }
     */
    public static MemorySegment lpSource$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)tagACTCTXA.lpSource$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPCSTR lpSource;
     * }
     */
    public static void lpSource$set(MemorySegment seg, MemorySegment x) {
        tagACTCTXA.lpSource$VH.set(seg, x);
    }
    public static MemorySegment lpSource$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)tagACTCTXA.lpSource$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpSource$set(MemorySegment seg, long index, MemorySegment x) {
        tagACTCTXA.lpSource$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle wProcessorArchitecture$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("wProcessorArchitecture"));
    public static VarHandle wProcessorArchitecture$VH() {
        return tagACTCTXA.wProcessorArchitecture$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * USHORT wProcessorArchitecture;
     * }
     */
    public static short wProcessorArchitecture$get(MemorySegment seg) {
        return (short)tagACTCTXA.wProcessorArchitecture$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * USHORT wProcessorArchitecture;
     * }
     */
    public static void wProcessorArchitecture$set(MemorySegment seg, short x) {
        tagACTCTXA.wProcessorArchitecture$VH.set(seg, x);
    }
    public static short wProcessorArchitecture$get(MemorySegment seg, long index) {
        return (short)tagACTCTXA.wProcessorArchitecture$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void wProcessorArchitecture$set(MemorySegment seg, long index, short x) {
        tagACTCTXA.wProcessorArchitecture$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle wLangId$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("wLangId"));
    public static VarHandle wLangId$VH() {
        return tagACTCTXA.wLangId$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LANGID wLangId;
     * }
     */
    public static short wLangId$get(MemorySegment seg) {
        return (short)tagACTCTXA.wLangId$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LANGID wLangId;
     * }
     */
    public static void wLangId$set(MemorySegment seg, short x) {
        tagACTCTXA.wLangId$VH.set(seg, x);
    }
    public static short wLangId$get(MemorySegment seg, long index) {
        return (short)tagACTCTXA.wLangId$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void wLangId$set(MemorySegment seg, long index, short x) {
        tagACTCTXA.wLangId$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lpAssemblyDirectory$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lpAssemblyDirectory"));
    public static VarHandle lpAssemblyDirectory$VH() {
        return tagACTCTXA.lpAssemblyDirectory$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPCSTR lpAssemblyDirectory;
     * }
     */
    public static MemorySegment lpAssemblyDirectory$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)tagACTCTXA.lpAssemblyDirectory$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPCSTR lpAssemblyDirectory;
     * }
     */
    public static void lpAssemblyDirectory$set(MemorySegment seg, MemorySegment x) {
        tagACTCTXA.lpAssemblyDirectory$VH.set(seg, x);
    }
    public static MemorySegment lpAssemblyDirectory$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)tagACTCTXA.lpAssemblyDirectory$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpAssemblyDirectory$set(MemorySegment seg, long index, MemorySegment x) {
        tagACTCTXA.lpAssemblyDirectory$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lpResourceName$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lpResourceName"));
    public static VarHandle lpResourceName$VH() {
        return tagACTCTXA.lpResourceName$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPCSTR lpResourceName;
     * }
     */
    public static MemorySegment lpResourceName$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)tagACTCTXA.lpResourceName$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPCSTR lpResourceName;
     * }
     */
    public static void lpResourceName$set(MemorySegment seg, MemorySegment x) {
        tagACTCTXA.lpResourceName$VH.set(seg, x);
    }
    public static MemorySegment lpResourceName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)tagACTCTXA.lpResourceName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpResourceName$set(MemorySegment seg, long index, MemorySegment x) {
        tagACTCTXA.lpResourceName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lpApplicationName$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lpApplicationName"));
    public static VarHandle lpApplicationName$VH() {
        return tagACTCTXA.lpApplicationName$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPCSTR lpApplicationName;
     * }
     */
    public static MemorySegment lpApplicationName$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)tagACTCTXA.lpApplicationName$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPCSTR lpApplicationName;
     * }
     */
    public static void lpApplicationName$set(MemorySegment seg, MemorySegment x) {
        tagACTCTXA.lpApplicationName$VH.set(seg, x);
    }
    public static MemorySegment lpApplicationName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)tagACTCTXA.lpApplicationName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpApplicationName$set(MemorySegment seg, long index, MemorySegment x) {
        tagACTCTXA.lpApplicationName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hModule$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hModule"));
    public static VarHandle hModule$VH() {
        return tagACTCTXA.hModule$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HMODULE hModule;
     * }
     */
    public static MemorySegment hModule$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)tagACTCTXA.hModule$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HMODULE hModule;
     * }
     */
    public static void hModule$set(MemorySegment seg, MemorySegment x) {
        tagACTCTXA.hModule$VH.set(seg, x);
    }
    public static MemorySegment hModule$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)tagACTCTXA.hModule$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hModule$set(MemorySegment seg, long index, MemorySegment x) {
        tagACTCTXA.hModule$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


