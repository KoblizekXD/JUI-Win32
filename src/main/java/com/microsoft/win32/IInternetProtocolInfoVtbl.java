// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IInternetProtocolInfoVtbl {
 *     HRESULT (*QueryInterface)(IInternetProtocolInfo*,const IID*,void**);
 *     ULONG (*AddRef)(IInternetProtocolInfo*);
 *     ULONG (*Release)(IInternetProtocolInfo*);
 *     HRESULT (*ParseUrl)(IInternetProtocolInfo*,LPCWSTR,PARSEACTION,DWORD,LPWSTR,DWORD,DWORD*,DWORD);
 *     HRESULT (*CombineUrl)(IInternetProtocolInfo*,LPCWSTR,LPCWSTR,DWORD,LPWSTR,DWORD,DWORD*,DWORD);
 *     HRESULT (*CompareUrl)(IInternetProtocolInfo*,LPCWSTR,LPCWSTR,DWORD);
 *     HRESULT (*QueryInfo)(IInternetProtocolInfo*,LPCWSTR,QUERYOPTION,DWORD,LPVOID,DWORD,DWORD*,DWORD);
 * };
 * }
 */
public class IInternetProtocolInfoVtbl {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("ParseUrl"),
        Constants$root.C_POINTER$LAYOUT.withName("CombineUrl"),
        Constants$root.C_POINTER$LAYOUT.withName("CompareUrl"),
        Constants$root.C_POINTER$LAYOUT.withName("QueryInfo")
    ).withName("IInternetProtocolInfoVtbl");
    public static MemoryLayout $LAYOUT() {
        return IInternetProtocolInfoVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor QueryInterface_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_UP$MH = RuntimeHelper.upcallHandle(QueryInterface.class, "apply", IInternetProtocolInfoVtbl.QueryInterface_UP$FUNC);
    static final FunctionDescriptor QueryInterface_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_DOWN$MH = RuntimeHelper.downcallHandle(
        IInternetProtocolInfoVtbl.QueryInterface_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(IInternetProtocolInfo*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IInternetProtocolInfoVtbl.QueryInterface_UP$MH, fi, IInternetProtocolInfoVtbl.QueryInterface$FUNC, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IInternetProtocolInfoVtbl.QueryInterface_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return IInternetProtocolInfoVtbl.QueryInterface$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IInternetProtocolInfo*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IInternetProtocolInfoVtbl.QueryInterface$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IInternetProtocolInfo*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        IInternetProtocolInfoVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IInternetProtocolInfoVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        IInternetProtocolInfoVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, SegmentScope scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor AddRef_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_UP$MH = RuntimeHelper.upcallHandle(AddRef.class, "apply", IInternetProtocolInfoVtbl.AddRef_UP$FUNC);
    static final FunctionDescriptor AddRef_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_DOWN$MH = RuntimeHelper.downcallHandle(
        IInternetProtocolInfoVtbl.AddRef_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*AddRef)(IInternetProtocolInfo*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IInternetProtocolInfoVtbl.AddRef_UP$MH, fi, IInternetProtocolInfoVtbl.AddRef$FUNC, scope);
        }
        static AddRef ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IInternetProtocolInfoVtbl.AddRef_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return IInternetProtocolInfoVtbl.AddRef$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(IInternetProtocolInfo*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IInternetProtocolInfoVtbl.AddRef$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(IInternetProtocolInfo*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        IInternetProtocolInfoVtbl.AddRef$VH.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IInternetProtocolInfoVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        IInternetProtocolInfoVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, SegmentScope scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Release_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_UP$MH = RuntimeHelper.upcallHandle(Release.class, "apply", IInternetProtocolInfoVtbl.Release_UP$FUNC);
    static final FunctionDescriptor Release_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_DOWN$MH = RuntimeHelper.downcallHandle(
        IInternetProtocolInfoVtbl.Release_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*Release)(IInternetProtocolInfo*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IInternetProtocolInfoVtbl.Release_UP$MH, fi, IInternetProtocolInfoVtbl.Release$FUNC, scope);
        }
        static Release ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IInternetProtocolInfoVtbl.Release_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return IInternetProtocolInfoVtbl.Release$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(IInternetProtocolInfo*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IInternetProtocolInfoVtbl.Release$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(IInternetProtocolInfo*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        IInternetProtocolInfoVtbl.Release$VH.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IInternetProtocolInfoVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        IInternetProtocolInfoVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, SegmentScope scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    static final FunctionDescriptor ParseUrl$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor ParseUrl_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle ParseUrl_UP$MH = RuntimeHelper.upcallHandle(ParseUrl.class, "apply", IInternetProtocolInfoVtbl.ParseUrl_UP$FUNC);
    static final FunctionDescriptor ParseUrl_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle ParseUrl_DOWN$MH = RuntimeHelper.downcallHandle(
        IInternetProtocolInfoVtbl.ParseUrl_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*ParseUrl)(IInternetProtocolInfo*,LPCWSTR,PARSEACTION,DWORD,LPWSTR,DWORD,DWORD*,DWORD);
     * }
     */
    public interface ParseUrl {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, int _x3, java.lang.foreign.MemorySegment _x4, int _x5, java.lang.foreign.MemorySegment _x6, int _x7);
        static MemorySegment allocate(ParseUrl fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IInternetProtocolInfoVtbl.ParseUrl_UP$MH, fi, IInternetProtocolInfoVtbl.ParseUrl$FUNC, scope);
        }
        static ParseUrl ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, int __x3, java.lang.foreign.MemorySegment __x4, int __x5, java.lang.foreign.MemorySegment __x6, int __x7) -> {
                try {
                    return (int)IInternetProtocolInfoVtbl.ParseUrl_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6, __x7);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ParseUrl$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ParseUrl"));
    public static VarHandle ParseUrl$VH() {
        return IInternetProtocolInfoVtbl.ParseUrl$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*ParseUrl)(IInternetProtocolInfo*,LPCWSTR,PARSEACTION,DWORD,LPWSTR,DWORD,DWORD*,DWORD);
     * }
     */
    public static MemorySegment ParseUrl$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IInternetProtocolInfoVtbl.ParseUrl$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*ParseUrl)(IInternetProtocolInfo*,LPCWSTR,PARSEACTION,DWORD,LPWSTR,DWORD,DWORD*,DWORD);
     * }
     */
    public static void ParseUrl$set(MemorySegment seg, MemorySegment x) {
        IInternetProtocolInfoVtbl.ParseUrl$VH.set(seg, x);
    }
    public static MemorySegment ParseUrl$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IInternetProtocolInfoVtbl.ParseUrl$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ParseUrl$set(MemorySegment seg, long index, MemorySegment x) {
        IInternetProtocolInfoVtbl.ParseUrl$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ParseUrl ParseUrl(MemorySegment segment, SegmentScope scope) {
        return ParseUrl.ofAddress(ParseUrl$get(segment), scope);
    }
    static final FunctionDescriptor CombineUrl$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor CombineUrl_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle CombineUrl_UP$MH = RuntimeHelper.upcallHandle(CombineUrl.class, "apply", IInternetProtocolInfoVtbl.CombineUrl_UP$FUNC);
    static final FunctionDescriptor CombineUrl_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle CombineUrl_DOWN$MH = RuntimeHelper.downcallHandle(
        IInternetProtocolInfoVtbl.CombineUrl_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*CombineUrl)(IInternetProtocolInfo*,LPCWSTR,LPCWSTR,DWORD,LPWSTR,DWORD,DWORD*,DWORD);
     * }
     */
    public interface CombineUrl {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3, java.lang.foreign.MemorySegment _x4, int _x5, java.lang.foreign.MemorySegment _x6, int _x7);
        static MemorySegment allocate(CombineUrl fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IInternetProtocolInfoVtbl.CombineUrl_UP$MH, fi, IInternetProtocolInfoVtbl.CombineUrl$FUNC, scope);
        }
        static CombineUrl ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3, java.lang.foreign.MemorySegment __x4, int __x5, java.lang.foreign.MemorySegment __x6, int __x7) -> {
                try {
                    return (int)IInternetProtocolInfoVtbl.CombineUrl_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6, __x7);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle CombineUrl$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("CombineUrl"));
    public static VarHandle CombineUrl$VH() {
        return IInternetProtocolInfoVtbl.CombineUrl$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*CombineUrl)(IInternetProtocolInfo*,LPCWSTR,LPCWSTR,DWORD,LPWSTR,DWORD,DWORD*,DWORD);
     * }
     */
    public static MemorySegment CombineUrl$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IInternetProtocolInfoVtbl.CombineUrl$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*CombineUrl)(IInternetProtocolInfo*,LPCWSTR,LPCWSTR,DWORD,LPWSTR,DWORD,DWORD*,DWORD);
     * }
     */
    public static void CombineUrl$set(MemorySegment seg, MemorySegment x) {
        IInternetProtocolInfoVtbl.CombineUrl$VH.set(seg, x);
    }
    public static MemorySegment CombineUrl$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IInternetProtocolInfoVtbl.CombineUrl$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CombineUrl$set(MemorySegment seg, long index, MemorySegment x) {
        IInternetProtocolInfoVtbl.CombineUrl$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static CombineUrl CombineUrl(MemorySegment segment, SegmentScope scope) {
        return CombineUrl.ofAddress(CombineUrl$get(segment), scope);
    }
    static final FunctionDescriptor CompareUrl$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor CompareUrl_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle CompareUrl_UP$MH = RuntimeHelper.upcallHandle(CompareUrl.class, "apply", IInternetProtocolInfoVtbl.CompareUrl_UP$FUNC);
    static final FunctionDescriptor CompareUrl_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle CompareUrl_DOWN$MH = RuntimeHelper.downcallHandle(
        IInternetProtocolInfoVtbl.CompareUrl_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*CompareUrl)(IInternetProtocolInfo*,LPCWSTR,LPCWSTR,DWORD);
     * }
     */
    public interface CompareUrl {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3);
        static MemorySegment allocate(CompareUrl fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IInternetProtocolInfoVtbl.CompareUrl_UP$MH, fi, IInternetProtocolInfoVtbl.CompareUrl$FUNC, scope);
        }
        static CompareUrl ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3) -> {
                try {
                    return (int)IInternetProtocolInfoVtbl.CompareUrl_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle CompareUrl$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("CompareUrl"));
    public static VarHandle CompareUrl$VH() {
        return IInternetProtocolInfoVtbl.CompareUrl$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*CompareUrl)(IInternetProtocolInfo*,LPCWSTR,LPCWSTR,DWORD);
     * }
     */
    public static MemorySegment CompareUrl$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IInternetProtocolInfoVtbl.CompareUrl$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*CompareUrl)(IInternetProtocolInfo*,LPCWSTR,LPCWSTR,DWORD);
     * }
     */
    public static void CompareUrl$set(MemorySegment seg, MemorySegment x) {
        IInternetProtocolInfoVtbl.CompareUrl$VH.set(seg, x);
    }
    public static MemorySegment CompareUrl$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IInternetProtocolInfoVtbl.CompareUrl$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CompareUrl$set(MemorySegment seg, long index, MemorySegment x) {
        IInternetProtocolInfoVtbl.CompareUrl$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static CompareUrl CompareUrl(MemorySegment segment, SegmentScope scope) {
        return CompareUrl.ofAddress(CompareUrl$get(segment), scope);
    }
    static final FunctionDescriptor QueryInfo$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor QueryInfo_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle QueryInfo_UP$MH = RuntimeHelper.upcallHandle(QueryInfo.class, "apply", IInternetProtocolInfoVtbl.QueryInfo_UP$FUNC);
    static final FunctionDescriptor QueryInfo_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle QueryInfo_DOWN$MH = RuntimeHelper.downcallHandle(
        IInternetProtocolInfoVtbl.QueryInfo_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*QueryInfo)(IInternetProtocolInfo*,LPCWSTR,QUERYOPTION,DWORD,LPVOID,DWORD,DWORD*,DWORD);
     * }
     */
    public interface QueryInfo {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, int _x3, java.lang.foreign.MemorySegment _x4, int _x5, java.lang.foreign.MemorySegment _x6, int _x7);
        static MemorySegment allocate(QueryInfo fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IInternetProtocolInfoVtbl.QueryInfo_UP$MH, fi, IInternetProtocolInfoVtbl.QueryInfo$FUNC, scope);
        }
        static QueryInfo ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, int __x3, java.lang.foreign.MemorySegment __x4, int __x5, java.lang.foreign.MemorySegment __x6, int __x7) -> {
                try {
                    return (int)IInternetProtocolInfoVtbl.QueryInfo_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6, __x7);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInfo$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInfo"));
    public static VarHandle QueryInfo$VH() {
        return IInternetProtocolInfoVtbl.QueryInfo$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInfo)(IInternetProtocolInfo*,LPCWSTR,QUERYOPTION,DWORD,LPVOID,DWORD,DWORD*,DWORD);
     * }
     */
    public static MemorySegment QueryInfo$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IInternetProtocolInfoVtbl.QueryInfo$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInfo)(IInternetProtocolInfo*,LPCWSTR,QUERYOPTION,DWORD,LPVOID,DWORD,DWORD*,DWORD);
     * }
     */
    public static void QueryInfo$set(MemorySegment seg, MemorySegment x) {
        IInternetProtocolInfoVtbl.QueryInfo$VH.set(seg, x);
    }
    public static MemorySegment QueryInfo$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IInternetProtocolInfoVtbl.QueryInfo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInfo$set(MemorySegment seg, long index, MemorySegment x) {
        IInternetProtocolInfoVtbl.QueryInfo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInfo QueryInfo(MemorySegment segment, SegmentScope scope) {
        return QueryInfo.ofAddress(QueryInfo$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


