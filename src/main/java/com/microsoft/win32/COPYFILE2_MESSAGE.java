// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct COPYFILE2_MESSAGE {
 *     COPYFILE2_MESSAGE_TYPE Type;
 *     DWORD dwPadding;
 *     union  Info;
 * };
 * }
 */
public class COPYFILE2_MESSAGE {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("Type"),
        Constants$root.C_LONG$LAYOUT.withName("dwPadding"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("dwStreamNumber"),
                Constants$root.C_LONG$LAYOUT.withName("dwReserved"),
                Constants$root.C_POINTER$LAYOUT.withName("hSourceFile"),
                Constants$root.C_POINTER$LAYOUT.withName("hDestinationFile"),
                MemoryLayout.unionLayout(
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("$anon$0"),
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("u"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
                ).withName("uliChunkNumber"),
                MemoryLayout.unionLayout(
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("$anon$0"),
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("u"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
                ).withName("uliChunkSize"),
                MemoryLayout.unionLayout(
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("$anon$0"),
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("u"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
                ).withName("uliStreamSize"),
                MemoryLayout.unionLayout(
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("$anon$0"),
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("u"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
                ).withName("uliTotalFileSize")
            ).withName("ChunkStarted"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("dwStreamNumber"),
                Constants$root.C_LONG$LAYOUT.withName("dwFlags"),
                Constants$root.C_POINTER$LAYOUT.withName("hSourceFile"),
                Constants$root.C_POINTER$LAYOUT.withName("hDestinationFile"),
                MemoryLayout.unionLayout(
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("$anon$0"),
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("u"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
                ).withName("uliChunkNumber"),
                MemoryLayout.unionLayout(
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("$anon$0"),
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("u"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
                ).withName("uliChunkSize"),
                MemoryLayout.unionLayout(
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("$anon$0"),
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("u"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
                ).withName("uliStreamSize"),
                MemoryLayout.unionLayout(
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("$anon$0"),
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("u"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
                ).withName("uliStreamBytesTransferred"),
                MemoryLayout.unionLayout(
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("$anon$0"),
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("u"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
                ).withName("uliTotalFileSize"),
                MemoryLayout.unionLayout(
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("$anon$0"),
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("u"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
                ).withName("uliTotalBytesTransferred")
            ).withName("ChunkFinished"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("dwStreamNumber"),
                Constants$root.C_LONG$LAYOUT.withName("dwReserved"),
                Constants$root.C_POINTER$LAYOUT.withName("hSourceFile"),
                Constants$root.C_POINTER$LAYOUT.withName("hDestinationFile"),
                MemoryLayout.unionLayout(
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("$anon$0"),
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("u"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
                ).withName("uliStreamSize"),
                MemoryLayout.unionLayout(
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("$anon$0"),
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("u"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
                ).withName("uliTotalFileSize")
            ).withName("StreamStarted"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("dwStreamNumber"),
                Constants$root.C_LONG$LAYOUT.withName("dwReserved"),
                Constants$root.C_POINTER$LAYOUT.withName("hSourceFile"),
                Constants$root.C_POINTER$LAYOUT.withName("hDestinationFile"),
                MemoryLayout.unionLayout(
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("$anon$0"),
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("u"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
                ).withName("uliStreamSize"),
                MemoryLayout.unionLayout(
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("$anon$0"),
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("u"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
                ).withName("uliStreamBytesTransferred"),
                MemoryLayout.unionLayout(
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("$anon$0"),
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("u"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
                ).withName("uliTotalFileSize"),
                MemoryLayout.unionLayout(
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("$anon$0"),
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("u"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
                ).withName("uliTotalBytesTransferred")
            ).withName("StreamFinished"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("dwReserved")
            ).withName("PollContinue"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("CopyPhase"),
                Constants$root.C_LONG$LAYOUT.withName("dwStreamNumber"),
                Constants$root.C_LONG$LAYOUT.withName("hrFailure"),
                Constants$root.C_LONG$LAYOUT.withName("dwReserved"),
                MemoryLayout.unionLayout(
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("$anon$0"),
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("u"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
                ).withName("uliChunkNumber"),
                MemoryLayout.unionLayout(
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("$anon$0"),
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("u"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
                ).withName("uliStreamSize"),
                MemoryLayout.unionLayout(
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("$anon$0"),
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("u"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
                ).withName("uliStreamBytesTransferred"),
                MemoryLayout.unionLayout(
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("$anon$0"),
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("u"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
                ).withName("uliTotalFileSize"),
                MemoryLayout.unionLayout(
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("$anon$0"),
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("u"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
                ).withName("uliTotalBytesTransferred")
            ).withName("Error")
        ).withName("Info")
    ).withName("COPYFILE2_MESSAGE");
    public static MemoryLayout $LAYOUT() {
        return COPYFILE2_MESSAGE.$struct$LAYOUT;
    }
    static final VarHandle Type$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Type"));
    public static VarHandle Type$VH() {
        return COPYFILE2_MESSAGE.Type$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * COPYFILE2_MESSAGE_TYPE Type;
     * }
     */
    public static int Type$get(MemorySegment seg) {
        return (int)COPYFILE2_MESSAGE.Type$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * COPYFILE2_MESSAGE_TYPE Type;
     * }
     */
    public static void Type$set(MemorySegment seg, int x) {
        COPYFILE2_MESSAGE.Type$VH.set(seg, x);
    }
    public static int Type$get(MemorySegment seg, long index) {
        return (int)COPYFILE2_MESSAGE.Type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Type$set(MemorySegment seg, long index, int x) {
        COPYFILE2_MESSAGE.Type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwPadding$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwPadding"));
    public static VarHandle dwPadding$VH() {
        return COPYFILE2_MESSAGE.dwPadding$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwPadding;
     * }
     */
    public static int dwPadding$get(MemorySegment seg) {
        return (int)COPYFILE2_MESSAGE.dwPadding$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwPadding;
     * }
     */
    public static void dwPadding$set(MemorySegment seg, int x) {
        COPYFILE2_MESSAGE.dwPadding$VH.set(seg, x);
    }
    public static int dwPadding$get(MemorySegment seg, long index) {
        return (int)COPYFILE2_MESSAGE.dwPadding$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwPadding$set(MemorySegment seg, long index, int x) {
        COPYFILE2_MESSAGE.dwPadding$VH.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
     * union {
     *     struct  ChunkStarted;
     *     struct  ChunkFinished;
     *     struct  StreamStarted;
     *     struct  StreamFinished;
     *     struct  PollContinue;
     *     struct  Error;
     * };
     * }
     */
    public static final class Info {

        // Suppresses default constructor, ensuring non-instantiability.
        private Info() {}
        static final UnionLayout Info$union$LAYOUT = MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("dwStreamNumber"),
                Constants$root.C_LONG$LAYOUT.withName("dwReserved"),
                Constants$root.C_POINTER$LAYOUT.withName("hSourceFile"),
                Constants$root.C_POINTER$LAYOUT.withName("hDestinationFile"),
                MemoryLayout.unionLayout(
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("$anon$0"),
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("u"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
                ).withName("uliChunkNumber"),
                MemoryLayout.unionLayout(
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("$anon$0"),
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("u"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
                ).withName("uliChunkSize"),
                MemoryLayout.unionLayout(
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("$anon$0"),
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("u"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
                ).withName("uliStreamSize"),
                MemoryLayout.unionLayout(
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("$anon$0"),
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("u"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
                ).withName("uliTotalFileSize")
            ).withName("ChunkStarted"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("dwStreamNumber"),
                Constants$root.C_LONG$LAYOUT.withName("dwFlags"),
                Constants$root.C_POINTER$LAYOUT.withName("hSourceFile"),
                Constants$root.C_POINTER$LAYOUT.withName("hDestinationFile"),
                MemoryLayout.unionLayout(
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("$anon$0"),
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("u"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
                ).withName("uliChunkNumber"),
                MemoryLayout.unionLayout(
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("$anon$0"),
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("u"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
                ).withName("uliChunkSize"),
                MemoryLayout.unionLayout(
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("$anon$0"),
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("u"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
                ).withName("uliStreamSize"),
                MemoryLayout.unionLayout(
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("$anon$0"),
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("u"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
                ).withName("uliStreamBytesTransferred"),
                MemoryLayout.unionLayout(
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("$anon$0"),
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("u"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
                ).withName("uliTotalFileSize"),
                MemoryLayout.unionLayout(
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("$anon$0"),
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("u"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
                ).withName("uliTotalBytesTransferred")
            ).withName("ChunkFinished"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("dwStreamNumber"),
                Constants$root.C_LONG$LAYOUT.withName("dwReserved"),
                Constants$root.C_POINTER$LAYOUT.withName("hSourceFile"),
                Constants$root.C_POINTER$LAYOUT.withName("hDestinationFile"),
                MemoryLayout.unionLayout(
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("$anon$0"),
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("u"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
                ).withName("uliStreamSize"),
                MemoryLayout.unionLayout(
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("$anon$0"),
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("u"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
                ).withName("uliTotalFileSize")
            ).withName("StreamStarted"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("dwStreamNumber"),
                Constants$root.C_LONG$LAYOUT.withName("dwReserved"),
                Constants$root.C_POINTER$LAYOUT.withName("hSourceFile"),
                Constants$root.C_POINTER$LAYOUT.withName("hDestinationFile"),
                MemoryLayout.unionLayout(
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("$anon$0"),
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("u"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
                ).withName("uliStreamSize"),
                MemoryLayout.unionLayout(
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("$anon$0"),
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("u"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
                ).withName("uliStreamBytesTransferred"),
                MemoryLayout.unionLayout(
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("$anon$0"),
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("u"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
                ).withName("uliTotalFileSize"),
                MemoryLayout.unionLayout(
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("$anon$0"),
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("u"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
                ).withName("uliTotalBytesTransferred")
            ).withName("StreamFinished"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("dwReserved")
            ).withName("PollContinue"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("CopyPhase"),
                Constants$root.C_LONG$LAYOUT.withName("dwStreamNumber"),
                Constants$root.C_LONG$LAYOUT.withName("hrFailure"),
                Constants$root.C_LONG$LAYOUT.withName("dwReserved"),
                MemoryLayout.unionLayout(
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("$anon$0"),
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("u"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
                ).withName("uliChunkNumber"),
                MemoryLayout.unionLayout(
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("$anon$0"),
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("u"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
                ).withName("uliStreamSize"),
                MemoryLayout.unionLayout(
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("$anon$0"),
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("u"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
                ).withName("uliStreamBytesTransferred"),
                MemoryLayout.unionLayout(
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("$anon$0"),
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("u"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
                ).withName("uliTotalFileSize"),
                MemoryLayout.unionLayout(
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("$anon$0"),
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("u"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
                ).withName("uliTotalBytesTransferred")
            ).withName("Error")
        );
        public static MemoryLayout $LAYOUT() {
            return Info.Info$union$LAYOUT;
        }
        /**
         * {@snippet :
         * struct {
         *     DWORD dwStreamNumber;
         *     DWORD dwReserved;
         *     HANDLE hSourceFile;
         *     HANDLE hDestinationFile;
         *     ULARGE_INTEGER uliChunkNumber;
         *     ULARGE_INTEGER uliChunkSize;
         *     ULARGE_INTEGER uliStreamSize;
         *     ULARGE_INTEGER uliTotalFileSize;
         * };
         * }
         */
        public static final class ChunkStarted {

            // Suppresses default constructor, ensuring non-instantiability.
            private ChunkStarted() {}
            static final StructLayout Info$ChunkStarted$struct$LAYOUT = MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("dwStreamNumber"),
                Constants$root.C_LONG$LAYOUT.withName("dwReserved"),
                Constants$root.C_POINTER$LAYOUT.withName("hSourceFile"),
                Constants$root.C_POINTER$LAYOUT.withName("hDestinationFile"),
                MemoryLayout.unionLayout(
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("$anon$0"),
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("u"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
                ).withName("uliChunkNumber"),
                MemoryLayout.unionLayout(
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("$anon$0"),
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("u"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
                ).withName("uliChunkSize"),
                MemoryLayout.unionLayout(
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("$anon$0"),
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("u"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
                ).withName("uliStreamSize"),
                MemoryLayout.unionLayout(
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("$anon$0"),
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("u"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
                ).withName("uliTotalFileSize")
            );
            public static MemoryLayout $LAYOUT() {
                return ChunkStarted.Info$ChunkStarted$struct$LAYOUT;
            }
            static final VarHandle dwStreamNumber$VH = Info$ChunkStarted$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwStreamNumber"));
            public static VarHandle dwStreamNumber$VH() {
                return ChunkStarted.dwStreamNumber$VH;
            }
            /**
             * Getter for field:
             * {@snippet :
             * DWORD dwStreamNumber;
             * }
             */
            public static int dwStreamNumber$get(MemorySegment seg) {
                return (int)ChunkStarted.dwStreamNumber$VH.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * DWORD dwStreamNumber;
             * }
             */
            public static void dwStreamNumber$set(MemorySegment seg, int x) {
                ChunkStarted.dwStreamNumber$VH.set(seg, x);
            }
            public static int dwStreamNumber$get(MemorySegment seg, long index) {
                return (int)ChunkStarted.dwStreamNumber$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void dwStreamNumber$set(MemorySegment seg, long index, int x) {
                ChunkStarted.dwStreamNumber$VH.set(seg.asSlice(index*sizeof()), x);
            }
            static final VarHandle dwReserved$VH = Info$ChunkStarted$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwReserved"));
            public static VarHandle dwReserved$VH() {
                return ChunkStarted.dwReserved$VH;
            }
            /**
             * Getter for field:
             * {@snippet :
             * DWORD dwReserved;
             * }
             */
            public static int dwReserved$get(MemorySegment seg) {
                return (int)ChunkStarted.dwReserved$VH.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * DWORD dwReserved;
             * }
             */
            public static void dwReserved$set(MemorySegment seg, int x) {
                ChunkStarted.dwReserved$VH.set(seg, x);
            }
            public static int dwReserved$get(MemorySegment seg, long index) {
                return (int)ChunkStarted.dwReserved$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void dwReserved$set(MemorySegment seg, long index, int x) {
                ChunkStarted.dwReserved$VH.set(seg.asSlice(index*sizeof()), x);
            }
            static final VarHandle hSourceFile$VH = Info$ChunkStarted$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hSourceFile"));
            public static VarHandle hSourceFile$VH() {
                return ChunkStarted.hSourceFile$VH;
            }
            /**
             * Getter for field:
             * {@snippet :
             * HANDLE hSourceFile;
             * }
             */
            public static MemorySegment hSourceFile$get(MemorySegment seg) {
                return (java.lang.foreign.MemorySegment)ChunkStarted.hSourceFile$VH.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * HANDLE hSourceFile;
             * }
             */
            public static void hSourceFile$set(MemorySegment seg, MemorySegment x) {
                ChunkStarted.hSourceFile$VH.set(seg, x);
            }
            public static MemorySegment hSourceFile$get(MemorySegment seg, long index) {
                return (java.lang.foreign.MemorySegment)ChunkStarted.hSourceFile$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void hSourceFile$set(MemorySegment seg, long index, MemorySegment x) {
                ChunkStarted.hSourceFile$VH.set(seg.asSlice(index*sizeof()), x);
            }
            static final VarHandle hDestinationFile$VH = Info$ChunkStarted$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hDestinationFile"));
            public static VarHandle hDestinationFile$VH() {
                return ChunkStarted.hDestinationFile$VH;
            }
            /**
             * Getter for field:
             * {@snippet :
             * HANDLE hDestinationFile;
             * }
             */
            public static MemorySegment hDestinationFile$get(MemorySegment seg) {
                return (java.lang.foreign.MemorySegment)ChunkStarted.hDestinationFile$VH.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * HANDLE hDestinationFile;
             * }
             */
            public static void hDestinationFile$set(MemorySegment seg, MemorySegment x) {
                ChunkStarted.hDestinationFile$VH.set(seg, x);
            }
            public static MemorySegment hDestinationFile$get(MemorySegment seg, long index) {
                return (java.lang.foreign.MemorySegment)ChunkStarted.hDestinationFile$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void hDestinationFile$set(MemorySegment seg, long index, MemorySegment x) {
                ChunkStarted.hDestinationFile$VH.set(seg.asSlice(index*sizeof()), x);
            }
            public static MemorySegment uliChunkNumber$slice(MemorySegment seg) {
                return seg.asSlice(24, 8);
            }
            public static MemorySegment uliChunkSize$slice(MemorySegment seg) {
                return seg.asSlice(32, 8);
            }
            public static MemorySegment uliStreamSize$slice(MemorySegment seg) {
                return seg.asSlice(40, 8);
            }
            public static MemorySegment uliTotalFileSize$slice(MemorySegment seg) {
                return seg.asSlice(48, 8);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
            public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
            }
            public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
        }

        public static MemorySegment ChunkStarted$slice(MemorySegment seg) {
            return seg.asSlice(0, 56);
        }
        /**
         * {@snippet :
         * struct {
         *     DWORD dwStreamNumber;
         *     DWORD dwFlags;
         *     HANDLE hSourceFile;
         *     HANDLE hDestinationFile;
         *     ULARGE_INTEGER uliChunkNumber;
         *     ULARGE_INTEGER uliChunkSize;
         *     ULARGE_INTEGER uliStreamSize;
         *     ULARGE_INTEGER uliStreamBytesTransferred;
         *     ULARGE_INTEGER uliTotalFileSize;
         *     ULARGE_INTEGER uliTotalBytesTransferred;
         * };
         * }
         */
        public static final class ChunkFinished {

            // Suppresses default constructor, ensuring non-instantiability.
            private ChunkFinished() {}
            static final StructLayout Info$ChunkFinished$struct$LAYOUT = MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("dwStreamNumber"),
                Constants$root.C_LONG$LAYOUT.withName("dwFlags"),
                Constants$root.C_POINTER$LAYOUT.withName("hSourceFile"),
                Constants$root.C_POINTER$LAYOUT.withName("hDestinationFile"),
                MemoryLayout.unionLayout(
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("$anon$0"),
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("u"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
                ).withName("uliChunkNumber"),
                MemoryLayout.unionLayout(
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("$anon$0"),
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("u"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
                ).withName("uliChunkSize"),
                MemoryLayout.unionLayout(
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("$anon$0"),
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("u"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
                ).withName("uliStreamSize"),
                MemoryLayout.unionLayout(
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("$anon$0"),
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("u"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
                ).withName("uliStreamBytesTransferred"),
                MemoryLayout.unionLayout(
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("$anon$0"),
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("u"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
                ).withName("uliTotalFileSize"),
                MemoryLayout.unionLayout(
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("$anon$0"),
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("u"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
                ).withName("uliTotalBytesTransferred")
            );
            public static MemoryLayout $LAYOUT() {
                return ChunkFinished.Info$ChunkFinished$struct$LAYOUT;
            }
            static final VarHandle dwStreamNumber$VH = Info$ChunkFinished$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwStreamNumber"));
            public static VarHandle dwStreamNumber$VH() {
                return ChunkFinished.dwStreamNumber$VH;
            }
            /**
             * Getter for field:
             * {@snippet :
             * DWORD dwStreamNumber;
             * }
             */
            public static int dwStreamNumber$get(MemorySegment seg) {
                return (int)ChunkFinished.dwStreamNumber$VH.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * DWORD dwStreamNumber;
             * }
             */
            public static void dwStreamNumber$set(MemorySegment seg, int x) {
                ChunkFinished.dwStreamNumber$VH.set(seg, x);
            }
            public static int dwStreamNumber$get(MemorySegment seg, long index) {
                return (int)ChunkFinished.dwStreamNumber$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void dwStreamNumber$set(MemorySegment seg, long index, int x) {
                ChunkFinished.dwStreamNumber$VH.set(seg.asSlice(index*sizeof()), x);
            }
            static final VarHandle dwFlags$VH = Info$ChunkFinished$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwFlags"));
            public static VarHandle dwFlags$VH() {
                return ChunkFinished.dwFlags$VH;
            }
            /**
             * Getter for field:
             * {@snippet :
             * DWORD dwFlags;
             * }
             */
            public static int dwFlags$get(MemorySegment seg) {
                return (int)ChunkFinished.dwFlags$VH.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * DWORD dwFlags;
             * }
             */
            public static void dwFlags$set(MemorySegment seg, int x) {
                ChunkFinished.dwFlags$VH.set(seg, x);
            }
            public static int dwFlags$get(MemorySegment seg, long index) {
                return (int)ChunkFinished.dwFlags$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void dwFlags$set(MemorySegment seg, long index, int x) {
                ChunkFinished.dwFlags$VH.set(seg.asSlice(index*sizeof()), x);
            }
            static final VarHandle hSourceFile$VH = Info$ChunkFinished$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hSourceFile"));
            public static VarHandle hSourceFile$VH() {
                return ChunkFinished.hSourceFile$VH;
            }
            /**
             * Getter for field:
             * {@snippet :
             * HANDLE hSourceFile;
             * }
             */
            public static MemorySegment hSourceFile$get(MemorySegment seg) {
                return (java.lang.foreign.MemorySegment)ChunkFinished.hSourceFile$VH.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * HANDLE hSourceFile;
             * }
             */
            public static void hSourceFile$set(MemorySegment seg, MemorySegment x) {
                ChunkFinished.hSourceFile$VH.set(seg, x);
            }
            public static MemorySegment hSourceFile$get(MemorySegment seg, long index) {
                return (java.lang.foreign.MemorySegment)ChunkFinished.hSourceFile$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void hSourceFile$set(MemorySegment seg, long index, MemorySegment x) {
                ChunkFinished.hSourceFile$VH.set(seg.asSlice(index*sizeof()), x);
            }
            static final VarHandle hDestinationFile$VH = Info$ChunkFinished$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hDestinationFile"));
            public static VarHandle hDestinationFile$VH() {
                return ChunkFinished.hDestinationFile$VH;
            }
            /**
             * Getter for field:
             * {@snippet :
             * HANDLE hDestinationFile;
             * }
             */
            public static MemorySegment hDestinationFile$get(MemorySegment seg) {
                return (java.lang.foreign.MemorySegment)ChunkFinished.hDestinationFile$VH.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * HANDLE hDestinationFile;
             * }
             */
            public static void hDestinationFile$set(MemorySegment seg, MemorySegment x) {
                ChunkFinished.hDestinationFile$VH.set(seg, x);
            }
            public static MemorySegment hDestinationFile$get(MemorySegment seg, long index) {
                return (java.lang.foreign.MemorySegment)ChunkFinished.hDestinationFile$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void hDestinationFile$set(MemorySegment seg, long index, MemorySegment x) {
                ChunkFinished.hDestinationFile$VH.set(seg.asSlice(index*sizeof()), x);
            }
            public static MemorySegment uliChunkNumber$slice(MemorySegment seg) {
                return seg.asSlice(24, 8);
            }
            public static MemorySegment uliChunkSize$slice(MemorySegment seg) {
                return seg.asSlice(32, 8);
            }
            public static MemorySegment uliStreamSize$slice(MemorySegment seg) {
                return seg.asSlice(40, 8);
            }
            public static MemorySegment uliStreamBytesTransferred$slice(MemorySegment seg) {
                return seg.asSlice(48, 8);
            }
            public static MemorySegment uliTotalFileSize$slice(MemorySegment seg) {
                return seg.asSlice(56, 8);
            }
            public static MemorySegment uliTotalBytesTransferred$slice(MemorySegment seg) {
                return seg.asSlice(64, 8);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
            public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
            }
            public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
        }

        public static MemorySegment ChunkFinished$slice(MemorySegment seg) {
            return seg.asSlice(0, 72);
        }
        /**
         * {@snippet :
         * struct {
         *     DWORD dwStreamNumber;
         *     DWORD dwReserved;
         *     HANDLE hSourceFile;
         *     HANDLE hDestinationFile;
         *     ULARGE_INTEGER uliStreamSize;
         *     ULARGE_INTEGER uliTotalFileSize;
         * };
         * }
         */
        public static final class StreamStarted {

            // Suppresses default constructor, ensuring non-instantiability.
            private StreamStarted() {}
            static final StructLayout Info$StreamStarted$struct$LAYOUT = MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("dwStreamNumber"),
                Constants$root.C_LONG$LAYOUT.withName("dwReserved"),
                Constants$root.C_POINTER$LAYOUT.withName("hSourceFile"),
                Constants$root.C_POINTER$LAYOUT.withName("hDestinationFile"),
                MemoryLayout.unionLayout(
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("$anon$0"),
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("u"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
                ).withName("uliStreamSize"),
                MemoryLayout.unionLayout(
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("$anon$0"),
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("u"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
                ).withName("uliTotalFileSize")
            );
            public static MemoryLayout $LAYOUT() {
                return StreamStarted.Info$StreamStarted$struct$LAYOUT;
            }
            static final VarHandle dwStreamNumber$VH = Info$StreamStarted$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwStreamNumber"));
            public static VarHandle dwStreamNumber$VH() {
                return StreamStarted.dwStreamNumber$VH;
            }
            /**
             * Getter for field:
             * {@snippet :
             * DWORD dwStreamNumber;
             * }
             */
            public static int dwStreamNumber$get(MemorySegment seg) {
                return (int)StreamStarted.dwStreamNumber$VH.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * DWORD dwStreamNumber;
             * }
             */
            public static void dwStreamNumber$set(MemorySegment seg, int x) {
                StreamStarted.dwStreamNumber$VH.set(seg, x);
            }
            public static int dwStreamNumber$get(MemorySegment seg, long index) {
                return (int)StreamStarted.dwStreamNumber$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void dwStreamNumber$set(MemorySegment seg, long index, int x) {
                StreamStarted.dwStreamNumber$VH.set(seg.asSlice(index*sizeof()), x);
            }
            static final VarHandle dwReserved$VH = Info$StreamStarted$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwReserved"));
            public static VarHandle dwReserved$VH() {
                return StreamStarted.dwReserved$VH;
            }
            /**
             * Getter for field:
             * {@snippet :
             * DWORD dwReserved;
             * }
             */
            public static int dwReserved$get(MemorySegment seg) {
                return (int)StreamStarted.dwReserved$VH.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * DWORD dwReserved;
             * }
             */
            public static void dwReserved$set(MemorySegment seg, int x) {
                StreamStarted.dwReserved$VH.set(seg, x);
            }
            public static int dwReserved$get(MemorySegment seg, long index) {
                return (int)StreamStarted.dwReserved$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void dwReserved$set(MemorySegment seg, long index, int x) {
                StreamStarted.dwReserved$VH.set(seg.asSlice(index*sizeof()), x);
            }
            static final VarHandle hSourceFile$VH = Info$StreamStarted$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hSourceFile"));
            public static VarHandle hSourceFile$VH() {
                return StreamStarted.hSourceFile$VH;
            }
            /**
             * Getter for field:
             * {@snippet :
             * HANDLE hSourceFile;
             * }
             */
            public static MemorySegment hSourceFile$get(MemorySegment seg) {
                return (java.lang.foreign.MemorySegment)StreamStarted.hSourceFile$VH.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * HANDLE hSourceFile;
             * }
             */
            public static void hSourceFile$set(MemorySegment seg, MemorySegment x) {
                StreamStarted.hSourceFile$VH.set(seg, x);
            }
            public static MemorySegment hSourceFile$get(MemorySegment seg, long index) {
                return (java.lang.foreign.MemorySegment)StreamStarted.hSourceFile$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void hSourceFile$set(MemorySegment seg, long index, MemorySegment x) {
                StreamStarted.hSourceFile$VH.set(seg.asSlice(index*sizeof()), x);
            }
            static final VarHandle hDestinationFile$VH = Info$StreamStarted$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hDestinationFile"));
            public static VarHandle hDestinationFile$VH() {
                return StreamStarted.hDestinationFile$VH;
            }
            /**
             * Getter for field:
             * {@snippet :
             * HANDLE hDestinationFile;
             * }
             */
            public static MemorySegment hDestinationFile$get(MemorySegment seg) {
                return (java.lang.foreign.MemorySegment)StreamStarted.hDestinationFile$VH.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * HANDLE hDestinationFile;
             * }
             */
            public static void hDestinationFile$set(MemorySegment seg, MemorySegment x) {
                StreamStarted.hDestinationFile$VH.set(seg, x);
            }
            public static MemorySegment hDestinationFile$get(MemorySegment seg, long index) {
                return (java.lang.foreign.MemorySegment)StreamStarted.hDestinationFile$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void hDestinationFile$set(MemorySegment seg, long index, MemorySegment x) {
                StreamStarted.hDestinationFile$VH.set(seg.asSlice(index*sizeof()), x);
            }
            public static MemorySegment uliStreamSize$slice(MemorySegment seg) {
                return seg.asSlice(24, 8);
            }
            public static MemorySegment uliTotalFileSize$slice(MemorySegment seg) {
                return seg.asSlice(32, 8);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
            public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
            }
            public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
        }

        public static MemorySegment StreamStarted$slice(MemorySegment seg) {
            return seg.asSlice(0, 40);
        }
        /**
         * {@snippet :
         * struct {
         *     DWORD dwStreamNumber;
         *     DWORD dwReserved;
         *     HANDLE hSourceFile;
         *     HANDLE hDestinationFile;
         *     ULARGE_INTEGER uliStreamSize;
         *     ULARGE_INTEGER uliStreamBytesTransferred;
         *     ULARGE_INTEGER uliTotalFileSize;
         *     ULARGE_INTEGER uliTotalBytesTransferred;
         * };
         * }
         */
        public static final class StreamFinished {

            // Suppresses default constructor, ensuring non-instantiability.
            private StreamFinished() {}
            static final StructLayout Info$StreamFinished$struct$LAYOUT = MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("dwStreamNumber"),
                Constants$root.C_LONG$LAYOUT.withName("dwReserved"),
                Constants$root.C_POINTER$LAYOUT.withName("hSourceFile"),
                Constants$root.C_POINTER$LAYOUT.withName("hDestinationFile"),
                MemoryLayout.unionLayout(
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("$anon$0"),
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("u"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
                ).withName("uliStreamSize"),
                MemoryLayout.unionLayout(
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("$anon$0"),
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("u"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
                ).withName("uliStreamBytesTransferred"),
                MemoryLayout.unionLayout(
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("$anon$0"),
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("u"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
                ).withName("uliTotalFileSize"),
                MemoryLayout.unionLayout(
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("$anon$0"),
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("u"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
                ).withName("uliTotalBytesTransferred")
            );
            public static MemoryLayout $LAYOUT() {
                return StreamFinished.Info$StreamFinished$struct$LAYOUT;
            }
            static final VarHandle dwStreamNumber$VH = Info$StreamFinished$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwStreamNumber"));
            public static VarHandle dwStreamNumber$VH() {
                return StreamFinished.dwStreamNumber$VH;
            }
            /**
             * Getter for field:
             * {@snippet :
             * DWORD dwStreamNumber;
             * }
             */
            public static int dwStreamNumber$get(MemorySegment seg) {
                return (int)StreamFinished.dwStreamNumber$VH.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * DWORD dwStreamNumber;
             * }
             */
            public static void dwStreamNumber$set(MemorySegment seg, int x) {
                StreamFinished.dwStreamNumber$VH.set(seg, x);
            }
            public static int dwStreamNumber$get(MemorySegment seg, long index) {
                return (int)StreamFinished.dwStreamNumber$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void dwStreamNumber$set(MemorySegment seg, long index, int x) {
                StreamFinished.dwStreamNumber$VH.set(seg.asSlice(index*sizeof()), x);
            }
            static final VarHandle dwReserved$VH = Info$StreamFinished$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwReserved"));
            public static VarHandle dwReserved$VH() {
                return StreamFinished.dwReserved$VH;
            }
            /**
             * Getter for field:
             * {@snippet :
             * DWORD dwReserved;
             * }
             */
            public static int dwReserved$get(MemorySegment seg) {
                return (int)StreamFinished.dwReserved$VH.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * DWORD dwReserved;
             * }
             */
            public static void dwReserved$set(MemorySegment seg, int x) {
                StreamFinished.dwReserved$VH.set(seg, x);
            }
            public static int dwReserved$get(MemorySegment seg, long index) {
                return (int)StreamFinished.dwReserved$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void dwReserved$set(MemorySegment seg, long index, int x) {
                StreamFinished.dwReserved$VH.set(seg.asSlice(index*sizeof()), x);
            }
            static final VarHandle hSourceFile$VH = Info$StreamFinished$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hSourceFile"));
            public static VarHandle hSourceFile$VH() {
                return StreamFinished.hSourceFile$VH;
            }
            /**
             * Getter for field:
             * {@snippet :
             * HANDLE hSourceFile;
             * }
             */
            public static MemorySegment hSourceFile$get(MemorySegment seg) {
                return (java.lang.foreign.MemorySegment)StreamFinished.hSourceFile$VH.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * HANDLE hSourceFile;
             * }
             */
            public static void hSourceFile$set(MemorySegment seg, MemorySegment x) {
                StreamFinished.hSourceFile$VH.set(seg, x);
            }
            public static MemorySegment hSourceFile$get(MemorySegment seg, long index) {
                return (java.lang.foreign.MemorySegment)StreamFinished.hSourceFile$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void hSourceFile$set(MemorySegment seg, long index, MemorySegment x) {
                StreamFinished.hSourceFile$VH.set(seg.asSlice(index*sizeof()), x);
            }
            static final VarHandle hDestinationFile$VH = Info$StreamFinished$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hDestinationFile"));
            public static VarHandle hDestinationFile$VH() {
                return StreamFinished.hDestinationFile$VH;
            }
            /**
             * Getter for field:
             * {@snippet :
             * HANDLE hDestinationFile;
             * }
             */
            public static MemorySegment hDestinationFile$get(MemorySegment seg) {
                return (java.lang.foreign.MemorySegment)StreamFinished.hDestinationFile$VH.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * HANDLE hDestinationFile;
             * }
             */
            public static void hDestinationFile$set(MemorySegment seg, MemorySegment x) {
                StreamFinished.hDestinationFile$VH.set(seg, x);
            }
            public static MemorySegment hDestinationFile$get(MemorySegment seg, long index) {
                return (java.lang.foreign.MemorySegment)StreamFinished.hDestinationFile$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void hDestinationFile$set(MemorySegment seg, long index, MemorySegment x) {
                StreamFinished.hDestinationFile$VH.set(seg.asSlice(index*sizeof()), x);
            }
            public static MemorySegment uliStreamSize$slice(MemorySegment seg) {
                return seg.asSlice(24, 8);
            }
            public static MemorySegment uliStreamBytesTransferred$slice(MemorySegment seg) {
                return seg.asSlice(32, 8);
            }
            public static MemorySegment uliTotalFileSize$slice(MemorySegment seg) {
                return seg.asSlice(40, 8);
            }
            public static MemorySegment uliTotalBytesTransferred$slice(MemorySegment seg) {
                return seg.asSlice(48, 8);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
            public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
            }
            public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
        }

        public static MemorySegment StreamFinished$slice(MemorySegment seg) {
            return seg.asSlice(0, 56);
        }
        /**
         * {@snippet :
         * struct {
         *     DWORD dwReserved;
         * };
         * }
         */
        public static final class PollContinue {

            // Suppresses default constructor, ensuring non-instantiability.
            private PollContinue() {}
            static final StructLayout Info$PollContinue$struct$LAYOUT = MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("dwReserved")
            );
            public static MemoryLayout $LAYOUT() {
                return PollContinue.Info$PollContinue$struct$LAYOUT;
            }
            static final VarHandle dwReserved$VH = Info$PollContinue$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwReserved"));
            public static VarHandle dwReserved$VH() {
                return PollContinue.dwReserved$VH;
            }
            /**
             * Getter for field:
             * {@snippet :
             * DWORD dwReserved;
             * }
             */
            public static int dwReserved$get(MemorySegment seg) {
                return (int)PollContinue.dwReserved$VH.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * DWORD dwReserved;
             * }
             */
            public static void dwReserved$set(MemorySegment seg, int x) {
                PollContinue.dwReserved$VH.set(seg, x);
            }
            public static int dwReserved$get(MemorySegment seg, long index) {
                return (int)PollContinue.dwReserved$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void dwReserved$set(MemorySegment seg, long index, int x) {
                PollContinue.dwReserved$VH.set(seg.asSlice(index*sizeof()), x);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
            public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
            }
            public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
        }

        public static MemorySegment PollContinue$slice(MemorySegment seg) {
            return seg.asSlice(0, 4);
        }
        /**
         * {@snippet :
         * struct {
         *     COPYFILE2_COPY_PHASE CopyPhase;
         *     DWORD dwStreamNumber;
         *     HRESULT hrFailure;
         *     DWORD dwReserved;
         *     ULARGE_INTEGER uliChunkNumber;
         *     ULARGE_INTEGER uliStreamSize;
         *     ULARGE_INTEGER uliStreamBytesTransferred;
         *     ULARGE_INTEGER uliTotalFileSize;
         *     ULARGE_INTEGER uliTotalBytesTransferred;
         * };
         * }
         */
        public static final class Error {

            // Suppresses default constructor, ensuring non-instantiability.
            private Error() {}
            static final StructLayout Info$Error$struct$LAYOUT = MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("CopyPhase"),
                Constants$root.C_LONG$LAYOUT.withName("dwStreamNumber"),
                Constants$root.C_LONG$LAYOUT.withName("hrFailure"),
                Constants$root.C_LONG$LAYOUT.withName("dwReserved"),
                MemoryLayout.unionLayout(
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("$anon$0"),
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("u"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
                ).withName("uliChunkNumber"),
                MemoryLayout.unionLayout(
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("$anon$0"),
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("u"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
                ).withName("uliStreamSize"),
                MemoryLayout.unionLayout(
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("$anon$0"),
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("u"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
                ).withName("uliStreamBytesTransferred"),
                MemoryLayout.unionLayout(
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("$anon$0"),
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("u"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
                ).withName("uliTotalFileSize"),
                MemoryLayout.unionLayout(
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("$anon$0"),
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("u"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
                ).withName("uliTotalBytesTransferred")
            );
            public static MemoryLayout $LAYOUT() {
                return Error.Info$Error$struct$LAYOUT;
            }
            static final VarHandle CopyPhase$VH = Info$Error$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("CopyPhase"));
            public static VarHandle CopyPhase$VH() {
                return Error.CopyPhase$VH;
            }
            /**
             * Getter for field:
             * {@snippet :
             * COPYFILE2_COPY_PHASE CopyPhase;
             * }
             */
            public static int CopyPhase$get(MemorySegment seg) {
                return (int)Error.CopyPhase$VH.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * COPYFILE2_COPY_PHASE CopyPhase;
             * }
             */
            public static void CopyPhase$set(MemorySegment seg, int x) {
                Error.CopyPhase$VH.set(seg, x);
            }
            public static int CopyPhase$get(MemorySegment seg, long index) {
                return (int)Error.CopyPhase$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void CopyPhase$set(MemorySegment seg, long index, int x) {
                Error.CopyPhase$VH.set(seg.asSlice(index*sizeof()), x);
            }
            static final VarHandle dwStreamNumber$VH = Info$Error$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwStreamNumber"));
            public static VarHandle dwStreamNumber$VH() {
                return Error.dwStreamNumber$VH;
            }
            /**
             * Getter for field:
             * {@snippet :
             * DWORD dwStreamNumber;
             * }
             */
            public static int dwStreamNumber$get(MemorySegment seg) {
                return (int)Error.dwStreamNumber$VH.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * DWORD dwStreamNumber;
             * }
             */
            public static void dwStreamNumber$set(MemorySegment seg, int x) {
                Error.dwStreamNumber$VH.set(seg, x);
            }
            public static int dwStreamNumber$get(MemorySegment seg, long index) {
                return (int)Error.dwStreamNumber$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void dwStreamNumber$set(MemorySegment seg, long index, int x) {
                Error.dwStreamNumber$VH.set(seg.asSlice(index*sizeof()), x);
            }
            static final VarHandle hrFailure$VH = Info$Error$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hrFailure"));
            public static VarHandle hrFailure$VH() {
                return Error.hrFailure$VH;
            }
            /**
             * Getter for field:
             * {@snippet :
             * HRESULT hrFailure;
             * }
             */
            public static int hrFailure$get(MemorySegment seg) {
                return (int)Error.hrFailure$VH.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * HRESULT hrFailure;
             * }
             */
            public static void hrFailure$set(MemorySegment seg, int x) {
                Error.hrFailure$VH.set(seg, x);
            }
            public static int hrFailure$get(MemorySegment seg, long index) {
                return (int)Error.hrFailure$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void hrFailure$set(MemorySegment seg, long index, int x) {
                Error.hrFailure$VH.set(seg.asSlice(index*sizeof()), x);
            }
            static final VarHandle dwReserved$VH = Info$Error$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwReserved"));
            public static VarHandle dwReserved$VH() {
                return Error.dwReserved$VH;
            }
            /**
             * Getter for field:
             * {@snippet :
             * DWORD dwReserved;
             * }
             */
            public static int dwReserved$get(MemorySegment seg) {
                return (int)Error.dwReserved$VH.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * DWORD dwReserved;
             * }
             */
            public static void dwReserved$set(MemorySegment seg, int x) {
                Error.dwReserved$VH.set(seg, x);
            }
            public static int dwReserved$get(MemorySegment seg, long index) {
                return (int)Error.dwReserved$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void dwReserved$set(MemorySegment seg, long index, int x) {
                Error.dwReserved$VH.set(seg.asSlice(index*sizeof()), x);
            }
            public static MemorySegment uliChunkNumber$slice(MemorySegment seg) {
                return seg.asSlice(16, 8);
            }
            public static MemorySegment uliStreamSize$slice(MemorySegment seg) {
                return seg.asSlice(24, 8);
            }
            public static MemorySegment uliStreamBytesTransferred$slice(MemorySegment seg) {
                return seg.asSlice(32, 8);
            }
            public static MemorySegment uliTotalFileSize$slice(MemorySegment seg) {
                return seg.asSlice(40, 8);
            }
            public static MemorySegment uliTotalBytesTransferred$slice(MemorySegment seg) {
                return seg.asSlice(48, 8);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
            public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
            }
            public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
        }

        public static MemorySegment Error$slice(MemorySegment seg) {
            return seg.asSlice(0, 56);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
    }

    public static MemorySegment Info$slice(MemorySegment seg) {
        return seg.asSlice(8, 72);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


