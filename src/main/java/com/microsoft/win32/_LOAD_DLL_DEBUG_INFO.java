// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _LOAD_DLL_DEBUG_INFO {
 *     HANDLE hFile;
 *     LPVOID lpBaseOfDll;
 *     DWORD dwDebugInfoFileOffset;
 *     DWORD nDebugInfoSize;
 *     LPVOID lpImageName;
 *     WORD fUnicode;
 * };
 * }
 */
public class _LOAD_DLL_DEBUG_INFO {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("hFile"),
        Constants$root.C_POINTER$LAYOUT.withName("lpBaseOfDll"),
        Constants$root.C_LONG$LAYOUT.withName("dwDebugInfoFileOffset"),
        Constants$root.C_LONG$LAYOUT.withName("nDebugInfoSize"),
        Constants$root.C_POINTER$LAYOUT.withName("lpImageName"),
        Constants$root.C_SHORT$LAYOUT.withName("fUnicode"),
        MemoryLayout.paddingLayout(48)
    ).withName("_LOAD_DLL_DEBUG_INFO");
    public static MemoryLayout $LAYOUT() {
        return _LOAD_DLL_DEBUG_INFO.$struct$LAYOUT;
    }
    static final VarHandle hFile$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hFile"));
    public static VarHandle hFile$VH() {
        return _LOAD_DLL_DEBUG_INFO.hFile$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HANDLE hFile;
     * }
     */
    public static MemorySegment hFile$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_LOAD_DLL_DEBUG_INFO.hFile$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HANDLE hFile;
     * }
     */
    public static void hFile$set(MemorySegment seg, MemorySegment x) {
        _LOAD_DLL_DEBUG_INFO.hFile$VH.set(seg, x);
    }
    public static MemorySegment hFile$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_LOAD_DLL_DEBUG_INFO.hFile$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hFile$set(MemorySegment seg, long index, MemorySegment x) {
        _LOAD_DLL_DEBUG_INFO.hFile$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lpBaseOfDll$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lpBaseOfDll"));
    public static VarHandle lpBaseOfDll$VH() {
        return _LOAD_DLL_DEBUG_INFO.lpBaseOfDll$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPVOID lpBaseOfDll;
     * }
     */
    public static MemorySegment lpBaseOfDll$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_LOAD_DLL_DEBUG_INFO.lpBaseOfDll$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPVOID lpBaseOfDll;
     * }
     */
    public static void lpBaseOfDll$set(MemorySegment seg, MemorySegment x) {
        _LOAD_DLL_DEBUG_INFO.lpBaseOfDll$VH.set(seg, x);
    }
    public static MemorySegment lpBaseOfDll$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_LOAD_DLL_DEBUG_INFO.lpBaseOfDll$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpBaseOfDll$set(MemorySegment seg, long index, MemorySegment x) {
        _LOAD_DLL_DEBUG_INFO.lpBaseOfDll$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwDebugInfoFileOffset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwDebugInfoFileOffset"));
    public static VarHandle dwDebugInfoFileOffset$VH() {
        return _LOAD_DLL_DEBUG_INFO.dwDebugInfoFileOffset$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwDebugInfoFileOffset;
     * }
     */
    public static int dwDebugInfoFileOffset$get(MemorySegment seg) {
        return (int)_LOAD_DLL_DEBUG_INFO.dwDebugInfoFileOffset$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwDebugInfoFileOffset;
     * }
     */
    public static void dwDebugInfoFileOffset$set(MemorySegment seg, int x) {
        _LOAD_DLL_DEBUG_INFO.dwDebugInfoFileOffset$VH.set(seg, x);
    }
    public static int dwDebugInfoFileOffset$get(MemorySegment seg, long index) {
        return (int)_LOAD_DLL_DEBUG_INFO.dwDebugInfoFileOffset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwDebugInfoFileOffset$set(MemorySegment seg, long index, int x) {
        _LOAD_DLL_DEBUG_INFO.dwDebugInfoFileOffset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle nDebugInfoSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("nDebugInfoSize"));
    public static VarHandle nDebugInfoSize$VH() {
        return _LOAD_DLL_DEBUG_INFO.nDebugInfoSize$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD nDebugInfoSize;
     * }
     */
    public static int nDebugInfoSize$get(MemorySegment seg) {
        return (int)_LOAD_DLL_DEBUG_INFO.nDebugInfoSize$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD nDebugInfoSize;
     * }
     */
    public static void nDebugInfoSize$set(MemorySegment seg, int x) {
        _LOAD_DLL_DEBUG_INFO.nDebugInfoSize$VH.set(seg, x);
    }
    public static int nDebugInfoSize$get(MemorySegment seg, long index) {
        return (int)_LOAD_DLL_DEBUG_INFO.nDebugInfoSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nDebugInfoSize$set(MemorySegment seg, long index, int x) {
        _LOAD_DLL_DEBUG_INFO.nDebugInfoSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lpImageName$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lpImageName"));
    public static VarHandle lpImageName$VH() {
        return _LOAD_DLL_DEBUG_INFO.lpImageName$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPVOID lpImageName;
     * }
     */
    public static MemorySegment lpImageName$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_LOAD_DLL_DEBUG_INFO.lpImageName$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPVOID lpImageName;
     * }
     */
    public static void lpImageName$set(MemorySegment seg, MemorySegment x) {
        _LOAD_DLL_DEBUG_INFO.lpImageName$VH.set(seg, x);
    }
    public static MemorySegment lpImageName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_LOAD_DLL_DEBUG_INFO.lpImageName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpImageName$set(MemorySegment seg, long index, MemorySegment x) {
        _LOAD_DLL_DEBUG_INFO.lpImageName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle fUnicode$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("fUnicode"));
    public static VarHandle fUnicode$VH() {
        return _LOAD_DLL_DEBUG_INFO.fUnicode$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD fUnicode;
     * }
     */
    public static short fUnicode$get(MemorySegment seg) {
        return (short)_LOAD_DLL_DEBUG_INFO.fUnicode$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD fUnicode;
     * }
     */
    public static void fUnicode$set(MemorySegment seg, short x) {
        _LOAD_DLL_DEBUG_INFO.fUnicode$VH.set(seg, x);
    }
    public static short fUnicode$get(MemorySegment seg, long index) {
        return (short)_LOAD_DLL_DEBUG_INFO.fUnicode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void fUnicode$set(MemorySegment seg, long index, short x) {
        _LOAD_DLL_DEBUG_INFO.fUnicode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


