// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * int (*PFN_IMPORT_PUBLIC_KEY_INFO_EX2_FUNC)(unsigned long dwCertEncodingType,struct _CERT_PUBLIC_KEY_INFO* pInfo,unsigned long dwFlags,void* pvAuxInfo,void** phKey);
 * }
 */
public interface PFN_IMPORT_PUBLIC_KEY_INFO_EX2_FUNC {

    int apply(int dwCertEncodingType, java.lang.foreign.MemorySegment pInfo, int dwFlags, java.lang.foreign.MemorySegment pvAuxInfo, java.lang.foreign.MemorySegment phKey);
    static MemorySegment allocate(PFN_IMPORT_PUBLIC_KEY_INFO_EX2_FUNC fi, SegmentScope scope) {
        return RuntimeHelper.upcallStub(constants$780.PFN_IMPORT_PUBLIC_KEY_INFO_EX2_FUNC_UP$MH, fi, constants$780.PFN_IMPORT_PUBLIC_KEY_INFO_EX2_FUNC$FUNC, scope);
    }
    static PFN_IMPORT_PUBLIC_KEY_INFO_EX2_FUNC ofAddress(MemorySegment addr, SegmentScope scope) {
        MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
        return (int _dwCertEncodingType, java.lang.foreign.MemorySegment _pInfo, int _dwFlags, java.lang.foreign.MemorySegment _pvAuxInfo, java.lang.foreign.MemorySegment _phKey) -> {
            try {
                return (int)constants$780.PFN_IMPORT_PUBLIC_KEY_INFO_EX2_FUNC_DOWN$MH.invokeExact(symbol, _dwCertEncodingType, _pInfo, _dwFlags, _pvAuxInfo, _phKey);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


