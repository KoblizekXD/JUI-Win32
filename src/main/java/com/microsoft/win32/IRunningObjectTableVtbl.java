// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IRunningObjectTableVtbl {
 *     HRESULT (*QueryInterface)(IRunningObjectTable*,const IID*,void**);
 *     ULONG (*AddRef)(IRunningObjectTable*);
 *     ULONG (*Release)(IRunningObjectTable*);
 *     HRESULT (*Register)(IRunningObjectTable*,DWORD,IUnknown*,IMoniker*,DWORD*);
 *     HRESULT (*Revoke)(IRunningObjectTable*,DWORD);
 *     HRESULT (*IsRunning)(IRunningObjectTable*,IMoniker*);
 *     HRESULT (*GetObjectA)(IRunningObjectTable*,IMoniker*,IUnknown**);
 *     HRESULT (*NoteChangeTime)(IRunningObjectTable*,DWORD,FILETIME*);
 *     HRESULT (*GetTimeOfLastChange)(IRunningObjectTable*,IMoniker*,FILETIME*);
 *     HRESULT (*EnumRunning)(IRunningObjectTable*,IEnumMoniker**);
 * };
 * }
 */
public class IRunningObjectTableVtbl {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("Register"),
        Constants$root.C_POINTER$LAYOUT.withName("Revoke"),
        Constants$root.C_POINTER$LAYOUT.withName("IsRunning"),
        Constants$root.C_POINTER$LAYOUT.withName("GetObjectA"),
        Constants$root.C_POINTER$LAYOUT.withName("NoteChangeTime"),
        Constants$root.C_POINTER$LAYOUT.withName("GetTimeOfLastChange"),
        Constants$root.C_POINTER$LAYOUT.withName("EnumRunning")
    ).withName("IRunningObjectTableVtbl");
    public static MemoryLayout $LAYOUT() {
        return IRunningObjectTableVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor QueryInterface_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_UP$MH = RuntimeHelper.upcallHandle(QueryInterface.class, "apply", IRunningObjectTableVtbl.QueryInterface_UP$FUNC);
    static final FunctionDescriptor QueryInterface_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_DOWN$MH = RuntimeHelper.downcallHandle(
        IRunningObjectTableVtbl.QueryInterface_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(IRunningObjectTable*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IRunningObjectTableVtbl.QueryInterface_UP$MH, fi, IRunningObjectTableVtbl.QueryInterface$FUNC, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IRunningObjectTableVtbl.QueryInterface_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return IRunningObjectTableVtbl.QueryInterface$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IRunningObjectTable*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IRunningObjectTableVtbl.QueryInterface$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IRunningObjectTable*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        IRunningObjectTableVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IRunningObjectTableVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        IRunningObjectTableVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, SegmentScope scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor AddRef_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_UP$MH = RuntimeHelper.upcallHandle(AddRef.class, "apply", IRunningObjectTableVtbl.AddRef_UP$FUNC);
    static final FunctionDescriptor AddRef_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_DOWN$MH = RuntimeHelper.downcallHandle(
        IRunningObjectTableVtbl.AddRef_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*AddRef)(IRunningObjectTable*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IRunningObjectTableVtbl.AddRef_UP$MH, fi, IRunningObjectTableVtbl.AddRef$FUNC, scope);
        }
        static AddRef ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IRunningObjectTableVtbl.AddRef_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return IRunningObjectTableVtbl.AddRef$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(IRunningObjectTable*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IRunningObjectTableVtbl.AddRef$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(IRunningObjectTable*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        IRunningObjectTableVtbl.AddRef$VH.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IRunningObjectTableVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        IRunningObjectTableVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, SegmentScope scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Release_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_UP$MH = RuntimeHelper.upcallHandle(Release.class, "apply", IRunningObjectTableVtbl.Release_UP$FUNC);
    static final FunctionDescriptor Release_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_DOWN$MH = RuntimeHelper.downcallHandle(
        IRunningObjectTableVtbl.Release_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*Release)(IRunningObjectTable*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IRunningObjectTableVtbl.Release_UP$MH, fi, IRunningObjectTableVtbl.Release$FUNC, scope);
        }
        static Release ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IRunningObjectTableVtbl.Release_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return IRunningObjectTableVtbl.Release$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(IRunningObjectTable*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IRunningObjectTableVtbl.Release$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(IRunningObjectTable*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        IRunningObjectTableVtbl.Release$VH.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IRunningObjectTableVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        IRunningObjectTableVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, SegmentScope scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    static final FunctionDescriptor Register$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Register_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Register_UP$MH = RuntimeHelper.upcallHandle(Register.class, "apply", IRunningObjectTableVtbl.Register_UP$FUNC);
    static final FunctionDescriptor Register_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Register_DOWN$MH = RuntimeHelper.downcallHandle(
        IRunningObjectTableVtbl.Register_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*Register)(IRunningObjectTable*,DWORD,IUnknown*,IMoniker*,DWORD*);
     * }
     */
    public interface Register {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(Register fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IRunningObjectTableVtbl.Register_UP$MH, fi, IRunningObjectTableVtbl.Register$FUNC, scope);
        }
        static Register ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (int)IRunningObjectTableVtbl.Register_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Register$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Register"));
    public static VarHandle Register$VH() {
        return IRunningObjectTableVtbl.Register$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Register)(IRunningObjectTable*,DWORD,IUnknown*,IMoniker*,DWORD*);
     * }
     */
    public static MemorySegment Register$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IRunningObjectTableVtbl.Register$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Register)(IRunningObjectTable*,DWORD,IUnknown*,IMoniker*,DWORD*);
     * }
     */
    public static void Register$set(MemorySegment seg, MemorySegment x) {
        IRunningObjectTableVtbl.Register$VH.set(seg, x);
    }
    public static MemorySegment Register$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IRunningObjectTableVtbl.Register$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Register$set(MemorySegment seg, long index, MemorySegment x) {
        IRunningObjectTableVtbl.Register$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Register Register(MemorySegment segment, SegmentScope scope) {
        return Register.ofAddress(Register$get(segment), scope);
    }
    static final FunctionDescriptor Revoke$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor Revoke_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle Revoke_UP$MH = RuntimeHelper.upcallHandle(Revoke.class, "apply", IRunningObjectTableVtbl.Revoke_UP$FUNC);
    static final FunctionDescriptor Revoke_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle Revoke_DOWN$MH = RuntimeHelper.downcallHandle(
        IRunningObjectTableVtbl.Revoke_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*Revoke)(IRunningObjectTable*,DWORD);
     * }
     */
    public interface Revoke {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(Revoke fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IRunningObjectTableVtbl.Revoke_UP$MH, fi, IRunningObjectTableVtbl.Revoke$FUNC, scope);
        }
        static Revoke ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)IRunningObjectTableVtbl.Revoke_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Revoke$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Revoke"));
    public static VarHandle Revoke$VH() {
        return IRunningObjectTableVtbl.Revoke$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Revoke)(IRunningObjectTable*,DWORD);
     * }
     */
    public static MemorySegment Revoke$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IRunningObjectTableVtbl.Revoke$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Revoke)(IRunningObjectTable*,DWORD);
     * }
     */
    public static void Revoke$set(MemorySegment seg, MemorySegment x) {
        IRunningObjectTableVtbl.Revoke$VH.set(seg, x);
    }
    public static MemorySegment Revoke$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IRunningObjectTableVtbl.Revoke$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Revoke$set(MemorySegment seg, long index, MemorySegment x) {
        IRunningObjectTableVtbl.Revoke$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Revoke Revoke(MemorySegment segment, SegmentScope scope) {
        return Revoke.ofAddress(Revoke$get(segment), scope);
    }
    static final FunctionDescriptor IsRunning$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor IsRunning_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle IsRunning_UP$MH = RuntimeHelper.upcallHandle(IsRunning.class, "apply", IRunningObjectTableVtbl.IsRunning_UP$FUNC);
    static final FunctionDescriptor IsRunning_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle IsRunning_DOWN$MH = RuntimeHelper.downcallHandle(
        IRunningObjectTableVtbl.IsRunning_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*IsRunning)(IRunningObjectTable*,IMoniker*);
     * }
     */
    public interface IsRunning {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(IsRunning fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IRunningObjectTableVtbl.IsRunning_UP$MH, fi, IRunningObjectTableVtbl.IsRunning$FUNC, scope);
        }
        static IsRunning ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IRunningObjectTableVtbl.IsRunning_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle IsRunning$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("IsRunning"));
    public static VarHandle IsRunning$VH() {
        return IRunningObjectTableVtbl.IsRunning$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*IsRunning)(IRunningObjectTable*,IMoniker*);
     * }
     */
    public static MemorySegment IsRunning$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IRunningObjectTableVtbl.IsRunning$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*IsRunning)(IRunningObjectTable*,IMoniker*);
     * }
     */
    public static void IsRunning$set(MemorySegment seg, MemorySegment x) {
        IRunningObjectTableVtbl.IsRunning$VH.set(seg, x);
    }
    public static MemorySegment IsRunning$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IRunningObjectTableVtbl.IsRunning$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void IsRunning$set(MemorySegment seg, long index, MemorySegment x) {
        IRunningObjectTableVtbl.IsRunning$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static IsRunning IsRunning(MemorySegment segment, SegmentScope scope) {
        return IsRunning.ofAddress(IsRunning$get(segment), scope);
    }
    static final FunctionDescriptor GetObjectA$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetObjectA_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetObjectA_UP$MH = RuntimeHelper.upcallHandle(GetObjectA.class, "apply", IRunningObjectTableVtbl.GetObjectA_UP$FUNC);
    static final FunctionDescriptor GetObjectA_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetObjectA_DOWN$MH = RuntimeHelper.downcallHandle(
        IRunningObjectTableVtbl.GetObjectA_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetObjectA)(IRunningObjectTable*,IMoniker*,IUnknown**);
     * }
     */
    public interface GetObjectA {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetObjectA fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IRunningObjectTableVtbl.GetObjectA_UP$MH, fi, IRunningObjectTableVtbl.GetObjectA$FUNC, scope);
        }
        static GetObjectA ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IRunningObjectTableVtbl.GetObjectA_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetObjectA$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetObjectA"));
    public static VarHandle GetObjectA$VH() {
        return IRunningObjectTableVtbl.GetObjectA$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetObjectA)(IRunningObjectTable*,IMoniker*,IUnknown**);
     * }
     */
    public static MemorySegment GetObjectA$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IRunningObjectTableVtbl.GetObjectA$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetObjectA)(IRunningObjectTable*,IMoniker*,IUnknown**);
     * }
     */
    public static void GetObjectA$set(MemorySegment seg, MemorySegment x) {
        IRunningObjectTableVtbl.GetObjectA$VH.set(seg, x);
    }
    public static MemorySegment GetObjectA$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IRunningObjectTableVtbl.GetObjectA$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetObjectA$set(MemorySegment seg, long index, MemorySegment x) {
        IRunningObjectTableVtbl.GetObjectA$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetObjectA GetObjectA(MemorySegment segment, SegmentScope scope) {
        return GetObjectA.ofAddress(GetObjectA$get(segment), scope);
    }
    static final FunctionDescriptor NoteChangeTime$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor NoteChangeTime_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle NoteChangeTime_UP$MH = RuntimeHelper.upcallHandle(NoteChangeTime.class, "apply", IRunningObjectTableVtbl.NoteChangeTime_UP$FUNC);
    static final FunctionDescriptor NoteChangeTime_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle NoteChangeTime_DOWN$MH = RuntimeHelper.downcallHandle(
        IRunningObjectTableVtbl.NoteChangeTime_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*NoteChangeTime)(IRunningObjectTable*,DWORD,FILETIME*);
     * }
     */
    public interface NoteChangeTime {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(NoteChangeTime fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IRunningObjectTableVtbl.NoteChangeTime_UP$MH, fi, IRunningObjectTableVtbl.NoteChangeTime$FUNC, scope);
        }
        static NoteChangeTime ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IRunningObjectTableVtbl.NoteChangeTime_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle NoteChangeTime$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("NoteChangeTime"));
    public static VarHandle NoteChangeTime$VH() {
        return IRunningObjectTableVtbl.NoteChangeTime$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*NoteChangeTime)(IRunningObjectTable*,DWORD,FILETIME*);
     * }
     */
    public static MemorySegment NoteChangeTime$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IRunningObjectTableVtbl.NoteChangeTime$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*NoteChangeTime)(IRunningObjectTable*,DWORD,FILETIME*);
     * }
     */
    public static void NoteChangeTime$set(MemorySegment seg, MemorySegment x) {
        IRunningObjectTableVtbl.NoteChangeTime$VH.set(seg, x);
    }
    public static MemorySegment NoteChangeTime$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IRunningObjectTableVtbl.NoteChangeTime$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void NoteChangeTime$set(MemorySegment seg, long index, MemorySegment x) {
        IRunningObjectTableVtbl.NoteChangeTime$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static NoteChangeTime NoteChangeTime(MemorySegment segment, SegmentScope scope) {
        return NoteChangeTime.ofAddress(NoteChangeTime$get(segment), scope);
    }
    static final FunctionDescriptor GetTimeOfLastChange$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetTimeOfLastChange_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetTimeOfLastChange_UP$MH = RuntimeHelper.upcallHandle(GetTimeOfLastChange.class, "apply", IRunningObjectTableVtbl.GetTimeOfLastChange_UP$FUNC);
    static final FunctionDescriptor GetTimeOfLastChange_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetTimeOfLastChange_DOWN$MH = RuntimeHelper.downcallHandle(
        IRunningObjectTableVtbl.GetTimeOfLastChange_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetTimeOfLastChange)(IRunningObjectTable*,IMoniker*,FILETIME*);
     * }
     */
    public interface GetTimeOfLastChange {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetTimeOfLastChange fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IRunningObjectTableVtbl.GetTimeOfLastChange_UP$MH, fi, IRunningObjectTableVtbl.GetTimeOfLastChange$FUNC, scope);
        }
        static GetTimeOfLastChange ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IRunningObjectTableVtbl.GetTimeOfLastChange_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetTimeOfLastChange$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetTimeOfLastChange"));
    public static VarHandle GetTimeOfLastChange$VH() {
        return IRunningObjectTableVtbl.GetTimeOfLastChange$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetTimeOfLastChange)(IRunningObjectTable*,IMoniker*,FILETIME*);
     * }
     */
    public static MemorySegment GetTimeOfLastChange$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IRunningObjectTableVtbl.GetTimeOfLastChange$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetTimeOfLastChange)(IRunningObjectTable*,IMoniker*,FILETIME*);
     * }
     */
    public static void GetTimeOfLastChange$set(MemorySegment seg, MemorySegment x) {
        IRunningObjectTableVtbl.GetTimeOfLastChange$VH.set(seg, x);
    }
    public static MemorySegment GetTimeOfLastChange$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IRunningObjectTableVtbl.GetTimeOfLastChange$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTimeOfLastChange$set(MemorySegment seg, long index, MemorySegment x) {
        IRunningObjectTableVtbl.GetTimeOfLastChange$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTimeOfLastChange GetTimeOfLastChange(MemorySegment segment, SegmentScope scope) {
        return GetTimeOfLastChange.ofAddress(GetTimeOfLastChange$get(segment), scope);
    }
    static final FunctionDescriptor EnumRunning$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor EnumRunning_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle EnumRunning_UP$MH = RuntimeHelper.upcallHandle(EnumRunning.class, "apply", IRunningObjectTableVtbl.EnumRunning_UP$FUNC);
    static final FunctionDescriptor EnumRunning_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle EnumRunning_DOWN$MH = RuntimeHelper.downcallHandle(
        IRunningObjectTableVtbl.EnumRunning_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*EnumRunning)(IRunningObjectTable*,IEnumMoniker**);
     * }
     */
    public interface EnumRunning {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(EnumRunning fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IRunningObjectTableVtbl.EnumRunning_UP$MH, fi, IRunningObjectTableVtbl.EnumRunning$FUNC, scope);
        }
        static EnumRunning ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IRunningObjectTableVtbl.EnumRunning_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle EnumRunning$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("EnumRunning"));
    public static VarHandle EnumRunning$VH() {
        return IRunningObjectTableVtbl.EnumRunning$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*EnumRunning)(IRunningObjectTable*,IEnumMoniker**);
     * }
     */
    public static MemorySegment EnumRunning$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IRunningObjectTableVtbl.EnumRunning$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*EnumRunning)(IRunningObjectTable*,IEnumMoniker**);
     * }
     */
    public static void EnumRunning$set(MemorySegment seg, MemorySegment x) {
        IRunningObjectTableVtbl.EnumRunning$VH.set(seg, x);
    }
    public static MemorySegment EnumRunning$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IRunningObjectTableVtbl.EnumRunning$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void EnumRunning$set(MemorySegment seg, long index, MemorySegment x) {
        IRunningObjectTableVtbl.EnumRunning$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static EnumRunning EnumRunning(MemorySegment segment, SegmentScope scope) {
        return EnumRunning.ofAddress(EnumRunning$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


