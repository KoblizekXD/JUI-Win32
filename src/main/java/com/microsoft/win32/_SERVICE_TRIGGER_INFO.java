// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _SERVICE_TRIGGER_INFO {
 *     DWORD cTriggers;
 *     PSERVICE_TRIGGER pTriggers;
 *     PBYTE pReserved;
 * };
 * }
 */
public class _SERVICE_TRIGGER_INFO {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("cTriggers"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("pTriggers"),
        Constants$root.C_POINTER$LAYOUT.withName("pReserved")
    ).withName("_SERVICE_TRIGGER_INFO");
    public static MemoryLayout $LAYOUT() {
        return _SERVICE_TRIGGER_INFO.$struct$LAYOUT;
    }
    static final VarHandle cTriggers$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cTriggers"));
    public static VarHandle cTriggers$VH() {
        return _SERVICE_TRIGGER_INFO.cTriggers$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD cTriggers;
     * }
     */
    public static int cTriggers$get(MemorySegment seg) {
        return (int)_SERVICE_TRIGGER_INFO.cTriggers$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD cTriggers;
     * }
     */
    public static void cTriggers$set(MemorySegment seg, int x) {
        _SERVICE_TRIGGER_INFO.cTriggers$VH.set(seg, x);
    }
    public static int cTriggers$get(MemorySegment seg, long index) {
        return (int)_SERVICE_TRIGGER_INFO.cTriggers$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cTriggers$set(MemorySegment seg, long index, int x) {
        _SERVICE_TRIGGER_INFO.cTriggers$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pTriggers$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pTriggers"));
    public static VarHandle pTriggers$VH() {
        return _SERVICE_TRIGGER_INFO.pTriggers$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PSERVICE_TRIGGER pTriggers;
     * }
     */
    public static MemorySegment pTriggers$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_SERVICE_TRIGGER_INFO.pTriggers$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PSERVICE_TRIGGER pTriggers;
     * }
     */
    public static void pTriggers$set(MemorySegment seg, MemorySegment x) {
        _SERVICE_TRIGGER_INFO.pTriggers$VH.set(seg, x);
    }
    public static MemorySegment pTriggers$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_SERVICE_TRIGGER_INFO.pTriggers$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pTriggers$set(MemorySegment seg, long index, MemorySegment x) {
        _SERVICE_TRIGGER_INFO.pTriggers$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pReserved$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pReserved"));
    public static VarHandle pReserved$VH() {
        return _SERVICE_TRIGGER_INFO.pReserved$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PBYTE pReserved;
     * }
     */
    public static MemorySegment pReserved$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_SERVICE_TRIGGER_INFO.pReserved$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PBYTE pReserved;
     * }
     */
    public static void pReserved$set(MemorySegment seg, MemorySegment x) {
        _SERVICE_TRIGGER_INFO.pReserved$VH.set(seg, x);
    }
    public static MemorySegment pReserved$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_SERVICE_TRIGGER_INFO.pReserved$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pReserved$set(MemorySegment seg, long index, MemorySegment x) {
        _SERVICE_TRIGGER_INFO.pReserved$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


