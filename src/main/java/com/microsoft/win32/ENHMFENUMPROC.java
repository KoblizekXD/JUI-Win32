// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * int (*ENHMFENUMPROC)(struct HDC__* hdc,struct tagHANDLETABLE* lpht,struct tagENHMETARECORD* lpmr,int nHandles,long long data);
 * }
 */
public interface ENHMFENUMPROC {

    int apply(java.lang.foreign.MemorySegment hdc, java.lang.foreign.MemorySegment lpht, java.lang.foreign.MemorySegment lpmr, int nHandles, long data);
    static MemorySegment allocate(ENHMFENUMPROC fi, SegmentScope scope) {
        return RuntimeHelper.upcallStub(constants$365.ENHMFENUMPROC_UP$MH, fi, constants$365.ENHMFENUMPROC$FUNC, scope);
    }
    static ENHMFENUMPROC ofAddress(MemorySegment addr, SegmentScope scope) {
        MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
        return (java.lang.foreign.MemorySegment _hdc, java.lang.foreign.MemorySegment _lpht, java.lang.foreign.MemorySegment _lpmr, int _nHandles, long _data) -> {
            try {
                return (int)constants$365.ENHMFENUMPROC_DOWN$MH.invokeExact(symbol, _hdc, _lpht, _lpmr, _nHandles, _data);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


