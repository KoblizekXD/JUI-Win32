// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IMonikerVtbl {
 *     HRESULT (*QueryInterface)(IMoniker*,const IID*,void**);
 *     ULONG (*AddRef)(IMoniker*);
 *     ULONG (*Release)(IMoniker*);
 *     HRESULT (*GetClassID)(IMoniker*,CLSID*);
 *     HRESULT (*IsDirty)(IMoniker*);
 *     HRESULT (*Load)(IMoniker*,IStream*);
 *     HRESULT (*Save)(IMoniker*,IStream*,BOOL);
 *     HRESULT (*GetSizeMax)(IMoniker*,ULARGE_INTEGER*);
 *     HRESULT (*BindToObject)(IMoniker*,IBindCtx*,IMoniker*,const IID*,void**);
 *     HRESULT (*BindToStorage)(IMoniker*,IBindCtx*,IMoniker*,const IID*,void**);
 *     HRESULT (*Reduce)(IMoniker*,IBindCtx*,DWORD,IMoniker**,IMoniker**);
 *     HRESULT (*ComposeWith)(IMoniker*,IMoniker*,BOOL,IMoniker**);
 *     HRESULT (*Enum)(IMoniker*,BOOL,IEnumMoniker**);
 *     HRESULT (*IsEqual)(IMoniker*,IMoniker*);
 *     HRESULT (*Hash)(IMoniker*,DWORD*);
 *     HRESULT (*IsRunning)(IMoniker*,IBindCtx*,IMoniker*,IMoniker*);
 *     HRESULT (*GetTimeOfLastChange)(IMoniker*,IBindCtx*,IMoniker*,FILETIME*);
 *     HRESULT (*Inverse)(IMoniker*,IMoniker**);
 *     HRESULT (*CommonPrefixWith)(IMoniker*,IMoniker*,IMoniker**);
 *     HRESULT (*RelativePathTo)(IMoniker*,IMoniker*,IMoniker**);
 *     HRESULT (*GetDisplayName)(IMoniker*,IBindCtx*,IMoniker*,LPOLESTR*);
 *     HRESULT (*ParseDisplayName)(IMoniker*,IBindCtx*,IMoniker*,LPOLESTR,ULONG*,IMoniker**);
 *     HRESULT (*IsSystemMoniker)(IMoniker*,DWORD*);
 * };
 * }
 */
public class IMonikerVtbl {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("GetClassID"),
        Constants$root.C_POINTER$LAYOUT.withName("IsDirty"),
        Constants$root.C_POINTER$LAYOUT.withName("Load"),
        Constants$root.C_POINTER$LAYOUT.withName("Save"),
        Constants$root.C_POINTER$LAYOUT.withName("GetSizeMax"),
        Constants$root.C_POINTER$LAYOUT.withName("BindToObject"),
        Constants$root.C_POINTER$LAYOUT.withName("BindToStorage"),
        Constants$root.C_POINTER$LAYOUT.withName("Reduce"),
        Constants$root.C_POINTER$LAYOUT.withName("ComposeWith"),
        Constants$root.C_POINTER$LAYOUT.withName("Enum"),
        Constants$root.C_POINTER$LAYOUT.withName("IsEqual"),
        Constants$root.C_POINTER$LAYOUT.withName("Hash"),
        Constants$root.C_POINTER$LAYOUT.withName("IsRunning"),
        Constants$root.C_POINTER$LAYOUT.withName("GetTimeOfLastChange"),
        Constants$root.C_POINTER$LAYOUT.withName("Inverse"),
        Constants$root.C_POINTER$LAYOUT.withName("CommonPrefixWith"),
        Constants$root.C_POINTER$LAYOUT.withName("RelativePathTo"),
        Constants$root.C_POINTER$LAYOUT.withName("GetDisplayName"),
        Constants$root.C_POINTER$LAYOUT.withName("ParseDisplayName"),
        Constants$root.C_POINTER$LAYOUT.withName("IsSystemMoniker")
    ).withName("IMonikerVtbl");
    public static MemoryLayout $LAYOUT() {
        return IMonikerVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor QueryInterface_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_UP$MH = RuntimeHelper.upcallHandle(QueryInterface.class, "apply", IMonikerVtbl.QueryInterface_UP$FUNC);
    static final FunctionDescriptor QueryInterface_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_DOWN$MH = RuntimeHelper.downcallHandle(
        IMonikerVtbl.QueryInterface_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(IMoniker*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IMonikerVtbl.QueryInterface_UP$MH, fi, IMonikerVtbl.QueryInterface$FUNC, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IMonikerVtbl.QueryInterface_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return IMonikerVtbl.QueryInterface$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IMoniker*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IMonikerVtbl.QueryInterface$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IMoniker*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        IMonikerVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IMonikerVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        IMonikerVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, SegmentScope scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor AddRef_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_UP$MH = RuntimeHelper.upcallHandle(AddRef.class, "apply", IMonikerVtbl.AddRef_UP$FUNC);
    static final FunctionDescriptor AddRef_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_DOWN$MH = RuntimeHelper.downcallHandle(
        IMonikerVtbl.AddRef_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*AddRef)(IMoniker*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IMonikerVtbl.AddRef_UP$MH, fi, IMonikerVtbl.AddRef$FUNC, scope);
        }
        static AddRef ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IMonikerVtbl.AddRef_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return IMonikerVtbl.AddRef$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(IMoniker*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IMonikerVtbl.AddRef$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(IMoniker*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        IMonikerVtbl.AddRef$VH.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IMonikerVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        IMonikerVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, SegmentScope scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Release_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_UP$MH = RuntimeHelper.upcallHandle(Release.class, "apply", IMonikerVtbl.Release_UP$FUNC);
    static final FunctionDescriptor Release_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_DOWN$MH = RuntimeHelper.downcallHandle(
        IMonikerVtbl.Release_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*Release)(IMoniker*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IMonikerVtbl.Release_UP$MH, fi, IMonikerVtbl.Release$FUNC, scope);
        }
        static Release ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IMonikerVtbl.Release_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return IMonikerVtbl.Release$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(IMoniker*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IMonikerVtbl.Release$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(IMoniker*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        IMonikerVtbl.Release$VH.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IMonikerVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        IMonikerVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, SegmentScope scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    static final FunctionDescriptor GetClassID$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetClassID_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetClassID_UP$MH = RuntimeHelper.upcallHandle(GetClassID.class, "apply", IMonikerVtbl.GetClassID_UP$FUNC);
    static final FunctionDescriptor GetClassID_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetClassID_DOWN$MH = RuntimeHelper.downcallHandle(
        IMonikerVtbl.GetClassID_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetClassID)(IMoniker*,CLSID*);
     * }
     */
    public interface GetClassID {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetClassID fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IMonikerVtbl.GetClassID_UP$MH, fi, IMonikerVtbl.GetClassID$FUNC, scope);
        }
        static GetClassID ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IMonikerVtbl.GetClassID_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetClassID$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetClassID"));
    public static VarHandle GetClassID$VH() {
        return IMonikerVtbl.GetClassID$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetClassID)(IMoniker*,CLSID*);
     * }
     */
    public static MemorySegment GetClassID$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IMonikerVtbl.GetClassID$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetClassID)(IMoniker*,CLSID*);
     * }
     */
    public static void GetClassID$set(MemorySegment seg, MemorySegment x) {
        IMonikerVtbl.GetClassID$VH.set(seg, x);
    }
    public static MemorySegment GetClassID$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IMonikerVtbl.GetClassID$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetClassID$set(MemorySegment seg, long index, MemorySegment x) {
        IMonikerVtbl.GetClassID$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetClassID GetClassID(MemorySegment segment, SegmentScope scope) {
        return GetClassID.ofAddress(GetClassID$get(segment), scope);
    }
    static final FunctionDescriptor IsDirty$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor IsDirty_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle IsDirty_UP$MH = RuntimeHelper.upcallHandle(IsDirty.class, "apply", IMonikerVtbl.IsDirty_UP$FUNC);
    static final FunctionDescriptor IsDirty_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle IsDirty_DOWN$MH = RuntimeHelper.downcallHandle(
        IMonikerVtbl.IsDirty_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*IsDirty)(IMoniker*);
     * }
     */
    public interface IsDirty {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(IsDirty fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IMonikerVtbl.IsDirty_UP$MH, fi, IMonikerVtbl.IsDirty$FUNC, scope);
        }
        static IsDirty ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IMonikerVtbl.IsDirty_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle IsDirty$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("IsDirty"));
    public static VarHandle IsDirty$VH() {
        return IMonikerVtbl.IsDirty$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*IsDirty)(IMoniker*);
     * }
     */
    public static MemorySegment IsDirty$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IMonikerVtbl.IsDirty$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*IsDirty)(IMoniker*);
     * }
     */
    public static void IsDirty$set(MemorySegment seg, MemorySegment x) {
        IMonikerVtbl.IsDirty$VH.set(seg, x);
    }
    public static MemorySegment IsDirty$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IMonikerVtbl.IsDirty$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void IsDirty$set(MemorySegment seg, long index, MemorySegment x) {
        IMonikerVtbl.IsDirty$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static IsDirty IsDirty(MemorySegment segment, SegmentScope scope) {
        return IsDirty.ofAddress(IsDirty$get(segment), scope);
    }
    static final FunctionDescriptor Load$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Load_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Load_UP$MH = RuntimeHelper.upcallHandle(Load.class, "apply", IMonikerVtbl.Load_UP$FUNC);
    static final FunctionDescriptor Load_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Load_DOWN$MH = RuntimeHelper.downcallHandle(
        IMonikerVtbl.Load_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*Load)(IMoniker*,IStream*);
     * }
     */
    public interface Load {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(Load fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IMonikerVtbl.Load_UP$MH, fi, IMonikerVtbl.Load$FUNC, scope);
        }
        static Load ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IMonikerVtbl.Load_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Load$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Load"));
    public static VarHandle Load$VH() {
        return IMonikerVtbl.Load$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Load)(IMoniker*,IStream*);
     * }
     */
    public static MemorySegment Load$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IMonikerVtbl.Load$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Load)(IMoniker*,IStream*);
     * }
     */
    public static void Load$set(MemorySegment seg, MemorySegment x) {
        IMonikerVtbl.Load$VH.set(seg, x);
    }
    public static MemorySegment Load$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IMonikerVtbl.Load$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Load$set(MemorySegment seg, long index, MemorySegment x) {
        IMonikerVtbl.Load$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Load Load(MemorySegment segment, SegmentScope scope) {
        return Load.ofAddress(Load$get(segment), scope);
    }
    static final FunctionDescriptor Save$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor Save_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle Save_UP$MH = RuntimeHelper.upcallHandle(Save.class, "apply", IMonikerVtbl.Save_UP$FUNC);
    static final FunctionDescriptor Save_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle Save_DOWN$MH = RuntimeHelper.downcallHandle(
        IMonikerVtbl.Save_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*Save)(IMoniker*,IStream*,BOOL);
     * }
     */
    public interface Save {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2);
        static MemorySegment allocate(Save fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IMonikerVtbl.Save_UP$MH, fi, IMonikerVtbl.Save$FUNC, scope);
        }
        static Save ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2) -> {
                try {
                    return (int)IMonikerVtbl.Save_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Save$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Save"));
    public static VarHandle Save$VH() {
        return IMonikerVtbl.Save$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Save)(IMoniker*,IStream*,BOOL);
     * }
     */
    public static MemorySegment Save$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IMonikerVtbl.Save$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Save)(IMoniker*,IStream*,BOOL);
     * }
     */
    public static void Save$set(MemorySegment seg, MemorySegment x) {
        IMonikerVtbl.Save$VH.set(seg, x);
    }
    public static MemorySegment Save$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IMonikerVtbl.Save$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Save$set(MemorySegment seg, long index, MemorySegment x) {
        IMonikerVtbl.Save$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Save Save(MemorySegment segment, SegmentScope scope) {
        return Save.ofAddress(Save$get(segment), scope);
    }
    static final FunctionDescriptor GetSizeMax$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetSizeMax_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetSizeMax_UP$MH = RuntimeHelper.upcallHandle(GetSizeMax.class, "apply", IMonikerVtbl.GetSizeMax_UP$FUNC);
    static final FunctionDescriptor GetSizeMax_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetSizeMax_DOWN$MH = RuntimeHelper.downcallHandle(
        IMonikerVtbl.GetSizeMax_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetSizeMax)(IMoniker*,ULARGE_INTEGER*);
     * }
     */
    public interface GetSizeMax {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetSizeMax fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IMonikerVtbl.GetSizeMax_UP$MH, fi, IMonikerVtbl.GetSizeMax$FUNC, scope);
        }
        static GetSizeMax ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IMonikerVtbl.GetSizeMax_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetSizeMax$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetSizeMax"));
    public static VarHandle GetSizeMax$VH() {
        return IMonikerVtbl.GetSizeMax$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetSizeMax)(IMoniker*,ULARGE_INTEGER*);
     * }
     */
    public static MemorySegment GetSizeMax$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IMonikerVtbl.GetSizeMax$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetSizeMax)(IMoniker*,ULARGE_INTEGER*);
     * }
     */
    public static void GetSizeMax$set(MemorySegment seg, MemorySegment x) {
        IMonikerVtbl.GetSizeMax$VH.set(seg, x);
    }
    public static MemorySegment GetSizeMax$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IMonikerVtbl.GetSizeMax$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetSizeMax$set(MemorySegment seg, long index, MemorySegment x) {
        IMonikerVtbl.GetSizeMax$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetSizeMax GetSizeMax(MemorySegment segment, SegmentScope scope) {
        return GetSizeMax.ofAddress(GetSizeMax$get(segment), scope);
    }
    static final FunctionDescriptor BindToObject$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor BindToObject_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle BindToObject_UP$MH = RuntimeHelper.upcallHandle(BindToObject.class, "apply", IMonikerVtbl.BindToObject_UP$FUNC);
    static final FunctionDescriptor BindToObject_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle BindToObject_DOWN$MH = RuntimeHelper.downcallHandle(
        IMonikerVtbl.BindToObject_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*BindToObject)(IMoniker*,IBindCtx*,IMoniker*,const IID*,void**);
     * }
     */
    public interface BindToObject {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(BindToObject fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IMonikerVtbl.BindToObject_UP$MH, fi, IMonikerVtbl.BindToObject$FUNC, scope);
        }
        static BindToObject ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (int)IMonikerVtbl.BindToObject_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle BindToObject$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("BindToObject"));
    public static VarHandle BindToObject$VH() {
        return IMonikerVtbl.BindToObject$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*BindToObject)(IMoniker*,IBindCtx*,IMoniker*,const IID*,void**);
     * }
     */
    public static MemorySegment BindToObject$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IMonikerVtbl.BindToObject$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*BindToObject)(IMoniker*,IBindCtx*,IMoniker*,const IID*,void**);
     * }
     */
    public static void BindToObject$set(MemorySegment seg, MemorySegment x) {
        IMonikerVtbl.BindToObject$VH.set(seg, x);
    }
    public static MemorySegment BindToObject$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IMonikerVtbl.BindToObject$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void BindToObject$set(MemorySegment seg, long index, MemorySegment x) {
        IMonikerVtbl.BindToObject$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static BindToObject BindToObject(MemorySegment segment, SegmentScope scope) {
        return BindToObject.ofAddress(BindToObject$get(segment), scope);
    }
    static final FunctionDescriptor BindToStorage$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor BindToStorage_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle BindToStorage_UP$MH = RuntimeHelper.upcallHandle(BindToStorage.class, "apply", IMonikerVtbl.BindToStorage_UP$FUNC);
    static final FunctionDescriptor BindToStorage_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle BindToStorage_DOWN$MH = RuntimeHelper.downcallHandle(
        IMonikerVtbl.BindToStorage_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*BindToStorage)(IMoniker*,IBindCtx*,IMoniker*,const IID*,void**);
     * }
     */
    public interface BindToStorage {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(BindToStorage fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IMonikerVtbl.BindToStorage_UP$MH, fi, IMonikerVtbl.BindToStorage$FUNC, scope);
        }
        static BindToStorage ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (int)IMonikerVtbl.BindToStorage_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle BindToStorage$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("BindToStorage"));
    public static VarHandle BindToStorage$VH() {
        return IMonikerVtbl.BindToStorage$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*BindToStorage)(IMoniker*,IBindCtx*,IMoniker*,const IID*,void**);
     * }
     */
    public static MemorySegment BindToStorage$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IMonikerVtbl.BindToStorage$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*BindToStorage)(IMoniker*,IBindCtx*,IMoniker*,const IID*,void**);
     * }
     */
    public static void BindToStorage$set(MemorySegment seg, MemorySegment x) {
        IMonikerVtbl.BindToStorage$VH.set(seg, x);
    }
    public static MemorySegment BindToStorage$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IMonikerVtbl.BindToStorage$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void BindToStorage$set(MemorySegment seg, long index, MemorySegment x) {
        IMonikerVtbl.BindToStorage$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static BindToStorage BindToStorage(MemorySegment segment, SegmentScope scope) {
        return BindToStorage.ofAddress(BindToStorage$get(segment), scope);
    }
    static final FunctionDescriptor Reduce$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Reduce_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Reduce_UP$MH = RuntimeHelper.upcallHandle(Reduce.class, "apply", IMonikerVtbl.Reduce_UP$FUNC);
    static final FunctionDescriptor Reduce_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Reduce_DOWN$MH = RuntimeHelper.downcallHandle(
        IMonikerVtbl.Reduce_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*Reduce)(IMoniker*,IBindCtx*,DWORD,IMoniker**,IMoniker**);
     * }
     */
    public interface Reduce {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(Reduce fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IMonikerVtbl.Reduce_UP$MH, fi, IMonikerVtbl.Reduce$FUNC, scope);
        }
        static Reduce ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (int)IMonikerVtbl.Reduce_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Reduce$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Reduce"));
    public static VarHandle Reduce$VH() {
        return IMonikerVtbl.Reduce$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Reduce)(IMoniker*,IBindCtx*,DWORD,IMoniker**,IMoniker**);
     * }
     */
    public static MemorySegment Reduce$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IMonikerVtbl.Reduce$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Reduce)(IMoniker*,IBindCtx*,DWORD,IMoniker**,IMoniker**);
     * }
     */
    public static void Reduce$set(MemorySegment seg, MemorySegment x) {
        IMonikerVtbl.Reduce$VH.set(seg, x);
    }
    public static MemorySegment Reduce$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IMonikerVtbl.Reduce$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Reduce$set(MemorySegment seg, long index, MemorySegment x) {
        IMonikerVtbl.Reduce$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Reduce Reduce(MemorySegment segment, SegmentScope scope) {
        return Reduce.ofAddress(Reduce$get(segment), scope);
    }
    static final FunctionDescriptor ComposeWith$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor ComposeWith_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ComposeWith_UP$MH = RuntimeHelper.upcallHandle(ComposeWith.class, "apply", IMonikerVtbl.ComposeWith_UP$FUNC);
    static final FunctionDescriptor ComposeWith_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ComposeWith_DOWN$MH = RuntimeHelper.downcallHandle(
        IMonikerVtbl.ComposeWith_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*ComposeWith)(IMoniker*,IMoniker*,BOOL,IMoniker**);
     * }
     */
    public interface ComposeWith {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(ComposeWith fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IMonikerVtbl.ComposeWith_UP$MH, fi, IMonikerVtbl.ComposeWith$FUNC, scope);
        }
        static ComposeWith ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)IMonikerVtbl.ComposeWith_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ComposeWith$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ComposeWith"));
    public static VarHandle ComposeWith$VH() {
        return IMonikerVtbl.ComposeWith$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*ComposeWith)(IMoniker*,IMoniker*,BOOL,IMoniker**);
     * }
     */
    public static MemorySegment ComposeWith$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IMonikerVtbl.ComposeWith$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*ComposeWith)(IMoniker*,IMoniker*,BOOL,IMoniker**);
     * }
     */
    public static void ComposeWith$set(MemorySegment seg, MemorySegment x) {
        IMonikerVtbl.ComposeWith$VH.set(seg, x);
    }
    public static MemorySegment ComposeWith$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IMonikerVtbl.ComposeWith$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ComposeWith$set(MemorySegment seg, long index, MemorySegment x) {
        IMonikerVtbl.ComposeWith$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ComposeWith ComposeWith(MemorySegment segment, SegmentScope scope) {
        return ComposeWith.ofAddress(ComposeWith$get(segment), scope);
    }
    static final FunctionDescriptor Enum$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Enum_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Enum_UP$MH = RuntimeHelper.upcallHandle(Enum.class, "apply", IMonikerVtbl.Enum_UP$FUNC);
    static final FunctionDescriptor Enum_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Enum_DOWN$MH = RuntimeHelper.downcallHandle(
        IMonikerVtbl.Enum_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*Enum)(IMoniker*,BOOL,IEnumMoniker**);
     * }
     */
    public interface Enum {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(Enum fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IMonikerVtbl.Enum_UP$MH, fi, IMonikerVtbl.Enum$FUNC, scope);
        }
        static Enum ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IMonikerVtbl.Enum_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Enum$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Enum"));
    public static VarHandle Enum$VH() {
        return IMonikerVtbl.Enum$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Enum)(IMoniker*,BOOL,IEnumMoniker**);
     * }
     */
    public static MemorySegment Enum$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IMonikerVtbl.Enum$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Enum)(IMoniker*,BOOL,IEnumMoniker**);
     * }
     */
    public static void Enum$set(MemorySegment seg, MemorySegment x) {
        IMonikerVtbl.Enum$VH.set(seg, x);
    }
    public static MemorySegment Enum$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IMonikerVtbl.Enum$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Enum$set(MemorySegment seg, long index, MemorySegment x) {
        IMonikerVtbl.Enum$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Enum Enum(MemorySegment segment, SegmentScope scope) {
        return Enum.ofAddress(Enum$get(segment), scope);
    }
    static final FunctionDescriptor IsEqual$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor IsEqual_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle IsEqual_UP$MH = RuntimeHelper.upcallHandle(IsEqual.class, "apply", IMonikerVtbl.IsEqual_UP$FUNC);
    static final FunctionDescriptor IsEqual_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle IsEqual_DOWN$MH = RuntimeHelper.downcallHandle(
        IMonikerVtbl.IsEqual_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*IsEqual)(IMoniker*,IMoniker*);
     * }
     */
    public interface IsEqual {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(IsEqual fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IMonikerVtbl.IsEqual_UP$MH, fi, IMonikerVtbl.IsEqual$FUNC, scope);
        }
        static IsEqual ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IMonikerVtbl.IsEqual_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle IsEqual$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("IsEqual"));
    public static VarHandle IsEqual$VH() {
        return IMonikerVtbl.IsEqual$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*IsEqual)(IMoniker*,IMoniker*);
     * }
     */
    public static MemorySegment IsEqual$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IMonikerVtbl.IsEqual$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*IsEqual)(IMoniker*,IMoniker*);
     * }
     */
    public static void IsEqual$set(MemorySegment seg, MemorySegment x) {
        IMonikerVtbl.IsEqual$VH.set(seg, x);
    }
    public static MemorySegment IsEqual$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IMonikerVtbl.IsEqual$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void IsEqual$set(MemorySegment seg, long index, MemorySegment x) {
        IMonikerVtbl.IsEqual$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static IsEqual IsEqual(MemorySegment segment, SegmentScope scope) {
        return IsEqual.ofAddress(IsEqual$get(segment), scope);
    }
    static final FunctionDescriptor Hash$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Hash_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Hash_UP$MH = RuntimeHelper.upcallHandle(Hash.class, "apply", IMonikerVtbl.Hash_UP$FUNC);
    static final FunctionDescriptor Hash_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Hash_DOWN$MH = RuntimeHelper.downcallHandle(
        IMonikerVtbl.Hash_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*Hash)(IMoniker*,DWORD*);
     * }
     */
    public interface Hash {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(Hash fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IMonikerVtbl.Hash_UP$MH, fi, IMonikerVtbl.Hash$FUNC, scope);
        }
        static Hash ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IMonikerVtbl.Hash_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Hash$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Hash"));
    public static VarHandle Hash$VH() {
        return IMonikerVtbl.Hash$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Hash)(IMoniker*,DWORD*);
     * }
     */
    public static MemorySegment Hash$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IMonikerVtbl.Hash$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Hash)(IMoniker*,DWORD*);
     * }
     */
    public static void Hash$set(MemorySegment seg, MemorySegment x) {
        IMonikerVtbl.Hash$VH.set(seg, x);
    }
    public static MemorySegment Hash$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IMonikerVtbl.Hash$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Hash$set(MemorySegment seg, long index, MemorySegment x) {
        IMonikerVtbl.Hash$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Hash Hash(MemorySegment segment, SegmentScope scope) {
        return Hash.ofAddress(Hash$get(segment), scope);
    }
    static final FunctionDescriptor IsRunning$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor IsRunning_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle IsRunning_UP$MH = RuntimeHelper.upcallHandle(IsRunning.class, "apply", IMonikerVtbl.IsRunning_UP$FUNC);
    static final FunctionDescriptor IsRunning_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle IsRunning_DOWN$MH = RuntimeHelper.downcallHandle(
        IMonikerVtbl.IsRunning_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*IsRunning)(IMoniker*,IBindCtx*,IMoniker*,IMoniker*);
     * }
     */
    public interface IsRunning {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(IsRunning fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IMonikerVtbl.IsRunning_UP$MH, fi, IMonikerVtbl.IsRunning$FUNC, scope);
        }
        static IsRunning ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)IMonikerVtbl.IsRunning_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle IsRunning$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("IsRunning"));
    public static VarHandle IsRunning$VH() {
        return IMonikerVtbl.IsRunning$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*IsRunning)(IMoniker*,IBindCtx*,IMoniker*,IMoniker*);
     * }
     */
    public static MemorySegment IsRunning$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IMonikerVtbl.IsRunning$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*IsRunning)(IMoniker*,IBindCtx*,IMoniker*,IMoniker*);
     * }
     */
    public static void IsRunning$set(MemorySegment seg, MemorySegment x) {
        IMonikerVtbl.IsRunning$VH.set(seg, x);
    }
    public static MemorySegment IsRunning$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IMonikerVtbl.IsRunning$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void IsRunning$set(MemorySegment seg, long index, MemorySegment x) {
        IMonikerVtbl.IsRunning$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static IsRunning IsRunning(MemorySegment segment, SegmentScope scope) {
        return IsRunning.ofAddress(IsRunning$get(segment), scope);
    }
    static final FunctionDescriptor GetTimeOfLastChange$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetTimeOfLastChange_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetTimeOfLastChange_UP$MH = RuntimeHelper.upcallHandle(GetTimeOfLastChange.class, "apply", IMonikerVtbl.GetTimeOfLastChange_UP$FUNC);
    static final FunctionDescriptor GetTimeOfLastChange_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetTimeOfLastChange_DOWN$MH = RuntimeHelper.downcallHandle(
        IMonikerVtbl.GetTimeOfLastChange_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetTimeOfLastChange)(IMoniker*,IBindCtx*,IMoniker*,FILETIME*);
     * }
     */
    public interface GetTimeOfLastChange {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(GetTimeOfLastChange fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IMonikerVtbl.GetTimeOfLastChange_UP$MH, fi, IMonikerVtbl.GetTimeOfLastChange$FUNC, scope);
        }
        static GetTimeOfLastChange ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)IMonikerVtbl.GetTimeOfLastChange_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetTimeOfLastChange$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetTimeOfLastChange"));
    public static VarHandle GetTimeOfLastChange$VH() {
        return IMonikerVtbl.GetTimeOfLastChange$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetTimeOfLastChange)(IMoniker*,IBindCtx*,IMoniker*,FILETIME*);
     * }
     */
    public static MemorySegment GetTimeOfLastChange$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IMonikerVtbl.GetTimeOfLastChange$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetTimeOfLastChange)(IMoniker*,IBindCtx*,IMoniker*,FILETIME*);
     * }
     */
    public static void GetTimeOfLastChange$set(MemorySegment seg, MemorySegment x) {
        IMonikerVtbl.GetTimeOfLastChange$VH.set(seg, x);
    }
    public static MemorySegment GetTimeOfLastChange$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IMonikerVtbl.GetTimeOfLastChange$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTimeOfLastChange$set(MemorySegment seg, long index, MemorySegment x) {
        IMonikerVtbl.GetTimeOfLastChange$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTimeOfLastChange GetTimeOfLastChange(MemorySegment segment, SegmentScope scope) {
        return GetTimeOfLastChange.ofAddress(GetTimeOfLastChange$get(segment), scope);
    }
    static final FunctionDescriptor Inverse$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Inverse_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Inverse_UP$MH = RuntimeHelper.upcallHandle(Inverse.class, "apply", IMonikerVtbl.Inverse_UP$FUNC);
    static final FunctionDescriptor Inverse_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Inverse_DOWN$MH = RuntimeHelper.downcallHandle(
        IMonikerVtbl.Inverse_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*Inverse)(IMoniker*,IMoniker**);
     * }
     */
    public interface Inverse {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(Inverse fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IMonikerVtbl.Inverse_UP$MH, fi, IMonikerVtbl.Inverse$FUNC, scope);
        }
        static Inverse ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IMonikerVtbl.Inverse_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Inverse$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Inverse"));
    public static VarHandle Inverse$VH() {
        return IMonikerVtbl.Inverse$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Inverse)(IMoniker*,IMoniker**);
     * }
     */
    public static MemorySegment Inverse$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IMonikerVtbl.Inverse$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Inverse)(IMoniker*,IMoniker**);
     * }
     */
    public static void Inverse$set(MemorySegment seg, MemorySegment x) {
        IMonikerVtbl.Inverse$VH.set(seg, x);
    }
    public static MemorySegment Inverse$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IMonikerVtbl.Inverse$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Inverse$set(MemorySegment seg, long index, MemorySegment x) {
        IMonikerVtbl.Inverse$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Inverse Inverse(MemorySegment segment, SegmentScope scope) {
        return Inverse.ofAddress(Inverse$get(segment), scope);
    }
    static final FunctionDescriptor CommonPrefixWith$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor CommonPrefixWith_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle CommonPrefixWith_UP$MH = RuntimeHelper.upcallHandle(CommonPrefixWith.class, "apply", IMonikerVtbl.CommonPrefixWith_UP$FUNC);
    static final FunctionDescriptor CommonPrefixWith_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle CommonPrefixWith_DOWN$MH = RuntimeHelper.downcallHandle(
        IMonikerVtbl.CommonPrefixWith_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*CommonPrefixWith)(IMoniker*,IMoniker*,IMoniker**);
     * }
     */
    public interface CommonPrefixWith {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(CommonPrefixWith fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IMonikerVtbl.CommonPrefixWith_UP$MH, fi, IMonikerVtbl.CommonPrefixWith$FUNC, scope);
        }
        static CommonPrefixWith ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IMonikerVtbl.CommonPrefixWith_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle CommonPrefixWith$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("CommonPrefixWith"));
    public static VarHandle CommonPrefixWith$VH() {
        return IMonikerVtbl.CommonPrefixWith$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*CommonPrefixWith)(IMoniker*,IMoniker*,IMoniker**);
     * }
     */
    public static MemorySegment CommonPrefixWith$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IMonikerVtbl.CommonPrefixWith$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*CommonPrefixWith)(IMoniker*,IMoniker*,IMoniker**);
     * }
     */
    public static void CommonPrefixWith$set(MemorySegment seg, MemorySegment x) {
        IMonikerVtbl.CommonPrefixWith$VH.set(seg, x);
    }
    public static MemorySegment CommonPrefixWith$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IMonikerVtbl.CommonPrefixWith$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CommonPrefixWith$set(MemorySegment seg, long index, MemorySegment x) {
        IMonikerVtbl.CommonPrefixWith$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static CommonPrefixWith CommonPrefixWith(MemorySegment segment, SegmentScope scope) {
        return CommonPrefixWith.ofAddress(CommonPrefixWith$get(segment), scope);
    }
    static final FunctionDescriptor RelativePathTo$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor RelativePathTo_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle RelativePathTo_UP$MH = RuntimeHelper.upcallHandle(RelativePathTo.class, "apply", IMonikerVtbl.RelativePathTo_UP$FUNC);
    static final FunctionDescriptor RelativePathTo_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle RelativePathTo_DOWN$MH = RuntimeHelper.downcallHandle(
        IMonikerVtbl.RelativePathTo_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*RelativePathTo)(IMoniker*,IMoniker*,IMoniker**);
     * }
     */
    public interface RelativePathTo {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(RelativePathTo fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IMonikerVtbl.RelativePathTo_UP$MH, fi, IMonikerVtbl.RelativePathTo$FUNC, scope);
        }
        static RelativePathTo ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IMonikerVtbl.RelativePathTo_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle RelativePathTo$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("RelativePathTo"));
    public static VarHandle RelativePathTo$VH() {
        return IMonikerVtbl.RelativePathTo$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*RelativePathTo)(IMoniker*,IMoniker*,IMoniker**);
     * }
     */
    public static MemorySegment RelativePathTo$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IMonikerVtbl.RelativePathTo$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*RelativePathTo)(IMoniker*,IMoniker*,IMoniker**);
     * }
     */
    public static void RelativePathTo$set(MemorySegment seg, MemorySegment x) {
        IMonikerVtbl.RelativePathTo$VH.set(seg, x);
    }
    public static MemorySegment RelativePathTo$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IMonikerVtbl.RelativePathTo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void RelativePathTo$set(MemorySegment seg, long index, MemorySegment x) {
        IMonikerVtbl.RelativePathTo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static RelativePathTo RelativePathTo(MemorySegment segment, SegmentScope scope) {
        return RelativePathTo.ofAddress(RelativePathTo$get(segment), scope);
    }
    static final FunctionDescriptor GetDisplayName$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetDisplayName_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetDisplayName_UP$MH = RuntimeHelper.upcallHandle(GetDisplayName.class, "apply", IMonikerVtbl.GetDisplayName_UP$FUNC);
    static final FunctionDescriptor GetDisplayName_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetDisplayName_DOWN$MH = RuntimeHelper.downcallHandle(
        IMonikerVtbl.GetDisplayName_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetDisplayName)(IMoniker*,IBindCtx*,IMoniker*,LPOLESTR*);
     * }
     */
    public interface GetDisplayName {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(GetDisplayName fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IMonikerVtbl.GetDisplayName_UP$MH, fi, IMonikerVtbl.GetDisplayName$FUNC, scope);
        }
        static GetDisplayName ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)IMonikerVtbl.GetDisplayName_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetDisplayName$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetDisplayName"));
    public static VarHandle GetDisplayName$VH() {
        return IMonikerVtbl.GetDisplayName$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetDisplayName)(IMoniker*,IBindCtx*,IMoniker*,LPOLESTR*);
     * }
     */
    public static MemorySegment GetDisplayName$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IMonikerVtbl.GetDisplayName$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetDisplayName)(IMoniker*,IBindCtx*,IMoniker*,LPOLESTR*);
     * }
     */
    public static void GetDisplayName$set(MemorySegment seg, MemorySegment x) {
        IMonikerVtbl.GetDisplayName$VH.set(seg, x);
    }
    public static MemorySegment GetDisplayName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IMonikerVtbl.GetDisplayName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDisplayName$set(MemorySegment seg, long index, MemorySegment x) {
        IMonikerVtbl.GetDisplayName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDisplayName GetDisplayName(MemorySegment segment, SegmentScope scope) {
        return GetDisplayName.ofAddress(GetDisplayName$get(segment), scope);
    }
    static final FunctionDescriptor ParseDisplayName$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor ParseDisplayName_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ParseDisplayName_UP$MH = RuntimeHelper.upcallHandle(ParseDisplayName.class, "apply", IMonikerVtbl.ParseDisplayName_UP$FUNC);
    static final FunctionDescriptor ParseDisplayName_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ParseDisplayName_DOWN$MH = RuntimeHelper.downcallHandle(
        IMonikerVtbl.ParseDisplayName_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*ParseDisplayName)(IMoniker*,IBindCtx*,IMoniker*,LPOLESTR,ULONG*,IMoniker**);
     * }
     */
    public interface ParseDisplayName {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5);
        static MemorySegment allocate(ParseDisplayName fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IMonikerVtbl.ParseDisplayName_UP$MH, fi, IMonikerVtbl.ParseDisplayName$FUNC, scope);
        }
        static ParseDisplayName ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5) -> {
                try {
                    return (int)IMonikerVtbl.ParseDisplayName_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ParseDisplayName$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ParseDisplayName"));
    public static VarHandle ParseDisplayName$VH() {
        return IMonikerVtbl.ParseDisplayName$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*ParseDisplayName)(IMoniker*,IBindCtx*,IMoniker*,LPOLESTR,ULONG*,IMoniker**);
     * }
     */
    public static MemorySegment ParseDisplayName$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IMonikerVtbl.ParseDisplayName$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*ParseDisplayName)(IMoniker*,IBindCtx*,IMoniker*,LPOLESTR,ULONG*,IMoniker**);
     * }
     */
    public static void ParseDisplayName$set(MemorySegment seg, MemorySegment x) {
        IMonikerVtbl.ParseDisplayName$VH.set(seg, x);
    }
    public static MemorySegment ParseDisplayName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IMonikerVtbl.ParseDisplayName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ParseDisplayName$set(MemorySegment seg, long index, MemorySegment x) {
        IMonikerVtbl.ParseDisplayName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ParseDisplayName ParseDisplayName(MemorySegment segment, SegmentScope scope) {
        return ParseDisplayName.ofAddress(ParseDisplayName$get(segment), scope);
    }
    static final FunctionDescriptor IsSystemMoniker$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor IsSystemMoniker_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle IsSystemMoniker_UP$MH = RuntimeHelper.upcallHandle(IsSystemMoniker.class, "apply", IMonikerVtbl.IsSystemMoniker_UP$FUNC);
    static final FunctionDescriptor IsSystemMoniker_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle IsSystemMoniker_DOWN$MH = RuntimeHelper.downcallHandle(
        IMonikerVtbl.IsSystemMoniker_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*IsSystemMoniker)(IMoniker*,DWORD*);
     * }
     */
    public interface IsSystemMoniker {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(IsSystemMoniker fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IMonikerVtbl.IsSystemMoniker_UP$MH, fi, IMonikerVtbl.IsSystemMoniker$FUNC, scope);
        }
        static IsSystemMoniker ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IMonikerVtbl.IsSystemMoniker_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle IsSystemMoniker$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("IsSystemMoniker"));
    public static VarHandle IsSystemMoniker$VH() {
        return IMonikerVtbl.IsSystemMoniker$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*IsSystemMoniker)(IMoniker*,DWORD*);
     * }
     */
    public static MemorySegment IsSystemMoniker$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IMonikerVtbl.IsSystemMoniker$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*IsSystemMoniker)(IMoniker*,DWORD*);
     * }
     */
    public static void IsSystemMoniker$set(MemorySegment seg, MemorySegment x) {
        IMonikerVtbl.IsSystemMoniker$VH.set(seg, x);
    }
    public static MemorySegment IsSystemMoniker$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IMonikerVtbl.IsSystemMoniker$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void IsSystemMoniker$set(MemorySegment seg, long index, MemorySegment x) {
        IMonikerVtbl.IsSystemMoniker$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static IsSystemMoniker IsSystemMoniker(MemorySegment segment, SegmentScope scope) {
        return IsSystemMoniker.ofAddress(IsSystemMoniker$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


