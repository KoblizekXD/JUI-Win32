// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _SHFILEOPSTRUCTA {
 *     HWND hwnd;
 *     UINT wFunc;
 *     PCZZSTR pFrom;
 *     PCZZSTR pTo;
 *     FILEOP_FLAGS fFlags;
 *     BOOL fAnyOperationsAborted;
 *     LPVOID hNameMappings;
 *     PCSTR lpszProgressTitle;
 * };
 * }
 */
public class _SHFILEOPSTRUCTA {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("hwnd"),
        Constants$root.C_LONG$LAYOUT.withName("wFunc"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("pFrom"),
        Constants$root.C_POINTER$LAYOUT.withName("pTo"),
        Constants$root.C_SHORT$LAYOUT.withName("fFlags"),
        MemoryLayout.paddingLayout(16),
        Constants$root.C_LONG$LAYOUT.withName("fAnyOperationsAborted"),
        Constants$root.C_POINTER$LAYOUT.withName("hNameMappings"),
        Constants$root.C_POINTER$LAYOUT.withName("lpszProgressTitle")
    ).withName("_SHFILEOPSTRUCTA");
    public static MemoryLayout $LAYOUT() {
        return _SHFILEOPSTRUCTA.$struct$LAYOUT;
    }
    static final VarHandle hwnd$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hwnd"));
    public static VarHandle hwnd$VH() {
        return _SHFILEOPSTRUCTA.hwnd$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HWND hwnd;
     * }
     */
    public static MemorySegment hwnd$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_SHFILEOPSTRUCTA.hwnd$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HWND hwnd;
     * }
     */
    public static void hwnd$set(MemorySegment seg, MemorySegment x) {
        _SHFILEOPSTRUCTA.hwnd$VH.set(seg, x);
    }
    public static MemorySegment hwnd$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_SHFILEOPSTRUCTA.hwnd$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hwnd$set(MemorySegment seg, long index, MemorySegment x) {
        _SHFILEOPSTRUCTA.hwnd$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle wFunc$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("wFunc"));
    public static VarHandle wFunc$VH() {
        return _SHFILEOPSTRUCTA.wFunc$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * UINT wFunc;
     * }
     */
    public static int wFunc$get(MemorySegment seg) {
        return (int)_SHFILEOPSTRUCTA.wFunc$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * UINT wFunc;
     * }
     */
    public static void wFunc$set(MemorySegment seg, int x) {
        _SHFILEOPSTRUCTA.wFunc$VH.set(seg, x);
    }
    public static int wFunc$get(MemorySegment seg, long index) {
        return (int)_SHFILEOPSTRUCTA.wFunc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void wFunc$set(MemorySegment seg, long index, int x) {
        _SHFILEOPSTRUCTA.wFunc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pFrom$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pFrom"));
    public static VarHandle pFrom$VH() {
        return _SHFILEOPSTRUCTA.pFrom$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PCZZSTR pFrom;
     * }
     */
    public static MemorySegment pFrom$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_SHFILEOPSTRUCTA.pFrom$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PCZZSTR pFrom;
     * }
     */
    public static void pFrom$set(MemorySegment seg, MemorySegment x) {
        _SHFILEOPSTRUCTA.pFrom$VH.set(seg, x);
    }
    public static MemorySegment pFrom$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_SHFILEOPSTRUCTA.pFrom$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pFrom$set(MemorySegment seg, long index, MemorySegment x) {
        _SHFILEOPSTRUCTA.pFrom$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pTo$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pTo"));
    public static VarHandle pTo$VH() {
        return _SHFILEOPSTRUCTA.pTo$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PCZZSTR pTo;
     * }
     */
    public static MemorySegment pTo$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_SHFILEOPSTRUCTA.pTo$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PCZZSTR pTo;
     * }
     */
    public static void pTo$set(MemorySegment seg, MemorySegment x) {
        _SHFILEOPSTRUCTA.pTo$VH.set(seg, x);
    }
    public static MemorySegment pTo$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_SHFILEOPSTRUCTA.pTo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pTo$set(MemorySegment seg, long index, MemorySegment x) {
        _SHFILEOPSTRUCTA.pTo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle fFlags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("fFlags"));
    public static VarHandle fFlags$VH() {
        return _SHFILEOPSTRUCTA.fFlags$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * FILEOP_FLAGS fFlags;
     * }
     */
    public static short fFlags$get(MemorySegment seg) {
        return (short)_SHFILEOPSTRUCTA.fFlags$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * FILEOP_FLAGS fFlags;
     * }
     */
    public static void fFlags$set(MemorySegment seg, short x) {
        _SHFILEOPSTRUCTA.fFlags$VH.set(seg, x);
    }
    public static short fFlags$get(MemorySegment seg, long index) {
        return (short)_SHFILEOPSTRUCTA.fFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void fFlags$set(MemorySegment seg, long index, short x) {
        _SHFILEOPSTRUCTA.fFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle fAnyOperationsAborted$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("fAnyOperationsAborted"));
    public static VarHandle fAnyOperationsAborted$VH() {
        return _SHFILEOPSTRUCTA.fAnyOperationsAborted$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BOOL fAnyOperationsAborted;
     * }
     */
    public static int fAnyOperationsAborted$get(MemorySegment seg) {
        return (int)_SHFILEOPSTRUCTA.fAnyOperationsAborted$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BOOL fAnyOperationsAborted;
     * }
     */
    public static void fAnyOperationsAborted$set(MemorySegment seg, int x) {
        _SHFILEOPSTRUCTA.fAnyOperationsAborted$VH.set(seg, x);
    }
    public static int fAnyOperationsAborted$get(MemorySegment seg, long index) {
        return (int)_SHFILEOPSTRUCTA.fAnyOperationsAborted$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void fAnyOperationsAborted$set(MemorySegment seg, long index, int x) {
        _SHFILEOPSTRUCTA.fAnyOperationsAborted$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hNameMappings$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hNameMappings"));
    public static VarHandle hNameMappings$VH() {
        return _SHFILEOPSTRUCTA.hNameMappings$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPVOID hNameMappings;
     * }
     */
    public static MemorySegment hNameMappings$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_SHFILEOPSTRUCTA.hNameMappings$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPVOID hNameMappings;
     * }
     */
    public static void hNameMappings$set(MemorySegment seg, MemorySegment x) {
        _SHFILEOPSTRUCTA.hNameMappings$VH.set(seg, x);
    }
    public static MemorySegment hNameMappings$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_SHFILEOPSTRUCTA.hNameMappings$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hNameMappings$set(MemorySegment seg, long index, MemorySegment x) {
        _SHFILEOPSTRUCTA.hNameMappings$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lpszProgressTitle$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lpszProgressTitle"));
    public static VarHandle lpszProgressTitle$VH() {
        return _SHFILEOPSTRUCTA.lpszProgressTitle$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PCSTR lpszProgressTitle;
     * }
     */
    public static MemorySegment lpszProgressTitle$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_SHFILEOPSTRUCTA.lpszProgressTitle$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PCSTR lpszProgressTitle;
     * }
     */
    public static void lpszProgressTitle$set(MemorySegment seg, MemorySegment x) {
        _SHFILEOPSTRUCTA.lpszProgressTitle$VH.set(seg, x);
    }
    public static MemorySegment lpszProgressTitle$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_SHFILEOPSTRUCTA.lpszProgressTitle$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpszProgressTitle$set(MemorySegment seg, long index, MemorySegment x) {
        _SHFILEOPSTRUCTA.lpszProgressTitle$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


