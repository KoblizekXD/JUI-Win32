// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _CRL_INFO {
 *     DWORD dwVersion;
 *     CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;
 *     CERT_NAME_BLOB Issuer;
 *     FILETIME ThisUpdate;
 *     FILETIME NextUpdate;
 *     DWORD cCRLEntry;
 *     PCRL_ENTRY rgCRLEntry;
 *     DWORD cExtension;
 *     PCERT_EXTENSION rgExtension;
 * };
 * }
 */
public class _CRL_INFO {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("dwVersion"),
        MemoryLayout.paddingLayout(32),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("pszObjId"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("cbData"),
                MemoryLayout.paddingLayout(32),
                Constants$root.C_POINTER$LAYOUT.withName("pbData")
            ).withName("Parameters")
        ).withName("SignatureAlgorithm"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("cbData"),
            MemoryLayout.paddingLayout(32),
            Constants$root.C_POINTER$LAYOUT.withName("pbData")
        ).withName("Issuer"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("dwLowDateTime"),
            Constants$root.C_LONG$LAYOUT.withName("dwHighDateTime")
        ).withName("ThisUpdate"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("dwLowDateTime"),
            Constants$root.C_LONG$LAYOUT.withName("dwHighDateTime")
        ).withName("NextUpdate"),
        Constants$root.C_LONG$LAYOUT.withName("cCRLEntry"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("rgCRLEntry"),
        Constants$root.C_LONG$LAYOUT.withName("cExtension"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("rgExtension")
    ).withName("_CRL_INFO");
    public static MemoryLayout $LAYOUT() {
        return _CRL_INFO.$struct$LAYOUT;
    }
    static final VarHandle dwVersion$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwVersion"));
    public static VarHandle dwVersion$VH() {
        return _CRL_INFO.dwVersion$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwVersion;
     * }
     */
    public static int dwVersion$get(MemorySegment seg) {
        return (int)_CRL_INFO.dwVersion$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwVersion;
     * }
     */
    public static void dwVersion$set(MemorySegment seg, int x) {
        _CRL_INFO.dwVersion$VH.set(seg, x);
    }
    public static int dwVersion$get(MemorySegment seg, long index) {
        return (int)_CRL_INFO.dwVersion$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwVersion$set(MemorySegment seg, long index, int x) {
        _CRL_INFO.dwVersion$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment SignatureAlgorithm$slice(MemorySegment seg) {
        return seg.asSlice(8, 24);
    }
    public static MemorySegment Issuer$slice(MemorySegment seg) {
        return seg.asSlice(32, 16);
    }
    public static MemorySegment ThisUpdate$slice(MemorySegment seg) {
        return seg.asSlice(48, 8);
    }
    public static MemorySegment NextUpdate$slice(MemorySegment seg) {
        return seg.asSlice(56, 8);
    }
    static final VarHandle cCRLEntry$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cCRLEntry"));
    public static VarHandle cCRLEntry$VH() {
        return _CRL_INFO.cCRLEntry$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD cCRLEntry;
     * }
     */
    public static int cCRLEntry$get(MemorySegment seg) {
        return (int)_CRL_INFO.cCRLEntry$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD cCRLEntry;
     * }
     */
    public static void cCRLEntry$set(MemorySegment seg, int x) {
        _CRL_INFO.cCRLEntry$VH.set(seg, x);
    }
    public static int cCRLEntry$get(MemorySegment seg, long index) {
        return (int)_CRL_INFO.cCRLEntry$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cCRLEntry$set(MemorySegment seg, long index, int x) {
        _CRL_INFO.cCRLEntry$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle rgCRLEntry$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("rgCRLEntry"));
    public static VarHandle rgCRLEntry$VH() {
        return _CRL_INFO.rgCRLEntry$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PCRL_ENTRY rgCRLEntry;
     * }
     */
    public static MemorySegment rgCRLEntry$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_CRL_INFO.rgCRLEntry$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PCRL_ENTRY rgCRLEntry;
     * }
     */
    public static void rgCRLEntry$set(MemorySegment seg, MemorySegment x) {
        _CRL_INFO.rgCRLEntry$VH.set(seg, x);
    }
    public static MemorySegment rgCRLEntry$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_CRL_INFO.rgCRLEntry$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void rgCRLEntry$set(MemorySegment seg, long index, MemorySegment x) {
        _CRL_INFO.rgCRLEntry$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cExtension$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cExtension"));
    public static VarHandle cExtension$VH() {
        return _CRL_INFO.cExtension$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD cExtension;
     * }
     */
    public static int cExtension$get(MemorySegment seg) {
        return (int)_CRL_INFO.cExtension$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD cExtension;
     * }
     */
    public static void cExtension$set(MemorySegment seg, int x) {
        _CRL_INFO.cExtension$VH.set(seg, x);
    }
    public static int cExtension$get(MemorySegment seg, long index) {
        return (int)_CRL_INFO.cExtension$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cExtension$set(MemorySegment seg, long index, int x) {
        _CRL_INFO.cExtension$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle rgExtension$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("rgExtension"));
    public static VarHandle rgExtension$VH() {
        return _CRL_INFO.rgExtension$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PCERT_EXTENSION rgExtension;
     * }
     */
    public static MemorySegment rgExtension$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_CRL_INFO.rgExtension$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PCERT_EXTENSION rgExtension;
     * }
     */
    public static void rgExtension$set(MemorySegment seg, MemorySegment x) {
        _CRL_INFO.rgExtension$VH.set(seg, x);
    }
    public static MemorySegment rgExtension$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_CRL_INFO.rgExtension$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void rgExtension$set(MemorySegment seg, long index, MemorySegment x) {
        _CRL_INFO.rgExtension$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


