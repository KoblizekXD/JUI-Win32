// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IUriVtbl {
 *     HRESULT (*QueryInterface)(IUri*,const IID*,void**);
 *     ULONG (*AddRef)(IUri*);
 *     ULONG (*Release)(IUri*);
 *     HRESULT (*GetPropertyBSTR)(IUri*,Uri_PROPERTY,BSTR*,DWORD);
 *     HRESULT (*GetPropertyLength)(IUri*,Uri_PROPERTY,DWORD*,DWORD);
 *     HRESULT (*GetPropertyDWORD)(IUri*,Uri_PROPERTY,DWORD*,DWORD);
 *     HRESULT (*HasProperty)(IUri*,Uri_PROPERTY,BOOL*);
 *     HRESULT (*GetAbsoluteUri)(IUri*,BSTR*);
 *     HRESULT (*GetAuthority)(IUri*,BSTR*);
 *     HRESULT (*GetDisplayUri)(IUri*,BSTR*);
 *     HRESULT (*GetDomain)(IUri*,BSTR*);
 *     HRESULT (*GetExtension)(IUri*,BSTR*);
 *     HRESULT (*GetFragment)(IUri*,BSTR*);
 *     HRESULT (*GetHost)(IUri*,BSTR*);
 *     HRESULT (*GetPassword)(IUri*,BSTR*);
 *     HRESULT (*GetPath)(IUri*,BSTR*);
 *     HRESULT (*GetPathAndQuery)(IUri*,BSTR*);
 *     HRESULT (*GetQuery)(IUri*,BSTR*);
 *     HRESULT (*GetRawUri)(IUri*,BSTR*);
 *     HRESULT (*GetSchemeName)(IUri*,BSTR*);
 *     HRESULT (*GetUserInfo)(IUri*,BSTR*);
 *     HRESULT (*GetUserNameA)(IUri*,BSTR*);
 *     HRESULT (*GetHostType)(IUri*,DWORD*);
 *     HRESULT (*GetPort)(IUri*,DWORD*);
 *     HRESULT (*GetScheme)(IUri*,DWORD*);
 *     HRESULT (*GetZone)(IUri*,DWORD*);
 *     HRESULT (*GetProperties)(IUri*,LPDWORD);
 *     HRESULT (*IsEqual)(IUri*,IUri*,BOOL*);
 * };
 * }
 */
public class IUriVtbl {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("GetPropertyBSTR"),
        Constants$root.C_POINTER$LAYOUT.withName("GetPropertyLength"),
        Constants$root.C_POINTER$LAYOUT.withName("GetPropertyDWORD"),
        Constants$root.C_POINTER$LAYOUT.withName("HasProperty"),
        Constants$root.C_POINTER$LAYOUT.withName("GetAbsoluteUri"),
        Constants$root.C_POINTER$LAYOUT.withName("GetAuthority"),
        Constants$root.C_POINTER$LAYOUT.withName("GetDisplayUri"),
        Constants$root.C_POINTER$LAYOUT.withName("GetDomain"),
        Constants$root.C_POINTER$LAYOUT.withName("GetExtension"),
        Constants$root.C_POINTER$LAYOUT.withName("GetFragment"),
        Constants$root.C_POINTER$LAYOUT.withName("GetHost"),
        Constants$root.C_POINTER$LAYOUT.withName("GetPassword"),
        Constants$root.C_POINTER$LAYOUT.withName("GetPath"),
        Constants$root.C_POINTER$LAYOUT.withName("GetPathAndQuery"),
        Constants$root.C_POINTER$LAYOUT.withName("GetQuery"),
        Constants$root.C_POINTER$LAYOUT.withName("GetRawUri"),
        Constants$root.C_POINTER$LAYOUT.withName("GetSchemeName"),
        Constants$root.C_POINTER$LAYOUT.withName("GetUserInfo"),
        Constants$root.C_POINTER$LAYOUT.withName("GetUserNameA"),
        Constants$root.C_POINTER$LAYOUT.withName("GetHostType"),
        Constants$root.C_POINTER$LAYOUT.withName("GetPort"),
        Constants$root.C_POINTER$LAYOUT.withName("GetScheme"),
        Constants$root.C_POINTER$LAYOUT.withName("GetZone"),
        Constants$root.C_POINTER$LAYOUT.withName("GetProperties"),
        Constants$root.C_POINTER$LAYOUT.withName("IsEqual")
    ).withName("IUriVtbl");
    public static MemoryLayout $LAYOUT() {
        return IUriVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor QueryInterface_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_UP$MH = RuntimeHelper.upcallHandle(QueryInterface.class, "apply", IUriVtbl.QueryInterface_UP$FUNC);
    static final FunctionDescriptor QueryInterface_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_DOWN$MH = RuntimeHelper.downcallHandle(
        IUriVtbl.QueryInterface_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(IUri*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IUriVtbl.QueryInterface_UP$MH, fi, IUriVtbl.QueryInterface$FUNC, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IUriVtbl.QueryInterface_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return IUriVtbl.QueryInterface$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IUri*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IUriVtbl.QueryInterface$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IUri*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        IUriVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IUriVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        IUriVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, SegmentScope scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor AddRef_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_UP$MH = RuntimeHelper.upcallHandle(AddRef.class, "apply", IUriVtbl.AddRef_UP$FUNC);
    static final FunctionDescriptor AddRef_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_DOWN$MH = RuntimeHelper.downcallHandle(
        IUriVtbl.AddRef_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*AddRef)(IUri*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IUriVtbl.AddRef_UP$MH, fi, IUriVtbl.AddRef$FUNC, scope);
        }
        static AddRef ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IUriVtbl.AddRef_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return IUriVtbl.AddRef$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(IUri*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IUriVtbl.AddRef$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(IUri*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        IUriVtbl.AddRef$VH.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IUriVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        IUriVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, SegmentScope scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Release_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_UP$MH = RuntimeHelper.upcallHandle(Release.class, "apply", IUriVtbl.Release_UP$FUNC);
    static final FunctionDescriptor Release_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_DOWN$MH = RuntimeHelper.downcallHandle(
        IUriVtbl.Release_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*Release)(IUri*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IUriVtbl.Release_UP$MH, fi, IUriVtbl.Release$FUNC, scope);
        }
        static Release ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IUriVtbl.Release_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return IUriVtbl.Release$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(IUri*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IUriVtbl.Release$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(IUri*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        IUriVtbl.Release$VH.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IUriVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        IUriVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, SegmentScope scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    static final FunctionDescriptor GetPropertyBSTR$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor GetPropertyBSTR_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle GetPropertyBSTR_UP$MH = RuntimeHelper.upcallHandle(GetPropertyBSTR.class, "apply", IUriVtbl.GetPropertyBSTR_UP$FUNC);
    static final FunctionDescriptor GetPropertyBSTR_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle GetPropertyBSTR_DOWN$MH = RuntimeHelper.downcallHandle(
        IUriVtbl.GetPropertyBSTR_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetPropertyBSTR)(IUri*,Uri_PROPERTY,BSTR*,DWORD);
     * }
     */
    public interface GetPropertyBSTR {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, int _x3);
        static MemorySegment allocate(GetPropertyBSTR fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IUriVtbl.GetPropertyBSTR_UP$MH, fi, IUriVtbl.GetPropertyBSTR$FUNC, scope);
        }
        static GetPropertyBSTR ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, int __x3) -> {
                try {
                    return (int)IUriVtbl.GetPropertyBSTR_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetPropertyBSTR$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetPropertyBSTR"));
    public static VarHandle GetPropertyBSTR$VH() {
        return IUriVtbl.GetPropertyBSTR$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetPropertyBSTR)(IUri*,Uri_PROPERTY,BSTR*,DWORD);
     * }
     */
    public static MemorySegment GetPropertyBSTR$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IUriVtbl.GetPropertyBSTR$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetPropertyBSTR)(IUri*,Uri_PROPERTY,BSTR*,DWORD);
     * }
     */
    public static void GetPropertyBSTR$set(MemorySegment seg, MemorySegment x) {
        IUriVtbl.GetPropertyBSTR$VH.set(seg, x);
    }
    public static MemorySegment GetPropertyBSTR$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IUriVtbl.GetPropertyBSTR$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetPropertyBSTR$set(MemorySegment seg, long index, MemorySegment x) {
        IUriVtbl.GetPropertyBSTR$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetPropertyBSTR GetPropertyBSTR(MemorySegment segment, SegmentScope scope) {
        return GetPropertyBSTR.ofAddress(GetPropertyBSTR$get(segment), scope);
    }
    static final FunctionDescriptor GetPropertyLength$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor GetPropertyLength_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle GetPropertyLength_UP$MH = RuntimeHelper.upcallHandle(GetPropertyLength.class, "apply", IUriVtbl.GetPropertyLength_UP$FUNC);
    static final FunctionDescriptor GetPropertyLength_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle GetPropertyLength_DOWN$MH = RuntimeHelper.downcallHandle(
        IUriVtbl.GetPropertyLength_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetPropertyLength)(IUri*,Uri_PROPERTY,DWORD*,DWORD);
     * }
     */
    public interface GetPropertyLength {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, int _x3);
        static MemorySegment allocate(GetPropertyLength fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IUriVtbl.GetPropertyLength_UP$MH, fi, IUriVtbl.GetPropertyLength$FUNC, scope);
        }
        static GetPropertyLength ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, int __x3) -> {
                try {
                    return (int)IUriVtbl.GetPropertyLength_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetPropertyLength$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetPropertyLength"));
    public static VarHandle GetPropertyLength$VH() {
        return IUriVtbl.GetPropertyLength$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetPropertyLength)(IUri*,Uri_PROPERTY,DWORD*,DWORD);
     * }
     */
    public static MemorySegment GetPropertyLength$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IUriVtbl.GetPropertyLength$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetPropertyLength)(IUri*,Uri_PROPERTY,DWORD*,DWORD);
     * }
     */
    public static void GetPropertyLength$set(MemorySegment seg, MemorySegment x) {
        IUriVtbl.GetPropertyLength$VH.set(seg, x);
    }
    public static MemorySegment GetPropertyLength$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IUriVtbl.GetPropertyLength$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetPropertyLength$set(MemorySegment seg, long index, MemorySegment x) {
        IUriVtbl.GetPropertyLength$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetPropertyLength GetPropertyLength(MemorySegment segment, SegmentScope scope) {
        return GetPropertyLength.ofAddress(GetPropertyLength$get(segment), scope);
    }
    static final FunctionDescriptor GetPropertyDWORD$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor GetPropertyDWORD_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle GetPropertyDWORD_UP$MH = RuntimeHelper.upcallHandle(GetPropertyDWORD.class, "apply", IUriVtbl.GetPropertyDWORD_UP$FUNC);
    static final FunctionDescriptor GetPropertyDWORD_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle GetPropertyDWORD_DOWN$MH = RuntimeHelper.downcallHandle(
        IUriVtbl.GetPropertyDWORD_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetPropertyDWORD)(IUri*,Uri_PROPERTY,DWORD*,DWORD);
     * }
     */
    public interface GetPropertyDWORD {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, int _x3);
        static MemorySegment allocate(GetPropertyDWORD fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IUriVtbl.GetPropertyDWORD_UP$MH, fi, IUriVtbl.GetPropertyDWORD$FUNC, scope);
        }
        static GetPropertyDWORD ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, int __x3) -> {
                try {
                    return (int)IUriVtbl.GetPropertyDWORD_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetPropertyDWORD$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetPropertyDWORD"));
    public static VarHandle GetPropertyDWORD$VH() {
        return IUriVtbl.GetPropertyDWORD$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetPropertyDWORD)(IUri*,Uri_PROPERTY,DWORD*,DWORD);
     * }
     */
    public static MemorySegment GetPropertyDWORD$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IUriVtbl.GetPropertyDWORD$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetPropertyDWORD)(IUri*,Uri_PROPERTY,DWORD*,DWORD);
     * }
     */
    public static void GetPropertyDWORD$set(MemorySegment seg, MemorySegment x) {
        IUriVtbl.GetPropertyDWORD$VH.set(seg, x);
    }
    public static MemorySegment GetPropertyDWORD$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IUriVtbl.GetPropertyDWORD$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetPropertyDWORD$set(MemorySegment seg, long index, MemorySegment x) {
        IUriVtbl.GetPropertyDWORD$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetPropertyDWORD GetPropertyDWORD(MemorySegment segment, SegmentScope scope) {
        return GetPropertyDWORD.ofAddress(GetPropertyDWORD$get(segment), scope);
    }
    static final FunctionDescriptor HasProperty$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor HasProperty_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle HasProperty_UP$MH = RuntimeHelper.upcallHandle(HasProperty.class, "apply", IUriVtbl.HasProperty_UP$FUNC);
    static final FunctionDescriptor HasProperty_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle HasProperty_DOWN$MH = RuntimeHelper.downcallHandle(
        IUriVtbl.HasProperty_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*HasProperty)(IUri*,Uri_PROPERTY,BOOL*);
     * }
     */
    public interface HasProperty {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(HasProperty fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IUriVtbl.HasProperty_UP$MH, fi, IUriVtbl.HasProperty$FUNC, scope);
        }
        static HasProperty ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IUriVtbl.HasProperty_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle HasProperty$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("HasProperty"));
    public static VarHandle HasProperty$VH() {
        return IUriVtbl.HasProperty$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*HasProperty)(IUri*,Uri_PROPERTY,BOOL*);
     * }
     */
    public static MemorySegment HasProperty$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IUriVtbl.HasProperty$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*HasProperty)(IUri*,Uri_PROPERTY,BOOL*);
     * }
     */
    public static void HasProperty$set(MemorySegment seg, MemorySegment x) {
        IUriVtbl.HasProperty$VH.set(seg, x);
    }
    public static MemorySegment HasProperty$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IUriVtbl.HasProperty$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void HasProperty$set(MemorySegment seg, long index, MemorySegment x) {
        IUriVtbl.HasProperty$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static HasProperty HasProperty(MemorySegment segment, SegmentScope scope) {
        return HasProperty.ofAddress(HasProperty$get(segment), scope);
    }
    static final FunctionDescriptor GetAbsoluteUri$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetAbsoluteUri_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetAbsoluteUri_UP$MH = RuntimeHelper.upcallHandle(GetAbsoluteUri.class, "apply", IUriVtbl.GetAbsoluteUri_UP$FUNC);
    static final FunctionDescriptor GetAbsoluteUri_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetAbsoluteUri_DOWN$MH = RuntimeHelper.downcallHandle(
        IUriVtbl.GetAbsoluteUri_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetAbsoluteUri)(IUri*,BSTR*);
     * }
     */
    public interface GetAbsoluteUri {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetAbsoluteUri fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IUriVtbl.GetAbsoluteUri_UP$MH, fi, IUriVtbl.GetAbsoluteUri$FUNC, scope);
        }
        static GetAbsoluteUri ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IUriVtbl.GetAbsoluteUri_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetAbsoluteUri$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetAbsoluteUri"));
    public static VarHandle GetAbsoluteUri$VH() {
        return IUriVtbl.GetAbsoluteUri$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetAbsoluteUri)(IUri*,BSTR*);
     * }
     */
    public static MemorySegment GetAbsoluteUri$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IUriVtbl.GetAbsoluteUri$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetAbsoluteUri)(IUri*,BSTR*);
     * }
     */
    public static void GetAbsoluteUri$set(MemorySegment seg, MemorySegment x) {
        IUriVtbl.GetAbsoluteUri$VH.set(seg, x);
    }
    public static MemorySegment GetAbsoluteUri$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IUriVtbl.GetAbsoluteUri$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetAbsoluteUri$set(MemorySegment seg, long index, MemorySegment x) {
        IUriVtbl.GetAbsoluteUri$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetAbsoluteUri GetAbsoluteUri(MemorySegment segment, SegmentScope scope) {
        return GetAbsoluteUri.ofAddress(GetAbsoluteUri$get(segment), scope);
    }
    static final FunctionDescriptor GetAuthority$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetAuthority_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetAuthority_UP$MH = RuntimeHelper.upcallHandle(GetAuthority.class, "apply", IUriVtbl.GetAuthority_UP$FUNC);
    static final FunctionDescriptor GetAuthority_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetAuthority_DOWN$MH = RuntimeHelper.downcallHandle(
        IUriVtbl.GetAuthority_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetAuthority)(IUri*,BSTR*);
     * }
     */
    public interface GetAuthority {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetAuthority fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IUriVtbl.GetAuthority_UP$MH, fi, IUriVtbl.GetAuthority$FUNC, scope);
        }
        static GetAuthority ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IUriVtbl.GetAuthority_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetAuthority$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetAuthority"));
    public static VarHandle GetAuthority$VH() {
        return IUriVtbl.GetAuthority$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetAuthority)(IUri*,BSTR*);
     * }
     */
    public static MemorySegment GetAuthority$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IUriVtbl.GetAuthority$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetAuthority)(IUri*,BSTR*);
     * }
     */
    public static void GetAuthority$set(MemorySegment seg, MemorySegment x) {
        IUriVtbl.GetAuthority$VH.set(seg, x);
    }
    public static MemorySegment GetAuthority$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IUriVtbl.GetAuthority$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetAuthority$set(MemorySegment seg, long index, MemorySegment x) {
        IUriVtbl.GetAuthority$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetAuthority GetAuthority(MemorySegment segment, SegmentScope scope) {
        return GetAuthority.ofAddress(GetAuthority$get(segment), scope);
    }
    static final FunctionDescriptor GetDisplayUri$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetDisplayUri_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetDisplayUri_UP$MH = RuntimeHelper.upcallHandle(GetDisplayUri.class, "apply", IUriVtbl.GetDisplayUri_UP$FUNC);
    static final FunctionDescriptor GetDisplayUri_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetDisplayUri_DOWN$MH = RuntimeHelper.downcallHandle(
        IUriVtbl.GetDisplayUri_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetDisplayUri)(IUri*,BSTR*);
     * }
     */
    public interface GetDisplayUri {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetDisplayUri fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IUriVtbl.GetDisplayUri_UP$MH, fi, IUriVtbl.GetDisplayUri$FUNC, scope);
        }
        static GetDisplayUri ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IUriVtbl.GetDisplayUri_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetDisplayUri$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetDisplayUri"));
    public static VarHandle GetDisplayUri$VH() {
        return IUriVtbl.GetDisplayUri$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetDisplayUri)(IUri*,BSTR*);
     * }
     */
    public static MemorySegment GetDisplayUri$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IUriVtbl.GetDisplayUri$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetDisplayUri)(IUri*,BSTR*);
     * }
     */
    public static void GetDisplayUri$set(MemorySegment seg, MemorySegment x) {
        IUriVtbl.GetDisplayUri$VH.set(seg, x);
    }
    public static MemorySegment GetDisplayUri$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IUriVtbl.GetDisplayUri$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDisplayUri$set(MemorySegment seg, long index, MemorySegment x) {
        IUriVtbl.GetDisplayUri$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDisplayUri GetDisplayUri(MemorySegment segment, SegmentScope scope) {
        return GetDisplayUri.ofAddress(GetDisplayUri$get(segment), scope);
    }
    static final FunctionDescriptor GetDomain$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetDomain_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetDomain_UP$MH = RuntimeHelper.upcallHandle(GetDomain.class, "apply", IUriVtbl.GetDomain_UP$FUNC);
    static final FunctionDescriptor GetDomain_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetDomain_DOWN$MH = RuntimeHelper.downcallHandle(
        IUriVtbl.GetDomain_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetDomain)(IUri*,BSTR*);
     * }
     */
    public interface GetDomain {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetDomain fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IUriVtbl.GetDomain_UP$MH, fi, IUriVtbl.GetDomain$FUNC, scope);
        }
        static GetDomain ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IUriVtbl.GetDomain_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetDomain$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetDomain"));
    public static VarHandle GetDomain$VH() {
        return IUriVtbl.GetDomain$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetDomain)(IUri*,BSTR*);
     * }
     */
    public static MemorySegment GetDomain$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IUriVtbl.GetDomain$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetDomain)(IUri*,BSTR*);
     * }
     */
    public static void GetDomain$set(MemorySegment seg, MemorySegment x) {
        IUriVtbl.GetDomain$VH.set(seg, x);
    }
    public static MemorySegment GetDomain$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IUriVtbl.GetDomain$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDomain$set(MemorySegment seg, long index, MemorySegment x) {
        IUriVtbl.GetDomain$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDomain GetDomain(MemorySegment segment, SegmentScope scope) {
        return GetDomain.ofAddress(GetDomain$get(segment), scope);
    }
    static final FunctionDescriptor GetExtension$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetExtension_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetExtension_UP$MH = RuntimeHelper.upcallHandle(GetExtension.class, "apply", IUriVtbl.GetExtension_UP$FUNC);
    static final FunctionDescriptor GetExtension_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetExtension_DOWN$MH = RuntimeHelper.downcallHandle(
        IUriVtbl.GetExtension_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetExtension)(IUri*,BSTR*);
     * }
     */
    public interface GetExtension {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetExtension fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IUriVtbl.GetExtension_UP$MH, fi, IUriVtbl.GetExtension$FUNC, scope);
        }
        static GetExtension ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IUriVtbl.GetExtension_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetExtension$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetExtension"));
    public static VarHandle GetExtension$VH() {
        return IUriVtbl.GetExtension$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetExtension)(IUri*,BSTR*);
     * }
     */
    public static MemorySegment GetExtension$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IUriVtbl.GetExtension$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetExtension)(IUri*,BSTR*);
     * }
     */
    public static void GetExtension$set(MemorySegment seg, MemorySegment x) {
        IUriVtbl.GetExtension$VH.set(seg, x);
    }
    public static MemorySegment GetExtension$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IUriVtbl.GetExtension$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetExtension$set(MemorySegment seg, long index, MemorySegment x) {
        IUriVtbl.GetExtension$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetExtension GetExtension(MemorySegment segment, SegmentScope scope) {
        return GetExtension.ofAddress(GetExtension$get(segment), scope);
    }
    static final FunctionDescriptor GetFragment$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetFragment_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetFragment_UP$MH = RuntimeHelper.upcallHandle(GetFragment.class, "apply", IUriVtbl.GetFragment_UP$FUNC);
    static final FunctionDescriptor GetFragment_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetFragment_DOWN$MH = RuntimeHelper.downcallHandle(
        IUriVtbl.GetFragment_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetFragment)(IUri*,BSTR*);
     * }
     */
    public interface GetFragment {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetFragment fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IUriVtbl.GetFragment_UP$MH, fi, IUriVtbl.GetFragment$FUNC, scope);
        }
        static GetFragment ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IUriVtbl.GetFragment_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetFragment$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetFragment"));
    public static VarHandle GetFragment$VH() {
        return IUriVtbl.GetFragment$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetFragment)(IUri*,BSTR*);
     * }
     */
    public static MemorySegment GetFragment$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IUriVtbl.GetFragment$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetFragment)(IUri*,BSTR*);
     * }
     */
    public static void GetFragment$set(MemorySegment seg, MemorySegment x) {
        IUriVtbl.GetFragment$VH.set(seg, x);
    }
    public static MemorySegment GetFragment$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IUriVtbl.GetFragment$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetFragment$set(MemorySegment seg, long index, MemorySegment x) {
        IUriVtbl.GetFragment$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetFragment GetFragment(MemorySegment segment, SegmentScope scope) {
        return GetFragment.ofAddress(GetFragment$get(segment), scope);
    }
    static final FunctionDescriptor GetHost$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetHost_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetHost_UP$MH = RuntimeHelper.upcallHandle(GetHost.class, "apply", IUriVtbl.GetHost_UP$FUNC);
    static final FunctionDescriptor GetHost_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetHost_DOWN$MH = RuntimeHelper.downcallHandle(
        IUriVtbl.GetHost_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetHost)(IUri*,BSTR*);
     * }
     */
    public interface GetHost {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetHost fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IUriVtbl.GetHost_UP$MH, fi, IUriVtbl.GetHost$FUNC, scope);
        }
        static GetHost ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IUriVtbl.GetHost_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetHost$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetHost"));
    public static VarHandle GetHost$VH() {
        return IUriVtbl.GetHost$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetHost)(IUri*,BSTR*);
     * }
     */
    public static MemorySegment GetHost$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IUriVtbl.GetHost$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetHost)(IUri*,BSTR*);
     * }
     */
    public static void GetHost$set(MemorySegment seg, MemorySegment x) {
        IUriVtbl.GetHost$VH.set(seg, x);
    }
    public static MemorySegment GetHost$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IUriVtbl.GetHost$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetHost$set(MemorySegment seg, long index, MemorySegment x) {
        IUriVtbl.GetHost$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetHost GetHost(MemorySegment segment, SegmentScope scope) {
        return GetHost.ofAddress(GetHost$get(segment), scope);
    }
    static final FunctionDescriptor GetPassword$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetPassword_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetPassword_UP$MH = RuntimeHelper.upcallHandle(GetPassword.class, "apply", IUriVtbl.GetPassword_UP$FUNC);
    static final FunctionDescriptor GetPassword_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetPassword_DOWN$MH = RuntimeHelper.downcallHandle(
        IUriVtbl.GetPassword_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetPassword)(IUri*,BSTR*);
     * }
     */
    public interface GetPassword {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetPassword fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IUriVtbl.GetPassword_UP$MH, fi, IUriVtbl.GetPassword$FUNC, scope);
        }
        static GetPassword ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IUriVtbl.GetPassword_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetPassword$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetPassword"));
    public static VarHandle GetPassword$VH() {
        return IUriVtbl.GetPassword$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetPassword)(IUri*,BSTR*);
     * }
     */
    public static MemorySegment GetPassword$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IUriVtbl.GetPassword$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetPassword)(IUri*,BSTR*);
     * }
     */
    public static void GetPassword$set(MemorySegment seg, MemorySegment x) {
        IUriVtbl.GetPassword$VH.set(seg, x);
    }
    public static MemorySegment GetPassword$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IUriVtbl.GetPassword$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetPassword$set(MemorySegment seg, long index, MemorySegment x) {
        IUriVtbl.GetPassword$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetPassword GetPassword(MemorySegment segment, SegmentScope scope) {
        return GetPassword.ofAddress(GetPassword$get(segment), scope);
    }
    static final FunctionDescriptor GetPath$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetPath_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetPath_UP$MH = RuntimeHelper.upcallHandle(GetPath.class, "apply", IUriVtbl.GetPath_UP$FUNC);
    static final FunctionDescriptor GetPath_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetPath_DOWN$MH = RuntimeHelper.downcallHandle(
        IUriVtbl.GetPath_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetPath)(IUri*,BSTR*);
     * }
     */
    public interface GetPath {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetPath fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IUriVtbl.GetPath_UP$MH, fi, IUriVtbl.GetPath$FUNC, scope);
        }
        static GetPath ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IUriVtbl.GetPath_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetPath$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetPath"));
    public static VarHandle GetPath$VH() {
        return IUriVtbl.GetPath$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetPath)(IUri*,BSTR*);
     * }
     */
    public static MemorySegment GetPath$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IUriVtbl.GetPath$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetPath)(IUri*,BSTR*);
     * }
     */
    public static void GetPath$set(MemorySegment seg, MemorySegment x) {
        IUriVtbl.GetPath$VH.set(seg, x);
    }
    public static MemorySegment GetPath$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IUriVtbl.GetPath$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetPath$set(MemorySegment seg, long index, MemorySegment x) {
        IUriVtbl.GetPath$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetPath GetPath(MemorySegment segment, SegmentScope scope) {
        return GetPath.ofAddress(GetPath$get(segment), scope);
    }
    static final FunctionDescriptor GetPathAndQuery$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetPathAndQuery_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetPathAndQuery_UP$MH = RuntimeHelper.upcallHandle(GetPathAndQuery.class, "apply", IUriVtbl.GetPathAndQuery_UP$FUNC);
    static final FunctionDescriptor GetPathAndQuery_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetPathAndQuery_DOWN$MH = RuntimeHelper.downcallHandle(
        IUriVtbl.GetPathAndQuery_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetPathAndQuery)(IUri*,BSTR*);
     * }
     */
    public interface GetPathAndQuery {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetPathAndQuery fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IUriVtbl.GetPathAndQuery_UP$MH, fi, IUriVtbl.GetPathAndQuery$FUNC, scope);
        }
        static GetPathAndQuery ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IUriVtbl.GetPathAndQuery_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetPathAndQuery$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetPathAndQuery"));
    public static VarHandle GetPathAndQuery$VH() {
        return IUriVtbl.GetPathAndQuery$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetPathAndQuery)(IUri*,BSTR*);
     * }
     */
    public static MemorySegment GetPathAndQuery$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IUriVtbl.GetPathAndQuery$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetPathAndQuery)(IUri*,BSTR*);
     * }
     */
    public static void GetPathAndQuery$set(MemorySegment seg, MemorySegment x) {
        IUriVtbl.GetPathAndQuery$VH.set(seg, x);
    }
    public static MemorySegment GetPathAndQuery$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IUriVtbl.GetPathAndQuery$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetPathAndQuery$set(MemorySegment seg, long index, MemorySegment x) {
        IUriVtbl.GetPathAndQuery$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetPathAndQuery GetPathAndQuery(MemorySegment segment, SegmentScope scope) {
        return GetPathAndQuery.ofAddress(GetPathAndQuery$get(segment), scope);
    }
    static final FunctionDescriptor GetQuery$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetQuery_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetQuery_UP$MH = RuntimeHelper.upcallHandle(GetQuery.class, "apply", IUriVtbl.GetQuery_UP$FUNC);
    static final FunctionDescriptor GetQuery_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetQuery_DOWN$MH = RuntimeHelper.downcallHandle(
        IUriVtbl.GetQuery_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetQuery)(IUri*,BSTR*);
     * }
     */
    public interface GetQuery {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetQuery fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IUriVtbl.GetQuery_UP$MH, fi, IUriVtbl.GetQuery$FUNC, scope);
        }
        static GetQuery ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IUriVtbl.GetQuery_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetQuery$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetQuery"));
    public static VarHandle GetQuery$VH() {
        return IUriVtbl.GetQuery$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetQuery)(IUri*,BSTR*);
     * }
     */
    public static MemorySegment GetQuery$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IUriVtbl.GetQuery$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetQuery)(IUri*,BSTR*);
     * }
     */
    public static void GetQuery$set(MemorySegment seg, MemorySegment x) {
        IUriVtbl.GetQuery$VH.set(seg, x);
    }
    public static MemorySegment GetQuery$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IUriVtbl.GetQuery$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetQuery$set(MemorySegment seg, long index, MemorySegment x) {
        IUriVtbl.GetQuery$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetQuery GetQuery(MemorySegment segment, SegmentScope scope) {
        return GetQuery.ofAddress(GetQuery$get(segment), scope);
    }
    static final FunctionDescriptor GetRawUri$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetRawUri_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetRawUri_UP$MH = RuntimeHelper.upcallHandle(GetRawUri.class, "apply", IUriVtbl.GetRawUri_UP$FUNC);
    static final FunctionDescriptor GetRawUri_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetRawUri_DOWN$MH = RuntimeHelper.downcallHandle(
        IUriVtbl.GetRawUri_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetRawUri)(IUri*,BSTR*);
     * }
     */
    public interface GetRawUri {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetRawUri fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IUriVtbl.GetRawUri_UP$MH, fi, IUriVtbl.GetRawUri$FUNC, scope);
        }
        static GetRawUri ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IUriVtbl.GetRawUri_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetRawUri$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetRawUri"));
    public static VarHandle GetRawUri$VH() {
        return IUriVtbl.GetRawUri$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetRawUri)(IUri*,BSTR*);
     * }
     */
    public static MemorySegment GetRawUri$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IUriVtbl.GetRawUri$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetRawUri)(IUri*,BSTR*);
     * }
     */
    public static void GetRawUri$set(MemorySegment seg, MemorySegment x) {
        IUriVtbl.GetRawUri$VH.set(seg, x);
    }
    public static MemorySegment GetRawUri$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IUriVtbl.GetRawUri$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetRawUri$set(MemorySegment seg, long index, MemorySegment x) {
        IUriVtbl.GetRawUri$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetRawUri GetRawUri(MemorySegment segment, SegmentScope scope) {
        return GetRawUri.ofAddress(GetRawUri$get(segment), scope);
    }
    static final FunctionDescriptor GetSchemeName$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetSchemeName_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetSchemeName_UP$MH = RuntimeHelper.upcallHandle(GetSchemeName.class, "apply", IUriVtbl.GetSchemeName_UP$FUNC);
    static final FunctionDescriptor GetSchemeName_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetSchemeName_DOWN$MH = RuntimeHelper.downcallHandle(
        IUriVtbl.GetSchemeName_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetSchemeName)(IUri*,BSTR*);
     * }
     */
    public interface GetSchemeName {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetSchemeName fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IUriVtbl.GetSchemeName_UP$MH, fi, IUriVtbl.GetSchemeName$FUNC, scope);
        }
        static GetSchemeName ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IUriVtbl.GetSchemeName_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetSchemeName$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetSchemeName"));
    public static VarHandle GetSchemeName$VH() {
        return IUriVtbl.GetSchemeName$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetSchemeName)(IUri*,BSTR*);
     * }
     */
    public static MemorySegment GetSchemeName$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IUriVtbl.GetSchemeName$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetSchemeName)(IUri*,BSTR*);
     * }
     */
    public static void GetSchemeName$set(MemorySegment seg, MemorySegment x) {
        IUriVtbl.GetSchemeName$VH.set(seg, x);
    }
    public static MemorySegment GetSchemeName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IUriVtbl.GetSchemeName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetSchemeName$set(MemorySegment seg, long index, MemorySegment x) {
        IUriVtbl.GetSchemeName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetSchemeName GetSchemeName(MemorySegment segment, SegmentScope scope) {
        return GetSchemeName.ofAddress(GetSchemeName$get(segment), scope);
    }
    static final FunctionDescriptor GetUserInfo$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetUserInfo_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetUserInfo_UP$MH = RuntimeHelper.upcallHandle(GetUserInfo.class, "apply", IUriVtbl.GetUserInfo_UP$FUNC);
    static final FunctionDescriptor GetUserInfo_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetUserInfo_DOWN$MH = RuntimeHelper.downcallHandle(
        IUriVtbl.GetUserInfo_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetUserInfo)(IUri*,BSTR*);
     * }
     */
    public interface GetUserInfo {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetUserInfo fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IUriVtbl.GetUserInfo_UP$MH, fi, IUriVtbl.GetUserInfo$FUNC, scope);
        }
        static GetUserInfo ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IUriVtbl.GetUserInfo_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetUserInfo$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetUserInfo"));
    public static VarHandle GetUserInfo$VH() {
        return IUriVtbl.GetUserInfo$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetUserInfo)(IUri*,BSTR*);
     * }
     */
    public static MemorySegment GetUserInfo$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IUriVtbl.GetUserInfo$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetUserInfo)(IUri*,BSTR*);
     * }
     */
    public static void GetUserInfo$set(MemorySegment seg, MemorySegment x) {
        IUriVtbl.GetUserInfo$VH.set(seg, x);
    }
    public static MemorySegment GetUserInfo$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IUriVtbl.GetUserInfo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetUserInfo$set(MemorySegment seg, long index, MemorySegment x) {
        IUriVtbl.GetUserInfo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetUserInfo GetUserInfo(MemorySegment segment, SegmentScope scope) {
        return GetUserInfo.ofAddress(GetUserInfo$get(segment), scope);
    }
    static final FunctionDescriptor GetUserNameA$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetUserNameA_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetUserNameA_UP$MH = RuntimeHelper.upcallHandle(GetUserNameA.class, "apply", IUriVtbl.GetUserNameA_UP$FUNC);
    static final FunctionDescriptor GetUserNameA_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetUserNameA_DOWN$MH = RuntimeHelper.downcallHandle(
        IUriVtbl.GetUserNameA_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetUserNameA)(IUri*,BSTR*);
     * }
     */
    public interface GetUserNameA {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetUserNameA fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IUriVtbl.GetUserNameA_UP$MH, fi, IUriVtbl.GetUserNameA$FUNC, scope);
        }
        static GetUserNameA ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IUriVtbl.GetUserNameA_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetUserNameA$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetUserNameA"));
    public static VarHandle GetUserNameA$VH() {
        return IUriVtbl.GetUserNameA$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetUserNameA)(IUri*,BSTR*);
     * }
     */
    public static MemorySegment GetUserNameA$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IUriVtbl.GetUserNameA$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetUserNameA)(IUri*,BSTR*);
     * }
     */
    public static void GetUserNameA$set(MemorySegment seg, MemorySegment x) {
        IUriVtbl.GetUserNameA$VH.set(seg, x);
    }
    public static MemorySegment GetUserNameA$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IUriVtbl.GetUserNameA$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetUserNameA$set(MemorySegment seg, long index, MemorySegment x) {
        IUriVtbl.GetUserNameA$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetUserNameA GetUserNameA(MemorySegment segment, SegmentScope scope) {
        return GetUserNameA.ofAddress(GetUserNameA$get(segment), scope);
    }
    static final FunctionDescriptor GetHostType$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetHostType_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetHostType_UP$MH = RuntimeHelper.upcallHandle(GetHostType.class, "apply", IUriVtbl.GetHostType_UP$FUNC);
    static final FunctionDescriptor GetHostType_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetHostType_DOWN$MH = RuntimeHelper.downcallHandle(
        IUriVtbl.GetHostType_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetHostType)(IUri*,DWORD*);
     * }
     */
    public interface GetHostType {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetHostType fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IUriVtbl.GetHostType_UP$MH, fi, IUriVtbl.GetHostType$FUNC, scope);
        }
        static GetHostType ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IUriVtbl.GetHostType_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetHostType$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetHostType"));
    public static VarHandle GetHostType$VH() {
        return IUriVtbl.GetHostType$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetHostType)(IUri*,DWORD*);
     * }
     */
    public static MemorySegment GetHostType$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IUriVtbl.GetHostType$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetHostType)(IUri*,DWORD*);
     * }
     */
    public static void GetHostType$set(MemorySegment seg, MemorySegment x) {
        IUriVtbl.GetHostType$VH.set(seg, x);
    }
    public static MemorySegment GetHostType$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IUriVtbl.GetHostType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetHostType$set(MemorySegment seg, long index, MemorySegment x) {
        IUriVtbl.GetHostType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetHostType GetHostType(MemorySegment segment, SegmentScope scope) {
        return GetHostType.ofAddress(GetHostType$get(segment), scope);
    }
    static final FunctionDescriptor GetPort$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetPort_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetPort_UP$MH = RuntimeHelper.upcallHandle(GetPort.class, "apply", IUriVtbl.GetPort_UP$FUNC);
    static final FunctionDescriptor GetPort_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetPort_DOWN$MH = RuntimeHelper.downcallHandle(
        IUriVtbl.GetPort_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetPort)(IUri*,DWORD*);
     * }
     */
    public interface GetPort {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetPort fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IUriVtbl.GetPort_UP$MH, fi, IUriVtbl.GetPort$FUNC, scope);
        }
        static GetPort ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IUriVtbl.GetPort_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetPort$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetPort"));
    public static VarHandle GetPort$VH() {
        return IUriVtbl.GetPort$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetPort)(IUri*,DWORD*);
     * }
     */
    public static MemorySegment GetPort$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IUriVtbl.GetPort$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetPort)(IUri*,DWORD*);
     * }
     */
    public static void GetPort$set(MemorySegment seg, MemorySegment x) {
        IUriVtbl.GetPort$VH.set(seg, x);
    }
    public static MemorySegment GetPort$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IUriVtbl.GetPort$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetPort$set(MemorySegment seg, long index, MemorySegment x) {
        IUriVtbl.GetPort$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetPort GetPort(MemorySegment segment, SegmentScope scope) {
        return GetPort.ofAddress(GetPort$get(segment), scope);
    }
    static final FunctionDescriptor GetScheme$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetScheme_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetScheme_UP$MH = RuntimeHelper.upcallHandle(GetScheme.class, "apply", IUriVtbl.GetScheme_UP$FUNC);
    static final FunctionDescriptor GetScheme_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetScheme_DOWN$MH = RuntimeHelper.downcallHandle(
        IUriVtbl.GetScheme_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetScheme)(IUri*,DWORD*);
     * }
     */
    public interface GetScheme {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetScheme fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IUriVtbl.GetScheme_UP$MH, fi, IUriVtbl.GetScheme$FUNC, scope);
        }
        static GetScheme ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IUriVtbl.GetScheme_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetScheme$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetScheme"));
    public static VarHandle GetScheme$VH() {
        return IUriVtbl.GetScheme$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetScheme)(IUri*,DWORD*);
     * }
     */
    public static MemorySegment GetScheme$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IUriVtbl.GetScheme$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetScheme)(IUri*,DWORD*);
     * }
     */
    public static void GetScheme$set(MemorySegment seg, MemorySegment x) {
        IUriVtbl.GetScheme$VH.set(seg, x);
    }
    public static MemorySegment GetScheme$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IUriVtbl.GetScheme$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetScheme$set(MemorySegment seg, long index, MemorySegment x) {
        IUriVtbl.GetScheme$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetScheme GetScheme(MemorySegment segment, SegmentScope scope) {
        return GetScheme.ofAddress(GetScheme$get(segment), scope);
    }
    static final FunctionDescriptor GetZone$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetZone_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetZone_UP$MH = RuntimeHelper.upcallHandle(GetZone.class, "apply", IUriVtbl.GetZone_UP$FUNC);
    static final FunctionDescriptor GetZone_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetZone_DOWN$MH = RuntimeHelper.downcallHandle(
        IUriVtbl.GetZone_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetZone)(IUri*,DWORD*);
     * }
     */
    public interface GetZone {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetZone fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IUriVtbl.GetZone_UP$MH, fi, IUriVtbl.GetZone$FUNC, scope);
        }
        static GetZone ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IUriVtbl.GetZone_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetZone$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetZone"));
    public static VarHandle GetZone$VH() {
        return IUriVtbl.GetZone$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetZone)(IUri*,DWORD*);
     * }
     */
    public static MemorySegment GetZone$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IUriVtbl.GetZone$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetZone)(IUri*,DWORD*);
     * }
     */
    public static void GetZone$set(MemorySegment seg, MemorySegment x) {
        IUriVtbl.GetZone$VH.set(seg, x);
    }
    public static MemorySegment GetZone$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IUriVtbl.GetZone$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetZone$set(MemorySegment seg, long index, MemorySegment x) {
        IUriVtbl.GetZone$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetZone GetZone(MemorySegment segment, SegmentScope scope) {
        return GetZone.ofAddress(GetZone$get(segment), scope);
    }
    static final FunctionDescriptor GetProperties$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetProperties_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetProperties_UP$MH = RuntimeHelper.upcallHandle(GetProperties.class, "apply", IUriVtbl.GetProperties_UP$FUNC);
    static final FunctionDescriptor GetProperties_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetProperties_DOWN$MH = RuntimeHelper.downcallHandle(
        IUriVtbl.GetProperties_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetProperties)(IUri*,LPDWORD);
     * }
     */
    public interface GetProperties {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetProperties fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IUriVtbl.GetProperties_UP$MH, fi, IUriVtbl.GetProperties$FUNC, scope);
        }
        static GetProperties ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IUriVtbl.GetProperties_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetProperties$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetProperties"));
    public static VarHandle GetProperties$VH() {
        return IUriVtbl.GetProperties$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetProperties)(IUri*,LPDWORD);
     * }
     */
    public static MemorySegment GetProperties$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IUriVtbl.GetProperties$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetProperties)(IUri*,LPDWORD);
     * }
     */
    public static void GetProperties$set(MemorySegment seg, MemorySegment x) {
        IUriVtbl.GetProperties$VH.set(seg, x);
    }
    public static MemorySegment GetProperties$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IUriVtbl.GetProperties$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetProperties$set(MemorySegment seg, long index, MemorySegment x) {
        IUriVtbl.GetProperties$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetProperties GetProperties(MemorySegment segment, SegmentScope scope) {
        return GetProperties.ofAddress(GetProperties$get(segment), scope);
    }
    static final FunctionDescriptor IsEqual$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor IsEqual_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle IsEqual_UP$MH = RuntimeHelper.upcallHandle(IsEqual.class, "apply", IUriVtbl.IsEqual_UP$FUNC);
    static final FunctionDescriptor IsEqual_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle IsEqual_DOWN$MH = RuntimeHelper.downcallHandle(
        IUriVtbl.IsEqual_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*IsEqual)(IUri*,IUri*,BOOL*);
     * }
     */
    public interface IsEqual {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(IsEqual fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IUriVtbl.IsEqual_UP$MH, fi, IUriVtbl.IsEqual$FUNC, scope);
        }
        static IsEqual ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IUriVtbl.IsEqual_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle IsEqual$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("IsEqual"));
    public static VarHandle IsEqual$VH() {
        return IUriVtbl.IsEqual$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*IsEqual)(IUri*,IUri*,BOOL*);
     * }
     */
    public static MemorySegment IsEqual$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IUriVtbl.IsEqual$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*IsEqual)(IUri*,IUri*,BOOL*);
     * }
     */
    public static void IsEqual$set(MemorySegment seg, MemorySegment x) {
        IUriVtbl.IsEqual$VH.set(seg, x);
    }
    public static MemorySegment IsEqual$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IUriVtbl.IsEqual$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void IsEqual$set(MemorySegment seg, long index, MemorySegment x) {
        IUriVtbl.IsEqual$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static IsEqual IsEqual(MemorySegment segment, SegmentScope scope) {
        return IsEqual.ofAddress(IsEqual$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


