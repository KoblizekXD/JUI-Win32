// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _GENERIC_BINDING_ROUTINE_PAIR {
 *     GENERIC_BINDING_ROUTINE pfnBind;
 *     GENERIC_UNBIND_ROUTINE pfnUnbind;
 * };
 * }
 */
public class _GENERIC_BINDING_ROUTINE_PAIR {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("pfnBind"),
        Constants$root.C_POINTER$LAYOUT.withName("pfnUnbind")
    ).withName("_GENERIC_BINDING_ROUTINE_PAIR");
    public static MemoryLayout $LAYOUT() {
        return _GENERIC_BINDING_ROUTINE_PAIR.$struct$LAYOUT;
    }
    static final VarHandle pfnBind$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pfnBind"));
    public static VarHandle pfnBind$VH() {
        return _GENERIC_BINDING_ROUTINE_PAIR.pfnBind$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * GENERIC_BINDING_ROUTINE pfnBind;
     * }
     */
    public static MemorySegment pfnBind$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GENERIC_BINDING_ROUTINE_PAIR.pfnBind$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * GENERIC_BINDING_ROUTINE pfnBind;
     * }
     */
    public static void pfnBind$set(MemorySegment seg, MemorySegment x) {
        _GENERIC_BINDING_ROUTINE_PAIR.pfnBind$VH.set(seg, x);
    }
    public static MemorySegment pfnBind$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GENERIC_BINDING_ROUTINE_PAIR.pfnBind$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pfnBind$set(MemorySegment seg, long index, MemorySegment x) {
        _GENERIC_BINDING_ROUTINE_PAIR.pfnBind$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GENERIC_BINDING_ROUTINE pfnBind(MemorySegment segment, SegmentScope scope) {
        return GENERIC_BINDING_ROUTINE.ofAddress(pfnBind$get(segment), scope);
    }
    static final VarHandle pfnUnbind$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pfnUnbind"));
    public static VarHandle pfnUnbind$VH() {
        return _GENERIC_BINDING_ROUTINE_PAIR.pfnUnbind$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * GENERIC_UNBIND_ROUTINE pfnUnbind;
     * }
     */
    public static MemorySegment pfnUnbind$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GENERIC_BINDING_ROUTINE_PAIR.pfnUnbind$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * GENERIC_UNBIND_ROUTINE pfnUnbind;
     * }
     */
    public static void pfnUnbind$set(MemorySegment seg, MemorySegment x) {
        _GENERIC_BINDING_ROUTINE_PAIR.pfnUnbind$VH.set(seg, x);
    }
    public static MemorySegment pfnUnbind$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GENERIC_BINDING_ROUTINE_PAIR.pfnUnbind$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pfnUnbind$set(MemorySegment seg, long index, MemorySegment x) {
        _GENERIC_BINDING_ROUTINE_PAIR.pfnUnbind$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GENERIC_UNBIND_ROUTINE pfnUnbind(MemorySegment segment, SegmentScope scope) {
        return GENERIC_UNBIND_ROUTINE.ofAddress(pfnUnbind$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


