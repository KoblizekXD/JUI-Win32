// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * void (*PIMAGE_TLS_CALLBACK)(void* DllHandle,unsigned long Reason,void* Reserved);
 * }
 */
public interface PIMAGE_TLS_CALLBACK {

    void apply(java.lang.foreign.MemorySegment DllHandle, int Reason, java.lang.foreign.MemorySegment Reserved);
    static MemorySegment allocate(PIMAGE_TLS_CALLBACK fi, SegmentScope scope) {
        return RuntimeHelper.upcallStub(constants$96.PIMAGE_TLS_CALLBACK_UP$MH, fi, constants$96.PIMAGE_TLS_CALLBACK$FUNC, scope);
    }
    static PIMAGE_TLS_CALLBACK ofAddress(MemorySegment addr, SegmentScope scope) {
        MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
        return (java.lang.foreign.MemorySegment _DllHandle, int _Reason, java.lang.foreign.MemorySegment _Reserved) -> {
            try {
                constants$96.PIMAGE_TLS_CALLBACK_DOWN$MH.invokeExact(symbol, _DllHandle, _Reason, _Reserved);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


