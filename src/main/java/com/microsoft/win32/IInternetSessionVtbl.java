// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IInternetSessionVtbl {
 *     HRESULT (*QueryInterface)(IInternetSession*,const IID*,void**);
 *     ULONG (*AddRef)(IInternetSession*);
 *     ULONG (*Release)(IInternetSession*);
 *     HRESULT (*RegisterNameSpace)(IInternetSession*,IClassFactory*,const IID*,LPCWSTR,ULONG,const LPCWSTR*,DWORD);
 *     HRESULT (*UnregisterNameSpace)(IInternetSession*,IClassFactory*,LPCWSTR);
 *     HRESULT (*RegisterMimeFilter)(IInternetSession*,IClassFactory*,const IID*,LPCWSTR);
 *     HRESULT (*UnregisterMimeFilter)(IInternetSession*,IClassFactory*,LPCWSTR);
 *     HRESULT (*CreateBinding)(IInternetSession*,LPBC,LPCWSTR,IUnknown*,IUnknown**,IInternetProtocol**,DWORD);
 *     HRESULT (*SetSessionOption)(IInternetSession*,DWORD,LPVOID,DWORD,DWORD);
 *     HRESULT (*GetSessionOption)(IInternetSession*,DWORD,LPVOID,DWORD*,DWORD);
 * };
 * }
 */
public class IInternetSessionVtbl {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("RegisterNameSpace"),
        Constants$root.C_POINTER$LAYOUT.withName("UnregisterNameSpace"),
        Constants$root.C_POINTER$LAYOUT.withName("RegisterMimeFilter"),
        Constants$root.C_POINTER$LAYOUT.withName("UnregisterMimeFilter"),
        Constants$root.C_POINTER$LAYOUT.withName("CreateBinding"),
        Constants$root.C_POINTER$LAYOUT.withName("SetSessionOption"),
        Constants$root.C_POINTER$LAYOUT.withName("GetSessionOption")
    ).withName("IInternetSessionVtbl");
    public static MemoryLayout $LAYOUT() {
        return IInternetSessionVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor QueryInterface_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_UP$MH = RuntimeHelper.upcallHandle(QueryInterface.class, "apply", IInternetSessionVtbl.QueryInterface_UP$FUNC);
    static final FunctionDescriptor QueryInterface_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_DOWN$MH = RuntimeHelper.downcallHandle(
        IInternetSessionVtbl.QueryInterface_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(IInternetSession*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IInternetSessionVtbl.QueryInterface_UP$MH, fi, IInternetSessionVtbl.QueryInterface$FUNC, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IInternetSessionVtbl.QueryInterface_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return IInternetSessionVtbl.QueryInterface$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IInternetSession*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IInternetSessionVtbl.QueryInterface$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IInternetSession*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        IInternetSessionVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IInternetSessionVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        IInternetSessionVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, SegmentScope scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor AddRef_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_UP$MH = RuntimeHelper.upcallHandle(AddRef.class, "apply", IInternetSessionVtbl.AddRef_UP$FUNC);
    static final FunctionDescriptor AddRef_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_DOWN$MH = RuntimeHelper.downcallHandle(
        IInternetSessionVtbl.AddRef_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*AddRef)(IInternetSession*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IInternetSessionVtbl.AddRef_UP$MH, fi, IInternetSessionVtbl.AddRef$FUNC, scope);
        }
        static AddRef ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IInternetSessionVtbl.AddRef_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return IInternetSessionVtbl.AddRef$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(IInternetSession*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IInternetSessionVtbl.AddRef$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(IInternetSession*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        IInternetSessionVtbl.AddRef$VH.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IInternetSessionVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        IInternetSessionVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, SegmentScope scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Release_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_UP$MH = RuntimeHelper.upcallHandle(Release.class, "apply", IInternetSessionVtbl.Release_UP$FUNC);
    static final FunctionDescriptor Release_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_DOWN$MH = RuntimeHelper.downcallHandle(
        IInternetSessionVtbl.Release_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*Release)(IInternetSession*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IInternetSessionVtbl.Release_UP$MH, fi, IInternetSessionVtbl.Release$FUNC, scope);
        }
        static Release ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IInternetSessionVtbl.Release_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return IInternetSessionVtbl.Release$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(IInternetSession*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IInternetSessionVtbl.Release$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(IInternetSession*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        IInternetSessionVtbl.Release$VH.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IInternetSessionVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        IInternetSessionVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, SegmentScope scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    static final FunctionDescriptor RegisterNameSpace$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor RegisterNameSpace_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle RegisterNameSpace_UP$MH = RuntimeHelper.upcallHandle(RegisterNameSpace.class, "apply", IInternetSessionVtbl.RegisterNameSpace_UP$FUNC);
    static final FunctionDescriptor RegisterNameSpace_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle RegisterNameSpace_DOWN$MH = RuntimeHelper.downcallHandle(
        IInternetSessionVtbl.RegisterNameSpace_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*RegisterNameSpace)(IInternetSession*,IClassFactory*,const IID*,LPCWSTR,ULONG,const LPCWSTR*,DWORD);
     * }
     */
    public interface RegisterNameSpace {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, int _x4, java.lang.foreign.MemorySegment _x5, int _x6);
        static MemorySegment allocate(RegisterNameSpace fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IInternetSessionVtbl.RegisterNameSpace_UP$MH, fi, IInternetSessionVtbl.RegisterNameSpace$FUNC, scope);
        }
        static RegisterNameSpace ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, int __x4, java.lang.foreign.MemorySegment __x5, int __x6) -> {
                try {
                    return (int)IInternetSessionVtbl.RegisterNameSpace_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle RegisterNameSpace$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("RegisterNameSpace"));
    public static VarHandle RegisterNameSpace$VH() {
        return IInternetSessionVtbl.RegisterNameSpace$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*RegisterNameSpace)(IInternetSession*,IClassFactory*,const IID*,LPCWSTR,ULONG,const LPCWSTR*,DWORD);
     * }
     */
    public static MemorySegment RegisterNameSpace$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IInternetSessionVtbl.RegisterNameSpace$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*RegisterNameSpace)(IInternetSession*,IClassFactory*,const IID*,LPCWSTR,ULONG,const LPCWSTR*,DWORD);
     * }
     */
    public static void RegisterNameSpace$set(MemorySegment seg, MemorySegment x) {
        IInternetSessionVtbl.RegisterNameSpace$VH.set(seg, x);
    }
    public static MemorySegment RegisterNameSpace$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IInternetSessionVtbl.RegisterNameSpace$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void RegisterNameSpace$set(MemorySegment seg, long index, MemorySegment x) {
        IInternetSessionVtbl.RegisterNameSpace$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static RegisterNameSpace RegisterNameSpace(MemorySegment segment, SegmentScope scope) {
        return RegisterNameSpace.ofAddress(RegisterNameSpace$get(segment), scope);
    }
    static final FunctionDescriptor UnregisterNameSpace$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor UnregisterNameSpace_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle UnregisterNameSpace_UP$MH = RuntimeHelper.upcallHandle(UnregisterNameSpace.class, "apply", IInternetSessionVtbl.UnregisterNameSpace_UP$FUNC);
    static final FunctionDescriptor UnregisterNameSpace_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle UnregisterNameSpace_DOWN$MH = RuntimeHelper.downcallHandle(
        IInternetSessionVtbl.UnregisterNameSpace_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*UnregisterNameSpace)(IInternetSession*,IClassFactory*,LPCWSTR);
     * }
     */
    public interface UnregisterNameSpace {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(UnregisterNameSpace fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IInternetSessionVtbl.UnregisterNameSpace_UP$MH, fi, IInternetSessionVtbl.UnregisterNameSpace$FUNC, scope);
        }
        static UnregisterNameSpace ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IInternetSessionVtbl.UnregisterNameSpace_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle UnregisterNameSpace$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("UnregisterNameSpace"));
    public static VarHandle UnregisterNameSpace$VH() {
        return IInternetSessionVtbl.UnregisterNameSpace$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*UnregisterNameSpace)(IInternetSession*,IClassFactory*,LPCWSTR);
     * }
     */
    public static MemorySegment UnregisterNameSpace$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IInternetSessionVtbl.UnregisterNameSpace$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*UnregisterNameSpace)(IInternetSession*,IClassFactory*,LPCWSTR);
     * }
     */
    public static void UnregisterNameSpace$set(MemorySegment seg, MemorySegment x) {
        IInternetSessionVtbl.UnregisterNameSpace$VH.set(seg, x);
    }
    public static MemorySegment UnregisterNameSpace$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IInternetSessionVtbl.UnregisterNameSpace$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void UnregisterNameSpace$set(MemorySegment seg, long index, MemorySegment x) {
        IInternetSessionVtbl.UnregisterNameSpace$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static UnregisterNameSpace UnregisterNameSpace(MemorySegment segment, SegmentScope scope) {
        return UnregisterNameSpace.ofAddress(UnregisterNameSpace$get(segment), scope);
    }
    static final FunctionDescriptor RegisterMimeFilter$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor RegisterMimeFilter_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle RegisterMimeFilter_UP$MH = RuntimeHelper.upcallHandle(RegisterMimeFilter.class, "apply", IInternetSessionVtbl.RegisterMimeFilter_UP$FUNC);
    static final FunctionDescriptor RegisterMimeFilter_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle RegisterMimeFilter_DOWN$MH = RuntimeHelper.downcallHandle(
        IInternetSessionVtbl.RegisterMimeFilter_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*RegisterMimeFilter)(IInternetSession*,IClassFactory*,const IID*,LPCWSTR);
     * }
     */
    public interface RegisterMimeFilter {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(RegisterMimeFilter fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IInternetSessionVtbl.RegisterMimeFilter_UP$MH, fi, IInternetSessionVtbl.RegisterMimeFilter$FUNC, scope);
        }
        static RegisterMimeFilter ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)IInternetSessionVtbl.RegisterMimeFilter_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle RegisterMimeFilter$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("RegisterMimeFilter"));
    public static VarHandle RegisterMimeFilter$VH() {
        return IInternetSessionVtbl.RegisterMimeFilter$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*RegisterMimeFilter)(IInternetSession*,IClassFactory*,const IID*,LPCWSTR);
     * }
     */
    public static MemorySegment RegisterMimeFilter$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IInternetSessionVtbl.RegisterMimeFilter$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*RegisterMimeFilter)(IInternetSession*,IClassFactory*,const IID*,LPCWSTR);
     * }
     */
    public static void RegisterMimeFilter$set(MemorySegment seg, MemorySegment x) {
        IInternetSessionVtbl.RegisterMimeFilter$VH.set(seg, x);
    }
    public static MemorySegment RegisterMimeFilter$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IInternetSessionVtbl.RegisterMimeFilter$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void RegisterMimeFilter$set(MemorySegment seg, long index, MemorySegment x) {
        IInternetSessionVtbl.RegisterMimeFilter$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static RegisterMimeFilter RegisterMimeFilter(MemorySegment segment, SegmentScope scope) {
        return RegisterMimeFilter.ofAddress(RegisterMimeFilter$get(segment), scope);
    }
    static final FunctionDescriptor UnregisterMimeFilter$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor UnregisterMimeFilter_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle UnregisterMimeFilter_UP$MH = RuntimeHelper.upcallHandle(UnregisterMimeFilter.class, "apply", IInternetSessionVtbl.UnregisterMimeFilter_UP$FUNC);
    static final FunctionDescriptor UnregisterMimeFilter_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle UnregisterMimeFilter_DOWN$MH = RuntimeHelper.downcallHandle(
        IInternetSessionVtbl.UnregisterMimeFilter_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*UnregisterMimeFilter)(IInternetSession*,IClassFactory*,LPCWSTR);
     * }
     */
    public interface UnregisterMimeFilter {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(UnregisterMimeFilter fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IInternetSessionVtbl.UnregisterMimeFilter_UP$MH, fi, IInternetSessionVtbl.UnregisterMimeFilter$FUNC, scope);
        }
        static UnregisterMimeFilter ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IInternetSessionVtbl.UnregisterMimeFilter_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle UnregisterMimeFilter$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("UnregisterMimeFilter"));
    public static VarHandle UnregisterMimeFilter$VH() {
        return IInternetSessionVtbl.UnregisterMimeFilter$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*UnregisterMimeFilter)(IInternetSession*,IClassFactory*,LPCWSTR);
     * }
     */
    public static MemorySegment UnregisterMimeFilter$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IInternetSessionVtbl.UnregisterMimeFilter$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*UnregisterMimeFilter)(IInternetSession*,IClassFactory*,LPCWSTR);
     * }
     */
    public static void UnregisterMimeFilter$set(MemorySegment seg, MemorySegment x) {
        IInternetSessionVtbl.UnregisterMimeFilter$VH.set(seg, x);
    }
    public static MemorySegment UnregisterMimeFilter$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IInternetSessionVtbl.UnregisterMimeFilter$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void UnregisterMimeFilter$set(MemorySegment seg, long index, MemorySegment x) {
        IInternetSessionVtbl.UnregisterMimeFilter$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static UnregisterMimeFilter UnregisterMimeFilter(MemorySegment segment, SegmentScope scope) {
        return UnregisterMimeFilter.ofAddress(UnregisterMimeFilter$get(segment), scope);
    }
    static final FunctionDescriptor CreateBinding$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor CreateBinding_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle CreateBinding_UP$MH = RuntimeHelper.upcallHandle(CreateBinding.class, "apply", IInternetSessionVtbl.CreateBinding_UP$FUNC);
    static final FunctionDescriptor CreateBinding_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle CreateBinding_DOWN$MH = RuntimeHelper.downcallHandle(
        IInternetSessionVtbl.CreateBinding_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*CreateBinding)(IInternetSession*,LPBC,LPCWSTR,IUnknown*,IUnknown**,IInternetProtocol**,DWORD);
     * }
     */
    public interface CreateBinding {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5, int _x6);
        static MemorySegment allocate(CreateBinding fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IInternetSessionVtbl.CreateBinding_UP$MH, fi, IInternetSessionVtbl.CreateBinding$FUNC, scope);
        }
        static CreateBinding ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5, int __x6) -> {
                try {
                    return (int)IInternetSessionVtbl.CreateBinding_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle CreateBinding$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("CreateBinding"));
    public static VarHandle CreateBinding$VH() {
        return IInternetSessionVtbl.CreateBinding$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*CreateBinding)(IInternetSession*,LPBC,LPCWSTR,IUnknown*,IUnknown**,IInternetProtocol**,DWORD);
     * }
     */
    public static MemorySegment CreateBinding$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IInternetSessionVtbl.CreateBinding$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*CreateBinding)(IInternetSession*,LPBC,LPCWSTR,IUnknown*,IUnknown**,IInternetProtocol**,DWORD);
     * }
     */
    public static void CreateBinding$set(MemorySegment seg, MemorySegment x) {
        IInternetSessionVtbl.CreateBinding$VH.set(seg, x);
    }
    public static MemorySegment CreateBinding$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IInternetSessionVtbl.CreateBinding$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CreateBinding$set(MemorySegment seg, long index, MemorySegment x) {
        IInternetSessionVtbl.CreateBinding$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static CreateBinding CreateBinding(MemorySegment segment, SegmentScope scope) {
        return CreateBinding.ofAddress(CreateBinding$get(segment), scope);
    }
    static final FunctionDescriptor SetSessionOption$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor SetSessionOption_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle SetSessionOption_UP$MH = RuntimeHelper.upcallHandle(SetSessionOption.class, "apply", IInternetSessionVtbl.SetSessionOption_UP$FUNC);
    static final FunctionDescriptor SetSessionOption_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle SetSessionOption_DOWN$MH = RuntimeHelper.downcallHandle(
        IInternetSessionVtbl.SetSessionOption_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetSessionOption)(IInternetSession*,DWORD,LPVOID,DWORD,DWORD);
     * }
     */
    public interface SetSessionOption {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, int _x3, int _x4);
        static MemorySegment allocate(SetSessionOption fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IInternetSessionVtbl.SetSessionOption_UP$MH, fi, IInternetSessionVtbl.SetSessionOption$FUNC, scope);
        }
        static SetSessionOption ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, int __x3, int __x4) -> {
                try {
                    return (int)IInternetSessionVtbl.SetSessionOption_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetSessionOption$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetSessionOption"));
    public static VarHandle SetSessionOption$VH() {
        return IInternetSessionVtbl.SetSessionOption$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetSessionOption)(IInternetSession*,DWORD,LPVOID,DWORD,DWORD);
     * }
     */
    public static MemorySegment SetSessionOption$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IInternetSessionVtbl.SetSessionOption$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetSessionOption)(IInternetSession*,DWORD,LPVOID,DWORD,DWORD);
     * }
     */
    public static void SetSessionOption$set(MemorySegment seg, MemorySegment x) {
        IInternetSessionVtbl.SetSessionOption$VH.set(seg, x);
    }
    public static MemorySegment SetSessionOption$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IInternetSessionVtbl.SetSessionOption$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetSessionOption$set(MemorySegment seg, long index, MemorySegment x) {
        IInternetSessionVtbl.SetSessionOption$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetSessionOption SetSessionOption(MemorySegment segment, SegmentScope scope) {
        return SetSessionOption.ofAddress(SetSessionOption$get(segment), scope);
    }
    static final FunctionDescriptor GetSessionOption$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor GetSessionOption_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle GetSessionOption_UP$MH = RuntimeHelper.upcallHandle(GetSessionOption.class, "apply", IInternetSessionVtbl.GetSessionOption_UP$FUNC);
    static final FunctionDescriptor GetSessionOption_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle GetSessionOption_DOWN$MH = RuntimeHelper.downcallHandle(
        IInternetSessionVtbl.GetSessionOption_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetSessionOption)(IInternetSession*,DWORD,LPVOID,DWORD*,DWORD);
     * }
     */
    public interface GetSessionOption {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, int _x4);
        static MemorySegment allocate(GetSessionOption fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IInternetSessionVtbl.GetSessionOption_UP$MH, fi, IInternetSessionVtbl.GetSessionOption$FUNC, scope);
        }
        static GetSessionOption ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, int __x4) -> {
                try {
                    return (int)IInternetSessionVtbl.GetSessionOption_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetSessionOption$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetSessionOption"));
    public static VarHandle GetSessionOption$VH() {
        return IInternetSessionVtbl.GetSessionOption$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetSessionOption)(IInternetSession*,DWORD,LPVOID,DWORD*,DWORD);
     * }
     */
    public static MemorySegment GetSessionOption$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IInternetSessionVtbl.GetSessionOption$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetSessionOption)(IInternetSession*,DWORD,LPVOID,DWORD*,DWORD);
     * }
     */
    public static void GetSessionOption$set(MemorySegment seg, MemorySegment x) {
        IInternetSessionVtbl.GetSessionOption$VH.set(seg, x);
    }
    public static MemorySegment GetSessionOption$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IInternetSessionVtbl.GetSessionOption$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetSessionOption$set(MemorySegment seg, long index, MemorySegment x) {
        IInternetSessionVtbl.GetSessionOption$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetSessionOption GetSessionOption(MemorySegment segment, SegmentScope scope) {
        return GetSessionOption.ofAddress(GetSessionOption$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


