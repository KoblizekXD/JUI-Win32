// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _EXCEPTION_REGISTRATION_RECORD {
 *     struct _EXCEPTION_REGISTRATION_RECORD* Next;
 *     PEXCEPTION_ROUTINE Handler;
 * };
 * }
 */
public class _EXCEPTION_REGISTRATION_RECORD {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("Next"),
        Constants$root.C_POINTER$LAYOUT.withName("Handler")
    ).withName("_EXCEPTION_REGISTRATION_RECORD");
    public static MemoryLayout $LAYOUT() {
        return _EXCEPTION_REGISTRATION_RECORD.$struct$LAYOUT;
    }
    static final VarHandle Next$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Next"));
    public static VarHandle Next$VH() {
        return _EXCEPTION_REGISTRATION_RECORD.Next$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _EXCEPTION_REGISTRATION_RECORD* Next;
     * }
     */
    public static MemorySegment Next$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_EXCEPTION_REGISTRATION_RECORD.Next$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _EXCEPTION_REGISTRATION_RECORD* Next;
     * }
     */
    public static void Next$set(MemorySegment seg, MemorySegment x) {
        _EXCEPTION_REGISTRATION_RECORD.Next$VH.set(seg, x);
    }
    public static MemorySegment Next$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_EXCEPTION_REGISTRATION_RECORD.Next$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Next$set(MemorySegment seg, long index, MemorySegment x) {
        _EXCEPTION_REGISTRATION_RECORD.Next$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Handler$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Handler"));
    public static VarHandle Handler$VH() {
        return _EXCEPTION_REGISTRATION_RECORD.Handler$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PEXCEPTION_ROUTINE Handler;
     * }
     */
    public static MemorySegment Handler$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_EXCEPTION_REGISTRATION_RECORD.Handler$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PEXCEPTION_ROUTINE Handler;
     * }
     */
    public static void Handler$set(MemorySegment seg, MemorySegment x) {
        _EXCEPTION_REGISTRATION_RECORD.Handler$VH.set(seg, x);
    }
    public static MemorySegment Handler$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_EXCEPTION_REGISTRATION_RECORD.Handler$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Handler$set(MemorySegment seg, long index, MemorySegment x) {
        _EXCEPTION_REGISTRATION_RECORD.Handler$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static PEXCEPTION_ROUTINE Handler(MemorySegment segment, SegmentScope scope) {
        return PEXCEPTION_ROUTINE.ofAddress(Handler$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


