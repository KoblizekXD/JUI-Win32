// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _ENUM_SERVICE_STATUSA {
 *     LPSTR lpServiceName;
 *     LPSTR lpDisplayName;
 *     SERVICE_STATUS ServiceStatus;
 * };
 * }
 */
public class _ENUM_SERVICE_STATUSA {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("lpServiceName"),
        Constants$root.C_POINTER$LAYOUT.withName("lpDisplayName"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("dwServiceType"),
            Constants$root.C_LONG$LAYOUT.withName("dwCurrentState"),
            Constants$root.C_LONG$LAYOUT.withName("dwControlsAccepted"),
            Constants$root.C_LONG$LAYOUT.withName("dwWin32ExitCode"),
            Constants$root.C_LONG$LAYOUT.withName("dwServiceSpecificExitCode"),
            Constants$root.C_LONG$LAYOUT.withName("dwCheckPoint"),
            Constants$root.C_LONG$LAYOUT.withName("dwWaitHint")
        ).withName("ServiceStatus"),
        MemoryLayout.paddingLayout(32)
    ).withName("_ENUM_SERVICE_STATUSA");
    public static MemoryLayout $LAYOUT() {
        return _ENUM_SERVICE_STATUSA.$struct$LAYOUT;
    }
    static final VarHandle lpServiceName$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lpServiceName"));
    public static VarHandle lpServiceName$VH() {
        return _ENUM_SERVICE_STATUSA.lpServiceName$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPSTR lpServiceName;
     * }
     */
    public static MemorySegment lpServiceName$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_ENUM_SERVICE_STATUSA.lpServiceName$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPSTR lpServiceName;
     * }
     */
    public static void lpServiceName$set(MemorySegment seg, MemorySegment x) {
        _ENUM_SERVICE_STATUSA.lpServiceName$VH.set(seg, x);
    }
    public static MemorySegment lpServiceName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_ENUM_SERVICE_STATUSA.lpServiceName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpServiceName$set(MemorySegment seg, long index, MemorySegment x) {
        _ENUM_SERVICE_STATUSA.lpServiceName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lpDisplayName$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lpDisplayName"));
    public static VarHandle lpDisplayName$VH() {
        return _ENUM_SERVICE_STATUSA.lpDisplayName$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPSTR lpDisplayName;
     * }
     */
    public static MemorySegment lpDisplayName$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_ENUM_SERVICE_STATUSA.lpDisplayName$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPSTR lpDisplayName;
     * }
     */
    public static void lpDisplayName$set(MemorySegment seg, MemorySegment x) {
        _ENUM_SERVICE_STATUSA.lpDisplayName$VH.set(seg, x);
    }
    public static MemorySegment lpDisplayName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_ENUM_SERVICE_STATUSA.lpDisplayName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpDisplayName$set(MemorySegment seg, long index, MemorySegment x) {
        _ENUM_SERVICE_STATUSA.lpDisplayName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment ServiceStatus$slice(MemorySegment seg) {
        return seg.asSlice(16, 28);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


