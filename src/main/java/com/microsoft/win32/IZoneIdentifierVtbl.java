// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IZoneIdentifierVtbl {
 *     HRESULT (*QueryInterface)(IZoneIdentifier*,const IID*,void**);
 *     ULONG (*AddRef)(IZoneIdentifier*);
 *     ULONG (*Release)(IZoneIdentifier*);
 *     HRESULT (*GetId)(IZoneIdentifier*,DWORD*);
 *     HRESULT (*SetId)(IZoneIdentifier*,DWORD);
 *     HRESULT (*Remove)(IZoneIdentifier*);
 * };
 * }
 */
public class IZoneIdentifierVtbl {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("GetId"),
        Constants$root.C_POINTER$LAYOUT.withName("SetId"),
        Constants$root.C_POINTER$LAYOUT.withName("Remove")
    ).withName("IZoneIdentifierVtbl");
    public static MemoryLayout $LAYOUT() {
        return IZoneIdentifierVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor QueryInterface_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_UP$MH = RuntimeHelper.upcallHandle(QueryInterface.class, "apply", IZoneIdentifierVtbl.QueryInterface_UP$FUNC);
    static final FunctionDescriptor QueryInterface_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_DOWN$MH = RuntimeHelper.downcallHandle(
        IZoneIdentifierVtbl.QueryInterface_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(IZoneIdentifier*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IZoneIdentifierVtbl.QueryInterface_UP$MH, fi, IZoneIdentifierVtbl.QueryInterface$FUNC, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IZoneIdentifierVtbl.QueryInterface_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return IZoneIdentifierVtbl.QueryInterface$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IZoneIdentifier*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IZoneIdentifierVtbl.QueryInterface$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IZoneIdentifier*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        IZoneIdentifierVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IZoneIdentifierVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        IZoneIdentifierVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, SegmentScope scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor AddRef_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_UP$MH = RuntimeHelper.upcallHandle(AddRef.class, "apply", IZoneIdentifierVtbl.AddRef_UP$FUNC);
    static final FunctionDescriptor AddRef_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_DOWN$MH = RuntimeHelper.downcallHandle(
        IZoneIdentifierVtbl.AddRef_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*AddRef)(IZoneIdentifier*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IZoneIdentifierVtbl.AddRef_UP$MH, fi, IZoneIdentifierVtbl.AddRef$FUNC, scope);
        }
        static AddRef ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IZoneIdentifierVtbl.AddRef_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return IZoneIdentifierVtbl.AddRef$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(IZoneIdentifier*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IZoneIdentifierVtbl.AddRef$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(IZoneIdentifier*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        IZoneIdentifierVtbl.AddRef$VH.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IZoneIdentifierVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        IZoneIdentifierVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, SegmentScope scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Release_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_UP$MH = RuntimeHelper.upcallHandle(Release.class, "apply", IZoneIdentifierVtbl.Release_UP$FUNC);
    static final FunctionDescriptor Release_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_DOWN$MH = RuntimeHelper.downcallHandle(
        IZoneIdentifierVtbl.Release_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*Release)(IZoneIdentifier*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IZoneIdentifierVtbl.Release_UP$MH, fi, IZoneIdentifierVtbl.Release$FUNC, scope);
        }
        static Release ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IZoneIdentifierVtbl.Release_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return IZoneIdentifierVtbl.Release$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(IZoneIdentifier*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IZoneIdentifierVtbl.Release$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(IZoneIdentifier*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        IZoneIdentifierVtbl.Release$VH.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IZoneIdentifierVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        IZoneIdentifierVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, SegmentScope scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    static final FunctionDescriptor GetId$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetId_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetId_UP$MH = RuntimeHelper.upcallHandle(GetId.class, "apply", IZoneIdentifierVtbl.GetId_UP$FUNC);
    static final FunctionDescriptor GetId_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetId_DOWN$MH = RuntimeHelper.downcallHandle(
        IZoneIdentifierVtbl.GetId_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetId)(IZoneIdentifier*,DWORD*);
     * }
     */
    public interface GetId {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetId fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IZoneIdentifierVtbl.GetId_UP$MH, fi, IZoneIdentifierVtbl.GetId$FUNC, scope);
        }
        static GetId ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IZoneIdentifierVtbl.GetId_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetId$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetId"));
    public static VarHandle GetId$VH() {
        return IZoneIdentifierVtbl.GetId$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetId)(IZoneIdentifier*,DWORD*);
     * }
     */
    public static MemorySegment GetId$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IZoneIdentifierVtbl.GetId$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetId)(IZoneIdentifier*,DWORD*);
     * }
     */
    public static void GetId$set(MemorySegment seg, MemorySegment x) {
        IZoneIdentifierVtbl.GetId$VH.set(seg, x);
    }
    public static MemorySegment GetId$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IZoneIdentifierVtbl.GetId$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetId$set(MemorySegment seg, long index, MemorySegment x) {
        IZoneIdentifierVtbl.GetId$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetId GetId(MemorySegment segment, SegmentScope scope) {
        return GetId.ofAddress(GetId$get(segment), scope);
    }
    static final FunctionDescriptor SetId$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor SetId_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle SetId_UP$MH = RuntimeHelper.upcallHandle(SetId.class, "apply", IZoneIdentifierVtbl.SetId_UP$FUNC);
    static final FunctionDescriptor SetId_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle SetId_DOWN$MH = RuntimeHelper.downcallHandle(
        IZoneIdentifierVtbl.SetId_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetId)(IZoneIdentifier*,DWORD);
     * }
     */
    public interface SetId {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(SetId fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IZoneIdentifierVtbl.SetId_UP$MH, fi, IZoneIdentifierVtbl.SetId$FUNC, scope);
        }
        static SetId ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)IZoneIdentifierVtbl.SetId_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetId$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetId"));
    public static VarHandle SetId$VH() {
        return IZoneIdentifierVtbl.SetId$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetId)(IZoneIdentifier*,DWORD);
     * }
     */
    public static MemorySegment SetId$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IZoneIdentifierVtbl.SetId$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetId)(IZoneIdentifier*,DWORD);
     * }
     */
    public static void SetId$set(MemorySegment seg, MemorySegment x) {
        IZoneIdentifierVtbl.SetId$VH.set(seg, x);
    }
    public static MemorySegment SetId$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IZoneIdentifierVtbl.SetId$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetId$set(MemorySegment seg, long index, MemorySegment x) {
        IZoneIdentifierVtbl.SetId$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetId SetId(MemorySegment segment, SegmentScope scope) {
        return SetId.ofAddress(SetId$get(segment), scope);
    }
    static final FunctionDescriptor Remove$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Remove_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Remove_UP$MH = RuntimeHelper.upcallHandle(Remove.class, "apply", IZoneIdentifierVtbl.Remove_UP$FUNC);
    static final FunctionDescriptor Remove_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Remove_DOWN$MH = RuntimeHelper.downcallHandle(
        IZoneIdentifierVtbl.Remove_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*Remove)(IZoneIdentifier*);
     * }
     */
    public interface Remove {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Remove fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IZoneIdentifierVtbl.Remove_UP$MH, fi, IZoneIdentifierVtbl.Remove$FUNC, scope);
        }
        static Remove ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IZoneIdentifierVtbl.Remove_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Remove$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Remove"));
    public static VarHandle Remove$VH() {
        return IZoneIdentifierVtbl.Remove$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Remove)(IZoneIdentifier*);
     * }
     */
    public static MemorySegment Remove$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IZoneIdentifierVtbl.Remove$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Remove)(IZoneIdentifier*);
     * }
     */
    public static void Remove$set(MemorySegment seg, MemorySegment x) {
        IZoneIdentifierVtbl.Remove$VH.set(seg, x);
    }
    public static MemorySegment Remove$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IZoneIdentifierVtbl.Remove$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Remove$set(MemorySegment seg, long index, MemorySegment x) {
        IZoneIdentifierVtbl.Remove$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Remove Remove(MemorySegment segment, SegmentScope scope) {
        return Remove.ofAddress(Remove$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


