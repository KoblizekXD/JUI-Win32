// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct SChannelHookCallInfo {
 *     IID iid;
 *     DWORD cbSize;
 *     GUID uCausality;
 *     DWORD dwServerPid;
 *     DWORD iMethod;
 *     void* pObject;
 * };
 * }
 */
public class SChannelHookCallInfo {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("Data1"),
            Constants$root.C_SHORT$LAYOUT.withName("Data2"),
            Constants$root.C_SHORT$LAYOUT.withName("Data3"),
            MemoryLayout.sequenceLayout(8, Constants$root.C_CHAR$LAYOUT).withName("Data4")
        ).withName("iid"),
        Constants$root.C_LONG$LAYOUT.withName("cbSize"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("Data1"),
            Constants$root.C_SHORT$LAYOUT.withName("Data2"),
            Constants$root.C_SHORT$LAYOUT.withName("Data3"),
            MemoryLayout.sequenceLayout(8, Constants$root.C_CHAR$LAYOUT).withName("Data4")
        ).withName("uCausality"),
        Constants$root.C_LONG$LAYOUT.withName("dwServerPid"),
        Constants$root.C_LONG$LAYOUT.withName("iMethod"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("pObject")
    ).withName("SChannelHookCallInfo");
    public static MemoryLayout $LAYOUT() {
        return SChannelHookCallInfo.$struct$LAYOUT;
    }
    public static MemorySegment iid$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    static final VarHandle cbSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cbSize"));
    public static VarHandle cbSize$VH() {
        return SChannelHookCallInfo.cbSize$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD cbSize;
     * }
     */
    public static int cbSize$get(MemorySegment seg) {
        return (int)SChannelHookCallInfo.cbSize$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD cbSize;
     * }
     */
    public static void cbSize$set(MemorySegment seg, int x) {
        SChannelHookCallInfo.cbSize$VH.set(seg, x);
    }
    public static int cbSize$get(MemorySegment seg, long index) {
        return (int)SChannelHookCallInfo.cbSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cbSize$set(MemorySegment seg, long index, int x) {
        SChannelHookCallInfo.cbSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment uCausality$slice(MemorySegment seg) {
        return seg.asSlice(20, 16);
    }
    static final VarHandle dwServerPid$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwServerPid"));
    public static VarHandle dwServerPid$VH() {
        return SChannelHookCallInfo.dwServerPid$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwServerPid;
     * }
     */
    public static int dwServerPid$get(MemorySegment seg) {
        return (int)SChannelHookCallInfo.dwServerPid$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwServerPid;
     * }
     */
    public static void dwServerPid$set(MemorySegment seg, int x) {
        SChannelHookCallInfo.dwServerPid$VH.set(seg, x);
    }
    public static int dwServerPid$get(MemorySegment seg, long index) {
        return (int)SChannelHookCallInfo.dwServerPid$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwServerPid$set(MemorySegment seg, long index, int x) {
        SChannelHookCallInfo.dwServerPid$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle iMethod$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("iMethod"));
    public static VarHandle iMethod$VH() {
        return SChannelHookCallInfo.iMethod$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD iMethod;
     * }
     */
    public static int iMethod$get(MemorySegment seg) {
        return (int)SChannelHookCallInfo.iMethod$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD iMethod;
     * }
     */
    public static void iMethod$set(MemorySegment seg, int x) {
        SChannelHookCallInfo.iMethod$VH.set(seg, x);
    }
    public static int iMethod$get(MemorySegment seg, long index) {
        return (int)SChannelHookCallInfo.iMethod$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void iMethod$set(MemorySegment seg, long index, int x) {
        SChannelHookCallInfo.iMethod$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pObject$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pObject"));
    public static VarHandle pObject$VH() {
        return SChannelHookCallInfo.pObject$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* pObject;
     * }
     */
    public static MemorySegment pObject$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)SChannelHookCallInfo.pObject$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* pObject;
     * }
     */
    public static void pObject$set(MemorySegment seg, MemorySegment x) {
        SChannelHookCallInfo.pObject$VH.set(seg, x);
    }
    public static MemorySegment pObject$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)SChannelHookCallInfo.pObject$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pObject$set(MemorySegment seg, long index, MemorySegment x) {
        SChannelHookCallInfo.pObject$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


