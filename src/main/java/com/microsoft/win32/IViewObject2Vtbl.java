// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IViewObject2Vtbl {
 *     HRESULT (*QueryInterface)(IViewObject2*,const IID*,void**);
 *     ULONG (*AddRef)(IViewObject2*);
 *     ULONG (*Release)(IViewObject2*);
 *     HRESULT (*Draw)(IViewObject2*,DWORD,LONG,void*,DVTARGETDEVICE*,HDC,HDC,LPCRECTL,LPCRECTL,BOOL (*)(ULONG_PTR),ULONG_PTR);
 *     HRESULT (*GetColorSet)(IViewObject2*,DWORD,LONG,void*,DVTARGETDEVICE*,HDC,LOGPALETTE**);
 *     HRESULT (*Freeze)(IViewObject2*,DWORD,LONG,void*,DWORD*);
 *     HRESULT (*Unfreeze)(IViewObject2*,DWORD);
 *     HRESULT (*SetAdvise)(IViewObject2*,DWORD,DWORD,IAdviseSink*);
 *     HRESULT (*GetAdvise)(IViewObject2*,DWORD*,DWORD*,IAdviseSink**);
 *     HRESULT (*GetExtent)(IViewObject2*,DWORD,LONG,DVTARGETDEVICE*,LPSIZEL);
 * };
 * }
 */
public class IViewObject2Vtbl {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("Draw"),
        Constants$root.C_POINTER$LAYOUT.withName("GetColorSet"),
        Constants$root.C_POINTER$LAYOUT.withName("Freeze"),
        Constants$root.C_POINTER$LAYOUT.withName("Unfreeze"),
        Constants$root.C_POINTER$LAYOUT.withName("SetAdvise"),
        Constants$root.C_POINTER$LAYOUT.withName("GetAdvise"),
        Constants$root.C_POINTER$LAYOUT.withName("GetExtent")
    ).withName("IViewObject2Vtbl");
    public static MemoryLayout $LAYOUT() {
        return IViewObject2Vtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor QueryInterface_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_UP$MH = RuntimeHelper.upcallHandle(QueryInterface.class, "apply", IViewObject2Vtbl.QueryInterface_UP$FUNC);
    static final FunctionDescriptor QueryInterface_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_DOWN$MH = RuntimeHelper.downcallHandle(
        IViewObject2Vtbl.QueryInterface_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(IViewObject2*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IViewObject2Vtbl.QueryInterface_UP$MH, fi, IViewObject2Vtbl.QueryInterface$FUNC, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IViewObject2Vtbl.QueryInterface_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return IViewObject2Vtbl.QueryInterface$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IViewObject2*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IViewObject2Vtbl.QueryInterface$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IViewObject2*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        IViewObject2Vtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IViewObject2Vtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        IViewObject2Vtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, SegmentScope scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor AddRef_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_UP$MH = RuntimeHelper.upcallHandle(AddRef.class, "apply", IViewObject2Vtbl.AddRef_UP$FUNC);
    static final FunctionDescriptor AddRef_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_DOWN$MH = RuntimeHelper.downcallHandle(
        IViewObject2Vtbl.AddRef_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*AddRef)(IViewObject2*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IViewObject2Vtbl.AddRef_UP$MH, fi, IViewObject2Vtbl.AddRef$FUNC, scope);
        }
        static AddRef ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IViewObject2Vtbl.AddRef_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return IViewObject2Vtbl.AddRef$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(IViewObject2*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IViewObject2Vtbl.AddRef$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(IViewObject2*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        IViewObject2Vtbl.AddRef$VH.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IViewObject2Vtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        IViewObject2Vtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, SegmentScope scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Release_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_UP$MH = RuntimeHelper.upcallHandle(Release.class, "apply", IViewObject2Vtbl.Release_UP$FUNC);
    static final FunctionDescriptor Release_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_DOWN$MH = RuntimeHelper.downcallHandle(
        IViewObject2Vtbl.Release_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*Release)(IViewObject2*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IViewObject2Vtbl.Release_UP$MH, fi, IViewObject2Vtbl.Release$FUNC, scope);
        }
        static Release ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IViewObject2Vtbl.Release_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return IViewObject2Vtbl.Release$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(IViewObject2*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IViewObject2Vtbl.Release$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(IViewObject2*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        IViewObject2Vtbl.Release$VH.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IViewObject2Vtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        IViewObject2Vtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, SegmentScope scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    static final FunctionDescriptor Draw$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final FunctionDescriptor Draw_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final MethodHandle Draw_UP$MH = RuntimeHelper.upcallHandle(Draw.class, "apply", IViewObject2Vtbl.Draw_UP$FUNC);
    static final FunctionDescriptor Draw_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final MethodHandle Draw_DOWN$MH = RuntimeHelper.downcallHandle(
        IViewObject2Vtbl.Draw_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*Draw)(IViewObject2*,DWORD,LONG,void*,DVTARGETDEVICE*,HDC,HDC,LPCRECTL,LPCRECTL,BOOL (*)(ULONG_PTR),ULONG_PTR);
     * }
     */
    public interface Draw {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5, java.lang.foreign.MemorySegment _x6, java.lang.foreign.MemorySegment _x7, java.lang.foreign.MemorySegment _x8, java.lang.foreign.MemorySegment _x9, long _x10);
        static MemorySegment allocate(Draw fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IViewObject2Vtbl.Draw_UP$MH, fi, IViewObject2Vtbl.Draw$FUNC, scope);
        }
        static Draw ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5, java.lang.foreign.MemorySegment __x6, java.lang.foreign.MemorySegment __x7, java.lang.foreign.MemorySegment __x8, java.lang.foreign.MemorySegment __x9, long __x10) -> {
                try {
                    return (int)IViewObject2Vtbl.Draw_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6, __x7, __x8, __x9, __x10);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Draw$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Draw"));
    public static VarHandle Draw$VH() {
        return IViewObject2Vtbl.Draw$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Draw)(IViewObject2*,DWORD,LONG,void*,DVTARGETDEVICE*,HDC,HDC,LPCRECTL,LPCRECTL,BOOL (*)(ULONG_PTR),ULONG_PTR);
     * }
     */
    public static MemorySegment Draw$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IViewObject2Vtbl.Draw$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Draw)(IViewObject2*,DWORD,LONG,void*,DVTARGETDEVICE*,HDC,HDC,LPCRECTL,LPCRECTL,BOOL (*)(ULONG_PTR),ULONG_PTR);
     * }
     */
    public static void Draw$set(MemorySegment seg, MemorySegment x) {
        IViewObject2Vtbl.Draw$VH.set(seg, x);
    }
    public static MemorySegment Draw$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IViewObject2Vtbl.Draw$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Draw$set(MemorySegment seg, long index, MemorySegment x) {
        IViewObject2Vtbl.Draw$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Draw Draw(MemorySegment segment, SegmentScope scope) {
        return Draw.ofAddress(Draw$get(segment), scope);
    }
    static final FunctionDescriptor GetColorSet$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetColorSet_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetColorSet_UP$MH = RuntimeHelper.upcallHandle(GetColorSet.class, "apply", IViewObject2Vtbl.GetColorSet_UP$FUNC);
    static final FunctionDescriptor GetColorSet_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetColorSet_DOWN$MH = RuntimeHelper.downcallHandle(
        IViewObject2Vtbl.GetColorSet_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetColorSet)(IViewObject2*,DWORD,LONG,void*,DVTARGETDEVICE*,HDC,LOGPALETTE**);
     * }
     */
    public interface GetColorSet {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5, java.lang.foreign.MemorySegment _x6);
        static MemorySegment allocate(GetColorSet fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IViewObject2Vtbl.GetColorSet_UP$MH, fi, IViewObject2Vtbl.GetColorSet$FUNC, scope);
        }
        static GetColorSet ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5, java.lang.foreign.MemorySegment __x6) -> {
                try {
                    return (int)IViewObject2Vtbl.GetColorSet_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetColorSet$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetColorSet"));
    public static VarHandle GetColorSet$VH() {
        return IViewObject2Vtbl.GetColorSet$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetColorSet)(IViewObject2*,DWORD,LONG,void*,DVTARGETDEVICE*,HDC,LOGPALETTE**);
     * }
     */
    public static MemorySegment GetColorSet$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IViewObject2Vtbl.GetColorSet$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetColorSet)(IViewObject2*,DWORD,LONG,void*,DVTARGETDEVICE*,HDC,LOGPALETTE**);
     * }
     */
    public static void GetColorSet$set(MemorySegment seg, MemorySegment x) {
        IViewObject2Vtbl.GetColorSet$VH.set(seg, x);
    }
    public static MemorySegment GetColorSet$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IViewObject2Vtbl.GetColorSet$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetColorSet$set(MemorySegment seg, long index, MemorySegment x) {
        IViewObject2Vtbl.GetColorSet$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetColorSet GetColorSet(MemorySegment segment, SegmentScope scope) {
        return GetColorSet.ofAddress(GetColorSet$get(segment), scope);
    }
    static final FunctionDescriptor Freeze$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Freeze_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Freeze_UP$MH = RuntimeHelper.upcallHandle(Freeze.class, "apply", IViewObject2Vtbl.Freeze_UP$FUNC);
    static final FunctionDescriptor Freeze_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Freeze_DOWN$MH = RuntimeHelper.downcallHandle(
        IViewObject2Vtbl.Freeze_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*Freeze)(IViewObject2*,DWORD,LONG,void*,DWORD*);
     * }
     */
    public interface Freeze {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(Freeze fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IViewObject2Vtbl.Freeze_UP$MH, fi, IViewObject2Vtbl.Freeze$FUNC, scope);
        }
        static Freeze ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (int)IViewObject2Vtbl.Freeze_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Freeze$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Freeze"));
    public static VarHandle Freeze$VH() {
        return IViewObject2Vtbl.Freeze$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Freeze)(IViewObject2*,DWORD,LONG,void*,DWORD*);
     * }
     */
    public static MemorySegment Freeze$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IViewObject2Vtbl.Freeze$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Freeze)(IViewObject2*,DWORD,LONG,void*,DWORD*);
     * }
     */
    public static void Freeze$set(MemorySegment seg, MemorySegment x) {
        IViewObject2Vtbl.Freeze$VH.set(seg, x);
    }
    public static MemorySegment Freeze$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IViewObject2Vtbl.Freeze$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Freeze$set(MemorySegment seg, long index, MemorySegment x) {
        IViewObject2Vtbl.Freeze$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Freeze Freeze(MemorySegment segment, SegmentScope scope) {
        return Freeze.ofAddress(Freeze$get(segment), scope);
    }
    static final FunctionDescriptor Unfreeze$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor Unfreeze_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle Unfreeze_UP$MH = RuntimeHelper.upcallHandle(Unfreeze.class, "apply", IViewObject2Vtbl.Unfreeze_UP$FUNC);
    static final FunctionDescriptor Unfreeze_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle Unfreeze_DOWN$MH = RuntimeHelper.downcallHandle(
        IViewObject2Vtbl.Unfreeze_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*Unfreeze)(IViewObject2*,DWORD);
     * }
     */
    public interface Unfreeze {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(Unfreeze fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IViewObject2Vtbl.Unfreeze_UP$MH, fi, IViewObject2Vtbl.Unfreeze$FUNC, scope);
        }
        static Unfreeze ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)IViewObject2Vtbl.Unfreeze_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Unfreeze$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Unfreeze"));
    public static VarHandle Unfreeze$VH() {
        return IViewObject2Vtbl.Unfreeze$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Unfreeze)(IViewObject2*,DWORD);
     * }
     */
    public static MemorySegment Unfreeze$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IViewObject2Vtbl.Unfreeze$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Unfreeze)(IViewObject2*,DWORD);
     * }
     */
    public static void Unfreeze$set(MemorySegment seg, MemorySegment x) {
        IViewObject2Vtbl.Unfreeze$VH.set(seg, x);
    }
    public static MemorySegment Unfreeze$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IViewObject2Vtbl.Unfreeze$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Unfreeze$set(MemorySegment seg, long index, MemorySegment x) {
        IViewObject2Vtbl.Unfreeze$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Unfreeze Unfreeze(MemorySegment segment, SegmentScope scope) {
        return Unfreeze.ofAddress(Unfreeze$get(segment), scope);
    }
    static final FunctionDescriptor SetAdvise$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor SetAdvise_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetAdvise_UP$MH = RuntimeHelper.upcallHandle(SetAdvise.class, "apply", IViewObject2Vtbl.SetAdvise_UP$FUNC);
    static final FunctionDescriptor SetAdvise_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetAdvise_DOWN$MH = RuntimeHelper.downcallHandle(
        IViewObject2Vtbl.SetAdvise_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetAdvise)(IViewObject2*,DWORD,DWORD,IAdviseSink*);
     * }
     */
    public interface SetAdvise {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(SetAdvise fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IViewObject2Vtbl.SetAdvise_UP$MH, fi, IViewObject2Vtbl.SetAdvise$FUNC, scope);
        }
        static SetAdvise ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)IViewObject2Vtbl.SetAdvise_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetAdvise$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetAdvise"));
    public static VarHandle SetAdvise$VH() {
        return IViewObject2Vtbl.SetAdvise$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetAdvise)(IViewObject2*,DWORD,DWORD,IAdviseSink*);
     * }
     */
    public static MemorySegment SetAdvise$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IViewObject2Vtbl.SetAdvise$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetAdvise)(IViewObject2*,DWORD,DWORD,IAdviseSink*);
     * }
     */
    public static void SetAdvise$set(MemorySegment seg, MemorySegment x) {
        IViewObject2Vtbl.SetAdvise$VH.set(seg, x);
    }
    public static MemorySegment SetAdvise$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IViewObject2Vtbl.SetAdvise$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetAdvise$set(MemorySegment seg, long index, MemorySegment x) {
        IViewObject2Vtbl.SetAdvise$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetAdvise SetAdvise(MemorySegment segment, SegmentScope scope) {
        return SetAdvise.ofAddress(SetAdvise$get(segment), scope);
    }
    static final FunctionDescriptor GetAdvise$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetAdvise_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetAdvise_UP$MH = RuntimeHelper.upcallHandle(GetAdvise.class, "apply", IViewObject2Vtbl.GetAdvise_UP$FUNC);
    static final FunctionDescriptor GetAdvise_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetAdvise_DOWN$MH = RuntimeHelper.downcallHandle(
        IViewObject2Vtbl.GetAdvise_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetAdvise)(IViewObject2*,DWORD*,DWORD*,IAdviseSink**);
     * }
     */
    public interface GetAdvise {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(GetAdvise fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IViewObject2Vtbl.GetAdvise_UP$MH, fi, IViewObject2Vtbl.GetAdvise$FUNC, scope);
        }
        static GetAdvise ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)IViewObject2Vtbl.GetAdvise_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetAdvise$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetAdvise"));
    public static VarHandle GetAdvise$VH() {
        return IViewObject2Vtbl.GetAdvise$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetAdvise)(IViewObject2*,DWORD*,DWORD*,IAdviseSink**);
     * }
     */
    public static MemorySegment GetAdvise$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IViewObject2Vtbl.GetAdvise$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetAdvise)(IViewObject2*,DWORD*,DWORD*,IAdviseSink**);
     * }
     */
    public static void GetAdvise$set(MemorySegment seg, MemorySegment x) {
        IViewObject2Vtbl.GetAdvise$VH.set(seg, x);
    }
    public static MemorySegment GetAdvise$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IViewObject2Vtbl.GetAdvise$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetAdvise$set(MemorySegment seg, long index, MemorySegment x) {
        IViewObject2Vtbl.GetAdvise$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetAdvise GetAdvise(MemorySegment segment, SegmentScope scope) {
        return GetAdvise.ofAddress(GetAdvise$get(segment), scope);
    }
    static final FunctionDescriptor GetExtent$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetExtent_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetExtent_UP$MH = RuntimeHelper.upcallHandle(GetExtent.class, "apply", IViewObject2Vtbl.GetExtent_UP$FUNC);
    static final FunctionDescriptor GetExtent_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetExtent_DOWN$MH = RuntimeHelper.downcallHandle(
        IViewObject2Vtbl.GetExtent_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetExtent)(IViewObject2*,DWORD,LONG,DVTARGETDEVICE*,LPSIZEL);
     * }
     */
    public interface GetExtent {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(GetExtent fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IViewObject2Vtbl.GetExtent_UP$MH, fi, IViewObject2Vtbl.GetExtent$FUNC, scope);
        }
        static GetExtent ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (int)IViewObject2Vtbl.GetExtent_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetExtent$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetExtent"));
    public static VarHandle GetExtent$VH() {
        return IViewObject2Vtbl.GetExtent$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetExtent)(IViewObject2*,DWORD,LONG,DVTARGETDEVICE*,LPSIZEL);
     * }
     */
    public static MemorySegment GetExtent$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IViewObject2Vtbl.GetExtent$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetExtent)(IViewObject2*,DWORD,LONG,DVTARGETDEVICE*,LPSIZEL);
     * }
     */
    public static void GetExtent$set(MemorySegment seg, MemorySegment x) {
        IViewObject2Vtbl.GetExtent$VH.set(seg, x);
    }
    public static MemorySegment GetExtent$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IViewObject2Vtbl.GetExtent$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetExtent$set(MemorySegment seg, long index, MemorySegment x) {
        IViewObject2Vtbl.GetExtent$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetExtent GetExtent(MemorySegment segment, SegmentScope scope) {
        return GetExtent.ofAddress(GetExtent$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


