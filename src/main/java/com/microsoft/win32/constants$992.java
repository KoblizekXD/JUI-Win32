// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
final class constants$992 {

    // Suppresses default constructor, ensuring non-instantiability.
    private constants$992() {}
    static final FunctionDescriptor CoWaitForMultipleObjects$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle CoWaitForMultipleObjects$MH = RuntimeHelper.downcallHandle(
        "CoWaitForMultipleObjects",
        constants$992.CoWaitForMultipleObjects$FUNC
    );
    static final FunctionDescriptor CoGetTreatAsClass$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle CoGetTreatAsClass$MH = RuntimeHelper.downcallHandle(
        "CoGetTreatAsClass",
        constants$992.CoGetTreatAsClass$FUNC
    );
    static final FunctionDescriptor CoInvalidateRemoteMachineBindings$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle CoInvalidateRemoteMachineBindings$MH = RuntimeHelper.downcallHandle(
        "CoInvalidateRemoteMachineBindings",
        constants$992.CoInvalidateRemoteMachineBindings$FUNC
    );
    static final FunctionDescriptor RoGetAgileReference$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle RoGetAgileReference$MH = RuntimeHelper.downcallHandle(
        "RoGetAgileReference",
        constants$992.RoGetAgileReference$FUNC
    );
    static final FunctionDescriptor LPFNGETCLASSOBJECT$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor LPFNGETCLASSOBJECT_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle LPFNGETCLASSOBJECT_UP$MH = RuntimeHelper.upcallHandle(LPFNGETCLASSOBJECT.class, "apply", constants$992.LPFNGETCLASSOBJECT_UP$FUNC);
    static final FunctionDescriptor LPFNGETCLASSOBJECT_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle LPFNGETCLASSOBJECT_DOWN$MH = RuntimeHelper.downcallHandle(
        constants$992.LPFNGETCLASSOBJECT_DOWN$FUNC
    );
}


