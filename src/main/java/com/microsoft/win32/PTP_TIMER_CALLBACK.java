// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * void (*PTP_TIMER_CALLBACK)(struct _TP_CALLBACK_INSTANCE* Instance,void* Context,struct _TP_TIMER* Timer);
 * }
 */
public interface PTP_TIMER_CALLBACK {

    void apply(java.lang.foreign.MemorySegment pszObjectOid, java.lang.foreign.MemorySegment pObject, java.lang.foreign.MemorySegment pvFreeContext);
    static MemorySegment allocate(PTP_TIMER_CALLBACK fi, SegmentScope scope) {
        return RuntimeHelper.upcallStub(constants$109.PTP_TIMER_CALLBACK_UP$MH, fi, constants$109.PTP_TIMER_CALLBACK$FUNC, scope);
    }
    static PTP_TIMER_CALLBACK ofAddress(MemorySegment addr, SegmentScope scope) {
        MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
        return (java.lang.foreign.MemorySegment _pszObjectOid, java.lang.foreign.MemorySegment _pObject, java.lang.foreign.MemorySegment _pvFreeContext) -> {
            try {
                constants$109.PTP_TIMER_CALLBACK_DOWN$MH.invokeExact(symbol, _pszObjectOid, _pObject, _pvFreeContext);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


