// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * void (*PIO_IRP_EXT_PROCESS_TRACKED_OFFSET_CALLBACK)(struct _IO_IRP_EXT_TRACK_OFFSET_HEADER* SourceContext,struct _IO_IRP_EXT_TRACK_OFFSET_HEADER* TargetContext,long long RelativeOffset);
 * }
 */
public interface PIO_IRP_EXT_PROCESS_TRACKED_OFFSET_CALLBACK {

    void apply(java.lang.foreign.MemorySegment SourceContext, java.lang.foreign.MemorySegment TargetContext, long RelativeOffset);
    static MemorySegment allocate(PIO_IRP_EXT_PROCESS_TRACKED_OFFSET_CALLBACK fi, SegmentScope scope) {
        return RuntimeHelper.upcallStub(constants$857.PIO_IRP_EXT_PROCESS_TRACKED_OFFSET_CALLBACK_UP$MH, fi, constants$857.PIO_IRP_EXT_PROCESS_TRACKED_OFFSET_CALLBACK$FUNC, scope);
    }
    static PIO_IRP_EXT_PROCESS_TRACKED_OFFSET_CALLBACK ofAddress(MemorySegment addr, SegmentScope scope) {
        MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
        return (java.lang.foreign.MemorySegment _SourceContext, java.lang.foreign.MemorySegment _TargetContext, long _RelativeOffset) -> {
            try {
                constants$858.PIO_IRP_EXT_PROCESS_TRACKED_OFFSET_CALLBACK_DOWN$MH.invokeExact(symbol, _SourceContext, _TargetContext, _RelativeOffset);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


