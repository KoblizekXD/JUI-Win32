// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
final class constants$64 {

    // Suppresses default constructor, ensuring non-instantiability.
    private constants$64() {}
    static final StructLayout GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("Data1"),
        Constants$root.C_SHORT$LAYOUT.withName("Data2"),
        Constants$root.C_SHORT$LAYOUT.withName("Data3"),
        MemoryLayout.sequenceLayout(8, Constants$root.C_CHAR$LAYOUT).withName("Data4")
    ).withName("_GUID");
    static final MemorySegment GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP$SEGMENT = RuntimeHelper.lookupGlobalVariable("GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP", constants$64.GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP$LAYOUT);
    static final StructLayout GUID_NON_ADAPTIVE_INPUT_TIMEOUT$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("Data1"),
        Constants$root.C_SHORT$LAYOUT.withName("Data2"),
        Constants$root.C_SHORT$LAYOUT.withName("Data3"),
        MemoryLayout.sequenceLayout(8, Constants$root.C_CHAR$LAYOUT).withName("Data4")
    ).withName("_GUID");
    static final MemorySegment GUID_NON_ADAPTIVE_INPUT_TIMEOUT$SEGMENT = RuntimeHelper.lookupGlobalVariable("GUID_NON_ADAPTIVE_INPUT_TIMEOUT", constants$64.GUID_NON_ADAPTIVE_INPUT_TIMEOUT$LAYOUT);
    static final StructLayout GUID_ADAPTIVE_INPUT_CONTROLLER_STATE$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("Data1"),
        Constants$root.C_SHORT$LAYOUT.withName("Data2"),
        Constants$root.C_SHORT$LAYOUT.withName("Data3"),
        MemoryLayout.sequenceLayout(8, Constants$root.C_CHAR$LAYOUT).withName("Data4")
    ).withName("_GUID");
    static final MemorySegment GUID_ADAPTIVE_INPUT_CONTROLLER_STATE$SEGMENT = RuntimeHelper.lookupGlobalVariable("GUID_ADAPTIVE_INPUT_CONTROLLER_STATE", constants$64.GUID_ADAPTIVE_INPUT_CONTROLLER_STATE$LAYOUT);
    static final StructLayout GUID_DISK_SUBGROUP$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("Data1"),
        Constants$root.C_SHORT$LAYOUT.withName("Data2"),
        Constants$root.C_SHORT$LAYOUT.withName("Data3"),
        MemoryLayout.sequenceLayout(8, Constants$root.C_CHAR$LAYOUT).withName("Data4")
    ).withName("_GUID");
    static final MemorySegment GUID_DISK_SUBGROUP$SEGMENT = RuntimeHelper.lookupGlobalVariable("GUID_DISK_SUBGROUP", constants$64.GUID_DISK_SUBGROUP$LAYOUT);
    static final StructLayout GUID_DISK_MAX_POWER$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("Data1"),
        Constants$root.C_SHORT$LAYOUT.withName("Data2"),
        Constants$root.C_SHORT$LAYOUT.withName("Data3"),
        MemoryLayout.sequenceLayout(8, Constants$root.C_CHAR$LAYOUT).withName("Data4")
    ).withName("_GUID");
    static final MemorySegment GUID_DISK_MAX_POWER$SEGMENT = RuntimeHelper.lookupGlobalVariable("GUID_DISK_MAX_POWER", constants$64.GUID_DISK_MAX_POWER$LAYOUT);
    static final StructLayout GUID_DISK_POWERDOWN_TIMEOUT$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("Data1"),
        Constants$root.C_SHORT$LAYOUT.withName("Data2"),
        Constants$root.C_SHORT$LAYOUT.withName("Data3"),
        MemoryLayout.sequenceLayout(8, Constants$root.C_CHAR$LAYOUT).withName("Data4")
    ).withName("_GUID");
    static final MemorySegment GUID_DISK_POWERDOWN_TIMEOUT$SEGMENT = RuntimeHelper.lookupGlobalVariable("GUID_DISK_POWERDOWN_TIMEOUT", constants$64.GUID_DISK_POWERDOWN_TIMEOUT$LAYOUT);
}


