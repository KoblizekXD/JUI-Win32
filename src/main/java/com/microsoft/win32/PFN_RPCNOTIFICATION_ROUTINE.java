// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * void (*PFN_RPCNOTIFICATION_ROUTINE)(struct _RPC_ASYNC_STATE*,void*,enum _RPC_ASYNC_EVENT);
 * }
 */
public interface PFN_RPCNOTIFICATION_ROUTINE {

    void apply(java.lang.foreign.MemorySegment pAsync, java.lang.foreign.MemorySegment Context, int Event);
    static MemorySegment allocate(PFN_RPCNOTIFICATION_ROUTINE fi, SegmentScope scope) {
        return RuntimeHelper.upcallStub(constants$690.PFN_RPCNOTIFICATION_ROUTINE_UP$MH, fi, constants$690.PFN_RPCNOTIFICATION_ROUTINE$FUNC, scope);
    }
    static PFN_RPCNOTIFICATION_ROUTINE ofAddress(MemorySegment addr, SegmentScope scope) {
        MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
        return (java.lang.foreign.MemorySegment _pAsync, java.lang.foreign.MemorySegment _Context, int _Event) -> {
            try {
                constants$690.PFN_RPCNOTIFICATION_ROUTINE_DOWN$MH.invokeExact(symbol, _pAsync, _Context, _Event);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


