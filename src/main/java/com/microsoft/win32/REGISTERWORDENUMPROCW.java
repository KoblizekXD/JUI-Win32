// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * int (*REGISTERWORDENUMPROCW)(unsigned short* lpszReading,unsigned long,unsigned short* lpszString,void*);
 * }
 */
public interface REGISTERWORDENUMPROCW {

    int apply(java.lang.foreign.MemorySegment lpszReading, int _x1, java.lang.foreign.MemorySegment lpszString, java.lang.foreign.MemorySegment _x3);
    static MemorySegment allocate(REGISTERWORDENUMPROCW fi, SegmentScope scope) {
        return RuntimeHelper.upcallStub(constants$1272.REGISTERWORDENUMPROCW_UP$MH, fi, constants$1272.REGISTERWORDENUMPROCW$FUNC, scope);
    }
    static REGISTERWORDENUMPROCW ofAddress(MemorySegment addr, SegmentScope scope) {
        MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
        return (java.lang.foreign.MemorySegment _lpszReading, int __x1, java.lang.foreign.MemorySegment _lpszString, java.lang.foreign.MemorySegment __x3) -> {
            try {
                return (int)constants$1273.REGISTERWORDENUMPROCW_DOWN$MH.invokeExact(symbol, _lpszReading, __x1, _lpszString, __x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


