// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct ISoftDistExtVtbl {
 *     HRESULT (*QueryInterface)(ISoftDistExt*,const IID*,void**);
 *     ULONG (*AddRef)(ISoftDistExt*);
 *     ULONG (*Release)(ISoftDistExt*);
 *     HRESULT (*ProcessSoftDist)(ISoftDistExt*,LPCWSTR,IXMLElement*,LPSOFTDISTINFO);
 *     HRESULT (*GetFirstCodeBase)(ISoftDistExt*,LPWSTR*,LPDWORD);
 *     HRESULT (*GetNextCodeBase)(ISoftDistExt*,LPWSTR*,LPDWORD);
 *     HRESULT (*AsyncInstallDistributionUnit)(ISoftDistExt*,IBindCtx*,LPVOID,DWORD,LPCODEBASEHOLD);
 * };
 * }
 */
public class ISoftDistExtVtbl {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("ProcessSoftDist"),
        Constants$root.C_POINTER$LAYOUT.withName("GetFirstCodeBase"),
        Constants$root.C_POINTER$LAYOUT.withName("GetNextCodeBase"),
        Constants$root.C_POINTER$LAYOUT.withName("AsyncInstallDistributionUnit")
    ).withName("ISoftDistExtVtbl");
    public static MemoryLayout $LAYOUT() {
        return ISoftDistExtVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor QueryInterface_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_UP$MH = RuntimeHelper.upcallHandle(QueryInterface.class, "apply", ISoftDistExtVtbl.QueryInterface_UP$FUNC);
    static final FunctionDescriptor QueryInterface_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_DOWN$MH = RuntimeHelper.downcallHandle(
        ISoftDistExtVtbl.QueryInterface_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(ISoftDistExt*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ISoftDistExtVtbl.QueryInterface_UP$MH, fi, ISoftDistExtVtbl.QueryInterface$FUNC, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)ISoftDistExtVtbl.QueryInterface_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return ISoftDistExtVtbl.QueryInterface$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(ISoftDistExt*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ISoftDistExtVtbl.QueryInterface$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(ISoftDistExt*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        ISoftDistExtVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ISoftDistExtVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        ISoftDistExtVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, SegmentScope scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor AddRef_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_UP$MH = RuntimeHelper.upcallHandle(AddRef.class, "apply", ISoftDistExtVtbl.AddRef_UP$FUNC);
    static final FunctionDescriptor AddRef_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_DOWN$MH = RuntimeHelper.downcallHandle(
        ISoftDistExtVtbl.AddRef_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*AddRef)(ISoftDistExt*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ISoftDistExtVtbl.AddRef_UP$MH, fi, ISoftDistExtVtbl.AddRef$FUNC, scope);
        }
        static AddRef ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)ISoftDistExtVtbl.AddRef_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return ISoftDistExtVtbl.AddRef$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(ISoftDistExt*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ISoftDistExtVtbl.AddRef$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(ISoftDistExt*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        ISoftDistExtVtbl.AddRef$VH.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ISoftDistExtVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        ISoftDistExtVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, SegmentScope scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Release_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_UP$MH = RuntimeHelper.upcallHandle(Release.class, "apply", ISoftDistExtVtbl.Release_UP$FUNC);
    static final FunctionDescriptor Release_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_DOWN$MH = RuntimeHelper.downcallHandle(
        ISoftDistExtVtbl.Release_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*Release)(ISoftDistExt*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ISoftDistExtVtbl.Release_UP$MH, fi, ISoftDistExtVtbl.Release$FUNC, scope);
        }
        static Release ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)ISoftDistExtVtbl.Release_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return ISoftDistExtVtbl.Release$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(ISoftDistExt*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ISoftDistExtVtbl.Release$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(ISoftDistExt*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        ISoftDistExtVtbl.Release$VH.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ISoftDistExtVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        ISoftDistExtVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, SegmentScope scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    static final FunctionDescriptor ProcessSoftDist$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor ProcessSoftDist_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ProcessSoftDist_UP$MH = RuntimeHelper.upcallHandle(ProcessSoftDist.class, "apply", ISoftDistExtVtbl.ProcessSoftDist_UP$FUNC);
    static final FunctionDescriptor ProcessSoftDist_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ProcessSoftDist_DOWN$MH = RuntimeHelper.downcallHandle(
        ISoftDistExtVtbl.ProcessSoftDist_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*ProcessSoftDist)(ISoftDistExt*,LPCWSTR,IXMLElement*,LPSOFTDISTINFO);
     * }
     */
    public interface ProcessSoftDist {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(ProcessSoftDist fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ISoftDistExtVtbl.ProcessSoftDist_UP$MH, fi, ISoftDistExtVtbl.ProcessSoftDist$FUNC, scope);
        }
        static ProcessSoftDist ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)ISoftDistExtVtbl.ProcessSoftDist_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ProcessSoftDist$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ProcessSoftDist"));
    public static VarHandle ProcessSoftDist$VH() {
        return ISoftDistExtVtbl.ProcessSoftDist$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*ProcessSoftDist)(ISoftDistExt*,LPCWSTR,IXMLElement*,LPSOFTDISTINFO);
     * }
     */
    public static MemorySegment ProcessSoftDist$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ISoftDistExtVtbl.ProcessSoftDist$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*ProcessSoftDist)(ISoftDistExt*,LPCWSTR,IXMLElement*,LPSOFTDISTINFO);
     * }
     */
    public static void ProcessSoftDist$set(MemorySegment seg, MemorySegment x) {
        ISoftDistExtVtbl.ProcessSoftDist$VH.set(seg, x);
    }
    public static MemorySegment ProcessSoftDist$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ISoftDistExtVtbl.ProcessSoftDist$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ProcessSoftDist$set(MemorySegment seg, long index, MemorySegment x) {
        ISoftDistExtVtbl.ProcessSoftDist$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ProcessSoftDist ProcessSoftDist(MemorySegment segment, SegmentScope scope) {
        return ProcessSoftDist.ofAddress(ProcessSoftDist$get(segment), scope);
    }
    static final FunctionDescriptor GetFirstCodeBase$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetFirstCodeBase_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetFirstCodeBase_UP$MH = RuntimeHelper.upcallHandle(GetFirstCodeBase.class, "apply", ISoftDistExtVtbl.GetFirstCodeBase_UP$FUNC);
    static final FunctionDescriptor GetFirstCodeBase_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetFirstCodeBase_DOWN$MH = RuntimeHelper.downcallHandle(
        ISoftDistExtVtbl.GetFirstCodeBase_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetFirstCodeBase)(ISoftDistExt*,LPWSTR*,LPDWORD);
     * }
     */
    public interface GetFirstCodeBase {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetFirstCodeBase fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ISoftDistExtVtbl.GetFirstCodeBase_UP$MH, fi, ISoftDistExtVtbl.GetFirstCodeBase$FUNC, scope);
        }
        static GetFirstCodeBase ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)ISoftDistExtVtbl.GetFirstCodeBase_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetFirstCodeBase$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetFirstCodeBase"));
    public static VarHandle GetFirstCodeBase$VH() {
        return ISoftDistExtVtbl.GetFirstCodeBase$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetFirstCodeBase)(ISoftDistExt*,LPWSTR*,LPDWORD);
     * }
     */
    public static MemorySegment GetFirstCodeBase$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ISoftDistExtVtbl.GetFirstCodeBase$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetFirstCodeBase)(ISoftDistExt*,LPWSTR*,LPDWORD);
     * }
     */
    public static void GetFirstCodeBase$set(MemorySegment seg, MemorySegment x) {
        ISoftDistExtVtbl.GetFirstCodeBase$VH.set(seg, x);
    }
    public static MemorySegment GetFirstCodeBase$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ISoftDistExtVtbl.GetFirstCodeBase$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetFirstCodeBase$set(MemorySegment seg, long index, MemorySegment x) {
        ISoftDistExtVtbl.GetFirstCodeBase$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetFirstCodeBase GetFirstCodeBase(MemorySegment segment, SegmentScope scope) {
        return GetFirstCodeBase.ofAddress(GetFirstCodeBase$get(segment), scope);
    }
    static final FunctionDescriptor GetNextCodeBase$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetNextCodeBase_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetNextCodeBase_UP$MH = RuntimeHelper.upcallHandle(GetNextCodeBase.class, "apply", ISoftDistExtVtbl.GetNextCodeBase_UP$FUNC);
    static final FunctionDescriptor GetNextCodeBase_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetNextCodeBase_DOWN$MH = RuntimeHelper.downcallHandle(
        ISoftDistExtVtbl.GetNextCodeBase_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetNextCodeBase)(ISoftDistExt*,LPWSTR*,LPDWORD);
     * }
     */
    public interface GetNextCodeBase {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetNextCodeBase fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ISoftDistExtVtbl.GetNextCodeBase_UP$MH, fi, ISoftDistExtVtbl.GetNextCodeBase$FUNC, scope);
        }
        static GetNextCodeBase ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)ISoftDistExtVtbl.GetNextCodeBase_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetNextCodeBase$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetNextCodeBase"));
    public static VarHandle GetNextCodeBase$VH() {
        return ISoftDistExtVtbl.GetNextCodeBase$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetNextCodeBase)(ISoftDistExt*,LPWSTR*,LPDWORD);
     * }
     */
    public static MemorySegment GetNextCodeBase$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ISoftDistExtVtbl.GetNextCodeBase$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetNextCodeBase)(ISoftDistExt*,LPWSTR*,LPDWORD);
     * }
     */
    public static void GetNextCodeBase$set(MemorySegment seg, MemorySegment x) {
        ISoftDistExtVtbl.GetNextCodeBase$VH.set(seg, x);
    }
    public static MemorySegment GetNextCodeBase$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ISoftDistExtVtbl.GetNextCodeBase$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetNextCodeBase$set(MemorySegment seg, long index, MemorySegment x) {
        ISoftDistExtVtbl.GetNextCodeBase$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetNextCodeBase GetNextCodeBase(MemorySegment segment, SegmentScope scope) {
        return GetNextCodeBase.ofAddress(GetNextCodeBase$get(segment), scope);
    }
    static final FunctionDescriptor AsyncInstallDistributionUnit$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor AsyncInstallDistributionUnit_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AsyncInstallDistributionUnit_UP$MH = RuntimeHelper.upcallHandle(AsyncInstallDistributionUnit.class, "apply", ISoftDistExtVtbl.AsyncInstallDistributionUnit_UP$FUNC);
    static final FunctionDescriptor AsyncInstallDistributionUnit_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AsyncInstallDistributionUnit_DOWN$MH = RuntimeHelper.downcallHandle(
        ISoftDistExtVtbl.AsyncInstallDistributionUnit_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*AsyncInstallDistributionUnit)(ISoftDistExt*,IBindCtx*,LPVOID,DWORD,LPCODEBASEHOLD);
     * }
     */
    public interface AsyncInstallDistributionUnit {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(AsyncInstallDistributionUnit fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ISoftDistExtVtbl.AsyncInstallDistributionUnit_UP$MH, fi, ISoftDistExtVtbl.AsyncInstallDistributionUnit$FUNC, scope);
        }
        static AsyncInstallDistributionUnit ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (int)ISoftDistExtVtbl.AsyncInstallDistributionUnit_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AsyncInstallDistributionUnit$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AsyncInstallDistributionUnit"));
    public static VarHandle AsyncInstallDistributionUnit$VH() {
        return ISoftDistExtVtbl.AsyncInstallDistributionUnit$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*AsyncInstallDistributionUnit)(ISoftDistExt*,IBindCtx*,LPVOID,DWORD,LPCODEBASEHOLD);
     * }
     */
    public static MemorySegment AsyncInstallDistributionUnit$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ISoftDistExtVtbl.AsyncInstallDistributionUnit$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*AsyncInstallDistributionUnit)(ISoftDistExt*,IBindCtx*,LPVOID,DWORD,LPCODEBASEHOLD);
     * }
     */
    public static void AsyncInstallDistributionUnit$set(MemorySegment seg, MemorySegment x) {
        ISoftDistExtVtbl.AsyncInstallDistributionUnit$VH.set(seg, x);
    }
    public static MemorySegment AsyncInstallDistributionUnit$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ISoftDistExtVtbl.AsyncInstallDistributionUnit$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AsyncInstallDistributionUnit$set(MemorySegment seg, long index, MemorySegment x) {
        ISoftDistExtVtbl.AsyncInstallDistributionUnit$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AsyncInstallDistributionUnit AsyncInstallDistributionUnit(MemorySegment segment, SegmentScope scope) {
        return AsyncInstallDistributionUnit.ofAddress(AsyncInstallDistributionUnit$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


