// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct NCryptKeyName {
 *     LPWSTR pszName;
 *     LPWSTR pszAlgid;
 *     DWORD dwLegacyKeySpec;
 *     DWORD dwFlags;
 * };
 * }
 */
public class NCryptKeyName {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("pszName"),
        Constants$root.C_POINTER$LAYOUT.withName("pszAlgid"),
        Constants$root.C_LONG$LAYOUT.withName("dwLegacyKeySpec"),
        Constants$root.C_LONG$LAYOUT.withName("dwFlags")
    ).withName("NCryptKeyName");
    public static MemoryLayout $LAYOUT() {
        return NCryptKeyName.$struct$LAYOUT;
    }
    static final VarHandle pszName$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pszName"));
    public static VarHandle pszName$VH() {
        return NCryptKeyName.pszName$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPWSTR pszName;
     * }
     */
    public static MemorySegment pszName$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)NCryptKeyName.pszName$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPWSTR pszName;
     * }
     */
    public static void pszName$set(MemorySegment seg, MemorySegment x) {
        NCryptKeyName.pszName$VH.set(seg, x);
    }
    public static MemorySegment pszName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)NCryptKeyName.pszName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pszName$set(MemorySegment seg, long index, MemorySegment x) {
        NCryptKeyName.pszName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pszAlgid$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pszAlgid"));
    public static VarHandle pszAlgid$VH() {
        return NCryptKeyName.pszAlgid$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPWSTR pszAlgid;
     * }
     */
    public static MemorySegment pszAlgid$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)NCryptKeyName.pszAlgid$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPWSTR pszAlgid;
     * }
     */
    public static void pszAlgid$set(MemorySegment seg, MemorySegment x) {
        NCryptKeyName.pszAlgid$VH.set(seg, x);
    }
    public static MemorySegment pszAlgid$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)NCryptKeyName.pszAlgid$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pszAlgid$set(MemorySegment seg, long index, MemorySegment x) {
        NCryptKeyName.pszAlgid$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwLegacyKeySpec$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwLegacyKeySpec"));
    public static VarHandle dwLegacyKeySpec$VH() {
        return NCryptKeyName.dwLegacyKeySpec$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwLegacyKeySpec;
     * }
     */
    public static int dwLegacyKeySpec$get(MemorySegment seg) {
        return (int)NCryptKeyName.dwLegacyKeySpec$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwLegacyKeySpec;
     * }
     */
    public static void dwLegacyKeySpec$set(MemorySegment seg, int x) {
        NCryptKeyName.dwLegacyKeySpec$VH.set(seg, x);
    }
    public static int dwLegacyKeySpec$get(MemorySegment seg, long index) {
        return (int)NCryptKeyName.dwLegacyKeySpec$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwLegacyKeySpec$set(MemorySegment seg, long index, int x) {
        NCryptKeyName.dwLegacyKeySpec$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwFlags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwFlags"));
    public static VarHandle dwFlags$VH() {
        return NCryptKeyName.dwFlags$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwFlags;
     * }
     */
    public static int dwFlags$get(MemorySegment seg) {
        return (int)NCryptKeyName.dwFlags$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwFlags;
     * }
     */
    public static void dwFlags$set(MemorySegment seg, int x) {
        NCryptKeyName.dwFlags$VH.set(seg, x);
    }
    public static int dwFlags$get(MemorySegment seg, long index) {
        return (int)NCryptKeyName.dwFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwFlags$set(MemorySegment seg, long index, int x) {
        NCryptKeyName.dwFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


