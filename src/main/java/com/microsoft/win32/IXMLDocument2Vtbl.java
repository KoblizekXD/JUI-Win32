// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IXMLDocument2Vtbl {
 *     HRESULT (*QueryInterface)(IXMLDocument2*,const IID*,void**);
 *     ULONG (*AddRef)(IXMLDocument2*);
 *     ULONG (*Release)(IXMLDocument2*);
 *     HRESULT (*GetTypeInfoCount)(IXMLDocument2*,UINT*);
 *     HRESULT (*GetTypeInfo)(IXMLDocument2*,UINT,LCID,ITypeInfo**);
 *     HRESULT (*GetIDsOfNames)(IXMLDocument2*,const IID*,LPOLESTR*,UINT,LCID,DISPID*);
 *     HRESULT (*Invoke)(IXMLDocument2*,DISPID,const IID*,LCID,WORD,DISPPARAMS*,VARIANT*,EXCEPINFO*,UINT*);
 *     HRESULT (*get_root)(IXMLDocument2*,IXMLElement2**);
 *     HRESULT (*get_fileSize)(IXMLDocument2*,BSTR*);
 *     HRESULT (*get_fileModifiedDate)(IXMLDocument2*,BSTR*);
 *     HRESULT (*get_fileUpdatedDate)(IXMLDocument2*,BSTR*);
 *     HRESULT (*get_URL)(IXMLDocument2*,BSTR*);
 *     HRESULT (*put_URL)(IXMLDocument2*,BSTR);
 *     HRESULT (*get_mimeType)(IXMLDocument2*,BSTR*);
 *     HRESULT (*get_readyState)(IXMLDocument2*,long*);
 *     HRESULT (*get_charset)(IXMLDocument2*,BSTR*);
 *     HRESULT (*put_charset)(IXMLDocument2*,BSTR);
 *     HRESULT (*get_version)(IXMLDocument2*,BSTR*);
 *     HRESULT (*get_doctype)(IXMLDocument2*,BSTR*);
 *     HRESULT (*get_dtdURL)(IXMLDocument2*,BSTR*);
 *     HRESULT (*createElement)(IXMLDocument2*,VARIANT,VARIANT,IXMLElement2**);
 *     HRESULT (*get_async)(IXMLDocument2*,VARIANT_BOOL*);
 *     HRESULT (*put_async)(IXMLDocument2*,VARIANT_BOOL);
 * };
 * }
 */
public class IXMLDocument2Vtbl {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("GetTypeInfoCount"),
        Constants$root.C_POINTER$LAYOUT.withName("GetTypeInfo"),
        Constants$root.C_POINTER$LAYOUT.withName("GetIDsOfNames"),
        Constants$root.C_POINTER$LAYOUT.withName("Invoke"),
        Constants$root.C_POINTER$LAYOUT.withName("get_root"),
        Constants$root.C_POINTER$LAYOUT.withName("get_fileSize"),
        Constants$root.C_POINTER$LAYOUT.withName("get_fileModifiedDate"),
        Constants$root.C_POINTER$LAYOUT.withName("get_fileUpdatedDate"),
        Constants$root.C_POINTER$LAYOUT.withName("get_URL"),
        Constants$root.C_POINTER$LAYOUT.withName("put_URL"),
        Constants$root.C_POINTER$LAYOUT.withName("get_mimeType"),
        Constants$root.C_POINTER$LAYOUT.withName("get_readyState"),
        Constants$root.C_POINTER$LAYOUT.withName("get_charset"),
        Constants$root.C_POINTER$LAYOUT.withName("put_charset"),
        Constants$root.C_POINTER$LAYOUT.withName("get_version"),
        Constants$root.C_POINTER$LAYOUT.withName("get_doctype"),
        Constants$root.C_POINTER$LAYOUT.withName("get_dtdURL"),
        Constants$root.C_POINTER$LAYOUT.withName("createElement"),
        Constants$root.C_POINTER$LAYOUT.withName("get_async"),
        Constants$root.C_POINTER$LAYOUT.withName("put_async")
    ).withName("IXMLDocument2Vtbl");
    public static MemoryLayout $LAYOUT() {
        return IXMLDocument2Vtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor QueryInterface_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_UP$MH = RuntimeHelper.upcallHandle(QueryInterface.class, "apply", IXMLDocument2Vtbl.QueryInterface_UP$FUNC);
    static final FunctionDescriptor QueryInterface_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDocument2Vtbl.QueryInterface_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(IXMLDocument2*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDocument2Vtbl.QueryInterface_UP$MH, fi, IXMLDocument2Vtbl.QueryInterface$FUNC, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IXMLDocument2Vtbl.QueryInterface_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return IXMLDocument2Vtbl.QueryInterface$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IXMLDocument2*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDocument2Vtbl.QueryInterface$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IXMLDocument2*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        IXMLDocument2Vtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDocument2Vtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDocument2Vtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, SegmentScope scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor AddRef_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_UP$MH = RuntimeHelper.upcallHandle(AddRef.class, "apply", IXMLDocument2Vtbl.AddRef_UP$FUNC);
    static final FunctionDescriptor AddRef_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDocument2Vtbl.AddRef_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*AddRef)(IXMLDocument2*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDocument2Vtbl.AddRef_UP$MH, fi, IXMLDocument2Vtbl.AddRef$FUNC, scope);
        }
        static AddRef ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IXMLDocument2Vtbl.AddRef_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return IXMLDocument2Vtbl.AddRef$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(IXMLDocument2*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDocument2Vtbl.AddRef$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(IXMLDocument2*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        IXMLDocument2Vtbl.AddRef$VH.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDocument2Vtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDocument2Vtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, SegmentScope scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Release_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_UP$MH = RuntimeHelper.upcallHandle(Release.class, "apply", IXMLDocument2Vtbl.Release_UP$FUNC);
    static final FunctionDescriptor Release_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDocument2Vtbl.Release_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*Release)(IXMLDocument2*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDocument2Vtbl.Release_UP$MH, fi, IXMLDocument2Vtbl.Release$FUNC, scope);
        }
        static Release ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IXMLDocument2Vtbl.Release_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return IXMLDocument2Vtbl.Release$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(IXMLDocument2*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDocument2Vtbl.Release$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(IXMLDocument2*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        IXMLDocument2Vtbl.Release$VH.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDocument2Vtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDocument2Vtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, SegmentScope scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    static final FunctionDescriptor GetTypeInfoCount$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetTypeInfoCount_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetTypeInfoCount_UP$MH = RuntimeHelper.upcallHandle(GetTypeInfoCount.class, "apply", IXMLDocument2Vtbl.GetTypeInfoCount_UP$FUNC);
    static final FunctionDescriptor GetTypeInfoCount_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetTypeInfoCount_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDocument2Vtbl.GetTypeInfoCount_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetTypeInfoCount)(IXMLDocument2*,UINT*);
     * }
     */
    public interface GetTypeInfoCount {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetTypeInfoCount fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDocument2Vtbl.GetTypeInfoCount_UP$MH, fi, IXMLDocument2Vtbl.GetTypeInfoCount$FUNC, scope);
        }
        static GetTypeInfoCount ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IXMLDocument2Vtbl.GetTypeInfoCount_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetTypeInfoCount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetTypeInfoCount"));
    public static VarHandle GetTypeInfoCount$VH() {
        return IXMLDocument2Vtbl.GetTypeInfoCount$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetTypeInfoCount)(IXMLDocument2*,UINT*);
     * }
     */
    public static MemorySegment GetTypeInfoCount$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDocument2Vtbl.GetTypeInfoCount$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetTypeInfoCount)(IXMLDocument2*,UINT*);
     * }
     */
    public static void GetTypeInfoCount$set(MemorySegment seg, MemorySegment x) {
        IXMLDocument2Vtbl.GetTypeInfoCount$VH.set(seg, x);
    }
    public static MemorySegment GetTypeInfoCount$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDocument2Vtbl.GetTypeInfoCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTypeInfoCount$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDocument2Vtbl.GetTypeInfoCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTypeInfoCount GetTypeInfoCount(MemorySegment segment, SegmentScope scope) {
        return GetTypeInfoCount.ofAddress(GetTypeInfoCount$get(segment), scope);
    }
    static final FunctionDescriptor GetTypeInfo$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetTypeInfo_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetTypeInfo_UP$MH = RuntimeHelper.upcallHandle(GetTypeInfo.class, "apply", IXMLDocument2Vtbl.GetTypeInfo_UP$FUNC);
    static final FunctionDescriptor GetTypeInfo_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetTypeInfo_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDocument2Vtbl.GetTypeInfo_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetTypeInfo)(IXMLDocument2*,UINT,LCID,ITypeInfo**);
     * }
     */
    public interface GetTypeInfo {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(GetTypeInfo fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDocument2Vtbl.GetTypeInfo_UP$MH, fi, IXMLDocument2Vtbl.GetTypeInfo$FUNC, scope);
        }
        static GetTypeInfo ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)IXMLDocument2Vtbl.GetTypeInfo_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetTypeInfo$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetTypeInfo"));
    public static VarHandle GetTypeInfo$VH() {
        return IXMLDocument2Vtbl.GetTypeInfo$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetTypeInfo)(IXMLDocument2*,UINT,LCID,ITypeInfo**);
     * }
     */
    public static MemorySegment GetTypeInfo$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDocument2Vtbl.GetTypeInfo$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetTypeInfo)(IXMLDocument2*,UINT,LCID,ITypeInfo**);
     * }
     */
    public static void GetTypeInfo$set(MemorySegment seg, MemorySegment x) {
        IXMLDocument2Vtbl.GetTypeInfo$VH.set(seg, x);
    }
    public static MemorySegment GetTypeInfo$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDocument2Vtbl.GetTypeInfo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTypeInfo$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDocument2Vtbl.GetTypeInfo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTypeInfo GetTypeInfo(MemorySegment segment, SegmentScope scope) {
        return GetTypeInfo.ofAddress(GetTypeInfo$get(segment), scope);
    }
    static final FunctionDescriptor GetIDsOfNames$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetIDsOfNames_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetIDsOfNames_UP$MH = RuntimeHelper.upcallHandle(GetIDsOfNames.class, "apply", IXMLDocument2Vtbl.GetIDsOfNames_UP$FUNC);
    static final FunctionDescriptor GetIDsOfNames_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetIDsOfNames_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDocument2Vtbl.GetIDsOfNames_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetIDsOfNames)(IXMLDocument2*,const IID*,LPOLESTR*,UINT,LCID,DISPID*);
     * }
     */
    public interface GetIDsOfNames {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3, int _x4, java.lang.foreign.MemorySegment _x5);
        static MemorySegment allocate(GetIDsOfNames fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDocument2Vtbl.GetIDsOfNames_UP$MH, fi, IXMLDocument2Vtbl.GetIDsOfNames$FUNC, scope);
        }
        static GetIDsOfNames ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3, int __x4, java.lang.foreign.MemorySegment __x5) -> {
                try {
                    return (int)IXMLDocument2Vtbl.GetIDsOfNames_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetIDsOfNames$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetIDsOfNames"));
    public static VarHandle GetIDsOfNames$VH() {
        return IXMLDocument2Vtbl.GetIDsOfNames$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetIDsOfNames)(IXMLDocument2*,const IID*,LPOLESTR*,UINT,LCID,DISPID*);
     * }
     */
    public static MemorySegment GetIDsOfNames$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDocument2Vtbl.GetIDsOfNames$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetIDsOfNames)(IXMLDocument2*,const IID*,LPOLESTR*,UINT,LCID,DISPID*);
     * }
     */
    public static void GetIDsOfNames$set(MemorySegment seg, MemorySegment x) {
        IXMLDocument2Vtbl.GetIDsOfNames$VH.set(seg, x);
    }
    public static MemorySegment GetIDsOfNames$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDocument2Vtbl.GetIDsOfNames$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetIDsOfNames$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDocument2Vtbl.GetIDsOfNames$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetIDsOfNames GetIDsOfNames(MemorySegment segment, SegmentScope scope) {
        return GetIDsOfNames.ofAddress(GetIDsOfNames$get(segment), scope);
    }
    static final FunctionDescriptor Invoke$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_SHORT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Invoke_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_SHORT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Invoke_UP$MH = RuntimeHelper.upcallHandle(Invoke.class, "apply", IXMLDocument2Vtbl.Invoke_UP$FUNC);
    static final FunctionDescriptor Invoke_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_SHORT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Invoke_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDocument2Vtbl.Invoke_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*Invoke)(IXMLDocument2*,DISPID,const IID*,LCID,WORD,DISPPARAMS*,VARIANT*,EXCEPINFO*,UINT*);
     * }
     */
    public interface Invoke {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, int _x3, short _x4, java.lang.foreign.MemorySegment _x5, java.lang.foreign.MemorySegment _x6, java.lang.foreign.MemorySegment _x7, java.lang.foreign.MemorySegment _x8);
        static MemorySegment allocate(Invoke fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDocument2Vtbl.Invoke_UP$MH, fi, IXMLDocument2Vtbl.Invoke$FUNC, scope);
        }
        static Invoke ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, int __x3, short __x4, java.lang.foreign.MemorySegment __x5, java.lang.foreign.MemorySegment __x6, java.lang.foreign.MemorySegment __x7, java.lang.foreign.MemorySegment __x8) -> {
                try {
                    return (int)IXMLDocument2Vtbl.Invoke_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6, __x7, __x8);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Invoke$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Invoke"));
    public static VarHandle Invoke$VH() {
        return IXMLDocument2Vtbl.Invoke$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Invoke)(IXMLDocument2*,DISPID,const IID*,LCID,WORD,DISPPARAMS*,VARIANT*,EXCEPINFO*,UINT*);
     * }
     */
    public static MemorySegment Invoke$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDocument2Vtbl.Invoke$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Invoke)(IXMLDocument2*,DISPID,const IID*,LCID,WORD,DISPPARAMS*,VARIANT*,EXCEPINFO*,UINT*);
     * }
     */
    public static void Invoke$set(MemorySegment seg, MemorySegment x) {
        IXMLDocument2Vtbl.Invoke$VH.set(seg, x);
    }
    public static MemorySegment Invoke$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDocument2Vtbl.Invoke$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Invoke$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDocument2Vtbl.Invoke$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Invoke Invoke(MemorySegment segment, SegmentScope scope) {
        return Invoke.ofAddress(Invoke$get(segment), scope);
    }
    static final FunctionDescriptor get_root$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_root_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_root_UP$MH = RuntimeHelper.upcallHandle(get_root.class, "apply", IXMLDocument2Vtbl.get_root_UP$FUNC);
    static final FunctionDescriptor get_root_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_root_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDocument2Vtbl.get_root_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*get_root)(IXMLDocument2*,IXMLElement2**);
     * }
     */
    public interface get_root {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_root fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDocument2Vtbl.get_root_UP$MH, fi, IXMLDocument2Vtbl.get_root$FUNC, scope);
        }
        static get_root ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IXMLDocument2Vtbl.get_root_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_root$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_root"));
    public static VarHandle get_root$VH() {
        return IXMLDocument2Vtbl.get_root$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_root)(IXMLDocument2*,IXMLElement2**);
     * }
     */
    public static MemorySegment get_root$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDocument2Vtbl.get_root$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_root)(IXMLDocument2*,IXMLElement2**);
     * }
     */
    public static void get_root$set(MemorySegment seg, MemorySegment x) {
        IXMLDocument2Vtbl.get_root$VH.set(seg, x);
    }
    public static MemorySegment get_root$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDocument2Vtbl.get_root$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_root$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDocument2Vtbl.get_root$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_root get_root(MemorySegment segment, SegmentScope scope) {
        return get_root.ofAddress(get_root$get(segment), scope);
    }
    static final FunctionDescriptor get_fileSize$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_fileSize_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_fileSize_UP$MH = RuntimeHelper.upcallHandle(get_fileSize.class, "apply", IXMLDocument2Vtbl.get_fileSize_UP$FUNC);
    static final FunctionDescriptor get_fileSize_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_fileSize_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDocument2Vtbl.get_fileSize_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*get_fileSize)(IXMLDocument2*,BSTR*);
     * }
     */
    public interface get_fileSize {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_fileSize fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDocument2Vtbl.get_fileSize_UP$MH, fi, IXMLDocument2Vtbl.get_fileSize$FUNC, scope);
        }
        static get_fileSize ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IXMLDocument2Vtbl.get_fileSize_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_fileSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_fileSize"));
    public static VarHandle get_fileSize$VH() {
        return IXMLDocument2Vtbl.get_fileSize$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_fileSize)(IXMLDocument2*,BSTR*);
     * }
     */
    public static MemorySegment get_fileSize$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDocument2Vtbl.get_fileSize$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_fileSize)(IXMLDocument2*,BSTR*);
     * }
     */
    public static void get_fileSize$set(MemorySegment seg, MemorySegment x) {
        IXMLDocument2Vtbl.get_fileSize$VH.set(seg, x);
    }
    public static MemorySegment get_fileSize$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDocument2Vtbl.get_fileSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_fileSize$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDocument2Vtbl.get_fileSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_fileSize get_fileSize(MemorySegment segment, SegmentScope scope) {
        return get_fileSize.ofAddress(get_fileSize$get(segment), scope);
    }
    static final FunctionDescriptor get_fileModifiedDate$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_fileModifiedDate_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_fileModifiedDate_UP$MH = RuntimeHelper.upcallHandle(get_fileModifiedDate.class, "apply", IXMLDocument2Vtbl.get_fileModifiedDate_UP$FUNC);
    static final FunctionDescriptor get_fileModifiedDate_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_fileModifiedDate_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDocument2Vtbl.get_fileModifiedDate_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*get_fileModifiedDate)(IXMLDocument2*,BSTR*);
     * }
     */
    public interface get_fileModifiedDate {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_fileModifiedDate fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDocument2Vtbl.get_fileModifiedDate_UP$MH, fi, IXMLDocument2Vtbl.get_fileModifiedDate$FUNC, scope);
        }
        static get_fileModifiedDate ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IXMLDocument2Vtbl.get_fileModifiedDate_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_fileModifiedDate$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_fileModifiedDate"));
    public static VarHandle get_fileModifiedDate$VH() {
        return IXMLDocument2Vtbl.get_fileModifiedDate$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_fileModifiedDate)(IXMLDocument2*,BSTR*);
     * }
     */
    public static MemorySegment get_fileModifiedDate$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDocument2Vtbl.get_fileModifiedDate$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_fileModifiedDate)(IXMLDocument2*,BSTR*);
     * }
     */
    public static void get_fileModifiedDate$set(MemorySegment seg, MemorySegment x) {
        IXMLDocument2Vtbl.get_fileModifiedDate$VH.set(seg, x);
    }
    public static MemorySegment get_fileModifiedDate$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDocument2Vtbl.get_fileModifiedDate$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_fileModifiedDate$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDocument2Vtbl.get_fileModifiedDate$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_fileModifiedDate get_fileModifiedDate(MemorySegment segment, SegmentScope scope) {
        return get_fileModifiedDate.ofAddress(get_fileModifiedDate$get(segment), scope);
    }
    static final FunctionDescriptor get_fileUpdatedDate$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_fileUpdatedDate_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_fileUpdatedDate_UP$MH = RuntimeHelper.upcallHandle(get_fileUpdatedDate.class, "apply", IXMLDocument2Vtbl.get_fileUpdatedDate_UP$FUNC);
    static final FunctionDescriptor get_fileUpdatedDate_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_fileUpdatedDate_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDocument2Vtbl.get_fileUpdatedDate_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*get_fileUpdatedDate)(IXMLDocument2*,BSTR*);
     * }
     */
    public interface get_fileUpdatedDate {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_fileUpdatedDate fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDocument2Vtbl.get_fileUpdatedDate_UP$MH, fi, IXMLDocument2Vtbl.get_fileUpdatedDate$FUNC, scope);
        }
        static get_fileUpdatedDate ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IXMLDocument2Vtbl.get_fileUpdatedDate_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_fileUpdatedDate$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_fileUpdatedDate"));
    public static VarHandle get_fileUpdatedDate$VH() {
        return IXMLDocument2Vtbl.get_fileUpdatedDate$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_fileUpdatedDate)(IXMLDocument2*,BSTR*);
     * }
     */
    public static MemorySegment get_fileUpdatedDate$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDocument2Vtbl.get_fileUpdatedDate$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_fileUpdatedDate)(IXMLDocument2*,BSTR*);
     * }
     */
    public static void get_fileUpdatedDate$set(MemorySegment seg, MemorySegment x) {
        IXMLDocument2Vtbl.get_fileUpdatedDate$VH.set(seg, x);
    }
    public static MemorySegment get_fileUpdatedDate$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDocument2Vtbl.get_fileUpdatedDate$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_fileUpdatedDate$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDocument2Vtbl.get_fileUpdatedDate$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_fileUpdatedDate get_fileUpdatedDate(MemorySegment segment, SegmentScope scope) {
        return get_fileUpdatedDate.ofAddress(get_fileUpdatedDate$get(segment), scope);
    }
    static final FunctionDescriptor get_URL$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_URL_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_URL_UP$MH = RuntimeHelper.upcallHandle(get_URL.class, "apply", IXMLDocument2Vtbl.get_URL_UP$FUNC);
    static final FunctionDescriptor get_URL_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_URL_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDocument2Vtbl.get_URL_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*get_URL)(IXMLDocument2*,BSTR*);
     * }
     */
    public interface get_URL {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_URL fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDocument2Vtbl.get_URL_UP$MH, fi, IXMLDocument2Vtbl.get_URL$FUNC, scope);
        }
        static get_URL ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IXMLDocument2Vtbl.get_URL_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_URL$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_URL"));
    public static VarHandle get_URL$VH() {
        return IXMLDocument2Vtbl.get_URL$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_URL)(IXMLDocument2*,BSTR*);
     * }
     */
    public static MemorySegment get_URL$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDocument2Vtbl.get_URL$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_URL)(IXMLDocument2*,BSTR*);
     * }
     */
    public static void get_URL$set(MemorySegment seg, MemorySegment x) {
        IXMLDocument2Vtbl.get_URL$VH.set(seg, x);
    }
    public static MemorySegment get_URL$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDocument2Vtbl.get_URL$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_URL$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDocument2Vtbl.get_URL$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_URL get_URL(MemorySegment segment, SegmentScope scope) {
        return get_URL.ofAddress(get_URL$get(segment), scope);
    }
    static final FunctionDescriptor put_URL$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor put_URL_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle put_URL_UP$MH = RuntimeHelper.upcallHandle(put_URL.class, "apply", IXMLDocument2Vtbl.put_URL_UP$FUNC);
    static final FunctionDescriptor put_URL_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle put_URL_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDocument2Vtbl.put_URL_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*put_URL)(IXMLDocument2*,BSTR);
     * }
     */
    public interface put_URL {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(put_URL fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDocument2Vtbl.put_URL_UP$MH, fi, IXMLDocument2Vtbl.put_URL$FUNC, scope);
        }
        static put_URL ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IXMLDocument2Vtbl.put_URL_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle put_URL$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("put_URL"));
    public static VarHandle put_URL$VH() {
        return IXMLDocument2Vtbl.put_URL$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*put_URL)(IXMLDocument2*,BSTR);
     * }
     */
    public static MemorySegment put_URL$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDocument2Vtbl.put_URL$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*put_URL)(IXMLDocument2*,BSTR);
     * }
     */
    public static void put_URL$set(MemorySegment seg, MemorySegment x) {
        IXMLDocument2Vtbl.put_URL$VH.set(seg, x);
    }
    public static MemorySegment put_URL$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDocument2Vtbl.put_URL$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void put_URL$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDocument2Vtbl.put_URL$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static put_URL put_URL(MemorySegment segment, SegmentScope scope) {
        return put_URL.ofAddress(put_URL$get(segment), scope);
    }
    static final FunctionDescriptor get_mimeType$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_mimeType_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_mimeType_UP$MH = RuntimeHelper.upcallHandle(get_mimeType.class, "apply", IXMLDocument2Vtbl.get_mimeType_UP$FUNC);
    static final FunctionDescriptor get_mimeType_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_mimeType_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDocument2Vtbl.get_mimeType_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*get_mimeType)(IXMLDocument2*,BSTR*);
     * }
     */
    public interface get_mimeType {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_mimeType fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDocument2Vtbl.get_mimeType_UP$MH, fi, IXMLDocument2Vtbl.get_mimeType$FUNC, scope);
        }
        static get_mimeType ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IXMLDocument2Vtbl.get_mimeType_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_mimeType$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_mimeType"));
    public static VarHandle get_mimeType$VH() {
        return IXMLDocument2Vtbl.get_mimeType$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_mimeType)(IXMLDocument2*,BSTR*);
     * }
     */
    public static MemorySegment get_mimeType$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDocument2Vtbl.get_mimeType$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_mimeType)(IXMLDocument2*,BSTR*);
     * }
     */
    public static void get_mimeType$set(MemorySegment seg, MemorySegment x) {
        IXMLDocument2Vtbl.get_mimeType$VH.set(seg, x);
    }
    public static MemorySegment get_mimeType$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDocument2Vtbl.get_mimeType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_mimeType$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDocument2Vtbl.get_mimeType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_mimeType get_mimeType(MemorySegment segment, SegmentScope scope) {
        return get_mimeType.ofAddress(get_mimeType$get(segment), scope);
    }
    static final FunctionDescriptor get_readyState$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_readyState_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_readyState_UP$MH = RuntimeHelper.upcallHandle(get_readyState.class, "apply", IXMLDocument2Vtbl.get_readyState_UP$FUNC);
    static final FunctionDescriptor get_readyState_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_readyState_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDocument2Vtbl.get_readyState_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*get_readyState)(IXMLDocument2*,long*);
     * }
     */
    public interface get_readyState {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_readyState fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDocument2Vtbl.get_readyState_UP$MH, fi, IXMLDocument2Vtbl.get_readyState$FUNC, scope);
        }
        static get_readyState ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IXMLDocument2Vtbl.get_readyState_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_readyState$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_readyState"));
    public static VarHandle get_readyState$VH() {
        return IXMLDocument2Vtbl.get_readyState$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_readyState)(IXMLDocument2*,long*);
     * }
     */
    public static MemorySegment get_readyState$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDocument2Vtbl.get_readyState$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_readyState)(IXMLDocument2*,long*);
     * }
     */
    public static void get_readyState$set(MemorySegment seg, MemorySegment x) {
        IXMLDocument2Vtbl.get_readyState$VH.set(seg, x);
    }
    public static MemorySegment get_readyState$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDocument2Vtbl.get_readyState$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_readyState$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDocument2Vtbl.get_readyState$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_readyState get_readyState(MemorySegment segment, SegmentScope scope) {
        return get_readyState.ofAddress(get_readyState$get(segment), scope);
    }
    static final FunctionDescriptor get_charset$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_charset_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_charset_UP$MH = RuntimeHelper.upcallHandle(get_charset.class, "apply", IXMLDocument2Vtbl.get_charset_UP$FUNC);
    static final FunctionDescriptor get_charset_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_charset_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDocument2Vtbl.get_charset_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*get_charset)(IXMLDocument2*,BSTR*);
     * }
     */
    public interface get_charset {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_charset fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDocument2Vtbl.get_charset_UP$MH, fi, IXMLDocument2Vtbl.get_charset$FUNC, scope);
        }
        static get_charset ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IXMLDocument2Vtbl.get_charset_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_charset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_charset"));
    public static VarHandle get_charset$VH() {
        return IXMLDocument2Vtbl.get_charset$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_charset)(IXMLDocument2*,BSTR*);
     * }
     */
    public static MemorySegment get_charset$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDocument2Vtbl.get_charset$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_charset)(IXMLDocument2*,BSTR*);
     * }
     */
    public static void get_charset$set(MemorySegment seg, MemorySegment x) {
        IXMLDocument2Vtbl.get_charset$VH.set(seg, x);
    }
    public static MemorySegment get_charset$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDocument2Vtbl.get_charset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_charset$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDocument2Vtbl.get_charset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_charset get_charset(MemorySegment segment, SegmentScope scope) {
        return get_charset.ofAddress(get_charset$get(segment), scope);
    }
    static final FunctionDescriptor put_charset$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor put_charset_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle put_charset_UP$MH = RuntimeHelper.upcallHandle(put_charset.class, "apply", IXMLDocument2Vtbl.put_charset_UP$FUNC);
    static final FunctionDescriptor put_charset_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle put_charset_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDocument2Vtbl.put_charset_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*put_charset)(IXMLDocument2*,BSTR);
     * }
     */
    public interface put_charset {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(put_charset fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDocument2Vtbl.put_charset_UP$MH, fi, IXMLDocument2Vtbl.put_charset$FUNC, scope);
        }
        static put_charset ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IXMLDocument2Vtbl.put_charset_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle put_charset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("put_charset"));
    public static VarHandle put_charset$VH() {
        return IXMLDocument2Vtbl.put_charset$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*put_charset)(IXMLDocument2*,BSTR);
     * }
     */
    public static MemorySegment put_charset$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDocument2Vtbl.put_charset$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*put_charset)(IXMLDocument2*,BSTR);
     * }
     */
    public static void put_charset$set(MemorySegment seg, MemorySegment x) {
        IXMLDocument2Vtbl.put_charset$VH.set(seg, x);
    }
    public static MemorySegment put_charset$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDocument2Vtbl.put_charset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void put_charset$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDocument2Vtbl.put_charset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static put_charset put_charset(MemorySegment segment, SegmentScope scope) {
        return put_charset.ofAddress(put_charset$get(segment), scope);
    }
    static final FunctionDescriptor get_version$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_version_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_version_UP$MH = RuntimeHelper.upcallHandle(get_version.class, "apply", IXMLDocument2Vtbl.get_version_UP$FUNC);
    static final FunctionDescriptor get_version_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_version_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDocument2Vtbl.get_version_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*get_version)(IXMLDocument2*,BSTR*);
     * }
     */
    public interface get_version {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_version fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDocument2Vtbl.get_version_UP$MH, fi, IXMLDocument2Vtbl.get_version$FUNC, scope);
        }
        static get_version ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IXMLDocument2Vtbl.get_version_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_version$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_version"));
    public static VarHandle get_version$VH() {
        return IXMLDocument2Vtbl.get_version$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_version)(IXMLDocument2*,BSTR*);
     * }
     */
    public static MemorySegment get_version$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDocument2Vtbl.get_version$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_version)(IXMLDocument2*,BSTR*);
     * }
     */
    public static void get_version$set(MemorySegment seg, MemorySegment x) {
        IXMLDocument2Vtbl.get_version$VH.set(seg, x);
    }
    public static MemorySegment get_version$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDocument2Vtbl.get_version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_version$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDocument2Vtbl.get_version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_version get_version(MemorySegment segment, SegmentScope scope) {
        return get_version.ofAddress(get_version$get(segment), scope);
    }
    static final FunctionDescriptor get_doctype$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_doctype_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_doctype_UP$MH = RuntimeHelper.upcallHandle(get_doctype.class, "apply", IXMLDocument2Vtbl.get_doctype_UP$FUNC);
    static final FunctionDescriptor get_doctype_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_doctype_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDocument2Vtbl.get_doctype_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*get_doctype)(IXMLDocument2*,BSTR*);
     * }
     */
    public interface get_doctype {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_doctype fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDocument2Vtbl.get_doctype_UP$MH, fi, IXMLDocument2Vtbl.get_doctype$FUNC, scope);
        }
        static get_doctype ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IXMLDocument2Vtbl.get_doctype_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_doctype$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_doctype"));
    public static VarHandle get_doctype$VH() {
        return IXMLDocument2Vtbl.get_doctype$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_doctype)(IXMLDocument2*,BSTR*);
     * }
     */
    public static MemorySegment get_doctype$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDocument2Vtbl.get_doctype$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_doctype)(IXMLDocument2*,BSTR*);
     * }
     */
    public static void get_doctype$set(MemorySegment seg, MemorySegment x) {
        IXMLDocument2Vtbl.get_doctype$VH.set(seg, x);
    }
    public static MemorySegment get_doctype$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDocument2Vtbl.get_doctype$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_doctype$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDocument2Vtbl.get_doctype$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_doctype get_doctype(MemorySegment segment, SegmentScope scope) {
        return get_doctype.ofAddress(get_doctype$get(segment), scope);
    }
    static final FunctionDescriptor get_dtdURL$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_dtdURL_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_dtdURL_UP$MH = RuntimeHelper.upcallHandle(get_dtdURL.class, "apply", IXMLDocument2Vtbl.get_dtdURL_UP$FUNC);
    static final FunctionDescriptor get_dtdURL_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_dtdURL_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDocument2Vtbl.get_dtdURL_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*get_dtdURL)(IXMLDocument2*,BSTR*);
     * }
     */
    public interface get_dtdURL {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_dtdURL fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDocument2Vtbl.get_dtdURL_UP$MH, fi, IXMLDocument2Vtbl.get_dtdURL$FUNC, scope);
        }
        static get_dtdURL ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IXMLDocument2Vtbl.get_dtdURL_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_dtdURL$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_dtdURL"));
    public static VarHandle get_dtdURL$VH() {
        return IXMLDocument2Vtbl.get_dtdURL$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_dtdURL)(IXMLDocument2*,BSTR*);
     * }
     */
    public static MemorySegment get_dtdURL$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDocument2Vtbl.get_dtdURL$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_dtdURL)(IXMLDocument2*,BSTR*);
     * }
     */
    public static void get_dtdURL$set(MemorySegment seg, MemorySegment x) {
        IXMLDocument2Vtbl.get_dtdURL$VH.set(seg, x);
    }
    public static MemorySegment get_dtdURL$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDocument2Vtbl.get_dtdURL$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_dtdURL$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDocument2Vtbl.get_dtdURL$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_dtdURL get_dtdURL(MemorySegment segment, SegmentScope scope) {
        return get_dtdURL.ofAddress(get_dtdURL$get(segment), scope);
    }
    static final FunctionDescriptor createElement$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        MemoryLayout.structLayout(
            MemoryLayout.unionLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_SHORT$LAYOUT.withName("vt"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved1"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved2"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved3"),
                    MemoryLayout.unionLayout(
                        Constants$root.C_LONG_LONG$LAYOUT.withName("llVal"),
                        Constants$root.C_LONG$LAYOUT.withName("lVal"),
                        Constants$root.C_CHAR$LAYOUT.withName("bVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("iVal"),
                        Constants$root.C_FLOAT$LAYOUT.withName("fltVal"),
                        Constants$root.C_DOUBLE$LAYOUT.withName("dblVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("boolVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("__OBSOLETE__VARIANT_BOOL"),
                        Constants$root.C_LONG$LAYOUT.withName("scode"),
                        MemoryLayout.unionLayout(
                            MemoryLayout.structLayout(
                                Constants$root.C_LONG$LAYOUT.withName("Lo"),
                                Constants$root.C_LONG$LAYOUT.withName("Hi")
                            ).withName("$anon$0"),
                            Constants$root.C_LONG_LONG$LAYOUT.withName("int64")
                        ).withName("cyVal"),
                        Constants$root.C_DOUBLE$LAYOUT.withName("date"),
                        Constants$root.C_POINTER$LAYOUT.withName("bstrVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("punkVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdispVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("parray"),
                        Constants$root.C_POINTER$LAYOUT.withName("pbVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("piVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("plVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pllVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pfltVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdblVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pboolVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("__OBSOLETE__VARIANT_PBOOL"),
                        Constants$root.C_POINTER$LAYOUT.withName("pscode"),
                        Constants$root.C_POINTER$LAYOUT.withName("pcyVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdate"),
                        Constants$root.C_POINTER$LAYOUT.withName("pbstrVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("ppunkVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("ppdispVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pparray"),
                        Constants$root.C_POINTER$LAYOUT.withName("pvarVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("byref"),
                        Constants$root.C_CHAR$LAYOUT.withName("cVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("uiVal"),
                        Constants$root.C_LONG$LAYOUT.withName("ulVal"),
                        Constants$root.C_LONG_LONG$LAYOUT.withName("ullVal"),
                        Constants$root.C_LONG$LAYOUT.withName("intVal"),
                        Constants$root.C_LONG$LAYOUT.withName("uintVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdecVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pcVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("puiVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pulVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pullVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pintVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("puintVal"),
                        MemoryLayout.structLayout(
                            Constants$root.C_POINTER$LAYOUT.withName("pvRecord"),
                            Constants$root.C_POINTER$LAYOUT.withName("pRecInfo")
                        ).withName("$anon$0")
                    ).withName("$anon$0")
                ).withName("$anon$0"),
                MemoryLayout.structLayout(
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            Constants$root.C_CHAR$LAYOUT.withName("scale"),
                            Constants$root.C_CHAR$LAYOUT.withName("sign")
                        ).withName("$anon$0"),
                        Constants$root.C_SHORT$LAYOUT.withName("signscale")
                    ).withName("$anon$0"),
                    Constants$root.C_LONG$LAYOUT.withName("Hi32"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            Constants$root.C_LONG$LAYOUT.withName("Lo32"),
                            Constants$root.C_LONG$LAYOUT.withName("Mid32")
                        ).withName("$anon$0"),
                        Constants$root.C_LONG_LONG$LAYOUT.withName("Lo64")
                    ).withName("$anon$1")
                ).withName("decVal")
            ).withName("$anon$0")
        ).withName("tagVARIANT"),
        MemoryLayout.structLayout(
            MemoryLayout.unionLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_SHORT$LAYOUT.withName("vt"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved1"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved2"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved3"),
                    MemoryLayout.unionLayout(
                        Constants$root.C_LONG_LONG$LAYOUT.withName("llVal"),
                        Constants$root.C_LONG$LAYOUT.withName("lVal"),
                        Constants$root.C_CHAR$LAYOUT.withName("bVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("iVal"),
                        Constants$root.C_FLOAT$LAYOUT.withName("fltVal"),
                        Constants$root.C_DOUBLE$LAYOUT.withName("dblVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("boolVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("__OBSOLETE__VARIANT_BOOL"),
                        Constants$root.C_LONG$LAYOUT.withName("scode"),
                        MemoryLayout.unionLayout(
                            MemoryLayout.structLayout(
                                Constants$root.C_LONG$LAYOUT.withName("Lo"),
                                Constants$root.C_LONG$LAYOUT.withName("Hi")
                            ).withName("$anon$0"),
                            Constants$root.C_LONG_LONG$LAYOUT.withName("int64")
                        ).withName("cyVal"),
                        Constants$root.C_DOUBLE$LAYOUT.withName("date"),
                        Constants$root.C_POINTER$LAYOUT.withName("bstrVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("punkVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdispVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("parray"),
                        Constants$root.C_POINTER$LAYOUT.withName("pbVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("piVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("plVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pllVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pfltVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdblVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pboolVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("__OBSOLETE__VARIANT_PBOOL"),
                        Constants$root.C_POINTER$LAYOUT.withName("pscode"),
                        Constants$root.C_POINTER$LAYOUT.withName("pcyVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdate"),
                        Constants$root.C_POINTER$LAYOUT.withName("pbstrVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("ppunkVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("ppdispVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pparray"),
                        Constants$root.C_POINTER$LAYOUT.withName("pvarVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("byref"),
                        Constants$root.C_CHAR$LAYOUT.withName("cVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("uiVal"),
                        Constants$root.C_LONG$LAYOUT.withName("ulVal"),
                        Constants$root.C_LONG_LONG$LAYOUT.withName("ullVal"),
                        Constants$root.C_LONG$LAYOUT.withName("intVal"),
                        Constants$root.C_LONG$LAYOUT.withName("uintVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdecVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pcVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("puiVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pulVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pullVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pintVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("puintVal"),
                        MemoryLayout.structLayout(
                            Constants$root.C_POINTER$LAYOUT.withName("pvRecord"),
                            Constants$root.C_POINTER$LAYOUT.withName("pRecInfo")
                        ).withName("$anon$0")
                    ).withName("$anon$0")
                ).withName("$anon$0"),
                MemoryLayout.structLayout(
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            Constants$root.C_CHAR$LAYOUT.withName("scale"),
                            Constants$root.C_CHAR$LAYOUT.withName("sign")
                        ).withName("$anon$0"),
                        Constants$root.C_SHORT$LAYOUT.withName("signscale")
                    ).withName("$anon$0"),
                    Constants$root.C_LONG$LAYOUT.withName("Hi32"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            Constants$root.C_LONG$LAYOUT.withName("Lo32"),
                            Constants$root.C_LONG$LAYOUT.withName("Mid32")
                        ).withName("$anon$0"),
                        Constants$root.C_LONG_LONG$LAYOUT.withName("Lo64")
                    ).withName("$anon$1")
                ).withName("decVal")
            ).withName("$anon$0")
        ).withName("tagVARIANT"),
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor createElement_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        MemoryLayout.structLayout(
            MemoryLayout.unionLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_SHORT$LAYOUT.withName("vt"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved1"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved2"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved3"),
                    MemoryLayout.unionLayout(
                        Constants$root.C_LONG_LONG$LAYOUT.withName("llVal"),
                        Constants$root.C_LONG$LAYOUT.withName("lVal"),
                        Constants$root.C_CHAR$LAYOUT.withName("bVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("iVal"),
                        Constants$root.C_FLOAT$LAYOUT.withName("fltVal"),
                        Constants$root.C_DOUBLE$LAYOUT.withName("dblVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("boolVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("__OBSOLETE__VARIANT_BOOL"),
                        Constants$root.C_LONG$LAYOUT.withName("scode"),
                        MemoryLayout.unionLayout(
                            MemoryLayout.structLayout(
                                Constants$root.C_LONG$LAYOUT.withName("Lo"),
                                Constants$root.C_LONG$LAYOUT.withName("Hi")
                            ).withName("$anon$0"),
                            Constants$root.C_LONG_LONG$LAYOUT.withName("int64")
                        ).withName("cyVal"),
                        Constants$root.C_DOUBLE$LAYOUT.withName("date"),
                        Constants$root.C_POINTER$LAYOUT.withName("bstrVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("punkVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdispVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("parray"),
                        Constants$root.C_POINTER$LAYOUT.withName("pbVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("piVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("plVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pllVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pfltVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdblVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pboolVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("__OBSOLETE__VARIANT_PBOOL"),
                        Constants$root.C_POINTER$LAYOUT.withName("pscode"),
                        Constants$root.C_POINTER$LAYOUT.withName("pcyVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdate"),
                        Constants$root.C_POINTER$LAYOUT.withName("pbstrVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("ppunkVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("ppdispVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pparray"),
                        Constants$root.C_POINTER$LAYOUT.withName("pvarVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("byref"),
                        Constants$root.C_CHAR$LAYOUT.withName("cVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("uiVal"),
                        Constants$root.C_LONG$LAYOUT.withName("ulVal"),
                        Constants$root.C_LONG_LONG$LAYOUT.withName("ullVal"),
                        Constants$root.C_LONG$LAYOUT.withName("intVal"),
                        Constants$root.C_LONG$LAYOUT.withName("uintVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdecVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pcVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("puiVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pulVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pullVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pintVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("puintVal"),
                        MemoryLayout.structLayout(
                            Constants$root.C_POINTER$LAYOUT.withName("pvRecord"),
                            Constants$root.C_POINTER$LAYOUT.withName("pRecInfo")
                        ).withName("$anon$0")
                    ).withName("$anon$0")
                ).withName("$anon$0"),
                MemoryLayout.structLayout(
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            Constants$root.C_CHAR$LAYOUT.withName("scale"),
                            Constants$root.C_CHAR$LAYOUT.withName("sign")
                        ).withName("$anon$0"),
                        Constants$root.C_SHORT$LAYOUT.withName("signscale")
                    ).withName("$anon$0"),
                    Constants$root.C_LONG$LAYOUT.withName("Hi32"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            Constants$root.C_LONG$LAYOUT.withName("Lo32"),
                            Constants$root.C_LONG$LAYOUT.withName("Mid32")
                        ).withName("$anon$0"),
                        Constants$root.C_LONG_LONG$LAYOUT.withName("Lo64")
                    ).withName("$anon$1")
                ).withName("decVal")
            ).withName("$anon$0")
        ).withName("tagVARIANT"),
        MemoryLayout.structLayout(
            MemoryLayout.unionLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_SHORT$LAYOUT.withName("vt"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved1"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved2"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved3"),
                    MemoryLayout.unionLayout(
                        Constants$root.C_LONG_LONG$LAYOUT.withName("llVal"),
                        Constants$root.C_LONG$LAYOUT.withName("lVal"),
                        Constants$root.C_CHAR$LAYOUT.withName("bVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("iVal"),
                        Constants$root.C_FLOAT$LAYOUT.withName("fltVal"),
                        Constants$root.C_DOUBLE$LAYOUT.withName("dblVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("boolVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("__OBSOLETE__VARIANT_BOOL"),
                        Constants$root.C_LONG$LAYOUT.withName("scode"),
                        MemoryLayout.unionLayout(
                            MemoryLayout.structLayout(
                                Constants$root.C_LONG$LAYOUT.withName("Lo"),
                                Constants$root.C_LONG$LAYOUT.withName("Hi")
                            ).withName("$anon$0"),
                            Constants$root.C_LONG_LONG$LAYOUT.withName("int64")
                        ).withName("cyVal"),
                        Constants$root.C_DOUBLE$LAYOUT.withName("date"),
                        Constants$root.C_POINTER$LAYOUT.withName("bstrVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("punkVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdispVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("parray"),
                        Constants$root.C_POINTER$LAYOUT.withName("pbVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("piVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("plVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pllVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pfltVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdblVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pboolVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("__OBSOLETE__VARIANT_PBOOL"),
                        Constants$root.C_POINTER$LAYOUT.withName("pscode"),
                        Constants$root.C_POINTER$LAYOUT.withName("pcyVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdate"),
                        Constants$root.C_POINTER$LAYOUT.withName("pbstrVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("ppunkVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("ppdispVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pparray"),
                        Constants$root.C_POINTER$LAYOUT.withName("pvarVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("byref"),
                        Constants$root.C_CHAR$LAYOUT.withName("cVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("uiVal"),
                        Constants$root.C_LONG$LAYOUT.withName("ulVal"),
                        Constants$root.C_LONG_LONG$LAYOUT.withName("ullVal"),
                        Constants$root.C_LONG$LAYOUT.withName("intVal"),
                        Constants$root.C_LONG$LAYOUT.withName("uintVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdecVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pcVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("puiVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pulVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pullVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pintVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("puintVal"),
                        MemoryLayout.structLayout(
                            Constants$root.C_POINTER$LAYOUT.withName("pvRecord"),
                            Constants$root.C_POINTER$LAYOUT.withName("pRecInfo")
                        ).withName("$anon$0")
                    ).withName("$anon$0")
                ).withName("$anon$0"),
                MemoryLayout.structLayout(
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            Constants$root.C_CHAR$LAYOUT.withName("scale"),
                            Constants$root.C_CHAR$LAYOUT.withName("sign")
                        ).withName("$anon$0"),
                        Constants$root.C_SHORT$LAYOUT.withName("signscale")
                    ).withName("$anon$0"),
                    Constants$root.C_LONG$LAYOUT.withName("Hi32"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            Constants$root.C_LONG$LAYOUT.withName("Lo32"),
                            Constants$root.C_LONG$LAYOUT.withName("Mid32")
                        ).withName("$anon$0"),
                        Constants$root.C_LONG_LONG$LAYOUT.withName("Lo64")
                    ).withName("$anon$1")
                ).withName("decVal")
            ).withName("$anon$0")
        ).withName("tagVARIANT"),
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle createElement_UP$MH = RuntimeHelper.upcallHandle(createElement.class, "apply", IXMLDocument2Vtbl.createElement_UP$FUNC);
    static final FunctionDescriptor createElement_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        MemoryLayout.structLayout(
            MemoryLayout.unionLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_SHORT$LAYOUT.withName("vt"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved1"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved2"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved3"),
                    MemoryLayout.unionLayout(
                        Constants$root.C_LONG_LONG$LAYOUT.withName("llVal"),
                        Constants$root.C_LONG$LAYOUT.withName("lVal"),
                        Constants$root.C_CHAR$LAYOUT.withName("bVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("iVal"),
                        Constants$root.C_FLOAT$LAYOUT.withName("fltVal"),
                        Constants$root.C_DOUBLE$LAYOUT.withName("dblVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("boolVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("__OBSOLETE__VARIANT_BOOL"),
                        Constants$root.C_LONG$LAYOUT.withName("scode"),
                        MemoryLayout.unionLayout(
                            MemoryLayout.structLayout(
                                Constants$root.C_LONG$LAYOUT.withName("Lo"),
                                Constants$root.C_LONG$LAYOUT.withName("Hi")
                            ).withName("$anon$0"),
                            Constants$root.C_LONG_LONG$LAYOUT.withName("int64")
                        ).withName("cyVal"),
                        Constants$root.C_DOUBLE$LAYOUT.withName("date"),
                        Constants$root.C_POINTER$LAYOUT.withName("bstrVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("punkVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdispVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("parray"),
                        Constants$root.C_POINTER$LAYOUT.withName("pbVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("piVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("plVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pllVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pfltVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdblVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pboolVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("__OBSOLETE__VARIANT_PBOOL"),
                        Constants$root.C_POINTER$LAYOUT.withName("pscode"),
                        Constants$root.C_POINTER$LAYOUT.withName("pcyVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdate"),
                        Constants$root.C_POINTER$LAYOUT.withName("pbstrVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("ppunkVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("ppdispVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pparray"),
                        Constants$root.C_POINTER$LAYOUT.withName("pvarVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("byref"),
                        Constants$root.C_CHAR$LAYOUT.withName("cVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("uiVal"),
                        Constants$root.C_LONG$LAYOUT.withName("ulVal"),
                        Constants$root.C_LONG_LONG$LAYOUT.withName("ullVal"),
                        Constants$root.C_LONG$LAYOUT.withName("intVal"),
                        Constants$root.C_LONG$LAYOUT.withName("uintVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdecVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pcVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("puiVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pulVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pullVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pintVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("puintVal"),
                        MemoryLayout.structLayout(
                            Constants$root.C_POINTER$LAYOUT.withName("pvRecord"),
                            Constants$root.C_POINTER$LAYOUT.withName("pRecInfo")
                        ).withName("$anon$0")
                    ).withName("$anon$0")
                ).withName("$anon$0"),
                MemoryLayout.structLayout(
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            Constants$root.C_CHAR$LAYOUT.withName("scale"),
                            Constants$root.C_CHAR$LAYOUT.withName("sign")
                        ).withName("$anon$0"),
                        Constants$root.C_SHORT$LAYOUT.withName("signscale")
                    ).withName("$anon$0"),
                    Constants$root.C_LONG$LAYOUT.withName("Hi32"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            Constants$root.C_LONG$LAYOUT.withName("Lo32"),
                            Constants$root.C_LONG$LAYOUT.withName("Mid32")
                        ).withName("$anon$0"),
                        Constants$root.C_LONG_LONG$LAYOUT.withName("Lo64")
                    ).withName("$anon$1")
                ).withName("decVal")
            ).withName("$anon$0")
        ).withName("tagVARIANT"),
        MemoryLayout.structLayout(
            MemoryLayout.unionLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_SHORT$LAYOUT.withName("vt"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved1"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved2"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved3"),
                    MemoryLayout.unionLayout(
                        Constants$root.C_LONG_LONG$LAYOUT.withName("llVal"),
                        Constants$root.C_LONG$LAYOUT.withName("lVal"),
                        Constants$root.C_CHAR$LAYOUT.withName("bVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("iVal"),
                        Constants$root.C_FLOAT$LAYOUT.withName("fltVal"),
                        Constants$root.C_DOUBLE$LAYOUT.withName("dblVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("boolVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("__OBSOLETE__VARIANT_BOOL"),
                        Constants$root.C_LONG$LAYOUT.withName("scode"),
                        MemoryLayout.unionLayout(
                            MemoryLayout.structLayout(
                                Constants$root.C_LONG$LAYOUT.withName("Lo"),
                                Constants$root.C_LONG$LAYOUT.withName("Hi")
                            ).withName("$anon$0"),
                            Constants$root.C_LONG_LONG$LAYOUT.withName("int64")
                        ).withName("cyVal"),
                        Constants$root.C_DOUBLE$LAYOUT.withName("date"),
                        Constants$root.C_POINTER$LAYOUT.withName("bstrVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("punkVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdispVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("parray"),
                        Constants$root.C_POINTER$LAYOUT.withName("pbVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("piVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("plVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pllVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pfltVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdblVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pboolVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("__OBSOLETE__VARIANT_PBOOL"),
                        Constants$root.C_POINTER$LAYOUT.withName("pscode"),
                        Constants$root.C_POINTER$LAYOUT.withName("pcyVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdate"),
                        Constants$root.C_POINTER$LAYOUT.withName("pbstrVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("ppunkVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("ppdispVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pparray"),
                        Constants$root.C_POINTER$LAYOUT.withName("pvarVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("byref"),
                        Constants$root.C_CHAR$LAYOUT.withName("cVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("uiVal"),
                        Constants$root.C_LONG$LAYOUT.withName("ulVal"),
                        Constants$root.C_LONG_LONG$LAYOUT.withName("ullVal"),
                        Constants$root.C_LONG$LAYOUT.withName("intVal"),
                        Constants$root.C_LONG$LAYOUT.withName("uintVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdecVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pcVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("puiVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pulVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pullVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pintVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("puintVal"),
                        MemoryLayout.structLayout(
                            Constants$root.C_POINTER$LAYOUT.withName("pvRecord"),
                            Constants$root.C_POINTER$LAYOUT.withName("pRecInfo")
                        ).withName("$anon$0")
                    ).withName("$anon$0")
                ).withName("$anon$0"),
                MemoryLayout.structLayout(
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            Constants$root.C_CHAR$LAYOUT.withName("scale"),
                            Constants$root.C_CHAR$LAYOUT.withName("sign")
                        ).withName("$anon$0"),
                        Constants$root.C_SHORT$LAYOUT.withName("signscale")
                    ).withName("$anon$0"),
                    Constants$root.C_LONG$LAYOUT.withName("Hi32"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            Constants$root.C_LONG$LAYOUT.withName("Lo32"),
                            Constants$root.C_LONG$LAYOUT.withName("Mid32")
                        ).withName("$anon$0"),
                        Constants$root.C_LONG_LONG$LAYOUT.withName("Lo64")
                    ).withName("$anon$1")
                ).withName("decVal")
            ).withName("$anon$0")
        ).withName("tagVARIANT"),
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle createElement_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDocument2Vtbl.createElement_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*createElement)(IXMLDocument2*,VARIANT,VARIANT,IXMLElement2**);
     * }
     */
    public interface createElement {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(createElement fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDocument2Vtbl.createElement_UP$MH, fi, IXMLDocument2Vtbl.createElement$FUNC, scope);
        }
        static createElement ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)IXMLDocument2Vtbl.createElement_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle createElement$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("createElement"));
    public static VarHandle createElement$VH() {
        return IXMLDocument2Vtbl.createElement$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*createElement)(IXMLDocument2*,VARIANT,VARIANT,IXMLElement2**);
     * }
     */
    public static MemorySegment createElement$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDocument2Vtbl.createElement$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*createElement)(IXMLDocument2*,VARIANT,VARIANT,IXMLElement2**);
     * }
     */
    public static void createElement$set(MemorySegment seg, MemorySegment x) {
        IXMLDocument2Vtbl.createElement$VH.set(seg, x);
    }
    public static MemorySegment createElement$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDocument2Vtbl.createElement$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void createElement$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDocument2Vtbl.createElement$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static createElement createElement(MemorySegment segment, SegmentScope scope) {
        return createElement.ofAddress(createElement$get(segment), scope);
    }
    static final FunctionDescriptor get_async$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_async_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_async_UP$MH = RuntimeHelper.upcallHandle(get_async.class, "apply", IXMLDocument2Vtbl.get_async_UP$FUNC);
    static final FunctionDescriptor get_async_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_async_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDocument2Vtbl.get_async_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*get_async)(IXMLDocument2*,VARIANT_BOOL*);
     * }
     */
    public interface get_async {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_async fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDocument2Vtbl.get_async_UP$MH, fi, IXMLDocument2Vtbl.get_async$FUNC, scope);
        }
        static get_async ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IXMLDocument2Vtbl.get_async_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_async$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_async"));
    public static VarHandle get_async$VH() {
        return IXMLDocument2Vtbl.get_async$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_async)(IXMLDocument2*,VARIANT_BOOL*);
     * }
     */
    public static MemorySegment get_async$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDocument2Vtbl.get_async$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_async)(IXMLDocument2*,VARIANT_BOOL*);
     * }
     */
    public static void get_async$set(MemorySegment seg, MemorySegment x) {
        IXMLDocument2Vtbl.get_async$VH.set(seg, x);
    }
    public static MemorySegment get_async$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDocument2Vtbl.get_async$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_async$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDocument2Vtbl.get_async$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_async get_async(MemorySegment segment, SegmentScope scope) {
        return get_async.ofAddress(get_async$get(segment), scope);
    }
    static final FunctionDescriptor put_async$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_SHORT$LAYOUT
    );
    static final FunctionDescriptor put_async_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_SHORT$LAYOUT
    );
    static final MethodHandle put_async_UP$MH = RuntimeHelper.upcallHandle(put_async.class, "apply", IXMLDocument2Vtbl.put_async_UP$FUNC);
    static final FunctionDescriptor put_async_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_SHORT$LAYOUT
    );
    static final MethodHandle put_async_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDocument2Vtbl.put_async_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*put_async)(IXMLDocument2*,VARIANT_BOOL);
     * }
     */
    public interface put_async {

        int apply(java.lang.foreign.MemorySegment _x0, short _x1);
        static MemorySegment allocate(put_async fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDocument2Vtbl.put_async_UP$MH, fi, IXMLDocument2Vtbl.put_async$FUNC, scope);
        }
        static put_async ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, short __x1) -> {
                try {
                    return (int)IXMLDocument2Vtbl.put_async_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle put_async$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("put_async"));
    public static VarHandle put_async$VH() {
        return IXMLDocument2Vtbl.put_async$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*put_async)(IXMLDocument2*,VARIANT_BOOL);
     * }
     */
    public static MemorySegment put_async$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDocument2Vtbl.put_async$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*put_async)(IXMLDocument2*,VARIANT_BOOL);
     * }
     */
    public static void put_async$set(MemorySegment seg, MemorySegment x) {
        IXMLDocument2Vtbl.put_async$VH.set(seg, x);
    }
    public static MemorySegment put_async$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDocument2Vtbl.put_async$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void put_async$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDocument2Vtbl.put_async$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static put_async put_async(MemorySegment segment, SegmentScope scope) {
        return put_async.ofAddress(put_async$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


