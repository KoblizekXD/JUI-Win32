// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _NCRYPT_CIPHER_PADDING_INFO {
 *     ULONG cbSize;
 *     DWORD dwFlags;
 *     PUCHAR pbIV;
 *     ULONG cbIV;
 *     PUCHAR pbOtherInfo;
 *     ULONG cbOtherInfo;
 * };
 * }
 */
public class _NCRYPT_CIPHER_PADDING_INFO {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("cbSize"),
        Constants$root.C_LONG$LAYOUT.withName("dwFlags"),
        Constants$root.C_POINTER$LAYOUT.withName("pbIV"),
        Constants$root.C_LONG$LAYOUT.withName("cbIV"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("pbOtherInfo"),
        Constants$root.C_LONG$LAYOUT.withName("cbOtherInfo"),
        MemoryLayout.paddingLayout(32)
    ).withName("_NCRYPT_CIPHER_PADDING_INFO");
    public static MemoryLayout $LAYOUT() {
        return _NCRYPT_CIPHER_PADDING_INFO.$struct$LAYOUT;
    }
    static final VarHandle cbSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cbSize"));
    public static VarHandle cbSize$VH() {
        return _NCRYPT_CIPHER_PADDING_INFO.cbSize$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG cbSize;
     * }
     */
    public static int cbSize$get(MemorySegment seg) {
        return (int)_NCRYPT_CIPHER_PADDING_INFO.cbSize$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG cbSize;
     * }
     */
    public static void cbSize$set(MemorySegment seg, int x) {
        _NCRYPT_CIPHER_PADDING_INFO.cbSize$VH.set(seg, x);
    }
    public static int cbSize$get(MemorySegment seg, long index) {
        return (int)_NCRYPT_CIPHER_PADDING_INFO.cbSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cbSize$set(MemorySegment seg, long index, int x) {
        _NCRYPT_CIPHER_PADDING_INFO.cbSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwFlags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwFlags"));
    public static VarHandle dwFlags$VH() {
        return _NCRYPT_CIPHER_PADDING_INFO.dwFlags$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwFlags;
     * }
     */
    public static int dwFlags$get(MemorySegment seg) {
        return (int)_NCRYPT_CIPHER_PADDING_INFO.dwFlags$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwFlags;
     * }
     */
    public static void dwFlags$set(MemorySegment seg, int x) {
        _NCRYPT_CIPHER_PADDING_INFO.dwFlags$VH.set(seg, x);
    }
    public static int dwFlags$get(MemorySegment seg, long index) {
        return (int)_NCRYPT_CIPHER_PADDING_INFO.dwFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwFlags$set(MemorySegment seg, long index, int x) {
        _NCRYPT_CIPHER_PADDING_INFO.dwFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pbIV$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pbIV"));
    public static VarHandle pbIV$VH() {
        return _NCRYPT_CIPHER_PADDING_INFO.pbIV$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PUCHAR pbIV;
     * }
     */
    public static MemorySegment pbIV$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_NCRYPT_CIPHER_PADDING_INFO.pbIV$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PUCHAR pbIV;
     * }
     */
    public static void pbIV$set(MemorySegment seg, MemorySegment x) {
        _NCRYPT_CIPHER_PADDING_INFO.pbIV$VH.set(seg, x);
    }
    public static MemorySegment pbIV$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_NCRYPT_CIPHER_PADDING_INFO.pbIV$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pbIV$set(MemorySegment seg, long index, MemorySegment x) {
        _NCRYPT_CIPHER_PADDING_INFO.pbIV$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cbIV$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cbIV"));
    public static VarHandle cbIV$VH() {
        return _NCRYPT_CIPHER_PADDING_INFO.cbIV$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG cbIV;
     * }
     */
    public static int cbIV$get(MemorySegment seg) {
        return (int)_NCRYPT_CIPHER_PADDING_INFO.cbIV$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG cbIV;
     * }
     */
    public static void cbIV$set(MemorySegment seg, int x) {
        _NCRYPT_CIPHER_PADDING_INFO.cbIV$VH.set(seg, x);
    }
    public static int cbIV$get(MemorySegment seg, long index) {
        return (int)_NCRYPT_CIPHER_PADDING_INFO.cbIV$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cbIV$set(MemorySegment seg, long index, int x) {
        _NCRYPT_CIPHER_PADDING_INFO.cbIV$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pbOtherInfo$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pbOtherInfo"));
    public static VarHandle pbOtherInfo$VH() {
        return _NCRYPT_CIPHER_PADDING_INFO.pbOtherInfo$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PUCHAR pbOtherInfo;
     * }
     */
    public static MemorySegment pbOtherInfo$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_NCRYPT_CIPHER_PADDING_INFO.pbOtherInfo$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PUCHAR pbOtherInfo;
     * }
     */
    public static void pbOtherInfo$set(MemorySegment seg, MemorySegment x) {
        _NCRYPT_CIPHER_PADDING_INFO.pbOtherInfo$VH.set(seg, x);
    }
    public static MemorySegment pbOtherInfo$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_NCRYPT_CIPHER_PADDING_INFO.pbOtherInfo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pbOtherInfo$set(MemorySegment seg, long index, MemorySegment x) {
        _NCRYPT_CIPHER_PADDING_INFO.pbOtherInfo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cbOtherInfo$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cbOtherInfo"));
    public static VarHandle cbOtherInfo$VH() {
        return _NCRYPT_CIPHER_PADDING_INFO.cbOtherInfo$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG cbOtherInfo;
     * }
     */
    public static int cbOtherInfo$get(MemorySegment seg) {
        return (int)_NCRYPT_CIPHER_PADDING_INFO.cbOtherInfo$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG cbOtherInfo;
     * }
     */
    public static void cbOtherInfo$set(MemorySegment seg, int x) {
        _NCRYPT_CIPHER_PADDING_INFO.cbOtherInfo$VH.set(seg, x);
    }
    public static int cbOtherInfo$get(MemorySegment seg, long index) {
        return (int)_NCRYPT_CIPHER_PADDING_INFO.cbOtherInfo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cbOtherInfo$set(MemorySegment seg, long index, int x) {
        _NCRYPT_CIPHER_PADDING_INFO.cbOtherInfo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


