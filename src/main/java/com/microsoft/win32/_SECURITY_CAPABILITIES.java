// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _SECURITY_CAPABILITIES {
 *     PSID AppContainerSid;
 *     PSID_AND_ATTRIBUTES Capabilities;
 *     DWORD CapabilityCount;
 *     DWORD Reserved;
 * };
 * }
 */
public class _SECURITY_CAPABILITIES {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("AppContainerSid"),
        Constants$root.C_POINTER$LAYOUT.withName("Capabilities"),
        Constants$root.C_LONG$LAYOUT.withName("CapabilityCount"),
        Constants$root.C_LONG$LAYOUT.withName("Reserved")
    ).withName("_SECURITY_CAPABILITIES");
    public static MemoryLayout $LAYOUT() {
        return _SECURITY_CAPABILITIES.$struct$LAYOUT;
    }
    static final VarHandle AppContainerSid$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AppContainerSid"));
    public static VarHandle AppContainerSid$VH() {
        return _SECURITY_CAPABILITIES.AppContainerSid$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PSID AppContainerSid;
     * }
     */
    public static MemorySegment AppContainerSid$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_SECURITY_CAPABILITIES.AppContainerSid$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PSID AppContainerSid;
     * }
     */
    public static void AppContainerSid$set(MemorySegment seg, MemorySegment x) {
        _SECURITY_CAPABILITIES.AppContainerSid$VH.set(seg, x);
    }
    public static MemorySegment AppContainerSid$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_SECURITY_CAPABILITIES.AppContainerSid$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AppContainerSid$set(MemorySegment seg, long index, MemorySegment x) {
        _SECURITY_CAPABILITIES.AppContainerSid$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Capabilities$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Capabilities"));
    public static VarHandle Capabilities$VH() {
        return _SECURITY_CAPABILITIES.Capabilities$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PSID_AND_ATTRIBUTES Capabilities;
     * }
     */
    public static MemorySegment Capabilities$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_SECURITY_CAPABILITIES.Capabilities$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PSID_AND_ATTRIBUTES Capabilities;
     * }
     */
    public static void Capabilities$set(MemorySegment seg, MemorySegment x) {
        _SECURITY_CAPABILITIES.Capabilities$VH.set(seg, x);
    }
    public static MemorySegment Capabilities$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_SECURITY_CAPABILITIES.Capabilities$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Capabilities$set(MemorySegment seg, long index, MemorySegment x) {
        _SECURITY_CAPABILITIES.Capabilities$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle CapabilityCount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("CapabilityCount"));
    public static VarHandle CapabilityCount$VH() {
        return _SECURITY_CAPABILITIES.CapabilityCount$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD CapabilityCount;
     * }
     */
    public static int CapabilityCount$get(MemorySegment seg) {
        return (int)_SECURITY_CAPABILITIES.CapabilityCount$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD CapabilityCount;
     * }
     */
    public static void CapabilityCount$set(MemorySegment seg, int x) {
        _SECURITY_CAPABILITIES.CapabilityCount$VH.set(seg, x);
    }
    public static int CapabilityCount$get(MemorySegment seg, long index) {
        return (int)_SECURITY_CAPABILITIES.CapabilityCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CapabilityCount$set(MemorySegment seg, long index, int x) {
        _SECURITY_CAPABILITIES.CapabilityCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Reserved$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Reserved"));
    public static VarHandle Reserved$VH() {
        return _SECURITY_CAPABILITIES.Reserved$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Reserved;
     * }
     */
    public static int Reserved$get(MemorySegment seg) {
        return (int)_SECURITY_CAPABILITIES.Reserved$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Reserved;
     * }
     */
    public static void Reserved$set(MemorySegment seg, int x) {
        _SECURITY_CAPABILITIES.Reserved$VH.set(seg, x);
    }
    public static int Reserved$get(MemorySegment seg, long index) {
        return (int)_SECURITY_CAPABILITIES.Reserved$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Reserved$set(MemorySegment seg, long index, int x) {
        _SECURITY_CAPABILITIES.Reserved$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


