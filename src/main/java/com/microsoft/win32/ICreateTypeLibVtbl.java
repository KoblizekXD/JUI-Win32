// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct ICreateTypeLibVtbl {
 *     HRESULT (*QueryInterface)(ICreateTypeLib*,const IID*,void**);
 *     ULONG (*AddRef)(ICreateTypeLib*);
 *     ULONG (*Release)(ICreateTypeLib*);
 *     HRESULT (*CreateTypeInfo)(ICreateTypeLib*,LPOLESTR,TYPEKIND,ICreateTypeInfo**);
 *     HRESULT (*SetName)(ICreateTypeLib*,LPOLESTR);
 *     HRESULT (*SetVersion)(ICreateTypeLib*,WORD,WORD);
 *     HRESULT (*SetGuid)(ICreateTypeLib*,const GUID*);
 *     HRESULT (*SetDocString)(ICreateTypeLib*,LPOLESTR);
 *     HRESULT (*SetHelpFileName)(ICreateTypeLib*,LPOLESTR);
 *     HRESULT (*SetHelpContext)(ICreateTypeLib*,DWORD);
 *     HRESULT (*SetLcid)(ICreateTypeLib*,LCID);
 *     HRESULT (*SetLibFlags)(ICreateTypeLib*,UINT);
 *     HRESULT (*SaveAllChanges)(ICreateTypeLib*);
 * };
 * }
 */
public class ICreateTypeLibVtbl {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("CreateTypeInfo"),
        Constants$root.C_POINTER$LAYOUT.withName("SetName"),
        Constants$root.C_POINTER$LAYOUT.withName("SetVersion"),
        Constants$root.C_POINTER$LAYOUT.withName("SetGuid"),
        Constants$root.C_POINTER$LAYOUT.withName("SetDocString"),
        Constants$root.C_POINTER$LAYOUT.withName("SetHelpFileName"),
        Constants$root.C_POINTER$LAYOUT.withName("SetHelpContext"),
        Constants$root.C_POINTER$LAYOUT.withName("SetLcid"),
        Constants$root.C_POINTER$LAYOUT.withName("SetLibFlags"),
        Constants$root.C_POINTER$LAYOUT.withName("SaveAllChanges")
    ).withName("ICreateTypeLibVtbl");
    public static MemoryLayout $LAYOUT() {
        return ICreateTypeLibVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor QueryInterface_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_UP$MH = RuntimeHelper.upcallHandle(QueryInterface.class, "apply", ICreateTypeLibVtbl.QueryInterface_UP$FUNC);
    static final FunctionDescriptor QueryInterface_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeLibVtbl.QueryInterface_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(ICreateTypeLib*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeLibVtbl.QueryInterface_UP$MH, fi, ICreateTypeLibVtbl.QueryInterface$FUNC, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)ICreateTypeLibVtbl.QueryInterface_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return ICreateTypeLibVtbl.QueryInterface$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(ICreateTypeLib*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeLibVtbl.QueryInterface$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(ICreateTypeLib*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeLibVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeLibVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeLibVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, SegmentScope scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor AddRef_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_UP$MH = RuntimeHelper.upcallHandle(AddRef.class, "apply", ICreateTypeLibVtbl.AddRef_UP$FUNC);
    static final FunctionDescriptor AddRef_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeLibVtbl.AddRef_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*AddRef)(ICreateTypeLib*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeLibVtbl.AddRef_UP$MH, fi, ICreateTypeLibVtbl.AddRef$FUNC, scope);
        }
        static AddRef ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)ICreateTypeLibVtbl.AddRef_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return ICreateTypeLibVtbl.AddRef$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(ICreateTypeLib*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeLibVtbl.AddRef$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(ICreateTypeLib*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeLibVtbl.AddRef$VH.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeLibVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeLibVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, SegmentScope scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Release_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_UP$MH = RuntimeHelper.upcallHandle(Release.class, "apply", ICreateTypeLibVtbl.Release_UP$FUNC);
    static final FunctionDescriptor Release_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeLibVtbl.Release_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*Release)(ICreateTypeLib*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeLibVtbl.Release_UP$MH, fi, ICreateTypeLibVtbl.Release$FUNC, scope);
        }
        static Release ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)ICreateTypeLibVtbl.Release_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return ICreateTypeLibVtbl.Release$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(ICreateTypeLib*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeLibVtbl.Release$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(ICreateTypeLib*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeLibVtbl.Release$VH.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeLibVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeLibVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, SegmentScope scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    static final FunctionDescriptor CreateTypeInfo$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor CreateTypeInfo_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle CreateTypeInfo_UP$MH = RuntimeHelper.upcallHandle(CreateTypeInfo.class, "apply", ICreateTypeLibVtbl.CreateTypeInfo_UP$FUNC);
    static final FunctionDescriptor CreateTypeInfo_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle CreateTypeInfo_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeLibVtbl.CreateTypeInfo_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*CreateTypeInfo)(ICreateTypeLib*,LPOLESTR,TYPEKIND,ICreateTypeInfo**);
     * }
     */
    public interface CreateTypeInfo {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(CreateTypeInfo fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeLibVtbl.CreateTypeInfo_UP$MH, fi, ICreateTypeLibVtbl.CreateTypeInfo$FUNC, scope);
        }
        static CreateTypeInfo ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)ICreateTypeLibVtbl.CreateTypeInfo_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle CreateTypeInfo$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("CreateTypeInfo"));
    public static VarHandle CreateTypeInfo$VH() {
        return ICreateTypeLibVtbl.CreateTypeInfo$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*CreateTypeInfo)(ICreateTypeLib*,LPOLESTR,TYPEKIND,ICreateTypeInfo**);
     * }
     */
    public static MemorySegment CreateTypeInfo$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeLibVtbl.CreateTypeInfo$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*CreateTypeInfo)(ICreateTypeLib*,LPOLESTR,TYPEKIND,ICreateTypeInfo**);
     * }
     */
    public static void CreateTypeInfo$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeLibVtbl.CreateTypeInfo$VH.set(seg, x);
    }
    public static MemorySegment CreateTypeInfo$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeLibVtbl.CreateTypeInfo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CreateTypeInfo$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeLibVtbl.CreateTypeInfo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static CreateTypeInfo CreateTypeInfo(MemorySegment segment, SegmentScope scope) {
        return CreateTypeInfo.ofAddress(CreateTypeInfo$get(segment), scope);
    }
    static final FunctionDescriptor SetName$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor SetName_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetName_UP$MH = RuntimeHelper.upcallHandle(SetName.class, "apply", ICreateTypeLibVtbl.SetName_UP$FUNC);
    static final FunctionDescriptor SetName_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetName_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeLibVtbl.SetName_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetName)(ICreateTypeLib*,LPOLESTR);
     * }
     */
    public interface SetName {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(SetName fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeLibVtbl.SetName_UP$MH, fi, ICreateTypeLibVtbl.SetName$FUNC, scope);
        }
        static SetName ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)ICreateTypeLibVtbl.SetName_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetName$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetName"));
    public static VarHandle SetName$VH() {
        return ICreateTypeLibVtbl.SetName$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetName)(ICreateTypeLib*,LPOLESTR);
     * }
     */
    public static MemorySegment SetName$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeLibVtbl.SetName$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetName)(ICreateTypeLib*,LPOLESTR);
     * }
     */
    public static void SetName$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeLibVtbl.SetName$VH.set(seg, x);
    }
    public static MemorySegment SetName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeLibVtbl.SetName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetName$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeLibVtbl.SetName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetName SetName(MemorySegment segment, SegmentScope scope) {
        return SetName.ofAddress(SetName$get(segment), scope);
    }
    static final FunctionDescriptor SetVersion$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_SHORT$LAYOUT,
        Constants$root.C_SHORT$LAYOUT
    );
    static final FunctionDescriptor SetVersion_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_SHORT$LAYOUT,
        Constants$root.C_SHORT$LAYOUT
    );
    static final MethodHandle SetVersion_UP$MH = RuntimeHelper.upcallHandle(SetVersion.class, "apply", ICreateTypeLibVtbl.SetVersion_UP$FUNC);
    static final FunctionDescriptor SetVersion_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_SHORT$LAYOUT,
        Constants$root.C_SHORT$LAYOUT
    );
    static final MethodHandle SetVersion_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeLibVtbl.SetVersion_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetVersion)(ICreateTypeLib*,WORD,WORD);
     * }
     */
    public interface SetVersion {

        int apply(java.lang.foreign.MemorySegment _x0, short _x1, short _x2);
        static MemorySegment allocate(SetVersion fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeLibVtbl.SetVersion_UP$MH, fi, ICreateTypeLibVtbl.SetVersion$FUNC, scope);
        }
        static SetVersion ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, short __x1, short __x2) -> {
                try {
                    return (int)ICreateTypeLibVtbl.SetVersion_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetVersion$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetVersion"));
    public static VarHandle SetVersion$VH() {
        return ICreateTypeLibVtbl.SetVersion$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetVersion)(ICreateTypeLib*,WORD,WORD);
     * }
     */
    public static MemorySegment SetVersion$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeLibVtbl.SetVersion$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetVersion)(ICreateTypeLib*,WORD,WORD);
     * }
     */
    public static void SetVersion$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeLibVtbl.SetVersion$VH.set(seg, x);
    }
    public static MemorySegment SetVersion$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeLibVtbl.SetVersion$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetVersion$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeLibVtbl.SetVersion$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetVersion SetVersion(MemorySegment segment, SegmentScope scope) {
        return SetVersion.ofAddress(SetVersion$get(segment), scope);
    }
    static final FunctionDescriptor SetGuid$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor SetGuid_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetGuid_UP$MH = RuntimeHelper.upcallHandle(SetGuid.class, "apply", ICreateTypeLibVtbl.SetGuid_UP$FUNC);
    static final FunctionDescriptor SetGuid_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetGuid_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeLibVtbl.SetGuid_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetGuid)(ICreateTypeLib*,const GUID*);
     * }
     */
    public interface SetGuid {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(SetGuid fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeLibVtbl.SetGuid_UP$MH, fi, ICreateTypeLibVtbl.SetGuid$FUNC, scope);
        }
        static SetGuid ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)ICreateTypeLibVtbl.SetGuid_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetGuid$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetGuid"));
    public static VarHandle SetGuid$VH() {
        return ICreateTypeLibVtbl.SetGuid$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetGuid)(ICreateTypeLib*,const GUID*);
     * }
     */
    public static MemorySegment SetGuid$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeLibVtbl.SetGuid$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetGuid)(ICreateTypeLib*,const GUID*);
     * }
     */
    public static void SetGuid$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeLibVtbl.SetGuid$VH.set(seg, x);
    }
    public static MemorySegment SetGuid$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeLibVtbl.SetGuid$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetGuid$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeLibVtbl.SetGuid$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetGuid SetGuid(MemorySegment segment, SegmentScope scope) {
        return SetGuid.ofAddress(SetGuid$get(segment), scope);
    }
    static final FunctionDescriptor SetDocString$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor SetDocString_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetDocString_UP$MH = RuntimeHelper.upcallHandle(SetDocString.class, "apply", ICreateTypeLibVtbl.SetDocString_UP$FUNC);
    static final FunctionDescriptor SetDocString_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetDocString_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeLibVtbl.SetDocString_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetDocString)(ICreateTypeLib*,LPOLESTR);
     * }
     */
    public interface SetDocString {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(SetDocString fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeLibVtbl.SetDocString_UP$MH, fi, ICreateTypeLibVtbl.SetDocString$FUNC, scope);
        }
        static SetDocString ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)ICreateTypeLibVtbl.SetDocString_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetDocString$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetDocString"));
    public static VarHandle SetDocString$VH() {
        return ICreateTypeLibVtbl.SetDocString$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetDocString)(ICreateTypeLib*,LPOLESTR);
     * }
     */
    public static MemorySegment SetDocString$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeLibVtbl.SetDocString$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetDocString)(ICreateTypeLib*,LPOLESTR);
     * }
     */
    public static void SetDocString$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeLibVtbl.SetDocString$VH.set(seg, x);
    }
    public static MemorySegment SetDocString$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeLibVtbl.SetDocString$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetDocString$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeLibVtbl.SetDocString$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetDocString SetDocString(MemorySegment segment, SegmentScope scope) {
        return SetDocString.ofAddress(SetDocString$get(segment), scope);
    }
    static final FunctionDescriptor SetHelpFileName$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor SetHelpFileName_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetHelpFileName_UP$MH = RuntimeHelper.upcallHandle(SetHelpFileName.class, "apply", ICreateTypeLibVtbl.SetHelpFileName_UP$FUNC);
    static final FunctionDescriptor SetHelpFileName_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetHelpFileName_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeLibVtbl.SetHelpFileName_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetHelpFileName)(ICreateTypeLib*,LPOLESTR);
     * }
     */
    public interface SetHelpFileName {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(SetHelpFileName fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeLibVtbl.SetHelpFileName_UP$MH, fi, ICreateTypeLibVtbl.SetHelpFileName$FUNC, scope);
        }
        static SetHelpFileName ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)ICreateTypeLibVtbl.SetHelpFileName_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetHelpFileName$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetHelpFileName"));
    public static VarHandle SetHelpFileName$VH() {
        return ICreateTypeLibVtbl.SetHelpFileName$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetHelpFileName)(ICreateTypeLib*,LPOLESTR);
     * }
     */
    public static MemorySegment SetHelpFileName$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeLibVtbl.SetHelpFileName$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetHelpFileName)(ICreateTypeLib*,LPOLESTR);
     * }
     */
    public static void SetHelpFileName$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeLibVtbl.SetHelpFileName$VH.set(seg, x);
    }
    public static MemorySegment SetHelpFileName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeLibVtbl.SetHelpFileName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetHelpFileName$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeLibVtbl.SetHelpFileName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetHelpFileName SetHelpFileName(MemorySegment segment, SegmentScope scope) {
        return SetHelpFileName.ofAddress(SetHelpFileName$get(segment), scope);
    }
    static final FunctionDescriptor SetHelpContext$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor SetHelpContext_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle SetHelpContext_UP$MH = RuntimeHelper.upcallHandle(SetHelpContext.class, "apply", ICreateTypeLibVtbl.SetHelpContext_UP$FUNC);
    static final FunctionDescriptor SetHelpContext_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle SetHelpContext_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeLibVtbl.SetHelpContext_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetHelpContext)(ICreateTypeLib*,DWORD);
     * }
     */
    public interface SetHelpContext {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(SetHelpContext fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeLibVtbl.SetHelpContext_UP$MH, fi, ICreateTypeLibVtbl.SetHelpContext$FUNC, scope);
        }
        static SetHelpContext ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)ICreateTypeLibVtbl.SetHelpContext_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetHelpContext$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetHelpContext"));
    public static VarHandle SetHelpContext$VH() {
        return ICreateTypeLibVtbl.SetHelpContext$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetHelpContext)(ICreateTypeLib*,DWORD);
     * }
     */
    public static MemorySegment SetHelpContext$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeLibVtbl.SetHelpContext$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetHelpContext)(ICreateTypeLib*,DWORD);
     * }
     */
    public static void SetHelpContext$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeLibVtbl.SetHelpContext$VH.set(seg, x);
    }
    public static MemorySegment SetHelpContext$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeLibVtbl.SetHelpContext$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetHelpContext$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeLibVtbl.SetHelpContext$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetHelpContext SetHelpContext(MemorySegment segment, SegmentScope scope) {
        return SetHelpContext.ofAddress(SetHelpContext$get(segment), scope);
    }
    static final FunctionDescriptor SetLcid$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor SetLcid_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle SetLcid_UP$MH = RuntimeHelper.upcallHandle(SetLcid.class, "apply", ICreateTypeLibVtbl.SetLcid_UP$FUNC);
    static final FunctionDescriptor SetLcid_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle SetLcid_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeLibVtbl.SetLcid_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetLcid)(ICreateTypeLib*,LCID);
     * }
     */
    public interface SetLcid {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(SetLcid fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeLibVtbl.SetLcid_UP$MH, fi, ICreateTypeLibVtbl.SetLcid$FUNC, scope);
        }
        static SetLcid ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)ICreateTypeLibVtbl.SetLcid_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetLcid$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetLcid"));
    public static VarHandle SetLcid$VH() {
        return ICreateTypeLibVtbl.SetLcid$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetLcid)(ICreateTypeLib*,LCID);
     * }
     */
    public static MemorySegment SetLcid$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeLibVtbl.SetLcid$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetLcid)(ICreateTypeLib*,LCID);
     * }
     */
    public static void SetLcid$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeLibVtbl.SetLcid$VH.set(seg, x);
    }
    public static MemorySegment SetLcid$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeLibVtbl.SetLcid$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetLcid$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeLibVtbl.SetLcid$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetLcid SetLcid(MemorySegment segment, SegmentScope scope) {
        return SetLcid.ofAddress(SetLcid$get(segment), scope);
    }
    static final FunctionDescriptor SetLibFlags$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor SetLibFlags_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle SetLibFlags_UP$MH = RuntimeHelper.upcallHandle(SetLibFlags.class, "apply", ICreateTypeLibVtbl.SetLibFlags_UP$FUNC);
    static final FunctionDescriptor SetLibFlags_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle SetLibFlags_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeLibVtbl.SetLibFlags_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetLibFlags)(ICreateTypeLib*,UINT);
     * }
     */
    public interface SetLibFlags {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(SetLibFlags fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeLibVtbl.SetLibFlags_UP$MH, fi, ICreateTypeLibVtbl.SetLibFlags$FUNC, scope);
        }
        static SetLibFlags ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)ICreateTypeLibVtbl.SetLibFlags_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetLibFlags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetLibFlags"));
    public static VarHandle SetLibFlags$VH() {
        return ICreateTypeLibVtbl.SetLibFlags$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetLibFlags)(ICreateTypeLib*,UINT);
     * }
     */
    public static MemorySegment SetLibFlags$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeLibVtbl.SetLibFlags$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetLibFlags)(ICreateTypeLib*,UINT);
     * }
     */
    public static void SetLibFlags$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeLibVtbl.SetLibFlags$VH.set(seg, x);
    }
    public static MemorySegment SetLibFlags$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeLibVtbl.SetLibFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetLibFlags$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeLibVtbl.SetLibFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetLibFlags SetLibFlags(MemorySegment segment, SegmentScope scope) {
        return SetLibFlags.ofAddress(SetLibFlags$get(segment), scope);
    }
    static final FunctionDescriptor SaveAllChanges$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor SaveAllChanges_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SaveAllChanges_UP$MH = RuntimeHelper.upcallHandle(SaveAllChanges.class, "apply", ICreateTypeLibVtbl.SaveAllChanges_UP$FUNC);
    static final FunctionDescriptor SaveAllChanges_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SaveAllChanges_DOWN$MH = RuntimeHelper.downcallHandle(
        ICreateTypeLibVtbl.SaveAllChanges_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SaveAllChanges)(ICreateTypeLib*);
     * }
     */
    public interface SaveAllChanges {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(SaveAllChanges fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ICreateTypeLibVtbl.SaveAllChanges_UP$MH, fi, ICreateTypeLibVtbl.SaveAllChanges$FUNC, scope);
        }
        static SaveAllChanges ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)ICreateTypeLibVtbl.SaveAllChanges_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SaveAllChanges$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SaveAllChanges"));
    public static VarHandle SaveAllChanges$VH() {
        return ICreateTypeLibVtbl.SaveAllChanges$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SaveAllChanges)(ICreateTypeLib*);
     * }
     */
    public static MemorySegment SaveAllChanges$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ICreateTypeLibVtbl.SaveAllChanges$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SaveAllChanges)(ICreateTypeLib*);
     * }
     */
    public static void SaveAllChanges$set(MemorySegment seg, MemorySegment x) {
        ICreateTypeLibVtbl.SaveAllChanges$VH.set(seg, x);
    }
    public static MemorySegment SaveAllChanges$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ICreateTypeLibVtbl.SaveAllChanges$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SaveAllChanges$set(MemorySegment seg, long index, MemorySegment x) {
        ICreateTypeLibVtbl.SaveAllChanges$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SaveAllChanges SaveAllChanges(MemorySegment segment, SegmentScope scope) {
        return SaveAllChanges.ofAddress(SaveAllChanges$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


