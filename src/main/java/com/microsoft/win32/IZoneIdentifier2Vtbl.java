// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IZoneIdentifier2Vtbl {
 *     HRESULT (*QueryInterface)(IZoneIdentifier2*,const IID*,void**);
 *     ULONG (*AddRef)(IZoneIdentifier2*);
 *     ULONG (*Release)(IZoneIdentifier2*);
 *     HRESULT (*GetId)(IZoneIdentifier2*,DWORD*);
 *     HRESULT (*SetId)(IZoneIdentifier2*,DWORD);
 *     HRESULT (*Remove)(IZoneIdentifier2*);
 *     HRESULT (*GetLastWriterPackageFamilyName)(IZoneIdentifier2*,LPWSTR*);
 *     HRESULT (*SetLastWriterPackageFamilyName)(IZoneIdentifier2*,LPCWSTR);
 *     HRESULT (*RemoveLastWriterPackageFamilyName)(IZoneIdentifier2*);
 *     HRESULT (*GetAppZoneId)(IZoneIdentifier2*,DWORD*);
 *     HRESULT (*SetAppZoneId)(IZoneIdentifier2*,DWORD);
 *     HRESULT (*RemoveAppZoneId)(IZoneIdentifier2*);
 * };
 * }
 */
public class IZoneIdentifier2Vtbl {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("GetId"),
        Constants$root.C_POINTER$LAYOUT.withName("SetId"),
        Constants$root.C_POINTER$LAYOUT.withName("Remove"),
        Constants$root.C_POINTER$LAYOUT.withName("GetLastWriterPackageFamilyName"),
        Constants$root.C_POINTER$LAYOUT.withName("SetLastWriterPackageFamilyName"),
        Constants$root.C_POINTER$LAYOUT.withName("RemoveLastWriterPackageFamilyName"),
        Constants$root.C_POINTER$LAYOUT.withName("GetAppZoneId"),
        Constants$root.C_POINTER$LAYOUT.withName("SetAppZoneId"),
        Constants$root.C_POINTER$LAYOUT.withName("RemoveAppZoneId")
    ).withName("IZoneIdentifier2Vtbl");
    public static MemoryLayout $LAYOUT() {
        return IZoneIdentifier2Vtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor QueryInterface_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_UP$MH = RuntimeHelper.upcallHandle(QueryInterface.class, "apply", IZoneIdentifier2Vtbl.QueryInterface_UP$FUNC);
    static final FunctionDescriptor QueryInterface_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_DOWN$MH = RuntimeHelper.downcallHandle(
        IZoneIdentifier2Vtbl.QueryInterface_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(IZoneIdentifier2*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IZoneIdentifier2Vtbl.QueryInterface_UP$MH, fi, IZoneIdentifier2Vtbl.QueryInterface$FUNC, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IZoneIdentifier2Vtbl.QueryInterface_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return IZoneIdentifier2Vtbl.QueryInterface$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IZoneIdentifier2*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IZoneIdentifier2Vtbl.QueryInterface$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IZoneIdentifier2*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        IZoneIdentifier2Vtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IZoneIdentifier2Vtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        IZoneIdentifier2Vtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, SegmentScope scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor AddRef_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_UP$MH = RuntimeHelper.upcallHandle(AddRef.class, "apply", IZoneIdentifier2Vtbl.AddRef_UP$FUNC);
    static final FunctionDescriptor AddRef_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_DOWN$MH = RuntimeHelper.downcallHandle(
        IZoneIdentifier2Vtbl.AddRef_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*AddRef)(IZoneIdentifier2*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IZoneIdentifier2Vtbl.AddRef_UP$MH, fi, IZoneIdentifier2Vtbl.AddRef$FUNC, scope);
        }
        static AddRef ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IZoneIdentifier2Vtbl.AddRef_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return IZoneIdentifier2Vtbl.AddRef$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(IZoneIdentifier2*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IZoneIdentifier2Vtbl.AddRef$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(IZoneIdentifier2*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        IZoneIdentifier2Vtbl.AddRef$VH.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IZoneIdentifier2Vtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        IZoneIdentifier2Vtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, SegmentScope scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Release_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_UP$MH = RuntimeHelper.upcallHandle(Release.class, "apply", IZoneIdentifier2Vtbl.Release_UP$FUNC);
    static final FunctionDescriptor Release_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_DOWN$MH = RuntimeHelper.downcallHandle(
        IZoneIdentifier2Vtbl.Release_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*Release)(IZoneIdentifier2*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IZoneIdentifier2Vtbl.Release_UP$MH, fi, IZoneIdentifier2Vtbl.Release$FUNC, scope);
        }
        static Release ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IZoneIdentifier2Vtbl.Release_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return IZoneIdentifier2Vtbl.Release$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(IZoneIdentifier2*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IZoneIdentifier2Vtbl.Release$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(IZoneIdentifier2*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        IZoneIdentifier2Vtbl.Release$VH.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IZoneIdentifier2Vtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        IZoneIdentifier2Vtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, SegmentScope scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    static final FunctionDescriptor GetId$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetId_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetId_UP$MH = RuntimeHelper.upcallHandle(GetId.class, "apply", IZoneIdentifier2Vtbl.GetId_UP$FUNC);
    static final FunctionDescriptor GetId_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetId_DOWN$MH = RuntimeHelper.downcallHandle(
        IZoneIdentifier2Vtbl.GetId_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetId)(IZoneIdentifier2*,DWORD*);
     * }
     */
    public interface GetId {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetId fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IZoneIdentifier2Vtbl.GetId_UP$MH, fi, IZoneIdentifier2Vtbl.GetId$FUNC, scope);
        }
        static GetId ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IZoneIdentifier2Vtbl.GetId_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetId$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetId"));
    public static VarHandle GetId$VH() {
        return IZoneIdentifier2Vtbl.GetId$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetId)(IZoneIdentifier2*,DWORD*);
     * }
     */
    public static MemorySegment GetId$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IZoneIdentifier2Vtbl.GetId$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetId)(IZoneIdentifier2*,DWORD*);
     * }
     */
    public static void GetId$set(MemorySegment seg, MemorySegment x) {
        IZoneIdentifier2Vtbl.GetId$VH.set(seg, x);
    }
    public static MemorySegment GetId$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IZoneIdentifier2Vtbl.GetId$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetId$set(MemorySegment seg, long index, MemorySegment x) {
        IZoneIdentifier2Vtbl.GetId$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetId GetId(MemorySegment segment, SegmentScope scope) {
        return GetId.ofAddress(GetId$get(segment), scope);
    }
    static final FunctionDescriptor SetId$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor SetId_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle SetId_UP$MH = RuntimeHelper.upcallHandle(SetId.class, "apply", IZoneIdentifier2Vtbl.SetId_UP$FUNC);
    static final FunctionDescriptor SetId_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle SetId_DOWN$MH = RuntimeHelper.downcallHandle(
        IZoneIdentifier2Vtbl.SetId_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetId)(IZoneIdentifier2*,DWORD);
     * }
     */
    public interface SetId {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(SetId fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IZoneIdentifier2Vtbl.SetId_UP$MH, fi, IZoneIdentifier2Vtbl.SetId$FUNC, scope);
        }
        static SetId ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)IZoneIdentifier2Vtbl.SetId_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetId$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetId"));
    public static VarHandle SetId$VH() {
        return IZoneIdentifier2Vtbl.SetId$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetId)(IZoneIdentifier2*,DWORD);
     * }
     */
    public static MemorySegment SetId$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IZoneIdentifier2Vtbl.SetId$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetId)(IZoneIdentifier2*,DWORD);
     * }
     */
    public static void SetId$set(MemorySegment seg, MemorySegment x) {
        IZoneIdentifier2Vtbl.SetId$VH.set(seg, x);
    }
    public static MemorySegment SetId$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IZoneIdentifier2Vtbl.SetId$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetId$set(MemorySegment seg, long index, MemorySegment x) {
        IZoneIdentifier2Vtbl.SetId$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetId SetId(MemorySegment segment, SegmentScope scope) {
        return SetId.ofAddress(SetId$get(segment), scope);
    }
    static final FunctionDescriptor Remove$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Remove_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Remove_UP$MH = RuntimeHelper.upcallHandle(Remove.class, "apply", IZoneIdentifier2Vtbl.Remove_UP$FUNC);
    static final FunctionDescriptor Remove_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Remove_DOWN$MH = RuntimeHelper.downcallHandle(
        IZoneIdentifier2Vtbl.Remove_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*Remove)(IZoneIdentifier2*);
     * }
     */
    public interface Remove {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Remove fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IZoneIdentifier2Vtbl.Remove_UP$MH, fi, IZoneIdentifier2Vtbl.Remove$FUNC, scope);
        }
        static Remove ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IZoneIdentifier2Vtbl.Remove_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Remove$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Remove"));
    public static VarHandle Remove$VH() {
        return IZoneIdentifier2Vtbl.Remove$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Remove)(IZoneIdentifier2*);
     * }
     */
    public static MemorySegment Remove$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IZoneIdentifier2Vtbl.Remove$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Remove)(IZoneIdentifier2*);
     * }
     */
    public static void Remove$set(MemorySegment seg, MemorySegment x) {
        IZoneIdentifier2Vtbl.Remove$VH.set(seg, x);
    }
    public static MemorySegment Remove$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IZoneIdentifier2Vtbl.Remove$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Remove$set(MemorySegment seg, long index, MemorySegment x) {
        IZoneIdentifier2Vtbl.Remove$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Remove Remove(MemorySegment segment, SegmentScope scope) {
        return Remove.ofAddress(Remove$get(segment), scope);
    }
    static final FunctionDescriptor GetLastWriterPackageFamilyName$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetLastWriterPackageFamilyName_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetLastWriterPackageFamilyName_UP$MH = RuntimeHelper.upcallHandle(GetLastWriterPackageFamilyName.class, "apply", IZoneIdentifier2Vtbl.GetLastWriterPackageFamilyName_UP$FUNC);
    static final FunctionDescriptor GetLastWriterPackageFamilyName_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetLastWriterPackageFamilyName_DOWN$MH = RuntimeHelper.downcallHandle(
        IZoneIdentifier2Vtbl.GetLastWriterPackageFamilyName_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetLastWriterPackageFamilyName)(IZoneIdentifier2*,LPWSTR*);
     * }
     */
    public interface GetLastWriterPackageFamilyName {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetLastWriterPackageFamilyName fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IZoneIdentifier2Vtbl.GetLastWriterPackageFamilyName_UP$MH, fi, IZoneIdentifier2Vtbl.GetLastWriterPackageFamilyName$FUNC, scope);
        }
        static GetLastWriterPackageFamilyName ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IZoneIdentifier2Vtbl.GetLastWriterPackageFamilyName_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetLastWriterPackageFamilyName$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetLastWriterPackageFamilyName"));
    public static VarHandle GetLastWriterPackageFamilyName$VH() {
        return IZoneIdentifier2Vtbl.GetLastWriterPackageFamilyName$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetLastWriterPackageFamilyName)(IZoneIdentifier2*,LPWSTR*);
     * }
     */
    public static MemorySegment GetLastWriterPackageFamilyName$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IZoneIdentifier2Vtbl.GetLastWriterPackageFamilyName$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetLastWriterPackageFamilyName)(IZoneIdentifier2*,LPWSTR*);
     * }
     */
    public static void GetLastWriterPackageFamilyName$set(MemorySegment seg, MemorySegment x) {
        IZoneIdentifier2Vtbl.GetLastWriterPackageFamilyName$VH.set(seg, x);
    }
    public static MemorySegment GetLastWriterPackageFamilyName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IZoneIdentifier2Vtbl.GetLastWriterPackageFamilyName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetLastWriterPackageFamilyName$set(MemorySegment seg, long index, MemorySegment x) {
        IZoneIdentifier2Vtbl.GetLastWriterPackageFamilyName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetLastWriterPackageFamilyName GetLastWriterPackageFamilyName(MemorySegment segment, SegmentScope scope) {
        return GetLastWriterPackageFamilyName.ofAddress(GetLastWriterPackageFamilyName$get(segment), scope);
    }
    static final FunctionDescriptor SetLastWriterPackageFamilyName$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor SetLastWriterPackageFamilyName_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetLastWriterPackageFamilyName_UP$MH = RuntimeHelper.upcallHandle(SetLastWriterPackageFamilyName.class, "apply", IZoneIdentifier2Vtbl.SetLastWriterPackageFamilyName_UP$FUNC);
    static final FunctionDescriptor SetLastWriterPackageFamilyName_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetLastWriterPackageFamilyName_DOWN$MH = RuntimeHelper.downcallHandle(
        IZoneIdentifier2Vtbl.SetLastWriterPackageFamilyName_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetLastWriterPackageFamilyName)(IZoneIdentifier2*,LPCWSTR);
     * }
     */
    public interface SetLastWriterPackageFamilyName {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(SetLastWriterPackageFamilyName fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IZoneIdentifier2Vtbl.SetLastWriterPackageFamilyName_UP$MH, fi, IZoneIdentifier2Vtbl.SetLastWriterPackageFamilyName$FUNC, scope);
        }
        static SetLastWriterPackageFamilyName ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IZoneIdentifier2Vtbl.SetLastWriterPackageFamilyName_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetLastWriterPackageFamilyName$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetLastWriterPackageFamilyName"));
    public static VarHandle SetLastWriterPackageFamilyName$VH() {
        return IZoneIdentifier2Vtbl.SetLastWriterPackageFamilyName$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetLastWriterPackageFamilyName)(IZoneIdentifier2*,LPCWSTR);
     * }
     */
    public static MemorySegment SetLastWriterPackageFamilyName$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IZoneIdentifier2Vtbl.SetLastWriterPackageFamilyName$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetLastWriterPackageFamilyName)(IZoneIdentifier2*,LPCWSTR);
     * }
     */
    public static void SetLastWriterPackageFamilyName$set(MemorySegment seg, MemorySegment x) {
        IZoneIdentifier2Vtbl.SetLastWriterPackageFamilyName$VH.set(seg, x);
    }
    public static MemorySegment SetLastWriterPackageFamilyName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IZoneIdentifier2Vtbl.SetLastWriterPackageFamilyName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetLastWriterPackageFamilyName$set(MemorySegment seg, long index, MemorySegment x) {
        IZoneIdentifier2Vtbl.SetLastWriterPackageFamilyName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetLastWriterPackageFamilyName SetLastWriterPackageFamilyName(MemorySegment segment, SegmentScope scope) {
        return SetLastWriterPackageFamilyName.ofAddress(SetLastWriterPackageFamilyName$get(segment), scope);
    }
    static final FunctionDescriptor RemoveLastWriterPackageFamilyName$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor RemoveLastWriterPackageFamilyName_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle RemoveLastWriterPackageFamilyName_UP$MH = RuntimeHelper.upcallHandle(RemoveLastWriterPackageFamilyName.class, "apply", IZoneIdentifier2Vtbl.RemoveLastWriterPackageFamilyName_UP$FUNC);
    static final FunctionDescriptor RemoveLastWriterPackageFamilyName_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle RemoveLastWriterPackageFamilyName_DOWN$MH = RuntimeHelper.downcallHandle(
        IZoneIdentifier2Vtbl.RemoveLastWriterPackageFamilyName_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*RemoveLastWriterPackageFamilyName)(IZoneIdentifier2*);
     * }
     */
    public interface RemoveLastWriterPackageFamilyName {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(RemoveLastWriterPackageFamilyName fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IZoneIdentifier2Vtbl.RemoveLastWriterPackageFamilyName_UP$MH, fi, IZoneIdentifier2Vtbl.RemoveLastWriterPackageFamilyName$FUNC, scope);
        }
        static RemoveLastWriterPackageFamilyName ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IZoneIdentifier2Vtbl.RemoveLastWriterPackageFamilyName_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle RemoveLastWriterPackageFamilyName$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("RemoveLastWriterPackageFamilyName"));
    public static VarHandle RemoveLastWriterPackageFamilyName$VH() {
        return IZoneIdentifier2Vtbl.RemoveLastWriterPackageFamilyName$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*RemoveLastWriterPackageFamilyName)(IZoneIdentifier2*);
     * }
     */
    public static MemorySegment RemoveLastWriterPackageFamilyName$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IZoneIdentifier2Vtbl.RemoveLastWriterPackageFamilyName$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*RemoveLastWriterPackageFamilyName)(IZoneIdentifier2*);
     * }
     */
    public static void RemoveLastWriterPackageFamilyName$set(MemorySegment seg, MemorySegment x) {
        IZoneIdentifier2Vtbl.RemoveLastWriterPackageFamilyName$VH.set(seg, x);
    }
    public static MemorySegment RemoveLastWriterPackageFamilyName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IZoneIdentifier2Vtbl.RemoveLastWriterPackageFamilyName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void RemoveLastWriterPackageFamilyName$set(MemorySegment seg, long index, MemorySegment x) {
        IZoneIdentifier2Vtbl.RemoveLastWriterPackageFamilyName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static RemoveLastWriterPackageFamilyName RemoveLastWriterPackageFamilyName(MemorySegment segment, SegmentScope scope) {
        return RemoveLastWriterPackageFamilyName.ofAddress(RemoveLastWriterPackageFamilyName$get(segment), scope);
    }
    static final FunctionDescriptor GetAppZoneId$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetAppZoneId_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetAppZoneId_UP$MH = RuntimeHelper.upcallHandle(GetAppZoneId.class, "apply", IZoneIdentifier2Vtbl.GetAppZoneId_UP$FUNC);
    static final FunctionDescriptor GetAppZoneId_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetAppZoneId_DOWN$MH = RuntimeHelper.downcallHandle(
        IZoneIdentifier2Vtbl.GetAppZoneId_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetAppZoneId)(IZoneIdentifier2*,DWORD*);
     * }
     */
    public interface GetAppZoneId {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetAppZoneId fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IZoneIdentifier2Vtbl.GetAppZoneId_UP$MH, fi, IZoneIdentifier2Vtbl.GetAppZoneId$FUNC, scope);
        }
        static GetAppZoneId ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IZoneIdentifier2Vtbl.GetAppZoneId_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetAppZoneId$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetAppZoneId"));
    public static VarHandle GetAppZoneId$VH() {
        return IZoneIdentifier2Vtbl.GetAppZoneId$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetAppZoneId)(IZoneIdentifier2*,DWORD*);
     * }
     */
    public static MemorySegment GetAppZoneId$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IZoneIdentifier2Vtbl.GetAppZoneId$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetAppZoneId)(IZoneIdentifier2*,DWORD*);
     * }
     */
    public static void GetAppZoneId$set(MemorySegment seg, MemorySegment x) {
        IZoneIdentifier2Vtbl.GetAppZoneId$VH.set(seg, x);
    }
    public static MemorySegment GetAppZoneId$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IZoneIdentifier2Vtbl.GetAppZoneId$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetAppZoneId$set(MemorySegment seg, long index, MemorySegment x) {
        IZoneIdentifier2Vtbl.GetAppZoneId$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetAppZoneId GetAppZoneId(MemorySegment segment, SegmentScope scope) {
        return GetAppZoneId.ofAddress(GetAppZoneId$get(segment), scope);
    }
    static final FunctionDescriptor SetAppZoneId$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor SetAppZoneId_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle SetAppZoneId_UP$MH = RuntimeHelper.upcallHandle(SetAppZoneId.class, "apply", IZoneIdentifier2Vtbl.SetAppZoneId_UP$FUNC);
    static final FunctionDescriptor SetAppZoneId_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle SetAppZoneId_DOWN$MH = RuntimeHelper.downcallHandle(
        IZoneIdentifier2Vtbl.SetAppZoneId_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetAppZoneId)(IZoneIdentifier2*,DWORD);
     * }
     */
    public interface SetAppZoneId {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(SetAppZoneId fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IZoneIdentifier2Vtbl.SetAppZoneId_UP$MH, fi, IZoneIdentifier2Vtbl.SetAppZoneId$FUNC, scope);
        }
        static SetAppZoneId ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)IZoneIdentifier2Vtbl.SetAppZoneId_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetAppZoneId$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetAppZoneId"));
    public static VarHandle SetAppZoneId$VH() {
        return IZoneIdentifier2Vtbl.SetAppZoneId$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetAppZoneId)(IZoneIdentifier2*,DWORD);
     * }
     */
    public static MemorySegment SetAppZoneId$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IZoneIdentifier2Vtbl.SetAppZoneId$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetAppZoneId)(IZoneIdentifier2*,DWORD);
     * }
     */
    public static void SetAppZoneId$set(MemorySegment seg, MemorySegment x) {
        IZoneIdentifier2Vtbl.SetAppZoneId$VH.set(seg, x);
    }
    public static MemorySegment SetAppZoneId$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IZoneIdentifier2Vtbl.SetAppZoneId$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetAppZoneId$set(MemorySegment seg, long index, MemorySegment x) {
        IZoneIdentifier2Vtbl.SetAppZoneId$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetAppZoneId SetAppZoneId(MemorySegment segment, SegmentScope scope) {
        return SetAppZoneId.ofAddress(SetAppZoneId$get(segment), scope);
    }
    static final FunctionDescriptor RemoveAppZoneId$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor RemoveAppZoneId_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle RemoveAppZoneId_UP$MH = RuntimeHelper.upcallHandle(RemoveAppZoneId.class, "apply", IZoneIdentifier2Vtbl.RemoveAppZoneId_UP$FUNC);
    static final FunctionDescriptor RemoveAppZoneId_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle RemoveAppZoneId_DOWN$MH = RuntimeHelper.downcallHandle(
        IZoneIdentifier2Vtbl.RemoveAppZoneId_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*RemoveAppZoneId)(IZoneIdentifier2*);
     * }
     */
    public interface RemoveAppZoneId {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(RemoveAppZoneId fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IZoneIdentifier2Vtbl.RemoveAppZoneId_UP$MH, fi, IZoneIdentifier2Vtbl.RemoveAppZoneId$FUNC, scope);
        }
        static RemoveAppZoneId ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IZoneIdentifier2Vtbl.RemoveAppZoneId_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle RemoveAppZoneId$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("RemoveAppZoneId"));
    public static VarHandle RemoveAppZoneId$VH() {
        return IZoneIdentifier2Vtbl.RemoveAppZoneId$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*RemoveAppZoneId)(IZoneIdentifier2*);
     * }
     */
    public static MemorySegment RemoveAppZoneId$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IZoneIdentifier2Vtbl.RemoveAppZoneId$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*RemoveAppZoneId)(IZoneIdentifier2*);
     * }
     */
    public static void RemoveAppZoneId$set(MemorySegment seg, MemorySegment x) {
        IZoneIdentifier2Vtbl.RemoveAppZoneId$VH.set(seg, x);
    }
    public static MemorySegment RemoveAppZoneId$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IZoneIdentifier2Vtbl.RemoveAppZoneId$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void RemoveAppZoneId$set(MemorySegment seg, long index, MemorySegment x) {
        IZoneIdentifier2Vtbl.RemoveAppZoneId$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static RemoveAppZoneId RemoveAppZoneId(MemorySegment segment, SegmentScope scope) {
        return RemoveAppZoneId.ofAddress(RemoveAppZoneId$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


