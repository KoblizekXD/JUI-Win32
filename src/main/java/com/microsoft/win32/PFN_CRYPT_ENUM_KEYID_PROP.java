// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * int (*PFN_CRYPT_ENUM_KEYID_PROP)(struct _CRYPTOAPI_BLOB* pKeyIdentifier,unsigned long dwFlags,void* pvReserved,void* pvArg,unsigned long cProp,unsigned long* rgdwPropId,void** rgpvData,unsigned long* rgcbData);
 * }
 */
public interface PFN_CRYPT_ENUM_KEYID_PROP {

    int apply(java.lang.foreign.MemorySegment pKeyIdentifier, int dwFlags, java.lang.foreign.MemorySegment pvReserved, java.lang.foreign.MemorySegment pvArg, int cProp, java.lang.foreign.MemorySegment rgdwPropId, java.lang.foreign.MemorySegment rgpvData, java.lang.foreign.MemorySegment rgcbData);
    static MemorySegment allocate(PFN_CRYPT_ENUM_KEYID_PROP fi, SegmentScope scope) {
        return RuntimeHelper.upcallStub(constants$792.PFN_CRYPT_ENUM_KEYID_PROP_UP$MH, fi, constants$792.PFN_CRYPT_ENUM_KEYID_PROP$FUNC, scope);
    }
    static PFN_CRYPT_ENUM_KEYID_PROP ofAddress(MemorySegment addr, SegmentScope scope) {
        MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
        return (java.lang.foreign.MemorySegment _pKeyIdentifier, int _dwFlags, java.lang.foreign.MemorySegment _pvReserved, java.lang.foreign.MemorySegment _pvArg, int _cProp, java.lang.foreign.MemorySegment _rgdwPropId, java.lang.foreign.MemorySegment _rgpvData, java.lang.foreign.MemorySegment _rgcbData) -> {
            try {
                return (int)constants$792.PFN_CRYPT_ENUM_KEYID_PROP_DOWN$MH.invokeExact(symbol, _pKeyIdentifier, _dwFlags, _pvReserved, _pvArg, _cProp, _rgdwPropId, _rgpvData, _rgcbData);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


