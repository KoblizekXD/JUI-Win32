// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _CERT_SIGNED_CONTENT_INFO {
 *     CRYPT_DER_BLOB ToBeSigned;
 *     CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;
 *     CRYPT_BIT_BLOB Signature;
 * };
 * }
 */
public class _CERT_SIGNED_CONTENT_INFO {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("cbData"),
            MemoryLayout.paddingLayout(32),
            Constants$root.C_POINTER$LAYOUT.withName("pbData")
        ).withName("ToBeSigned"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("pszObjId"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("cbData"),
                MemoryLayout.paddingLayout(32),
                Constants$root.C_POINTER$LAYOUT.withName("pbData")
            ).withName("Parameters")
        ).withName("SignatureAlgorithm"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("cbData"),
            MemoryLayout.paddingLayout(32),
            Constants$root.C_POINTER$LAYOUT.withName("pbData"),
            Constants$root.C_LONG$LAYOUT.withName("cUnusedBits"),
            MemoryLayout.paddingLayout(32)
        ).withName("Signature")
    ).withName("_CERT_SIGNED_CONTENT_INFO");
    public static MemoryLayout $LAYOUT() {
        return _CERT_SIGNED_CONTENT_INFO.$struct$LAYOUT;
    }
    public static MemorySegment ToBeSigned$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    public static MemorySegment SignatureAlgorithm$slice(MemorySegment seg) {
        return seg.asSlice(16, 24);
    }
    public static MemorySegment Signature$slice(MemorySegment seg) {
        return seg.asSlice(40, 24);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


