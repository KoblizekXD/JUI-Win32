// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _SYSTEM_CPU_SET_INFORMATION {
 *     DWORD Size;
 *     CPU_SET_INFORMATION_TYPE Type;
 *     union {
 *         struct  CpuSet;
 *     };
 * };
 * }
 */
public class _SYSTEM_CPU_SET_INFORMATION {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("Size"),
        Constants$root.C_LONG$LAYOUT.withName("Type"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("Id"),
                Constants$root.C_SHORT$LAYOUT.withName("Group"),
                Constants$root.C_CHAR$LAYOUT.withName("LogicalProcessorIndex"),
                Constants$root.C_CHAR$LAYOUT.withName("CoreIndex"),
                Constants$root.C_CHAR$LAYOUT.withName("LastLevelCacheIndex"),
                Constants$root.C_CHAR$LAYOUT.withName("NumaNodeIndex"),
                Constants$root.C_CHAR$LAYOUT.withName("EfficiencyClass"),
                MemoryLayout.unionLayout(
                    Constants$root.C_CHAR$LAYOUT.withName("AllFlags"),
                    MemoryLayout.structLayout(
                        MemoryLayout.paddingLayout(8)
                    ).withName("$anon$0")
                ).withName("$anon$0"),
                MemoryLayout.unionLayout(
                    Constants$root.C_LONG$LAYOUT.withName("Reserved"),
                    Constants$root.C_CHAR$LAYOUT.withName("SchedulingClass")
                ).withName("$anon$1"),
                Constants$root.C_LONG_LONG$LAYOUT.withName("AllocationTag")
            ).withName("CpuSet")
        ).withName("$anon$0")
    ).withName("_SYSTEM_CPU_SET_INFORMATION");
    public static MemoryLayout $LAYOUT() {
        return _SYSTEM_CPU_SET_INFORMATION.$struct$LAYOUT;
    }
    static final VarHandle Size$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Size"));
    public static VarHandle Size$VH() {
        return _SYSTEM_CPU_SET_INFORMATION.Size$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Size;
     * }
     */
    public static int Size$get(MemorySegment seg) {
        return (int)_SYSTEM_CPU_SET_INFORMATION.Size$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Size;
     * }
     */
    public static void Size$set(MemorySegment seg, int x) {
        _SYSTEM_CPU_SET_INFORMATION.Size$VH.set(seg, x);
    }
    public static int Size$get(MemorySegment seg, long index) {
        return (int)_SYSTEM_CPU_SET_INFORMATION.Size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Size$set(MemorySegment seg, long index, int x) {
        _SYSTEM_CPU_SET_INFORMATION.Size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Type$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Type"));
    public static VarHandle Type$VH() {
        return _SYSTEM_CPU_SET_INFORMATION.Type$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * CPU_SET_INFORMATION_TYPE Type;
     * }
     */
    public static int Type$get(MemorySegment seg) {
        return (int)_SYSTEM_CPU_SET_INFORMATION.Type$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * CPU_SET_INFORMATION_TYPE Type;
     * }
     */
    public static void Type$set(MemorySegment seg, int x) {
        _SYSTEM_CPU_SET_INFORMATION.Type$VH.set(seg, x);
    }
    public static int Type$get(MemorySegment seg, long index) {
        return (int)_SYSTEM_CPU_SET_INFORMATION.Type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Type$set(MemorySegment seg, long index, int x) {
        _SYSTEM_CPU_SET_INFORMATION.Type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
     * struct {
     *     DWORD Id;
     *     WORD Group;
     *     BYTE LogicalProcessorIndex;
     *     BYTE CoreIndex;
     *     BYTE LastLevelCacheIndex;
     *     BYTE NumaNodeIndex;
     *     BYTE EfficiencyClass;
     *     union {
     *         BYTE AllFlags;
     *         struct {
     *                  *             BYTE Parked;
     *             BYTE Allocated;
     *             BYTE AllocatedToTargetProcess;
     *             BYTE RealTime;
     *             BYTE ReservedFlags;
     *         };
     *     };
     *     union {
     *         DWORD Reserved;
     *         BYTE SchedulingClass;
     *     };
     *     DWORD64 AllocationTag;
     * };
     * }
     */
    public static final class CpuSet {

        // Suppresses default constructor, ensuring non-instantiability.
        private CpuSet() {}
        static final StructLayout CpuSet$struct$LAYOUT = MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("Id"),
            Constants$root.C_SHORT$LAYOUT.withName("Group"),
            Constants$root.C_CHAR$LAYOUT.withName("LogicalProcessorIndex"),
            Constants$root.C_CHAR$LAYOUT.withName("CoreIndex"),
            Constants$root.C_CHAR$LAYOUT.withName("LastLevelCacheIndex"),
            Constants$root.C_CHAR$LAYOUT.withName("NumaNodeIndex"),
            Constants$root.C_CHAR$LAYOUT.withName("EfficiencyClass"),
            MemoryLayout.unionLayout(
                Constants$root.C_CHAR$LAYOUT.withName("AllFlags"),
                MemoryLayout.structLayout(
                    MemoryLayout.paddingLayout(8)
                ).withName("$anon$0")
            ).withName("$anon$0"),
            MemoryLayout.unionLayout(
                Constants$root.C_LONG$LAYOUT.withName("Reserved"),
                Constants$root.C_CHAR$LAYOUT.withName("SchedulingClass")
            ).withName("$anon$1"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("AllocationTag")
        );
        public static MemoryLayout $LAYOUT() {
            return CpuSet.CpuSet$struct$LAYOUT;
        }
        static final VarHandle Id$VH = CpuSet$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Id"));
        public static VarHandle Id$VH() {
            return CpuSet.Id$VH;
        }
        /**
         * Getter for field:
         * {@snippet :
         * DWORD Id;
         * }
         */
        public static int Id$get(MemorySegment seg) {
            return (int)CpuSet.Id$VH.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * DWORD Id;
         * }
         */
        public static void Id$set(MemorySegment seg, int x) {
            CpuSet.Id$VH.set(seg, x);
        }
        public static int Id$get(MemorySegment seg, long index) {
            return (int)CpuSet.Id$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void Id$set(MemorySegment seg, long index, int x) {
            CpuSet.Id$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle Group$VH = CpuSet$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Group"));
        public static VarHandle Group$VH() {
            return CpuSet.Group$VH;
        }
        /**
         * Getter for field:
         * {@snippet :
         * WORD Group;
         * }
         */
        public static short Group$get(MemorySegment seg) {
            return (short)CpuSet.Group$VH.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * WORD Group;
         * }
         */
        public static void Group$set(MemorySegment seg, short x) {
            CpuSet.Group$VH.set(seg, x);
        }
        public static short Group$get(MemorySegment seg, long index) {
            return (short)CpuSet.Group$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void Group$set(MemorySegment seg, long index, short x) {
            CpuSet.Group$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle LogicalProcessorIndex$VH = CpuSet$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("LogicalProcessorIndex"));
        public static VarHandle LogicalProcessorIndex$VH() {
            return CpuSet.LogicalProcessorIndex$VH;
        }
        /**
         * Getter for field:
         * {@snippet :
         * BYTE LogicalProcessorIndex;
         * }
         */
        public static byte LogicalProcessorIndex$get(MemorySegment seg) {
            return (byte)CpuSet.LogicalProcessorIndex$VH.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * BYTE LogicalProcessorIndex;
         * }
         */
        public static void LogicalProcessorIndex$set(MemorySegment seg, byte x) {
            CpuSet.LogicalProcessorIndex$VH.set(seg, x);
        }
        public static byte LogicalProcessorIndex$get(MemorySegment seg, long index) {
            return (byte)CpuSet.LogicalProcessorIndex$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void LogicalProcessorIndex$set(MemorySegment seg, long index, byte x) {
            CpuSet.LogicalProcessorIndex$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle CoreIndex$VH = CpuSet$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("CoreIndex"));
        public static VarHandle CoreIndex$VH() {
            return CpuSet.CoreIndex$VH;
        }
        /**
         * Getter for field:
         * {@snippet :
         * BYTE CoreIndex;
         * }
         */
        public static byte CoreIndex$get(MemorySegment seg) {
            return (byte)CpuSet.CoreIndex$VH.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * BYTE CoreIndex;
         * }
         */
        public static void CoreIndex$set(MemorySegment seg, byte x) {
            CpuSet.CoreIndex$VH.set(seg, x);
        }
        public static byte CoreIndex$get(MemorySegment seg, long index) {
            return (byte)CpuSet.CoreIndex$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void CoreIndex$set(MemorySegment seg, long index, byte x) {
            CpuSet.CoreIndex$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle LastLevelCacheIndex$VH = CpuSet$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("LastLevelCacheIndex"));
        public static VarHandle LastLevelCacheIndex$VH() {
            return CpuSet.LastLevelCacheIndex$VH;
        }
        /**
         * Getter for field:
         * {@snippet :
         * BYTE LastLevelCacheIndex;
         * }
         */
        public static byte LastLevelCacheIndex$get(MemorySegment seg) {
            return (byte)CpuSet.LastLevelCacheIndex$VH.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * BYTE LastLevelCacheIndex;
         * }
         */
        public static void LastLevelCacheIndex$set(MemorySegment seg, byte x) {
            CpuSet.LastLevelCacheIndex$VH.set(seg, x);
        }
        public static byte LastLevelCacheIndex$get(MemorySegment seg, long index) {
            return (byte)CpuSet.LastLevelCacheIndex$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void LastLevelCacheIndex$set(MemorySegment seg, long index, byte x) {
            CpuSet.LastLevelCacheIndex$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle NumaNodeIndex$VH = CpuSet$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("NumaNodeIndex"));
        public static VarHandle NumaNodeIndex$VH() {
            return CpuSet.NumaNodeIndex$VH;
        }
        /**
         * Getter for field:
         * {@snippet :
         * BYTE NumaNodeIndex;
         * }
         */
        public static byte NumaNodeIndex$get(MemorySegment seg) {
            return (byte)CpuSet.NumaNodeIndex$VH.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * BYTE NumaNodeIndex;
         * }
         */
        public static void NumaNodeIndex$set(MemorySegment seg, byte x) {
            CpuSet.NumaNodeIndex$VH.set(seg, x);
        }
        public static byte NumaNodeIndex$get(MemorySegment seg, long index) {
            return (byte)CpuSet.NumaNodeIndex$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void NumaNodeIndex$set(MemorySegment seg, long index, byte x) {
            CpuSet.NumaNodeIndex$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle EfficiencyClass$VH = CpuSet$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("EfficiencyClass"));
        public static VarHandle EfficiencyClass$VH() {
            return CpuSet.EfficiencyClass$VH;
        }
        /**
         * Getter for field:
         * {@snippet :
         * BYTE EfficiencyClass;
         * }
         */
        public static byte EfficiencyClass$get(MemorySegment seg) {
            return (byte)CpuSet.EfficiencyClass$VH.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * BYTE EfficiencyClass;
         * }
         */
        public static void EfficiencyClass$set(MemorySegment seg, byte x) {
            CpuSet.EfficiencyClass$VH.set(seg, x);
        }
        public static byte EfficiencyClass$get(MemorySegment seg, long index) {
            return (byte)CpuSet.EfficiencyClass$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void EfficiencyClass$set(MemorySegment seg, long index, byte x) {
            CpuSet.EfficiencyClass$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle AllFlags$VH = CpuSet$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("AllFlags"));
        public static VarHandle AllFlags$VH() {
            return CpuSet.AllFlags$VH;
        }
        /**
         * Getter for field:
         * {@snippet :
         * BYTE AllFlags;
         * }
         */
        public static byte AllFlags$get(MemorySegment seg) {
            return (byte)CpuSet.AllFlags$VH.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * BYTE AllFlags;
         * }
         */
        public static void AllFlags$set(MemorySegment seg, byte x) {
            CpuSet.AllFlags$VH.set(seg, x);
        }
        public static byte AllFlags$get(MemorySegment seg, long index) {
            return (byte)CpuSet.AllFlags$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void AllFlags$set(MemorySegment seg, long index, byte x) {
            CpuSet.AllFlags$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle Reserved$VH = CpuSet$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("$anon$1"), MemoryLayout.PathElement.groupElement("Reserved"));
        public static VarHandle Reserved$VH() {
            return CpuSet.Reserved$VH;
        }
        /**
         * Getter for field:
         * {@snippet :
         * DWORD Reserved;
         * }
         */
        public static int Reserved$get(MemorySegment seg) {
            return (int)CpuSet.Reserved$VH.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * DWORD Reserved;
         * }
         */
        public static void Reserved$set(MemorySegment seg, int x) {
            CpuSet.Reserved$VH.set(seg, x);
        }
        public static int Reserved$get(MemorySegment seg, long index) {
            return (int)CpuSet.Reserved$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void Reserved$set(MemorySegment seg, long index, int x) {
            CpuSet.Reserved$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle SchedulingClass$VH = CpuSet$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("$anon$1"), MemoryLayout.PathElement.groupElement("SchedulingClass"));
        public static VarHandle SchedulingClass$VH() {
            return CpuSet.SchedulingClass$VH;
        }
        /**
         * Getter for field:
         * {@snippet :
         * BYTE SchedulingClass;
         * }
         */
        public static byte SchedulingClass$get(MemorySegment seg) {
            return (byte)CpuSet.SchedulingClass$VH.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * BYTE SchedulingClass;
         * }
         */
        public static void SchedulingClass$set(MemorySegment seg, byte x) {
            CpuSet.SchedulingClass$VH.set(seg, x);
        }
        public static byte SchedulingClass$get(MemorySegment seg, long index) {
            return (byte)CpuSet.SchedulingClass$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void SchedulingClass$set(MemorySegment seg, long index, byte x) {
            CpuSet.SchedulingClass$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle AllocationTag$VH = CpuSet$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AllocationTag"));
        public static VarHandle AllocationTag$VH() {
            return CpuSet.AllocationTag$VH;
        }
        /**
         * Getter for field:
         * {@snippet :
         * DWORD64 AllocationTag;
         * }
         */
        public static long AllocationTag$get(MemorySegment seg) {
            return (long)CpuSet.AllocationTag$VH.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * DWORD64 AllocationTag;
         * }
         */
        public static void AllocationTag$set(MemorySegment seg, long x) {
            CpuSet.AllocationTag$VH.set(seg, x);
        }
        public static long AllocationTag$get(MemorySegment seg, long index) {
            return (long)CpuSet.AllocationTag$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void AllocationTag$set(MemorySegment seg, long index, long x) {
            CpuSet.AllocationTag$VH.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
    }

    public static MemorySegment CpuSet$slice(MemorySegment seg) {
        return seg.asSlice(8, 24);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


