// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * int (*PFN_CMSG_STREAM_OUTPUT)(void* pvArg,unsigned char* pbData,unsigned long cbData,int fFinal);
 * }
 */
public interface PFN_CMSG_STREAM_OUTPUT {

    int apply(java.lang.foreign.MemorySegment pvArg, java.lang.foreign.MemorySegment pbData, int cbData, int fFinal);
    static MemorySegment allocate(PFN_CMSG_STREAM_OUTPUT fi, SegmentScope scope) {
        return RuntimeHelper.upcallStub(constants$744.PFN_CMSG_STREAM_OUTPUT_UP$MH, fi, constants$744.PFN_CMSG_STREAM_OUTPUT$FUNC, scope);
    }
    static PFN_CMSG_STREAM_OUTPUT ofAddress(MemorySegment addr, SegmentScope scope) {
        MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
        return (java.lang.foreign.MemorySegment _pvArg, java.lang.foreign.MemorySegment _pbData, int _cbData, int _fFinal) -> {
            try {
                return (int)constants$744.PFN_CMSG_STREAM_OUTPUT_DOWN$MH.invokeExact(symbol, _pvArg, _pbData, _cbData, _fFinal);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


