// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * void (*LPOVERLAPPED_COMPLETION_ROUTINE)(unsigned long dwErrorCode,unsigned long dwNumberOfBytesTransfered,struct _OVERLAPPED* lpOverlapped);
 * }
 */
public interface LPOVERLAPPED_COMPLETION_ROUTINE {

    void apply(int dwErrorCode, int dwNumberOfBytesTransfered, java.lang.foreign.MemorySegment lpOverlapped);
    static MemorySegment allocate(LPOVERLAPPED_COMPLETION_ROUTINE fi, SegmentScope scope) {
        return RuntimeHelper.upcallStub(constants$111.LPOVERLAPPED_COMPLETION_ROUTINE_UP$MH, fi, constants$111.LPOVERLAPPED_COMPLETION_ROUTINE$FUNC, scope);
    }
    static LPOVERLAPPED_COMPLETION_ROUTINE ofAddress(MemorySegment addr, SegmentScope scope) {
        MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
        return (int _dwErrorCode, int _dwNumberOfBytesTransfered, java.lang.foreign.MemorySegment _lpOverlapped) -> {
            try {
                constants$111.LPOVERLAPPED_COMPLETION_ROUTINE_DOWN$MH.invokeExact(symbol, _dwErrorCode, _dwNumberOfBytesTransfered, _lpOverlapped);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


