// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _XMIT_ROUTINE_QUINTUPLE {
 *     XMIT_HELPER_ROUTINE pfnTranslateToXmit;
 *     XMIT_HELPER_ROUTINE pfnTranslateFromXmit;
 *     XMIT_HELPER_ROUTINE pfnFreeXmit;
 *     XMIT_HELPER_ROUTINE pfnFreeInst;
 * };
 * }
 */
public class _XMIT_ROUTINE_QUINTUPLE {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("pfnTranslateToXmit"),
        Constants$root.C_POINTER$LAYOUT.withName("pfnTranslateFromXmit"),
        Constants$root.C_POINTER$LAYOUT.withName("pfnFreeXmit"),
        Constants$root.C_POINTER$LAYOUT.withName("pfnFreeInst")
    ).withName("_XMIT_ROUTINE_QUINTUPLE");
    public static MemoryLayout $LAYOUT() {
        return _XMIT_ROUTINE_QUINTUPLE.$struct$LAYOUT;
    }
    static final VarHandle pfnTranslateToXmit$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pfnTranslateToXmit"));
    public static VarHandle pfnTranslateToXmit$VH() {
        return _XMIT_ROUTINE_QUINTUPLE.pfnTranslateToXmit$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * XMIT_HELPER_ROUTINE pfnTranslateToXmit;
     * }
     */
    public static MemorySegment pfnTranslateToXmit$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_XMIT_ROUTINE_QUINTUPLE.pfnTranslateToXmit$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * XMIT_HELPER_ROUTINE pfnTranslateToXmit;
     * }
     */
    public static void pfnTranslateToXmit$set(MemorySegment seg, MemorySegment x) {
        _XMIT_ROUTINE_QUINTUPLE.pfnTranslateToXmit$VH.set(seg, x);
    }
    public static MemorySegment pfnTranslateToXmit$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_XMIT_ROUTINE_QUINTUPLE.pfnTranslateToXmit$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pfnTranslateToXmit$set(MemorySegment seg, long index, MemorySegment x) {
        _XMIT_ROUTINE_QUINTUPLE.pfnTranslateToXmit$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static XMIT_HELPER_ROUTINE pfnTranslateToXmit(MemorySegment segment, SegmentScope scope) {
        return XMIT_HELPER_ROUTINE.ofAddress(pfnTranslateToXmit$get(segment), scope);
    }
    static final VarHandle pfnTranslateFromXmit$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pfnTranslateFromXmit"));
    public static VarHandle pfnTranslateFromXmit$VH() {
        return _XMIT_ROUTINE_QUINTUPLE.pfnTranslateFromXmit$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * XMIT_HELPER_ROUTINE pfnTranslateFromXmit;
     * }
     */
    public static MemorySegment pfnTranslateFromXmit$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_XMIT_ROUTINE_QUINTUPLE.pfnTranslateFromXmit$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * XMIT_HELPER_ROUTINE pfnTranslateFromXmit;
     * }
     */
    public static void pfnTranslateFromXmit$set(MemorySegment seg, MemorySegment x) {
        _XMIT_ROUTINE_QUINTUPLE.pfnTranslateFromXmit$VH.set(seg, x);
    }
    public static MemorySegment pfnTranslateFromXmit$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_XMIT_ROUTINE_QUINTUPLE.pfnTranslateFromXmit$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pfnTranslateFromXmit$set(MemorySegment seg, long index, MemorySegment x) {
        _XMIT_ROUTINE_QUINTUPLE.pfnTranslateFromXmit$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static XMIT_HELPER_ROUTINE pfnTranslateFromXmit(MemorySegment segment, SegmentScope scope) {
        return XMIT_HELPER_ROUTINE.ofAddress(pfnTranslateFromXmit$get(segment), scope);
    }
    static final VarHandle pfnFreeXmit$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pfnFreeXmit"));
    public static VarHandle pfnFreeXmit$VH() {
        return _XMIT_ROUTINE_QUINTUPLE.pfnFreeXmit$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * XMIT_HELPER_ROUTINE pfnFreeXmit;
     * }
     */
    public static MemorySegment pfnFreeXmit$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_XMIT_ROUTINE_QUINTUPLE.pfnFreeXmit$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * XMIT_HELPER_ROUTINE pfnFreeXmit;
     * }
     */
    public static void pfnFreeXmit$set(MemorySegment seg, MemorySegment x) {
        _XMIT_ROUTINE_QUINTUPLE.pfnFreeXmit$VH.set(seg, x);
    }
    public static MemorySegment pfnFreeXmit$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_XMIT_ROUTINE_QUINTUPLE.pfnFreeXmit$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pfnFreeXmit$set(MemorySegment seg, long index, MemorySegment x) {
        _XMIT_ROUTINE_QUINTUPLE.pfnFreeXmit$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static XMIT_HELPER_ROUTINE pfnFreeXmit(MemorySegment segment, SegmentScope scope) {
        return XMIT_HELPER_ROUTINE.ofAddress(pfnFreeXmit$get(segment), scope);
    }
    static final VarHandle pfnFreeInst$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pfnFreeInst"));
    public static VarHandle pfnFreeInst$VH() {
        return _XMIT_ROUTINE_QUINTUPLE.pfnFreeInst$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * XMIT_HELPER_ROUTINE pfnFreeInst;
     * }
     */
    public static MemorySegment pfnFreeInst$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_XMIT_ROUTINE_QUINTUPLE.pfnFreeInst$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * XMIT_HELPER_ROUTINE pfnFreeInst;
     * }
     */
    public static void pfnFreeInst$set(MemorySegment seg, MemorySegment x) {
        _XMIT_ROUTINE_QUINTUPLE.pfnFreeInst$VH.set(seg, x);
    }
    public static MemorySegment pfnFreeInst$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_XMIT_ROUTINE_QUINTUPLE.pfnFreeInst$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pfnFreeInst$set(MemorySegment seg, long index, MemorySegment x) {
        _XMIT_ROUTINE_QUINTUPLE.pfnFreeInst$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static XMIT_HELPER_ROUTINE pfnFreeInst(MemorySegment segment, SegmentScope scope) {
        return XMIT_HELPER_ROUTINE.ofAddress(pfnFreeInst$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


