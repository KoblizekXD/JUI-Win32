// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IOleInPlaceSiteVtbl {
 *     HRESULT (*QueryInterface)(IOleInPlaceSite*,const IID*,void**);
 *     ULONG (*AddRef)(IOleInPlaceSite*);
 *     ULONG (*Release)(IOleInPlaceSite*);
 *     HRESULT (*GetWindow)(IOleInPlaceSite*,HWND*);
 *     HRESULT (*ContextSensitiveHelp)(IOleInPlaceSite*,BOOL);
 *     HRESULT (*CanInPlaceActivate)(IOleInPlaceSite*);
 *     HRESULT (*OnInPlaceActivate)(IOleInPlaceSite*);
 *     HRESULT (*OnUIActivate)(IOleInPlaceSite*);
 *     HRESULT (*GetWindowContext)(IOleInPlaceSite*,IOleInPlaceFrame**,IOleInPlaceUIWindow**,LPRECT,LPRECT,LPOLEINPLACEFRAMEINFO);
 *     HRESULT (*Scroll)(IOleInPlaceSite*,SIZE);
 *     HRESULT (*OnUIDeactivate)(IOleInPlaceSite*,BOOL);
 *     HRESULT (*OnInPlaceDeactivate)(IOleInPlaceSite*);
 *     HRESULT (*DiscardUndoState)(IOleInPlaceSite*);
 *     HRESULT (*DeactivateAndUndo)(IOleInPlaceSite*);
 *     HRESULT (*OnPosRectChange)(IOleInPlaceSite*,LPCRECT);
 * };
 * }
 */
public class IOleInPlaceSiteVtbl {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("GetWindow"),
        Constants$root.C_POINTER$LAYOUT.withName("ContextSensitiveHelp"),
        Constants$root.C_POINTER$LAYOUT.withName("CanInPlaceActivate"),
        Constants$root.C_POINTER$LAYOUT.withName("OnInPlaceActivate"),
        Constants$root.C_POINTER$LAYOUT.withName("OnUIActivate"),
        Constants$root.C_POINTER$LAYOUT.withName("GetWindowContext"),
        Constants$root.C_POINTER$LAYOUT.withName("Scroll"),
        Constants$root.C_POINTER$LAYOUT.withName("OnUIDeactivate"),
        Constants$root.C_POINTER$LAYOUT.withName("OnInPlaceDeactivate"),
        Constants$root.C_POINTER$LAYOUT.withName("DiscardUndoState"),
        Constants$root.C_POINTER$LAYOUT.withName("DeactivateAndUndo"),
        Constants$root.C_POINTER$LAYOUT.withName("OnPosRectChange")
    ).withName("IOleInPlaceSiteVtbl");
    public static MemoryLayout $LAYOUT() {
        return IOleInPlaceSiteVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor QueryInterface_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_UP$MH = RuntimeHelper.upcallHandle(QueryInterface.class, "apply", IOleInPlaceSiteVtbl.QueryInterface_UP$FUNC);
    static final FunctionDescriptor QueryInterface_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_DOWN$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceSiteVtbl.QueryInterface_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(IOleInPlaceSite*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IOleInPlaceSiteVtbl.QueryInterface_UP$MH, fi, IOleInPlaceSiteVtbl.QueryInterface$FUNC, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IOleInPlaceSiteVtbl.QueryInterface_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return IOleInPlaceSiteVtbl.QueryInterface$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IOleInPlaceSite*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceSiteVtbl.QueryInterface$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IOleInPlaceSite*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        IOleInPlaceSiteVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceSiteVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        IOleInPlaceSiteVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, SegmentScope scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor AddRef_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_UP$MH = RuntimeHelper.upcallHandle(AddRef.class, "apply", IOleInPlaceSiteVtbl.AddRef_UP$FUNC);
    static final FunctionDescriptor AddRef_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_DOWN$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceSiteVtbl.AddRef_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*AddRef)(IOleInPlaceSite*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IOleInPlaceSiteVtbl.AddRef_UP$MH, fi, IOleInPlaceSiteVtbl.AddRef$FUNC, scope);
        }
        static AddRef ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IOleInPlaceSiteVtbl.AddRef_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return IOleInPlaceSiteVtbl.AddRef$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(IOleInPlaceSite*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceSiteVtbl.AddRef$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(IOleInPlaceSite*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        IOleInPlaceSiteVtbl.AddRef$VH.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceSiteVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        IOleInPlaceSiteVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, SegmentScope scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Release_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_UP$MH = RuntimeHelper.upcallHandle(Release.class, "apply", IOleInPlaceSiteVtbl.Release_UP$FUNC);
    static final FunctionDescriptor Release_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_DOWN$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceSiteVtbl.Release_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*Release)(IOleInPlaceSite*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IOleInPlaceSiteVtbl.Release_UP$MH, fi, IOleInPlaceSiteVtbl.Release$FUNC, scope);
        }
        static Release ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IOleInPlaceSiteVtbl.Release_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return IOleInPlaceSiteVtbl.Release$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(IOleInPlaceSite*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceSiteVtbl.Release$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(IOleInPlaceSite*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        IOleInPlaceSiteVtbl.Release$VH.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceSiteVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        IOleInPlaceSiteVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, SegmentScope scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    static final FunctionDescriptor GetWindow$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetWindow_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetWindow_UP$MH = RuntimeHelper.upcallHandle(GetWindow.class, "apply", IOleInPlaceSiteVtbl.GetWindow_UP$FUNC);
    static final FunctionDescriptor GetWindow_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetWindow_DOWN$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceSiteVtbl.GetWindow_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetWindow)(IOleInPlaceSite*,HWND*);
     * }
     */
    public interface GetWindow {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetWindow fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IOleInPlaceSiteVtbl.GetWindow_UP$MH, fi, IOleInPlaceSiteVtbl.GetWindow$FUNC, scope);
        }
        static GetWindow ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IOleInPlaceSiteVtbl.GetWindow_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetWindow$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetWindow"));
    public static VarHandle GetWindow$VH() {
        return IOleInPlaceSiteVtbl.GetWindow$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetWindow)(IOleInPlaceSite*,HWND*);
     * }
     */
    public static MemorySegment GetWindow$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceSiteVtbl.GetWindow$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetWindow)(IOleInPlaceSite*,HWND*);
     * }
     */
    public static void GetWindow$set(MemorySegment seg, MemorySegment x) {
        IOleInPlaceSiteVtbl.GetWindow$VH.set(seg, x);
    }
    public static MemorySegment GetWindow$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceSiteVtbl.GetWindow$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetWindow$set(MemorySegment seg, long index, MemorySegment x) {
        IOleInPlaceSiteVtbl.GetWindow$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetWindow GetWindow(MemorySegment segment, SegmentScope scope) {
        return GetWindow.ofAddress(GetWindow$get(segment), scope);
    }
    static final FunctionDescriptor ContextSensitiveHelp$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor ContextSensitiveHelp_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle ContextSensitiveHelp_UP$MH = RuntimeHelper.upcallHandle(ContextSensitiveHelp.class, "apply", IOleInPlaceSiteVtbl.ContextSensitiveHelp_UP$FUNC);
    static final FunctionDescriptor ContextSensitiveHelp_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle ContextSensitiveHelp_DOWN$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceSiteVtbl.ContextSensitiveHelp_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*ContextSensitiveHelp)(IOleInPlaceSite*,BOOL);
     * }
     */
    public interface ContextSensitiveHelp {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(ContextSensitiveHelp fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IOleInPlaceSiteVtbl.ContextSensitiveHelp_UP$MH, fi, IOleInPlaceSiteVtbl.ContextSensitiveHelp$FUNC, scope);
        }
        static ContextSensitiveHelp ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)IOleInPlaceSiteVtbl.ContextSensitiveHelp_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ContextSensitiveHelp$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ContextSensitiveHelp"));
    public static VarHandle ContextSensitiveHelp$VH() {
        return IOleInPlaceSiteVtbl.ContextSensitiveHelp$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*ContextSensitiveHelp)(IOleInPlaceSite*,BOOL);
     * }
     */
    public static MemorySegment ContextSensitiveHelp$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceSiteVtbl.ContextSensitiveHelp$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*ContextSensitiveHelp)(IOleInPlaceSite*,BOOL);
     * }
     */
    public static void ContextSensitiveHelp$set(MemorySegment seg, MemorySegment x) {
        IOleInPlaceSiteVtbl.ContextSensitiveHelp$VH.set(seg, x);
    }
    public static MemorySegment ContextSensitiveHelp$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceSiteVtbl.ContextSensitiveHelp$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ContextSensitiveHelp$set(MemorySegment seg, long index, MemorySegment x) {
        IOleInPlaceSiteVtbl.ContextSensitiveHelp$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ContextSensitiveHelp ContextSensitiveHelp(MemorySegment segment, SegmentScope scope) {
        return ContextSensitiveHelp.ofAddress(ContextSensitiveHelp$get(segment), scope);
    }
    static final FunctionDescriptor CanInPlaceActivate$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor CanInPlaceActivate_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle CanInPlaceActivate_UP$MH = RuntimeHelper.upcallHandle(CanInPlaceActivate.class, "apply", IOleInPlaceSiteVtbl.CanInPlaceActivate_UP$FUNC);
    static final FunctionDescriptor CanInPlaceActivate_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle CanInPlaceActivate_DOWN$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceSiteVtbl.CanInPlaceActivate_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*CanInPlaceActivate)(IOleInPlaceSite*);
     * }
     */
    public interface CanInPlaceActivate {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(CanInPlaceActivate fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IOleInPlaceSiteVtbl.CanInPlaceActivate_UP$MH, fi, IOleInPlaceSiteVtbl.CanInPlaceActivate$FUNC, scope);
        }
        static CanInPlaceActivate ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IOleInPlaceSiteVtbl.CanInPlaceActivate_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle CanInPlaceActivate$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("CanInPlaceActivate"));
    public static VarHandle CanInPlaceActivate$VH() {
        return IOleInPlaceSiteVtbl.CanInPlaceActivate$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*CanInPlaceActivate)(IOleInPlaceSite*);
     * }
     */
    public static MemorySegment CanInPlaceActivate$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceSiteVtbl.CanInPlaceActivate$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*CanInPlaceActivate)(IOleInPlaceSite*);
     * }
     */
    public static void CanInPlaceActivate$set(MemorySegment seg, MemorySegment x) {
        IOleInPlaceSiteVtbl.CanInPlaceActivate$VH.set(seg, x);
    }
    public static MemorySegment CanInPlaceActivate$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceSiteVtbl.CanInPlaceActivate$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CanInPlaceActivate$set(MemorySegment seg, long index, MemorySegment x) {
        IOleInPlaceSiteVtbl.CanInPlaceActivate$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static CanInPlaceActivate CanInPlaceActivate(MemorySegment segment, SegmentScope scope) {
        return CanInPlaceActivate.ofAddress(CanInPlaceActivate$get(segment), scope);
    }
    static final FunctionDescriptor OnInPlaceActivate$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor OnInPlaceActivate_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle OnInPlaceActivate_UP$MH = RuntimeHelper.upcallHandle(OnInPlaceActivate.class, "apply", IOleInPlaceSiteVtbl.OnInPlaceActivate_UP$FUNC);
    static final FunctionDescriptor OnInPlaceActivate_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle OnInPlaceActivate_DOWN$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceSiteVtbl.OnInPlaceActivate_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*OnInPlaceActivate)(IOleInPlaceSite*);
     * }
     */
    public interface OnInPlaceActivate {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(OnInPlaceActivate fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IOleInPlaceSiteVtbl.OnInPlaceActivate_UP$MH, fi, IOleInPlaceSiteVtbl.OnInPlaceActivate$FUNC, scope);
        }
        static OnInPlaceActivate ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IOleInPlaceSiteVtbl.OnInPlaceActivate_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle OnInPlaceActivate$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("OnInPlaceActivate"));
    public static VarHandle OnInPlaceActivate$VH() {
        return IOleInPlaceSiteVtbl.OnInPlaceActivate$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*OnInPlaceActivate)(IOleInPlaceSite*);
     * }
     */
    public static MemorySegment OnInPlaceActivate$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceSiteVtbl.OnInPlaceActivate$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*OnInPlaceActivate)(IOleInPlaceSite*);
     * }
     */
    public static void OnInPlaceActivate$set(MemorySegment seg, MemorySegment x) {
        IOleInPlaceSiteVtbl.OnInPlaceActivate$VH.set(seg, x);
    }
    public static MemorySegment OnInPlaceActivate$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceSiteVtbl.OnInPlaceActivate$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void OnInPlaceActivate$set(MemorySegment seg, long index, MemorySegment x) {
        IOleInPlaceSiteVtbl.OnInPlaceActivate$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static OnInPlaceActivate OnInPlaceActivate(MemorySegment segment, SegmentScope scope) {
        return OnInPlaceActivate.ofAddress(OnInPlaceActivate$get(segment), scope);
    }
    static final FunctionDescriptor OnUIActivate$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor OnUIActivate_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle OnUIActivate_UP$MH = RuntimeHelper.upcallHandle(OnUIActivate.class, "apply", IOleInPlaceSiteVtbl.OnUIActivate_UP$FUNC);
    static final FunctionDescriptor OnUIActivate_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle OnUIActivate_DOWN$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceSiteVtbl.OnUIActivate_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*OnUIActivate)(IOleInPlaceSite*);
     * }
     */
    public interface OnUIActivate {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(OnUIActivate fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IOleInPlaceSiteVtbl.OnUIActivate_UP$MH, fi, IOleInPlaceSiteVtbl.OnUIActivate$FUNC, scope);
        }
        static OnUIActivate ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IOleInPlaceSiteVtbl.OnUIActivate_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle OnUIActivate$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("OnUIActivate"));
    public static VarHandle OnUIActivate$VH() {
        return IOleInPlaceSiteVtbl.OnUIActivate$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*OnUIActivate)(IOleInPlaceSite*);
     * }
     */
    public static MemorySegment OnUIActivate$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceSiteVtbl.OnUIActivate$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*OnUIActivate)(IOleInPlaceSite*);
     * }
     */
    public static void OnUIActivate$set(MemorySegment seg, MemorySegment x) {
        IOleInPlaceSiteVtbl.OnUIActivate$VH.set(seg, x);
    }
    public static MemorySegment OnUIActivate$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceSiteVtbl.OnUIActivate$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void OnUIActivate$set(MemorySegment seg, long index, MemorySegment x) {
        IOleInPlaceSiteVtbl.OnUIActivate$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static OnUIActivate OnUIActivate(MemorySegment segment, SegmentScope scope) {
        return OnUIActivate.ofAddress(OnUIActivate$get(segment), scope);
    }
    static final FunctionDescriptor GetWindowContext$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetWindowContext_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetWindowContext_UP$MH = RuntimeHelper.upcallHandle(GetWindowContext.class, "apply", IOleInPlaceSiteVtbl.GetWindowContext_UP$FUNC);
    static final FunctionDescriptor GetWindowContext_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetWindowContext_DOWN$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceSiteVtbl.GetWindowContext_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetWindowContext)(IOleInPlaceSite*,IOleInPlaceFrame**,IOleInPlaceUIWindow**,LPRECT,LPRECT,LPOLEINPLACEFRAMEINFO);
     * }
     */
    public interface GetWindowContext {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5);
        static MemorySegment allocate(GetWindowContext fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IOleInPlaceSiteVtbl.GetWindowContext_UP$MH, fi, IOleInPlaceSiteVtbl.GetWindowContext$FUNC, scope);
        }
        static GetWindowContext ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5) -> {
                try {
                    return (int)IOleInPlaceSiteVtbl.GetWindowContext_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetWindowContext$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetWindowContext"));
    public static VarHandle GetWindowContext$VH() {
        return IOleInPlaceSiteVtbl.GetWindowContext$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetWindowContext)(IOleInPlaceSite*,IOleInPlaceFrame**,IOleInPlaceUIWindow**,LPRECT,LPRECT,LPOLEINPLACEFRAMEINFO);
     * }
     */
    public static MemorySegment GetWindowContext$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceSiteVtbl.GetWindowContext$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetWindowContext)(IOleInPlaceSite*,IOleInPlaceFrame**,IOleInPlaceUIWindow**,LPRECT,LPRECT,LPOLEINPLACEFRAMEINFO);
     * }
     */
    public static void GetWindowContext$set(MemorySegment seg, MemorySegment x) {
        IOleInPlaceSiteVtbl.GetWindowContext$VH.set(seg, x);
    }
    public static MemorySegment GetWindowContext$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceSiteVtbl.GetWindowContext$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetWindowContext$set(MemorySegment seg, long index, MemorySegment x) {
        IOleInPlaceSiteVtbl.GetWindowContext$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetWindowContext GetWindowContext(MemorySegment segment, SegmentScope scope) {
        return GetWindowContext.ofAddress(GetWindowContext$get(segment), scope);
    }
    static final FunctionDescriptor Scroll$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("cx"),
            Constants$root.C_LONG$LAYOUT.withName("cy")
        ).withName("tagSIZE")
    );
    static final FunctionDescriptor Scroll_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("cx"),
            Constants$root.C_LONG$LAYOUT.withName("cy")
        ).withName("tagSIZE")
    );
    static final MethodHandle Scroll_UP$MH = RuntimeHelper.upcallHandle(Scroll.class, "apply", IOleInPlaceSiteVtbl.Scroll_UP$FUNC);
    static final FunctionDescriptor Scroll_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("cx"),
            Constants$root.C_LONG$LAYOUT.withName("cy")
        ).withName("tagSIZE")
    );
    static final MethodHandle Scroll_DOWN$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceSiteVtbl.Scroll_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*Scroll)(IOleInPlaceSite*,SIZE);
     * }
     */
    public interface Scroll {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(Scroll fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IOleInPlaceSiteVtbl.Scroll_UP$MH, fi, IOleInPlaceSiteVtbl.Scroll$FUNC, scope);
        }
        static Scroll ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IOleInPlaceSiteVtbl.Scroll_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Scroll$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Scroll"));
    public static VarHandle Scroll$VH() {
        return IOleInPlaceSiteVtbl.Scroll$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Scroll)(IOleInPlaceSite*,SIZE);
     * }
     */
    public static MemorySegment Scroll$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceSiteVtbl.Scroll$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Scroll)(IOleInPlaceSite*,SIZE);
     * }
     */
    public static void Scroll$set(MemorySegment seg, MemorySegment x) {
        IOleInPlaceSiteVtbl.Scroll$VH.set(seg, x);
    }
    public static MemorySegment Scroll$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceSiteVtbl.Scroll$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Scroll$set(MemorySegment seg, long index, MemorySegment x) {
        IOleInPlaceSiteVtbl.Scroll$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Scroll Scroll(MemorySegment segment, SegmentScope scope) {
        return Scroll.ofAddress(Scroll$get(segment), scope);
    }
    static final FunctionDescriptor OnUIDeactivate$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor OnUIDeactivate_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle OnUIDeactivate_UP$MH = RuntimeHelper.upcallHandle(OnUIDeactivate.class, "apply", IOleInPlaceSiteVtbl.OnUIDeactivate_UP$FUNC);
    static final FunctionDescriptor OnUIDeactivate_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle OnUIDeactivate_DOWN$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceSiteVtbl.OnUIDeactivate_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*OnUIDeactivate)(IOleInPlaceSite*,BOOL);
     * }
     */
    public interface OnUIDeactivate {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(OnUIDeactivate fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IOleInPlaceSiteVtbl.OnUIDeactivate_UP$MH, fi, IOleInPlaceSiteVtbl.OnUIDeactivate$FUNC, scope);
        }
        static OnUIDeactivate ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)IOleInPlaceSiteVtbl.OnUIDeactivate_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle OnUIDeactivate$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("OnUIDeactivate"));
    public static VarHandle OnUIDeactivate$VH() {
        return IOleInPlaceSiteVtbl.OnUIDeactivate$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*OnUIDeactivate)(IOleInPlaceSite*,BOOL);
     * }
     */
    public static MemorySegment OnUIDeactivate$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceSiteVtbl.OnUIDeactivate$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*OnUIDeactivate)(IOleInPlaceSite*,BOOL);
     * }
     */
    public static void OnUIDeactivate$set(MemorySegment seg, MemorySegment x) {
        IOleInPlaceSiteVtbl.OnUIDeactivate$VH.set(seg, x);
    }
    public static MemorySegment OnUIDeactivate$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceSiteVtbl.OnUIDeactivate$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void OnUIDeactivate$set(MemorySegment seg, long index, MemorySegment x) {
        IOleInPlaceSiteVtbl.OnUIDeactivate$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static OnUIDeactivate OnUIDeactivate(MemorySegment segment, SegmentScope scope) {
        return OnUIDeactivate.ofAddress(OnUIDeactivate$get(segment), scope);
    }
    static final FunctionDescriptor OnInPlaceDeactivate$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor OnInPlaceDeactivate_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle OnInPlaceDeactivate_UP$MH = RuntimeHelper.upcallHandle(OnInPlaceDeactivate.class, "apply", IOleInPlaceSiteVtbl.OnInPlaceDeactivate_UP$FUNC);
    static final FunctionDescriptor OnInPlaceDeactivate_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle OnInPlaceDeactivate_DOWN$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceSiteVtbl.OnInPlaceDeactivate_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*OnInPlaceDeactivate)(IOleInPlaceSite*);
     * }
     */
    public interface OnInPlaceDeactivate {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(OnInPlaceDeactivate fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IOleInPlaceSiteVtbl.OnInPlaceDeactivate_UP$MH, fi, IOleInPlaceSiteVtbl.OnInPlaceDeactivate$FUNC, scope);
        }
        static OnInPlaceDeactivate ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IOleInPlaceSiteVtbl.OnInPlaceDeactivate_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle OnInPlaceDeactivate$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("OnInPlaceDeactivate"));
    public static VarHandle OnInPlaceDeactivate$VH() {
        return IOleInPlaceSiteVtbl.OnInPlaceDeactivate$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*OnInPlaceDeactivate)(IOleInPlaceSite*);
     * }
     */
    public static MemorySegment OnInPlaceDeactivate$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceSiteVtbl.OnInPlaceDeactivate$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*OnInPlaceDeactivate)(IOleInPlaceSite*);
     * }
     */
    public static void OnInPlaceDeactivate$set(MemorySegment seg, MemorySegment x) {
        IOleInPlaceSiteVtbl.OnInPlaceDeactivate$VH.set(seg, x);
    }
    public static MemorySegment OnInPlaceDeactivate$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceSiteVtbl.OnInPlaceDeactivate$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void OnInPlaceDeactivate$set(MemorySegment seg, long index, MemorySegment x) {
        IOleInPlaceSiteVtbl.OnInPlaceDeactivate$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static OnInPlaceDeactivate OnInPlaceDeactivate(MemorySegment segment, SegmentScope scope) {
        return OnInPlaceDeactivate.ofAddress(OnInPlaceDeactivate$get(segment), scope);
    }
    static final FunctionDescriptor DiscardUndoState$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor DiscardUndoState_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle DiscardUndoState_UP$MH = RuntimeHelper.upcallHandle(DiscardUndoState.class, "apply", IOleInPlaceSiteVtbl.DiscardUndoState_UP$FUNC);
    static final FunctionDescriptor DiscardUndoState_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle DiscardUndoState_DOWN$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceSiteVtbl.DiscardUndoState_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*DiscardUndoState)(IOleInPlaceSite*);
     * }
     */
    public interface DiscardUndoState {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(DiscardUndoState fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IOleInPlaceSiteVtbl.DiscardUndoState_UP$MH, fi, IOleInPlaceSiteVtbl.DiscardUndoState$FUNC, scope);
        }
        static DiscardUndoState ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IOleInPlaceSiteVtbl.DiscardUndoState_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle DiscardUndoState$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("DiscardUndoState"));
    public static VarHandle DiscardUndoState$VH() {
        return IOleInPlaceSiteVtbl.DiscardUndoState$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*DiscardUndoState)(IOleInPlaceSite*);
     * }
     */
    public static MemorySegment DiscardUndoState$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceSiteVtbl.DiscardUndoState$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*DiscardUndoState)(IOleInPlaceSite*);
     * }
     */
    public static void DiscardUndoState$set(MemorySegment seg, MemorySegment x) {
        IOleInPlaceSiteVtbl.DiscardUndoState$VH.set(seg, x);
    }
    public static MemorySegment DiscardUndoState$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceSiteVtbl.DiscardUndoState$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DiscardUndoState$set(MemorySegment seg, long index, MemorySegment x) {
        IOleInPlaceSiteVtbl.DiscardUndoState$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static DiscardUndoState DiscardUndoState(MemorySegment segment, SegmentScope scope) {
        return DiscardUndoState.ofAddress(DiscardUndoState$get(segment), scope);
    }
    static final FunctionDescriptor DeactivateAndUndo$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor DeactivateAndUndo_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle DeactivateAndUndo_UP$MH = RuntimeHelper.upcallHandle(DeactivateAndUndo.class, "apply", IOleInPlaceSiteVtbl.DeactivateAndUndo_UP$FUNC);
    static final FunctionDescriptor DeactivateAndUndo_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle DeactivateAndUndo_DOWN$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceSiteVtbl.DeactivateAndUndo_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*DeactivateAndUndo)(IOleInPlaceSite*);
     * }
     */
    public interface DeactivateAndUndo {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(DeactivateAndUndo fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IOleInPlaceSiteVtbl.DeactivateAndUndo_UP$MH, fi, IOleInPlaceSiteVtbl.DeactivateAndUndo$FUNC, scope);
        }
        static DeactivateAndUndo ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IOleInPlaceSiteVtbl.DeactivateAndUndo_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle DeactivateAndUndo$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("DeactivateAndUndo"));
    public static VarHandle DeactivateAndUndo$VH() {
        return IOleInPlaceSiteVtbl.DeactivateAndUndo$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*DeactivateAndUndo)(IOleInPlaceSite*);
     * }
     */
    public static MemorySegment DeactivateAndUndo$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceSiteVtbl.DeactivateAndUndo$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*DeactivateAndUndo)(IOleInPlaceSite*);
     * }
     */
    public static void DeactivateAndUndo$set(MemorySegment seg, MemorySegment x) {
        IOleInPlaceSiteVtbl.DeactivateAndUndo$VH.set(seg, x);
    }
    public static MemorySegment DeactivateAndUndo$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceSiteVtbl.DeactivateAndUndo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DeactivateAndUndo$set(MemorySegment seg, long index, MemorySegment x) {
        IOleInPlaceSiteVtbl.DeactivateAndUndo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static DeactivateAndUndo DeactivateAndUndo(MemorySegment segment, SegmentScope scope) {
        return DeactivateAndUndo.ofAddress(DeactivateAndUndo$get(segment), scope);
    }
    static final FunctionDescriptor OnPosRectChange$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor OnPosRectChange_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle OnPosRectChange_UP$MH = RuntimeHelper.upcallHandle(OnPosRectChange.class, "apply", IOleInPlaceSiteVtbl.OnPosRectChange_UP$FUNC);
    static final FunctionDescriptor OnPosRectChange_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle OnPosRectChange_DOWN$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceSiteVtbl.OnPosRectChange_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*OnPosRectChange)(IOleInPlaceSite*,LPCRECT);
     * }
     */
    public interface OnPosRectChange {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(OnPosRectChange fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IOleInPlaceSiteVtbl.OnPosRectChange_UP$MH, fi, IOleInPlaceSiteVtbl.OnPosRectChange$FUNC, scope);
        }
        static OnPosRectChange ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IOleInPlaceSiteVtbl.OnPosRectChange_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle OnPosRectChange$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("OnPosRectChange"));
    public static VarHandle OnPosRectChange$VH() {
        return IOleInPlaceSiteVtbl.OnPosRectChange$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*OnPosRectChange)(IOleInPlaceSite*,LPCRECT);
     * }
     */
    public static MemorySegment OnPosRectChange$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceSiteVtbl.OnPosRectChange$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*OnPosRectChange)(IOleInPlaceSite*,LPCRECT);
     * }
     */
    public static void OnPosRectChange$set(MemorySegment seg, MemorySegment x) {
        IOleInPlaceSiteVtbl.OnPosRectChange$VH.set(seg, x);
    }
    public static MemorySegment OnPosRectChange$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceSiteVtbl.OnPosRectChange$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void OnPosRectChange$set(MemorySegment seg, long index, MemorySegment x) {
        IOleInPlaceSiteVtbl.OnPosRectChange$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static OnPosRectChange OnPosRectChange(MemorySegment segment, SegmentScope scope) {
        return OnPosRectChange.ofAddress(OnPosRectChange$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


