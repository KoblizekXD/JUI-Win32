// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IComThreadingInfoVtbl {
 *     HRESULT (*QueryInterface)(IComThreadingInfo*,const IID*,void**);
 *     ULONG (*AddRef)(IComThreadingInfo*);
 *     ULONG (*Release)(IComThreadingInfo*);
 *     HRESULT (*GetCurrentApartmentType)(IComThreadingInfo*,APTTYPE*);
 *     HRESULT (*GetCurrentThreadType)(IComThreadingInfo*,THDTYPE*);
 *     HRESULT (*GetCurrentLogicalThreadId)(IComThreadingInfo*,GUID*);
 *     HRESULT (*SetCurrentLogicalThreadId)(IComThreadingInfo*,const GUID*);
 * };
 * }
 */
public class IComThreadingInfoVtbl {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("GetCurrentApartmentType"),
        Constants$root.C_POINTER$LAYOUT.withName("GetCurrentThreadType"),
        Constants$root.C_POINTER$LAYOUT.withName("GetCurrentLogicalThreadId"),
        Constants$root.C_POINTER$LAYOUT.withName("SetCurrentLogicalThreadId")
    ).withName("IComThreadingInfoVtbl");
    public static MemoryLayout $LAYOUT() {
        return IComThreadingInfoVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor QueryInterface_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_UP$MH = RuntimeHelper.upcallHandle(QueryInterface.class, "apply", IComThreadingInfoVtbl.QueryInterface_UP$FUNC);
    static final FunctionDescriptor QueryInterface_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_DOWN$MH = RuntimeHelper.downcallHandle(
        IComThreadingInfoVtbl.QueryInterface_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(IComThreadingInfo*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IComThreadingInfoVtbl.QueryInterface_UP$MH, fi, IComThreadingInfoVtbl.QueryInterface$FUNC, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IComThreadingInfoVtbl.QueryInterface_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return IComThreadingInfoVtbl.QueryInterface$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IComThreadingInfo*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IComThreadingInfoVtbl.QueryInterface$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IComThreadingInfo*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        IComThreadingInfoVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IComThreadingInfoVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        IComThreadingInfoVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, SegmentScope scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor AddRef_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_UP$MH = RuntimeHelper.upcallHandle(AddRef.class, "apply", IComThreadingInfoVtbl.AddRef_UP$FUNC);
    static final FunctionDescriptor AddRef_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_DOWN$MH = RuntimeHelper.downcallHandle(
        IComThreadingInfoVtbl.AddRef_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*AddRef)(IComThreadingInfo*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IComThreadingInfoVtbl.AddRef_UP$MH, fi, IComThreadingInfoVtbl.AddRef$FUNC, scope);
        }
        static AddRef ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IComThreadingInfoVtbl.AddRef_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return IComThreadingInfoVtbl.AddRef$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(IComThreadingInfo*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IComThreadingInfoVtbl.AddRef$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(IComThreadingInfo*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        IComThreadingInfoVtbl.AddRef$VH.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IComThreadingInfoVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        IComThreadingInfoVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, SegmentScope scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Release_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_UP$MH = RuntimeHelper.upcallHandle(Release.class, "apply", IComThreadingInfoVtbl.Release_UP$FUNC);
    static final FunctionDescriptor Release_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_DOWN$MH = RuntimeHelper.downcallHandle(
        IComThreadingInfoVtbl.Release_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*Release)(IComThreadingInfo*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IComThreadingInfoVtbl.Release_UP$MH, fi, IComThreadingInfoVtbl.Release$FUNC, scope);
        }
        static Release ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IComThreadingInfoVtbl.Release_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return IComThreadingInfoVtbl.Release$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(IComThreadingInfo*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IComThreadingInfoVtbl.Release$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(IComThreadingInfo*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        IComThreadingInfoVtbl.Release$VH.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IComThreadingInfoVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        IComThreadingInfoVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, SegmentScope scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    static final FunctionDescriptor GetCurrentApartmentType$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetCurrentApartmentType_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetCurrentApartmentType_UP$MH = RuntimeHelper.upcallHandle(GetCurrentApartmentType.class, "apply", IComThreadingInfoVtbl.GetCurrentApartmentType_UP$FUNC);
    static final FunctionDescriptor GetCurrentApartmentType_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetCurrentApartmentType_DOWN$MH = RuntimeHelper.downcallHandle(
        IComThreadingInfoVtbl.GetCurrentApartmentType_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetCurrentApartmentType)(IComThreadingInfo*,APTTYPE*);
     * }
     */
    public interface GetCurrentApartmentType {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetCurrentApartmentType fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IComThreadingInfoVtbl.GetCurrentApartmentType_UP$MH, fi, IComThreadingInfoVtbl.GetCurrentApartmentType$FUNC, scope);
        }
        static GetCurrentApartmentType ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IComThreadingInfoVtbl.GetCurrentApartmentType_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetCurrentApartmentType$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetCurrentApartmentType"));
    public static VarHandle GetCurrentApartmentType$VH() {
        return IComThreadingInfoVtbl.GetCurrentApartmentType$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetCurrentApartmentType)(IComThreadingInfo*,APTTYPE*);
     * }
     */
    public static MemorySegment GetCurrentApartmentType$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IComThreadingInfoVtbl.GetCurrentApartmentType$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetCurrentApartmentType)(IComThreadingInfo*,APTTYPE*);
     * }
     */
    public static void GetCurrentApartmentType$set(MemorySegment seg, MemorySegment x) {
        IComThreadingInfoVtbl.GetCurrentApartmentType$VH.set(seg, x);
    }
    public static MemorySegment GetCurrentApartmentType$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IComThreadingInfoVtbl.GetCurrentApartmentType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetCurrentApartmentType$set(MemorySegment seg, long index, MemorySegment x) {
        IComThreadingInfoVtbl.GetCurrentApartmentType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetCurrentApartmentType GetCurrentApartmentType(MemorySegment segment, SegmentScope scope) {
        return GetCurrentApartmentType.ofAddress(GetCurrentApartmentType$get(segment), scope);
    }
    static final FunctionDescriptor GetCurrentThreadType$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetCurrentThreadType_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetCurrentThreadType_UP$MH = RuntimeHelper.upcallHandle(GetCurrentThreadType.class, "apply", IComThreadingInfoVtbl.GetCurrentThreadType_UP$FUNC);
    static final FunctionDescriptor GetCurrentThreadType_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetCurrentThreadType_DOWN$MH = RuntimeHelper.downcallHandle(
        IComThreadingInfoVtbl.GetCurrentThreadType_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetCurrentThreadType)(IComThreadingInfo*,THDTYPE*);
     * }
     */
    public interface GetCurrentThreadType {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetCurrentThreadType fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IComThreadingInfoVtbl.GetCurrentThreadType_UP$MH, fi, IComThreadingInfoVtbl.GetCurrentThreadType$FUNC, scope);
        }
        static GetCurrentThreadType ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IComThreadingInfoVtbl.GetCurrentThreadType_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetCurrentThreadType$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetCurrentThreadType"));
    public static VarHandle GetCurrentThreadType$VH() {
        return IComThreadingInfoVtbl.GetCurrentThreadType$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetCurrentThreadType)(IComThreadingInfo*,THDTYPE*);
     * }
     */
    public static MemorySegment GetCurrentThreadType$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IComThreadingInfoVtbl.GetCurrentThreadType$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetCurrentThreadType)(IComThreadingInfo*,THDTYPE*);
     * }
     */
    public static void GetCurrentThreadType$set(MemorySegment seg, MemorySegment x) {
        IComThreadingInfoVtbl.GetCurrentThreadType$VH.set(seg, x);
    }
    public static MemorySegment GetCurrentThreadType$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IComThreadingInfoVtbl.GetCurrentThreadType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetCurrentThreadType$set(MemorySegment seg, long index, MemorySegment x) {
        IComThreadingInfoVtbl.GetCurrentThreadType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetCurrentThreadType GetCurrentThreadType(MemorySegment segment, SegmentScope scope) {
        return GetCurrentThreadType.ofAddress(GetCurrentThreadType$get(segment), scope);
    }
    static final FunctionDescriptor GetCurrentLogicalThreadId$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetCurrentLogicalThreadId_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetCurrentLogicalThreadId_UP$MH = RuntimeHelper.upcallHandle(GetCurrentLogicalThreadId.class, "apply", IComThreadingInfoVtbl.GetCurrentLogicalThreadId_UP$FUNC);
    static final FunctionDescriptor GetCurrentLogicalThreadId_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetCurrentLogicalThreadId_DOWN$MH = RuntimeHelper.downcallHandle(
        IComThreadingInfoVtbl.GetCurrentLogicalThreadId_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetCurrentLogicalThreadId)(IComThreadingInfo*,GUID*);
     * }
     */
    public interface GetCurrentLogicalThreadId {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetCurrentLogicalThreadId fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IComThreadingInfoVtbl.GetCurrentLogicalThreadId_UP$MH, fi, IComThreadingInfoVtbl.GetCurrentLogicalThreadId$FUNC, scope);
        }
        static GetCurrentLogicalThreadId ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IComThreadingInfoVtbl.GetCurrentLogicalThreadId_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetCurrentLogicalThreadId$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetCurrentLogicalThreadId"));
    public static VarHandle GetCurrentLogicalThreadId$VH() {
        return IComThreadingInfoVtbl.GetCurrentLogicalThreadId$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetCurrentLogicalThreadId)(IComThreadingInfo*,GUID*);
     * }
     */
    public static MemorySegment GetCurrentLogicalThreadId$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IComThreadingInfoVtbl.GetCurrentLogicalThreadId$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetCurrentLogicalThreadId)(IComThreadingInfo*,GUID*);
     * }
     */
    public static void GetCurrentLogicalThreadId$set(MemorySegment seg, MemorySegment x) {
        IComThreadingInfoVtbl.GetCurrentLogicalThreadId$VH.set(seg, x);
    }
    public static MemorySegment GetCurrentLogicalThreadId$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IComThreadingInfoVtbl.GetCurrentLogicalThreadId$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetCurrentLogicalThreadId$set(MemorySegment seg, long index, MemorySegment x) {
        IComThreadingInfoVtbl.GetCurrentLogicalThreadId$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetCurrentLogicalThreadId GetCurrentLogicalThreadId(MemorySegment segment, SegmentScope scope) {
        return GetCurrentLogicalThreadId.ofAddress(GetCurrentLogicalThreadId$get(segment), scope);
    }
    static final FunctionDescriptor SetCurrentLogicalThreadId$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor SetCurrentLogicalThreadId_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetCurrentLogicalThreadId_UP$MH = RuntimeHelper.upcallHandle(SetCurrentLogicalThreadId.class, "apply", IComThreadingInfoVtbl.SetCurrentLogicalThreadId_UP$FUNC);
    static final FunctionDescriptor SetCurrentLogicalThreadId_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetCurrentLogicalThreadId_DOWN$MH = RuntimeHelper.downcallHandle(
        IComThreadingInfoVtbl.SetCurrentLogicalThreadId_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetCurrentLogicalThreadId)(IComThreadingInfo*,const GUID*);
     * }
     */
    public interface SetCurrentLogicalThreadId {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(SetCurrentLogicalThreadId fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IComThreadingInfoVtbl.SetCurrentLogicalThreadId_UP$MH, fi, IComThreadingInfoVtbl.SetCurrentLogicalThreadId$FUNC, scope);
        }
        static SetCurrentLogicalThreadId ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IComThreadingInfoVtbl.SetCurrentLogicalThreadId_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetCurrentLogicalThreadId$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetCurrentLogicalThreadId"));
    public static VarHandle SetCurrentLogicalThreadId$VH() {
        return IComThreadingInfoVtbl.SetCurrentLogicalThreadId$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetCurrentLogicalThreadId)(IComThreadingInfo*,const GUID*);
     * }
     */
    public static MemorySegment SetCurrentLogicalThreadId$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IComThreadingInfoVtbl.SetCurrentLogicalThreadId$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetCurrentLogicalThreadId)(IComThreadingInfo*,const GUID*);
     * }
     */
    public static void SetCurrentLogicalThreadId$set(MemorySegment seg, MemorySegment x) {
        IComThreadingInfoVtbl.SetCurrentLogicalThreadId$VH.set(seg, x);
    }
    public static MemorySegment SetCurrentLogicalThreadId$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IComThreadingInfoVtbl.SetCurrentLogicalThreadId$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetCurrentLogicalThreadId$set(MemorySegment seg, long index, MemorySegment x) {
        IComThreadingInfoVtbl.SetCurrentLogicalThreadId$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetCurrentLogicalThreadId SetCurrentLogicalThreadId(MemorySegment segment, SegmentScope scope) {
        return SetCurrentLogicalThreadId.ofAddress(SetCurrentLogicalThreadId$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


