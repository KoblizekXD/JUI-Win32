// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * int (*PFN_CERT_STORE_PROV_FREE_FIND_CRL)(void* hStoreProv,struct _CRL_CONTEXT* pCrlContext,void* pvStoreProvFindInfo,unsigned long dwFlags);
 * }
 */
public interface PFN_CERT_STORE_PROV_FREE_FIND_CRL {

    int apply(java.lang.foreign.MemorySegment hStoreProv, java.lang.foreign.MemorySegment pCtlContext, java.lang.foreign.MemorySegment pvStoreProvFindInfo, int dwFlags);
    static MemorySegment allocate(PFN_CERT_STORE_PROV_FREE_FIND_CRL fi, SegmentScope scope) {
        return RuntimeHelper.upcallStub(constants$757.PFN_CERT_STORE_PROV_FREE_FIND_CRL_UP$MH, fi, constants$757.PFN_CERT_STORE_PROV_FREE_FIND_CRL$FUNC, scope);
    }
    static PFN_CERT_STORE_PROV_FREE_FIND_CRL ofAddress(MemorySegment addr, SegmentScope scope) {
        MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
        return (java.lang.foreign.MemorySegment _hStoreProv, java.lang.foreign.MemorySegment _pCtlContext, java.lang.foreign.MemorySegment _pvStoreProvFindInfo, int _dwFlags) -> {
            try {
                return (int)constants$758.PFN_CERT_STORE_PROV_FREE_FIND_CRL_DOWN$MH.invokeExact(symbol, _hStoreProv, _pCtlContext, _pvStoreProvFindInfo, _dwFlags);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


