// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct {
 *     LPCSTR szReader;
 *     LPVOID pvUserData;
 *     DWORD dwCurrentState;
 *     DWORD dwEventState;
 *     DWORD cbAtr;
 *     BYTE rgbAtr[36];
 * };
 * }
 */
public class SCARD_READERSTATEA {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("szReader"),
        Constants$root.C_POINTER$LAYOUT.withName("pvUserData"),
        Constants$root.C_LONG$LAYOUT.withName("dwCurrentState"),
        Constants$root.C_LONG$LAYOUT.withName("dwEventState"),
        Constants$root.C_LONG$LAYOUT.withName("cbAtr"),
        MemoryLayout.sequenceLayout(36, Constants$root.C_CHAR$LAYOUT).withName("rgbAtr")
    );
    public static MemoryLayout $LAYOUT() {
        return SCARD_READERSTATEA.$struct$LAYOUT;
    }
    static final VarHandle szReader$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("szReader"));
    public static VarHandle szReader$VH() {
        return SCARD_READERSTATEA.szReader$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPCSTR szReader;
     * }
     */
    public static MemorySegment szReader$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)SCARD_READERSTATEA.szReader$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPCSTR szReader;
     * }
     */
    public static void szReader$set(MemorySegment seg, MemorySegment x) {
        SCARD_READERSTATEA.szReader$VH.set(seg, x);
    }
    public static MemorySegment szReader$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)SCARD_READERSTATEA.szReader$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void szReader$set(MemorySegment seg, long index, MemorySegment x) {
        SCARD_READERSTATEA.szReader$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pvUserData$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pvUserData"));
    public static VarHandle pvUserData$VH() {
        return SCARD_READERSTATEA.pvUserData$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPVOID pvUserData;
     * }
     */
    public static MemorySegment pvUserData$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)SCARD_READERSTATEA.pvUserData$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPVOID pvUserData;
     * }
     */
    public static void pvUserData$set(MemorySegment seg, MemorySegment x) {
        SCARD_READERSTATEA.pvUserData$VH.set(seg, x);
    }
    public static MemorySegment pvUserData$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)SCARD_READERSTATEA.pvUserData$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pvUserData$set(MemorySegment seg, long index, MemorySegment x) {
        SCARD_READERSTATEA.pvUserData$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwCurrentState$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwCurrentState"));
    public static VarHandle dwCurrentState$VH() {
        return SCARD_READERSTATEA.dwCurrentState$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwCurrentState;
     * }
     */
    public static int dwCurrentState$get(MemorySegment seg) {
        return (int)SCARD_READERSTATEA.dwCurrentState$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwCurrentState;
     * }
     */
    public static void dwCurrentState$set(MemorySegment seg, int x) {
        SCARD_READERSTATEA.dwCurrentState$VH.set(seg, x);
    }
    public static int dwCurrentState$get(MemorySegment seg, long index) {
        return (int)SCARD_READERSTATEA.dwCurrentState$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwCurrentState$set(MemorySegment seg, long index, int x) {
        SCARD_READERSTATEA.dwCurrentState$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwEventState$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwEventState"));
    public static VarHandle dwEventState$VH() {
        return SCARD_READERSTATEA.dwEventState$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwEventState;
     * }
     */
    public static int dwEventState$get(MemorySegment seg) {
        return (int)SCARD_READERSTATEA.dwEventState$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwEventState;
     * }
     */
    public static void dwEventState$set(MemorySegment seg, int x) {
        SCARD_READERSTATEA.dwEventState$VH.set(seg, x);
    }
    public static int dwEventState$get(MemorySegment seg, long index) {
        return (int)SCARD_READERSTATEA.dwEventState$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwEventState$set(MemorySegment seg, long index, int x) {
        SCARD_READERSTATEA.dwEventState$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cbAtr$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cbAtr"));
    public static VarHandle cbAtr$VH() {
        return SCARD_READERSTATEA.cbAtr$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD cbAtr;
     * }
     */
    public static int cbAtr$get(MemorySegment seg) {
        return (int)SCARD_READERSTATEA.cbAtr$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD cbAtr;
     * }
     */
    public static void cbAtr$set(MemorySegment seg, int x) {
        SCARD_READERSTATEA.cbAtr$VH.set(seg, x);
    }
    public static int cbAtr$get(MemorySegment seg, long index) {
        return (int)SCARD_READERSTATEA.cbAtr$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cbAtr$set(MemorySegment seg, long index, int x) {
        SCARD_READERSTATEA.cbAtr$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment rgbAtr$slice(MemorySegment seg) {
        return seg.asSlice(28, 36);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


