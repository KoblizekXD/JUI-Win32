// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _PERSISTENT_RESERVE_COMMAND {
 *     DWORD Version;
 *     DWORD Size;
 *     union {
 *         struct  PR_IN;
 *         struct  PR_OUT;
 *     };
 * };
 * }
 */
public class _PERSISTENT_RESERVE_COMMAND {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("Version"),
        Constants$root.C_LONG$LAYOUT.withName("Size"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                MemoryLayout.paddingLayout(16),
                Constants$root.C_SHORT$LAYOUT.withName("AllocationLength")
            ).withName("PR_IN"),
            MemoryLayout.structLayout(
                MemoryLayout.paddingLayout(16),
                MemoryLayout.sequenceLayout(0, Constants$root.C_CHAR$LAYOUT).withName("ParameterList")
            ).withName("PR_OUT")
        ).withName("$anon$0")
    ).withName("_PERSISTENT_RESERVE_COMMAND");
    public static MemoryLayout $LAYOUT() {
        return _PERSISTENT_RESERVE_COMMAND.$struct$LAYOUT;
    }
    static final VarHandle Version$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Version"));
    public static VarHandle Version$VH() {
        return _PERSISTENT_RESERVE_COMMAND.Version$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Version;
     * }
     */
    public static int Version$get(MemorySegment seg) {
        return (int)_PERSISTENT_RESERVE_COMMAND.Version$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Version;
     * }
     */
    public static void Version$set(MemorySegment seg, int x) {
        _PERSISTENT_RESERVE_COMMAND.Version$VH.set(seg, x);
    }
    public static int Version$get(MemorySegment seg, long index) {
        return (int)_PERSISTENT_RESERVE_COMMAND.Version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Version$set(MemorySegment seg, long index, int x) {
        _PERSISTENT_RESERVE_COMMAND.Version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Size$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Size"));
    public static VarHandle Size$VH() {
        return _PERSISTENT_RESERVE_COMMAND.Size$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Size;
     * }
     */
    public static int Size$get(MemorySegment seg) {
        return (int)_PERSISTENT_RESERVE_COMMAND.Size$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Size;
     * }
     */
    public static void Size$set(MemorySegment seg, int x) {
        _PERSISTENT_RESERVE_COMMAND.Size$VH.set(seg, x);
    }
    public static int Size$get(MemorySegment seg, long index) {
        return (int)_PERSISTENT_RESERVE_COMMAND.Size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Size$set(MemorySegment seg, long index, int x) {
        _PERSISTENT_RESERVE_COMMAND.Size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
     * struct {
     *          *     BYTE ServiceAction;
     *     BYTE Reserved1;
     *     WORD AllocationLength;
     * };
     * }
     */
    public static final class PR_IN {

        // Suppresses default constructor, ensuring non-instantiability.
        private PR_IN() {}
        static final StructLayout PR_IN$struct$LAYOUT = MemoryLayout.structLayout(
            MemoryLayout.paddingLayout(16),
            Constants$root.C_SHORT$LAYOUT.withName("AllocationLength")
        );
        public static MemoryLayout $LAYOUT() {
            return PR_IN.PR_IN$struct$LAYOUT;
        }
        static final VarHandle AllocationLength$VH = PR_IN$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AllocationLength"));
        public static VarHandle AllocationLength$VH() {
            return PR_IN.AllocationLength$VH;
        }
        /**
         * Getter for field:
         * {@snippet :
         * WORD AllocationLength;
         * }
         */
        public static short AllocationLength$get(MemorySegment seg) {
            return (short)PR_IN.AllocationLength$VH.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * WORD AllocationLength;
         * }
         */
        public static void AllocationLength$set(MemorySegment seg, short x) {
            PR_IN.AllocationLength$VH.set(seg, x);
        }
        public static short AllocationLength$get(MemorySegment seg, long index) {
            return (short)PR_IN.AllocationLength$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void AllocationLength$set(MemorySegment seg, long index, short x) {
            PR_IN.AllocationLength$VH.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
    }

    public static MemorySegment PR_IN$slice(MemorySegment seg) {
        return seg.asSlice(8, 4);
    }
    /**
     * {@snippet :
     * struct {
     *          *     BYTE ServiceAction;
     *     BYTE Reserved1;
     *     BYTE Type;
     *     BYTE Scope;
     *     BYTE ParameterList[0];
     * };
     * }
     */
    public static final class PR_OUT {

        // Suppresses default constructor, ensuring non-instantiability.
        private PR_OUT() {}
        static final StructLayout PR_OUT$struct$LAYOUT = MemoryLayout.structLayout(
            MemoryLayout.paddingLayout(16),
            MemoryLayout.sequenceLayout(0, Constants$root.C_CHAR$LAYOUT).withName("ParameterList")
        );
        public static MemoryLayout $LAYOUT() {
            return PR_OUT.PR_OUT$struct$LAYOUT;
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
    }

    public static MemorySegment PR_OUT$slice(MemorySegment seg) {
        return seg.asSlice(8, 2);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


