// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _PROCESS_INFORMATION {
 *     HANDLE hProcess;
 *     HANDLE hThread;
 *     DWORD dwProcessId;
 *     DWORD dwThreadId;
 * };
 * }
 */
public class _PROCESS_INFORMATION {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("hProcess"),
        Constants$root.C_POINTER$LAYOUT.withName("hThread"),
        Constants$root.C_LONG$LAYOUT.withName("dwProcessId"),
        Constants$root.C_LONG$LAYOUT.withName("dwThreadId")
    ).withName("_PROCESS_INFORMATION");
    public static MemoryLayout $LAYOUT() {
        return _PROCESS_INFORMATION.$struct$LAYOUT;
    }
    static final VarHandle hProcess$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hProcess"));
    public static VarHandle hProcess$VH() {
        return _PROCESS_INFORMATION.hProcess$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HANDLE hProcess;
     * }
     */
    public static MemorySegment hProcess$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_PROCESS_INFORMATION.hProcess$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HANDLE hProcess;
     * }
     */
    public static void hProcess$set(MemorySegment seg, MemorySegment x) {
        _PROCESS_INFORMATION.hProcess$VH.set(seg, x);
    }
    public static MemorySegment hProcess$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_PROCESS_INFORMATION.hProcess$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hProcess$set(MemorySegment seg, long index, MemorySegment x) {
        _PROCESS_INFORMATION.hProcess$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hThread$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hThread"));
    public static VarHandle hThread$VH() {
        return _PROCESS_INFORMATION.hThread$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HANDLE hThread;
     * }
     */
    public static MemorySegment hThread$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_PROCESS_INFORMATION.hThread$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HANDLE hThread;
     * }
     */
    public static void hThread$set(MemorySegment seg, MemorySegment x) {
        _PROCESS_INFORMATION.hThread$VH.set(seg, x);
    }
    public static MemorySegment hThread$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_PROCESS_INFORMATION.hThread$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hThread$set(MemorySegment seg, long index, MemorySegment x) {
        _PROCESS_INFORMATION.hThread$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwProcessId$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwProcessId"));
    public static VarHandle dwProcessId$VH() {
        return _PROCESS_INFORMATION.dwProcessId$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwProcessId;
     * }
     */
    public static int dwProcessId$get(MemorySegment seg) {
        return (int)_PROCESS_INFORMATION.dwProcessId$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwProcessId;
     * }
     */
    public static void dwProcessId$set(MemorySegment seg, int x) {
        _PROCESS_INFORMATION.dwProcessId$VH.set(seg, x);
    }
    public static int dwProcessId$get(MemorySegment seg, long index) {
        return (int)_PROCESS_INFORMATION.dwProcessId$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwProcessId$set(MemorySegment seg, long index, int x) {
        _PROCESS_INFORMATION.dwProcessId$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwThreadId$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwThreadId"));
    public static VarHandle dwThreadId$VH() {
        return _PROCESS_INFORMATION.dwThreadId$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwThreadId;
     * }
     */
    public static int dwThreadId$get(MemorySegment seg) {
        return (int)_PROCESS_INFORMATION.dwThreadId$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwThreadId;
     * }
     */
    public static void dwThreadId$set(MemorySegment seg, int x) {
        _PROCESS_INFORMATION.dwThreadId$VH.set(seg, x);
    }
    public static int dwThreadId$get(MemorySegment seg, long index) {
        return (int)_PROCESS_INFORMATION.dwThreadId$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwThreadId$set(MemorySegment seg, long index, int x) {
        _PROCESS_INFORMATION.dwThreadId$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


