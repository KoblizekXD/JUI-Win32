// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _CERT_STORE_PROV_INFO {
 *     DWORD cbSize;
 *     DWORD cStoreProvFunc;
 *     void** rgpvStoreProvFunc;
 *     HCERTSTOREPROV hStoreProv;
 *     DWORD dwStoreProvFlags;
 *     HCRYPTOIDFUNCADDR hStoreProvFuncAddr2;
 * };
 * }
 */
public class _CERT_STORE_PROV_INFO {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("cbSize"),
        Constants$root.C_LONG$LAYOUT.withName("cStoreProvFunc"),
        Constants$root.C_POINTER$LAYOUT.withName("rgpvStoreProvFunc"),
        Constants$root.C_POINTER$LAYOUT.withName("hStoreProv"),
        Constants$root.C_LONG$LAYOUT.withName("dwStoreProvFlags"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("hStoreProvFuncAddr2")
    ).withName("_CERT_STORE_PROV_INFO");
    public static MemoryLayout $LAYOUT() {
        return _CERT_STORE_PROV_INFO.$struct$LAYOUT;
    }
    static final VarHandle cbSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cbSize"));
    public static VarHandle cbSize$VH() {
        return _CERT_STORE_PROV_INFO.cbSize$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD cbSize;
     * }
     */
    public static int cbSize$get(MemorySegment seg) {
        return (int)_CERT_STORE_PROV_INFO.cbSize$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD cbSize;
     * }
     */
    public static void cbSize$set(MemorySegment seg, int x) {
        _CERT_STORE_PROV_INFO.cbSize$VH.set(seg, x);
    }
    public static int cbSize$get(MemorySegment seg, long index) {
        return (int)_CERT_STORE_PROV_INFO.cbSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cbSize$set(MemorySegment seg, long index, int x) {
        _CERT_STORE_PROV_INFO.cbSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cStoreProvFunc$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cStoreProvFunc"));
    public static VarHandle cStoreProvFunc$VH() {
        return _CERT_STORE_PROV_INFO.cStoreProvFunc$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD cStoreProvFunc;
     * }
     */
    public static int cStoreProvFunc$get(MemorySegment seg) {
        return (int)_CERT_STORE_PROV_INFO.cStoreProvFunc$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD cStoreProvFunc;
     * }
     */
    public static void cStoreProvFunc$set(MemorySegment seg, int x) {
        _CERT_STORE_PROV_INFO.cStoreProvFunc$VH.set(seg, x);
    }
    public static int cStoreProvFunc$get(MemorySegment seg, long index) {
        return (int)_CERT_STORE_PROV_INFO.cStoreProvFunc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cStoreProvFunc$set(MemorySegment seg, long index, int x) {
        _CERT_STORE_PROV_INFO.cStoreProvFunc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle rgpvStoreProvFunc$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("rgpvStoreProvFunc"));
    public static VarHandle rgpvStoreProvFunc$VH() {
        return _CERT_STORE_PROV_INFO.rgpvStoreProvFunc$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void** rgpvStoreProvFunc;
     * }
     */
    public static MemorySegment rgpvStoreProvFunc$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_CERT_STORE_PROV_INFO.rgpvStoreProvFunc$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void** rgpvStoreProvFunc;
     * }
     */
    public static void rgpvStoreProvFunc$set(MemorySegment seg, MemorySegment x) {
        _CERT_STORE_PROV_INFO.rgpvStoreProvFunc$VH.set(seg, x);
    }
    public static MemorySegment rgpvStoreProvFunc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_CERT_STORE_PROV_INFO.rgpvStoreProvFunc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void rgpvStoreProvFunc$set(MemorySegment seg, long index, MemorySegment x) {
        _CERT_STORE_PROV_INFO.rgpvStoreProvFunc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hStoreProv$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hStoreProv"));
    public static VarHandle hStoreProv$VH() {
        return _CERT_STORE_PROV_INFO.hStoreProv$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HCERTSTOREPROV hStoreProv;
     * }
     */
    public static MemorySegment hStoreProv$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_CERT_STORE_PROV_INFO.hStoreProv$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HCERTSTOREPROV hStoreProv;
     * }
     */
    public static void hStoreProv$set(MemorySegment seg, MemorySegment x) {
        _CERT_STORE_PROV_INFO.hStoreProv$VH.set(seg, x);
    }
    public static MemorySegment hStoreProv$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_CERT_STORE_PROV_INFO.hStoreProv$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hStoreProv$set(MemorySegment seg, long index, MemorySegment x) {
        _CERT_STORE_PROV_INFO.hStoreProv$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwStoreProvFlags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwStoreProvFlags"));
    public static VarHandle dwStoreProvFlags$VH() {
        return _CERT_STORE_PROV_INFO.dwStoreProvFlags$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwStoreProvFlags;
     * }
     */
    public static int dwStoreProvFlags$get(MemorySegment seg) {
        return (int)_CERT_STORE_PROV_INFO.dwStoreProvFlags$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwStoreProvFlags;
     * }
     */
    public static void dwStoreProvFlags$set(MemorySegment seg, int x) {
        _CERT_STORE_PROV_INFO.dwStoreProvFlags$VH.set(seg, x);
    }
    public static int dwStoreProvFlags$get(MemorySegment seg, long index) {
        return (int)_CERT_STORE_PROV_INFO.dwStoreProvFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwStoreProvFlags$set(MemorySegment seg, long index, int x) {
        _CERT_STORE_PROV_INFO.dwStoreProvFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hStoreProvFuncAddr2$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hStoreProvFuncAddr2"));
    public static VarHandle hStoreProvFuncAddr2$VH() {
        return _CERT_STORE_PROV_INFO.hStoreProvFuncAddr2$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HCRYPTOIDFUNCADDR hStoreProvFuncAddr2;
     * }
     */
    public static MemorySegment hStoreProvFuncAddr2$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_CERT_STORE_PROV_INFO.hStoreProvFuncAddr2$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HCRYPTOIDFUNCADDR hStoreProvFuncAddr2;
     * }
     */
    public static void hStoreProvFuncAddr2$set(MemorySegment seg, MemorySegment x) {
        _CERT_STORE_PROV_INFO.hStoreProvFuncAddr2$VH.set(seg, x);
    }
    public static MemorySegment hStoreProvFuncAddr2$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_CERT_STORE_PROV_INFO.hStoreProvFuncAddr2$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hStoreProvFuncAddr2$set(MemorySegment seg, long index, MemorySegment x) {
        _CERT_STORE_PROV_INFO.hStoreProvFuncAddr2$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


