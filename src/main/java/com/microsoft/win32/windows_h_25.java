// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class windows_h_25 extends windows_h_24 {

    public static MethodHandle SafeArrayAllocData$MH() {
        return RuntimeHelper.requireNonNull(constants$1171.SafeArrayAllocData$MH,"SafeArrayAllocData");
    }
    /**
     * {@snippet :
     * HRESULT SafeArrayAllocData(SAFEARRAY* psa);
     * }
     */
    public static int SafeArrayAllocData(MemorySegment psa) {
        var mh$ = SafeArrayAllocData$MH();
        try {
            return (int)mh$.invokeExact(psa);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SafeArrayCreate$MH() {
        return RuntimeHelper.requireNonNull(constants$1171.SafeArrayCreate$MH,"SafeArrayCreate");
    }
    /**
     * {@snippet :
     * SAFEARRAY* SafeArrayCreate(VARTYPE vt, UINT cDims, SAFEARRAYBOUND* rgsabound);
     * }
     */
    public static MemorySegment SafeArrayCreate(short vt, int cDims, MemorySegment rgsabound) {
        var mh$ = SafeArrayCreate$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(vt, cDims, rgsabound);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SafeArrayCreateEx$MH() {
        return RuntimeHelper.requireNonNull(constants$1171.SafeArrayCreateEx$MH,"SafeArrayCreateEx");
    }
    /**
     * {@snippet :
     * SAFEARRAY* SafeArrayCreateEx(VARTYPE vt, UINT cDims, SAFEARRAYBOUND* rgsabound, PVOID pvExtra);
     * }
     */
    public static MemorySegment SafeArrayCreateEx(short vt, int cDims, MemorySegment rgsabound, MemorySegment pvExtra) {
        var mh$ = SafeArrayCreateEx$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(vt, cDims, rgsabound, pvExtra);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SafeArrayCopyData$MH() {
        return RuntimeHelper.requireNonNull(constants$1171.SafeArrayCopyData$MH,"SafeArrayCopyData");
    }
    /**
     * {@snippet :
     * HRESULT SafeArrayCopyData(SAFEARRAY* psaSource, SAFEARRAY* psaTarget);
     * }
     */
    public static int SafeArrayCopyData(MemorySegment psaSource, MemorySegment psaTarget) {
        var mh$ = SafeArrayCopyData$MH();
        try {
            return (int)mh$.invokeExact(psaSource, psaTarget);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SafeArrayReleaseDescriptor$MH() {
        return RuntimeHelper.requireNonNull(constants$1172.SafeArrayReleaseDescriptor$MH,"SafeArrayReleaseDescriptor");
    }
    /**
     * {@snippet :
     * void SafeArrayReleaseDescriptor(SAFEARRAY* psa);
     * }
     */
    public static void SafeArrayReleaseDescriptor(MemorySegment psa) {
        var mh$ = SafeArrayReleaseDescriptor$MH();
        try {
            mh$.invokeExact(psa);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SafeArrayDestroyDescriptor$MH() {
        return RuntimeHelper.requireNonNull(constants$1172.SafeArrayDestroyDescriptor$MH,"SafeArrayDestroyDescriptor");
    }
    /**
     * {@snippet :
     * HRESULT SafeArrayDestroyDescriptor(SAFEARRAY* psa);
     * }
     */
    public static int SafeArrayDestroyDescriptor(MemorySegment psa) {
        var mh$ = SafeArrayDestroyDescriptor$MH();
        try {
            return (int)mh$.invokeExact(psa);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SafeArrayReleaseData$MH() {
        return RuntimeHelper.requireNonNull(constants$1172.SafeArrayReleaseData$MH,"SafeArrayReleaseData");
    }
    /**
     * {@snippet :
     * void SafeArrayReleaseData(PVOID pData);
     * }
     */
    public static void SafeArrayReleaseData(MemorySegment pData) {
        var mh$ = SafeArrayReleaseData$MH();
        try {
            mh$.invokeExact(pData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SafeArrayDestroyData$MH() {
        return RuntimeHelper.requireNonNull(constants$1172.SafeArrayDestroyData$MH,"SafeArrayDestroyData");
    }
    /**
     * {@snippet :
     * HRESULT SafeArrayDestroyData(SAFEARRAY* psa);
     * }
     */
    public static int SafeArrayDestroyData(MemorySegment psa) {
        var mh$ = SafeArrayDestroyData$MH();
        try {
            return (int)mh$.invokeExact(psa);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SafeArrayAddRef$MH() {
        return RuntimeHelper.requireNonNull(constants$1172.SafeArrayAddRef$MH,"SafeArrayAddRef");
    }
    /**
     * {@snippet :
     * HRESULT SafeArrayAddRef(SAFEARRAY* psa, PVOID* ppDataToRelease);
     * }
     */
    public static int SafeArrayAddRef(MemorySegment psa, MemorySegment ppDataToRelease) {
        var mh$ = SafeArrayAddRef$MH();
        try {
            return (int)mh$.invokeExact(psa, ppDataToRelease);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SafeArrayDestroy$MH() {
        return RuntimeHelper.requireNonNull(constants$1172.SafeArrayDestroy$MH,"SafeArrayDestroy");
    }
    /**
     * {@snippet :
     * HRESULT SafeArrayDestroy(SAFEARRAY* psa);
     * }
     */
    public static int SafeArrayDestroy(MemorySegment psa) {
        var mh$ = SafeArrayDestroy$MH();
        try {
            return (int)mh$.invokeExact(psa);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SafeArrayRedim$MH() {
        return RuntimeHelper.requireNonNull(constants$1173.SafeArrayRedim$MH,"SafeArrayRedim");
    }
    /**
     * {@snippet :
     * HRESULT SafeArrayRedim(SAFEARRAY* psa, SAFEARRAYBOUND* psaboundNew);
     * }
     */
    public static int SafeArrayRedim(MemorySegment psa, MemorySegment psaboundNew) {
        var mh$ = SafeArrayRedim$MH();
        try {
            return (int)mh$.invokeExact(psa, psaboundNew);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SafeArrayGetDim$MH() {
        return RuntimeHelper.requireNonNull(constants$1173.SafeArrayGetDim$MH,"SafeArrayGetDim");
    }
    /**
     * {@snippet :
     * UINT SafeArrayGetDim(SAFEARRAY* psa);
     * }
     */
    public static int SafeArrayGetDim(MemorySegment psa) {
        var mh$ = SafeArrayGetDim$MH();
        try {
            return (int)mh$.invokeExact(psa);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SafeArrayGetElemsize$MH() {
        return RuntimeHelper.requireNonNull(constants$1173.SafeArrayGetElemsize$MH,"SafeArrayGetElemsize");
    }
    /**
     * {@snippet :
     * UINT SafeArrayGetElemsize(SAFEARRAY* psa);
     * }
     */
    public static int SafeArrayGetElemsize(MemorySegment psa) {
        var mh$ = SafeArrayGetElemsize$MH();
        try {
            return (int)mh$.invokeExact(psa);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SafeArrayGetUBound$MH() {
        return RuntimeHelper.requireNonNull(constants$1173.SafeArrayGetUBound$MH,"SafeArrayGetUBound");
    }
    /**
     * {@snippet :
     * HRESULT SafeArrayGetUBound(SAFEARRAY* psa, UINT nDim, LONG* plUbound);
     * }
     */
    public static int SafeArrayGetUBound(MemorySegment psa, int nDim, MemorySegment plUbound) {
        var mh$ = SafeArrayGetUBound$MH();
        try {
            return (int)mh$.invokeExact(psa, nDim, plUbound);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SafeArrayGetLBound$MH() {
        return RuntimeHelper.requireNonNull(constants$1173.SafeArrayGetLBound$MH,"SafeArrayGetLBound");
    }
    /**
     * {@snippet :
     * HRESULT SafeArrayGetLBound(SAFEARRAY* psa, UINT nDim, LONG* plLbound);
     * }
     */
    public static int SafeArrayGetLBound(MemorySegment psa, int nDim, MemorySegment plLbound) {
        var mh$ = SafeArrayGetLBound$MH();
        try {
            return (int)mh$.invokeExact(psa, nDim, plLbound);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SafeArrayLock$MH() {
        return RuntimeHelper.requireNonNull(constants$1173.SafeArrayLock$MH,"SafeArrayLock");
    }
    /**
     * {@snippet :
     * HRESULT SafeArrayLock(SAFEARRAY* psa);
     * }
     */
    public static int SafeArrayLock(MemorySegment psa) {
        var mh$ = SafeArrayLock$MH();
        try {
            return (int)mh$.invokeExact(psa);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SafeArrayUnlock$MH() {
        return RuntimeHelper.requireNonNull(constants$1174.SafeArrayUnlock$MH,"SafeArrayUnlock");
    }
    /**
     * {@snippet :
     * HRESULT SafeArrayUnlock(SAFEARRAY* psa);
     * }
     */
    public static int SafeArrayUnlock(MemorySegment psa) {
        var mh$ = SafeArrayUnlock$MH();
        try {
            return (int)mh$.invokeExact(psa);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SafeArrayAccessData$MH() {
        return RuntimeHelper.requireNonNull(constants$1174.SafeArrayAccessData$MH,"SafeArrayAccessData");
    }
    /**
     * {@snippet :
     * HRESULT SafeArrayAccessData(SAFEARRAY* psa, void** ppvData);
     * }
     */
    public static int SafeArrayAccessData(MemorySegment psa, MemorySegment ppvData) {
        var mh$ = SafeArrayAccessData$MH();
        try {
            return (int)mh$.invokeExact(psa, ppvData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SafeArrayUnaccessData$MH() {
        return RuntimeHelper.requireNonNull(constants$1174.SafeArrayUnaccessData$MH,"SafeArrayUnaccessData");
    }
    /**
     * {@snippet :
     * HRESULT SafeArrayUnaccessData(SAFEARRAY* psa);
     * }
     */
    public static int SafeArrayUnaccessData(MemorySegment psa) {
        var mh$ = SafeArrayUnaccessData$MH();
        try {
            return (int)mh$.invokeExact(psa);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SafeArrayGetElement$MH() {
        return RuntimeHelper.requireNonNull(constants$1174.SafeArrayGetElement$MH,"SafeArrayGetElement");
    }
    /**
     * {@snippet :
     * HRESULT SafeArrayGetElement(SAFEARRAY* psa, LONG* rgIndices, void* pv);
     * }
     */
    public static int SafeArrayGetElement(MemorySegment psa, MemorySegment rgIndices, MemorySegment pv) {
        var mh$ = SafeArrayGetElement$MH();
        try {
            return (int)mh$.invokeExact(psa, rgIndices, pv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SafeArrayPutElement$MH() {
        return RuntimeHelper.requireNonNull(constants$1174.SafeArrayPutElement$MH,"SafeArrayPutElement");
    }
    /**
     * {@snippet :
     * HRESULT SafeArrayPutElement(SAFEARRAY* psa, LONG* rgIndices, void* pv);
     * }
     */
    public static int SafeArrayPutElement(MemorySegment psa, MemorySegment rgIndices, MemorySegment pv) {
        var mh$ = SafeArrayPutElement$MH();
        try {
            return (int)mh$.invokeExact(psa, rgIndices, pv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SafeArrayCopy$MH() {
        return RuntimeHelper.requireNonNull(constants$1174.SafeArrayCopy$MH,"SafeArrayCopy");
    }
    /**
     * {@snippet :
     * HRESULT SafeArrayCopy(SAFEARRAY* psa, SAFEARRAY** ppsaOut);
     * }
     */
    public static int SafeArrayCopy(MemorySegment psa, MemorySegment ppsaOut) {
        var mh$ = SafeArrayCopy$MH();
        try {
            return (int)mh$.invokeExact(psa, ppsaOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SafeArrayPtrOfIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$1175.SafeArrayPtrOfIndex$MH,"SafeArrayPtrOfIndex");
    }
    /**
     * {@snippet :
     * HRESULT SafeArrayPtrOfIndex(SAFEARRAY* psa, LONG* rgIndices, void** ppvData);
     * }
     */
    public static int SafeArrayPtrOfIndex(MemorySegment psa, MemorySegment rgIndices, MemorySegment ppvData) {
        var mh$ = SafeArrayPtrOfIndex$MH();
        try {
            return (int)mh$.invokeExact(psa, rgIndices, ppvData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SafeArraySetRecordInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$1175.SafeArraySetRecordInfo$MH,"SafeArraySetRecordInfo");
    }
    /**
     * {@snippet :
     * HRESULT SafeArraySetRecordInfo(SAFEARRAY* psa, IRecordInfo* prinfo);
     * }
     */
    public static int SafeArraySetRecordInfo(MemorySegment psa, MemorySegment prinfo) {
        var mh$ = SafeArraySetRecordInfo$MH();
        try {
            return (int)mh$.invokeExact(psa, prinfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SafeArrayGetRecordInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$1175.SafeArrayGetRecordInfo$MH,"SafeArrayGetRecordInfo");
    }
    /**
     * {@snippet :
     * HRESULT SafeArrayGetRecordInfo(SAFEARRAY* psa, IRecordInfo** prinfo);
     * }
     */
    public static int SafeArrayGetRecordInfo(MemorySegment psa, MemorySegment prinfo) {
        var mh$ = SafeArrayGetRecordInfo$MH();
        try {
            return (int)mh$.invokeExact(psa, prinfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SafeArraySetIID$MH() {
        return RuntimeHelper.requireNonNull(constants$1175.SafeArraySetIID$MH,"SafeArraySetIID");
    }
    /**
     * {@snippet :
     * HRESULT SafeArraySetIID(SAFEARRAY* psa, const GUID* guid);
     * }
     */
    public static int SafeArraySetIID(MemorySegment psa, MemorySegment guid) {
        var mh$ = SafeArraySetIID$MH();
        try {
            return (int)mh$.invokeExact(psa, guid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SafeArrayGetIID$MH() {
        return RuntimeHelper.requireNonNull(constants$1175.SafeArrayGetIID$MH,"SafeArrayGetIID");
    }
    /**
     * {@snippet :
     * HRESULT SafeArrayGetIID(SAFEARRAY* psa, GUID* pguid);
     * }
     */
    public static int SafeArrayGetIID(MemorySegment psa, MemorySegment pguid) {
        var mh$ = SafeArrayGetIID$MH();
        try {
            return (int)mh$.invokeExact(psa, pguid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SafeArrayGetVartype$MH() {
        return RuntimeHelper.requireNonNull(constants$1175.SafeArrayGetVartype$MH,"SafeArrayGetVartype");
    }
    /**
     * {@snippet :
     * HRESULT SafeArrayGetVartype(SAFEARRAY* psa, VARTYPE* pvt);
     * }
     */
    public static int SafeArrayGetVartype(MemorySegment psa, MemorySegment pvt) {
        var mh$ = SafeArrayGetVartype$MH();
        try {
            return (int)mh$.invokeExact(psa, pvt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SafeArrayCreateVector$MH() {
        return RuntimeHelper.requireNonNull(constants$1176.SafeArrayCreateVector$MH,"SafeArrayCreateVector");
    }
    /**
     * {@snippet :
     * SAFEARRAY* SafeArrayCreateVector(VARTYPE vt, LONG lLbound, ULONG cElements);
     * }
     */
    public static MemorySegment SafeArrayCreateVector(short vt, int lLbound, int cElements) {
        var mh$ = SafeArrayCreateVector$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(vt, lLbound, cElements);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SafeArrayCreateVectorEx$MH() {
        return RuntimeHelper.requireNonNull(constants$1176.SafeArrayCreateVectorEx$MH,"SafeArrayCreateVectorEx");
    }
    /**
     * {@snippet :
     * SAFEARRAY* SafeArrayCreateVectorEx(VARTYPE vt, LONG lLbound, ULONG cElements, PVOID pvExtra);
     * }
     */
    public static MemorySegment SafeArrayCreateVectorEx(short vt, int lLbound, int cElements, MemorySegment pvExtra) {
        var mh$ = SafeArrayCreateVectorEx$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(vt, lLbound, cElements, pvExtra);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VariantInit$MH() {
        return RuntimeHelper.requireNonNull(constants$1176.VariantInit$MH,"VariantInit");
    }
    /**
     * {@snippet :
     * void VariantInit(VARIANTARG* pvarg);
     * }
     */
    public static void VariantInit(MemorySegment pvarg) {
        var mh$ = VariantInit$MH();
        try {
            mh$.invokeExact(pvarg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VariantClear$MH() {
        return RuntimeHelper.requireNonNull(constants$1176.VariantClear$MH,"VariantClear");
    }
    /**
     * {@snippet :
     * HRESULT VariantClear(VARIANTARG* pvarg);
     * }
     */
    public static int VariantClear(MemorySegment pvarg) {
        var mh$ = VariantClear$MH();
        try {
            return (int)mh$.invokeExact(pvarg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VariantCopy$MH() {
        return RuntimeHelper.requireNonNull(constants$1176.VariantCopy$MH,"VariantCopy");
    }
    /**
     * {@snippet :
     * HRESULT VariantCopy(VARIANTARG* pvargDest, const VARIANTARG* pvargSrc);
     * }
     */
    public static int VariantCopy(MemorySegment pvargDest, MemorySegment pvargSrc) {
        var mh$ = VariantCopy$MH();
        try {
            return (int)mh$.invokeExact(pvargDest, pvargSrc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VariantCopyInd$MH() {
        return RuntimeHelper.requireNonNull(constants$1176.VariantCopyInd$MH,"VariantCopyInd");
    }
    /**
     * {@snippet :
     * HRESULT VariantCopyInd(VARIANT* pvarDest, const VARIANTARG* pvargSrc);
     * }
     */
    public static int VariantCopyInd(MemorySegment pvarDest, MemorySegment pvargSrc) {
        var mh$ = VariantCopyInd$MH();
        try {
            return (int)mh$.invokeExact(pvarDest, pvargSrc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VariantChangeType$MH() {
        return RuntimeHelper.requireNonNull(constants$1177.VariantChangeType$MH,"VariantChangeType");
    }
    /**
     * {@snippet :
     * HRESULT VariantChangeType(VARIANTARG* pvargDest, const VARIANTARG* pvarSrc, USHORT wFlags, VARTYPE vt);
     * }
     */
    public static int VariantChangeType(MemorySegment pvargDest, MemorySegment pvarSrc, short wFlags, short vt) {
        var mh$ = VariantChangeType$MH();
        try {
            return (int)mh$.invokeExact(pvargDest, pvarSrc, wFlags, vt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VariantChangeTypeEx$MH() {
        return RuntimeHelper.requireNonNull(constants$1177.VariantChangeTypeEx$MH,"VariantChangeTypeEx");
    }
    /**
     * {@snippet :
     * HRESULT VariantChangeTypeEx(VARIANTARG* pvargDest, const VARIANTARG* pvarSrc, LCID lcid, USHORT wFlags, VARTYPE vt);
     * }
     */
    public static int VariantChangeTypeEx(MemorySegment pvargDest, MemorySegment pvarSrc, int lcid, short wFlags, short vt) {
        var mh$ = VariantChangeTypeEx$MH();
        try {
            return (int)mh$.invokeExact(pvargDest, pvarSrc, lcid, wFlags, vt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VectorFromBstr$MH() {
        return RuntimeHelper.requireNonNull(constants$1177.VectorFromBstr$MH,"VectorFromBstr");
    }
    /**
     * {@snippet :
     * HRESULT VectorFromBstr(BSTR bstr, SAFEARRAY** ppsa);
     * }
     */
    public static int VectorFromBstr(MemorySegment bstr, MemorySegment ppsa) {
        var mh$ = VectorFromBstr$MH();
        try {
            return (int)mh$.invokeExact(bstr, ppsa);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BstrFromVector$MH() {
        return RuntimeHelper.requireNonNull(constants$1177.BstrFromVector$MH,"BstrFromVector");
    }
    /**
     * {@snippet :
     * HRESULT BstrFromVector(SAFEARRAY* psa, BSTR* pbstr);
     * }
     */
    public static int BstrFromVector(MemorySegment psa, MemorySegment pbstr) {
        var mh$ = BstrFromVector$MH();
        try {
            return (int)mh$.invokeExact(psa, pbstr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarUI1FromI2$MH() {
        return RuntimeHelper.requireNonNull(constants$1177.VarUI1FromI2$MH,"VarUI1FromI2");
    }
    /**
     * {@snippet :
     * HRESULT VarUI1FromI2(SHORT sIn, BYTE* pbOut);
     * }
     */
    public static int VarUI1FromI2(short sIn, MemorySegment pbOut) {
        var mh$ = VarUI1FromI2$MH();
        try {
            return (int)mh$.invokeExact(sIn, pbOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarUI1FromI4$MH() {
        return RuntimeHelper.requireNonNull(constants$1177.VarUI1FromI4$MH,"VarUI1FromI4");
    }
    /**
     * {@snippet :
     * HRESULT VarUI1FromI4(LONG lIn, BYTE* pbOut);
     * }
     */
    public static int VarUI1FromI4(int lIn, MemorySegment pbOut) {
        var mh$ = VarUI1FromI4$MH();
        try {
            return (int)mh$.invokeExact(lIn, pbOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarUI1FromI8$MH() {
        return RuntimeHelper.requireNonNull(constants$1178.VarUI1FromI8$MH,"VarUI1FromI8");
    }
    /**
     * {@snippet :
     * HRESULT VarUI1FromI8(LONG64 i64In, BYTE* pbOut);
     * }
     */
    public static int VarUI1FromI8(long i64In, MemorySegment pbOut) {
        var mh$ = VarUI1FromI8$MH();
        try {
            return (int)mh$.invokeExact(i64In, pbOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarUI1FromR4$MH() {
        return RuntimeHelper.requireNonNull(constants$1178.VarUI1FromR4$MH,"VarUI1FromR4");
    }
    /**
     * {@snippet :
     * HRESULT VarUI1FromR4(FLOAT fltIn, BYTE* pbOut);
     * }
     */
    public static int VarUI1FromR4(float fltIn, MemorySegment pbOut) {
        var mh$ = VarUI1FromR4$MH();
        try {
            return (int)mh$.invokeExact(fltIn, pbOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarUI1FromR8$MH() {
        return RuntimeHelper.requireNonNull(constants$1178.VarUI1FromR8$MH,"VarUI1FromR8");
    }
    /**
     * {@snippet :
     * HRESULT VarUI1FromR8(DOUBLE dblIn, BYTE* pbOut);
     * }
     */
    public static int VarUI1FromR8(double dblIn, MemorySegment pbOut) {
        var mh$ = VarUI1FromR8$MH();
        try {
            return (int)mh$.invokeExact(dblIn, pbOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarUI1FromCy$MH() {
        return RuntimeHelper.requireNonNull(constants$1178.VarUI1FromCy$MH,"VarUI1FromCy");
    }
    /**
     * {@snippet :
     * HRESULT VarUI1FromCy(CY cyIn, BYTE* pbOut);
     * }
     */
    public static int VarUI1FromCy(MemorySegment cyIn, MemorySegment pbOut) {
        var mh$ = VarUI1FromCy$MH();
        try {
            return (int)mh$.invokeExact(cyIn, pbOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarUI1FromDate$MH() {
        return RuntimeHelper.requireNonNull(constants$1178.VarUI1FromDate$MH,"VarUI1FromDate");
    }
    /**
     * {@snippet :
     * HRESULT VarUI1FromDate(DATE dateIn, BYTE* pbOut);
     * }
     */
    public static int VarUI1FromDate(double dateIn, MemorySegment pbOut) {
        var mh$ = VarUI1FromDate$MH();
        try {
            return (int)mh$.invokeExact(dateIn, pbOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarUI1FromStr$MH() {
        return RuntimeHelper.requireNonNull(constants$1178.VarUI1FromStr$MH,"VarUI1FromStr");
    }
    /**
     * {@snippet :
     * HRESULT VarUI1FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, BYTE* pbOut);
     * }
     */
    public static int VarUI1FromStr(MemorySegment strIn, int lcid, int dwFlags, MemorySegment pbOut) {
        var mh$ = VarUI1FromStr$MH();
        try {
            return (int)mh$.invokeExact(strIn, lcid, dwFlags, pbOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarUI1FromDisp$MH() {
        return RuntimeHelper.requireNonNull(constants$1179.VarUI1FromDisp$MH,"VarUI1FromDisp");
    }
    /**
     * {@snippet :
     * HRESULT VarUI1FromDisp(IDispatch* pdispIn, LCID lcid, BYTE* pbOut);
     * }
     */
    public static int VarUI1FromDisp(MemorySegment pdispIn, int lcid, MemorySegment pbOut) {
        var mh$ = VarUI1FromDisp$MH();
        try {
            return (int)mh$.invokeExact(pdispIn, lcid, pbOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarUI1FromBool$MH() {
        return RuntimeHelper.requireNonNull(constants$1179.VarUI1FromBool$MH,"VarUI1FromBool");
    }
    /**
     * {@snippet :
     * HRESULT VarUI1FromBool(VARIANT_BOOL boolIn, BYTE* pbOut);
     * }
     */
    public static int VarUI1FromBool(short boolIn, MemorySegment pbOut) {
        var mh$ = VarUI1FromBool$MH();
        try {
            return (int)mh$.invokeExact(boolIn, pbOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarUI1FromI1$MH() {
        return RuntimeHelper.requireNonNull(constants$1179.VarUI1FromI1$MH,"VarUI1FromI1");
    }
    /**
     * {@snippet :
     * HRESULT VarUI1FromI1(CHAR cIn, BYTE* pbOut);
     * }
     */
    public static int VarUI1FromI1(byte cIn, MemorySegment pbOut) {
        var mh$ = VarUI1FromI1$MH();
        try {
            return (int)mh$.invokeExact(cIn, pbOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarUI1FromUI2$MH() {
        return RuntimeHelper.requireNonNull(constants$1179.VarUI1FromUI2$MH,"VarUI1FromUI2");
    }
    /**
     * {@snippet :
     * HRESULT VarUI1FromUI2(USHORT uiIn, BYTE* pbOut);
     * }
     */
    public static int VarUI1FromUI2(short uiIn, MemorySegment pbOut) {
        var mh$ = VarUI1FromUI2$MH();
        try {
            return (int)mh$.invokeExact(uiIn, pbOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarUI1FromUI4$MH() {
        return RuntimeHelper.requireNonNull(constants$1179.VarUI1FromUI4$MH,"VarUI1FromUI4");
    }
    /**
     * {@snippet :
     * HRESULT VarUI1FromUI4(ULONG ulIn, BYTE* pbOut);
     * }
     */
    public static int VarUI1FromUI4(int ulIn, MemorySegment pbOut) {
        var mh$ = VarUI1FromUI4$MH();
        try {
            return (int)mh$.invokeExact(ulIn, pbOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarUI1FromUI8$MH() {
        return RuntimeHelper.requireNonNull(constants$1179.VarUI1FromUI8$MH,"VarUI1FromUI8");
    }
    /**
     * {@snippet :
     * HRESULT VarUI1FromUI8(ULONG64 ui64In, BYTE* pbOut);
     * }
     */
    public static int VarUI1FromUI8(long ui64In, MemorySegment pbOut) {
        var mh$ = VarUI1FromUI8$MH();
        try {
            return (int)mh$.invokeExact(ui64In, pbOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarUI1FromDec$MH() {
        return RuntimeHelper.requireNonNull(constants$1180.VarUI1FromDec$MH,"VarUI1FromDec");
    }
    /**
     * {@snippet :
     * HRESULT VarUI1FromDec(const DECIMAL* pdecIn, BYTE* pbOut);
     * }
     */
    public static int VarUI1FromDec(MemorySegment pdecIn, MemorySegment pbOut) {
        var mh$ = VarUI1FromDec$MH();
        try {
            return (int)mh$.invokeExact(pdecIn, pbOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarI2FromUI1$MH() {
        return RuntimeHelper.requireNonNull(constants$1180.VarI2FromUI1$MH,"VarI2FromUI1");
    }
    /**
     * {@snippet :
     * HRESULT VarI2FromUI1(BYTE bIn, SHORT* psOut);
     * }
     */
    public static int VarI2FromUI1(byte bIn, MemorySegment psOut) {
        var mh$ = VarI2FromUI1$MH();
        try {
            return (int)mh$.invokeExact(bIn, psOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarI2FromI4$MH() {
        return RuntimeHelper.requireNonNull(constants$1180.VarI2FromI4$MH,"VarI2FromI4");
    }
    /**
     * {@snippet :
     * HRESULT VarI2FromI4(LONG lIn, SHORT* psOut);
     * }
     */
    public static int VarI2FromI4(int lIn, MemorySegment psOut) {
        var mh$ = VarI2FromI4$MH();
        try {
            return (int)mh$.invokeExact(lIn, psOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarI2FromI8$MH() {
        return RuntimeHelper.requireNonNull(constants$1180.VarI2FromI8$MH,"VarI2FromI8");
    }
    /**
     * {@snippet :
     * HRESULT VarI2FromI8(LONG64 i64In, SHORT* psOut);
     * }
     */
    public static int VarI2FromI8(long i64In, MemorySegment psOut) {
        var mh$ = VarI2FromI8$MH();
        try {
            return (int)mh$.invokeExact(i64In, psOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarI2FromR4$MH() {
        return RuntimeHelper.requireNonNull(constants$1180.VarI2FromR4$MH,"VarI2FromR4");
    }
    /**
     * {@snippet :
     * HRESULT VarI2FromR4(FLOAT fltIn, SHORT* psOut);
     * }
     */
    public static int VarI2FromR4(float fltIn, MemorySegment psOut) {
        var mh$ = VarI2FromR4$MH();
        try {
            return (int)mh$.invokeExact(fltIn, psOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarI2FromR8$MH() {
        return RuntimeHelper.requireNonNull(constants$1180.VarI2FromR8$MH,"VarI2FromR8");
    }
    /**
     * {@snippet :
     * HRESULT VarI2FromR8(DOUBLE dblIn, SHORT* psOut);
     * }
     */
    public static int VarI2FromR8(double dblIn, MemorySegment psOut) {
        var mh$ = VarI2FromR8$MH();
        try {
            return (int)mh$.invokeExact(dblIn, psOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarI2FromCy$MH() {
        return RuntimeHelper.requireNonNull(constants$1181.VarI2FromCy$MH,"VarI2FromCy");
    }
    /**
     * {@snippet :
     * HRESULT VarI2FromCy(CY cyIn, SHORT* psOut);
     * }
     */
    public static int VarI2FromCy(MemorySegment cyIn, MemorySegment psOut) {
        var mh$ = VarI2FromCy$MH();
        try {
            return (int)mh$.invokeExact(cyIn, psOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarI2FromDate$MH() {
        return RuntimeHelper.requireNonNull(constants$1181.VarI2FromDate$MH,"VarI2FromDate");
    }
    /**
     * {@snippet :
     * HRESULT VarI2FromDate(DATE dateIn, SHORT* psOut);
     * }
     */
    public static int VarI2FromDate(double dateIn, MemorySegment psOut) {
        var mh$ = VarI2FromDate$MH();
        try {
            return (int)mh$.invokeExact(dateIn, psOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarI2FromStr$MH() {
        return RuntimeHelper.requireNonNull(constants$1181.VarI2FromStr$MH,"VarI2FromStr");
    }
    /**
     * {@snippet :
     * HRESULT VarI2FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, SHORT* psOut);
     * }
     */
    public static int VarI2FromStr(MemorySegment strIn, int lcid, int dwFlags, MemorySegment psOut) {
        var mh$ = VarI2FromStr$MH();
        try {
            return (int)mh$.invokeExact(strIn, lcid, dwFlags, psOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarI2FromDisp$MH() {
        return RuntimeHelper.requireNonNull(constants$1181.VarI2FromDisp$MH,"VarI2FromDisp");
    }
    /**
     * {@snippet :
     * HRESULT VarI2FromDisp(IDispatch* pdispIn, LCID lcid, SHORT* psOut);
     * }
     */
    public static int VarI2FromDisp(MemorySegment pdispIn, int lcid, MemorySegment psOut) {
        var mh$ = VarI2FromDisp$MH();
        try {
            return (int)mh$.invokeExact(pdispIn, lcid, psOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarI2FromBool$MH() {
        return RuntimeHelper.requireNonNull(constants$1181.VarI2FromBool$MH,"VarI2FromBool");
    }
    /**
     * {@snippet :
     * HRESULT VarI2FromBool(VARIANT_BOOL boolIn, SHORT* psOut);
     * }
     */
    public static int VarI2FromBool(short boolIn, MemorySegment psOut) {
        var mh$ = VarI2FromBool$MH();
        try {
            return (int)mh$.invokeExact(boolIn, psOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarI2FromI1$MH() {
        return RuntimeHelper.requireNonNull(constants$1181.VarI2FromI1$MH,"VarI2FromI1");
    }
    /**
     * {@snippet :
     * HRESULT VarI2FromI1(CHAR cIn, SHORT* psOut);
     * }
     */
    public static int VarI2FromI1(byte cIn, MemorySegment psOut) {
        var mh$ = VarI2FromI1$MH();
        try {
            return (int)mh$.invokeExact(cIn, psOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarI2FromUI2$MH() {
        return RuntimeHelper.requireNonNull(constants$1182.VarI2FromUI2$MH,"VarI2FromUI2");
    }
    /**
     * {@snippet :
     * HRESULT VarI2FromUI2(USHORT uiIn, SHORT* psOut);
     * }
     */
    public static int VarI2FromUI2(short uiIn, MemorySegment psOut) {
        var mh$ = VarI2FromUI2$MH();
        try {
            return (int)mh$.invokeExact(uiIn, psOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarI2FromUI4$MH() {
        return RuntimeHelper.requireNonNull(constants$1182.VarI2FromUI4$MH,"VarI2FromUI4");
    }
    /**
     * {@snippet :
     * HRESULT VarI2FromUI4(ULONG ulIn, SHORT* psOut);
     * }
     */
    public static int VarI2FromUI4(int ulIn, MemorySegment psOut) {
        var mh$ = VarI2FromUI4$MH();
        try {
            return (int)mh$.invokeExact(ulIn, psOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarI2FromUI8$MH() {
        return RuntimeHelper.requireNonNull(constants$1182.VarI2FromUI8$MH,"VarI2FromUI8");
    }
    /**
     * {@snippet :
     * HRESULT VarI2FromUI8(ULONG64 ui64In, SHORT* psOut);
     * }
     */
    public static int VarI2FromUI8(long ui64In, MemorySegment psOut) {
        var mh$ = VarI2FromUI8$MH();
        try {
            return (int)mh$.invokeExact(ui64In, psOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarI2FromDec$MH() {
        return RuntimeHelper.requireNonNull(constants$1182.VarI2FromDec$MH,"VarI2FromDec");
    }
    /**
     * {@snippet :
     * HRESULT VarI2FromDec(const DECIMAL* pdecIn, SHORT* psOut);
     * }
     */
    public static int VarI2FromDec(MemorySegment pdecIn, MemorySegment psOut) {
        var mh$ = VarI2FromDec$MH();
        try {
            return (int)mh$.invokeExact(pdecIn, psOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarI4FromUI1$MH() {
        return RuntimeHelper.requireNonNull(constants$1182.VarI4FromUI1$MH,"VarI4FromUI1");
    }
    /**
     * {@snippet :
     * HRESULT VarI4FromUI1(BYTE bIn, LONG* plOut);
     * }
     */
    public static int VarI4FromUI1(byte bIn, MemorySegment plOut) {
        var mh$ = VarI4FromUI1$MH();
        try {
            return (int)mh$.invokeExact(bIn, plOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarI4FromI2$MH() {
        return RuntimeHelper.requireNonNull(constants$1182.VarI4FromI2$MH,"VarI4FromI2");
    }
    /**
     * {@snippet :
     * HRESULT VarI4FromI2(SHORT sIn, LONG* plOut);
     * }
     */
    public static int VarI4FromI2(short sIn, MemorySegment plOut) {
        var mh$ = VarI4FromI2$MH();
        try {
            return (int)mh$.invokeExact(sIn, plOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarI4FromI8$MH() {
        return RuntimeHelper.requireNonNull(constants$1183.VarI4FromI8$MH,"VarI4FromI8");
    }
    /**
     * {@snippet :
     * HRESULT VarI4FromI8(LONG64 i64In, LONG* plOut);
     * }
     */
    public static int VarI4FromI8(long i64In, MemorySegment plOut) {
        var mh$ = VarI4FromI8$MH();
        try {
            return (int)mh$.invokeExact(i64In, plOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarI4FromR4$MH() {
        return RuntimeHelper.requireNonNull(constants$1183.VarI4FromR4$MH,"VarI4FromR4");
    }
    /**
     * {@snippet :
     * HRESULT VarI4FromR4(FLOAT fltIn, LONG* plOut);
     * }
     */
    public static int VarI4FromR4(float fltIn, MemorySegment plOut) {
        var mh$ = VarI4FromR4$MH();
        try {
            return (int)mh$.invokeExact(fltIn, plOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarI4FromR8$MH() {
        return RuntimeHelper.requireNonNull(constants$1183.VarI4FromR8$MH,"VarI4FromR8");
    }
    /**
     * {@snippet :
     * HRESULT VarI4FromR8(DOUBLE dblIn, LONG* plOut);
     * }
     */
    public static int VarI4FromR8(double dblIn, MemorySegment plOut) {
        var mh$ = VarI4FromR8$MH();
        try {
            return (int)mh$.invokeExact(dblIn, plOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarI4FromCy$MH() {
        return RuntimeHelper.requireNonNull(constants$1183.VarI4FromCy$MH,"VarI4FromCy");
    }
    /**
     * {@snippet :
     * HRESULT VarI4FromCy(CY cyIn, LONG* plOut);
     * }
     */
    public static int VarI4FromCy(MemorySegment cyIn, MemorySegment plOut) {
        var mh$ = VarI4FromCy$MH();
        try {
            return (int)mh$.invokeExact(cyIn, plOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarI4FromDate$MH() {
        return RuntimeHelper.requireNonNull(constants$1183.VarI4FromDate$MH,"VarI4FromDate");
    }
    /**
     * {@snippet :
     * HRESULT VarI4FromDate(DATE dateIn, LONG* plOut);
     * }
     */
    public static int VarI4FromDate(double dateIn, MemorySegment plOut) {
        var mh$ = VarI4FromDate$MH();
        try {
            return (int)mh$.invokeExact(dateIn, plOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarI4FromStr$MH() {
        return RuntimeHelper.requireNonNull(constants$1183.VarI4FromStr$MH,"VarI4FromStr");
    }
    /**
     * {@snippet :
     * HRESULT VarI4FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, LONG* plOut);
     * }
     */
    public static int VarI4FromStr(MemorySegment strIn, int lcid, int dwFlags, MemorySegment plOut) {
        var mh$ = VarI4FromStr$MH();
        try {
            return (int)mh$.invokeExact(strIn, lcid, dwFlags, plOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarI4FromDisp$MH() {
        return RuntimeHelper.requireNonNull(constants$1184.VarI4FromDisp$MH,"VarI4FromDisp");
    }
    /**
     * {@snippet :
     * HRESULT VarI4FromDisp(IDispatch* pdispIn, LCID lcid, LONG* plOut);
     * }
     */
    public static int VarI4FromDisp(MemorySegment pdispIn, int lcid, MemorySegment plOut) {
        var mh$ = VarI4FromDisp$MH();
        try {
            return (int)mh$.invokeExact(pdispIn, lcid, plOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarI4FromBool$MH() {
        return RuntimeHelper.requireNonNull(constants$1184.VarI4FromBool$MH,"VarI4FromBool");
    }
    /**
     * {@snippet :
     * HRESULT VarI4FromBool(VARIANT_BOOL boolIn, LONG* plOut);
     * }
     */
    public static int VarI4FromBool(short boolIn, MemorySegment plOut) {
        var mh$ = VarI4FromBool$MH();
        try {
            return (int)mh$.invokeExact(boolIn, plOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarI4FromI1$MH() {
        return RuntimeHelper.requireNonNull(constants$1184.VarI4FromI1$MH,"VarI4FromI1");
    }
    /**
     * {@snippet :
     * HRESULT VarI4FromI1(CHAR cIn, LONG* plOut);
     * }
     */
    public static int VarI4FromI1(byte cIn, MemorySegment plOut) {
        var mh$ = VarI4FromI1$MH();
        try {
            return (int)mh$.invokeExact(cIn, plOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarI4FromUI2$MH() {
        return RuntimeHelper.requireNonNull(constants$1184.VarI4FromUI2$MH,"VarI4FromUI2");
    }
    /**
     * {@snippet :
     * HRESULT VarI4FromUI2(USHORT uiIn, LONG* plOut);
     * }
     */
    public static int VarI4FromUI2(short uiIn, MemorySegment plOut) {
        var mh$ = VarI4FromUI2$MH();
        try {
            return (int)mh$.invokeExact(uiIn, plOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarI4FromUI4$MH() {
        return RuntimeHelper.requireNonNull(constants$1184.VarI4FromUI4$MH,"VarI4FromUI4");
    }
    /**
     * {@snippet :
     * HRESULT VarI4FromUI4(ULONG ulIn, LONG* plOut);
     * }
     */
    public static int VarI4FromUI4(int ulIn, MemorySegment plOut) {
        var mh$ = VarI4FromUI4$MH();
        try {
            return (int)mh$.invokeExact(ulIn, plOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarI4FromUI8$MH() {
        return RuntimeHelper.requireNonNull(constants$1184.VarI4FromUI8$MH,"VarI4FromUI8");
    }
    /**
     * {@snippet :
     * HRESULT VarI4FromUI8(ULONG64 ui64In, LONG* plOut);
     * }
     */
    public static int VarI4FromUI8(long ui64In, MemorySegment plOut) {
        var mh$ = VarI4FromUI8$MH();
        try {
            return (int)mh$.invokeExact(ui64In, plOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarI4FromDec$MH() {
        return RuntimeHelper.requireNonNull(constants$1185.VarI4FromDec$MH,"VarI4FromDec");
    }
    /**
     * {@snippet :
     * HRESULT VarI4FromDec(const DECIMAL* pdecIn, LONG* plOut);
     * }
     */
    public static int VarI4FromDec(MemorySegment pdecIn, MemorySegment plOut) {
        var mh$ = VarI4FromDec$MH();
        try {
            return (int)mh$.invokeExact(pdecIn, plOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarI8FromUI1$MH() {
        return RuntimeHelper.requireNonNull(constants$1185.VarI8FromUI1$MH,"VarI8FromUI1");
    }
    /**
     * {@snippet :
     * HRESULT VarI8FromUI1(BYTE bIn, LONG64* pi64Out);
     * }
     */
    public static int VarI8FromUI1(byte bIn, MemorySegment pi64Out) {
        var mh$ = VarI8FromUI1$MH();
        try {
            return (int)mh$.invokeExact(bIn, pi64Out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarI8FromI2$MH() {
        return RuntimeHelper.requireNonNull(constants$1185.VarI8FromI2$MH,"VarI8FromI2");
    }
    /**
     * {@snippet :
     * HRESULT VarI8FromI2(SHORT sIn, LONG64* pi64Out);
     * }
     */
    public static int VarI8FromI2(short sIn, MemorySegment pi64Out) {
        var mh$ = VarI8FromI2$MH();
        try {
            return (int)mh$.invokeExact(sIn, pi64Out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarI8FromR4$MH() {
        return RuntimeHelper.requireNonNull(constants$1185.VarI8FromR4$MH,"VarI8FromR4");
    }
    /**
     * {@snippet :
     * HRESULT VarI8FromR4(FLOAT fltIn, LONG64* pi64Out);
     * }
     */
    public static int VarI8FromR4(float fltIn, MemorySegment pi64Out) {
        var mh$ = VarI8FromR4$MH();
        try {
            return (int)mh$.invokeExact(fltIn, pi64Out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarI8FromR8$MH() {
        return RuntimeHelper.requireNonNull(constants$1185.VarI8FromR8$MH,"VarI8FromR8");
    }
    /**
     * {@snippet :
     * HRESULT VarI8FromR8(DOUBLE dblIn, LONG64* pi64Out);
     * }
     */
    public static int VarI8FromR8(double dblIn, MemorySegment pi64Out) {
        var mh$ = VarI8FromR8$MH();
        try {
            return (int)mh$.invokeExact(dblIn, pi64Out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarI8FromCy$MH() {
        return RuntimeHelper.requireNonNull(constants$1185.VarI8FromCy$MH,"VarI8FromCy");
    }
    /**
     * {@snippet :
     * HRESULT VarI8FromCy(CY cyIn, LONG64* pi64Out);
     * }
     */
    public static int VarI8FromCy(MemorySegment cyIn, MemorySegment pi64Out) {
        var mh$ = VarI8FromCy$MH();
        try {
            return (int)mh$.invokeExact(cyIn, pi64Out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarI8FromDate$MH() {
        return RuntimeHelper.requireNonNull(constants$1186.VarI8FromDate$MH,"VarI8FromDate");
    }
    /**
     * {@snippet :
     * HRESULT VarI8FromDate(DATE dateIn, LONG64* pi64Out);
     * }
     */
    public static int VarI8FromDate(double dateIn, MemorySegment pi64Out) {
        var mh$ = VarI8FromDate$MH();
        try {
            return (int)mh$.invokeExact(dateIn, pi64Out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarI8FromStr$MH() {
        return RuntimeHelper.requireNonNull(constants$1186.VarI8FromStr$MH,"VarI8FromStr");
    }
    /**
     * {@snippet :
     * HRESULT VarI8FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, LONG64* pi64Out);
     * }
     */
    public static int VarI8FromStr(MemorySegment strIn, int lcid, int dwFlags, MemorySegment pi64Out) {
        var mh$ = VarI8FromStr$MH();
        try {
            return (int)mh$.invokeExact(strIn, lcid, dwFlags, pi64Out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarI8FromDisp$MH() {
        return RuntimeHelper.requireNonNull(constants$1186.VarI8FromDisp$MH,"VarI8FromDisp");
    }
    /**
     * {@snippet :
     * HRESULT VarI8FromDisp(IDispatch* pdispIn, LCID lcid, LONG64* pi64Out);
     * }
     */
    public static int VarI8FromDisp(MemorySegment pdispIn, int lcid, MemorySegment pi64Out) {
        var mh$ = VarI8FromDisp$MH();
        try {
            return (int)mh$.invokeExact(pdispIn, lcid, pi64Out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarI8FromBool$MH() {
        return RuntimeHelper.requireNonNull(constants$1186.VarI8FromBool$MH,"VarI8FromBool");
    }
    /**
     * {@snippet :
     * HRESULT VarI8FromBool(VARIANT_BOOL boolIn, LONG64* pi64Out);
     * }
     */
    public static int VarI8FromBool(short boolIn, MemorySegment pi64Out) {
        var mh$ = VarI8FromBool$MH();
        try {
            return (int)mh$.invokeExact(boolIn, pi64Out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarI8FromI1$MH() {
        return RuntimeHelper.requireNonNull(constants$1186.VarI8FromI1$MH,"VarI8FromI1");
    }
    /**
     * {@snippet :
     * HRESULT VarI8FromI1(CHAR cIn, LONG64* pi64Out);
     * }
     */
    public static int VarI8FromI1(byte cIn, MemorySegment pi64Out) {
        var mh$ = VarI8FromI1$MH();
        try {
            return (int)mh$.invokeExact(cIn, pi64Out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarI8FromUI2$MH() {
        return RuntimeHelper.requireNonNull(constants$1186.VarI8FromUI2$MH,"VarI8FromUI2");
    }
    /**
     * {@snippet :
     * HRESULT VarI8FromUI2(USHORT uiIn, LONG64* pi64Out);
     * }
     */
    public static int VarI8FromUI2(short uiIn, MemorySegment pi64Out) {
        var mh$ = VarI8FromUI2$MH();
        try {
            return (int)mh$.invokeExact(uiIn, pi64Out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarI8FromUI4$MH() {
        return RuntimeHelper.requireNonNull(constants$1187.VarI8FromUI4$MH,"VarI8FromUI4");
    }
    /**
     * {@snippet :
     * HRESULT VarI8FromUI4(ULONG ulIn, LONG64* pi64Out);
     * }
     */
    public static int VarI8FromUI4(int ulIn, MemorySegment pi64Out) {
        var mh$ = VarI8FromUI4$MH();
        try {
            return (int)mh$.invokeExact(ulIn, pi64Out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarI8FromUI8$MH() {
        return RuntimeHelper.requireNonNull(constants$1187.VarI8FromUI8$MH,"VarI8FromUI8");
    }
    /**
     * {@snippet :
     * HRESULT VarI8FromUI8(ULONG64 ui64In, LONG64* pi64Out);
     * }
     */
    public static int VarI8FromUI8(long ui64In, MemorySegment pi64Out) {
        var mh$ = VarI8FromUI8$MH();
        try {
            return (int)mh$.invokeExact(ui64In, pi64Out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarI8FromDec$MH() {
        return RuntimeHelper.requireNonNull(constants$1187.VarI8FromDec$MH,"VarI8FromDec");
    }
    /**
     * {@snippet :
     * HRESULT VarI8FromDec(const DECIMAL* pdecIn, LONG64* pi64Out);
     * }
     */
    public static int VarI8FromDec(MemorySegment pdecIn, MemorySegment pi64Out) {
        var mh$ = VarI8FromDec$MH();
        try {
            return (int)mh$.invokeExact(pdecIn, pi64Out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarR4FromUI1$MH() {
        return RuntimeHelper.requireNonNull(constants$1187.VarR4FromUI1$MH,"VarR4FromUI1");
    }
    /**
     * {@snippet :
     * HRESULT VarR4FromUI1(BYTE bIn, FLOAT* pfltOut);
     * }
     */
    public static int VarR4FromUI1(byte bIn, MemorySegment pfltOut) {
        var mh$ = VarR4FromUI1$MH();
        try {
            return (int)mh$.invokeExact(bIn, pfltOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarR4FromI2$MH() {
        return RuntimeHelper.requireNonNull(constants$1187.VarR4FromI2$MH,"VarR4FromI2");
    }
    /**
     * {@snippet :
     * HRESULT VarR4FromI2(SHORT sIn, FLOAT* pfltOut);
     * }
     */
    public static int VarR4FromI2(short sIn, MemorySegment pfltOut) {
        var mh$ = VarR4FromI2$MH();
        try {
            return (int)mh$.invokeExact(sIn, pfltOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarR4FromI4$MH() {
        return RuntimeHelper.requireNonNull(constants$1187.VarR4FromI4$MH,"VarR4FromI4");
    }
    /**
     * {@snippet :
     * HRESULT VarR4FromI4(LONG lIn, FLOAT* pfltOut);
     * }
     */
    public static int VarR4FromI4(int lIn, MemorySegment pfltOut) {
        var mh$ = VarR4FromI4$MH();
        try {
            return (int)mh$.invokeExact(lIn, pfltOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarR4FromI8$MH() {
        return RuntimeHelper.requireNonNull(constants$1188.VarR4FromI8$MH,"VarR4FromI8");
    }
    /**
     * {@snippet :
     * HRESULT VarR4FromI8(LONG64 i64In, FLOAT* pfltOut);
     * }
     */
    public static int VarR4FromI8(long i64In, MemorySegment pfltOut) {
        var mh$ = VarR4FromI8$MH();
        try {
            return (int)mh$.invokeExact(i64In, pfltOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarR4FromR8$MH() {
        return RuntimeHelper.requireNonNull(constants$1188.VarR4FromR8$MH,"VarR4FromR8");
    }
    /**
     * {@snippet :
     * HRESULT VarR4FromR8(DOUBLE dblIn, FLOAT* pfltOut);
     * }
     */
    public static int VarR4FromR8(double dblIn, MemorySegment pfltOut) {
        var mh$ = VarR4FromR8$MH();
        try {
            return (int)mh$.invokeExact(dblIn, pfltOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarR4FromCy$MH() {
        return RuntimeHelper.requireNonNull(constants$1188.VarR4FromCy$MH,"VarR4FromCy");
    }
    /**
     * {@snippet :
     * HRESULT VarR4FromCy(CY cyIn, FLOAT* pfltOut);
     * }
     */
    public static int VarR4FromCy(MemorySegment cyIn, MemorySegment pfltOut) {
        var mh$ = VarR4FromCy$MH();
        try {
            return (int)mh$.invokeExact(cyIn, pfltOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarR4FromDate$MH() {
        return RuntimeHelper.requireNonNull(constants$1188.VarR4FromDate$MH,"VarR4FromDate");
    }
    /**
     * {@snippet :
     * HRESULT VarR4FromDate(DATE dateIn, FLOAT* pfltOut);
     * }
     */
    public static int VarR4FromDate(double dateIn, MemorySegment pfltOut) {
        var mh$ = VarR4FromDate$MH();
        try {
            return (int)mh$.invokeExact(dateIn, pfltOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarR4FromStr$MH() {
        return RuntimeHelper.requireNonNull(constants$1188.VarR4FromStr$MH,"VarR4FromStr");
    }
    /**
     * {@snippet :
     * HRESULT VarR4FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, FLOAT* pfltOut);
     * }
     */
    public static int VarR4FromStr(MemorySegment strIn, int lcid, int dwFlags, MemorySegment pfltOut) {
        var mh$ = VarR4FromStr$MH();
        try {
            return (int)mh$.invokeExact(strIn, lcid, dwFlags, pfltOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarR4FromDisp$MH() {
        return RuntimeHelper.requireNonNull(constants$1188.VarR4FromDisp$MH,"VarR4FromDisp");
    }
    /**
     * {@snippet :
     * HRESULT VarR4FromDisp(IDispatch* pdispIn, LCID lcid, FLOAT* pfltOut);
     * }
     */
    public static int VarR4FromDisp(MemorySegment pdispIn, int lcid, MemorySegment pfltOut) {
        var mh$ = VarR4FromDisp$MH();
        try {
            return (int)mh$.invokeExact(pdispIn, lcid, pfltOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarR4FromBool$MH() {
        return RuntimeHelper.requireNonNull(constants$1189.VarR4FromBool$MH,"VarR4FromBool");
    }
    /**
     * {@snippet :
     * HRESULT VarR4FromBool(VARIANT_BOOL boolIn, FLOAT* pfltOut);
     * }
     */
    public static int VarR4FromBool(short boolIn, MemorySegment pfltOut) {
        var mh$ = VarR4FromBool$MH();
        try {
            return (int)mh$.invokeExact(boolIn, pfltOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarR4FromI1$MH() {
        return RuntimeHelper.requireNonNull(constants$1189.VarR4FromI1$MH,"VarR4FromI1");
    }
    /**
     * {@snippet :
     * HRESULT VarR4FromI1(CHAR cIn, FLOAT* pfltOut);
     * }
     */
    public static int VarR4FromI1(byte cIn, MemorySegment pfltOut) {
        var mh$ = VarR4FromI1$MH();
        try {
            return (int)mh$.invokeExact(cIn, pfltOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarR4FromUI2$MH() {
        return RuntimeHelper.requireNonNull(constants$1189.VarR4FromUI2$MH,"VarR4FromUI2");
    }
    /**
     * {@snippet :
     * HRESULT VarR4FromUI2(USHORT uiIn, FLOAT* pfltOut);
     * }
     */
    public static int VarR4FromUI2(short uiIn, MemorySegment pfltOut) {
        var mh$ = VarR4FromUI2$MH();
        try {
            return (int)mh$.invokeExact(uiIn, pfltOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarR4FromUI4$MH() {
        return RuntimeHelper.requireNonNull(constants$1189.VarR4FromUI4$MH,"VarR4FromUI4");
    }
    /**
     * {@snippet :
     * HRESULT VarR4FromUI4(ULONG ulIn, FLOAT* pfltOut);
     * }
     */
    public static int VarR4FromUI4(int ulIn, MemorySegment pfltOut) {
        var mh$ = VarR4FromUI4$MH();
        try {
            return (int)mh$.invokeExact(ulIn, pfltOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarR4FromUI8$MH() {
        return RuntimeHelper.requireNonNull(constants$1189.VarR4FromUI8$MH,"VarR4FromUI8");
    }
    /**
     * {@snippet :
     * HRESULT VarR4FromUI8(ULONG64 ui64In, FLOAT* pfltOut);
     * }
     */
    public static int VarR4FromUI8(long ui64In, MemorySegment pfltOut) {
        var mh$ = VarR4FromUI8$MH();
        try {
            return (int)mh$.invokeExact(ui64In, pfltOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarR4FromDec$MH() {
        return RuntimeHelper.requireNonNull(constants$1189.VarR4FromDec$MH,"VarR4FromDec");
    }
    /**
     * {@snippet :
     * HRESULT VarR4FromDec(const DECIMAL* pdecIn, FLOAT* pfltOut);
     * }
     */
    public static int VarR4FromDec(MemorySegment pdecIn, MemorySegment pfltOut) {
        var mh$ = VarR4FromDec$MH();
        try {
            return (int)mh$.invokeExact(pdecIn, pfltOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarR8FromUI1$MH() {
        return RuntimeHelper.requireNonNull(constants$1190.VarR8FromUI1$MH,"VarR8FromUI1");
    }
    /**
     * {@snippet :
     * HRESULT VarR8FromUI1(BYTE bIn, DOUBLE* pdblOut);
     * }
     */
    public static int VarR8FromUI1(byte bIn, MemorySegment pdblOut) {
        var mh$ = VarR8FromUI1$MH();
        try {
            return (int)mh$.invokeExact(bIn, pdblOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarR8FromI2$MH() {
        return RuntimeHelper.requireNonNull(constants$1190.VarR8FromI2$MH,"VarR8FromI2");
    }
    /**
     * {@snippet :
     * HRESULT VarR8FromI2(SHORT sIn, DOUBLE* pdblOut);
     * }
     */
    public static int VarR8FromI2(short sIn, MemorySegment pdblOut) {
        var mh$ = VarR8FromI2$MH();
        try {
            return (int)mh$.invokeExact(sIn, pdblOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarR8FromI4$MH() {
        return RuntimeHelper.requireNonNull(constants$1190.VarR8FromI4$MH,"VarR8FromI4");
    }
    /**
     * {@snippet :
     * HRESULT VarR8FromI4(LONG lIn, DOUBLE* pdblOut);
     * }
     */
    public static int VarR8FromI4(int lIn, MemorySegment pdblOut) {
        var mh$ = VarR8FromI4$MH();
        try {
            return (int)mh$.invokeExact(lIn, pdblOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarR8FromI8$MH() {
        return RuntimeHelper.requireNonNull(constants$1190.VarR8FromI8$MH,"VarR8FromI8");
    }
    /**
     * {@snippet :
     * HRESULT VarR8FromI8(LONG64 i64In, DOUBLE* pdblOut);
     * }
     */
    public static int VarR8FromI8(long i64In, MemorySegment pdblOut) {
        var mh$ = VarR8FromI8$MH();
        try {
            return (int)mh$.invokeExact(i64In, pdblOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarR8FromR4$MH() {
        return RuntimeHelper.requireNonNull(constants$1190.VarR8FromR4$MH,"VarR8FromR4");
    }
    /**
     * {@snippet :
     * HRESULT VarR8FromR4(FLOAT fltIn, DOUBLE* pdblOut);
     * }
     */
    public static int VarR8FromR4(float fltIn, MemorySegment pdblOut) {
        var mh$ = VarR8FromR4$MH();
        try {
            return (int)mh$.invokeExact(fltIn, pdblOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarR8FromCy$MH() {
        return RuntimeHelper.requireNonNull(constants$1190.VarR8FromCy$MH,"VarR8FromCy");
    }
    /**
     * {@snippet :
     * HRESULT VarR8FromCy(CY cyIn, DOUBLE* pdblOut);
     * }
     */
    public static int VarR8FromCy(MemorySegment cyIn, MemorySegment pdblOut) {
        var mh$ = VarR8FromCy$MH();
        try {
            return (int)mh$.invokeExact(cyIn, pdblOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarR8FromDate$MH() {
        return RuntimeHelper.requireNonNull(constants$1191.VarR8FromDate$MH,"VarR8FromDate");
    }
    /**
     * {@snippet :
     * HRESULT VarR8FromDate(DATE dateIn, DOUBLE* pdblOut);
     * }
     */
    public static int VarR8FromDate(double dateIn, MemorySegment pdblOut) {
        var mh$ = VarR8FromDate$MH();
        try {
            return (int)mh$.invokeExact(dateIn, pdblOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarR8FromStr$MH() {
        return RuntimeHelper.requireNonNull(constants$1191.VarR8FromStr$MH,"VarR8FromStr");
    }
    /**
     * {@snippet :
     * HRESULT VarR8FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, DOUBLE* pdblOut);
     * }
     */
    public static int VarR8FromStr(MemorySegment strIn, int lcid, int dwFlags, MemorySegment pdblOut) {
        var mh$ = VarR8FromStr$MH();
        try {
            return (int)mh$.invokeExact(strIn, lcid, dwFlags, pdblOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarR8FromDisp$MH() {
        return RuntimeHelper.requireNonNull(constants$1191.VarR8FromDisp$MH,"VarR8FromDisp");
    }
    /**
     * {@snippet :
     * HRESULT VarR8FromDisp(IDispatch* pdispIn, LCID lcid, DOUBLE* pdblOut);
     * }
     */
    public static int VarR8FromDisp(MemorySegment pdispIn, int lcid, MemorySegment pdblOut) {
        var mh$ = VarR8FromDisp$MH();
        try {
            return (int)mh$.invokeExact(pdispIn, lcid, pdblOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarR8FromBool$MH() {
        return RuntimeHelper.requireNonNull(constants$1191.VarR8FromBool$MH,"VarR8FromBool");
    }
    /**
     * {@snippet :
     * HRESULT VarR8FromBool(VARIANT_BOOL boolIn, DOUBLE* pdblOut);
     * }
     */
    public static int VarR8FromBool(short boolIn, MemorySegment pdblOut) {
        var mh$ = VarR8FromBool$MH();
        try {
            return (int)mh$.invokeExact(boolIn, pdblOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarR8FromI1$MH() {
        return RuntimeHelper.requireNonNull(constants$1191.VarR8FromI1$MH,"VarR8FromI1");
    }
    /**
     * {@snippet :
     * HRESULT VarR8FromI1(CHAR cIn, DOUBLE* pdblOut);
     * }
     */
    public static int VarR8FromI1(byte cIn, MemorySegment pdblOut) {
        var mh$ = VarR8FromI1$MH();
        try {
            return (int)mh$.invokeExact(cIn, pdblOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarR8FromUI2$MH() {
        return RuntimeHelper.requireNonNull(constants$1191.VarR8FromUI2$MH,"VarR8FromUI2");
    }
    /**
     * {@snippet :
     * HRESULT VarR8FromUI2(USHORT uiIn, DOUBLE* pdblOut);
     * }
     */
    public static int VarR8FromUI2(short uiIn, MemorySegment pdblOut) {
        var mh$ = VarR8FromUI2$MH();
        try {
            return (int)mh$.invokeExact(uiIn, pdblOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarR8FromUI4$MH() {
        return RuntimeHelper.requireNonNull(constants$1192.VarR8FromUI4$MH,"VarR8FromUI4");
    }
    /**
     * {@snippet :
     * HRESULT VarR8FromUI4(ULONG ulIn, DOUBLE* pdblOut);
     * }
     */
    public static int VarR8FromUI4(int ulIn, MemorySegment pdblOut) {
        var mh$ = VarR8FromUI4$MH();
        try {
            return (int)mh$.invokeExact(ulIn, pdblOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarR8FromUI8$MH() {
        return RuntimeHelper.requireNonNull(constants$1192.VarR8FromUI8$MH,"VarR8FromUI8");
    }
    /**
     * {@snippet :
     * HRESULT VarR8FromUI8(ULONG64 ui64In, DOUBLE* pdblOut);
     * }
     */
    public static int VarR8FromUI8(long ui64In, MemorySegment pdblOut) {
        var mh$ = VarR8FromUI8$MH();
        try {
            return (int)mh$.invokeExact(ui64In, pdblOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarR8FromDec$MH() {
        return RuntimeHelper.requireNonNull(constants$1192.VarR8FromDec$MH,"VarR8FromDec");
    }
    /**
     * {@snippet :
     * HRESULT VarR8FromDec(const DECIMAL* pdecIn, DOUBLE* pdblOut);
     * }
     */
    public static int VarR8FromDec(MemorySegment pdecIn, MemorySegment pdblOut) {
        var mh$ = VarR8FromDec$MH();
        try {
            return (int)mh$.invokeExact(pdecIn, pdblOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarDateFromUI1$MH() {
        return RuntimeHelper.requireNonNull(constants$1192.VarDateFromUI1$MH,"VarDateFromUI1");
    }
    /**
     * {@snippet :
     * HRESULT VarDateFromUI1(BYTE bIn, DATE* pdateOut);
     * }
     */
    public static int VarDateFromUI1(byte bIn, MemorySegment pdateOut) {
        var mh$ = VarDateFromUI1$MH();
        try {
            return (int)mh$.invokeExact(bIn, pdateOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarDateFromI2$MH() {
        return RuntimeHelper.requireNonNull(constants$1192.VarDateFromI2$MH,"VarDateFromI2");
    }
    /**
     * {@snippet :
     * HRESULT VarDateFromI2(SHORT sIn, DATE* pdateOut);
     * }
     */
    public static int VarDateFromI2(short sIn, MemorySegment pdateOut) {
        var mh$ = VarDateFromI2$MH();
        try {
            return (int)mh$.invokeExact(sIn, pdateOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarDateFromI4$MH() {
        return RuntimeHelper.requireNonNull(constants$1192.VarDateFromI4$MH,"VarDateFromI4");
    }
    /**
     * {@snippet :
     * HRESULT VarDateFromI4(LONG lIn, DATE* pdateOut);
     * }
     */
    public static int VarDateFromI4(int lIn, MemorySegment pdateOut) {
        var mh$ = VarDateFromI4$MH();
        try {
            return (int)mh$.invokeExact(lIn, pdateOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarDateFromI8$MH() {
        return RuntimeHelper.requireNonNull(constants$1193.VarDateFromI8$MH,"VarDateFromI8");
    }
    /**
     * {@snippet :
     * HRESULT VarDateFromI8(LONG64 i64In, DATE* pdateOut);
     * }
     */
    public static int VarDateFromI8(long i64In, MemorySegment pdateOut) {
        var mh$ = VarDateFromI8$MH();
        try {
            return (int)mh$.invokeExact(i64In, pdateOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarDateFromR4$MH() {
        return RuntimeHelper.requireNonNull(constants$1193.VarDateFromR4$MH,"VarDateFromR4");
    }
    /**
     * {@snippet :
     * HRESULT VarDateFromR4(FLOAT fltIn, DATE* pdateOut);
     * }
     */
    public static int VarDateFromR4(float fltIn, MemorySegment pdateOut) {
        var mh$ = VarDateFromR4$MH();
        try {
            return (int)mh$.invokeExact(fltIn, pdateOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarDateFromR8$MH() {
        return RuntimeHelper.requireNonNull(constants$1193.VarDateFromR8$MH,"VarDateFromR8");
    }
    /**
     * {@snippet :
     * HRESULT VarDateFromR8(DOUBLE dblIn, DATE* pdateOut);
     * }
     */
    public static int VarDateFromR8(double dblIn, MemorySegment pdateOut) {
        var mh$ = VarDateFromR8$MH();
        try {
            return (int)mh$.invokeExact(dblIn, pdateOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarDateFromCy$MH() {
        return RuntimeHelper.requireNonNull(constants$1193.VarDateFromCy$MH,"VarDateFromCy");
    }
    /**
     * {@snippet :
     * HRESULT VarDateFromCy(CY cyIn, DATE* pdateOut);
     * }
     */
    public static int VarDateFromCy(MemorySegment cyIn, MemorySegment pdateOut) {
        var mh$ = VarDateFromCy$MH();
        try {
            return (int)mh$.invokeExact(cyIn, pdateOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarDateFromStr$MH() {
        return RuntimeHelper.requireNonNull(constants$1193.VarDateFromStr$MH,"VarDateFromStr");
    }
    /**
     * {@snippet :
     * HRESULT VarDateFromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, DATE* pdateOut);
     * }
     */
    public static int VarDateFromStr(MemorySegment strIn, int lcid, int dwFlags, MemorySegment pdateOut) {
        var mh$ = VarDateFromStr$MH();
        try {
            return (int)mh$.invokeExact(strIn, lcid, dwFlags, pdateOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarDateFromDisp$MH() {
        return RuntimeHelper.requireNonNull(constants$1193.VarDateFromDisp$MH,"VarDateFromDisp");
    }
    /**
     * {@snippet :
     * HRESULT VarDateFromDisp(IDispatch* pdispIn, LCID lcid, DATE* pdateOut);
     * }
     */
    public static int VarDateFromDisp(MemorySegment pdispIn, int lcid, MemorySegment pdateOut) {
        var mh$ = VarDateFromDisp$MH();
        try {
            return (int)mh$.invokeExact(pdispIn, lcid, pdateOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarDateFromBool$MH() {
        return RuntimeHelper.requireNonNull(constants$1194.VarDateFromBool$MH,"VarDateFromBool");
    }
    /**
     * {@snippet :
     * HRESULT VarDateFromBool(VARIANT_BOOL boolIn, DATE* pdateOut);
     * }
     */
    public static int VarDateFromBool(short boolIn, MemorySegment pdateOut) {
        var mh$ = VarDateFromBool$MH();
        try {
            return (int)mh$.invokeExact(boolIn, pdateOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarDateFromI1$MH() {
        return RuntimeHelper.requireNonNull(constants$1194.VarDateFromI1$MH,"VarDateFromI1");
    }
    /**
     * {@snippet :
     * HRESULT VarDateFromI1(CHAR cIn, DATE* pdateOut);
     * }
     */
    public static int VarDateFromI1(byte cIn, MemorySegment pdateOut) {
        var mh$ = VarDateFromI1$MH();
        try {
            return (int)mh$.invokeExact(cIn, pdateOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarDateFromUI2$MH() {
        return RuntimeHelper.requireNonNull(constants$1194.VarDateFromUI2$MH,"VarDateFromUI2");
    }
    /**
     * {@snippet :
     * HRESULT VarDateFromUI2(USHORT uiIn, DATE* pdateOut);
     * }
     */
    public static int VarDateFromUI2(short uiIn, MemorySegment pdateOut) {
        var mh$ = VarDateFromUI2$MH();
        try {
            return (int)mh$.invokeExact(uiIn, pdateOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarDateFromUI4$MH() {
        return RuntimeHelper.requireNonNull(constants$1194.VarDateFromUI4$MH,"VarDateFromUI4");
    }
    /**
     * {@snippet :
     * HRESULT VarDateFromUI4(ULONG ulIn, DATE* pdateOut);
     * }
     */
    public static int VarDateFromUI4(int ulIn, MemorySegment pdateOut) {
        var mh$ = VarDateFromUI4$MH();
        try {
            return (int)mh$.invokeExact(ulIn, pdateOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarDateFromUI8$MH() {
        return RuntimeHelper.requireNonNull(constants$1194.VarDateFromUI8$MH,"VarDateFromUI8");
    }
    /**
     * {@snippet :
     * HRESULT VarDateFromUI8(ULONG64 ui64In, DATE* pdateOut);
     * }
     */
    public static int VarDateFromUI8(long ui64In, MemorySegment pdateOut) {
        var mh$ = VarDateFromUI8$MH();
        try {
            return (int)mh$.invokeExact(ui64In, pdateOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarDateFromDec$MH() {
        return RuntimeHelper.requireNonNull(constants$1194.VarDateFromDec$MH,"VarDateFromDec");
    }
    /**
     * {@snippet :
     * HRESULT VarDateFromDec(const DECIMAL* pdecIn, DATE* pdateOut);
     * }
     */
    public static int VarDateFromDec(MemorySegment pdecIn, MemorySegment pdateOut) {
        var mh$ = VarDateFromDec$MH();
        try {
            return (int)mh$.invokeExact(pdecIn, pdateOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarCyFromUI1$MH() {
        return RuntimeHelper.requireNonNull(constants$1195.VarCyFromUI1$MH,"VarCyFromUI1");
    }
    /**
     * {@snippet :
     * HRESULT VarCyFromUI1(BYTE bIn, CY* pcyOut);
     * }
     */
    public static int VarCyFromUI1(byte bIn, MemorySegment pcyOut) {
        var mh$ = VarCyFromUI1$MH();
        try {
            return (int)mh$.invokeExact(bIn, pcyOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarCyFromI2$MH() {
        return RuntimeHelper.requireNonNull(constants$1195.VarCyFromI2$MH,"VarCyFromI2");
    }
    /**
     * {@snippet :
     * HRESULT VarCyFromI2(SHORT sIn, CY* pcyOut);
     * }
     */
    public static int VarCyFromI2(short sIn, MemorySegment pcyOut) {
        var mh$ = VarCyFromI2$MH();
        try {
            return (int)mh$.invokeExact(sIn, pcyOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarCyFromI4$MH() {
        return RuntimeHelper.requireNonNull(constants$1195.VarCyFromI4$MH,"VarCyFromI4");
    }
    /**
     * {@snippet :
     * HRESULT VarCyFromI4(LONG lIn, CY* pcyOut);
     * }
     */
    public static int VarCyFromI4(int lIn, MemorySegment pcyOut) {
        var mh$ = VarCyFromI4$MH();
        try {
            return (int)mh$.invokeExact(lIn, pcyOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarCyFromI8$MH() {
        return RuntimeHelper.requireNonNull(constants$1195.VarCyFromI8$MH,"VarCyFromI8");
    }
    /**
     * {@snippet :
     * HRESULT VarCyFromI8(LONG64 i64In, CY* pcyOut);
     * }
     */
    public static int VarCyFromI8(long i64In, MemorySegment pcyOut) {
        var mh$ = VarCyFromI8$MH();
        try {
            return (int)mh$.invokeExact(i64In, pcyOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarCyFromR4$MH() {
        return RuntimeHelper.requireNonNull(constants$1195.VarCyFromR4$MH,"VarCyFromR4");
    }
    /**
     * {@snippet :
     * HRESULT VarCyFromR4(FLOAT fltIn, CY* pcyOut);
     * }
     */
    public static int VarCyFromR4(float fltIn, MemorySegment pcyOut) {
        var mh$ = VarCyFromR4$MH();
        try {
            return (int)mh$.invokeExact(fltIn, pcyOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarCyFromR8$MH() {
        return RuntimeHelper.requireNonNull(constants$1195.VarCyFromR8$MH,"VarCyFromR8");
    }
    /**
     * {@snippet :
     * HRESULT VarCyFromR8(DOUBLE dblIn, CY* pcyOut);
     * }
     */
    public static int VarCyFromR8(double dblIn, MemorySegment pcyOut) {
        var mh$ = VarCyFromR8$MH();
        try {
            return (int)mh$.invokeExact(dblIn, pcyOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarCyFromDate$MH() {
        return RuntimeHelper.requireNonNull(constants$1196.VarCyFromDate$MH,"VarCyFromDate");
    }
    /**
     * {@snippet :
     * HRESULT VarCyFromDate(DATE dateIn, CY* pcyOut);
     * }
     */
    public static int VarCyFromDate(double dateIn, MemorySegment pcyOut) {
        var mh$ = VarCyFromDate$MH();
        try {
            return (int)mh$.invokeExact(dateIn, pcyOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarCyFromStr$MH() {
        return RuntimeHelper.requireNonNull(constants$1196.VarCyFromStr$MH,"VarCyFromStr");
    }
    /**
     * {@snippet :
     * HRESULT VarCyFromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, CY* pcyOut);
     * }
     */
    public static int VarCyFromStr(MemorySegment strIn, int lcid, int dwFlags, MemorySegment pcyOut) {
        var mh$ = VarCyFromStr$MH();
        try {
            return (int)mh$.invokeExact(strIn, lcid, dwFlags, pcyOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarCyFromDisp$MH() {
        return RuntimeHelper.requireNonNull(constants$1196.VarCyFromDisp$MH,"VarCyFromDisp");
    }
    /**
     * {@snippet :
     * HRESULT VarCyFromDisp(IDispatch* pdispIn, LCID lcid, CY* pcyOut);
     * }
     */
    public static int VarCyFromDisp(MemorySegment pdispIn, int lcid, MemorySegment pcyOut) {
        var mh$ = VarCyFromDisp$MH();
        try {
            return (int)mh$.invokeExact(pdispIn, lcid, pcyOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarCyFromBool$MH() {
        return RuntimeHelper.requireNonNull(constants$1196.VarCyFromBool$MH,"VarCyFromBool");
    }
    /**
     * {@snippet :
     * HRESULT VarCyFromBool(VARIANT_BOOL boolIn, CY* pcyOut);
     * }
     */
    public static int VarCyFromBool(short boolIn, MemorySegment pcyOut) {
        var mh$ = VarCyFromBool$MH();
        try {
            return (int)mh$.invokeExact(boolIn, pcyOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarCyFromI1$MH() {
        return RuntimeHelper.requireNonNull(constants$1196.VarCyFromI1$MH,"VarCyFromI1");
    }
    /**
     * {@snippet :
     * HRESULT VarCyFromI1(CHAR cIn, CY* pcyOut);
     * }
     */
    public static int VarCyFromI1(byte cIn, MemorySegment pcyOut) {
        var mh$ = VarCyFromI1$MH();
        try {
            return (int)mh$.invokeExact(cIn, pcyOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarCyFromUI2$MH() {
        return RuntimeHelper.requireNonNull(constants$1196.VarCyFromUI2$MH,"VarCyFromUI2");
    }
    /**
     * {@snippet :
     * HRESULT VarCyFromUI2(USHORT uiIn, CY* pcyOut);
     * }
     */
    public static int VarCyFromUI2(short uiIn, MemorySegment pcyOut) {
        var mh$ = VarCyFromUI2$MH();
        try {
            return (int)mh$.invokeExact(uiIn, pcyOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarCyFromUI4$MH() {
        return RuntimeHelper.requireNonNull(constants$1197.VarCyFromUI4$MH,"VarCyFromUI4");
    }
    /**
     * {@snippet :
     * HRESULT VarCyFromUI4(ULONG ulIn, CY* pcyOut);
     * }
     */
    public static int VarCyFromUI4(int ulIn, MemorySegment pcyOut) {
        var mh$ = VarCyFromUI4$MH();
        try {
            return (int)mh$.invokeExact(ulIn, pcyOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarCyFromUI8$MH() {
        return RuntimeHelper.requireNonNull(constants$1197.VarCyFromUI8$MH,"VarCyFromUI8");
    }
    /**
     * {@snippet :
     * HRESULT VarCyFromUI8(ULONG64 ui64In, CY* pcyOut);
     * }
     */
    public static int VarCyFromUI8(long ui64In, MemorySegment pcyOut) {
        var mh$ = VarCyFromUI8$MH();
        try {
            return (int)mh$.invokeExact(ui64In, pcyOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarCyFromDec$MH() {
        return RuntimeHelper.requireNonNull(constants$1197.VarCyFromDec$MH,"VarCyFromDec");
    }
    /**
     * {@snippet :
     * HRESULT VarCyFromDec(const DECIMAL* pdecIn, CY* pcyOut);
     * }
     */
    public static int VarCyFromDec(MemorySegment pdecIn, MemorySegment pcyOut) {
        var mh$ = VarCyFromDec$MH();
        try {
            return (int)mh$.invokeExact(pdecIn, pcyOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarBstrFromUI1$MH() {
        return RuntimeHelper.requireNonNull(constants$1197.VarBstrFromUI1$MH,"VarBstrFromUI1");
    }
    /**
     * {@snippet :
     * HRESULT VarBstrFromUI1(BYTE bVal, LCID lcid, ULONG dwFlags, BSTR* pbstrOut);
     * }
     */
    public static int VarBstrFromUI1(byte bVal, int lcid, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarBstrFromUI1$MH();
        try {
            return (int)mh$.invokeExact(bVal, lcid, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarBstrFromI2$MH() {
        return RuntimeHelper.requireNonNull(constants$1197.VarBstrFromI2$MH,"VarBstrFromI2");
    }
    /**
     * {@snippet :
     * HRESULT VarBstrFromI2(SHORT iVal, LCID lcid, ULONG dwFlags, BSTR* pbstrOut);
     * }
     */
    public static int VarBstrFromI2(short iVal, int lcid, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarBstrFromI2$MH();
        try {
            return (int)mh$.invokeExact(iVal, lcid, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarBstrFromI4$MH() {
        return RuntimeHelper.requireNonNull(constants$1197.VarBstrFromI4$MH,"VarBstrFromI4");
    }
    /**
     * {@snippet :
     * HRESULT VarBstrFromI4(LONG lIn, LCID lcid, ULONG dwFlags, BSTR* pbstrOut);
     * }
     */
    public static int VarBstrFromI4(int lIn, int lcid, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarBstrFromI4$MH();
        try {
            return (int)mh$.invokeExact(lIn, lcid, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarBstrFromI8$MH() {
        return RuntimeHelper.requireNonNull(constants$1198.VarBstrFromI8$MH,"VarBstrFromI8");
    }
    /**
     * {@snippet :
     * HRESULT VarBstrFromI8(LONG64 i64In, LCID lcid, ULONG dwFlags, BSTR* pbstrOut);
     * }
     */
    public static int VarBstrFromI8(long i64In, int lcid, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarBstrFromI8$MH();
        try {
            return (int)mh$.invokeExact(i64In, lcid, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarBstrFromR4$MH() {
        return RuntimeHelper.requireNonNull(constants$1198.VarBstrFromR4$MH,"VarBstrFromR4");
    }
    /**
     * {@snippet :
     * HRESULT VarBstrFromR4(FLOAT fltIn, LCID lcid, ULONG dwFlags, BSTR* pbstrOut);
     * }
     */
    public static int VarBstrFromR4(float fltIn, int lcid, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarBstrFromR4$MH();
        try {
            return (int)mh$.invokeExact(fltIn, lcid, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarBstrFromR8$MH() {
        return RuntimeHelper.requireNonNull(constants$1198.VarBstrFromR8$MH,"VarBstrFromR8");
    }
    /**
     * {@snippet :
     * HRESULT VarBstrFromR8(DOUBLE dblIn, LCID lcid, ULONG dwFlags, BSTR* pbstrOut);
     * }
     */
    public static int VarBstrFromR8(double dblIn, int lcid, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarBstrFromR8$MH();
        try {
            return (int)mh$.invokeExact(dblIn, lcid, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarBstrFromCy$MH() {
        return RuntimeHelper.requireNonNull(constants$1198.VarBstrFromCy$MH,"VarBstrFromCy");
    }
    /**
     * {@snippet :
     * HRESULT VarBstrFromCy(CY cyIn, LCID lcid, ULONG dwFlags, BSTR* pbstrOut);
     * }
     */
    public static int VarBstrFromCy(MemorySegment cyIn, int lcid, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarBstrFromCy$MH();
        try {
            return (int)mh$.invokeExact(cyIn, lcid, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarBstrFromDate$MH() {
        return RuntimeHelper.requireNonNull(constants$1198.VarBstrFromDate$MH,"VarBstrFromDate");
    }
    /**
     * {@snippet :
     * HRESULT VarBstrFromDate(DATE dateIn, LCID lcid, ULONG dwFlags, BSTR* pbstrOut);
     * }
     */
    public static int VarBstrFromDate(double dateIn, int lcid, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarBstrFromDate$MH();
        try {
            return (int)mh$.invokeExact(dateIn, lcid, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarBstrFromDisp$MH() {
        return RuntimeHelper.requireNonNull(constants$1198.VarBstrFromDisp$MH,"VarBstrFromDisp");
    }
    /**
     * {@snippet :
     * HRESULT VarBstrFromDisp(IDispatch* pdispIn, LCID lcid, ULONG dwFlags, BSTR* pbstrOut);
     * }
     */
    public static int VarBstrFromDisp(MemorySegment pdispIn, int lcid, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarBstrFromDisp$MH();
        try {
            return (int)mh$.invokeExact(pdispIn, lcid, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarBstrFromBool$MH() {
        return RuntimeHelper.requireNonNull(constants$1199.VarBstrFromBool$MH,"VarBstrFromBool");
    }
    /**
     * {@snippet :
     * HRESULT VarBstrFromBool(VARIANT_BOOL boolIn, LCID lcid, ULONG dwFlags, BSTR* pbstrOut);
     * }
     */
    public static int VarBstrFromBool(short boolIn, int lcid, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarBstrFromBool$MH();
        try {
            return (int)mh$.invokeExact(boolIn, lcid, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarBstrFromI1$MH() {
        return RuntimeHelper.requireNonNull(constants$1199.VarBstrFromI1$MH,"VarBstrFromI1");
    }
    /**
     * {@snippet :
     * HRESULT VarBstrFromI1(CHAR cIn, LCID lcid, ULONG dwFlags, BSTR* pbstrOut);
     * }
     */
    public static int VarBstrFromI1(byte cIn, int lcid, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarBstrFromI1$MH();
        try {
            return (int)mh$.invokeExact(cIn, lcid, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarBstrFromUI2$MH() {
        return RuntimeHelper.requireNonNull(constants$1199.VarBstrFromUI2$MH,"VarBstrFromUI2");
    }
    /**
     * {@snippet :
     * HRESULT VarBstrFromUI2(USHORT uiIn, LCID lcid, ULONG dwFlags, BSTR* pbstrOut);
     * }
     */
    public static int VarBstrFromUI2(short uiIn, int lcid, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarBstrFromUI2$MH();
        try {
            return (int)mh$.invokeExact(uiIn, lcid, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarBstrFromUI4$MH() {
        return RuntimeHelper.requireNonNull(constants$1199.VarBstrFromUI4$MH,"VarBstrFromUI4");
    }
    /**
     * {@snippet :
     * HRESULT VarBstrFromUI4(ULONG ulIn, LCID lcid, ULONG dwFlags, BSTR* pbstrOut);
     * }
     */
    public static int VarBstrFromUI4(int ulIn, int lcid, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarBstrFromUI4$MH();
        try {
            return (int)mh$.invokeExact(ulIn, lcid, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarBstrFromUI8$MH() {
        return RuntimeHelper.requireNonNull(constants$1199.VarBstrFromUI8$MH,"VarBstrFromUI8");
    }
    /**
     * {@snippet :
     * HRESULT VarBstrFromUI8(ULONG64 ui64In, LCID lcid, ULONG dwFlags, BSTR* pbstrOut);
     * }
     */
    public static int VarBstrFromUI8(long ui64In, int lcid, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarBstrFromUI8$MH();
        try {
            return (int)mh$.invokeExact(ui64In, lcid, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarBstrFromDec$MH() {
        return RuntimeHelper.requireNonNull(constants$1199.VarBstrFromDec$MH,"VarBstrFromDec");
    }
    /**
     * {@snippet :
     * HRESULT VarBstrFromDec(const DECIMAL* pdecIn, LCID lcid, ULONG dwFlags, BSTR* pbstrOut);
     * }
     */
    public static int VarBstrFromDec(MemorySegment pdecIn, int lcid, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarBstrFromDec$MH();
        try {
            return (int)mh$.invokeExact(pdecIn, lcid, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarBoolFromUI1$MH() {
        return RuntimeHelper.requireNonNull(constants$1200.VarBoolFromUI1$MH,"VarBoolFromUI1");
    }
    /**
     * {@snippet :
     * HRESULT VarBoolFromUI1(BYTE bIn, VARIANT_BOOL* pboolOut);
     * }
     */
    public static int VarBoolFromUI1(byte bIn, MemorySegment pboolOut) {
        var mh$ = VarBoolFromUI1$MH();
        try {
            return (int)mh$.invokeExact(bIn, pboolOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarBoolFromI2$MH() {
        return RuntimeHelper.requireNonNull(constants$1200.VarBoolFromI2$MH,"VarBoolFromI2");
    }
    /**
     * {@snippet :
     * HRESULT VarBoolFromI2(SHORT sIn, VARIANT_BOOL* pboolOut);
     * }
     */
    public static int VarBoolFromI2(short sIn, MemorySegment pboolOut) {
        var mh$ = VarBoolFromI2$MH();
        try {
            return (int)mh$.invokeExact(sIn, pboolOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarBoolFromI4$MH() {
        return RuntimeHelper.requireNonNull(constants$1200.VarBoolFromI4$MH,"VarBoolFromI4");
    }
    /**
     * {@snippet :
     * HRESULT VarBoolFromI4(LONG lIn, VARIANT_BOOL* pboolOut);
     * }
     */
    public static int VarBoolFromI4(int lIn, MemorySegment pboolOut) {
        var mh$ = VarBoolFromI4$MH();
        try {
            return (int)mh$.invokeExact(lIn, pboolOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarBoolFromI8$MH() {
        return RuntimeHelper.requireNonNull(constants$1200.VarBoolFromI8$MH,"VarBoolFromI8");
    }
    /**
     * {@snippet :
     * HRESULT VarBoolFromI8(LONG64 i64In, VARIANT_BOOL* pboolOut);
     * }
     */
    public static int VarBoolFromI8(long i64In, MemorySegment pboolOut) {
        var mh$ = VarBoolFromI8$MH();
        try {
            return (int)mh$.invokeExact(i64In, pboolOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarBoolFromR4$MH() {
        return RuntimeHelper.requireNonNull(constants$1200.VarBoolFromR4$MH,"VarBoolFromR4");
    }
    /**
     * {@snippet :
     * HRESULT VarBoolFromR4(FLOAT fltIn, VARIANT_BOOL* pboolOut);
     * }
     */
    public static int VarBoolFromR4(float fltIn, MemorySegment pboolOut) {
        var mh$ = VarBoolFromR4$MH();
        try {
            return (int)mh$.invokeExact(fltIn, pboolOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarBoolFromR8$MH() {
        return RuntimeHelper.requireNonNull(constants$1200.VarBoolFromR8$MH,"VarBoolFromR8");
    }
    /**
     * {@snippet :
     * HRESULT VarBoolFromR8(DOUBLE dblIn, VARIANT_BOOL* pboolOut);
     * }
     */
    public static int VarBoolFromR8(double dblIn, MemorySegment pboolOut) {
        var mh$ = VarBoolFromR8$MH();
        try {
            return (int)mh$.invokeExact(dblIn, pboolOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarBoolFromDate$MH() {
        return RuntimeHelper.requireNonNull(constants$1201.VarBoolFromDate$MH,"VarBoolFromDate");
    }
    /**
     * {@snippet :
     * HRESULT VarBoolFromDate(DATE dateIn, VARIANT_BOOL* pboolOut);
     * }
     */
    public static int VarBoolFromDate(double dateIn, MemorySegment pboolOut) {
        var mh$ = VarBoolFromDate$MH();
        try {
            return (int)mh$.invokeExact(dateIn, pboolOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarBoolFromCy$MH() {
        return RuntimeHelper.requireNonNull(constants$1201.VarBoolFromCy$MH,"VarBoolFromCy");
    }
    /**
     * {@snippet :
     * HRESULT VarBoolFromCy(CY cyIn, VARIANT_BOOL* pboolOut);
     * }
     */
    public static int VarBoolFromCy(MemorySegment cyIn, MemorySegment pboolOut) {
        var mh$ = VarBoolFromCy$MH();
        try {
            return (int)mh$.invokeExact(cyIn, pboolOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarBoolFromStr$MH() {
        return RuntimeHelper.requireNonNull(constants$1201.VarBoolFromStr$MH,"VarBoolFromStr");
    }
    /**
     * {@snippet :
     * HRESULT VarBoolFromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, VARIANT_BOOL* pboolOut);
     * }
     */
    public static int VarBoolFromStr(MemorySegment strIn, int lcid, int dwFlags, MemorySegment pboolOut) {
        var mh$ = VarBoolFromStr$MH();
        try {
            return (int)mh$.invokeExact(strIn, lcid, dwFlags, pboolOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarBoolFromDisp$MH() {
        return RuntimeHelper.requireNonNull(constants$1201.VarBoolFromDisp$MH,"VarBoolFromDisp");
    }
    /**
     * {@snippet :
     * HRESULT VarBoolFromDisp(IDispatch* pdispIn, LCID lcid, VARIANT_BOOL* pboolOut);
     * }
     */
    public static int VarBoolFromDisp(MemorySegment pdispIn, int lcid, MemorySegment pboolOut) {
        var mh$ = VarBoolFromDisp$MH();
        try {
            return (int)mh$.invokeExact(pdispIn, lcid, pboolOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarBoolFromI1$MH() {
        return RuntimeHelper.requireNonNull(constants$1201.VarBoolFromI1$MH,"VarBoolFromI1");
    }
    /**
     * {@snippet :
     * HRESULT VarBoolFromI1(CHAR cIn, VARIANT_BOOL* pboolOut);
     * }
     */
    public static int VarBoolFromI1(byte cIn, MemorySegment pboolOut) {
        var mh$ = VarBoolFromI1$MH();
        try {
            return (int)mh$.invokeExact(cIn, pboolOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarBoolFromUI2$MH() {
        return RuntimeHelper.requireNonNull(constants$1201.VarBoolFromUI2$MH,"VarBoolFromUI2");
    }
    /**
     * {@snippet :
     * HRESULT VarBoolFromUI2(USHORT uiIn, VARIANT_BOOL* pboolOut);
     * }
     */
    public static int VarBoolFromUI2(short uiIn, MemorySegment pboolOut) {
        var mh$ = VarBoolFromUI2$MH();
        try {
            return (int)mh$.invokeExact(uiIn, pboolOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarBoolFromUI4$MH() {
        return RuntimeHelper.requireNonNull(constants$1202.VarBoolFromUI4$MH,"VarBoolFromUI4");
    }
    /**
     * {@snippet :
     * HRESULT VarBoolFromUI4(ULONG ulIn, VARIANT_BOOL* pboolOut);
     * }
     */
    public static int VarBoolFromUI4(int ulIn, MemorySegment pboolOut) {
        var mh$ = VarBoolFromUI4$MH();
        try {
            return (int)mh$.invokeExact(ulIn, pboolOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarBoolFromUI8$MH() {
        return RuntimeHelper.requireNonNull(constants$1202.VarBoolFromUI8$MH,"VarBoolFromUI8");
    }
    /**
     * {@snippet :
     * HRESULT VarBoolFromUI8(ULONG64 i64In, VARIANT_BOOL* pboolOut);
     * }
     */
    public static int VarBoolFromUI8(long i64In, MemorySegment pboolOut) {
        var mh$ = VarBoolFromUI8$MH();
        try {
            return (int)mh$.invokeExact(i64In, pboolOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarBoolFromDec$MH() {
        return RuntimeHelper.requireNonNull(constants$1202.VarBoolFromDec$MH,"VarBoolFromDec");
    }
    /**
     * {@snippet :
     * HRESULT VarBoolFromDec(const DECIMAL* pdecIn, VARIANT_BOOL* pboolOut);
     * }
     */
    public static int VarBoolFromDec(MemorySegment pdecIn, MemorySegment pboolOut) {
        var mh$ = VarBoolFromDec$MH();
        try {
            return (int)mh$.invokeExact(pdecIn, pboolOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarI1FromUI1$MH() {
        return RuntimeHelper.requireNonNull(constants$1202.VarI1FromUI1$MH,"VarI1FromUI1");
    }
    /**
     * {@snippet :
     * HRESULT VarI1FromUI1(BYTE bIn, CHAR* pcOut);
     * }
     */
    public static int VarI1FromUI1(byte bIn, MemorySegment pcOut) {
        var mh$ = VarI1FromUI1$MH();
        try {
            return (int)mh$.invokeExact(bIn, pcOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarI1FromI2$MH() {
        return RuntimeHelper.requireNonNull(constants$1202.VarI1FromI2$MH,"VarI1FromI2");
    }
    /**
     * {@snippet :
     * HRESULT VarI1FromI2(SHORT uiIn, CHAR* pcOut);
     * }
     */
    public static int VarI1FromI2(short uiIn, MemorySegment pcOut) {
        var mh$ = VarI1FromI2$MH();
        try {
            return (int)mh$.invokeExact(uiIn, pcOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarI1FromI4$MH() {
        return RuntimeHelper.requireNonNull(constants$1202.VarI1FromI4$MH,"VarI1FromI4");
    }
    /**
     * {@snippet :
     * HRESULT VarI1FromI4(LONG lIn, CHAR* pcOut);
     * }
     */
    public static int VarI1FromI4(int lIn, MemorySegment pcOut) {
        var mh$ = VarI1FromI4$MH();
        try {
            return (int)mh$.invokeExact(lIn, pcOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarI1FromI8$MH() {
        return RuntimeHelper.requireNonNull(constants$1203.VarI1FromI8$MH,"VarI1FromI8");
    }
    /**
     * {@snippet :
     * HRESULT VarI1FromI8(LONG64 i64In, CHAR* pcOut);
     * }
     */
    public static int VarI1FromI8(long i64In, MemorySegment pcOut) {
        var mh$ = VarI1FromI8$MH();
        try {
            return (int)mh$.invokeExact(i64In, pcOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarI1FromR4$MH() {
        return RuntimeHelper.requireNonNull(constants$1203.VarI1FromR4$MH,"VarI1FromR4");
    }
    /**
     * {@snippet :
     * HRESULT VarI1FromR4(FLOAT fltIn, CHAR* pcOut);
     * }
     */
    public static int VarI1FromR4(float fltIn, MemorySegment pcOut) {
        var mh$ = VarI1FromR4$MH();
        try {
            return (int)mh$.invokeExact(fltIn, pcOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarI1FromR8$MH() {
        return RuntimeHelper.requireNonNull(constants$1203.VarI1FromR8$MH,"VarI1FromR8");
    }
    /**
     * {@snippet :
     * HRESULT VarI1FromR8(DOUBLE dblIn, CHAR* pcOut);
     * }
     */
    public static int VarI1FromR8(double dblIn, MemorySegment pcOut) {
        var mh$ = VarI1FromR8$MH();
        try {
            return (int)mh$.invokeExact(dblIn, pcOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarI1FromDate$MH() {
        return RuntimeHelper.requireNonNull(constants$1203.VarI1FromDate$MH,"VarI1FromDate");
    }
    /**
     * {@snippet :
     * HRESULT VarI1FromDate(DATE dateIn, CHAR* pcOut);
     * }
     */
    public static int VarI1FromDate(double dateIn, MemorySegment pcOut) {
        var mh$ = VarI1FromDate$MH();
        try {
            return (int)mh$.invokeExact(dateIn, pcOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarI1FromCy$MH() {
        return RuntimeHelper.requireNonNull(constants$1203.VarI1FromCy$MH,"VarI1FromCy");
    }
    /**
     * {@snippet :
     * HRESULT VarI1FromCy(CY cyIn, CHAR* pcOut);
     * }
     */
    public static int VarI1FromCy(MemorySegment cyIn, MemorySegment pcOut) {
        var mh$ = VarI1FromCy$MH();
        try {
            return (int)mh$.invokeExact(cyIn, pcOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarI1FromStr$MH() {
        return RuntimeHelper.requireNonNull(constants$1203.VarI1FromStr$MH,"VarI1FromStr");
    }
    /**
     * {@snippet :
     * HRESULT VarI1FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, CHAR* pcOut);
     * }
     */
    public static int VarI1FromStr(MemorySegment strIn, int lcid, int dwFlags, MemorySegment pcOut) {
        var mh$ = VarI1FromStr$MH();
        try {
            return (int)mh$.invokeExact(strIn, lcid, dwFlags, pcOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarI1FromDisp$MH() {
        return RuntimeHelper.requireNonNull(constants$1204.VarI1FromDisp$MH,"VarI1FromDisp");
    }
    /**
     * {@snippet :
     * HRESULT VarI1FromDisp(IDispatch* pdispIn, LCID lcid, CHAR* pcOut);
     * }
     */
    public static int VarI1FromDisp(MemorySegment pdispIn, int lcid, MemorySegment pcOut) {
        var mh$ = VarI1FromDisp$MH();
        try {
            return (int)mh$.invokeExact(pdispIn, lcid, pcOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarI1FromBool$MH() {
        return RuntimeHelper.requireNonNull(constants$1204.VarI1FromBool$MH,"VarI1FromBool");
    }
    /**
     * {@snippet :
     * HRESULT VarI1FromBool(VARIANT_BOOL boolIn, CHAR* pcOut);
     * }
     */
    public static int VarI1FromBool(short boolIn, MemorySegment pcOut) {
        var mh$ = VarI1FromBool$MH();
        try {
            return (int)mh$.invokeExact(boolIn, pcOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarI1FromUI2$MH() {
        return RuntimeHelper.requireNonNull(constants$1204.VarI1FromUI2$MH,"VarI1FromUI2");
    }
    /**
     * {@snippet :
     * HRESULT VarI1FromUI2(USHORT uiIn, CHAR* pcOut);
     * }
     */
    public static int VarI1FromUI2(short uiIn, MemorySegment pcOut) {
        var mh$ = VarI1FromUI2$MH();
        try {
            return (int)mh$.invokeExact(uiIn, pcOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarI1FromUI4$MH() {
        return RuntimeHelper.requireNonNull(constants$1204.VarI1FromUI4$MH,"VarI1FromUI4");
    }
    /**
     * {@snippet :
     * HRESULT VarI1FromUI4(ULONG ulIn, CHAR* pcOut);
     * }
     */
    public static int VarI1FromUI4(int ulIn, MemorySegment pcOut) {
        var mh$ = VarI1FromUI4$MH();
        try {
            return (int)mh$.invokeExact(ulIn, pcOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarI1FromUI8$MH() {
        return RuntimeHelper.requireNonNull(constants$1204.VarI1FromUI8$MH,"VarI1FromUI8");
    }
    /**
     * {@snippet :
     * HRESULT VarI1FromUI8(ULONG64 i64In, CHAR* pcOut);
     * }
     */
    public static int VarI1FromUI8(long i64In, MemorySegment pcOut) {
        var mh$ = VarI1FromUI8$MH();
        try {
            return (int)mh$.invokeExact(i64In, pcOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarI1FromDec$MH() {
        return RuntimeHelper.requireNonNull(constants$1204.VarI1FromDec$MH,"VarI1FromDec");
    }
    /**
     * {@snippet :
     * HRESULT VarI1FromDec(const DECIMAL* pdecIn, CHAR* pcOut);
     * }
     */
    public static int VarI1FromDec(MemorySegment pdecIn, MemorySegment pcOut) {
        var mh$ = VarI1FromDec$MH();
        try {
            return (int)mh$.invokeExact(pdecIn, pcOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarUI2FromUI1$MH() {
        return RuntimeHelper.requireNonNull(constants$1205.VarUI2FromUI1$MH,"VarUI2FromUI1");
    }
    /**
     * {@snippet :
     * HRESULT VarUI2FromUI1(BYTE bIn, USHORT* puiOut);
     * }
     */
    public static int VarUI2FromUI1(byte bIn, MemorySegment puiOut) {
        var mh$ = VarUI2FromUI1$MH();
        try {
            return (int)mh$.invokeExact(bIn, puiOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarUI2FromI2$MH() {
        return RuntimeHelper.requireNonNull(constants$1205.VarUI2FromI2$MH,"VarUI2FromI2");
    }
    /**
     * {@snippet :
     * HRESULT VarUI2FromI2(SHORT uiIn, USHORT* puiOut);
     * }
     */
    public static int VarUI2FromI2(short uiIn, MemorySegment puiOut) {
        var mh$ = VarUI2FromI2$MH();
        try {
            return (int)mh$.invokeExact(uiIn, puiOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarUI2FromI4$MH() {
        return RuntimeHelper.requireNonNull(constants$1205.VarUI2FromI4$MH,"VarUI2FromI4");
    }
    /**
     * {@snippet :
     * HRESULT VarUI2FromI4(LONG lIn, USHORT* puiOut);
     * }
     */
    public static int VarUI2FromI4(int lIn, MemorySegment puiOut) {
        var mh$ = VarUI2FromI4$MH();
        try {
            return (int)mh$.invokeExact(lIn, puiOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarUI2FromI8$MH() {
        return RuntimeHelper.requireNonNull(constants$1205.VarUI2FromI8$MH,"VarUI2FromI8");
    }
    /**
     * {@snippet :
     * HRESULT VarUI2FromI8(LONG64 i64In, USHORT* puiOut);
     * }
     */
    public static int VarUI2FromI8(long i64In, MemorySegment puiOut) {
        var mh$ = VarUI2FromI8$MH();
        try {
            return (int)mh$.invokeExact(i64In, puiOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarUI2FromR4$MH() {
        return RuntimeHelper.requireNonNull(constants$1205.VarUI2FromR4$MH,"VarUI2FromR4");
    }
    /**
     * {@snippet :
     * HRESULT VarUI2FromR4(FLOAT fltIn, USHORT* puiOut);
     * }
     */
    public static int VarUI2FromR4(float fltIn, MemorySegment puiOut) {
        var mh$ = VarUI2FromR4$MH();
        try {
            return (int)mh$.invokeExact(fltIn, puiOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarUI2FromR8$MH() {
        return RuntimeHelper.requireNonNull(constants$1205.VarUI2FromR8$MH,"VarUI2FromR8");
    }
    /**
     * {@snippet :
     * HRESULT VarUI2FromR8(DOUBLE dblIn, USHORT* puiOut);
     * }
     */
    public static int VarUI2FromR8(double dblIn, MemorySegment puiOut) {
        var mh$ = VarUI2FromR8$MH();
        try {
            return (int)mh$.invokeExact(dblIn, puiOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarUI2FromDate$MH() {
        return RuntimeHelper.requireNonNull(constants$1206.VarUI2FromDate$MH,"VarUI2FromDate");
    }
    /**
     * {@snippet :
     * HRESULT VarUI2FromDate(DATE dateIn, USHORT* puiOut);
     * }
     */
    public static int VarUI2FromDate(double dateIn, MemorySegment puiOut) {
        var mh$ = VarUI2FromDate$MH();
        try {
            return (int)mh$.invokeExact(dateIn, puiOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarUI2FromCy$MH() {
        return RuntimeHelper.requireNonNull(constants$1206.VarUI2FromCy$MH,"VarUI2FromCy");
    }
    /**
     * {@snippet :
     * HRESULT VarUI2FromCy(CY cyIn, USHORT* puiOut);
     * }
     */
    public static int VarUI2FromCy(MemorySegment cyIn, MemorySegment puiOut) {
        var mh$ = VarUI2FromCy$MH();
        try {
            return (int)mh$.invokeExact(cyIn, puiOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarUI2FromStr$MH() {
        return RuntimeHelper.requireNonNull(constants$1206.VarUI2FromStr$MH,"VarUI2FromStr");
    }
    /**
     * {@snippet :
     * HRESULT VarUI2FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, USHORT* puiOut);
     * }
     */
    public static int VarUI2FromStr(MemorySegment strIn, int lcid, int dwFlags, MemorySegment puiOut) {
        var mh$ = VarUI2FromStr$MH();
        try {
            return (int)mh$.invokeExact(strIn, lcid, dwFlags, puiOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarUI2FromDisp$MH() {
        return RuntimeHelper.requireNonNull(constants$1206.VarUI2FromDisp$MH,"VarUI2FromDisp");
    }
    /**
     * {@snippet :
     * HRESULT VarUI2FromDisp(IDispatch* pdispIn, LCID lcid, USHORT* puiOut);
     * }
     */
    public static int VarUI2FromDisp(MemorySegment pdispIn, int lcid, MemorySegment puiOut) {
        var mh$ = VarUI2FromDisp$MH();
        try {
            return (int)mh$.invokeExact(pdispIn, lcid, puiOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarUI2FromBool$MH() {
        return RuntimeHelper.requireNonNull(constants$1206.VarUI2FromBool$MH,"VarUI2FromBool");
    }
    /**
     * {@snippet :
     * HRESULT VarUI2FromBool(VARIANT_BOOL boolIn, USHORT* puiOut);
     * }
     */
    public static int VarUI2FromBool(short boolIn, MemorySegment puiOut) {
        var mh$ = VarUI2FromBool$MH();
        try {
            return (int)mh$.invokeExact(boolIn, puiOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarUI2FromI1$MH() {
        return RuntimeHelper.requireNonNull(constants$1206.VarUI2FromI1$MH,"VarUI2FromI1");
    }
    /**
     * {@snippet :
     * HRESULT VarUI2FromI1(CHAR cIn, USHORT* puiOut);
     * }
     */
    public static int VarUI2FromI1(byte cIn, MemorySegment puiOut) {
        var mh$ = VarUI2FromI1$MH();
        try {
            return (int)mh$.invokeExact(cIn, puiOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarUI2FromUI4$MH() {
        return RuntimeHelper.requireNonNull(constants$1207.VarUI2FromUI4$MH,"VarUI2FromUI4");
    }
    /**
     * {@snippet :
     * HRESULT VarUI2FromUI4(ULONG ulIn, USHORT* puiOut);
     * }
     */
    public static int VarUI2FromUI4(int ulIn, MemorySegment puiOut) {
        var mh$ = VarUI2FromUI4$MH();
        try {
            return (int)mh$.invokeExact(ulIn, puiOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarUI2FromUI8$MH() {
        return RuntimeHelper.requireNonNull(constants$1207.VarUI2FromUI8$MH,"VarUI2FromUI8");
    }
    /**
     * {@snippet :
     * HRESULT VarUI2FromUI8(ULONG64 i64In, USHORT* puiOut);
     * }
     */
    public static int VarUI2FromUI8(long i64In, MemorySegment puiOut) {
        var mh$ = VarUI2FromUI8$MH();
        try {
            return (int)mh$.invokeExact(i64In, puiOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarUI2FromDec$MH() {
        return RuntimeHelper.requireNonNull(constants$1207.VarUI2FromDec$MH,"VarUI2FromDec");
    }
    /**
     * {@snippet :
     * HRESULT VarUI2FromDec(const DECIMAL* pdecIn, USHORT* puiOut);
     * }
     */
    public static int VarUI2FromDec(MemorySegment pdecIn, MemorySegment puiOut) {
        var mh$ = VarUI2FromDec$MH();
        try {
            return (int)mh$.invokeExact(pdecIn, puiOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarUI4FromUI1$MH() {
        return RuntimeHelper.requireNonNull(constants$1207.VarUI4FromUI1$MH,"VarUI4FromUI1");
    }
    /**
     * {@snippet :
     * HRESULT VarUI4FromUI1(BYTE bIn, ULONG* pulOut);
     * }
     */
    public static int VarUI4FromUI1(byte bIn, MemorySegment pulOut) {
        var mh$ = VarUI4FromUI1$MH();
        try {
            return (int)mh$.invokeExact(bIn, pulOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarUI4FromI2$MH() {
        return RuntimeHelper.requireNonNull(constants$1207.VarUI4FromI2$MH,"VarUI4FromI2");
    }
    /**
     * {@snippet :
     * HRESULT VarUI4FromI2(SHORT uiIn, ULONG* pulOut);
     * }
     */
    public static int VarUI4FromI2(short uiIn, MemorySegment pulOut) {
        var mh$ = VarUI4FromI2$MH();
        try {
            return (int)mh$.invokeExact(uiIn, pulOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarUI4FromI4$MH() {
        return RuntimeHelper.requireNonNull(constants$1207.VarUI4FromI4$MH,"VarUI4FromI4");
    }
    /**
     * {@snippet :
     * HRESULT VarUI4FromI4(LONG lIn, ULONG* pulOut);
     * }
     */
    public static int VarUI4FromI4(int lIn, MemorySegment pulOut) {
        var mh$ = VarUI4FromI4$MH();
        try {
            return (int)mh$.invokeExact(lIn, pulOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarUI4FromI8$MH() {
        return RuntimeHelper.requireNonNull(constants$1208.VarUI4FromI8$MH,"VarUI4FromI8");
    }
    /**
     * {@snippet :
     * HRESULT VarUI4FromI8(LONG64 i64In, ULONG* plOut);
     * }
     */
    public static int VarUI4FromI8(long i64In, MemorySegment plOut) {
        var mh$ = VarUI4FromI8$MH();
        try {
            return (int)mh$.invokeExact(i64In, plOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarUI4FromR4$MH() {
        return RuntimeHelper.requireNonNull(constants$1208.VarUI4FromR4$MH,"VarUI4FromR4");
    }
    /**
     * {@snippet :
     * HRESULT VarUI4FromR4(FLOAT fltIn, ULONG* pulOut);
     * }
     */
    public static int VarUI4FromR4(float fltIn, MemorySegment pulOut) {
        var mh$ = VarUI4FromR4$MH();
        try {
            return (int)mh$.invokeExact(fltIn, pulOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarUI4FromR8$MH() {
        return RuntimeHelper.requireNonNull(constants$1208.VarUI4FromR8$MH,"VarUI4FromR8");
    }
    /**
     * {@snippet :
     * HRESULT VarUI4FromR8(DOUBLE dblIn, ULONG* pulOut);
     * }
     */
    public static int VarUI4FromR8(double dblIn, MemorySegment pulOut) {
        var mh$ = VarUI4FromR8$MH();
        try {
            return (int)mh$.invokeExact(dblIn, pulOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarUI4FromDate$MH() {
        return RuntimeHelper.requireNonNull(constants$1208.VarUI4FromDate$MH,"VarUI4FromDate");
    }
    /**
     * {@snippet :
     * HRESULT VarUI4FromDate(DATE dateIn, ULONG* pulOut);
     * }
     */
    public static int VarUI4FromDate(double dateIn, MemorySegment pulOut) {
        var mh$ = VarUI4FromDate$MH();
        try {
            return (int)mh$.invokeExact(dateIn, pulOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarUI4FromCy$MH() {
        return RuntimeHelper.requireNonNull(constants$1208.VarUI4FromCy$MH,"VarUI4FromCy");
    }
    /**
     * {@snippet :
     * HRESULT VarUI4FromCy(CY cyIn, ULONG* pulOut);
     * }
     */
    public static int VarUI4FromCy(MemorySegment cyIn, MemorySegment pulOut) {
        var mh$ = VarUI4FromCy$MH();
        try {
            return (int)mh$.invokeExact(cyIn, pulOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarUI4FromStr$MH() {
        return RuntimeHelper.requireNonNull(constants$1208.VarUI4FromStr$MH,"VarUI4FromStr");
    }
    /**
     * {@snippet :
     * HRESULT VarUI4FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, ULONG* pulOut);
     * }
     */
    public static int VarUI4FromStr(MemorySegment strIn, int lcid, int dwFlags, MemorySegment pulOut) {
        var mh$ = VarUI4FromStr$MH();
        try {
            return (int)mh$.invokeExact(strIn, lcid, dwFlags, pulOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarUI4FromDisp$MH() {
        return RuntimeHelper.requireNonNull(constants$1209.VarUI4FromDisp$MH,"VarUI4FromDisp");
    }
    /**
     * {@snippet :
     * HRESULT VarUI4FromDisp(IDispatch* pdispIn, LCID lcid, ULONG* pulOut);
     * }
     */
    public static int VarUI4FromDisp(MemorySegment pdispIn, int lcid, MemorySegment pulOut) {
        var mh$ = VarUI4FromDisp$MH();
        try {
            return (int)mh$.invokeExact(pdispIn, lcid, pulOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarUI4FromBool$MH() {
        return RuntimeHelper.requireNonNull(constants$1209.VarUI4FromBool$MH,"VarUI4FromBool");
    }
    /**
     * {@snippet :
     * HRESULT VarUI4FromBool(VARIANT_BOOL boolIn, ULONG* pulOut);
     * }
     */
    public static int VarUI4FromBool(short boolIn, MemorySegment pulOut) {
        var mh$ = VarUI4FromBool$MH();
        try {
            return (int)mh$.invokeExact(boolIn, pulOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarUI4FromI1$MH() {
        return RuntimeHelper.requireNonNull(constants$1209.VarUI4FromI1$MH,"VarUI4FromI1");
    }
    /**
     * {@snippet :
     * HRESULT VarUI4FromI1(CHAR cIn, ULONG* pulOut);
     * }
     */
    public static int VarUI4FromI1(byte cIn, MemorySegment pulOut) {
        var mh$ = VarUI4FromI1$MH();
        try {
            return (int)mh$.invokeExact(cIn, pulOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarUI4FromUI2$MH() {
        return RuntimeHelper.requireNonNull(constants$1209.VarUI4FromUI2$MH,"VarUI4FromUI2");
    }
    /**
     * {@snippet :
     * HRESULT VarUI4FromUI2(USHORT uiIn, ULONG* pulOut);
     * }
     */
    public static int VarUI4FromUI2(short uiIn, MemorySegment pulOut) {
        var mh$ = VarUI4FromUI2$MH();
        try {
            return (int)mh$.invokeExact(uiIn, pulOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarUI4FromUI8$MH() {
        return RuntimeHelper.requireNonNull(constants$1209.VarUI4FromUI8$MH,"VarUI4FromUI8");
    }
    /**
     * {@snippet :
     * HRESULT VarUI4FromUI8(ULONG64 ui64In, ULONG* plOut);
     * }
     */
    public static int VarUI4FromUI8(long ui64In, MemorySegment plOut) {
        var mh$ = VarUI4FromUI8$MH();
        try {
            return (int)mh$.invokeExact(ui64In, plOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarUI4FromDec$MH() {
        return RuntimeHelper.requireNonNull(constants$1209.VarUI4FromDec$MH,"VarUI4FromDec");
    }
    /**
     * {@snippet :
     * HRESULT VarUI4FromDec(const DECIMAL* pdecIn, ULONG* pulOut);
     * }
     */
    public static int VarUI4FromDec(MemorySegment pdecIn, MemorySegment pulOut) {
        var mh$ = VarUI4FromDec$MH();
        try {
            return (int)mh$.invokeExact(pdecIn, pulOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarUI8FromUI1$MH() {
        return RuntimeHelper.requireNonNull(constants$1210.VarUI8FromUI1$MH,"VarUI8FromUI1");
    }
    /**
     * {@snippet :
     * HRESULT VarUI8FromUI1(BYTE bIn, ULONG64* pi64Out);
     * }
     */
    public static int VarUI8FromUI1(byte bIn, MemorySegment pi64Out) {
        var mh$ = VarUI8FromUI1$MH();
        try {
            return (int)mh$.invokeExact(bIn, pi64Out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarUI8FromI2$MH() {
        return RuntimeHelper.requireNonNull(constants$1210.VarUI8FromI2$MH,"VarUI8FromI2");
    }
    /**
     * {@snippet :
     * HRESULT VarUI8FromI2(SHORT sIn, ULONG64* pi64Out);
     * }
     */
    public static int VarUI8FromI2(short sIn, MemorySegment pi64Out) {
        var mh$ = VarUI8FromI2$MH();
        try {
            return (int)mh$.invokeExact(sIn, pi64Out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarUI8FromI4$MH() {
        return RuntimeHelper.requireNonNull(constants$1210.VarUI8FromI4$MH,"VarUI8FromI4");
    }
    /**
     * {@snippet :
     * HRESULT VarUI8FromI4(LONG lIn, ULONG64* pi64Out);
     * }
     */
    public static int VarUI8FromI4(int lIn, MemorySegment pi64Out) {
        var mh$ = VarUI8FromI4$MH();
        try {
            return (int)mh$.invokeExact(lIn, pi64Out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarUI8FromI8$MH() {
        return RuntimeHelper.requireNonNull(constants$1210.VarUI8FromI8$MH,"VarUI8FromI8");
    }
    /**
     * {@snippet :
     * HRESULT VarUI8FromI8(LONG64 ui64In, ULONG64* pi64Out);
     * }
     */
    public static int VarUI8FromI8(long ui64In, MemorySegment pi64Out) {
        var mh$ = VarUI8FromI8$MH();
        try {
            return (int)mh$.invokeExact(ui64In, pi64Out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarUI8FromR4$MH() {
        return RuntimeHelper.requireNonNull(constants$1210.VarUI8FromR4$MH,"VarUI8FromR4");
    }
    /**
     * {@snippet :
     * HRESULT VarUI8FromR4(FLOAT fltIn, ULONG64* pi64Out);
     * }
     */
    public static int VarUI8FromR4(float fltIn, MemorySegment pi64Out) {
        var mh$ = VarUI8FromR4$MH();
        try {
            return (int)mh$.invokeExact(fltIn, pi64Out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarUI8FromR8$MH() {
        return RuntimeHelper.requireNonNull(constants$1210.VarUI8FromR8$MH,"VarUI8FromR8");
    }
    /**
     * {@snippet :
     * HRESULT VarUI8FromR8(DOUBLE dblIn, ULONG64* pi64Out);
     * }
     */
    public static int VarUI8FromR8(double dblIn, MemorySegment pi64Out) {
        var mh$ = VarUI8FromR8$MH();
        try {
            return (int)mh$.invokeExact(dblIn, pi64Out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarUI8FromCy$MH() {
        return RuntimeHelper.requireNonNull(constants$1211.VarUI8FromCy$MH,"VarUI8FromCy");
    }
    /**
     * {@snippet :
     * HRESULT VarUI8FromCy(CY cyIn, ULONG64* pi64Out);
     * }
     */
    public static int VarUI8FromCy(MemorySegment cyIn, MemorySegment pi64Out) {
        var mh$ = VarUI8FromCy$MH();
        try {
            return (int)mh$.invokeExact(cyIn, pi64Out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarUI8FromDate$MH() {
        return RuntimeHelper.requireNonNull(constants$1211.VarUI8FromDate$MH,"VarUI8FromDate");
    }
    /**
     * {@snippet :
     * HRESULT VarUI8FromDate(DATE dateIn, ULONG64* pi64Out);
     * }
     */
    public static int VarUI8FromDate(double dateIn, MemorySegment pi64Out) {
        var mh$ = VarUI8FromDate$MH();
        try {
            return (int)mh$.invokeExact(dateIn, pi64Out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarUI8FromStr$MH() {
        return RuntimeHelper.requireNonNull(constants$1211.VarUI8FromStr$MH,"VarUI8FromStr");
    }
    /**
     * {@snippet :
     * HRESULT VarUI8FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, ULONG64* pi64Out);
     * }
     */
    public static int VarUI8FromStr(MemorySegment strIn, int lcid, int dwFlags, MemorySegment pi64Out) {
        var mh$ = VarUI8FromStr$MH();
        try {
            return (int)mh$.invokeExact(strIn, lcid, dwFlags, pi64Out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarUI8FromDisp$MH() {
        return RuntimeHelper.requireNonNull(constants$1211.VarUI8FromDisp$MH,"VarUI8FromDisp");
    }
    /**
     * {@snippet :
     * HRESULT VarUI8FromDisp(IDispatch* pdispIn, LCID lcid, ULONG64* pi64Out);
     * }
     */
    public static int VarUI8FromDisp(MemorySegment pdispIn, int lcid, MemorySegment pi64Out) {
        var mh$ = VarUI8FromDisp$MH();
        try {
            return (int)mh$.invokeExact(pdispIn, lcid, pi64Out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarUI8FromBool$MH() {
        return RuntimeHelper.requireNonNull(constants$1211.VarUI8FromBool$MH,"VarUI8FromBool");
    }
    /**
     * {@snippet :
     * HRESULT VarUI8FromBool(VARIANT_BOOL boolIn, ULONG64* pi64Out);
     * }
     */
    public static int VarUI8FromBool(short boolIn, MemorySegment pi64Out) {
        var mh$ = VarUI8FromBool$MH();
        try {
            return (int)mh$.invokeExact(boolIn, pi64Out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarUI8FromI1$MH() {
        return RuntimeHelper.requireNonNull(constants$1211.VarUI8FromI1$MH,"VarUI8FromI1");
    }
    /**
     * {@snippet :
     * HRESULT VarUI8FromI1(CHAR cIn, ULONG64* pi64Out);
     * }
     */
    public static int VarUI8FromI1(byte cIn, MemorySegment pi64Out) {
        var mh$ = VarUI8FromI1$MH();
        try {
            return (int)mh$.invokeExact(cIn, pi64Out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarUI8FromUI2$MH() {
        return RuntimeHelper.requireNonNull(constants$1212.VarUI8FromUI2$MH,"VarUI8FromUI2");
    }
    /**
     * {@snippet :
     * HRESULT VarUI8FromUI2(USHORT uiIn, ULONG64* pi64Out);
     * }
     */
    public static int VarUI8FromUI2(short uiIn, MemorySegment pi64Out) {
        var mh$ = VarUI8FromUI2$MH();
        try {
            return (int)mh$.invokeExact(uiIn, pi64Out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarUI8FromUI4$MH() {
        return RuntimeHelper.requireNonNull(constants$1212.VarUI8FromUI4$MH,"VarUI8FromUI4");
    }
    /**
     * {@snippet :
     * HRESULT VarUI8FromUI4(ULONG ulIn, ULONG64* pi64Out);
     * }
     */
    public static int VarUI8FromUI4(int ulIn, MemorySegment pi64Out) {
        var mh$ = VarUI8FromUI4$MH();
        try {
            return (int)mh$.invokeExact(ulIn, pi64Out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarUI8FromDec$MH() {
        return RuntimeHelper.requireNonNull(constants$1212.VarUI8FromDec$MH,"VarUI8FromDec");
    }
    /**
     * {@snippet :
     * HRESULT VarUI8FromDec(const DECIMAL* pdecIn, ULONG64* pi64Out);
     * }
     */
    public static int VarUI8FromDec(MemorySegment pdecIn, MemorySegment pi64Out) {
        var mh$ = VarUI8FromDec$MH();
        try {
            return (int)mh$.invokeExact(pdecIn, pi64Out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarDecFromUI1$MH() {
        return RuntimeHelper.requireNonNull(constants$1212.VarDecFromUI1$MH,"VarDecFromUI1");
    }
    /**
     * {@snippet :
     * HRESULT VarDecFromUI1(BYTE bIn, DECIMAL* pdecOut);
     * }
     */
    public static int VarDecFromUI1(byte bIn, MemorySegment pdecOut) {
        var mh$ = VarDecFromUI1$MH();
        try {
            return (int)mh$.invokeExact(bIn, pdecOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarDecFromI2$MH() {
        return RuntimeHelper.requireNonNull(constants$1212.VarDecFromI2$MH,"VarDecFromI2");
    }
    /**
     * {@snippet :
     * HRESULT VarDecFromI2(SHORT uiIn, DECIMAL* pdecOut);
     * }
     */
    public static int VarDecFromI2(short uiIn, MemorySegment pdecOut) {
        var mh$ = VarDecFromI2$MH();
        try {
            return (int)mh$.invokeExact(uiIn, pdecOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarDecFromI4$MH() {
        return RuntimeHelper.requireNonNull(constants$1212.VarDecFromI4$MH,"VarDecFromI4");
    }
    /**
     * {@snippet :
     * HRESULT VarDecFromI4(LONG lIn, DECIMAL* pdecOut);
     * }
     */
    public static int VarDecFromI4(int lIn, MemorySegment pdecOut) {
        var mh$ = VarDecFromI4$MH();
        try {
            return (int)mh$.invokeExact(lIn, pdecOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarDecFromI8$MH() {
        return RuntimeHelper.requireNonNull(constants$1213.VarDecFromI8$MH,"VarDecFromI8");
    }
    /**
     * {@snippet :
     * HRESULT VarDecFromI8(LONG64 i64In, DECIMAL* pdecOut);
     * }
     */
    public static int VarDecFromI8(long i64In, MemorySegment pdecOut) {
        var mh$ = VarDecFromI8$MH();
        try {
            return (int)mh$.invokeExact(i64In, pdecOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarDecFromR4$MH() {
        return RuntimeHelper.requireNonNull(constants$1213.VarDecFromR4$MH,"VarDecFromR4");
    }
    /**
     * {@snippet :
     * HRESULT VarDecFromR4(FLOAT fltIn, DECIMAL* pdecOut);
     * }
     */
    public static int VarDecFromR4(float fltIn, MemorySegment pdecOut) {
        var mh$ = VarDecFromR4$MH();
        try {
            return (int)mh$.invokeExact(fltIn, pdecOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarDecFromR8$MH() {
        return RuntimeHelper.requireNonNull(constants$1213.VarDecFromR8$MH,"VarDecFromR8");
    }
    /**
     * {@snippet :
     * HRESULT VarDecFromR8(DOUBLE dblIn, DECIMAL* pdecOut);
     * }
     */
    public static int VarDecFromR8(double dblIn, MemorySegment pdecOut) {
        var mh$ = VarDecFromR8$MH();
        try {
            return (int)mh$.invokeExact(dblIn, pdecOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarDecFromDate$MH() {
        return RuntimeHelper.requireNonNull(constants$1213.VarDecFromDate$MH,"VarDecFromDate");
    }
    /**
     * {@snippet :
     * HRESULT VarDecFromDate(DATE dateIn, DECIMAL* pdecOut);
     * }
     */
    public static int VarDecFromDate(double dateIn, MemorySegment pdecOut) {
        var mh$ = VarDecFromDate$MH();
        try {
            return (int)mh$.invokeExact(dateIn, pdecOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarDecFromCy$MH() {
        return RuntimeHelper.requireNonNull(constants$1213.VarDecFromCy$MH,"VarDecFromCy");
    }
    /**
     * {@snippet :
     * HRESULT VarDecFromCy(CY cyIn, DECIMAL* pdecOut);
     * }
     */
    public static int VarDecFromCy(MemorySegment cyIn, MemorySegment pdecOut) {
        var mh$ = VarDecFromCy$MH();
        try {
            return (int)mh$.invokeExact(cyIn, pdecOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarDecFromStr$MH() {
        return RuntimeHelper.requireNonNull(constants$1213.VarDecFromStr$MH,"VarDecFromStr");
    }
    /**
     * {@snippet :
     * HRESULT VarDecFromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, DECIMAL* pdecOut);
     * }
     */
    public static int VarDecFromStr(MemorySegment strIn, int lcid, int dwFlags, MemorySegment pdecOut) {
        var mh$ = VarDecFromStr$MH();
        try {
            return (int)mh$.invokeExact(strIn, lcid, dwFlags, pdecOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarDecFromDisp$MH() {
        return RuntimeHelper.requireNonNull(constants$1214.VarDecFromDisp$MH,"VarDecFromDisp");
    }
    /**
     * {@snippet :
     * HRESULT VarDecFromDisp(IDispatch* pdispIn, LCID lcid, DECIMAL* pdecOut);
     * }
     */
    public static int VarDecFromDisp(MemorySegment pdispIn, int lcid, MemorySegment pdecOut) {
        var mh$ = VarDecFromDisp$MH();
        try {
            return (int)mh$.invokeExact(pdispIn, lcid, pdecOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarDecFromBool$MH() {
        return RuntimeHelper.requireNonNull(constants$1214.VarDecFromBool$MH,"VarDecFromBool");
    }
    /**
     * {@snippet :
     * HRESULT VarDecFromBool(VARIANT_BOOL boolIn, DECIMAL* pdecOut);
     * }
     */
    public static int VarDecFromBool(short boolIn, MemorySegment pdecOut) {
        var mh$ = VarDecFromBool$MH();
        try {
            return (int)mh$.invokeExact(boolIn, pdecOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarDecFromI1$MH() {
        return RuntimeHelper.requireNonNull(constants$1214.VarDecFromI1$MH,"VarDecFromI1");
    }
    /**
     * {@snippet :
     * HRESULT VarDecFromI1(CHAR cIn, DECIMAL* pdecOut);
     * }
     */
    public static int VarDecFromI1(byte cIn, MemorySegment pdecOut) {
        var mh$ = VarDecFromI1$MH();
        try {
            return (int)mh$.invokeExact(cIn, pdecOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarDecFromUI2$MH() {
        return RuntimeHelper.requireNonNull(constants$1214.VarDecFromUI2$MH,"VarDecFromUI2");
    }
    /**
     * {@snippet :
     * HRESULT VarDecFromUI2(USHORT uiIn, DECIMAL* pdecOut);
     * }
     */
    public static int VarDecFromUI2(short uiIn, MemorySegment pdecOut) {
        var mh$ = VarDecFromUI2$MH();
        try {
            return (int)mh$.invokeExact(uiIn, pdecOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarDecFromUI4$MH() {
        return RuntimeHelper.requireNonNull(constants$1214.VarDecFromUI4$MH,"VarDecFromUI4");
    }
    /**
     * {@snippet :
     * HRESULT VarDecFromUI4(ULONG ulIn, DECIMAL* pdecOut);
     * }
     */
    public static int VarDecFromUI4(int ulIn, MemorySegment pdecOut) {
        var mh$ = VarDecFromUI4$MH();
        try {
            return (int)mh$.invokeExact(ulIn, pdecOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarDecFromUI8$MH() {
        return RuntimeHelper.requireNonNull(constants$1214.VarDecFromUI8$MH,"VarDecFromUI8");
    }
    /**
     * {@snippet :
     * HRESULT VarDecFromUI8(ULONG64 ui64In, DECIMAL* pdecOut);
     * }
     */
    public static int VarDecFromUI8(long ui64In, MemorySegment pdecOut) {
        var mh$ = VarDecFromUI8$MH();
        try {
            return (int)mh$.invokeExact(ui64In, pdecOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarParseNumFromStr$MH() {
        return RuntimeHelper.requireNonNull(constants$1215.VarParseNumFromStr$MH,"VarParseNumFromStr");
    }
    /**
     * {@snippet :
     * HRESULT VarParseNumFromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, NUMPARSE* pnumprs, BYTE* rgbDig);
     * }
     */
    public static int VarParseNumFromStr(MemorySegment strIn, int lcid, int dwFlags, MemorySegment pnumprs, MemorySegment rgbDig) {
        var mh$ = VarParseNumFromStr$MH();
        try {
            return (int)mh$.invokeExact(strIn, lcid, dwFlags, pnumprs, rgbDig);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarNumFromParseNum$MH() {
        return RuntimeHelper.requireNonNull(constants$1215.VarNumFromParseNum$MH,"VarNumFromParseNum");
    }
    /**
     * {@snippet :
     * HRESULT VarNumFromParseNum(NUMPARSE* pnumprs, BYTE* rgbDig, ULONG dwVtBits, VARIANT* pvar);
     * }
     */
    public static int VarNumFromParseNum(MemorySegment pnumprs, MemorySegment rgbDig, int dwVtBits, MemorySegment pvar) {
        var mh$ = VarNumFromParseNum$MH();
        try {
            return (int)mh$.invokeExact(pnumprs, rgbDig, dwVtBits, pvar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarAdd$MH() {
        return RuntimeHelper.requireNonNull(constants$1215.VarAdd$MH,"VarAdd");
    }
    /**
     * {@snippet :
     * HRESULT VarAdd(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
     * }
     */
    public static int VarAdd(MemorySegment pvarLeft, MemorySegment pvarRight, MemorySegment pvarResult) {
        var mh$ = VarAdd$MH();
        try {
            return (int)mh$.invokeExact(pvarLeft, pvarRight, pvarResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarAnd$MH() {
        return RuntimeHelper.requireNonNull(constants$1215.VarAnd$MH,"VarAnd");
    }
    /**
     * {@snippet :
     * HRESULT VarAnd(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
     * }
     */
    public static int VarAnd(MemorySegment pvarLeft, MemorySegment pvarRight, MemorySegment pvarResult) {
        var mh$ = VarAnd$MH();
        try {
            return (int)mh$.invokeExact(pvarLeft, pvarRight, pvarResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarCat$MH() {
        return RuntimeHelper.requireNonNull(constants$1215.VarCat$MH,"VarCat");
    }
    /**
     * {@snippet :
     * HRESULT VarCat(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
     * }
     */
    public static int VarCat(MemorySegment pvarLeft, MemorySegment pvarRight, MemorySegment pvarResult) {
        var mh$ = VarCat$MH();
        try {
            return (int)mh$.invokeExact(pvarLeft, pvarRight, pvarResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarDiv$MH() {
        return RuntimeHelper.requireNonNull(constants$1215.VarDiv$MH,"VarDiv");
    }
    /**
     * {@snippet :
     * HRESULT VarDiv(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
     * }
     */
    public static int VarDiv(MemorySegment pvarLeft, MemorySegment pvarRight, MemorySegment pvarResult) {
        var mh$ = VarDiv$MH();
        try {
            return (int)mh$.invokeExact(pvarLeft, pvarRight, pvarResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarEqv$MH() {
        return RuntimeHelper.requireNonNull(constants$1216.VarEqv$MH,"VarEqv");
    }
    /**
     * {@snippet :
     * HRESULT VarEqv(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
     * }
     */
    public static int VarEqv(MemorySegment pvarLeft, MemorySegment pvarRight, MemorySegment pvarResult) {
        var mh$ = VarEqv$MH();
        try {
            return (int)mh$.invokeExact(pvarLeft, pvarRight, pvarResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarIdiv$MH() {
        return RuntimeHelper.requireNonNull(constants$1216.VarIdiv$MH,"VarIdiv");
    }
    /**
     * {@snippet :
     * HRESULT VarIdiv(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
     * }
     */
    public static int VarIdiv(MemorySegment pvarLeft, MemorySegment pvarRight, MemorySegment pvarResult) {
        var mh$ = VarIdiv$MH();
        try {
            return (int)mh$.invokeExact(pvarLeft, pvarRight, pvarResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarImp$MH() {
        return RuntimeHelper.requireNonNull(constants$1216.VarImp$MH,"VarImp");
    }
    /**
     * {@snippet :
     * HRESULT VarImp(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
     * }
     */
    public static int VarImp(MemorySegment pvarLeft, MemorySegment pvarRight, MemorySegment pvarResult) {
        var mh$ = VarImp$MH();
        try {
            return (int)mh$.invokeExact(pvarLeft, pvarRight, pvarResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarMod$MH() {
        return RuntimeHelper.requireNonNull(constants$1216.VarMod$MH,"VarMod");
    }
    /**
     * {@snippet :
     * HRESULT VarMod(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
     * }
     */
    public static int VarMod(MemorySegment pvarLeft, MemorySegment pvarRight, MemorySegment pvarResult) {
        var mh$ = VarMod$MH();
        try {
            return (int)mh$.invokeExact(pvarLeft, pvarRight, pvarResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarMul$MH() {
        return RuntimeHelper.requireNonNull(constants$1216.VarMul$MH,"VarMul");
    }
    /**
     * {@snippet :
     * HRESULT VarMul(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
     * }
     */
    public static int VarMul(MemorySegment pvarLeft, MemorySegment pvarRight, MemorySegment pvarResult) {
        var mh$ = VarMul$MH();
        try {
            return (int)mh$.invokeExact(pvarLeft, pvarRight, pvarResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarOr$MH() {
        return RuntimeHelper.requireNonNull(constants$1216.VarOr$MH,"VarOr");
    }
    /**
     * {@snippet :
     * HRESULT VarOr(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
     * }
     */
    public static int VarOr(MemorySegment pvarLeft, MemorySegment pvarRight, MemorySegment pvarResult) {
        var mh$ = VarOr$MH();
        try {
            return (int)mh$.invokeExact(pvarLeft, pvarRight, pvarResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarPow$MH() {
        return RuntimeHelper.requireNonNull(constants$1217.VarPow$MH,"VarPow");
    }
    /**
     * {@snippet :
     * HRESULT VarPow(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
     * }
     */
    public static int VarPow(MemorySegment pvarLeft, MemorySegment pvarRight, MemorySegment pvarResult) {
        var mh$ = VarPow$MH();
        try {
            return (int)mh$.invokeExact(pvarLeft, pvarRight, pvarResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarSub$MH() {
        return RuntimeHelper.requireNonNull(constants$1217.VarSub$MH,"VarSub");
    }
    /**
     * {@snippet :
     * HRESULT VarSub(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
     * }
     */
    public static int VarSub(MemorySegment pvarLeft, MemorySegment pvarRight, MemorySegment pvarResult) {
        var mh$ = VarSub$MH();
        try {
            return (int)mh$.invokeExact(pvarLeft, pvarRight, pvarResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarXor$MH() {
        return RuntimeHelper.requireNonNull(constants$1217.VarXor$MH,"VarXor");
    }
    /**
     * {@snippet :
     * HRESULT VarXor(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
     * }
     */
    public static int VarXor(MemorySegment pvarLeft, MemorySegment pvarRight, MemorySegment pvarResult) {
        var mh$ = VarXor$MH();
        try {
            return (int)mh$.invokeExact(pvarLeft, pvarRight, pvarResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarAbs$MH() {
        return RuntimeHelper.requireNonNull(constants$1217.VarAbs$MH,"VarAbs");
    }
    /**
     * {@snippet :
     * HRESULT VarAbs(LPVARIANT pvarIn, LPVARIANT pvarResult);
     * }
     */
    public static int VarAbs(MemorySegment pvarIn, MemorySegment pvarResult) {
        var mh$ = VarAbs$MH();
        try {
            return (int)mh$.invokeExact(pvarIn, pvarResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarFix$MH() {
        return RuntimeHelper.requireNonNull(constants$1217.VarFix$MH,"VarFix");
    }
    /**
     * {@snippet :
     * HRESULT VarFix(LPVARIANT pvarIn, LPVARIANT pvarResult);
     * }
     */
    public static int VarFix(MemorySegment pvarIn, MemorySegment pvarResult) {
        var mh$ = VarFix$MH();
        try {
            return (int)mh$.invokeExact(pvarIn, pvarResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarInt$MH() {
        return RuntimeHelper.requireNonNull(constants$1217.VarInt$MH,"VarInt");
    }
    /**
     * {@snippet :
     * HRESULT VarInt(LPVARIANT pvarIn, LPVARIANT pvarResult);
     * }
     */
    public static int VarInt(MemorySegment pvarIn, MemorySegment pvarResult) {
        var mh$ = VarInt$MH();
        try {
            return (int)mh$.invokeExact(pvarIn, pvarResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarNeg$MH() {
        return RuntimeHelper.requireNonNull(constants$1218.VarNeg$MH,"VarNeg");
    }
    /**
     * {@snippet :
     * HRESULT VarNeg(LPVARIANT pvarIn, LPVARIANT pvarResult);
     * }
     */
    public static int VarNeg(MemorySegment pvarIn, MemorySegment pvarResult) {
        var mh$ = VarNeg$MH();
        try {
            return (int)mh$.invokeExact(pvarIn, pvarResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarNot$MH() {
        return RuntimeHelper.requireNonNull(constants$1218.VarNot$MH,"VarNot");
    }
    /**
     * {@snippet :
     * HRESULT VarNot(LPVARIANT pvarIn, LPVARIANT pvarResult);
     * }
     */
    public static int VarNot(MemorySegment pvarIn, MemorySegment pvarResult) {
        var mh$ = VarNot$MH();
        try {
            return (int)mh$.invokeExact(pvarIn, pvarResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarRound$MH() {
        return RuntimeHelper.requireNonNull(constants$1218.VarRound$MH,"VarRound");
    }
    /**
     * {@snippet :
     * HRESULT VarRound(LPVARIANT pvarIn, int cDecimals, LPVARIANT pvarResult);
     * }
     */
    public static int VarRound(MemorySegment pvarIn, int cDecimals, MemorySegment pvarResult) {
        var mh$ = VarRound$MH();
        try {
            return (int)mh$.invokeExact(pvarIn, cDecimals, pvarResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarCmp$MH() {
        return RuntimeHelper.requireNonNull(constants$1218.VarCmp$MH,"VarCmp");
    }
    /**
     * {@snippet :
     * HRESULT VarCmp(LPVARIANT pvarLeft, LPVARIANT pvarRight, LCID lcid, ULONG dwFlags);
     * }
     */
    public static int VarCmp(MemorySegment pvarLeft, MemorySegment pvarRight, int lcid, int dwFlags) {
        var mh$ = VarCmp$MH();
        try {
            return (int)mh$.invokeExact(pvarLeft, pvarRight, lcid, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarDecAdd$MH() {
        return RuntimeHelper.requireNonNull(constants$1218.VarDecAdd$MH,"VarDecAdd");
    }
    /**
     * {@snippet :
     * HRESULT VarDecAdd(LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult);
     * }
     */
    public static int VarDecAdd(MemorySegment pdecLeft, MemorySegment pdecRight, MemorySegment pdecResult) {
        var mh$ = VarDecAdd$MH();
        try {
            return (int)mh$.invokeExact(pdecLeft, pdecRight, pdecResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarDecDiv$MH() {
        return RuntimeHelper.requireNonNull(constants$1218.VarDecDiv$MH,"VarDecDiv");
    }
    /**
     * {@snippet :
     * HRESULT VarDecDiv(LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult);
     * }
     */
    public static int VarDecDiv(MemorySegment pdecLeft, MemorySegment pdecRight, MemorySegment pdecResult) {
        var mh$ = VarDecDiv$MH();
        try {
            return (int)mh$.invokeExact(pdecLeft, pdecRight, pdecResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarDecMul$MH() {
        return RuntimeHelper.requireNonNull(constants$1219.VarDecMul$MH,"VarDecMul");
    }
    /**
     * {@snippet :
     * HRESULT VarDecMul(LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult);
     * }
     */
    public static int VarDecMul(MemorySegment pdecLeft, MemorySegment pdecRight, MemorySegment pdecResult) {
        var mh$ = VarDecMul$MH();
        try {
            return (int)mh$.invokeExact(pdecLeft, pdecRight, pdecResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarDecSub$MH() {
        return RuntimeHelper.requireNonNull(constants$1219.VarDecSub$MH,"VarDecSub");
    }
    /**
     * {@snippet :
     * HRESULT VarDecSub(LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult);
     * }
     */
    public static int VarDecSub(MemorySegment pdecLeft, MemorySegment pdecRight, MemorySegment pdecResult) {
        var mh$ = VarDecSub$MH();
        try {
            return (int)mh$.invokeExact(pdecLeft, pdecRight, pdecResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarDecAbs$MH() {
        return RuntimeHelper.requireNonNull(constants$1219.VarDecAbs$MH,"VarDecAbs");
    }
    /**
     * {@snippet :
     * HRESULT VarDecAbs(LPDECIMAL pdecIn, LPDECIMAL pdecResult);
     * }
     */
    public static int VarDecAbs(MemorySegment pdecIn, MemorySegment pdecResult) {
        var mh$ = VarDecAbs$MH();
        try {
            return (int)mh$.invokeExact(pdecIn, pdecResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarDecFix$MH() {
        return RuntimeHelper.requireNonNull(constants$1219.VarDecFix$MH,"VarDecFix");
    }
    /**
     * {@snippet :
     * HRESULT VarDecFix(LPDECIMAL pdecIn, LPDECIMAL pdecResult);
     * }
     */
    public static int VarDecFix(MemorySegment pdecIn, MemorySegment pdecResult) {
        var mh$ = VarDecFix$MH();
        try {
            return (int)mh$.invokeExact(pdecIn, pdecResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarDecInt$MH() {
        return RuntimeHelper.requireNonNull(constants$1219.VarDecInt$MH,"VarDecInt");
    }
    /**
     * {@snippet :
     * HRESULT VarDecInt(LPDECIMAL pdecIn, LPDECIMAL pdecResult);
     * }
     */
    public static int VarDecInt(MemorySegment pdecIn, MemorySegment pdecResult) {
        var mh$ = VarDecInt$MH();
        try {
            return (int)mh$.invokeExact(pdecIn, pdecResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarDecNeg$MH() {
        return RuntimeHelper.requireNonNull(constants$1219.VarDecNeg$MH,"VarDecNeg");
    }
    /**
     * {@snippet :
     * HRESULT VarDecNeg(LPDECIMAL pdecIn, LPDECIMAL pdecResult);
     * }
     */
    public static int VarDecNeg(MemorySegment pdecIn, MemorySegment pdecResult) {
        var mh$ = VarDecNeg$MH();
        try {
            return (int)mh$.invokeExact(pdecIn, pdecResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarDecRound$MH() {
        return RuntimeHelper.requireNonNull(constants$1220.VarDecRound$MH,"VarDecRound");
    }
    /**
     * {@snippet :
     * HRESULT VarDecRound(LPDECIMAL pdecIn, int cDecimals, LPDECIMAL pdecResult);
     * }
     */
    public static int VarDecRound(MemorySegment pdecIn, int cDecimals, MemorySegment pdecResult) {
        var mh$ = VarDecRound$MH();
        try {
            return (int)mh$.invokeExact(pdecIn, cDecimals, pdecResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarDecCmp$MH() {
        return RuntimeHelper.requireNonNull(constants$1220.VarDecCmp$MH,"VarDecCmp");
    }
    /**
     * {@snippet :
     * HRESULT VarDecCmp(LPDECIMAL pdecLeft, LPDECIMAL pdecRight);
     * }
     */
    public static int VarDecCmp(MemorySegment pdecLeft, MemorySegment pdecRight) {
        var mh$ = VarDecCmp$MH();
        try {
            return (int)mh$.invokeExact(pdecLeft, pdecRight);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarDecCmpR8$MH() {
        return RuntimeHelper.requireNonNull(constants$1220.VarDecCmpR8$MH,"VarDecCmpR8");
    }
    /**
     * {@snippet :
     * HRESULT VarDecCmpR8(LPDECIMAL pdecLeft, double dblRight);
     * }
     */
    public static int VarDecCmpR8(MemorySegment pdecLeft, double dblRight) {
        var mh$ = VarDecCmpR8$MH();
        try {
            return (int)mh$.invokeExact(pdecLeft, dblRight);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarCyAdd$MH() {
        return RuntimeHelper.requireNonNull(constants$1220.VarCyAdd$MH,"VarCyAdd");
    }
    /**
     * {@snippet :
     * HRESULT VarCyAdd(CY cyLeft, CY cyRight, LPCY pcyResult);
     * }
     */
    public static int VarCyAdd(MemorySegment cyLeft, MemorySegment cyRight, MemorySegment pcyResult) {
        var mh$ = VarCyAdd$MH();
        try {
            return (int)mh$.invokeExact(cyLeft, cyRight, pcyResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarCyMul$MH() {
        return RuntimeHelper.requireNonNull(constants$1220.VarCyMul$MH,"VarCyMul");
    }
    /**
     * {@snippet :
     * HRESULT VarCyMul(CY cyLeft, CY cyRight, LPCY pcyResult);
     * }
     */
    public static int VarCyMul(MemorySegment cyLeft, MemorySegment cyRight, MemorySegment pcyResult) {
        var mh$ = VarCyMul$MH();
        try {
            return (int)mh$.invokeExact(cyLeft, cyRight, pcyResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarCyMulI4$MH() {
        return RuntimeHelper.requireNonNull(constants$1220.VarCyMulI4$MH,"VarCyMulI4");
    }
    /**
     * {@snippet :
     * HRESULT VarCyMulI4(CY cyLeft, LONG lRight, LPCY pcyResult);
     * }
     */
    public static int VarCyMulI4(MemorySegment cyLeft, int lRight, MemorySegment pcyResult) {
        var mh$ = VarCyMulI4$MH();
        try {
            return (int)mh$.invokeExact(cyLeft, lRight, pcyResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarCyMulI8$MH() {
        return RuntimeHelper.requireNonNull(constants$1221.VarCyMulI8$MH,"VarCyMulI8");
    }
    /**
     * {@snippet :
     * HRESULT VarCyMulI8(CY cyLeft, LONG64 lRight, LPCY pcyResult);
     * }
     */
    public static int VarCyMulI8(MemorySegment cyLeft, long lRight, MemorySegment pcyResult) {
        var mh$ = VarCyMulI8$MH();
        try {
            return (int)mh$.invokeExact(cyLeft, lRight, pcyResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarCySub$MH() {
        return RuntimeHelper.requireNonNull(constants$1221.VarCySub$MH,"VarCySub");
    }
    /**
     * {@snippet :
     * HRESULT VarCySub(CY cyLeft, CY cyRight, LPCY pcyResult);
     * }
     */
    public static int VarCySub(MemorySegment cyLeft, MemorySegment cyRight, MemorySegment pcyResult) {
        var mh$ = VarCySub$MH();
        try {
            return (int)mh$.invokeExact(cyLeft, cyRight, pcyResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarCyAbs$MH() {
        return RuntimeHelper.requireNonNull(constants$1221.VarCyAbs$MH,"VarCyAbs");
    }
    /**
     * {@snippet :
     * HRESULT VarCyAbs(CY cyIn, LPCY pcyResult);
     * }
     */
    public static int VarCyAbs(MemorySegment cyIn, MemorySegment pcyResult) {
        var mh$ = VarCyAbs$MH();
        try {
            return (int)mh$.invokeExact(cyIn, pcyResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarCyFix$MH() {
        return RuntimeHelper.requireNonNull(constants$1221.VarCyFix$MH,"VarCyFix");
    }
    /**
     * {@snippet :
     * HRESULT VarCyFix(CY cyIn, LPCY pcyResult);
     * }
     */
    public static int VarCyFix(MemorySegment cyIn, MemorySegment pcyResult) {
        var mh$ = VarCyFix$MH();
        try {
            return (int)mh$.invokeExact(cyIn, pcyResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarCyInt$MH() {
        return RuntimeHelper.requireNonNull(constants$1221.VarCyInt$MH,"VarCyInt");
    }
    /**
     * {@snippet :
     * HRESULT VarCyInt(CY cyIn, LPCY pcyResult);
     * }
     */
    public static int VarCyInt(MemorySegment cyIn, MemorySegment pcyResult) {
        var mh$ = VarCyInt$MH();
        try {
            return (int)mh$.invokeExact(cyIn, pcyResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarCyNeg$MH() {
        return RuntimeHelper.requireNonNull(constants$1221.VarCyNeg$MH,"VarCyNeg");
    }
    /**
     * {@snippet :
     * HRESULT VarCyNeg(CY cyIn, LPCY pcyResult);
     * }
     */
    public static int VarCyNeg(MemorySegment cyIn, MemorySegment pcyResult) {
        var mh$ = VarCyNeg$MH();
        try {
            return (int)mh$.invokeExact(cyIn, pcyResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarCyRound$MH() {
        return RuntimeHelper.requireNonNull(constants$1222.VarCyRound$MH,"VarCyRound");
    }
    /**
     * {@snippet :
     * HRESULT VarCyRound(CY cyIn, int cDecimals, LPCY pcyResult);
     * }
     */
    public static int VarCyRound(MemorySegment cyIn, int cDecimals, MemorySegment pcyResult) {
        var mh$ = VarCyRound$MH();
        try {
            return (int)mh$.invokeExact(cyIn, cDecimals, pcyResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarCyCmp$MH() {
        return RuntimeHelper.requireNonNull(constants$1222.VarCyCmp$MH,"VarCyCmp");
    }
    /**
     * {@snippet :
     * HRESULT VarCyCmp(CY cyLeft, CY cyRight);
     * }
     */
    public static int VarCyCmp(MemorySegment cyLeft, MemorySegment cyRight) {
        var mh$ = VarCyCmp$MH();
        try {
            return (int)mh$.invokeExact(cyLeft, cyRight);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarCyCmpR8$MH() {
        return RuntimeHelper.requireNonNull(constants$1222.VarCyCmpR8$MH,"VarCyCmpR8");
    }
    /**
     * {@snippet :
     * HRESULT VarCyCmpR8(CY cyLeft, double dblRight);
     * }
     */
    public static int VarCyCmpR8(MemorySegment cyLeft, double dblRight) {
        var mh$ = VarCyCmpR8$MH();
        try {
            return (int)mh$.invokeExact(cyLeft, dblRight);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarBstrCat$MH() {
        return RuntimeHelper.requireNonNull(constants$1222.VarBstrCat$MH,"VarBstrCat");
    }
    /**
     * {@snippet :
     * HRESULT VarBstrCat(BSTR bstrLeft, BSTR bstrRight, LPBSTR pbstrResult);
     * }
     */
    public static int VarBstrCat(MemorySegment bstrLeft, MemorySegment bstrRight, MemorySegment pbstrResult) {
        var mh$ = VarBstrCat$MH();
        try {
            return (int)mh$.invokeExact(bstrLeft, bstrRight, pbstrResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarBstrCmp$MH() {
        return RuntimeHelper.requireNonNull(constants$1222.VarBstrCmp$MH,"VarBstrCmp");
    }
    /**
     * {@snippet :
     * HRESULT VarBstrCmp(BSTR bstrLeft, BSTR bstrRight, LCID lcid, ULONG dwFlags);
     * }
     */
    public static int VarBstrCmp(MemorySegment bstrLeft, MemorySegment bstrRight, int lcid, int dwFlags) {
        var mh$ = VarBstrCmp$MH();
        try {
            return (int)mh$.invokeExact(bstrLeft, bstrRight, lcid, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarR8Pow$MH() {
        return RuntimeHelper.requireNonNull(constants$1222.VarR8Pow$MH,"VarR8Pow");
    }
    /**
     * {@snippet :
     * HRESULT VarR8Pow(double dblLeft, double dblRight, double* pdblResult);
     * }
     */
    public static int VarR8Pow(double dblLeft, double dblRight, MemorySegment pdblResult) {
        var mh$ = VarR8Pow$MH();
        try {
            return (int)mh$.invokeExact(dblLeft, dblRight, pdblResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarR4CmpR8$MH() {
        return RuntimeHelper.requireNonNull(constants$1223.VarR4CmpR8$MH,"VarR4CmpR8");
    }
    /**
     * {@snippet :
     * HRESULT VarR4CmpR8(float fltLeft, double dblRight);
     * }
     */
    public static int VarR4CmpR8(float fltLeft, double dblRight) {
        var mh$ = VarR4CmpR8$MH();
        try {
            return (int)mh$.invokeExact(fltLeft, dblRight);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarR8Round$MH() {
        return RuntimeHelper.requireNonNull(constants$1223.VarR8Round$MH,"VarR8Round");
    }
    /**
     * {@snippet :
     * HRESULT VarR8Round(double dblIn, int cDecimals, double* pdblResult);
     * }
     */
    public static int VarR8Round(double dblIn, int cDecimals, MemorySegment pdblResult) {
        var mh$ = VarR8Round$MH();
        try {
            return (int)mh$.invokeExact(dblIn, cDecimals, pdblResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarDateFromUdate$MH() {
        return RuntimeHelper.requireNonNull(constants$1223.VarDateFromUdate$MH,"VarDateFromUdate");
    }
    /**
     * {@snippet :
     * HRESULT VarDateFromUdate(UDATE* pudateIn, ULONG dwFlags, DATE* pdateOut);
     * }
     */
    public static int VarDateFromUdate(MemorySegment pudateIn, int dwFlags, MemorySegment pdateOut) {
        var mh$ = VarDateFromUdate$MH();
        try {
            return (int)mh$.invokeExact(pudateIn, dwFlags, pdateOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarDateFromUdateEx$MH() {
        return RuntimeHelper.requireNonNull(constants$1223.VarDateFromUdateEx$MH,"VarDateFromUdateEx");
    }
    /**
     * {@snippet :
     * HRESULT VarDateFromUdateEx(UDATE* pudateIn, LCID lcid, ULONG dwFlags, DATE* pdateOut);
     * }
     */
    public static int VarDateFromUdateEx(MemorySegment pudateIn, int lcid, int dwFlags, MemorySegment pdateOut) {
        var mh$ = VarDateFromUdateEx$MH();
        try {
            return (int)mh$.invokeExact(pudateIn, lcid, dwFlags, pdateOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarUdateFromDate$MH() {
        return RuntimeHelper.requireNonNull(constants$1223.VarUdateFromDate$MH,"VarUdateFromDate");
    }
    /**
     * {@snippet :
     * HRESULT VarUdateFromDate(DATE dateIn, ULONG dwFlags, UDATE* pudateOut);
     * }
     */
    public static int VarUdateFromDate(double dateIn, int dwFlags, MemorySegment pudateOut) {
        var mh$ = VarUdateFromDate$MH();
        try {
            return (int)mh$.invokeExact(dateIn, dwFlags, pudateOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetAltMonthNames$MH() {
        return RuntimeHelper.requireNonNull(constants$1223.GetAltMonthNames$MH,"GetAltMonthNames");
    }
    /**
     * {@snippet :
     * HRESULT GetAltMonthNames(LCID lcid, LPOLESTR** prgp);
     * }
     */
    public static int GetAltMonthNames(int lcid, MemorySegment prgp) {
        var mh$ = GetAltMonthNames$MH();
        try {
            return (int)mh$.invokeExact(lcid, prgp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarFormat$MH() {
        return RuntimeHelper.requireNonNull(constants$1224.VarFormat$MH,"VarFormat");
    }
    /**
     * {@snippet :
     * HRESULT VarFormat(LPVARIANT pvarIn, LPOLESTR pstrFormat, int iFirstDay, int iFirstWeek, ULONG dwFlags, BSTR* pbstrOut);
     * }
     */
    public static int VarFormat(MemorySegment pvarIn, MemorySegment pstrFormat, int iFirstDay, int iFirstWeek, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarFormat$MH();
        try {
            return (int)mh$.invokeExact(pvarIn, pstrFormat, iFirstDay, iFirstWeek, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarFormatDateTime$MH() {
        return RuntimeHelper.requireNonNull(constants$1224.VarFormatDateTime$MH,"VarFormatDateTime");
    }
    /**
     * {@snippet :
     * HRESULT VarFormatDateTime(LPVARIANT pvarIn, int iNamedFormat, ULONG dwFlags, BSTR* pbstrOut);
     * }
     */
    public static int VarFormatDateTime(MemorySegment pvarIn, int iNamedFormat, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarFormatDateTime$MH();
        try {
            return (int)mh$.invokeExact(pvarIn, iNamedFormat, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarFormatNumber$MH() {
        return RuntimeHelper.requireNonNull(constants$1224.VarFormatNumber$MH,"VarFormatNumber");
    }
    /**
     * {@snippet :
     * HRESULT VarFormatNumber(LPVARIANT pvarIn, int iNumDig, int iIncLead, int iUseParens, int iGroup, ULONG dwFlags, BSTR* pbstrOut);
     * }
     */
    public static int VarFormatNumber(MemorySegment pvarIn, int iNumDig, int iIncLead, int iUseParens, int iGroup, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarFormatNumber$MH();
        try {
            return (int)mh$.invokeExact(pvarIn, iNumDig, iIncLead, iUseParens, iGroup, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarFormatPercent$MH() {
        return RuntimeHelper.requireNonNull(constants$1224.VarFormatPercent$MH,"VarFormatPercent");
    }
    /**
     * {@snippet :
     * HRESULT VarFormatPercent(LPVARIANT pvarIn, int iNumDig, int iIncLead, int iUseParens, int iGroup, ULONG dwFlags, BSTR* pbstrOut);
     * }
     */
    public static int VarFormatPercent(MemorySegment pvarIn, int iNumDig, int iIncLead, int iUseParens, int iGroup, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarFormatPercent$MH();
        try {
            return (int)mh$.invokeExact(pvarIn, iNumDig, iIncLead, iUseParens, iGroup, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarFormatCurrency$MH() {
        return RuntimeHelper.requireNonNull(constants$1224.VarFormatCurrency$MH,"VarFormatCurrency");
    }
    /**
     * {@snippet :
     * HRESULT VarFormatCurrency(LPVARIANT pvarIn, int iNumDig, int iIncLead, int iUseParens, int iGroup, ULONG dwFlags, BSTR* pbstrOut);
     * }
     */
    public static int VarFormatCurrency(MemorySegment pvarIn, int iNumDig, int iIncLead, int iUseParens, int iGroup, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarFormatCurrency$MH();
        try {
            return (int)mh$.invokeExact(pvarIn, iNumDig, iIncLead, iUseParens, iGroup, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarWeekdayName$MH() {
        return RuntimeHelper.requireNonNull(constants$1224.VarWeekdayName$MH,"VarWeekdayName");
    }
    /**
     * {@snippet :
     * HRESULT VarWeekdayName(int iWeekday, int fAbbrev, int iFirstDay, ULONG dwFlags, BSTR* pbstrOut);
     * }
     */
    public static int VarWeekdayName(int iWeekday, int fAbbrev, int iFirstDay, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarWeekdayName$MH();
        try {
            return (int)mh$.invokeExact(iWeekday, fAbbrev, iFirstDay, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarMonthName$MH() {
        return RuntimeHelper.requireNonNull(constants$1225.VarMonthName$MH,"VarMonthName");
    }
    /**
     * {@snippet :
     * HRESULT VarMonthName(int iMonth, int fAbbrev, ULONG dwFlags, BSTR* pbstrOut);
     * }
     */
    public static int VarMonthName(int iMonth, int fAbbrev, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarMonthName$MH();
        try {
            return (int)mh$.invokeExact(iMonth, fAbbrev, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarFormatFromTokens$MH() {
        return RuntimeHelper.requireNonNull(constants$1225.VarFormatFromTokens$MH,"VarFormatFromTokens");
    }
    /**
     * {@snippet :
     * HRESULT VarFormatFromTokens(LPVARIANT pvarIn, LPOLESTR pstrFormat, LPBYTE pbTokCur, ULONG dwFlags, BSTR* pbstrOut, LCID lcid);
     * }
     */
    public static int VarFormatFromTokens(MemorySegment pvarIn, MemorySegment pstrFormat, MemorySegment pbTokCur, int dwFlags, MemorySegment pbstrOut, int lcid) {
        var mh$ = VarFormatFromTokens$MH();
        try {
            return (int)mh$.invokeExact(pvarIn, pstrFormat, pbTokCur, dwFlags, pbstrOut, lcid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VarTokenizeFormatString$MH() {
        return RuntimeHelper.requireNonNull(constants$1225.VarTokenizeFormatString$MH,"VarTokenizeFormatString");
    }
    /**
     * {@snippet :
     * HRESULT VarTokenizeFormatString(LPOLESTR pstrFormat, LPBYTE rgbTok, int cbTok, int iFirstDay, int iFirstWeek, LCID lcid, int* pcbActual);
     * }
     */
    public static int VarTokenizeFormatString(MemorySegment pstrFormat, MemorySegment rgbTok, int cbTok, int iFirstDay, int iFirstWeek, int lcid, MemorySegment pcbActual) {
        var mh$ = VarTokenizeFormatString$MH();
        try {
            return (int)mh$.invokeExact(pstrFormat, rgbTok, cbTok, iFirstDay, iFirstWeek, lcid, pcbActual);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LHashValOfNameSysA$MH() {
        return RuntimeHelper.requireNonNull(constants$1225.LHashValOfNameSysA$MH,"LHashValOfNameSysA");
    }
    /**
     * {@snippet :
     * ULONG LHashValOfNameSysA(SYSKIND syskind, LCID lcid, LPCSTR szName);
     * }
     */
    public static int LHashValOfNameSysA(int syskind, int lcid, MemorySegment szName) {
        var mh$ = LHashValOfNameSysA$MH();
        try {
            return (int)mh$.invokeExact(syskind, lcid, szName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LHashValOfNameSys$MH() {
        return RuntimeHelper.requireNonNull(constants$1225.LHashValOfNameSys$MH,"LHashValOfNameSys");
    }
    /**
     * {@snippet :
     * ULONG LHashValOfNameSys(SYSKIND syskind, LCID lcid, const OLECHAR* szName);
     * }
     */
    public static int LHashValOfNameSys(int syskind, int lcid, MemorySegment szName) {
        var mh$ = LHashValOfNameSys$MH();
        try {
            return (int)mh$.invokeExact(syskind, lcid, szName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadTypeLib$MH() {
        return RuntimeHelper.requireNonNull(constants$1225.LoadTypeLib$MH,"LoadTypeLib");
    }
    /**
     * {@snippet :
     * HRESULT LoadTypeLib(LPCOLESTR szFile, ITypeLib** pptlib);
     * }
     */
    public static int LoadTypeLib(MemorySegment szFile, MemorySegment pptlib) {
        var mh$ = LoadTypeLib$MH();
        try {
            return (int)mh$.invokeExact(szFile, pptlib);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum tagREGKIND.REGKIND_DEFAULT = 0;
     * }
     */
    public static int REGKIND_DEFAULT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum tagREGKIND.REGKIND_REGISTER = 1;
     * }
     */
    public static int REGKIND_REGISTER() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum tagREGKIND.REGKIND_NONE = 2;
     * }
     */
    public static int REGKIND_NONE() {
        return (int)2L;
    }
    public static MethodHandle LoadTypeLibEx$MH() {
        return RuntimeHelper.requireNonNull(constants$1226.LoadTypeLibEx$MH,"LoadTypeLibEx");
    }
    /**
     * {@snippet :
     * HRESULT LoadTypeLibEx(LPCOLESTR szFile, REGKIND regkind, ITypeLib** pptlib);
     * }
     */
    public static int LoadTypeLibEx(MemorySegment szFile, int regkind, MemorySegment pptlib) {
        var mh$ = LoadTypeLibEx$MH();
        try {
            return (int)mh$.invokeExact(szFile, regkind, pptlib);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadRegTypeLib$MH() {
        return RuntimeHelper.requireNonNull(constants$1226.LoadRegTypeLib$MH,"LoadRegTypeLib");
    }
    /**
     * {@snippet :
     * HRESULT LoadRegTypeLib(const GUID* rguid, WORD wVerMajor, WORD wVerMinor, LCID lcid, ITypeLib** pptlib);
     * }
     */
    public static int LoadRegTypeLib(MemorySegment rguid, short wVerMajor, short wVerMinor, int lcid, MemorySegment pptlib) {
        var mh$ = LoadRegTypeLib$MH();
        try {
            return (int)mh$.invokeExact(rguid, wVerMajor, wVerMinor, lcid, pptlib);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryPathOfRegTypeLib$MH() {
        return RuntimeHelper.requireNonNull(constants$1226.QueryPathOfRegTypeLib$MH,"QueryPathOfRegTypeLib");
    }
    /**
     * {@snippet :
     * HRESULT QueryPathOfRegTypeLib(const GUID* guid, USHORT wMaj, USHORT wMin, LCID lcid, LPBSTR lpbstrPathName);
     * }
     */
    public static int QueryPathOfRegTypeLib(MemorySegment guid, short wMaj, short wMin, int lcid, MemorySegment lpbstrPathName) {
        var mh$ = QueryPathOfRegTypeLib$MH();
        try {
            return (int)mh$.invokeExact(guid, wMaj, wMin, lcid, lpbstrPathName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterTypeLib$MH() {
        return RuntimeHelper.requireNonNull(constants$1226.RegisterTypeLib$MH,"RegisterTypeLib");
    }
    /**
     * {@snippet :
     * HRESULT RegisterTypeLib(ITypeLib* ptlib, LPCOLESTR szFullPath, LPCOLESTR szHelpDir);
     * }
     */
    public static int RegisterTypeLib(MemorySegment ptlib, MemorySegment szFullPath, MemorySegment szHelpDir) {
        var mh$ = RegisterTypeLib$MH();
        try {
            return (int)mh$.invokeExact(ptlib, szFullPath, szHelpDir);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnRegisterTypeLib$MH() {
        return RuntimeHelper.requireNonNull(constants$1226.UnRegisterTypeLib$MH,"UnRegisterTypeLib");
    }
    /**
     * {@snippet :
     * HRESULT UnRegisterTypeLib(const GUID* libID, WORD wVerMajor, WORD wVerMinor, LCID lcid, SYSKIND syskind);
     * }
     */
    public static int UnRegisterTypeLib(MemorySegment libID, short wVerMajor, short wVerMinor, int lcid, int syskind) {
        var mh$ = UnRegisterTypeLib$MH();
        try {
            return (int)mh$.invokeExact(libID, wVerMajor, wVerMinor, lcid, syskind);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterTypeLibForUser$MH() {
        return RuntimeHelper.requireNonNull(constants$1226.RegisterTypeLibForUser$MH,"RegisterTypeLibForUser");
    }
    /**
     * {@snippet :
     * HRESULT RegisterTypeLibForUser(ITypeLib* ptlib, OLECHAR* szFullPath, OLECHAR* szHelpDir);
     * }
     */
    public static int RegisterTypeLibForUser(MemorySegment ptlib, MemorySegment szFullPath, MemorySegment szHelpDir) {
        var mh$ = RegisterTypeLibForUser$MH();
        try {
            return (int)mh$.invokeExact(ptlib, szFullPath, szHelpDir);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnRegisterTypeLibForUser$MH() {
        return RuntimeHelper.requireNonNull(constants$1227.UnRegisterTypeLibForUser$MH,"UnRegisterTypeLibForUser");
    }
    /**
     * {@snippet :
     * HRESULT UnRegisterTypeLibForUser(const GUID* libID, WORD wMajorVerNum, WORD wMinorVerNum, LCID lcid, SYSKIND syskind);
     * }
     */
    public static int UnRegisterTypeLibForUser(MemorySegment libID, short wMajorVerNum, short wMinorVerNum, int lcid, int syskind) {
        var mh$ = UnRegisterTypeLibForUser$MH();
        try {
            return (int)mh$.invokeExact(libID, wMajorVerNum, wMinorVerNum, lcid, syskind);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateTypeLib$MH() {
        return RuntimeHelper.requireNonNull(constants$1227.CreateTypeLib$MH,"CreateTypeLib");
    }
    /**
     * {@snippet :
     * HRESULT CreateTypeLib(SYSKIND syskind, LPCOLESTR szFile, ICreateTypeLib** ppctlib);
     * }
     */
    public static int CreateTypeLib(int syskind, MemorySegment szFile, MemorySegment ppctlib) {
        var mh$ = CreateTypeLib$MH();
        try {
            return (int)mh$.invokeExact(syskind, szFile, ppctlib);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateTypeLib2$MH() {
        return RuntimeHelper.requireNonNull(constants$1227.CreateTypeLib2$MH,"CreateTypeLib2");
    }
    /**
     * {@snippet :
     * HRESULT CreateTypeLib2(SYSKIND syskind, LPCOLESTR szFile, ICreateTypeLib2** ppctlib);
     * }
     */
    public static int CreateTypeLib2(int syskind, MemorySegment szFile, MemorySegment ppctlib) {
        var mh$ = CreateTypeLib2$MH();
        try {
            return (int)mh$.invokeExact(syskind, szFile, ppctlib);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct tagPARAMDATA* LPPARAMDATA;
     * }
     */
    public static final OfAddress LPPARAMDATA = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagMETHODDATA* LPMETHODDATA;
     * }
     */
    public static final OfAddress LPMETHODDATA = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagINTERFACEDATA* LPINTERFACEDATA;
     * }
     */
    public static final OfAddress LPINTERFACEDATA = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle DispGetParam$MH() {
        return RuntimeHelper.requireNonNull(constants$1227.DispGetParam$MH,"DispGetParam");
    }
    /**
     * {@snippet :
     * HRESULT DispGetParam(DISPPARAMS* pdispparams, UINT position, VARTYPE vtTarg, VARIANT* pvarResult, UINT* puArgErr);
     * }
     */
    public static int DispGetParam(MemorySegment pdispparams, int position, short vtTarg, MemorySegment pvarResult, MemorySegment puArgErr) {
        var mh$ = DispGetParam$MH();
        try {
            return (int)mh$.invokeExact(pdispparams, position, vtTarg, pvarResult, puArgErr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DispGetIDsOfNames$MH() {
        return RuntimeHelper.requireNonNull(constants$1227.DispGetIDsOfNames$MH,"DispGetIDsOfNames");
    }
    /**
     * {@snippet :
     * HRESULT DispGetIDsOfNames(ITypeInfo* ptinfo, LPOLESTR* rgszNames, UINT cNames, DISPID* rgdispid);
     * }
     */
    public static int DispGetIDsOfNames(MemorySegment ptinfo, MemorySegment rgszNames, int cNames, MemorySegment rgdispid) {
        var mh$ = DispGetIDsOfNames$MH();
        try {
            return (int)mh$.invokeExact(ptinfo, rgszNames, cNames, rgdispid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DispInvoke$MH() {
        return RuntimeHelper.requireNonNull(constants$1227.DispInvoke$MH,"DispInvoke");
    }
    /**
     * {@snippet :
     * HRESULT DispInvoke(void* _this, ITypeInfo* ptinfo, DISPID dispidMember, WORD wFlags, DISPPARAMS* pparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, UINT* puArgErr);
     * }
     */
    public static int DispInvoke(MemorySegment _this, MemorySegment ptinfo, int dispidMember, short wFlags, MemorySegment pparams, MemorySegment pvarResult, MemorySegment pexcepinfo, MemorySegment puArgErr) {
        var mh$ = DispInvoke$MH();
        try {
            return (int)mh$.invokeExact(_this, ptinfo, dispidMember, wFlags, pparams, pvarResult, pexcepinfo, puArgErr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateDispTypeInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$1228.CreateDispTypeInfo$MH,"CreateDispTypeInfo");
    }
    /**
     * {@snippet :
     * HRESULT CreateDispTypeInfo(INTERFACEDATA* pidata, LCID lcid, ITypeInfo** pptinfo);
     * }
     */
    public static int CreateDispTypeInfo(MemorySegment pidata, int lcid, MemorySegment pptinfo) {
        var mh$ = CreateDispTypeInfo$MH();
        try {
            return (int)mh$.invokeExact(pidata, lcid, pptinfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateStdDispatch$MH() {
        return RuntimeHelper.requireNonNull(constants$1228.CreateStdDispatch$MH,"CreateStdDispatch");
    }
    /**
     * {@snippet :
     * HRESULT CreateStdDispatch(IUnknown* punkOuter, void* pvThis, ITypeInfo* ptinfo, IUnknown** ppunkStdDisp);
     * }
     */
    public static int CreateStdDispatch(MemorySegment punkOuter, MemorySegment pvThis, MemorySegment ptinfo, MemorySegment ppunkStdDisp) {
        var mh$ = CreateStdDispatch$MH();
        try {
            return (int)mh$.invokeExact(punkOuter, pvThis, ptinfo, ppunkStdDisp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DispCallFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$1228.DispCallFunc$MH,"DispCallFunc");
    }
    /**
     * {@snippet :
     * HRESULT DispCallFunc(void* pvInstance, ULONG_PTR oVft, CALLCONV cc, VARTYPE vtReturn, UINT cActuals, VARTYPE* prgvt, VARIANTARG** prgpvarg, VARIANT* pvargResult);
     * }
     */
    public static int DispCallFunc(MemorySegment pvInstance, long oVft, int cc, short vtReturn, int cActuals, MemorySegment prgvt, MemorySegment prgpvarg, MemorySegment pvargResult) {
        var mh$ = DispCallFunc$MH();
        try {
            return (int)mh$.invokeExact(pvInstance, oVft, cc, vtReturn, cActuals, prgvt, prgpvarg, pvargResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterActiveObject$MH() {
        return RuntimeHelper.requireNonNull(constants$1228.RegisterActiveObject$MH,"RegisterActiveObject");
    }
    /**
     * {@snippet :
     * HRESULT RegisterActiveObject(IUnknown* punk, const IID* rclsid, DWORD dwFlags, DWORD* pdwRegister);
     * }
     */
    public static int RegisterActiveObject(MemorySegment punk, MemorySegment rclsid, int dwFlags, MemorySegment pdwRegister) {
        var mh$ = RegisterActiveObject$MH();
        try {
            return (int)mh$.invokeExact(punk, rclsid, dwFlags, pdwRegister);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RevokeActiveObject$MH() {
        return RuntimeHelper.requireNonNull(constants$1228.RevokeActiveObject$MH,"RevokeActiveObject");
    }
    /**
     * {@snippet :
     * HRESULT RevokeActiveObject(DWORD dwRegister, void* pvReserved);
     * }
     */
    public static int RevokeActiveObject(int dwRegister, MemorySegment pvReserved) {
        var mh$ = RevokeActiveObject$MH();
        try {
            return (int)mh$.invokeExact(dwRegister, pvReserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetActiveObject$MH() {
        return RuntimeHelper.requireNonNull(constants$1228.GetActiveObject$MH,"GetActiveObject");
    }
    /**
     * {@snippet :
     * HRESULT GetActiveObject(const IID* rclsid, void* pvReserved, IUnknown** ppunk);
     * }
     */
    public static int GetActiveObject(MemorySegment rclsid, MemorySegment pvReserved, MemorySegment ppunk) {
        var mh$ = GetActiveObject$MH();
        try {
            return (int)mh$.invokeExact(rclsid, pvReserved, ppunk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetErrorInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$1229.SetErrorInfo$MH,"SetErrorInfo");
    }
    /**
     * {@snippet :
     * HRESULT SetErrorInfo(ULONG dwReserved, IErrorInfo* perrinfo);
     * }
     */
    public static int SetErrorInfo(int dwReserved, MemorySegment perrinfo) {
        var mh$ = SetErrorInfo$MH();
        try {
            return (int)mh$.invokeExact(dwReserved, perrinfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetErrorInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$1229.GetErrorInfo$MH,"GetErrorInfo");
    }
    /**
     * {@snippet :
     * HRESULT GetErrorInfo(ULONG dwReserved, IErrorInfo** pperrinfo);
     * }
     */
    public static int GetErrorInfo(int dwReserved, MemorySegment pperrinfo) {
        var mh$ = GetErrorInfo$MH();
        try {
            return (int)mh$.invokeExact(dwReserved, pperrinfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateErrorInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$1229.CreateErrorInfo$MH,"CreateErrorInfo");
    }
    /**
     * {@snippet :
     * HRESULT CreateErrorInfo(ICreateErrorInfo** pperrinfo);
     * }
     */
    public static int CreateErrorInfo(MemorySegment pperrinfo) {
        var mh$ = CreateErrorInfo$MH();
        try {
            return (int)mh$.invokeExact(pperrinfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetRecordInfoFromTypeInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$1229.GetRecordInfoFromTypeInfo$MH,"GetRecordInfoFromTypeInfo");
    }
    /**
     * {@snippet :
     * HRESULT GetRecordInfoFromTypeInfo(ITypeInfo* pTypeInfo, IRecordInfo** ppRecInfo);
     * }
     */
    public static int GetRecordInfoFromTypeInfo(MemorySegment pTypeInfo, MemorySegment ppRecInfo) {
        var mh$ = GetRecordInfoFromTypeInfo$MH();
        try {
            return (int)mh$.invokeExact(pTypeInfo, ppRecInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetRecordInfoFromGuids$MH() {
        return RuntimeHelper.requireNonNull(constants$1229.GetRecordInfoFromGuids$MH,"GetRecordInfoFromGuids");
    }
    /**
     * {@snippet :
     * HRESULT GetRecordInfoFromGuids(const GUID* rGuidTypeLib, ULONG uVerMajor, ULONG uVerMinor, LCID lcid, const GUID* rGuidTypeInfo, IRecordInfo** ppRecInfo);
     * }
     */
    public static int GetRecordInfoFromGuids(MemorySegment rGuidTypeLib, int uVerMajor, int uVerMinor, int lcid, MemorySegment rGuidTypeInfo, MemorySegment ppRecInfo) {
        var mh$ = GetRecordInfoFromGuids$MH();
        try {
            return (int)mh$.invokeExact(rGuidTypeLib, uVerMajor, uVerMinor, lcid, rGuidTypeInfo, ppRecInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OaBuildVersion$MH() {
        return RuntimeHelper.requireNonNull(constants$1229.OaBuildVersion$MH,"OaBuildVersion");
    }
    /**
     * {@snippet :
     * ULONG OaBuildVersion();
     * }
     */
    public static int OaBuildVersion() {
        var mh$ = OaBuildVersion$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ClearCustData$MH() {
        return RuntimeHelper.requireNonNull(constants$1230.ClearCustData$MH,"ClearCustData");
    }
    /**
     * {@snippet :
     * void ClearCustData(LPCUSTDATA pCustData);
     * }
     */
    public static void ClearCustData(MemorySegment pCustData) {
        var mh$ = ClearCustData$MH();
        try {
            mh$.invokeExact(pCustData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OaEnablePerUserTLibRegistration$MH() {
        return RuntimeHelper.requireNonNull(constants$1230.OaEnablePerUserTLibRegistration$MH,"OaEnablePerUserTLibRegistration");
    }
    /**
     * {@snippet :
     * void OaEnablePerUserTLibRegistration();
     * }
     */
    public static void OaEnablePerUserTLibRegistration() {
        var mh$ = OaEnablePerUserTLibRegistration$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleBuildVersion$MH() {
        return RuntimeHelper.requireNonNull(constants$1230.OleBuildVersion$MH,"OleBuildVersion");
    }
    /**
     * {@snippet :
     * DWORD OleBuildVersion();
     * }
     */
    public static int OleBuildVersion() {
        var mh$ = OleBuildVersion$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteFmtUserTypeStg$MH() {
        return RuntimeHelper.requireNonNull(constants$1230.WriteFmtUserTypeStg$MH,"WriteFmtUserTypeStg");
    }
    /**
     * {@snippet :
     * HRESULT WriteFmtUserTypeStg(LPSTORAGE pstg, CLIPFORMAT cf, LPOLESTR lpszUserType);
     * }
     */
    public static int WriteFmtUserTypeStg(MemorySegment pstg, short cf, MemorySegment lpszUserType) {
        var mh$ = WriteFmtUserTypeStg$MH();
        try {
            return (int)mh$.invokeExact(pstg, cf, lpszUserType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadFmtUserTypeStg$MH() {
        return RuntimeHelper.requireNonNull(constants$1230.ReadFmtUserTypeStg$MH,"ReadFmtUserTypeStg");
    }
    /**
     * {@snippet :
     * HRESULT ReadFmtUserTypeStg(LPSTORAGE pstg, CLIPFORMAT* pcf, LPOLESTR* lplpszUserType);
     * }
     */
    public static int ReadFmtUserTypeStg(MemorySegment pstg, MemorySegment pcf, MemorySegment lplpszUserType) {
        var mh$ = ReadFmtUserTypeStg$MH();
        try {
            return (int)mh$.invokeExact(pstg, pcf, lplpszUserType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleInitialize$MH() {
        return RuntimeHelper.requireNonNull(constants$1230.OleInitialize$MH,"OleInitialize");
    }
    /**
     * {@snippet :
     * HRESULT OleInitialize(LPVOID pvReserved);
     * }
     */
    public static int OleInitialize(MemorySegment pvReserved) {
        var mh$ = OleInitialize$MH();
        try {
            return (int)mh$.invokeExact(pvReserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleUninitialize$MH() {
        return RuntimeHelper.requireNonNull(constants$1231.OleUninitialize$MH,"OleUninitialize");
    }
    /**
     * {@snippet :
     * void OleUninitialize();
     * }
     */
    public static void OleUninitialize() {
        var mh$ = OleUninitialize$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleQueryLinkFromData$MH() {
        return RuntimeHelper.requireNonNull(constants$1231.OleQueryLinkFromData$MH,"OleQueryLinkFromData");
    }
    /**
     * {@snippet :
     * HRESULT OleQueryLinkFromData(LPDATAOBJECT pSrcDataObject);
     * }
     */
    public static int OleQueryLinkFromData(MemorySegment pSrcDataObject) {
        var mh$ = OleQueryLinkFromData$MH();
        try {
            return (int)mh$.invokeExact(pSrcDataObject);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleQueryCreateFromData$MH() {
        return RuntimeHelper.requireNonNull(constants$1231.OleQueryCreateFromData$MH,"OleQueryCreateFromData");
    }
    /**
     * {@snippet :
     * HRESULT OleQueryCreateFromData(LPDATAOBJECT pSrcDataObject);
     * }
     */
    public static int OleQueryCreateFromData(MemorySegment pSrcDataObject) {
        var mh$ = OleQueryCreateFromData$MH();
        try {
            return (int)mh$.invokeExact(pSrcDataObject);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleCreate$MH() {
        return RuntimeHelper.requireNonNull(constants$1231.OleCreate$MH,"OleCreate");
    }
    /**
     * {@snippet :
     * HRESULT OleCreate(const IID* rclsid, const IID* riid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID* ppvObj);
     * }
     */
    public static int OleCreate(MemorySegment rclsid, MemorySegment riid, int renderopt, MemorySegment pFormatEtc, MemorySegment pClientSite, MemorySegment pStg, MemorySegment ppvObj) {
        var mh$ = OleCreate$MH();
        try {
            return (int)mh$.invokeExact(rclsid, riid, renderopt, pFormatEtc, pClientSite, pStg, ppvObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleCreateEx$MH() {
        return RuntimeHelper.requireNonNull(constants$1231.OleCreateEx$MH,"OleCreateEx");
    }
    /**
     * {@snippet :
     * HRESULT OleCreateEx(const IID* rclsid, const IID* riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD* rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink* lpAdviseSink, DWORD* rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID* ppvObj);
     * }
     */
    public static int OleCreateEx(MemorySegment rclsid, MemorySegment riid, int dwFlags, int renderopt, int cFormats, MemorySegment rgAdvf, MemorySegment rgFormatEtc, MemorySegment lpAdviseSink, MemorySegment rgdwConnection, MemorySegment pClientSite, MemorySegment pStg, MemorySegment ppvObj) {
        var mh$ = OleCreateEx$MH();
        try {
            return (int)mh$.invokeExact(rclsid, riid, dwFlags, renderopt, cFormats, rgAdvf, rgFormatEtc, lpAdviseSink, rgdwConnection, pClientSite, pStg, ppvObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleCreateFromData$MH() {
        return RuntimeHelper.requireNonNull(constants$1231.OleCreateFromData$MH,"OleCreateFromData");
    }
    /**
     * {@snippet :
     * HRESULT OleCreateFromData(LPDATAOBJECT pSrcDataObj, const IID* riid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID* ppvObj);
     * }
     */
    public static int OleCreateFromData(MemorySegment pSrcDataObj, MemorySegment riid, int renderopt, MemorySegment pFormatEtc, MemorySegment pClientSite, MemorySegment pStg, MemorySegment ppvObj) {
        var mh$ = OleCreateFromData$MH();
        try {
            return (int)mh$.invokeExact(pSrcDataObj, riid, renderopt, pFormatEtc, pClientSite, pStg, ppvObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleCreateFromDataEx$MH() {
        return RuntimeHelper.requireNonNull(constants$1232.OleCreateFromDataEx$MH,"OleCreateFromDataEx");
    }
    /**
     * {@snippet :
     * HRESULT OleCreateFromDataEx(LPDATAOBJECT pSrcDataObj, const IID* riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD* rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink* lpAdviseSink, DWORD* rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID* ppvObj);
     * }
     */
    public static int OleCreateFromDataEx(MemorySegment pSrcDataObj, MemorySegment riid, int dwFlags, int renderopt, int cFormats, MemorySegment rgAdvf, MemorySegment rgFormatEtc, MemorySegment lpAdviseSink, MemorySegment rgdwConnection, MemorySegment pClientSite, MemorySegment pStg, MemorySegment ppvObj) {
        var mh$ = OleCreateFromDataEx$MH();
        try {
            return (int)mh$.invokeExact(pSrcDataObj, riid, dwFlags, renderopt, cFormats, rgAdvf, rgFormatEtc, lpAdviseSink, rgdwConnection, pClientSite, pStg, ppvObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleCreateLinkFromData$MH() {
        return RuntimeHelper.requireNonNull(constants$1232.OleCreateLinkFromData$MH,"OleCreateLinkFromData");
    }
    /**
     * {@snippet :
     * HRESULT OleCreateLinkFromData(LPDATAOBJECT pSrcDataObj, const IID* riid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID* ppvObj);
     * }
     */
    public static int OleCreateLinkFromData(MemorySegment pSrcDataObj, MemorySegment riid, int renderopt, MemorySegment pFormatEtc, MemorySegment pClientSite, MemorySegment pStg, MemorySegment ppvObj) {
        var mh$ = OleCreateLinkFromData$MH();
        try {
            return (int)mh$.invokeExact(pSrcDataObj, riid, renderopt, pFormatEtc, pClientSite, pStg, ppvObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleCreateLinkFromDataEx$MH() {
        return RuntimeHelper.requireNonNull(constants$1232.OleCreateLinkFromDataEx$MH,"OleCreateLinkFromDataEx");
    }
    /**
     * {@snippet :
     * HRESULT OleCreateLinkFromDataEx(LPDATAOBJECT pSrcDataObj, const IID* riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD* rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink* lpAdviseSink, DWORD* rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID* ppvObj);
     * }
     */
    public static int OleCreateLinkFromDataEx(MemorySegment pSrcDataObj, MemorySegment riid, int dwFlags, int renderopt, int cFormats, MemorySegment rgAdvf, MemorySegment rgFormatEtc, MemorySegment lpAdviseSink, MemorySegment rgdwConnection, MemorySegment pClientSite, MemorySegment pStg, MemorySegment ppvObj) {
        var mh$ = OleCreateLinkFromDataEx$MH();
        try {
            return (int)mh$.invokeExact(pSrcDataObj, riid, dwFlags, renderopt, cFormats, rgAdvf, rgFormatEtc, lpAdviseSink, rgdwConnection, pClientSite, pStg, ppvObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleCreateStaticFromData$MH() {
        return RuntimeHelper.requireNonNull(constants$1232.OleCreateStaticFromData$MH,"OleCreateStaticFromData");
    }
    /**
     * {@snippet :
     * HRESULT OleCreateStaticFromData(LPDATAOBJECT pSrcDataObj, const IID* iid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID* ppvObj);
     * }
     */
    public static int OleCreateStaticFromData(MemorySegment pSrcDataObj, MemorySegment iid, int renderopt, MemorySegment pFormatEtc, MemorySegment pClientSite, MemorySegment pStg, MemorySegment ppvObj) {
        var mh$ = OleCreateStaticFromData$MH();
        try {
            return (int)mh$.invokeExact(pSrcDataObj, iid, renderopt, pFormatEtc, pClientSite, pStg, ppvObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleCreateLink$MH() {
        return RuntimeHelper.requireNonNull(constants$1232.OleCreateLink$MH,"OleCreateLink");
    }
    /**
     * {@snippet :
     * HRESULT OleCreateLink(LPMONIKER pmkLinkSrc, const IID* riid, DWORD renderopt, LPFORMATETC lpFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID* ppvObj);
     * }
     */
    public static int OleCreateLink(MemorySegment pmkLinkSrc, MemorySegment riid, int renderopt, MemorySegment lpFormatEtc, MemorySegment pClientSite, MemorySegment pStg, MemorySegment ppvObj) {
        var mh$ = OleCreateLink$MH();
        try {
            return (int)mh$.invokeExact(pmkLinkSrc, riid, renderopt, lpFormatEtc, pClientSite, pStg, ppvObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleCreateLinkEx$MH() {
        return RuntimeHelper.requireNonNull(constants$1232.OleCreateLinkEx$MH,"OleCreateLinkEx");
    }
    /**
     * {@snippet :
     * HRESULT OleCreateLinkEx(LPMONIKER pmkLinkSrc, const IID* riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD* rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink* lpAdviseSink, DWORD* rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID* ppvObj);
     * }
     */
    public static int OleCreateLinkEx(MemorySegment pmkLinkSrc, MemorySegment riid, int dwFlags, int renderopt, int cFormats, MemorySegment rgAdvf, MemorySegment rgFormatEtc, MemorySegment lpAdviseSink, MemorySegment rgdwConnection, MemorySegment pClientSite, MemorySegment pStg, MemorySegment ppvObj) {
        var mh$ = OleCreateLinkEx$MH();
        try {
            return (int)mh$.invokeExact(pmkLinkSrc, riid, dwFlags, renderopt, cFormats, rgAdvf, rgFormatEtc, lpAdviseSink, rgdwConnection, pClientSite, pStg, ppvObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleCreateLinkToFile$MH() {
        return RuntimeHelper.requireNonNull(constants$1233.OleCreateLinkToFile$MH,"OleCreateLinkToFile");
    }
    /**
     * {@snippet :
     * HRESULT OleCreateLinkToFile(LPCOLESTR lpszFileName, const IID* riid, DWORD renderopt, LPFORMATETC lpFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID* ppvObj);
     * }
     */
    public static int OleCreateLinkToFile(MemorySegment lpszFileName, MemorySegment riid, int renderopt, MemorySegment lpFormatEtc, MemorySegment pClientSite, MemorySegment pStg, MemorySegment ppvObj) {
        var mh$ = OleCreateLinkToFile$MH();
        try {
            return (int)mh$.invokeExact(lpszFileName, riid, renderopt, lpFormatEtc, pClientSite, pStg, ppvObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleCreateLinkToFileEx$MH() {
        return RuntimeHelper.requireNonNull(constants$1233.OleCreateLinkToFileEx$MH,"OleCreateLinkToFileEx");
    }
    /**
     * {@snippet :
     * HRESULT OleCreateLinkToFileEx(LPCOLESTR lpszFileName, const IID* riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD* rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink* lpAdviseSink, DWORD* rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID* ppvObj);
     * }
     */
    public static int OleCreateLinkToFileEx(MemorySegment lpszFileName, MemorySegment riid, int dwFlags, int renderopt, int cFormats, MemorySegment rgAdvf, MemorySegment rgFormatEtc, MemorySegment lpAdviseSink, MemorySegment rgdwConnection, MemorySegment pClientSite, MemorySegment pStg, MemorySegment ppvObj) {
        var mh$ = OleCreateLinkToFileEx$MH();
        try {
            return (int)mh$.invokeExact(lpszFileName, riid, dwFlags, renderopt, cFormats, rgAdvf, rgFormatEtc, lpAdviseSink, rgdwConnection, pClientSite, pStg, ppvObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleCreateFromFile$MH() {
        return RuntimeHelper.requireNonNull(constants$1233.OleCreateFromFile$MH,"OleCreateFromFile");
    }
    /**
     * {@snippet :
     * HRESULT OleCreateFromFile(const IID* rclsid, LPCOLESTR lpszFileName, const IID* riid, DWORD renderopt, LPFORMATETC lpFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID* ppvObj);
     * }
     */
    public static int OleCreateFromFile(MemorySegment rclsid, MemorySegment lpszFileName, MemorySegment riid, int renderopt, MemorySegment lpFormatEtc, MemorySegment pClientSite, MemorySegment pStg, MemorySegment ppvObj) {
        var mh$ = OleCreateFromFile$MH();
        try {
            return (int)mh$.invokeExact(rclsid, lpszFileName, riid, renderopt, lpFormatEtc, pClientSite, pStg, ppvObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleCreateFromFileEx$MH() {
        return RuntimeHelper.requireNonNull(constants$1233.OleCreateFromFileEx$MH,"OleCreateFromFileEx");
    }
    /**
     * {@snippet :
     * HRESULT OleCreateFromFileEx(const IID* rclsid, LPCOLESTR lpszFileName, const IID* riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD* rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink* lpAdviseSink, DWORD* rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID* ppvObj);
     * }
     */
    public static int OleCreateFromFileEx(MemorySegment rclsid, MemorySegment lpszFileName, MemorySegment riid, int dwFlags, int renderopt, int cFormats, MemorySegment rgAdvf, MemorySegment rgFormatEtc, MemorySegment lpAdviseSink, MemorySegment rgdwConnection, MemorySegment pClientSite, MemorySegment pStg, MemorySegment ppvObj) {
        var mh$ = OleCreateFromFileEx$MH();
        try {
            return (int)mh$.invokeExact(rclsid, lpszFileName, riid, dwFlags, renderopt, cFormats, rgAdvf, rgFormatEtc, lpAdviseSink, rgdwConnection, pClientSite, pStg, ppvObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleLoad$MH() {
        return RuntimeHelper.requireNonNull(constants$1233.OleLoad$MH,"OleLoad");
    }
    /**
     * {@snippet :
     * HRESULT OleLoad(LPSTORAGE pStg, const IID* riid, LPOLECLIENTSITE pClientSite, LPVOID* ppvObj);
     * }
     */
    public static int OleLoad(MemorySegment pStg, MemorySegment riid, MemorySegment pClientSite, MemorySegment ppvObj) {
        var mh$ = OleLoad$MH();
        try {
            return (int)mh$.invokeExact(pStg, riid, pClientSite, ppvObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleSave$MH() {
        return RuntimeHelper.requireNonNull(constants$1233.OleSave$MH,"OleSave");
    }
    /**
     * {@snippet :
     * HRESULT OleSave(LPPERSISTSTORAGE pPS, LPSTORAGE pStg, BOOL fSameAsLoad);
     * }
     */
    public static int OleSave(MemorySegment pPS, MemorySegment pStg, int fSameAsLoad) {
        var mh$ = OleSave$MH();
        try {
            return (int)mh$.invokeExact(pPS, pStg, fSameAsLoad);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleLoadFromStream$MH() {
        return RuntimeHelper.requireNonNull(constants$1234.OleLoadFromStream$MH,"OleLoadFromStream");
    }
    /**
     * {@snippet :
     * HRESULT OleLoadFromStream(LPSTREAM pStm, const IID* iidInterface, LPVOID* ppvObj);
     * }
     */
    public static int OleLoadFromStream(MemorySegment pStm, MemorySegment iidInterface, MemorySegment ppvObj) {
        var mh$ = OleLoadFromStream$MH();
        try {
            return (int)mh$.invokeExact(pStm, iidInterface, ppvObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleSaveToStream$MH() {
        return RuntimeHelper.requireNonNull(constants$1234.OleSaveToStream$MH,"OleSaveToStream");
    }
    /**
     * {@snippet :
     * HRESULT OleSaveToStream(LPPERSISTSTREAM pPStm, LPSTREAM pStm);
     * }
     */
    public static int OleSaveToStream(MemorySegment pPStm, MemorySegment pStm) {
        var mh$ = OleSaveToStream$MH();
        try {
            return (int)mh$.invokeExact(pPStm, pStm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleSetContainedObject$MH() {
        return RuntimeHelper.requireNonNull(constants$1234.OleSetContainedObject$MH,"OleSetContainedObject");
    }
    /**
     * {@snippet :
     * HRESULT OleSetContainedObject(LPUNKNOWN pUnknown, BOOL fContained);
     * }
     */
    public static int OleSetContainedObject(MemorySegment pUnknown, int fContained) {
        var mh$ = OleSetContainedObject$MH();
        try {
            return (int)mh$.invokeExact(pUnknown, fContained);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleNoteObjectVisible$MH() {
        return RuntimeHelper.requireNonNull(constants$1234.OleNoteObjectVisible$MH,"OleNoteObjectVisible");
    }
    /**
     * {@snippet :
     * HRESULT OleNoteObjectVisible(LPUNKNOWN pUnknown, BOOL fVisible);
     * }
     */
    public static int OleNoteObjectVisible(MemorySegment pUnknown, int fVisible) {
        var mh$ = OleNoteObjectVisible$MH();
        try {
            return (int)mh$.invokeExact(pUnknown, fVisible);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterDragDrop$MH() {
        return RuntimeHelper.requireNonNull(constants$1234.RegisterDragDrop$MH,"RegisterDragDrop");
    }
    /**
     * {@snippet :
     * HRESULT RegisterDragDrop(HWND hwnd, LPDROPTARGET pDropTarget);
     * }
     */
    public static int RegisterDragDrop(MemorySegment hwnd, MemorySegment pDropTarget) {
        var mh$ = RegisterDragDrop$MH();
        try {
            return (int)mh$.invokeExact(hwnd, pDropTarget);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RevokeDragDrop$MH() {
        return RuntimeHelper.requireNonNull(constants$1234.RevokeDragDrop$MH,"RevokeDragDrop");
    }
    /**
     * {@snippet :
     * HRESULT RevokeDragDrop(HWND hwnd);
     * }
     */
    public static int RevokeDragDrop(MemorySegment hwnd) {
        var mh$ = RevokeDragDrop$MH();
        try {
            return (int)mh$.invokeExact(hwnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DoDragDrop$MH() {
        return RuntimeHelper.requireNonNull(constants$1235.DoDragDrop$MH,"DoDragDrop");
    }
    /**
     * {@snippet :
     * HRESULT DoDragDrop(LPDATAOBJECT pDataObj, LPDROPSOURCE pDropSource, DWORD dwOKEffects, LPDWORD pdwEffect);
     * }
     */
    public static int DoDragDrop(MemorySegment pDataObj, MemorySegment pDropSource, int dwOKEffects, MemorySegment pdwEffect) {
        var mh$ = DoDragDrop$MH();
        try {
            return (int)mh$.invokeExact(pDataObj, pDropSource, dwOKEffects, pdwEffect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleSetClipboard$MH() {
        return RuntimeHelper.requireNonNull(constants$1235.OleSetClipboard$MH,"OleSetClipboard");
    }
    /**
     * {@snippet :
     * HRESULT OleSetClipboard(LPDATAOBJECT pDataObj);
     * }
     */
    public static int OleSetClipboard(MemorySegment pDataObj) {
        var mh$ = OleSetClipboard$MH();
        try {
            return (int)mh$.invokeExact(pDataObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleGetClipboard$MH() {
        return RuntimeHelper.requireNonNull(constants$1235.OleGetClipboard$MH,"OleGetClipboard");
    }
    /**
     * {@snippet :
     * HRESULT OleGetClipboard(LPDATAOBJECT* ppDataObj);
     * }
     */
    public static int OleGetClipboard(MemorySegment ppDataObj) {
        var mh$ = OleGetClipboard$MH();
        try {
            return (int)mh$.invokeExact(ppDataObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleGetClipboardWithEnterpriseInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$1235.OleGetClipboardWithEnterpriseInfo$MH,"OleGetClipboardWithEnterpriseInfo");
    }
    /**
     * {@snippet :
     * HRESULT OleGetClipboardWithEnterpriseInfo(IDataObject** dataObject, PWSTR* dataEnterpriseId, PWSTR* sourceDescription, PWSTR* targetDescription, PWSTR* dataDescription);
     * }
     */
    public static int OleGetClipboardWithEnterpriseInfo(MemorySegment dataObject, MemorySegment dataEnterpriseId, MemorySegment sourceDescription, MemorySegment targetDescription, MemorySegment dataDescription) {
        var mh$ = OleGetClipboardWithEnterpriseInfo$MH();
        try {
            return (int)mh$.invokeExact(dataObject, dataEnterpriseId, sourceDescription, targetDescription, dataDescription);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleFlushClipboard$MH() {
        return RuntimeHelper.requireNonNull(constants$1235.OleFlushClipboard$MH,"OleFlushClipboard");
    }
    /**
     * {@snippet :
     * HRESULT OleFlushClipboard();
     * }
     */
    public static int OleFlushClipboard() {
        var mh$ = OleFlushClipboard$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleIsCurrentClipboard$MH() {
        return RuntimeHelper.requireNonNull(constants$1235.OleIsCurrentClipboard$MH,"OleIsCurrentClipboard");
    }
    /**
     * {@snippet :
     * HRESULT OleIsCurrentClipboard(LPDATAOBJECT pDataObj);
     * }
     */
    public static int OleIsCurrentClipboard(MemorySegment pDataObj) {
        var mh$ = OleIsCurrentClipboard$MH();
        try {
            return (int)mh$.invokeExact(pDataObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleCreateMenuDescriptor$MH() {
        return RuntimeHelper.requireNonNull(constants$1236.OleCreateMenuDescriptor$MH,"OleCreateMenuDescriptor");
    }
    /**
     * {@snippet :
     * HOLEMENU OleCreateMenuDescriptor(HMENU hmenuCombined, LPOLEMENUGROUPWIDTHS lpMenuWidths);
     * }
     */
    public static MemorySegment OleCreateMenuDescriptor(MemorySegment hmenuCombined, MemorySegment lpMenuWidths) {
        var mh$ = OleCreateMenuDescriptor$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hmenuCombined, lpMenuWidths);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleSetMenuDescriptor$MH() {
        return RuntimeHelper.requireNonNull(constants$1236.OleSetMenuDescriptor$MH,"OleSetMenuDescriptor");
    }
    /**
     * {@snippet :
     * HRESULT OleSetMenuDescriptor(HOLEMENU holemenu, HWND hwndFrame, HWND hwndActiveObject, LPOLEINPLACEFRAME lpFrame, LPOLEINPLACEACTIVEOBJECT lpActiveObj);
     * }
     */
    public static int OleSetMenuDescriptor(MemorySegment holemenu, MemorySegment hwndFrame, MemorySegment hwndActiveObject, MemorySegment lpFrame, MemorySegment lpActiveObj) {
        var mh$ = OleSetMenuDescriptor$MH();
        try {
            return (int)mh$.invokeExact(holemenu, hwndFrame, hwndActiveObject, lpFrame, lpActiveObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleDestroyMenuDescriptor$MH() {
        return RuntimeHelper.requireNonNull(constants$1236.OleDestroyMenuDescriptor$MH,"OleDestroyMenuDescriptor");
    }
    /**
     * {@snippet :
     * HRESULT OleDestroyMenuDescriptor(HOLEMENU holemenu);
     * }
     */
    public static int OleDestroyMenuDescriptor(MemorySegment holemenu) {
        var mh$ = OleDestroyMenuDescriptor$MH();
        try {
            return (int)mh$.invokeExact(holemenu);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleTranslateAccelerator$MH() {
        return RuntimeHelper.requireNonNull(constants$1236.OleTranslateAccelerator$MH,"OleTranslateAccelerator");
    }
    /**
     * {@snippet :
     * HRESULT OleTranslateAccelerator(LPOLEINPLACEFRAME lpFrame, LPOLEINPLACEFRAMEINFO lpFrameInfo, LPMSG lpmsg);
     * }
     */
    public static int OleTranslateAccelerator(MemorySegment lpFrame, MemorySegment lpFrameInfo, MemorySegment lpmsg) {
        var mh$ = OleTranslateAccelerator$MH();
        try {
            return (int)mh$.invokeExact(lpFrame, lpFrameInfo, lpmsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleDuplicateData$MH() {
        return RuntimeHelper.requireNonNull(constants$1236.OleDuplicateData$MH,"OleDuplicateData");
    }
    /**
     * {@snippet :
     * HANDLE OleDuplicateData(HANDLE hSrc, CLIPFORMAT cfFormat, UINT uiFlags);
     * }
     */
    public static MemorySegment OleDuplicateData(MemorySegment hSrc, short cfFormat, int uiFlags) {
        var mh$ = OleDuplicateData$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hSrc, cfFormat, uiFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleDraw$MH() {
        return RuntimeHelper.requireNonNull(constants$1236.OleDraw$MH,"OleDraw");
    }
    /**
     * {@snippet :
     * HRESULT OleDraw(LPUNKNOWN pUnknown, DWORD dwAspect, HDC hdcDraw, LPCRECT lprcBounds);
     * }
     */
    public static int OleDraw(MemorySegment pUnknown, int dwAspect, MemorySegment hdcDraw, MemorySegment lprcBounds) {
        var mh$ = OleDraw$MH();
        try {
            return (int)mh$.invokeExact(pUnknown, dwAspect, hdcDraw, lprcBounds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleRun$MH() {
        return RuntimeHelper.requireNonNull(constants$1237.OleRun$MH,"OleRun");
    }
    /**
     * {@snippet :
     * HRESULT OleRun(LPUNKNOWN pUnknown);
     * }
     */
    public static int OleRun(MemorySegment pUnknown) {
        var mh$ = OleRun$MH();
        try {
            return (int)mh$.invokeExact(pUnknown);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleIsRunning$MH() {
        return RuntimeHelper.requireNonNull(constants$1237.OleIsRunning$MH,"OleIsRunning");
    }
    /**
     * {@snippet :
     * BOOL OleIsRunning(LPOLEOBJECT pObject);
     * }
     */
    public static int OleIsRunning(MemorySegment pObject) {
        var mh$ = OleIsRunning$MH();
        try {
            return (int)mh$.invokeExact(pObject);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleLockRunning$MH() {
        return RuntimeHelper.requireNonNull(constants$1237.OleLockRunning$MH,"OleLockRunning");
    }
    /**
     * {@snippet :
     * HRESULT OleLockRunning(LPUNKNOWN pUnknown, BOOL fLock, BOOL fLastUnlockCloses);
     * }
     */
    public static int OleLockRunning(MemorySegment pUnknown, int fLock, int fLastUnlockCloses) {
        var mh$ = OleLockRunning$MH();
        try {
            return (int)mh$.invokeExact(pUnknown, fLock, fLastUnlockCloses);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReleaseStgMedium$MH() {
        return RuntimeHelper.requireNonNull(constants$1237.ReleaseStgMedium$MH,"ReleaseStgMedium");
    }
    /**
     * {@snippet :
     * void ReleaseStgMedium(LPSTGMEDIUM);
     * }
     */
    public static void ReleaseStgMedium(MemorySegment x0) {
        var mh$ = ReleaseStgMedium$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateOleAdviseHolder$MH() {
        return RuntimeHelper.requireNonNull(constants$1237.CreateOleAdviseHolder$MH,"CreateOleAdviseHolder");
    }
    /**
     * {@snippet :
     * HRESULT CreateOleAdviseHolder(LPOLEADVISEHOLDER* ppOAHolder);
     * }
     */
    public static int CreateOleAdviseHolder(MemorySegment ppOAHolder) {
        var mh$ = CreateOleAdviseHolder$MH();
        try {
            return (int)mh$.invokeExact(ppOAHolder);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleCreateDefaultHandler$MH() {
        return RuntimeHelper.requireNonNull(constants$1237.OleCreateDefaultHandler$MH,"OleCreateDefaultHandler");
    }
    /**
     * {@snippet :
     * HRESULT OleCreateDefaultHandler(const IID* clsid, LPUNKNOWN pUnkOuter, const IID* riid, LPVOID* lplpObj);
     * }
     */
    public static int OleCreateDefaultHandler(MemorySegment clsid, MemorySegment pUnkOuter, MemorySegment riid, MemorySegment lplpObj) {
        var mh$ = OleCreateDefaultHandler$MH();
        try {
            return (int)mh$.invokeExact(clsid, pUnkOuter, riid, lplpObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleCreateEmbeddingHelper$MH() {
        return RuntimeHelper.requireNonNull(constants$1238.OleCreateEmbeddingHelper$MH,"OleCreateEmbeddingHelper");
    }
    /**
     * {@snippet :
     * HRESULT OleCreateEmbeddingHelper(const IID* clsid, LPUNKNOWN pUnkOuter, DWORD flags, LPCLASSFACTORY pCF, const IID* riid, LPVOID* lplpObj);
     * }
     */
    public static int OleCreateEmbeddingHelper(MemorySegment clsid, MemorySegment pUnkOuter, int flags, MemorySegment pCF, MemorySegment riid, MemorySegment lplpObj) {
        var mh$ = OleCreateEmbeddingHelper$MH();
        try {
            return (int)mh$.invokeExact(clsid, pUnkOuter, flags, pCF, riid, lplpObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsAccelerator$MH() {
        return RuntimeHelper.requireNonNull(constants$1238.IsAccelerator$MH,"IsAccelerator");
    }
    /**
     * {@snippet :
     * BOOL IsAccelerator(HACCEL hAccel, int cAccelEntries, LPMSG lpMsg, WORD* lpwCmd);
     * }
     */
    public static int IsAccelerator(MemorySegment hAccel, int cAccelEntries, MemorySegment lpMsg, MemorySegment lpwCmd) {
        var mh$ = IsAccelerator$MH();
        try {
            return (int)mh$.invokeExact(hAccel, cAccelEntries, lpMsg, lpwCmd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleGetIconOfFile$MH() {
        return RuntimeHelper.requireNonNull(constants$1238.OleGetIconOfFile$MH,"OleGetIconOfFile");
    }
    /**
     * {@snippet :
     * HGLOBAL OleGetIconOfFile(LPOLESTR lpszPath, BOOL fUseFileAsLabel);
     * }
     */
    public static MemorySegment OleGetIconOfFile(MemorySegment lpszPath, int fUseFileAsLabel) {
        var mh$ = OleGetIconOfFile$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpszPath, fUseFileAsLabel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleGetIconOfClass$MH() {
        return RuntimeHelper.requireNonNull(constants$1238.OleGetIconOfClass$MH,"OleGetIconOfClass");
    }
    /**
     * {@snippet :
     * HGLOBAL OleGetIconOfClass(const IID* rclsid, LPOLESTR lpszLabel, BOOL fUseTypeAsLabel);
     * }
     */
    public static MemorySegment OleGetIconOfClass(MemorySegment rclsid, MemorySegment lpszLabel, int fUseTypeAsLabel) {
        var mh$ = OleGetIconOfClass$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(rclsid, lpszLabel, fUseTypeAsLabel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleMetafilePictFromIconAndLabel$MH() {
        return RuntimeHelper.requireNonNull(constants$1238.OleMetafilePictFromIconAndLabel$MH,"OleMetafilePictFromIconAndLabel");
    }
    /**
     * {@snippet :
     * HGLOBAL OleMetafilePictFromIconAndLabel(HICON hIcon, LPOLESTR lpszLabel, LPOLESTR lpszSourceFile, UINT iIconIndex);
     * }
     */
    public static MemorySegment OleMetafilePictFromIconAndLabel(MemorySegment hIcon, MemorySegment lpszLabel, MemorySegment lpszSourceFile, int iIconIndex) {
        var mh$ = OleMetafilePictFromIconAndLabel$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hIcon, lpszLabel, lpszSourceFile, iIconIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleRegGetUserType$MH() {
        return RuntimeHelper.requireNonNull(constants$1238.OleRegGetUserType$MH,"OleRegGetUserType");
    }
    /**
     * {@snippet :
     * HRESULT OleRegGetUserType(const IID* clsid, DWORD dwFormOfType, LPOLESTR* pszUserType);
     * }
     */
    public static int OleRegGetUserType(MemorySegment clsid, int dwFormOfType, MemorySegment pszUserType) {
        var mh$ = OleRegGetUserType$MH();
        try {
            return (int)mh$.invokeExact(clsid, dwFormOfType, pszUserType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleRegGetMiscStatus$MH() {
        return RuntimeHelper.requireNonNull(constants$1239.OleRegGetMiscStatus$MH,"OleRegGetMiscStatus");
    }
    /**
     * {@snippet :
     * HRESULT OleRegGetMiscStatus(const IID* clsid, DWORD dwAspect, DWORD* pdwStatus);
     * }
     */
    public static int OleRegGetMiscStatus(MemorySegment clsid, int dwAspect, MemorySegment pdwStatus) {
        var mh$ = OleRegGetMiscStatus$MH();
        try {
            return (int)mh$.invokeExact(clsid, dwAspect, pdwStatus);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleRegEnumFormatEtc$MH() {
        return RuntimeHelper.requireNonNull(constants$1239.OleRegEnumFormatEtc$MH,"OleRegEnumFormatEtc");
    }
    /**
     * {@snippet :
     * HRESULT OleRegEnumFormatEtc(const IID* clsid, DWORD dwDirection, LPENUMFORMATETC* ppenum);
     * }
     */
    public static int OleRegEnumFormatEtc(MemorySegment clsid, int dwDirection, MemorySegment ppenum) {
        var mh$ = OleRegEnumFormatEtc$MH();
        try {
            return (int)mh$.invokeExact(clsid, dwDirection, ppenum);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleRegEnumVerbs$MH() {
        return RuntimeHelper.requireNonNull(constants$1239.OleRegEnumVerbs$MH,"OleRegEnumVerbs");
    }
    /**
     * {@snippet :
     * HRESULT OleRegEnumVerbs(const IID* clsid, LPENUMOLEVERB* ppenum);
     * }
     */
    public static int OleRegEnumVerbs(MemorySegment clsid, MemorySegment ppenum) {
        var mh$ = OleRegEnumVerbs$MH();
        try {
            return (int)mh$.invokeExact(clsid, ppenum);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _OLESTREAM* LPOLESTREAM;
     * }
     */
    public static final OfAddress LPOLESTREAM = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _OLESTREAMVTBL* LPOLESTREAMVTBL;
     * }
     */
    public static final OfAddress LPOLESTREAMVTBL = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle OleConvertOLESTREAMToIStorage$MH() {
        return RuntimeHelper.requireNonNull(constants$1239.OleConvertOLESTREAMToIStorage$MH,"OleConvertOLESTREAMToIStorage");
    }
    /**
     * {@snippet :
     * HRESULT OleConvertOLESTREAMToIStorage(LPOLESTREAM lpolestream, LPSTORAGE pstg, const DVTARGETDEVICE* ptd);
     * }
     */
    public static int OleConvertOLESTREAMToIStorage(MemorySegment lpolestream, MemorySegment pstg, MemorySegment ptd) {
        var mh$ = OleConvertOLESTREAMToIStorage$MH();
        try {
            return (int)mh$.invokeExact(lpolestream, pstg, ptd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleConvertIStorageToOLESTREAM$MH() {
        return RuntimeHelper.requireNonNull(constants$1239.OleConvertIStorageToOLESTREAM$MH,"OleConvertIStorageToOLESTREAM");
    }
    /**
     * {@snippet :
     * HRESULT OleConvertIStorageToOLESTREAM(LPSTORAGE pstg, LPOLESTREAM lpolestream);
     * }
     */
    public static int OleConvertIStorageToOLESTREAM(MemorySegment pstg, MemorySegment lpolestream) {
        var mh$ = OleConvertIStorageToOLESTREAM$MH();
        try {
            return (int)mh$.invokeExact(pstg, lpolestream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleDoAutoConvert$MH() {
        return RuntimeHelper.requireNonNull(constants$1239.OleDoAutoConvert$MH,"OleDoAutoConvert");
    }
    /**
     * {@snippet :
     * HRESULT OleDoAutoConvert(LPSTORAGE pStg, LPCLSID pClsidNew);
     * }
     */
    public static int OleDoAutoConvert(MemorySegment pStg, MemorySegment pClsidNew) {
        var mh$ = OleDoAutoConvert$MH();
        try {
            return (int)mh$.invokeExact(pStg, pClsidNew);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleGetAutoConvert$MH() {
        return RuntimeHelper.requireNonNull(constants$1240.OleGetAutoConvert$MH,"OleGetAutoConvert");
    }
    /**
     * {@snippet :
     * HRESULT OleGetAutoConvert(const IID* clsidOld, LPCLSID pClsidNew);
     * }
     */
    public static int OleGetAutoConvert(MemorySegment clsidOld, MemorySegment pClsidNew) {
        var mh$ = OleGetAutoConvert$MH();
        try {
            return (int)mh$.invokeExact(clsidOld, pClsidNew);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleSetAutoConvert$MH() {
        return RuntimeHelper.requireNonNull(constants$1240.OleSetAutoConvert$MH,"OleSetAutoConvert");
    }
    /**
     * {@snippet :
     * HRESULT OleSetAutoConvert(const IID* clsidOld, const IID* clsidNew);
     * }
     */
    public static int OleSetAutoConvert(MemorySegment clsidOld, MemorySegment clsidNew) {
        var mh$ = OleSetAutoConvert$MH();
        try {
            return (int)mh$.invokeExact(clsidOld, clsidNew);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetConvertStg$MH() {
        return RuntimeHelper.requireNonNull(constants$1240.SetConvertStg$MH,"SetConvertStg");
    }
    /**
     * {@snippet :
     * HRESULT SetConvertStg(LPSTORAGE pStg, BOOL fConvert);
     * }
     */
    public static int SetConvertStg(MemorySegment pStg, int fConvert) {
        var mh$ = SetConvertStg$MH();
        try {
            return (int)mh$.invokeExact(pStg, fConvert);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleConvertIStorageToOLESTREAMEx$MH() {
        return RuntimeHelper.requireNonNull(constants$1240.OleConvertIStorageToOLESTREAMEx$MH,"OleConvertIStorageToOLESTREAMEx");
    }
    /**
     * {@snippet :
     * HRESULT OleConvertIStorageToOLESTREAMEx(LPSTORAGE pstg, CLIPFORMAT cfFormat, LONG lWidth, LONG lHeight, DWORD dwSize, LPSTGMEDIUM pmedium, LPOLESTREAM polestm);
     * }
     */
    public static int OleConvertIStorageToOLESTREAMEx(MemorySegment pstg, short cfFormat, int lWidth, int lHeight, int dwSize, MemorySegment pmedium, MemorySegment polestm) {
        var mh$ = OleConvertIStorageToOLESTREAMEx$MH();
        try {
            return (int)mh$.invokeExact(pstg, cfFormat, lWidth, lHeight, dwSize, pmedium, polestm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OleConvertOLESTREAMToIStorageEx$MH() {
        return RuntimeHelper.requireNonNull(constants$1240.OleConvertOLESTREAMToIStorageEx$MH,"OleConvertOLESTREAMToIStorageEx");
    }
    /**
     * {@snippet :
     * HRESULT OleConvertOLESTREAMToIStorageEx(LPOLESTREAM polestm, LPSTORAGE pstg, CLIPFORMAT* pcfFormat, LONG* plwWidth, LONG* plHeight, DWORD* pdwSize, LPSTGMEDIUM pmedium);
     * }
     */
    public static int OleConvertOLESTREAMToIStorageEx(MemorySegment polestm, MemorySegment pstg, MemorySegment pcfFormat, MemorySegment plwWidth, MemorySegment plHeight, MemorySegment pdwSize, MemorySegment pmedium) {
        var mh$ = OleConvertOLESTREAMToIStorageEx$MH();
        try {
            return (int)mh$.invokeExact(polestm, pstg, pcfFormat, plwWidth, plHeight, pdwSize, pmedium);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * const GUID IID_IPrintDialogCallback;
     * }
     */
    public static MemorySegment IID_IPrintDialogCallback$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1240.IID_IPrintDialogCallback$SEGMENT,"IID_IPrintDialogCallback");
    }
    /**
     * {@snippet :
     * const GUID IID_IPrintDialogServices;
     * }
     */
    public static MemorySegment IID_IPrintDialogServices$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1241.IID_IPrintDialogServices$SEGMENT,"IID_IPrintDialogServices");
    }
    /**
     * {@snippet :
     * typedef struct tagOFN_NT4A* LPOPENFILENAME_NT4A;
     * }
     */
    public static final OfAddress LPOPENFILENAME_NT4A = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagOFN_NT4W* LPOPENFILENAME_NT4W;
     * }
     */
    public static final OfAddress LPOPENFILENAME_NT4W = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagOFN_NT4A* LPOPENFILENAME_NT4;
     * }
     */
    public static final OfAddress LPOPENFILENAME_NT4 = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagOFNA* LPOPENFILENAMEA;
     * }
     */
    public static final OfAddress LPOPENFILENAMEA = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagOFNW* LPOPENFILENAMEW;
     * }
     */
    public static final OfAddress LPOPENFILENAMEW = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagOFNA* LPOPENFILENAME;
     * }
     */
    public static final OfAddress LPOPENFILENAME = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetOpenFileNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$1241.GetOpenFileNameA$MH,"GetOpenFileNameA");
    }
    /**
     * {@snippet :
     * BOOL GetOpenFileNameA(LPOPENFILENAMEA);
     * }
     */
    public static int GetOpenFileNameA(MemorySegment x0) {
        var mh$ = GetOpenFileNameA$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetOpenFileNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$1241.GetOpenFileNameW$MH,"GetOpenFileNameW");
    }
    /**
     * {@snippet :
     * BOOL GetOpenFileNameW(LPOPENFILENAMEW);
     * }
     */
    public static int GetOpenFileNameW(MemorySegment x0) {
        var mh$ = GetOpenFileNameW$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSaveFileNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$1241.GetSaveFileNameA$MH,"GetSaveFileNameA");
    }
    /**
     * {@snippet :
     * BOOL GetSaveFileNameA(LPOPENFILENAMEA);
     * }
     */
    public static int GetSaveFileNameA(MemorySegment x0) {
        var mh$ = GetSaveFileNameA$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSaveFileNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$1242.GetSaveFileNameW$MH,"GetSaveFileNameW");
    }
    /**
     * {@snippet :
     * BOOL GetSaveFileNameW(LPOPENFILENAMEW);
     * }
     */
    public static int GetSaveFileNameW(MemorySegment x0) {
        var mh$ = GetSaveFileNameW$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileTitleA$MH() {
        return RuntimeHelper.requireNonNull(constants$1242.GetFileTitleA$MH,"GetFileTitleA");
    }
    /**
     * {@snippet :
     * short GetFileTitleA(LPCSTR, LPSTR Buf, WORD cchSize);
     * }
     */
    public static short GetFileTitleA(MemorySegment x0, MemorySegment Buf, short cchSize) {
        var mh$ = GetFileTitleA$MH();
        try {
            return (short)mh$.invokeExact(x0, Buf, cchSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileTitleW$MH() {
        return RuntimeHelper.requireNonNull(constants$1242.GetFileTitleW$MH,"GetFileTitleW");
    }
    /**
     * {@snippet :
     * short GetFileTitleW(LPCWSTR, LPWSTR Buf, WORD cchSize);
     * }
     */
    public static short GetFileTitleW(MemorySegment x0, MemorySegment Buf, short cchSize) {
        var mh$ = GetFileTitleW$MH();
        try {
            return (short)mh$.invokeExact(x0, Buf, cchSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _OFNOTIFYA* LPOFNOTIFYA;
     * }
     */
    public static final OfAddress LPOFNOTIFYA = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _OFNOTIFYW* LPOFNOTIFYW;
     * }
     */
    public static final OfAddress LPOFNOTIFYW = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _OFNOTIFYA* LPOFNOTIFY;
     * }
     */
    public static final OfAddress LPOFNOTIFY = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _OFNOTIFYEXA* LPOFNOTIFYEXA;
     * }
     */
    public static final OfAddress LPOFNOTIFYEXA = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _OFNOTIFYEXW* LPOFNOTIFYEXW;
     * }
     */
    public static final OfAddress LPOFNOTIFYEXW = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _OFNOTIFYEXA* LPOFNOTIFYEX;
     * }
     */
    public static final OfAddress LPOFNOTIFYEX = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagCHOOSECOLORA* LPCHOOSECOLORA;
     * }
     */
    public static final OfAddress LPCHOOSECOLORA = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagCHOOSECOLORW* LPCHOOSECOLORW;
     * }
     */
    public static final OfAddress LPCHOOSECOLORW = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagCHOOSECOLORA* LPCHOOSECOLOR;
     * }
     */
    public static final OfAddress LPCHOOSECOLOR = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle ChooseColorA$MH() {
        return RuntimeHelper.requireNonNull(constants$1242.ChooseColorA$MH,"ChooseColorA");
    }
    /**
     * {@snippet :
     * BOOL ChooseColorA(LPCHOOSECOLORA);
     * }
     */
    public static int ChooseColorA(MemorySegment x0) {
        var mh$ = ChooseColorA$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ChooseColorW$MH() {
        return RuntimeHelper.requireNonNull(constants$1243.ChooseColorW$MH,"ChooseColorW");
    }
    /**
     * {@snippet :
     * BOOL ChooseColorW(LPCHOOSECOLORW);
     * }
     */
    public static int ChooseColorW(MemorySegment x0) {
        var mh$ = ChooseColorW$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct tagFINDREPLACEA* LPFINDREPLACEA;
     * }
     */
    public static final OfAddress LPFINDREPLACEA = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagFINDREPLACEW* LPFINDREPLACEW;
     * }
     */
    public static final OfAddress LPFINDREPLACEW = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagFINDREPLACEA* LPFINDREPLACE;
     * }
     */
    public static final OfAddress LPFINDREPLACE = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle FindTextA$MH() {
        return RuntimeHelper.requireNonNull(constants$1243.FindTextA$MH,"FindTextA");
    }
    /**
     * {@snippet :
     * HWND FindTextA(LPFINDREPLACEA);
     * }
     */
    public static MemorySegment FindTextA(MemorySegment x0) {
        var mh$ = FindTextA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindTextW$MH() {
        return RuntimeHelper.requireNonNull(constants$1243.FindTextW$MH,"FindTextW");
    }
    /**
     * {@snippet :
     * HWND FindTextW(LPFINDREPLACEW);
     * }
     */
    public static MemorySegment FindTextW(MemorySegment x0) {
        var mh$ = FindTextW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReplaceTextA$MH() {
        return RuntimeHelper.requireNonNull(constants$1243.ReplaceTextA$MH,"ReplaceTextA");
    }
    /**
     * {@snippet :
     * HWND ReplaceTextA(LPFINDREPLACEA);
     * }
     */
    public static MemorySegment ReplaceTextA(MemorySegment x0) {
        var mh$ = ReplaceTextA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReplaceTextW$MH() {
        return RuntimeHelper.requireNonNull(constants$1244.ReplaceTextW$MH,"ReplaceTextW");
    }
    /**
     * {@snippet :
     * HWND ReplaceTextW(LPFINDREPLACEW);
     * }
     */
    public static MemorySegment ReplaceTextW(MemorySegment x0) {
        var mh$ = ReplaceTextW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct tagCHOOSEFONTA* LPCHOOSEFONTA;
     * }
     */
    public static final OfAddress LPCHOOSEFONTA = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagCHOOSEFONTW* LPCHOOSEFONTW;
     * }
     */
    public static final OfAddress LPCHOOSEFONTW = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagCHOOSEFONTA* LPCHOOSEFONT;
     * }
     */
    public static final OfAddress LPCHOOSEFONT = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagCHOOSEFONTA* PCCHOOSEFONTA;
     * }
     */
    public static final OfAddress PCCHOOSEFONTA = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagCHOOSEFONTW* PCCHOOSEFONTW;
     * }
     */
    public static final OfAddress PCCHOOSEFONTW = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagCHOOSEFONTA* PCCHOOSEFONT;
     * }
     */
    public static final OfAddress PCCHOOSEFONT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle ChooseFontA$MH() {
        return RuntimeHelper.requireNonNull(constants$1244.ChooseFontA$MH,"ChooseFontA");
    }
    /**
     * {@snippet :
     * BOOL ChooseFontA(LPCHOOSEFONTA);
     * }
     */
    public static int ChooseFontA(MemorySegment x0) {
        var mh$ = ChooseFontA$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ChooseFontW$MH() {
        return RuntimeHelper.requireNonNull(constants$1244.ChooseFontW$MH,"ChooseFontW");
    }
    /**
     * {@snippet :
     * BOOL ChooseFontW(LPCHOOSEFONTW);
     * }
     */
    public static int ChooseFontW(MemorySegment x0) {
        var mh$ = ChooseFontW$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct tagPDA* LPPRINTDLGA;
     * }
     */
    public static final OfAddress LPPRINTDLGA = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagPDW* LPPRINTDLGW;
     * }
     */
    public static final OfAddress LPPRINTDLGW = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagPDA* LPPRINTDLG;
     * }
     */
    public static final OfAddress LPPRINTDLG = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle PrintDlgA$MH() {
        return RuntimeHelper.requireNonNull(constants$1245.PrintDlgA$MH,"PrintDlgA");
    }
    /**
     * {@snippet :
     * BOOL PrintDlgA(LPPRINTDLGA pPD);
     * }
     */
    public static int PrintDlgA(MemorySegment pPD) {
        var mh$ = PrintDlgA$MH();
        try {
            return (int)mh$.invokeExact(pPD);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PrintDlgW$MH() {
        return RuntimeHelper.requireNonNull(constants$1245.PrintDlgW$MH,"PrintDlgW");
    }
    /**
     * {@snippet :
     * BOOL PrintDlgW(LPPRINTDLGW pPD);
     * }
     */
    public static int PrintDlgW(MemorySegment pPD) {
        var mh$ = PrintDlgW$MH();
        try {
            return (int)mh$.invokeExact(pPD);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct tagPRINTPAGERANGE* LPPRINTPAGERANGE;
     * }
     */
    public static final OfAddress LPPRINTPAGERANGE = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagPRINTPAGERANGE* PCPRINTPAGERANGE;
     * }
     */
    public static final OfAddress PCPRINTPAGERANGE = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagPDEXA* LPPRINTDLGEXA;
     * }
     */
    public static final OfAddress LPPRINTDLGEXA = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagPDEXW* LPPRINTDLGEXW;
     * }
     */
    public static final OfAddress LPPRINTDLGEXW = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagPDEXA* LPPRINTDLGEX;
     * }
     */
    public static final OfAddress LPPRINTDLGEX = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle PrintDlgExA$MH() {
        return RuntimeHelper.requireNonNull(constants$1245.PrintDlgExA$MH,"PrintDlgExA");
    }
    /**
     * {@snippet :
     * HRESULT PrintDlgExA(LPPRINTDLGEXA pPD);
     * }
     */
    public static int PrintDlgExA(MemorySegment pPD) {
        var mh$ = PrintDlgExA$MH();
        try {
            return (int)mh$.invokeExact(pPD);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PrintDlgExW$MH() {
        return RuntimeHelper.requireNonNull(constants$1246.PrintDlgExW$MH,"PrintDlgExW");
    }
    /**
     * {@snippet :
     * HRESULT PrintDlgExW(LPPRINTDLGEXW pPD);
     * }
     */
    public static int PrintDlgExW(MemorySegment pPD) {
        var mh$ = PrintDlgExW$MH();
        try {
            return (int)mh$.invokeExact(pPD);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct tagDEVNAMES* LPDEVNAMES;
     * }
     */
    public static final OfAddress LPDEVNAMES = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagDEVNAMES* PCDEVNAMES;
     * }
     */
    public static final OfAddress PCDEVNAMES = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CommDlgExtendedError$MH() {
        return RuntimeHelper.requireNonNull(constants$1246.CommDlgExtendedError$MH,"CommDlgExtendedError");
    }
    /**
     * {@snippet :
     * DWORD CommDlgExtendedError();
     * }
     */
    public static int CommDlgExtendedError() {
        var mh$ = CommDlgExtendedError$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct tagPSDA* LPPAGESETUPDLGA;
     * }
     */
    public static final OfAddress LPPAGESETUPDLGA = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagPSDW* LPPAGESETUPDLGW;
     * }
     */
    public static final OfAddress LPPAGESETUPDLGW = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagPSDA* LPPAGESETUPDLG;
     * }
     */
    public static final OfAddress LPPAGESETUPDLG = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle PageSetupDlgA$MH() {
        return RuntimeHelper.requireNonNull(constants$1247.PageSetupDlgA$MH,"PageSetupDlgA");
    }
    /**
     * {@snippet :
     * BOOL PageSetupDlgA(LPPAGESETUPDLGA);
     * }
     */
    public static int PageSetupDlgA(MemorySegment x0) {
        var mh$ = PageSetupDlgA$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PageSetupDlgW$MH() {
        return RuntimeHelper.requireNonNull(constants$1247.PageSetupDlgW$MH,"PageSetupDlgW");
    }
    /**
     * {@snippet :
     * BOOL PageSetupDlgW(LPPAGESETUPDLGW);
     * }
     */
    public static int PageSetupDlgW(MemorySegment x0) {
        var mh$ = PageSetupDlgW$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle uaw_CharUpperW$MH() {
        return RuntimeHelper.requireNonNull(constants$1247.uaw_CharUpperW$MH,"uaw_CharUpperW");
    }
    /**
     * {@snippet :
     * LPUWSTR uaw_CharUpperW(LPUWSTR String);
     * }
     */
    public static MemorySegment uaw_CharUpperW(MemorySegment String_) {
        var mh$ = uaw_CharUpperW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(String_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle uaw_lstrcmpW$MH() {
        return RuntimeHelper.requireNonNull(constants$1247.uaw_lstrcmpW$MH,"uaw_lstrcmpW");
    }
    /**
     * {@snippet :
     * int uaw_lstrcmpW(PCUWSTR String1, PCUWSTR String2);
     * }
     */
    public static int uaw_lstrcmpW(MemorySegment String1, MemorySegment String2) {
        var mh$ = uaw_lstrcmpW$MH();
        try {
            return (int)mh$.invokeExact(String1, String2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle uaw_lstrcmpiW$MH() {
        return RuntimeHelper.requireNonNull(constants$1247.uaw_lstrcmpiW$MH,"uaw_lstrcmpiW");
    }
    /**
     * {@snippet :
     * int uaw_lstrcmpiW(PCUWSTR String1, PCUWSTR String2);
     * }
     */
    public static int uaw_lstrcmpiW(MemorySegment String1, MemorySegment String2) {
        var mh$ = uaw_lstrcmpiW$MH();
        try {
            return (int)mh$.invokeExact(String1, String2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle uaw_lstrlenW$MH() {
        return RuntimeHelper.requireNonNull(constants$1247.uaw_lstrlenW$MH,"uaw_lstrlenW");
    }
    /**
     * {@snippet :
     * int uaw_lstrlenW(LPCUWSTR String);
     * }
     */
    public static int uaw_lstrlenW(MemorySegment String_) {
        var mh$ = uaw_lstrlenW$MH();
        try {
            return (int)mh$.invokeExact(String_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle uaw_wcschr$MH() {
        return RuntimeHelper.requireNonNull(constants$1248.uaw_wcschr$MH,"uaw_wcschr");
    }
    /**
     * {@snippet :
     * PUWSTR uaw_wcschr(PCUWSTR String, WCHAR Character);
     * }
     */
    public static MemorySegment uaw_wcschr(MemorySegment String_, short Character) {
        var mh$ = uaw_wcschr$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(String_, Character);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle uaw_wcscpy$MH() {
        return RuntimeHelper.requireNonNull(constants$1248.uaw_wcscpy$MH,"uaw_wcscpy");
    }
    /**
     * {@snippet :
     * PUWSTR uaw_wcscpy(PUWSTR Destination, PCUWSTR Source);
     * }
     */
    public static MemorySegment uaw_wcscpy(MemorySegment Destination, MemorySegment Source) {
        var mh$ = uaw_wcscpy$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(Destination, Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle uaw_wcsicmp$MH() {
        return RuntimeHelper.requireNonNull(constants$1248.uaw_wcsicmp$MH,"uaw_wcsicmp");
    }
    /**
     * {@snippet :
     * int uaw_wcsicmp(PCUWSTR String1, PCUWSTR String2);
     * }
     */
    public static int uaw_wcsicmp(MemorySegment String1, MemorySegment String2) {
        var mh$ = uaw_wcsicmp$MH();
        try {
            return (int)mh$.invokeExact(String1, String2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle uaw_wcslen$MH() {
        return RuntimeHelper.requireNonNull(constants$1248.uaw_wcslen$MH,"uaw_wcslen");
    }
    /**
     * {@snippet :
     * size_t uaw_wcslen(PCUWSTR String);
     * }
     */
    public static long uaw_wcslen(MemorySegment String_) {
        var mh$ = uaw_wcslen$MH();
        try {
            return (long)mh$.invokeExact(String_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle uaw_wcsrchr$MH() {
        return RuntimeHelper.requireNonNull(constants$1248.uaw_wcsrchr$MH,"uaw_wcsrchr");
    }
    /**
     * {@snippet :
     * PUWSTR uaw_wcsrchr(PCUWSTR String, WCHAR Character);
     * }
     */
    public static MemorySegment uaw_wcsrchr(MemorySegment String_, short Character) {
        var mh$ = uaw_wcsrchr$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(String_, Character);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned short* PUWSTR_C;
     * }
     */
    public static final OfAddress PUWSTR_C = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * const GUID NETWORK_MANAGER_FIRST_IP_ADDRESS_ARRIVAL_GUID;
     * }
     */
    public static MemorySegment NETWORK_MANAGER_FIRST_IP_ADDRESS_ARRIVAL_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1248.NETWORK_MANAGER_FIRST_IP_ADDRESS_ARRIVAL_GUID$SEGMENT,"NETWORK_MANAGER_FIRST_IP_ADDRESS_ARRIVAL_GUID");
    }
    /**
     * {@snippet :
     * const GUID NETWORK_MANAGER_LAST_IP_ADDRESS_REMOVAL_GUID;
     * }
     */
    public static MemorySegment NETWORK_MANAGER_LAST_IP_ADDRESS_REMOVAL_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1249.NETWORK_MANAGER_LAST_IP_ADDRESS_REMOVAL_GUID$SEGMENT,"NETWORK_MANAGER_LAST_IP_ADDRESS_REMOVAL_GUID");
    }
    /**
     * {@snippet :
     * const GUID DOMAIN_JOIN_GUID;
     * }
     */
    public static MemorySegment DOMAIN_JOIN_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1249.DOMAIN_JOIN_GUID$SEGMENT,"DOMAIN_JOIN_GUID");
    }
    /**
     * {@snippet :
     * const GUID DOMAIN_LEAVE_GUID;
     * }
     */
    public static MemorySegment DOMAIN_LEAVE_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1249.DOMAIN_LEAVE_GUID$SEGMENT,"DOMAIN_LEAVE_GUID");
    }
    /**
     * {@snippet :
     * const GUID FIREWALL_PORT_OPEN_GUID;
     * }
     */
    public static MemorySegment FIREWALL_PORT_OPEN_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1249.FIREWALL_PORT_OPEN_GUID$SEGMENT,"FIREWALL_PORT_OPEN_GUID");
    }
    /**
     * {@snippet :
     * const GUID FIREWALL_PORT_CLOSE_GUID;
     * }
     */
    public static MemorySegment FIREWALL_PORT_CLOSE_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1249.FIREWALL_PORT_CLOSE_GUID$SEGMENT,"FIREWALL_PORT_CLOSE_GUID");
    }
    /**
     * {@snippet :
     * const GUID MACHINE_POLICY_PRESENT_GUID;
     * }
     */
    public static MemorySegment MACHINE_POLICY_PRESENT_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1249.MACHINE_POLICY_PRESENT_GUID$SEGMENT,"MACHINE_POLICY_PRESENT_GUID");
    }
    /**
     * {@snippet :
     * const GUID USER_POLICY_PRESENT_GUID;
     * }
     */
    public static MemorySegment USER_POLICY_PRESENT_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1250.USER_POLICY_PRESENT_GUID$SEGMENT,"USER_POLICY_PRESENT_GUID");
    }
    /**
     * {@snippet :
     * const GUID RPC_INTERFACE_EVENT_GUID;
     * }
     */
    public static MemorySegment RPC_INTERFACE_EVENT_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1250.RPC_INTERFACE_EVENT_GUID$SEGMENT,"RPC_INTERFACE_EVENT_GUID");
    }
    /**
     * {@snippet :
     * const GUID NAMED_PIPE_EVENT_GUID;
     * }
     */
    public static MemorySegment NAMED_PIPE_EVENT_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1250.NAMED_PIPE_EVENT_GUID$SEGMENT,"NAMED_PIPE_EVENT_GUID");
    }
    /**
     * {@snippet :
     * const GUID CUSTOM_SYSTEM_STATE_CHANGE_EVENT_GUID;
     * }
     */
    public static MemorySegment CUSTOM_SYSTEM_STATE_CHANGE_EVENT_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1250.CUSTOM_SYSTEM_STATE_CHANGE_EVENT_GUID$SEGMENT,"CUSTOM_SYSTEM_STATE_CHANGE_EVENT_GUID");
    }
    /**
     * {@snippet :
     * typedef struct _SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM* LPSERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM;
     * }
     */
    public static final OfAddress LPSERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _SERVICE_DESCRIPTIONA* LPSERVICE_DESCRIPTIONA;
     * }
     */
    public static final OfAddress LPSERVICE_DESCRIPTIONA = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _SERVICE_DESCRIPTIONW* LPSERVICE_DESCRIPTIONW;
     * }
     */
    public static final OfAddress LPSERVICE_DESCRIPTIONW = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _SERVICE_DESCRIPTIONA* LPSERVICE_DESCRIPTION;
     * }
     */
    public static final OfAddress LPSERVICE_DESCRIPTION = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * enum _SC_ACTION_TYPE.SC_ACTION_NONE = 0;
     * }
     */
    public static int SC_ACTION_NONE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum _SC_ACTION_TYPE.SC_ACTION_RESTART = 1;
     * }
     */
    public static int SC_ACTION_RESTART() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum _SC_ACTION_TYPE.SC_ACTION_REBOOT = 2;
     * }
     */
    public static int SC_ACTION_REBOOT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum _SC_ACTION_TYPE.SC_ACTION_RUN_COMMAND = 3;
     * }
     */
    public static int SC_ACTION_RUN_COMMAND() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum _SC_ACTION_TYPE.SC_ACTION_OWN_RESTART = 4;
     * }
     */
    public static int SC_ACTION_OWN_RESTART() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * typedef struct _SC_ACTION* LPSC_ACTION;
     * }
     */
    public static final OfAddress LPSC_ACTION = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _SERVICE_FAILURE_ACTIONSA* LPSERVICE_FAILURE_ACTIONSA;
     * }
     */
    public static final OfAddress LPSERVICE_FAILURE_ACTIONSA = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _SERVICE_FAILURE_ACTIONSW* LPSERVICE_FAILURE_ACTIONSW;
     * }
     */
    public static final OfAddress LPSERVICE_FAILURE_ACTIONSW = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _SERVICE_FAILURE_ACTIONSA* LPSERVICE_FAILURE_ACTIONS;
     * }
     */
    public static final OfAddress LPSERVICE_FAILURE_ACTIONS = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _SERVICE_DELAYED_AUTO_START_INFO* LPSERVICE_DELAYED_AUTO_START_INFO;
     * }
     */
    public static final OfAddress LPSERVICE_DELAYED_AUTO_START_INFO = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _SERVICE_FAILURE_ACTIONS_FLAG* LPSERVICE_FAILURE_ACTIONS_FLAG;
     * }
     */
    public static final OfAddress LPSERVICE_FAILURE_ACTIONS_FLAG = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _SERVICE_SID_INFO* LPSERVICE_SID_INFO;
     * }
     */
    public static final OfAddress LPSERVICE_SID_INFO = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _SERVICE_REQUIRED_PRIVILEGES_INFOA* LPSERVICE_REQUIRED_PRIVILEGES_INFOA;
     * }
     */
    public static final OfAddress LPSERVICE_REQUIRED_PRIVILEGES_INFOA = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _SERVICE_REQUIRED_PRIVILEGES_INFOW* LPSERVICE_REQUIRED_PRIVILEGES_INFOW;
     * }
     */
    public static final OfAddress LPSERVICE_REQUIRED_PRIVILEGES_INFOW = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _SERVICE_REQUIRED_PRIVILEGES_INFOA* LPSERVICE_REQUIRED_PRIVILEGES_INFO;
     * }
     */
    public static final OfAddress LPSERVICE_REQUIRED_PRIVILEGES_INFO = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _SERVICE_PRESHUTDOWN_INFO* LPSERVICE_PRESHUTDOWN_INFO;
     * }
     */
    public static final OfAddress LPSERVICE_PRESHUTDOWN_INFO = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _SERVICE_TRIGGER_SPECIFIC_DATA_ITEM* PSERVICE_TRIGGER_SPECIFIC_DATA_ITEM;
     * }
     */
    public static final OfAddress PSERVICE_TRIGGER_SPECIFIC_DATA_ITEM = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _SERVICE_TRIGGER* PSERVICE_TRIGGER;
     * }
     */
    public static final OfAddress PSERVICE_TRIGGER = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _SERVICE_TRIGGER_INFO* PSERVICE_TRIGGER_INFO;
     * }
     */
    public static final OfAddress PSERVICE_TRIGGER_INFO = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _SERVICE_PREFERRED_NODE_INFO* LPSERVICE_PREFERRED_NODE_INFO;
     * }
     */
    public static final OfAddress LPSERVICE_PREFERRED_NODE_INFO = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _SERVICE_TIMECHANGE_INFO* PSERVICE_TIMECHANGE_INFO;
     * }
     */
    public static final OfAddress PSERVICE_TIMECHANGE_INFO = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _SERVICE_LAUNCH_PROTECTED_INFO* PSERVICE_LAUNCH_PROTECTED_INFO;
     * }
     */
    public static final OfAddress PSERVICE_LAUNCH_PROTECTED_INFO = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct SC_HANDLE__* SC_HANDLE;
     * }
     */
    public static final OfAddress SC_HANDLE = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct SC_HANDLE__** LPSC_HANDLE;
     * }
     */
    public static final OfAddress LPSC_HANDLE = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct SERVICE_STATUS_HANDLE__* SERVICE_STATUS_HANDLE;
     * }
     */
    public static final OfAddress SERVICE_STATUS_HANDLE = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * enum _SC_STATUS_TYPE.SC_STATUS_PROCESS_INFO = 0;
     * }
     */
    public static int SC_STATUS_PROCESS_INFO() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum _SC_ENUM_TYPE.SC_ENUM_PROCESS_INFO = 0;
     * }
     */
    public static int SC_ENUM_PROCESS_INFO() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * typedef struct _SERVICE_STATUS* LPSERVICE_STATUS;
     * }
     */
    public static final OfAddress LPSERVICE_STATUS = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _SERVICE_STATUS_PROCESS* LPSERVICE_STATUS_PROCESS;
     * }
     */
    public static final OfAddress LPSERVICE_STATUS_PROCESS = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _ENUM_SERVICE_STATUSA* LPENUM_SERVICE_STATUSA;
     * }
     */
    public static final OfAddress LPENUM_SERVICE_STATUSA = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _ENUM_SERVICE_STATUSW* LPENUM_SERVICE_STATUSW;
     * }
     */
    public static final OfAddress LPENUM_SERVICE_STATUSW = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _ENUM_SERVICE_STATUSA* LPENUM_SERVICE_STATUS;
     * }
     */
    public static final OfAddress LPENUM_SERVICE_STATUS = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _ENUM_SERVICE_STATUS_PROCESSA* LPENUM_SERVICE_STATUS_PROCESSA;
     * }
     */
    public static final OfAddress LPENUM_SERVICE_STATUS_PROCESSA = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _ENUM_SERVICE_STATUS_PROCESSW* LPENUM_SERVICE_STATUS_PROCESSW;
     * }
     */
    public static final OfAddress LPENUM_SERVICE_STATUS_PROCESSW = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _ENUM_SERVICE_STATUS_PROCESSA* LPENUM_SERVICE_STATUS_PROCESS;
     * }
     */
    public static final OfAddress LPENUM_SERVICE_STATUS_PROCESS = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef void* SC_LOCK;
     * }
     */
    public static final OfAddress SC_LOCK = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _QUERY_SERVICE_LOCK_STATUSA* LPQUERY_SERVICE_LOCK_STATUSA;
     * }
     */
    public static final OfAddress LPQUERY_SERVICE_LOCK_STATUSA = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _QUERY_SERVICE_LOCK_STATUSW* LPQUERY_SERVICE_LOCK_STATUSW;
     * }
     */
    public static final OfAddress LPQUERY_SERVICE_LOCK_STATUSW = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _QUERY_SERVICE_LOCK_STATUSA* LPQUERY_SERVICE_LOCK_STATUS;
     * }
     */
    public static final OfAddress LPQUERY_SERVICE_LOCK_STATUS = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _QUERY_SERVICE_CONFIGA* LPQUERY_SERVICE_CONFIGA;
     * }
     */
    public static final OfAddress LPQUERY_SERVICE_CONFIGA = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _QUERY_SERVICE_CONFIGW* LPQUERY_SERVICE_CONFIGW;
     * }
     */
    public static final OfAddress LPQUERY_SERVICE_CONFIGW = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _QUERY_SERVICE_CONFIGA* LPQUERY_SERVICE_CONFIG;
     * }
     */
    public static final OfAddress LPQUERY_SERVICE_CONFIG = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _SERVICE_TABLE_ENTRYA* LPSERVICE_TABLE_ENTRYA;
     * }
     */
    public static final OfAddress LPSERVICE_TABLE_ENTRYA = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _SERVICE_TABLE_ENTRYW* LPSERVICE_TABLE_ENTRYW;
     * }
     */
    public static final OfAddress LPSERVICE_TABLE_ENTRYW = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _SERVICE_TABLE_ENTRYA* LPSERVICE_TABLE_ENTRY;
     * }
     */
    public static final OfAddress LPSERVICE_TABLE_ENTRY = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _SERVICE_NOTIFY_1* PSERVICE_NOTIFY_1;
     * }
     */
    public static final OfAddress PSERVICE_NOTIFY_1 = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _SERVICE_NOTIFY_2A* PSERVICE_NOTIFY_2A;
     * }
     */
    public static final OfAddress PSERVICE_NOTIFY_2A = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _SERVICE_NOTIFY_2W* PSERVICE_NOTIFY_2W;
     * }
     */
    public static final OfAddress PSERVICE_NOTIFY_2W = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _SERVICE_NOTIFY_2A* PSERVICE_NOTIFY_2;
     * }
     */
    public static final OfAddress PSERVICE_NOTIFY_2 = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _SERVICE_NOTIFY_2A* PSERVICE_NOTIFYA;
     * }
     */
    public static final OfAddress PSERVICE_NOTIFYA = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _SERVICE_NOTIFY_2W* PSERVICE_NOTIFYW;
     * }
     */
    public static final OfAddress PSERVICE_NOTIFYW = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _SERVICE_NOTIFY_2A* PSERVICE_NOTIFY;
     * }
     */
    public static final OfAddress PSERVICE_NOTIFY = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _SERVICE_CONTROL_STATUS_REASON_PARAMSA* PSERVICE_CONTROL_STATUS_REASON_PARAMSA;
     * }
     */
    public static final OfAddress PSERVICE_CONTROL_STATUS_REASON_PARAMSA = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _SERVICE_CONTROL_STATUS_REASON_PARAMSW* PSERVICE_CONTROL_STATUS_REASON_PARAMSW;
     * }
     */
    public static final OfAddress PSERVICE_CONTROL_STATUS_REASON_PARAMSW = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _SERVICE_CONTROL_STATUS_REASON_PARAMSA* PSERVICE_CONTROL_STATUS_REASON_PARAMS;
     * }
     */
    public static final OfAddress PSERVICE_CONTROL_STATUS_REASON_PARAMS = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _SERVICE_START_REASON* PSERVICE_START_REASON;
     * }
     */
    public static final OfAddress PSERVICE_START_REASON = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle ChangeServiceConfigA$MH() {
        return RuntimeHelper.requireNonNull(constants$1253.ChangeServiceConfigA$MH,"ChangeServiceConfigA");
    }
    /**
     * {@snippet :
     * BOOL ChangeServiceConfigA(SC_HANDLE hService, DWORD dwServiceType, DWORD dwStartType, DWORD dwErrorControl, LPCSTR lpBinaryPathName, LPCSTR lpLoadOrderGroup, LPDWORD lpdwTagId, LPCSTR lpDependencies, LPCSTR lpServiceStartName, LPCSTR lpPassword, LPCSTR lpDisplayName);
     * }
     */
    public static int ChangeServiceConfigA(MemorySegment hService, int dwServiceType, int dwStartType, int dwErrorControl, MemorySegment lpBinaryPathName, MemorySegment lpLoadOrderGroup, MemorySegment lpdwTagId, MemorySegment lpDependencies, MemorySegment lpServiceStartName, MemorySegment lpPassword, MemorySegment lpDisplayName) {
        var mh$ = ChangeServiceConfigA$MH();
        try {
            return (int)mh$.invokeExact(hService, dwServiceType, dwStartType, dwErrorControl, lpBinaryPathName, lpLoadOrderGroup, lpdwTagId, lpDependencies, lpServiceStartName, lpPassword, lpDisplayName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ChangeServiceConfigW$MH() {
        return RuntimeHelper.requireNonNull(constants$1253.ChangeServiceConfigW$MH,"ChangeServiceConfigW");
    }
    /**
     * {@snippet :
     * BOOL ChangeServiceConfigW(SC_HANDLE hService, DWORD dwServiceType, DWORD dwStartType, DWORD dwErrorControl, LPCWSTR lpBinaryPathName, LPCWSTR lpLoadOrderGroup, LPDWORD lpdwTagId, LPCWSTR lpDependencies, LPCWSTR lpServiceStartName, LPCWSTR lpPassword, LPCWSTR lpDisplayName);
     * }
     */
    public static int ChangeServiceConfigW(MemorySegment hService, int dwServiceType, int dwStartType, int dwErrorControl, MemorySegment lpBinaryPathName, MemorySegment lpLoadOrderGroup, MemorySegment lpdwTagId, MemorySegment lpDependencies, MemorySegment lpServiceStartName, MemorySegment lpPassword, MemorySegment lpDisplayName) {
        var mh$ = ChangeServiceConfigW$MH();
        try {
            return (int)mh$.invokeExact(hService, dwServiceType, dwStartType, dwErrorControl, lpBinaryPathName, lpLoadOrderGroup, lpdwTagId, lpDependencies, lpServiceStartName, lpPassword, lpDisplayName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ChangeServiceConfig2A$MH() {
        return RuntimeHelper.requireNonNull(constants$1254.ChangeServiceConfig2A$MH,"ChangeServiceConfig2A");
    }
    /**
     * {@snippet :
     * BOOL ChangeServiceConfig2A(SC_HANDLE hService, DWORD dwInfoLevel, LPVOID lpInfo);
     * }
     */
    public static int ChangeServiceConfig2A(MemorySegment hService, int dwInfoLevel, MemorySegment lpInfo) {
        var mh$ = ChangeServiceConfig2A$MH();
        try {
            return (int)mh$.invokeExact(hService, dwInfoLevel, lpInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ChangeServiceConfig2W$MH() {
        return RuntimeHelper.requireNonNull(constants$1254.ChangeServiceConfig2W$MH,"ChangeServiceConfig2W");
    }
    /**
     * {@snippet :
     * BOOL ChangeServiceConfig2W(SC_HANDLE hService, DWORD dwInfoLevel, LPVOID lpInfo);
     * }
     */
    public static int ChangeServiceConfig2W(MemorySegment hService, int dwInfoLevel, MemorySegment lpInfo) {
        var mh$ = ChangeServiceConfig2W$MH();
        try {
            return (int)mh$.invokeExact(hService, dwInfoLevel, lpInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CloseServiceHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$1254.CloseServiceHandle$MH,"CloseServiceHandle");
    }
    /**
     * {@snippet :
     * BOOL CloseServiceHandle(SC_HANDLE hSCObject);
     * }
     */
    public static int CloseServiceHandle(MemorySegment hSCObject) {
        var mh$ = CloseServiceHandle$MH();
        try {
            return (int)mh$.invokeExact(hSCObject);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ControlService$MH() {
        return RuntimeHelper.requireNonNull(constants$1254.ControlService$MH,"ControlService");
    }
    /**
     * {@snippet :
     * BOOL ControlService(SC_HANDLE hService, DWORD dwControl, LPSERVICE_STATUS lpServiceStatus);
     * }
     */
    public static int ControlService(MemorySegment hService, int dwControl, MemorySegment lpServiceStatus) {
        var mh$ = ControlService$MH();
        try {
            return (int)mh$.invokeExact(hService, dwControl, lpServiceStatus);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateServiceA$MH() {
        return RuntimeHelper.requireNonNull(constants$1254.CreateServiceA$MH,"CreateServiceA");
    }
    /**
     * {@snippet :
     * SC_HANDLE CreateServiceA(SC_HANDLE hSCManager, LPCSTR lpServiceName, LPCSTR lpDisplayName, DWORD dwDesiredAccess, DWORD dwServiceType, DWORD dwStartType, DWORD dwErrorControl, LPCSTR lpBinaryPathName, LPCSTR lpLoadOrderGroup, LPDWORD lpdwTagId, LPCSTR lpDependencies, LPCSTR lpServiceStartName, LPCSTR lpPassword);
     * }
     */
    public static MemorySegment CreateServiceA(MemorySegment hSCManager, MemorySegment lpServiceName, MemorySegment lpDisplayName, int dwDesiredAccess, int dwServiceType, int dwStartType, int dwErrorControl, MemorySegment lpBinaryPathName, MemorySegment lpLoadOrderGroup, MemorySegment lpdwTagId, MemorySegment lpDependencies, MemorySegment lpServiceStartName, MemorySegment lpPassword) {
        var mh$ = CreateServiceA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hSCManager, lpServiceName, lpDisplayName, dwDesiredAccess, dwServiceType, dwStartType, dwErrorControl, lpBinaryPathName, lpLoadOrderGroup, lpdwTagId, lpDependencies, lpServiceStartName, lpPassword);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateServiceW$MH() {
        return RuntimeHelper.requireNonNull(constants$1254.CreateServiceW$MH,"CreateServiceW");
    }
    /**
     * {@snippet :
     * SC_HANDLE CreateServiceW(SC_HANDLE hSCManager, LPCWSTR lpServiceName, LPCWSTR lpDisplayName, DWORD dwDesiredAccess, DWORD dwServiceType, DWORD dwStartType, DWORD dwErrorControl, LPCWSTR lpBinaryPathName, LPCWSTR lpLoadOrderGroup, LPDWORD lpdwTagId, LPCWSTR lpDependencies, LPCWSTR lpServiceStartName, LPCWSTR lpPassword);
     * }
     */
    public static MemorySegment CreateServiceW(MemorySegment hSCManager, MemorySegment lpServiceName, MemorySegment lpDisplayName, int dwDesiredAccess, int dwServiceType, int dwStartType, int dwErrorControl, MemorySegment lpBinaryPathName, MemorySegment lpLoadOrderGroup, MemorySegment lpdwTagId, MemorySegment lpDependencies, MemorySegment lpServiceStartName, MemorySegment lpPassword) {
        var mh$ = CreateServiceW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hSCManager, lpServiceName, lpDisplayName, dwDesiredAccess, dwServiceType, dwStartType, dwErrorControl, lpBinaryPathName, lpLoadOrderGroup, lpdwTagId, lpDependencies, lpServiceStartName, lpPassword);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeleteService$MH() {
        return RuntimeHelper.requireNonNull(constants$1255.DeleteService$MH,"DeleteService");
    }
    /**
     * {@snippet :
     * BOOL DeleteService(SC_HANDLE hService);
     * }
     */
    public static int DeleteService(MemorySegment hService) {
        var mh$ = DeleteService$MH();
        try {
            return (int)mh$.invokeExact(hService);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumDependentServicesA$MH() {
        return RuntimeHelper.requireNonNull(constants$1255.EnumDependentServicesA$MH,"EnumDependentServicesA");
    }
    /**
     * {@snippet :
     * BOOL EnumDependentServicesA(SC_HANDLE hService, DWORD dwServiceState, LPENUM_SERVICE_STATUSA lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned);
     * }
     */
    public static int EnumDependentServicesA(MemorySegment hService, int dwServiceState, MemorySegment lpServices, int cbBufSize, MemorySegment pcbBytesNeeded, MemorySegment lpServicesReturned) {
        var mh$ = EnumDependentServicesA$MH();
        try {
            return (int)mh$.invokeExact(hService, dwServiceState, lpServices, cbBufSize, pcbBytesNeeded, lpServicesReturned);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumDependentServicesW$MH() {
        return RuntimeHelper.requireNonNull(constants$1255.EnumDependentServicesW$MH,"EnumDependentServicesW");
    }
    /**
     * {@snippet :
     * BOOL EnumDependentServicesW(SC_HANDLE hService, DWORD dwServiceState, LPENUM_SERVICE_STATUSW lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned);
     * }
     */
    public static int EnumDependentServicesW(MemorySegment hService, int dwServiceState, MemorySegment lpServices, int cbBufSize, MemorySegment pcbBytesNeeded, MemorySegment lpServicesReturned) {
        var mh$ = EnumDependentServicesW$MH();
        try {
            return (int)mh$.invokeExact(hService, dwServiceState, lpServices, cbBufSize, pcbBytesNeeded, lpServicesReturned);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumServicesStatusA$MH() {
        return RuntimeHelper.requireNonNull(constants$1255.EnumServicesStatusA$MH,"EnumServicesStatusA");
    }
    /**
     * {@snippet :
     * BOOL EnumServicesStatusA(SC_HANDLE hSCManager, DWORD dwServiceType, DWORD dwServiceState, LPENUM_SERVICE_STATUSA lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned, LPDWORD lpResumeHandle);
     * }
     */
    public static int EnumServicesStatusA(MemorySegment hSCManager, int dwServiceType, int dwServiceState, MemorySegment lpServices, int cbBufSize, MemorySegment pcbBytesNeeded, MemorySegment lpServicesReturned, MemorySegment lpResumeHandle) {
        var mh$ = EnumServicesStatusA$MH();
        try {
            return (int)mh$.invokeExact(hSCManager, dwServiceType, dwServiceState, lpServices, cbBufSize, pcbBytesNeeded, lpServicesReturned, lpResumeHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumServicesStatusW$MH() {
        return RuntimeHelper.requireNonNull(constants$1255.EnumServicesStatusW$MH,"EnumServicesStatusW");
    }
    /**
     * {@snippet :
     * BOOL EnumServicesStatusW(SC_HANDLE hSCManager, DWORD dwServiceType, DWORD dwServiceState, LPENUM_SERVICE_STATUSW lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned, LPDWORD lpResumeHandle);
     * }
     */
    public static int EnumServicesStatusW(MemorySegment hSCManager, int dwServiceType, int dwServiceState, MemorySegment lpServices, int cbBufSize, MemorySegment pcbBytesNeeded, MemorySegment lpServicesReturned, MemorySegment lpResumeHandle) {
        var mh$ = EnumServicesStatusW$MH();
        try {
            return (int)mh$.invokeExact(hSCManager, dwServiceType, dwServiceState, lpServices, cbBufSize, pcbBytesNeeded, lpServicesReturned, lpResumeHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumServicesStatusExA$MH() {
        return RuntimeHelper.requireNonNull(constants$1255.EnumServicesStatusExA$MH,"EnumServicesStatusExA");
    }
    /**
     * {@snippet :
     * BOOL EnumServicesStatusExA(SC_HANDLE hSCManager, SC_ENUM_TYPE InfoLevel, DWORD dwServiceType, DWORD dwServiceState, LPBYTE lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned, LPDWORD lpResumeHandle, LPCSTR pszGroupName);
     * }
     */
    public static int EnumServicesStatusExA(MemorySegment hSCManager, int InfoLevel, int dwServiceType, int dwServiceState, MemorySegment lpServices, int cbBufSize, MemorySegment pcbBytesNeeded, MemorySegment lpServicesReturned, MemorySegment lpResumeHandle, MemorySegment pszGroupName) {
        var mh$ = EnumServicesStatusExA$MH();
        try {
            return (int)mh$.invokeExact(hSCManager, InfoLevel, dwServiceType, dwServiceState, lpServices, cbBufSize, pcbBytesNeeded, lpServicesReturned, lpResumeHandle, pszGroupName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumServicesStatusExW$MH() {
        return RuntimeHelper.requireNonNull(constants$1256.EnumServicesStatusExW$MH,"EnumServicesStatusExW");
    }
    /**
     * {@snippet :
     * BOOL EnumServicesStatusExW(SC_HANDLE hSCManager, SC_ENUM_TYPE InfoLevel, DWORD dwServiceType, DWORD dwServiceState, LPBYTE lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned, LPDWORD lpResumeHandle, LPCWSTR pszGroupName);
     * }
     */
    public static int EnumServicesStatusExW(MemorySegment hSCManager, int InfoLevel, int dwServiceType, int dwServiceState, MemorySegment lpServices, int cbBufSize, MemorySegment pcbBytesNeeded, MemorySegment lpServicesReturned, MemorySegment lpResumeHandle, MemorySegment pszGroupName) {
        var mh$ = EnumServicesStatusExW$MH();
        try {
            return (int)mh$.invokeExact(hSCManager, InfoLevel, dwServiceType, dwServiceState, lpServices, cbBufSize, pcbBytesNeeded, lpServicesReturned, lpResumeHandle, pszGroupName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetServiceKeyNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$1256.GetServiceKeyNameA$MH,"GetServiceKeyNameA");
    }
    /**
     * {@snippet :
     * BOOL GetServiceKeyNameA(SC_HANDLE hSCManager, LPCSTR lpDisplayName, LPSTR lpServiceName, LPDWORD lpcchBuffer);
     * }
     */
    public static int GetServiceKeyNameA(MemorySegment hSCManager, MemorySegment lpDisplayName, MemorySegment lpServiceName, MemorySegment lpcchBuffer) {
        var mh$ = GetServiceKeyNameA$MH();
        try {
            return (int)mh$.invokeExact(hSCManager, lpDisplayName, lpServiceName, lpcchBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetServiceKeyNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$1256.GetServiceKeyNameW$MH,"GetServiceKeyNameW");
    }
    /**
     * {@snippet :
     * BOOL GetServiceKeyNameW(SC_HANDLE hSCManager, LPCWSTR lpDisplayName, LPWSTR lpServiceName, LPDWORD lpcchBuffer);
     * }
     */
    public static int GetServiceKeyNameW(MemorySegment hSCManager, MemorySegment lpDisplayName, MemorySegment lpServiceName, MemorySegment lpcchBuffer) {
        var mh$ = GetServiceKeyNameW$MH();
        try {
            return (int)mh$.invokeExact(hSCManager, lpDisplayName, lpServiceName, lpcchBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetServiceDisplayNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$1256.GetServiceDisplayNameA$MH,"GetServiceDisplayNameA");
    }
    /**
     * {@snippet :
     * BOOL GetServiceDisplayNameA(SC_HANDLE hSCManager, LPCSTR lpServiceName, LPSTR lpDisplayName, LPDWORD lpcchBuffer);
     * }
     */
    public static int GetServiceDisplayNameA(MemorySegment hSCManager, MemorySegment lpServiceName, MemorySegment lpDisplayName, MemorySegment lpcchBuffer) {
        var mh$ = GetServiceDisplayNameA$MH();
        try {
            return (int)mh$.invokeExact(hSCManager, lpServiceName, lpDisplayName, lpcchBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetServiceDisplayNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$1256.GetServiceDisplayNameW$MH,"GetServiceDisplayNameW");
    }
    /**
     * {@snippet :
     * BOOL GetServiceDisplayNameW(SC_HANDLE hSCManager, LPCWSTR lpServiceName, LPWSTR lpDisplayName, LPDWORD lpcchBuffer);
     * }
     */
    public static int GetServiceDisplayNameW(MemorySegment hSCManager, MemorySegment lpServiceName, MemorySegment lpDisplayName, MemorySegment lpcchBuffer) {
        var mh$ = GetServiceDisplayNameW$MH();
        try {
            return (int)mh$.invokeExact(hSCManager, lpServiceName, lpDisplayName, lpcchBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LockServiceDatabase$MH() {
        return RuntimeHelper.requireNonNull(constants$1256.LockServiceDatabase$MH,"LockServiceDatabase");
    }
    /**
     * {@snippet :
     * SC_LOCK LockServiceDatabase(SC_HANDLE hSCManager);
     * }
     */
    public static MemorySegment LockServiceDatabase(MemorySegment hSCManager) {
        var mh$ = LockServiceDatabase$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hSCManager);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NotifyBootConfigStatus$MH() {
        return RuntimeHelper.requireNonNull(constants$1257.NotifyBootConfigStatus$MH,"NotifyBootConfigStatus");
    }
    /**
     * {@snippet :
     * BOOL NotifyBootConfigStatus(BOOL BootAcceptable);
     * }
     */
    public static int NotifyBootConfigStatus(int BootAcceptable) {
        var mh$ = NotifyBootConfigStatus$MH();
        try {
            return (int)mh$.invokeExact(BootAcceptable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenSCManagerA$MH() {
        return RuntimeHelper.requireNonNull(constants$1257.OpenSCManagerA$MH,"OpenSCManagerA");
    }
    /**
     * {@snippet :
     * SC_HANDLE OpenSCManagerA(LPCSTR lpMachineName, LPCSTR lpDatabaseName, DWORD dwDesiredAccess);
     * }
     */
    public static MemorySegment OpenSCManagerA(MemorySegment lpMachineName, MemorySegment lpDatabaseName, int dwDesiredAccess) {
        var mh$ = OpenSCManagerA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpMachineName, lpDatabaseName, dwDesiredAccess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenSCManagerW$MH() {
        return RuntimeHelper.requireNonNull(constants$1257.OpenSCManagerW$MH,"OpenSCManagerW");
    }
    /**
     * {@snippet :
     * SC_HANDLE OpenSCManagerW(LPCWSTR lpMachineName, LPCWSTR lpDatabaseName, DWORD dwDesiredAccess);
     * }
     */
    public static MemorySegment OpenSCManagerW(MemorySegment lpMachineName, MemorySegment lpDatabaseName, int dwDesiredAccess) {
        var mh$ = OpenSCManagerW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpMachineName, lpDatabaseName, dwDesiredAccess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenServiceA$MH() {
        return RuntimeHelper.requireNonNull(constants$1257.OpenServiceA$MH,"OpenServiceA");
    }
    /**
     * {@snippet :
     * SC_HANDLE OpenServiceA(SC_HANDLE hSCManager, LPCSTR lpServiceName, DWORD dwDesiredAccess);
     * }
     */
    public static MemorySegment OpenServiceA(MemorySegment hSCManager, MemorySegment lpServiceName, int dwDesiredAccess) {
        var mh$ = OpenServiceA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hSCManager, lpServiceName, dwDesiredAccess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenServiceW$MH() {
        return RuntimeHelper.requireNonNull(constants$1257.OpenServiceW$MH,"OpenServiceW");
    }
    /**
     * {@snippet :
     * SC_HANDLE OpenServiceW(SC_HANDLE hSCManager, LPCWSTR lpServiceName, DWORD dwDesiredAccess);
     * }
     */
    public static MemorySegment OpenServiceW(MemorySegment hSCManager, MemorySegment lpServiceName, int dwDesiredAccess) {
        var mh$ = OpenServiceW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hSCManager, lpServiceName, dwDesiredAccess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryServiceConfigA$MH() {
        return RuntimeHelper.requireNonNull(constants$1257.QueryServiceConfigA$MH,"QueryServiceConfigA");
    }
    /**
     * {@snippet :
     * BOOL QueryServiceConfigA(SC_HANDLE hService, LPQUERY_SERVICE_CONFIGA lpServiceConfig, DWORD cbBufSize, LPDWORD pcbBytesNeeded);
     * }
     */
    public static int QueryServiceConfigA(MemorySegment hService, MemorySegment lpServiceConfig, int cbBufSize, MemorySegment pcbBytesNeeded) {
        var mh$ = QueryServiceConfigA$MH();
        try {
            return (int)mh$.invokeExact(hService, lpServiceConfig, cbBufSize, pcbBytesNeeded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryServiceConfigW$MH() {
        return RuntimeHelper.requireNonNull(constants$1258.QueryServiceConfigW$MH,"QueryServiceConfigW");
    }
    /**
     * {@snippet :
     * BOOL QueryServiceConfigW(SC_HANDLE hService, LPQUERY_SERVICE_CONFIGW lpServiceConfig, DWORD cbBufSize, LPDWORD pcbBytesNeeded);
     * }
     */
    public static int QueryServiceConfigW(MemorySegment hService, MemorySegment lpServiceConfig, int cbBufSize, MemorySegment pcbBytesNeeded) {
        var mh$ = QueryServiceConfigW$MH();
        try {
            return (int)mh$.invokeExact(hService, lpServiceConfig, cbBufSize, pcbBytesNeeded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryServiceConfig2A$MH() {
        return RuntimeHelper.requireNonNull(constants$1258.QueryServiceConfig2A$MH,"QueryServiceConfig2A");
    }
    /**
     * {@snippet :
     * BOOL QueryServiceConfig2A(SC_HANDLE hService, DWORD dwInfoLevel, LPBYTE lpBuffer, DWORD cbBufSize, LPDWORD pcbBytesNeeded);
     * }
     */
    public static int QueryServiceConfig2A(MemorySegment hService, int dwInfoLevel, MemorySegment lpBuffer, int cbBufSize, MemorySegment pcbBytesNeeded) {
        var mh$ = QueryServiceConfig2A$MH();
        try {
            return (int)mh$.invokeExact(hService, dwInfoLevel, lpBuffer, cbBufSize, pcbBytesNeeded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryServiceConfig2W$MH() {
        return RuntimeHelper.requireNonNull(constants$1258.QueryServiceConfig2W$MH,"QueryServiceConfig2W");
    }
    /**
     * {@snippet :
     * BOOL QueryServiceConfig2W(SC_HANDLE hService, DWORD dwInfoLevel, LPBYTE lpBuffer, DWORD cbBufSize, LPDWORD pcbBytesNeeded);
     * }
     */
    public static int QueryServiceConfig2W(MemorySegment hService, int dwInfoLevel, MemorySegment lpBuffer, int cbBufSize, MemorySegment pcbBytesNeeded) {
        var mh$ = QueryServiceConfig2W$MH();
        try {
            return (int)mh$.invokeExact(hService, dwInfoLevel, lpBuffer, cbBufSize, pcbBytesNeeded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryServiceLockStatusA$MH() {
        return RuntimeHelper.requireNonNull(constants$1258.QueryServiceLockStatusA$MH,"QueryServiceLockStatusA");
    }
    /**
     * {@snippet :
     * BOOL QueryServiceLockStatusA(SC_HANDLE hSCManager, LPQUERY_SERVICE_LOCK_STATUSA lpLockStatus, DWORD cbBufSize, LPDWORD pcbBytesNeeded);
     * }
     */
    public static int QueryServiceLockStatusA(MemorySegment hSCManager, MemorySegment lpLockStatus, int cbBufSize, MemorySegment pcbBytesNeeded) {
        var mh$ = QueryServiceLockStatusA$MH();
        try {
            return (int)mh$.invokeExact(hSCManager, lpLockStatus, cbBufSize, pcbBytesNeeded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryServiceLockStatusW$MH() {
        return RuntimeHelper.requireNonNull(constants$1258.QueryServiceLockStatusW$MH,"QueryServiceLockStatusW");
    }
    /**
     * {@snippet :
     * BOOL QueryServiceLockStatusW(SC_HANDLE hSCManager, LPQUERY_SERVICE_LOCK_STATUSW lpLockStatus, DWORD cbBufSize, LPDWORD pcbBytesNeeded);
     * }
     */
    public static int QueryServiceLockStatusW(MemorySegment hSCManager, MemorySegment lpLockStatus, int cbBufSize, MemorySegment pcbBytesNeeded) {
        var mh$ = QueryServiceLockStatusW$MH();
        try {
            return (int)mh$.invokeExact(hSCManager, lpLockStatus, cbBufSize, pcbBytesNeeded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryServiceObjectSecurity$MH() {
        return RuntimeHelper.requireNonNull(constants$1258.QueryServiceObjectSecurity$MH,"QueryServiceObjectSecurity");
    }
    /**
     * {@snippet :
     * BOOL QueryServiceObjectSecurity(SC_HANDLE hService, SECURITY_INFORMATION dwSecurityInformation, PSECURITY_DESCRIPTOR lpSecurityDescriptor, DWORD cbBufSize, LPDWORD pcbBytesNeeded);
     * }
     */
    public static int QueryServiceObjectSecurity(MemorySegment hService, int dwSecurityInformation, MemorySegment lpSecurityDescriptor, int cbBufSize, MemorySegment pcbBytesNeeded) {
        var mh$ = QueryServiceObjectSecurity$MH();
        try {
            return (int)mh$.invokeExact(hService, dwSecurityInformation, lpSecurityDescriptor, cbBufSize, pcbBytesNeeded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryServiceStatus$MH() {
        return RuntimeHelper.requireNonNull(constants$1259.QueryServiceStatus$MH,"QueryServiceStatus");
    }
    /**
     * {@snippet :
     * BOOL QueryServiceStatus(SC_HANDLE hService, LPSERVICE_STATUS lpServiceStatus);
     * }
     */
    public static int QueryServiceStatus(MemorySegment hService, MemorySegment lpServiceStatus) {
        var mh$ = QueryServiceStatus$MH();
        try {
            return (int)mh$.invokeExact(hService, lpServiceStatus);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryServiceStatusEx$MH() {
        return RuntimeHelper.requireNonNull(constants$1259.QueryServiceStatusEx$MH,"QueryServiceStatusEx");
    }
    /**
     * {@snippet :
     * BOOL QueryServiceStatusEx(SC_HANDLE hService, SC_STATUS_TYPE InfoLevel, LPBYTE lpBuffer, DWORD cbBufSize, LPDWORD pcbBytesNeeded);
     * }
     */
    public static int QueryServiceStatusEx(MemorySegment hService, int InfoLevel, MemorySegment lpBuffer, int cbBufSize, MemorySegment pcbBytesNeeded) {
        var mh$ = QueryServiceStatusEx$MH();
        try {
            return (int)mh$.invokeExact(hService, InfoLevel, lpBuffer, cbBufSize, pcbBytesNeeded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterServiceCtrlHandlerA$MH() {
        return RuntimeHelper.requireNonNull(constants$1259.RegisterServiceCtrlHandlerA$MH,"RegisterServiceCtrlHandlerA");
    }
    /**
     * {@snippet :
     * SERVICE_STATUS_HANDLE RegisterServiceCtrlHandlerA(LPCSTR lpServiceName, LPHANDLER_FUNCTION lpHandlerProc);
     * }
     */
    public static MemorySegment RegisterServiceCtrlHandlerA(MemorySegment lpServiceName, MemorySegment lpHandlerProc) {
        var mh$ = RegisterServiceCtrlHandlerA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpServiceName, lpHandlerProc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterServiceCtrlHandlerW$MH() {
        return RuntimeHelper.requireNonNull(constants$1259.RegisterServiceCtrlHandlerW$MH,"RegisterServiceCtrlHandlerW");
    }
    /**
     * {@snippet :
     * SERVICE_STATUS_HANDLE RegisterServiceCtrlHandlerW(LPCWSTR lpServiceName, LPHANDLER_FUNCTION lpHandlerProc);
     * }
     */
    public static MemorySegment RegisterServiceCtrlHandlerW(MemorySegment lpServiceName, MemorySegment lpHandlerProc) {
        var mh$ = RegisterServiceCtrlHandlerW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpServiceName, lpHandlerProc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterServiceCtrlHandlerExA$MH() {
        return RuntimeHelper.requireNonNull(constants$1259.RegisterServiceCtrlHandlerExA$MH,"RegisterServiceCtrlHandlerExA");
    }
    /**
     * {@snippet :
     * SERVICE_STATUS_HANDLE RegisterServiceCtrlHandlerExA(LPCSTR lpServiceName, LPHANDLER_FUNCTION_EX lpHandlerProc, LPVOID lpContext);
     * }
     */
    public static MemorySegment RegisterServiceCtrlHandlerExA(MemorySegment lpServiceName, MemorySegment lpHandlerProc, MemorySegment lpContext) {
        var mh$ = RegisterServiceCtrlHandlerExA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpServiceName, lpHandlerProc, lpContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterServiceCtrlHandlerExW$MH() {
        return RuntimeHelper.requireNonNull(constants$1259.RegisterServiceCtrlHandlerExW$MH,"RegisterServiceCtrlHandlerExW");
    }
    /**
     * {@snippet :
     * SERVICE_STATUS_HANDLE RegisterServiceCtrlHandlerExW(LPCWSTR lpServiceName, LPHANDLER_FUNCTION_EX lpHandlerProc, LPVOID lpContext);
     * }
     */
    public static MemorySegment RegisterServiceCtrlHandlerExW(MemorySegment lpServiceName, MemorySegment lpHandlerProc, MemorySegment lpContext) {
        var mh$ = RegisterServiceCtrlHandlerExW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpServiceName, lpHandlerProc, lpContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetServiceObjectSecurity$MH() {
        return RuntimeHelper.requireNonNull(constants$1260.SetServiceObjectSecurity$MH,"SetServiceObjectSecurity");
    }
    /**
     * {@snippet :
     * BOOL SetServiceObjectSecurity(SC_HANDLE hService, SECURITY_INFORMATION dwSecurityInformation, PSECURITY_DESCRIPTOR lpSecurityDescriptor);
     * }
     */
    public static int SetServiceObjectSecurity(MemorySegment hService, int dwSecurityInformation, MemorySegment lpSecurityDescriptor) {
        var mh$ = SetServiceObjectSecurity$MH();
        try {
            return (int)mh$.invokeExact(hService, dwSecurityInformation, lpSecurityDescriptor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetServiceStatus$MH() {
        return RuntimeHelper.requireNonNull(constants$1260.SetServiceStatus$MH,"SetServiceStatus");
    }
    /**
     * {@snippet :
     * BOOL SetServiceStatus(SERVICE_STATUS_HANDLE hServiceStatus, LPSERVICE_STATUS lpServiceStatus);
     * }
     */
    public static int SetServiceStatus(MemorySegment hServiceStatus, MemorySegment lpServiceStatus) {
        var mh$ = SetServiceStatus$MH();
        try {
            return (int)mh$.invokeExact(hServiceStatus, lpServiceStatus);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle StartServiceCtrlDispatcherA$MH() {
        return RuntimeHelper.requireNonNull(constants$1260.StartServiceCtrlDispatcherA$MH,"StartServiceCtrlDispatcherA");
    }
    /**
     * {@snippet :
     * BOOL StartServiceCtrlDispatcherA(const SERVICE_TABLE_ENTRYA* lpServiceStartTable);
     * }
     */
    public static int StartServiceCtrlDispatcherA(MemorySegment lpServiceStartTable) {
        var mh$ = StartServiceCtrlDispatcherA$MH();
        try {
            return (int)mh$.invokeExact(lpServiceStartTable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle StartServiceCtrlDispatcherW$MH() {
        return RuntimeHelper.requireNonNull(constants$1260.StartServiceCtrlDispatcherW$MH,"StartServiceCtrlDispatcherW");
    }
    /**
     * {@snippet :
     * BOOL StartServiceCtrlDispatcherW(const SERVICE_TABLE_ENTRYW* lpServiceStartTable);
     * }
     */
    public static int StartServiceCtrlDispatcherW(MemorySegment lpServiceStartTable) {
        var mh$ = StartServiceCtrlDispatcherW$MH();
        try {
            return (int)mh$.invokeExact(lpServiceStartTable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle StartServiceA$MH() {
        return RuntimeHelper.requireNonNull(constants$1260.StartServiceA$MH,"StartServiceA");
    }
    /**
     * {@snippet :
     * BOOL StartServiceA(SC_HANDLE hService, DWORD dwNumServiceArgs, LPCSTR* lpServiceArgVectors);
     * }
     */
    public static int StartServiceA(MemorySegment hService, int dwNumServiceArgs, MemorySegment lpServiceArgVectors) {
        var mh$ = StartServiceA$MH();
        try {
            return (int)mh$.invokeExact(hService, dwNumServiceArgs, lpServiceArgVectors);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle StartServiceW$MH() {
        return RuntimeHelper.requireNonNull(constants$1260.StartServiceW$MH,"StartServiceW");
    }
    /**
     * {@snippet :
     * BOOL StartServiceW(SC_HANDLE hService, DWORD dwNumServiceArgs, LPCWSTR* lpServiceArgVectors);
     * }
     */
    public static int StartServiceW(MemorySegment hService, int dwNumServiceArgs, MemorySegment lpServiceArgVectors) {
        var mh$ = StartServiceW$MH();
        try {
            return (int)mh$.invokeExact(hService, dwNumServiceArgs, lpServiceArgVectors);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnlockServiceDatabase$MH() {
        return RuntimeHelper.requireNonNull(constants$1261.UnlockServiceDatabase$MH,"UnlockServiceDatabase");
    }
    /**
     * {@snippet :
     * BOOL UnlockServiceDatabase(SC_LOCK ScLock);
     * }
     */
    public static int UnlockServiceDatabase(MemorySegment ScLock) {
        var mh$ = UnlockServiceDatabase$MH();
        try {
            return (int)mh$.invokeExact(ScLock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NotifyServiceStatusChangeA$MH() {
        return RuntimeHelper.requireNonNull(constants$1261.NotifyServiceStatusChangeA$MH,"NotifyServiceStatusChangeA");
    }
    /**
     * {@snippet :
     * DWORD NotifyServiceStatusChangeA(SC_HANDLE hService, DWORD dwNotifyMask, PSERVICE_NOTIFYA pNotifyBuffer);
     * }
     */
    public static int NotifyServiceStatusChangeA(MemorySegment hService, int dwNotifyMask, MemorySegment pNotifyBuffer) {
        var mh$ = NotifyServiceStatusChangeA$MH();
        try {
            return (int)mh$.invokeExact(hService, dwNotifyMask, pNotifyBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NotifyServiceStatusChangeW$MH() {
        return RuntimeHelper.requireNonNull(constants$1261.NotifyServiceStatusChangeW$MH,"NotifyServiceStatusChangeW");
    }
    /**
     * {@snippet :
     * DWORD NotifyServiceStatusChangeW(SC_HANDLE hService, DWORD dwNotifyMask, PSERVICE_NOTIFYW pNotifyBuffer);
     * }
     */
    public static int NotifyServiceStatusChangeW(MemorySegment hService, int dwNotifyMask, MemorySegment pNotifyBuffer) {
        var mh$ = NotifyServiceStatusChangeW$MH();
        try {
            return (int)mh$.invokeExact(hService, dwNotifyMask, pNotifyBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ControlServiceExA$MH() {
        return RuntimeHelper.requireNonNull(constants$1261.ControlServiceExA$MH,"ControlServiceExA");
    }
    /**
     * {@snippet :
     * BOOL ControlServiceExA(SC_HANDLE hService, DWORD dwControl, DWORD dwInfoLevel, PVOID pControlParams);
     * }
     */
    public static int ControlServiceExA(MemorySegment hService, int dwControl, int dwInfoLevel, MemorySegment pControlParams) {
        var mh$ = ControlServiceExA$MH();
        try {
            return (int)mh$.invokeExact(hService, dwControl, dwInfoLevel, pControlParams);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ControlServiceExW$MH() {
        return RuntimeHelper.requireNonNull(constants$1261.ControlServiceExW$MH,"ControlServiceExW");
    }
    /**
     * {@snippet :
     * BOOL ControlServiceExW(SC_HANDLE hService, DWORD dwControl, DWORD dwInfoLevel, PVOID pControlParams);
     * }
     */
    public static int ControlServiceExW(MemorySegment hService, int dwControl, int dwInfoLevel, MemorySegment pControlParams) {
        var mh$ = ControlServiceExW$MH();
        try {
            return (int)mh$.invokeExact(hService, dwControl, dwInfoLevel, pControlParams);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryServiceDynamicInformation$MH() {
        return RuntimeHelper.requireNonNull(constants$1261.QueryServiceDynamicInformation$MH,"QueryServiceDynamicInformation");
    }
    /**
     * {@snippet :
     * BOOL QueryServiceDynamicInformation(SERVICE_STATUS_HANDLE hServiceStatus, DWORD dwInfoLevel, PVOID* ppDynamicInfo);
     * }
     */
    public static int QueryServiceDynamicInformation(MemorySegment hServiceStatus, int dwInfoLevel, MemorySegment ppDynamicInfo) {
        var mh$ = QueryServiceDynamicInformation$MH();
        try {
            return (int)mh$.invokeExact(hServiceStatus, dwInfoLevel, ppDynamicInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum _SC_EVENT_TYPE.SC_EVENT_DATABASE_CHANGE = 0;
     * }
     */
    public static int SC_EVENT_DATABASE_CHANGE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum _SC_EVENT_TYPE.SC_EVENT_PROPERTY_CHANGE = 1;
     * }
     */
    public static int SC_EVENT_PROPERTY_CHANGE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum _SC_EVENT_TYPE.SC_EVENT_STATUS_CHANGE = 2;
     * }
     */
    public static int SC_EVENT_STATUS_CHANGE() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * typedef enum _SC_EVENT_TYPE* PSC_EVENT_TYPE;
     * }
     */
    public static final OfAddress PSC_EVENT_TYPE = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _SC_NOTIFICATION_REGISTRATION* PSC_NOTIFICATION_REGISTRATION;
     * }
     */
    public static final OfAddress PSC_NOTIFICATION_REGISTRATION = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle SubscribeServiceChangeNotifications$MH() {
        return RuntimeHelper.requireNonNull(constants$1262.SubscribeServiceChangeNotifications$MH,"SubscribeServiceChangeNotifications");
    }
    /**
     * {@snippet :
     * DWORD SubscribeServiceChangeNotifications(SC_HANDLE hService, SC_EVENT_TYPE eEventType, PSC_NOTIFICATION_CALLBACK pCallback, PVOID pCallbackContext, PSC_NOTIFICATION_REGISTRATION* pSubscription);
     * }
     */
    public static int SubscribeServiceChangeNotifications(MemorySegment hService, int eEventType, MemorySegment pCallback, MemorySegment pCallbackContext, MemorySegment pSubscription) {
        var mh$ = SubscribeServiceChangeNotifications$MH();
        try {
            return (int)mh$.invokeExact(hService, eEventType, pCallback, pCallbackContext, pSubscription);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnsubscribeServiceChangeNotifications$MH() {
        return RuntimeHelper.requireNonNull(constants$1262.UnsubscribeServiceChangeNotifications$MH,"UnsubscribeServiceChangeNotifications");
    }
    /**
     * {@snippet :
     * void UnsubscribeServiceChangeNotifications(PSC_NOTIFICATION_REGISTRATION pSubscription);
     * }
     */
    public static void UnsubscribeServiceChangeNotifications(MemorySegment pSubscription) {
        var mh$ = UnsubscribeServiceChangeNotifications$MH();
        try {
            mh$.invokeExact(pSubscription);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WaitServiceState$MH() {
        return RuntimeHelper.requireNonNull(constants$1263.WaitServiceState$MH,"WaitServiceState");
    }
    /**
     * {@snippet :
     * DWORD WaitServiceState(SC_HANDLE hService, DWORD dwNotify, DWORD dwTimeout, HANDLE hCancelEvent);
     * }
     */
    public static int WaitServiceState(MemorySegment hService, int dwNotify, int dwTimeout, MemorySegment hCancelEvent) {
        var mh$ = WaitServiceState$MH();
        try {
            return (int)mh$.invokeExact(hService, dwNotify, dwTimeout, hCancelEvent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum SERVICE_REGISTRY_STATE_TYPE.ServiceRegistryStateParameters = 0;
     * }
     */
    public static int ServiceRegistryStateParameters() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum SERVICE_REGISTRY_STATE_TYPE.ServiceRegistryStatePersistent = 1;
     * }
     */
    public static int ServiceRegistryStatePersistent() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum SERVICE_REGISTRY_STATE_TYPE.MaxServiceRegistryStateType = 2;
     * }
     */
    public static int MaxServiceRegistryStateType() {
        return (int)2L;
    }
    public static MethodHandle GetServiceRegistryStateKey$MH() {
        return RuntimeHelper.requireNonNull(constants$1263.GetServiceRegistryStateKey$MH,"GetServiceRegistryStateKey");
    }
    /**
     * {@snippet :
     * DWORD GetServiceRegistryStateKey(SERVICE_STATUS_HANDLE ServiceStatusHandle, SERVICE_REGISTRY_STATE_TYPE StateType, DWORD AccessMask, HKEY* ServiceStateKey);
     * }
     */
    public static int GetServiceRegistryStateKey(MemorySegment ServiceStatusHandle, int StateType, int AccessMask, MemorySegment ServiceStateKey) {
        var mh$ = GetServiceRegistryStateKey$MH();
        try {
            return (int)mh$.invokeExact(ServiceStatusHandle, StateType, AccessMask, ServiceStateKey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum SERVICE_DIRECTORY_TYPE.ServiceDirectoryPersistentState = 0;
     * }
     */
    public static int ServiceDirectoryPersistentState() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum SERVICE_DIRECTORY_TYPE.ServiceDirectoryTypeMax = 1;
     * }
     */
    public static int ServiceDirectoryTypeMax() {
        return (int)1L;
    }
    public static MethodHandle GetServiceDirectory$MH() {
        return RuntimeHelper.requireNonNull(constants$1263.GetServiceDirectory$MH,"GetServiceDirectory");
    }
    /**
     * {@snippet :
     * DWORD GetServiceDirectory(SERVICE_STATUS_HANDLE hServiceStatus, SERVICE_DIRECTORY_TYPE eDirectoryType, PWCHAR lpPathBuffer, DWORD cchPathBufferLength, DWORD* lpcchRequiredBufferLength);
     * }
     */
    public static int GetServiceDirectory(MemorySegment hServiceStatus, int eDirectoryType, MemorySegment lpPathBuffer, int cchPathBufferLength, MemorySegment lpcchRequiredBufferLength) {
        var mh$ = GetServiceDirectory$MH();
        try {
            return (int)mh$.invokeExact(hServiceStatus, eDirectoryType, lpPathBuffer, cchPathBufferLength, lpcchRequiredBufferLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum SERVICE_SHARED_REGISTRY_STATE_TYPE.ServiceSharedRegistryPersistentState = 0;
     * }
     */
    public static int ServiceSharedRegistryPersistentState() {
        return (int)0L;
    }
    public static MethodHandle GetSharedServiceRegistryStateKey$MH() {
        return RuntimeHelper.requireNonNull(constants$1263.GetSharedServiceRegistryStateKey$MH,"GetSharedServiceRegistryStateKey");
    }
    /**
     * {@snippet :
     * DWORD GetSharedServiceRegistryStateKey(SC_HANDLE ServiceHandle, SERVICE_SHARED_REGISTRY_STATE_TYPE StateType, DWORD AccessMask, HKEY* ServiceStateKey);
     * }
     */
    public static int GetSharedServiceRegistryStateKey(MemorySegment ServiceHandle, int StateType, int AccessMask, MemorySegment ServiceStateKey) {
        var mh$ = GetSharedServiceRegistryStateKey$MH();
        try {
            return (int)mh$.invokeExact(ServiceHandle, StateType, AccessMask, ServiceStateKey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum SERVICE_SHARED_DIRECTORY_TYPE.ServiceSharedDirectoryPersistentState = 0;
     * }
     */
    public static int ServiceSharedDirectoryPersistentState() {
        return (int)0L;
    }
    public static MethodHandle GetSharedServiceDirectory$MH() {
        return RuntimeHelper.requireNonNull(constants$1263.GetSharedServiceDirectory$MH,"GetSharedServiceDirectory");
    }
    /**
     * {@snippet :
     * DWORD GetSharedServiceDirectory(SC_HANDLE ServiceHandle, SERVICE_SHARED_DIRECTORY_TYPE DirectoryType, PWCHAR PathBuffer, DWORD PathBufferLength, DWORD* RequiredBufferLength);
     * }
     */
    public static int GetSharedServiceDirectory(MemorySegment ServiceHandle, int DirectoryType, MemorySegment PathBuffer, int PathBufferLength, MemorySegment RequiredBufferLength) {
        var mh$ = GetSharedServiceDirectory$MH();
        try {
            return (int)mh$.invokeExact(ServiceHandle, DirectoryType, PathBuffer, PathBufferLength, RequiredBufferLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _MODEMDEVCAPS* PMODEMDEVCAPS;
     * }
     */
    public static final OfAddress PMODEMDEVCAPS = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _MODEMDEVCAPS* LPMODEMDEVCAPS;
     * }
     */
    public static final OfAddress LPMODEMDEVCAPS = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _MODEMSETTINGS* PMODEMSETTINGS;
     * }
     */
    public static final OfAddress PMODEMSETTINGS = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct _MODEMSETTINGS* LPMODEMSETTINGS;
     * }
     */
    public static final OfAddress LPMODEMSETTINGS = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct HIMC__* HIMC;
     * }
     */
    public static final OfAddress HIMC = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct HIMCC__* HIMCC;
     * }
     */
    public static final OfAddress HIMCC = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct HKL__** LPHKL;
     * }
     */
    public static final OfAddress LPHKL = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagCOMPOSITIONFORM* PCOMPOSITIONFORM;
     * }
     */
    public static final OfAddress PCOMPOSITIONFORM = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagCOMPOSITIONFORM* NPCOMPOSITIONFORM;
     * }
     */
    public static final OfAddress NPCOMPOSITIONFORM = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagCOMPOSITIONFORM* LPCOMPOSITIONFORM;
     * }
     */
    public static final OfAddress LPCOMPOSITIONFORM = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagCANDIDATEFORM* PCANDIDATEFORM;
     * }
     */
    public static final OfAddress PCANDIDATEFORM = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagCANDIDATEFORM* NPCANDIDATEFORM;
     * }
     */
    public static final OfAddress NPCANDIDATEFORM = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagCANDIDATEFORM* LPCANDIDATEFORM;
     * }
     */
    public static final OfAddress LPCANDIDATEFORM = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagCANDIDATELIST* PCANDIDATELIST;
     * }
     */
    public static final OfAddress PCANDIDATELIST = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagCANDIDATELIST* NPCANDIDATELIST;
     * }
     */
    public static final OfAddress NPCANDIDATELIST = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagCANDIDATELIST* LPCANDIDATELIST;
     * }
     */
    public static final OfAddress LPCANDIDATELIST = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagREGISTERWORDA* PREGISTERWORDA;
     * }
     */
    public static final OfAddress PREGISTERWORDA = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagREGISTERWORDA* NPREGISTERWORDA;
     * }
     */
    public static final OfAddress NPREGISTERWORDA = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagREGISTERWORDA* LPREGISTERWORDA;
     * }
     */
    public static final OfAddress LPREGISTERWORDA = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagREGISTERWORDW* PREGISTERWORDW;
     * }
     */
    public static final OfAddress PREGISTERWORDW = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagREGISTERWORDW* NPREGISTERWORDW;
     * }
     */
    public static final OfAddress NPREGISTERWORDW = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagREGISTERWORDW* LPREGISTERWORDW;
     * }
     */
    public static final OfAddress LPREGISTERWORDW = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagREGISTERWORDA* PREGISTERWORD;
     * }
     */
    public static final OfAddress PREGISTERWORD = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagREGISTERWORDA* NPREGISTERWORD;
     * }
     */
    public static final OfAddress NPREGISTERWORD = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagREGISTERWORDA* LPREGISTERWORD;
     * }
     */
    public static final OfAddress LPREGISTERWORD = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagRECONVERTSTRING* PRECONVERTSTRING;
     * }
     */
    public static final OfAddress PRECONVERTSTRING = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagRECONVERTSTRING* NPRECONVERTSTRING;
     * }
     */
    public static final OfAddress NPRECONVERTSTRING = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagRECONVERTSTRING* LPRECONVERTSTRING;
     * }
     */
    public static final OfAddress LPRECONVERTSTRING = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagSTYLEBUFA* PSTYLEBUFA;
     * }
     */
    public static final OfAddress PSTYLEBUFA = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagSTYLEBUFA* NPSTYLEBUFA;
     * }
     */
    public static final OfAddress NPSTYLEBUFA = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagSTYLEBUFA* LPSTYLEBUFA;
     * }
     */
    public static final OfAddress LPSTYLEBUFA = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagSTYLEBUFW* PSTYLEBUFW;
     * }
     */
    public static final OfAddress PSTYLEBUFW = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagSTYLEBUFW* NPSTYLEBUFW;
     * }
     */
    public static final OfAddress NPSTYLEBUFW = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagSTYLEBUFW* LPSTYLEBUFW;
     * }
     */
    public static final OfAddress LPSTYLEBUFW = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagSTYLEBUFA* PSTYLEBUF;
     * }
     */
    public static final OfAddress PSTYLEBUF = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagSTYLEBUFA* NPSTYLEBUF;
     * }
     */
    public static final OfAddress NPSTYLEBUF = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagSTYLEBUFA* LPSTYLEBUF;
     * }
     */
    public static final OfAddress LPSTYLEBUF = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagIMEMENUITEMINFOA* PIMEMENUITEMINFOA;
     * }
     */
    public static final OfAddress PIMEMENUITEMINFOA = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagIMEMENUITEMINFOA* NPIMEMENUITEMINFOA;
     * }
     */
    public static final OfAddress NPIMEMENUITEMINFOA = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagIMEMENUITEMINFOA* LPIMEMENUITEMINFOA;
     * }
     */
    public static final OfAddress LPIMEMENUITEMINFOA = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagIMEMENUITEMINFOW* PIMEMENUITEMINFOW;
     * }
     */
    public static final OfAddress PIMEMENUITEMINFOW = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagIMEMENUITEMINFOW* NPIMEMENUITEMINFOW;
     * }
     */
    public static final OfAddress NPIMEMENUITEMINFOW = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagIMEMENUITEMINFOW* LPIMEMENUITEMINFOW;
     * }
     */
    public static final OfAddress LPIMEMENUITEMINFOW = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagIMEMENUITEMINFOA* PIMEMENUITEMINFO;
     * }
     */
    public static final OfAddress PIMEMENUITEMINFO = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagIMEMENUITEMINFOA* NPIMEMENUITEMINFO;
     * }
     */
    public static final OfAddress NPIMEMENUITEMINFO = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagIMEMENUITEMINFOA* LPIMEMENUITEMINFO;
     * }
     */
    public static final OfAddress LPIMEMENUITEMINFO = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagIMECHARPOSITION* PIMECHARPOSITION;
     * }
     */
    public static final OfAddress PIMECHARPOSITION = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagIMECHARPOSITION* NPIMECHARPOSITION;
     * }
     */
    public static final OfAddress NPIMECHARPOSITION = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct tagIMECHARPOSITION* LPIMECHARPOSITION;
     * }
     */
    public static final OfAddress LPIMECHARPOSITION = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle ImmInstallIMEA$MH() {
        return RuntimeHelper.requireNonNull(constants$1264.ImmInstallIMEA$MH,"ImmInstallIMEA");
    }
    /**
     * {@snippet :
     * HKL ImmInstallIMEA(LPCSTR lpszIMEFileName, LPCSTR lpszLayoutText);
     * }
     */
    public static MemorySegment ImmInstallIMEA(MemorySegment lpszIMEFileName, MemorySegment lpszLayoutText) {
        var mh$ = ImmInstallIMEA$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpszIMEFileName, lpszLayoutText);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmInstallIMEW$MH() {
        return RuntimeHelper.requireNonNull(constants$1264.ImmInstallIMEW$MH,"ImmInstallIMEW");
    }
    /**
     * {@snippet :
     * HKL ImmInstallIMEW(LPCWSTR lpszIMEFileName, LPCWSTR lpszLayoutText);
     * }
     */
    public static MemorySegment ImmInstallIMEW(MemorySegment lpszIMEFileName, MemorySegment lpszLayoutText) {
        var mh$ = ImmInstallIMEW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lpszIMEFileName, lpszLayoutText);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetDefaultIMEWnd$MH() {
        return RuntimeHelper.requireNonNull(constants$1264.ImmGetDefaultIMEWnd$MH,"ImmGetDefaultIMEWnd");
    }
    /**
     * {@snippet :
     * HWND ImmGetDefaultIMEWnd(HWND);
     * }
     */
    public static MemorySegment ImmGetDefaultIMEWnd(MemorySegment x0) {
        var mh$ = ImmGetDefaultIMEWnd$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetDescriptionA$MH() {
        return RuntimeHelper.requireNonNull(constants$1264.ImmGetDescriptionA$MH,"ImmGetDescriptionA");
    }
    /**
     * {@snippet :
     * UINT ImmGetDescriptionA(HKL, LPSTR lpszDescription, UINT uBufLen);
     * }
     */
    public static int ImmGetDescriptionA(MemorySegment x0, MemorySegment lpszDescription, int uBufLen) {
        var mh$ = ImmGetDescriptionA$MH();
        try {
            return (int)mh$.invokeExact(x0, lpszDescription, uBufLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetDescriptionW$MH() {
        return RuntimeHelper.requireNonNull(constants$1264.ImmGetDescriptionW$MH,"ImmGetDescriptionW");
    }
    /**
     * {@snippet :
     * UINT ImmGetDescriptionW(HKL, LPWSTR lpszDescription, UINT uBufLen);
     * }
     */
    public static int ImmGetDescriptionW(MemorySegment x0, MemorySegment lpszDescription, int uBufLen) {
        var mh$ = ImmGetDescriptionW$MH();
        try {
            return (int)mh$.invokeExact(x0, lpszDescription, uBufLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetIMEFileNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$1265.ImmGetIMEFileNameA$MH,"ImmGetIMEFileNameA");
    }
    /**
     * {@snippet :
     * UINT ImmGetIMEFileNameA(HKL, LPSTR lpszFileName, UINT uBufLen);
     * }
     */
    public static int ImmGetIMEFileNameA(MemorySegment x0, MemorySegment lpszFileName, int uBufLen) {
        var mh$ = ImmGetIMEFileNameA$MH();
        try {
            return (int)mh$.invokeExact(x0, lpszFileName, uBufLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetIMEFileNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$1265.ImmGetIMEFileNameW$MH,"ImmGetIMEFileNameW");
    }
    /**
     * {@snippet :
     * UINT ImmGetIMEFileNameW(HKL, LPWSTR lpszFileName, UINT uBufLen);
     * }
     */
    public static int ImmGetIMEFileNameW(MemorySegment x0, MemorySegment lpszFileName, int uBufLen) {
        var mh$ = ImmGetIMEFileNameW$MH();
        try {
            return (int)mh$.invokeExact(x0, lpszFileName, uBufLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$1265.ImmGetProperty$MH,"ImmGetProperty");
    }
    /**
     * {@snippet :
     * DWORD ImmGetProperty(HKL, DWORD);
     * }
     */
    public static int ImmGetProperty(MemorySegment x0, int x1) {
        var mh$ = ImmGetProperty$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmIsIME$MH() {
        return RuntimeHelper.requireNonNull(constants$1265.ImmIsIME$MH,"ImmIsIME");
    }
    /**
     * {@snippet :
     * BOOL ImmIsIME(HKL);
     * }
     */
    public static int ImmIsIME(MemorySegment x0) {
        var mh$ = ImmIsIME$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmSimulateHotKey$MH() {
        return RuntimeHelper.requireNonNull(constants$1265.ImmSimulateHotKey$MH,"ImmSimulateHotKey");
    }
    /**
     * {@snippet :
     * BOOL ImmSimulateHotKey(HWND, DWORD);
     * }
     */
    public static int ImmSimulateHotKey(MemorySegment x0, int x1) {
        var mh$ = ImmSimulateHotKey$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmCreateContext$MH() {
        return RuntimeHelper.requireNonNull(constants$1265.ImmCreateContext$MH,"ImmCreateContext");
    }
    /**
     * {@snippet :
     * HIMC ImmCreateContext();
     * }
     */
    public static MemorySegment ImmCreateContext() {
        var mh$ = ImmCreateContext$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmDestroyContext$MH() {
        return RuntimeHelper.requireNonNull(constants$1266.ImmDestroyContext$MH,"ImmDestroyContext");
    }
    /**
     * {@snippet :
     * BOOL ImmDestroyContext(HIMC);
     * }
     */
    public static int ImmDestroyContext(MemorySegment x0) {
        var mh$ = ImmDestroyContext$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetContext$MH() {
        return RuntimeHelper.requireNonNull(constants$1266.ImmGetContext$MH,"ImmGetContext");
    }
    /**
     * {@snippet :
     * HIMC ImmGetContext(HWND);
     * }
     */
    public static MemorySegment ImmGetContext(MemorySegment x0) {
        var mh$ = ImmGetContext$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmReleaseContext$MH() {
        return RuntimeHelper.requireNonNull(constants$1266.ImmReleaseContext$MH,"ImmReleaseContext");
    }
    /**
     * {@snippet :
     * BOOL ImmReleaseContext(HWND, HIMC);
     * }
     */
    public static int ImmReleaseContext(MemorySegment x0, MemorySegment x1) {
        var mh$ = ImmReleaseContext$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmAssociateContext$MH() {
        return RuntimeHelper.requireNonNull(constants$1266.ImmAssociateContext$MH,"ImmAssociateContext");
    }
    /**
     * {@snippet :
     * HIMC ImmAssociateContext(HWND, HIMC);
     * }
     */
    public static MemorySegment ImmAssociateContext(MemorySegment x0, MemorySegment x1) {
        var mh$ = ImmAssociateContext$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmAssociateContextEx$MH() {
        return RuntimeHelper.requireNonNull(constants$1266.ImmAssociateContextEx$MH,"ImmAssociateContextEx");
    }
    /**
     * {@snippet :
     * BOOL ImmAssociateContextEx(HWND, HIMC, DWORD);
     * }
     */
    public static int ImmAssociateContextEx(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = ImmAssociateContextEx$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetCompositionStringA$MH() {
        return RuntimeHelper.requireNonNull(constants$1266.ImmGetCompositionStringA$MH,"ImmGetCompositionStringA");
    }
    /**
     * {@snippet :
     * LONG ImmGetCompositionStringA(HIMC, DWORD, LPVOID lpBuf, DWORD dwBufLen);
     * }
     */
    public static int ImmGetCompositionStringA(MemorySegment x0, int x1, MemorySegment lpBuf, int dwBufLen) {
        var mh$ = ImmGetCompositionStringA$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, lpBuf, dwBufLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetCompositionStringW$MH() {
        return RuntimeHelper.requireNonNull(constants$1267.ImmGetCompositionStringW$MH,"ImmGetCompositionStringW");
    }
    /**
     * {@snippet :
     * LONG ImmGetCompositionStringW(HIMC, DWORD, LPVOID lpBuf, DWORD dwBufLen);
     * }
     */
    public static int ImmGetCompositionStringW(MemorySegment x0, int x1, MemorySegment lpBuf, int dwBufLen) {
        var mh$ = ImmGetCompositionStringW$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, lpBuf, dwBufLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmSetCompositionStringA$MH() {
        return RuntimeHelper.requireNonNull(constants$1267.ImmSetCompositionStringA$MH,"ImmSetCompositionStringA");
    }
    /**
     * {@snippet :
     * BOOL ImmSetCompositionStringA(HIMC, DWORD dwIndex, LPVOID lpComp, DWORD dwCompLen, LPVOID lpRead, DWORD dwReadLen);
     * }
     */
    public static int ImmSetCompositionStringA(MemorySegment x0, int dwIndex, MemorySegment lpComp, int dwCompLen, MemorySegment lpRead, int dwReadLen) {
        var mh$ = ImmSetCompositionStringA$MH();
        try {
            return (int)mh$.invokeExact(x0, dwIndex, lpComp, dwCompLen, lpRead, dwReadLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmSetCompositionStringW$MH() {
        return RuntimeHelper.requireNonNull(constants$1267.ImmSetCompositionStringW$MH,"ImmSetCompositionStringW");
    }
    /**
     * {@snippet :
     * BOOL ImmSetCompositionStringW(HIMC, DWORD dwIndex, LPVOID lpComp, DWORD dwCompLen, LPVOID lpRead, DWORD dwReadLen);
     * }
     */
    public static int ImmSetCompositionStringW(MemorySegment x0, int dwIndex, MemorySegment lpComp, int dwCompLen, MemorySegment lpRead, int dwReadLen) {
        var mh$ = ImmSetCompositionStringW$MH();
        try {
            return (int)mh$.invokeExact(x0, dwIndex, lpComp, dwCompLen, lpRead, dwReadLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetCandidateListCountA$MH() {
        return RuntimeHelper.requireNonNull(constants$1267.ImmGetCandidateListCountA$MH,"ImmGetCandidateListCountA");
    }
    /**
     * {@snippet :
     * DWORD ImmGetCandidateListCountA(HIMC, LPDWORD lpdwListCount);
     * }
     */
    public static int ImmGetCandidateListCountA(MemorySegment x0, MemorySegment lpdwListCount) {
        var mh$ = ImmGetCandidateListCountA$MH();
        try {
            return (int)mh$.invokeExact(x0, lpdwListCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetCandidateListCountW$MH() {
        return RuntimeHelper.requireNonNull(constants$1267.ImmGetCandidateListCountW$MH,"ImmGetCandidateListCountW");
    }
    /**
     * {@snippet :
     * DWORD ImmGetCandidateListCountW(HIMC, LPDWORD lpdwListCount);
     * }
     */
    public static int ImmGetCandidateListCountW(MemorySegment x0, MemorySegment lpdwListCount) {
        var mh$ = ImmGetCandidateListCountW$MH();
        try {
            return (int)mh$.invokeExact(x0, lpdwListCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetCandidateListA$MH() {
        return RuntimeHelper.requireNonNull(constants$1267.ImmGetCandidateListA$MH,"ImmGetCandidateListA");
    }
    /**
     * {@snippet :
     * DWORD ImmGetCandidateListA(HIMC, DWORD deIndex, LPCANDIDATELIST lpCandList, DWORD dwBufLen);
     * }
     */
    public static int ImmGetCandidateListA(MemorySegment x0, int deIndex, MemorySegment lpCandList, int dwBufLen) {
        var mh$ = ImmGetCandidateListA$MH();
        try {
            return (int)mh$.invokeExact(x0, deIndex, lpCandList, dwBufLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetCandidateListW$MH() {
        return RuntimeHelper.requireNonNull(constants$1268.ImmGetCandidateListW$MH,"ImmGetCandidateListW");
    }
    /**
     * {@snippet :
     * DWORD ImmGetCandidateListW(HIMC, DWORD deIndex, LPCANDIDATELIST lpCandList, DWORD dwBufLen);
     * }
     */
    public static int ImmGetCandidateListW(MemorySegment x0, int deIndex, MemorySegment lpCandList, int dwBufLen) {
        var mh$ = ImmGetCandidateListW$MH();
        try {
            return (int)mh$.invokeExact(x0, deIndex, lpCandList, dwBufLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetGuideLineA$MH() {
        return RuntimeHelper.requireNonNull(constants$1268.ImmGetGuideLineA$MH,"ImmGetGuideLineA");
    }
    /**
     * {@snippet :
     * DWORD ImmGetGuideLineA(HIMC, DWORD dwIndex, LPSTR lpBuf, DWORD dwBufLen);
     * }
     */
    public static int ImmGetGuideLineA(MemorySegment x0, int dwIndex, MemorySegment lpBuf, int dwBufLen) {
        var mh$ = ImmGetGuideLineA$MH();
        try {
            return (int)mh$.invokeExact(x0, dwIndex, lpBuf, dwBufLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetGuideLineW$MH() {
        return RuntimeHelper.requireNonNull(constants$1268.ImmGetGuideLineW$MH,"ImmGetGuideLineW");
    }
    /**
     * {@snippet :
     * DWORD ImmGetGuideLineW(HIMC, DWORD dwIndex, LPWSTR lpBuf, DWORD dwBufLen);
     * }
     */
    public static int ImmGetGuideLineW(MemorySegment x0, int dwIndex, MemorySegment lpBuf, int dwBufLen) {
        var mh$ = ImmGetGuideLineW$MH();
        try {
            return (int)mh$.invokeExact(x0, dwIndex, lpBuf, dwBufLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetConversionStatus$MH() {
        return RuntimeHelper.requireNonNull(constants$1268.ImmGetConversionStatus$MH,"ImmGetConversionStatus");
    }
    /**
     * {@snippet :
     * BOOL ImmGetConversionStatus(HIMC, LPDWORD lpfdwConversion, LPDWORD lpfdwSentence);
     * }
     */
    public static int ImmGetConversionStatus(MemorySegment x0, MemorySegment lpfdwConversion, MemorySegment lpfdwSentence) {
        var mh$ = ImmGetConversionStatus$MH();
        try {
            return (int)mh$.invokeExact(x0, lpfdwConversion, lpfdwSentence);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmSetConversionStatus$MH() {
        return RuntimeHelper.requireNonNull(constants$1268.ImmSetConversionStatus$MH,"ImmSetConversionStatus");
    }
    /**
     * {@snippet :
     * BOOL ImmSetConversionStatus(HIMC, DWORD, DWORD);
     * }
     */
    public static int ImmSetConversionStatus(MemorySegment x0, int x1, int x2) {
        var mh$ = ImmSetConversionStatus$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetOpenStatus$MH() {
        return RuntimeHelper.requireNonNull(constants$1268.ImmGetOpenStatus$MH,"ImmGetOpenStatus");
    }
    /**
     * {@snippet :
     * BOOL ImmGetOpenStatus(HIMC);
     * }
     */
    public static int ImmGetOpenStatus(MemorySegment x0) {
        var mh$ = ImmGetOpenStatus$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmSetOpenStatus$MH() {
        return RuntimeHelper.requireNonNull(constants$1269.ImmSetOpenStatus$MH,"ImmSetOpenStatus");
    }
    /**
     * {@snippet :
     * BOOL ImmSetOpenStatus(HIMC, BOOL);
     * }
     */
    public static int ImmSetOpenStatus(MemorySegment x0, int x1) {
        var mh$ = ImmSetOpenStatus$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetCompositionFontA$MH() {
        return RuntimeHelper.requireNonNull(constants$1269.ImmGetCompositionFontA$MH,"ImmGetCompositionFontA");
    }
    /**
     * {@snippet :
     * BOOL ImmGetCompositionFontA(HIMC, LPLOGFONTA lplf);
     * }
     */
    public static int ImmGetCompositionFontA(MemorySegment x0, MemorySegment lplf) {
        var mh$ = ImmGetCompositionFontA$MH();
        try {
            return (int)mh$.invokeExact(x0, lplf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetCompositionFontW$MH() {
        return RuntimeHelper.requireNonNull(constants$1269.ImmGetCompositionFontW$MH,"ImmGetCompositionFontW");
    }
    /**
     * {@snippet :
     * BOOL ImmGetCompositionFontW(HIMC, LPLOGFONTW lplf);
     * }
     */
    public static int ImmGetCompositionFontW(MemorySegment x0, MemorySegment lplf) {
        var mh$ = ImmGetCompositionFontW$MH();
        try {
            return (int)mh$.invokeExact(x0, lplf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmSetCompositionFontA$MH() {
        return RuntimeHelper.requireNonNull(constants$1269.ImmSetCompositionFontA$MH,"ImmSetCompositionFontA");
    }
    /**
     * {@snippet :
     * BOOL ImmSetCompositionFontA(HIMC, LPLOGFONTA lplf);
     * }
     */
    public static int ImmSetCompositionFontA(MemorySegment x0, MemorySegment lplf) {
        var mh$ = ImmSetCompositionFontA$MH();
        try {
            return (int)mh$.invokeExact(x0, lplf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmSetCompositionFontW$MH() {
        return RuntimeHelper.requireNonNull(constants$1269.ImmSetCompositionFontW$MH,"ImmSetCompositionFontW");
    }
    /**
     * {@snippet :
     * BOOL ImmSetCompositionFontW(HIMC, LPLOGFONTW lplf);
     * }
     */
    public static int ImmSetCompositionFontW(MemorySegment x0, MemorySegment lplf) {
        var mh$ = ImmSetCompositionFontW$MH();
        try {
            return (int)mh$.invokeExact(x0, lplf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmConfigureIMEA$MH() {
        return RuntimeHelper.requireNonNull(constants$1269.ImmConfigureIMEA$MH,"ImmConfigureIMEA");
    }
    /**
     * {@snippet :
     * BOOL ImmConfigureIMEA(HKL, HWND, DWORD, LPVOID);
     * }
     */
    public static int ImmConfigureIMEA(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3) {
        var mh$ = ImmConfigureIMEA$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmConfigureIMEW$MH() {
        return RuntimeHelper.requireNonNull(constants$1270.ImmConfigureIMEW$MH,"ImmConfigureIMEW");
    }
    /**
     * {@snippet :
     * BOOL ImmConfigureIMEW(HKL, HWND, DWORD, LPVOID);
     * }
     */
    public static int ImmConfigureIMEW(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3) {
        var mh$ = ImmConfigureIMEW$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmEscapeA$MH() {
        return RuntimeHelper.requireNonNull(constants$1270.ImmEscapeA$MH,"ImmEscapeA");
    }
    /**
     * {@snippet :
     * LRESULT ImmEscapeA(HKL, HIMC, UINT, LPVOID);
     * }
     */
    public static long ImmEscapeA(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3) {
        var mh$ = ImmEscapeA$MH();
        try {
            return (long)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmEscapeW$MH() {
        return RuntimeHelper.requireNonNull(constants$1270.ImmEscapeW$MH,"ImmEscapeW");
    }
    /**
     * {@snippet :
     * LRESULT ImmEscapeW(HKL, HIMC, UINT, LPVOID);
     * }
     */
    public static long ImmEscapeW(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3) {
        var mh$ = ImmEscapeW$MH();
        try {
            return (long)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetConversionListA$MH() {
        return RuntimeHelper.requireNonNull(constants$1270.ImmGetConversionListA$MH,"ImmGetConversionListA");
    }
    /**
     * {@snippet :
     * DWORD ImmGetConversionListA(HKL, HIMC, LPCSTR lpSrc, LPCANDIDATELIST lpDst, DWORD dwBufLen, UINT uFlag);
     * }
     */
    public static int ImmGetConversionListA(MemorySegment x0, MemorySegment x1, MemorySegment lpSrc, MemorySegment lpDst, int dwBufLen, int uFlag) {
        var mh$ = ImmGetConversionListA$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, lpSrc, lpDst, dwBufLen, uFlag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetConversionListW$MH() {
        return RuntimeHelper.requireNonNull(constants$1270.ImmGetConversionListW$MH,"ImmGetConversionListW");
    }
    /**
     * {@snippet :
     * DWORD ImmGetConversionListW(HKL, HIMC, LPCWSTR lpSrc, LPCANDIDATELIST lpDst, DWORD dwBufLen, UINT uFlag);
     * }
     */
    public static int ImmGetConversionListW(MemorySegment x0, MemorySegment x1, MemorySegment lpSrc, MemorySegment lpDst, int dwBufLen, int uFlag) {
        var mh$ = ImmGetConversionListW$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, lpSrc, lpDst, dwBufLen, uFlag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmNotifyIME$MH() {
        return RuntimeHelper.requireNonNull(constants$1270.ImmNotifyIME$MH,"ImmNotifyIME");
    }
    /**
     * {@snippet :
     * BOOL ImmNotifyIME(HIMC, DWORD dwAction, DWORD dwIndex, DWORD dwValue);
     * }
     */
    public static int ImmNotifyIME(MemorySegment x0, int dwAction, int dwIndex, int dwValue) {
        var mh$ = ImmNotifyIME$MH();
        try {
            return (int)mh$.invokeExact(x0, dwAction, dwIndex, dwValue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetStatusWindowPos$MH() {
        return RuntimeHelper.requireNonNull(constants$1271.ImmGetStatusWindowPos$MH,"ImmGetStatusWindowPos");
    }
    /**
     * {@snippet :
     * BOOL ImmGetStatusWindowPos(HIMC, LPPOINT lpptPos);
     * }
     */
    public static int ImmGetStatusWindowPos(MemorySegment x0, MemorySegment lpptPos) {
        var mh$ = ImmGetStatusWindowPos$MH();
        try {
            return (int)mh$.invokeExact(x0, lpptPos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmSetStatusWindowPos$MH() {
        return RuntimeHelper.requireNonNull(constants$1271.ImmSetStatusWindowPos$MH,"ImmSetStatusWindowPos");
    }
    /**
     * {@snippet :
     * BOOL ImmSetStatusWindowPos(HIMC, LPPOINT lpptPos);
     * }
     */
    public static int ImmSetStatusWindowPos(MemorySegment x0, MemorySegment lpptPos) {
        var mh$ = ImmSetStatusWindowPos$MH();
        try {
            return (int)mh$.invokeExact(x0, lpptPos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetCompositionWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$1271.ImmGetCompositionWindow$MH,"ImmGetCompositionWindow");
    }
    /**
     * {@snippet :
     * BOOL ImmGetCompositionWindow(HIMC, LPCOMPOSITIONFORM lpCompForm);
     * }
     */
    public static int ImmGetCompositionWindow(MemorySegment x0, MemorySegment lpCompForm) {
        var mh$ = ImmGetCompositionWindow$MH();
        try {
            return (int)mh$.invokeExact(x0, lpCompForm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmSetCompositionWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$1271.ImmSetCompositionWindow$MH,"ImmSetCompositionWindow");
    }
    /**
     * {@snippet :
     * BOOL ImmSetCompositionWindow(HIMC, LPCOMPOSITIONFORM lpCompForm);
     * }
     */
    public static int ImmSetCompositionWindow(MemorySegment x0, MemorySegment lpCompForm) {
        var mh$ = ImmSetCompositionWindow$MH();
        try {
            return (int)mh$.invokeExact(x0, lpCompForm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetCandidateWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$1271.ImmGetCandidateWindow$MH,"ImmGetCandidateWindow");
    }
    /**
     * {@snippet :
     * BOOL ImmGetCandidateWindow(HIMC, DWORD, LPCANDIDATEFORM lpCandidate);
     * }
     */
    public static int ImmGetCandidateWindow(MemorySegment x0, int x1, MemorySegment lpCandidate) {
        var mh$ = ImmGetCandidateWindow$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, lpCandidate);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmSetCandidateWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$1271.ImmSetCandidateWindow$MH,"ImmSetCandidateWindow");
    }
    /**
     * {@snippet :
     * BOOL ImmSetCandidateWindow(HIMC, LPCANDIDATEFORM lpCandidate);
     * }
     */
    public static int ImmSetCandidateWindow(MemorySegment x0, MemorySegment lpCandidate) {
        var mh$ = ImmSetCandidateWindow$MH();
        try {
            return (int)mh$.invokeExact(x0, lpCandidate);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmIsUIMessageA$MH() {
        return RuntimeHelper.requireNonNull(constants$1272.ImmIsUIMessageA$MH,"ImmIsUIMessageA");
    }
    /**
     * {@snippet :
     * BOOL ImmIsUIMessageA(HWND, UINT, WPARAM, LPARAM);
     * }
     */
    public static int ImmIsUIMessageA(MemorySegment x0, int x1, long x2, long x3) {
        var mh$ = ImmIsUIMessageA$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmIsUIMessageW$MH() {
        return RuntimeHelper.requireNonNull(constants$1272.ImmIsUIMessageW$MH,"ImmIsUIMessageW");
    }
    /**
     * {@snippet :
     * BOOL ImmIsUIMessageW(HWND, UINT, WPARAM, LPARAM);
     * }
     */
    public static int ImmIsUIMessageW(MemorySegment x0, int x1, long x2, long x3) {
        var mh$ = ImmIsUIMessageW$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetVirtualKey$MH() {
        return RuntimeHelper.requireNonNull(constants$1272.ImmGetVirtualKey$MH,"ImmGetVirtualKey");
    }
    /**
     * {@snippet :
     * UINT ImmGetVirtualKey(HWND);
     * }
     */
    public static int ImmGetVirtualKey(MemorySegment x0) {
        var mh$ = ImmGetVirtualKey$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmRegisterWordA$MH() {
        return RuntimeHelper.requireNonNull(constants$1273.ImmRegisterWordA$MH,"ImmRegisterWordA");
    }
    /**
     * {@snippet :
     * BOOL ImmRegisterWordA(HKL, LPCSTR lpszReading, DWORD, LPCSTR lpszRegister);
     * }
     */
    public static int ImmRegisterWordA(MemorySegment x0, MemorySegment lpszReading, int x2, MemorySegment lpszRegister) {
        var mh$ = ImmRegisterWordA$MH();
        try {
            return (int)mh$.invokeExact(x0, lpszReading, x2, lpszRegister);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmRegisterWordW$MH() {
        return RuntimeHelper.requireNonNull(constants$1273.ImmRegisterWordW$MH,"ImmRegisterWordW");
    }
    /**
     * {@snippet :
     * BOOL ImmRegisterWordW(HKL, LPCWSTR lpszReading, DWORD, LPCWSTR lpszRegister);
     * }
     */
    public static int ImmRegisterWordW(MemorySegment x0, MemorySegment lpszReading, int x2, MemorySegment lpszRegister) {
        var mh$ = ImmRegisterWordW$MH();
        try {
            return (int)mh$.invokeExact(x0, lpszReading, x2, lpszRegister);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmUnregisterWordA$MH() {
        return RuntimeHelper.requireNonNull(constants$1273.ImmUnregisterWordA$MH,"ImmUnregisterWordA");
    }
    /**
     * {@snippet :
     * BOOL ImmUnregisterWordA(HKL, LPCSTR lpszReading, DWORD, LPCSTR lpszUnregister);
     * }
     */
    public static int ImmUnregisterWordA(MemorySegment x0, MemorySegment lpszReading, int x2, MemorySegment lpszUnregister) {
        var mh$ = ImmUnregisterWordA$MH();
        try {
            return (int)mh$.invokeExact(x0, lpszReading, x2, lpszUnregister);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmUnregisterWordW$MH() {
        return RuntimeHelper.requireNonNull(constants$1273.ImmUnregisterWordW$MH,"ImmUnregisterWordW");
    }
    /**
     * {@snippet :
     * BOOL ImmUnregisterWordW(HKL, LPCWSTR lpszReading, DWORD, LPCWSTR lpszUnregister);
     * }
     */
    public static int ImmUnregisterWordW(MemorySegment x0, MemorySegment lpszReading, int x2, MemorySegment lpszUnregister) {
        var mh$ = ImmUnregisterWordW$MH();
        try {
            return (int)mh$.invokeExact(x0, lpszReading, x2, lpszUnregister);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetRegisterWordStyleA$MH() {
        return RuntimeHelper.requireNonNull(constants$1273.ImmGetRegisterWordStyleA$MH,"ImmGetRegisterWordStyleA");
    }
    /**
     * {@snippet :
     * UINT ImmGetRegisterWordStyleA(HKL, UINT nItem, LPSTYLEBUFA lpStyleBuf);
     * }
     */
    public static int ImmGetRegisterWordStyleA(MemorySegment x0, int nItem, MemorySegment lpStyleBuf) {
        var mh$ = ImmGetRegisterWordStyleA$MH();
        try {
            return (int)mh$.invokeExact(x0, nItem, lpStyleBuf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetRegisterWordStyleW$MH() {
        return RuntimeHelper.requireNonNull(constants$1274.ImmGetRegisterWordStyleW$MH,"ImmGetRegisterWordStyleW");
    }
    /**
     * {@snippet :
     * UINT ImmGetRegisterWordStyleW(HKL, UINT nItem, LPSTYLEBUFW lpStyleBuf);
     * }
     */
    public static int ImmGetRegisterWordStyleW(MemorySegment x0, int nItem, MemorySegment lpStyleBuf) {
        var mh$ = ImmGetRegisterWordStyleW$MH();
        try {
            return (int)mh$.invokeExact(x0, nItem, lpStyleBuf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmEnumRegisterWordA$MH() {
        return RuntimeHelper.requireNonNull(constants$1274.ImmEnumRegisterWordA$MH,"ImmEnumRegisterWordA");
    }
    /**
     * {@snippet :
     * UINT ImmEnumRegisterWordA(HKL, REGISTERWORDENUMPROCA, LPCSTR lpszReading, DWORD, LPCSTR lpszRegister, LPVOID);
     * }
     */
    public static int ImmEnumRegisterWordA(MemorySegment x0, MemorySegment x1, MemorySegment lpszReading, int x3, MemorySegment lpszRegister, MemorySegment x5) {
        var mh$ = ImmEnumRegisterWordA$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, lpszReading, x3, lpszRegister, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmEnumRegisterWordW$MH() {
        return RuntimeHelper.requireNonNull(constants$1274.ImmEnumRegisterWordW$MH,"ImmEnumRegisterWordW");
    }
    /**
     * {@snippet :
     * UINT ImmEnumRegisterWordW(HKL, REGISTERWORDENUMPROCW, LPCWSTR lpszReading, DWORD, LPCWSTR lpszRegister, LPVOID);
     * }
     */
    public static int ImmEnumRegisterWordW(MemorySegment x0, MemorySegment x1, MemorySegment lpszReading, int x3, MemorySegment lpszRegister, MemorySegment x5) {
        var mh$ = ImmEnumRegisterWordW$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, lpszReading, x3, lpszRegister, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmDisableIME$MH() {
        return RuntimeHelper.requireNonNull(constants$1274.ImmDisableIME$MH,"ImmDisableIME");
    }
    /**
     * {@snippet :
     * BOOL ImmDisableIME(DWORD);
     * }
     */
    public static int ImmDisableIME(int x0) {
        var mh$ = ImmDisableIME$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmEnumInputContext$MH() {
        return RuntimeHelper.requireNonNull(constants$1274.ImmEnumInputContext$MH,"ImmEnumInputContext");
    }
    /**
     * {@snippet :
     * BOOL ImmEnumInputContext(DWORD idThread, IMCENUMPROC lpfn, LPARAM lParam);
     * }
     */
    public static int ImmEnumInputContext(int idThread, MemorySegment lpfn, long lParam) {
        var mh$ = ImmEnumInputContext$MH();
        try {
            return (int)mh$.invokeExact(idThread, lpfn, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetImeMenuItemsA$MH() {
        return RuntimeHelper.requireNonNull(constants$1274.ImmGetImeMenuItemsA$MH,"ImmGetImeMenuItemsA");
    }
    /**
     * {@snippet :
     * DWORD ImmGetImeMenuItemsA(HIMC, DWORD, DWORD, LPIMEMENUITEMINFOA lpImeParentMenu, LPIMEMENUITEMINFOA lpImeMenu, DWORD dwSize);
     * }
     */
    public static int ImmGetImeMenuItemsA(MemorySegment x0, int x1, int x2, MemorySegment lpImeParentMenu, MemorySegment lpImeMenu, int dwSize) {
        var mh$ = ImmGetImeMenuItemsA$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, lpImeParentMenu, lpImeMenu, dwSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetImeMenuItemsW$MH() {
        return RuntimeHelper.requireNonNull(constants$1275.ImmGetImeMenuItemsW$MH,"ImmGetImeMenuItemsW");
    }
    /**
     * {@snippet :
     * DWORD ImmGetImeMenuItemsW(HIMC, DWORD, DWORD, LPIMEMENUITEMINFOW lpImeParentMenu, LPIMEMENUITEMINFOW lpImeMenu, DWORD dwSize);
     * }
     */
    public static int ImmGetImeMenuItemsW(MemorySegment x0, int x1, int x2, MemorySegment lpImeParentMenu, MemorySegment lpImeMenu, int dwSize) {
        var mh$ = ImmGetImeMenuItemsW$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, lpImeParentMenu, lpImeMenu, dwSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmDisableTextFrameService$MH() {
        return RuntimeHelper.requireNonNull(constants$1275.ImmDisableTextFrameService$MH,"ImmDisableTextFrameService");
    }
    /**
     * {@snippet :
     * BOOL ImmDisableTextFrameService(DWORD idThread);
     * }
     */
    public static int ImmDisableTextFrameService(int idThread) {
        var mh$ = ImmDisableTextFrameService$MH();
        try {
            return (int)mh$.invokeExact(idThread);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmDisableLegacyIME$MH() {
        return RuntimeHelper.requireNonNull(constants$1275.ImmDisableLegacyIME$MH,"ImmDisableLegacyIME");
    }
    /**
     * {@snippet :
     * BOOL ImmDisableLegacyIME();
     * }
     */
    public static int ImmDisableLegacyIME() {
        var mh$ = ImmDisableLegacyIME$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * #define WINAPI_PARTITION_SERVER 0
     * }
     */
    public static int WINAPI_PARTITION_SERVER() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define WINAPI_PARTITION_PKG_WINTRUST 0
     * }
     */
    public static int WINAPI_PARTITION_PKG_WINTRUST() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define WINAPI_PARTITION_PKG_WEBSERVICES 0
     * }
     */
    public static int WINAPI_PARTITION_PKG_WEBSERVICES() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define WINAPI_PARTITION_PKG_EVENTLOGSERVICE 0
     * }
     */
    public static int WINAPI_PARTITION_PKG_EVENTLOGSERVICE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define WINAPI_PARTITION_PKG_VHD 0
     * }
     */
    public static int WINAPI_PARTITION_PKG_VHD() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define WINAPI_PARTITION_PKG_PERFCOUNTER 0
     * }
     */
    public static int WINAPI_PARTITION_PKG_PERFCOUNTER() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define WINAPI_PARTITION_PKG_SECURESTARTUP 0
     * }
     */
    public static int WINAPI_PARTITION_PKG_SECURESTARTUP() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define WINAPI_PARTITION_PKG_REMOTEFS 0
     * }
     */
    public static int WINAPI_PARTITION_PKG_REMOTEFS() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define WINAPI_PARTITION_PKG_BOOTABLESKU 0
     * }
     */
    public static int WINAPI_PARTITION_PKG_BOOTABLESKU() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define WINAPI_PARTITION_PKG_CMDTOOLS 0
     * }
     */
    public static int WINAPI_PARTITION_PKG_CMDTOOLS() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define WINAPI_PARTITION_PKG_DISM 0
     * }
     */
    public static int WINAPI_PARTITION_PKG_DISM() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define WINAPI_PARTITION_PKG_CORESETUP 0
     * }
     */
    public static int WINAPI_PARTITION_PKG_CORESETUP() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define WINAPI_PARTITION_PKG_APPRUNTIME 0
     * }
     */
    public static int WINAPI_PARTITION_PKG_APPRUNTIME() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define WINAPI_PARTITION_PKG_ESENT 0
     * }
     */
    public static int WINAPI_PARTITION_PKG_ESENT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define WINAPI_PARTITION_PKG_WINMGMT 0
     * }
     */
    public static int WINAPI_PARTITION_PKG_WINMGMT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define WINAPI_PARTITION_PKG_WNV 0
     * }
     */
    public static int WINAPI_PARTITION_PKG_WNV() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define WINAPI_PARTITION_PKG_CLUSTER 0
     * }
     */
    public static int WINAPI_PARTITION_PKG_CLUSTER() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define WINAPI_PARTITION_PKG_VSS 0
     * }
     */
    public static int WINAPI_PARTITION_PKG_VSS() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define WINAPI_PARTITION_PKG_TRAFFIC 0
     * }
     */
    public static int WINAPI_PARTITION_PKG_TRAFFIC() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define WINAPI_PARTITION_PKG_ISCSI 0
     * }
     */
    public static int WINAPI_PARTITION_PKG_ISCSI() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define WINAPI_PARTITION_PKG_STORAGE 0
     * }
     */
    public static int WINAPI_PARTITION_PKG_STORAGE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define WINAPI_PARTITION_PKG_MPSSVC 0
     * }
     */
    public static int WINAPI_PARTITION_PKG_MPSSVC() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define WINAPI_PARTITION_PKG_APPXDEPLOYMENT 0
     * }
     */
    public static int WINAPI_PARTITION_PKG_APPXDEPLOYMENT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define WINAPI_PARTITION_PKG_WER 0
     * }
     */
    public static int WINAPI_PARTITION_PKG_WER() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define WINAPI_FAMILY_APP 2
     * }
     */
    public static int WINAPI_FAMILY_APP() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define WINAPI_FAMILY 100
     * }
     */
    public static int WINAPI_FAMILY() {
        return (int)100L;
    }
    /**
     * {@snippet :
     * #define WINAPI_PARTITION_DESKTOP 1
     * }
     */
    public static int WINAPI_PARTITION_DESKTOP() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define WINAPI_PARTITION_APP 1
     * }
     */
    public static int WINAPI_PARTITION_APP() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define WINAPI_PARTITION_PC_APP 1
     * }
     */
    public static int WINAPI_PARTITION_PC_APP() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define WINAPI_PARTITION_PHONE_APP 0
     * }
     */
    public static int WINAPI_PARTITION_PHONE_APP() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define WINAPI_PARTITION_GAMES 1
     * }
     */
    public static int WINAPI_PARTITION_GAMES() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define WINAPI_PARTITION_SYSTEM 0
     * }
     */
    public static int WINAPI_PARTITION_SYSTEM() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define WINAPI_PARTITION_PHONE 0
     * }
     */
    public static int WINAPI_PARTITION_PHONE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define _WIN32_IE_NT4 512
     * }
     */
    public static int _WIN32_IE_NT4() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * #define _WIN32_IE_NT4SP1 512
     * }
     */
    public static int _WIN32_IE_NT4SP1() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * #define _WIN32_IE_NT4SP2 512
     * }
     */
    public static int _WIN32_IE_NT4SP2() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * #define _WIN32_IE_NT4SP3 770
     * }
     */
    public static int _WIN32_IE_NT4SP3() {
        return (int)770L;
    }
    /**
     * {@snippet :
     * #define _WIN32_IE_NT4SP4 1025
     * }
     */
    public static int _WIN32_IE_NT4SP4() {
        return (int)1025L;
    }
    /**
     * {@snippet :
     * #define _WIN32_IE_NT4SP5 1025
     * }
     */
    public static int _WIN32_IE_NT4SP5() {
        return (int)1025L;
    }
    /**
     * {@snippet :
     * #define _WIN32_IE_NT4SP6 1280
     * }
     */
    public static int _WIN32_IE_NT4SP6() {
        return (int)1280L;
    }
    /**
     * {@snippet :
     * #define _WIN32_IE_WIN98 1025
     * }
     */
    public static int _WIN32_IE_WIN98() {
        return (int)1025L;
    }
    /**
     * {@snippet :
     * #define _WIN32_IE_WIN98SE 1280
     * }
     */
    public static int _WIN32_IE_WIN98SE() {
        return (int)1280L;
    }
    /**
     * {@snippet :
     * #define _WIN32_IE_WINME 1360
     * }
     */
    public static int _WIN32_IE_WINME() {
        return (int)1360L;
    }
    /**
     * {@snippet :
     * #define _WIN32_IE_WIN2K 1281
     * }
     */
    public static int _WIN32_IE_WIN2K() {
        return (int)1281L;
    }
    /**
     * {@snippet :
     * #define _WIN32_IE_WIN2KSP1 1281
     * }
     */
    public static int _WIN32_IE_WIN2KSP1() {
        return (int)1281L;
    }
    /**
     * {@snippet :
     * #define _WIN32_IE_WIN2KSP2 1281
     * }
     */
    public static int _WIN32_IE_WIN2KSP2() {
        return (int)1281L;
    }
    /**
     * {@snippet :
     * #define _WIN32_IE_WIN2KSP3 1281
     * }
     */
    public static int _WIN32_IE_WIN2KSP3() {
        return (int)1281L;
    }
    /**
     * {@snippet :
     * #define _WIN32_IE_WIN2KSP4 1281
     * }
     */
    public static int _WIN32_IE_WIN2KSP4() {
        return (int)1281L;
    }
    /**
     * {@snippet :
     * #define _WIN32_IE_XP 1536
     * }
     */
    public static int _WIN32_IE_XP() {
        return (int)1536L;
    }
    /**
     * {@snippet :
     * #define _WIN32_IE_XPSP1 1537
     * }
     */
    public static int _WIN32_IE_XPSP1() {
        return (int)1537L;
    }
    /**
     * {@snippet :
     * #define _WIN32_IE_XPSP2 1539
     * }
     */
    public static int _WIN32_IE_XPSP2() {
        return (int)1539L;
    }
    /**
     * {@snippet :
     * #define _WIN32_IE_WS03SP1 1539
     * }
     */
    public static int _WIN32_IE_WS03SP1() {
        return (int)1539L;
    }
    /**
     * {@snippet :
     * #define _WIN32_IE_WIN6 1792
     * }
     */
    public static int _WIN32_IE_WIN6() {
        return (int)1792L;
    }
    /**
     * {@snippet :
     * #define _WIN32_IE_LONGHORN 1792
     * }
     */
    public static int _WIN32_IE_LONGHORN() {
        return (int)1792L;
    }
    /**
     * {@snippet :
     * #define _WIN32_IE_WIN7 2048
     * }
     */
    public static int _WIN32_IE_WIN7() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * #define _WIN32_IE_WIN8 2560
     * }
     */
    public static int _WIN32_IE_WIN8() {
        return (int)2560L;
    }
    /**
     * {@snippet :
     * #define _WIN32_IE_WINBLUE 2560
     * }
     */
    public static int _WIN32_IE_WINBLUE() {
        return (int)2560L;
    }
    /**
     * {@snippet :
     * #define _WIN32_IE_WINTHRESHOLD 2560
     * }
     */
    public static int _WIN32_IE_WINTHRESHOLD() {
        return (int)2560L;
    }
    /**
     * {@snippet :
     * #define _WIN32_IE_WIN10 2560
     * }
     */
    public static int _WIN32_IE_WIN10() {
        return (int)2560L;
    }
    /**
     * {@snippet :
     * #define NTDDI_VISTA 100663296
     * }
     */
    public static int NTDDI_VISTA() {
        return (int)100663296L;
    }
    /**
     * {@snippet :
     * #define NTDDI_VISTASP1 100663552
     * }
     */
    public static int NTDDI_VISTASP1() {
        return (int)100663552L;
    }
    /**
     * {@snippet :
     * #define NTDDI_VISTASP2 100663808
     * }
     */
    public static int NTDDI_VISTASP2() {
        return (int)100663808L;
    }
    /**
     * {@snippet :
     * #define NTDDI_VISTASP3 100664064
     * }
     */
    public static int NTDDI_VISTASP3() {
        return (int)100664064L;
    }
    /**
     * {@snippet :
     * #define NTDDI_VISTASP4 100664320
     * }
     */
    public static int NTDDI_VISTASP4() {
        return (int)100664320L;
    }
    /**
     * {@snippet :
     * #define NTDDI_LONGHORN 100663296
     * }
     */
    public static int NTDDI_LONGHORN() {
        return (int)100663296L;
    }
    /**
     * {@snippet :
     * #define NTDDI_WS08 100663552
     * }
     */
    public static int NTDDI_WS08() {
        return (int)100663552L;
    }
    /**
     * {@snippet :
     * #define NTDDI_WS08SP2 100663808
     * }
     */
    public static int NTDDI_WS08SP2() {
        return (int)100663808L;
    }
    /**
     * {@snippet :
     * #define NTDDI_WS08SP3 100664064
     * }
     */
    public static int NTDDI_WS08SP3() {
        return (int)100664064L;
    }
    /**
     * {@snippet :
     * #define NTDDI_WS08SP4 100664320
     * }
     */
    public static int NTDDI_WS08SP4() {
        return (int)100664320L;
    }
    /**
     * {@snippet :
     * #define WDK_NTDDI_VERSION 167772172
     * }
     */
    public static int WDK_NTDDI_VERSION() {
        return (int)167772172L;
    }
    /**
     * {@snippet :
     * #define OSVERSION_MASK 4294901760
     * }
     */
    public static int OSVERSION_MASK() {
        return (int)4294901760L;
    }
    /**
     * {@snippet :
     * #define NTDDI_VERSION 167772172
     * }
     */
    public static int NTDDI_VERSION() {
        return (int)167772172L;
    }
    /**
     * {@snippet :
     * #define WINVER 2560
     * }
     */
    public static int WINVER() {
        return (int)2560L;
    }
    /**
     * {@snippet :
     * #define _VCRUNTIME_DISABLED_WARNINGS 4514
     * }
     */
    public static int _VCRUNTIME_DISABLED_WARNINGS() {
        return (int)4514L;
    }
    /**
     * {@snippet :
     * #define NULL 0
     * }
     */
    public static MemorySegment NULL() {
        return constants$1275.NULL$ADDR;
    }
    /**
     * {@snippet :
     * #define EXCEPTION_CONTINUE_EXECUTION -1
     * }
     */
    public static int EXCEPTION_CONTINUE_EXECUTION() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * #define _UCRT_DISABLED_WARNINGS 4324
     * }
     */
    public static int _UCRT_DISABLED_WARNINGS() {
        return (int)4324L;
    }
    /**
     * {@snippet :
     * #define _TRUNCATE -1
     * }
     */
    public static long _TRUNCATE() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define _CRT_SIZE_MAX -1
     * }
     */
    public static long _CRT_SIZE_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define __FILEW__ "C"
     * }
     */
    public static MemorySegment __FILEW__() {
        return constants$1275.__FILEW__$SEGMENT;
    }
    /**
     * {@snippet :
     * #define __STDC_SECURE_LIB__ 200411
     * }
     */
    public static int __STDC_SECURE_LIB__() {
        return (int)200411L;
    }
    /**
     * {@snippet :
     * #define __GOT_SECURE_LIB__ 200411
     * }
     */
    public static int __GOT_SECURE_LIB__() {
        return (int)200411L;
    }
    /**
     * {@snippet :
     * #define WEOF 65535
     * }
     */
    public static short WEOF() {
        return (short)65535L;
    }
    /**
     * {@snippet :
     * #define _ALPHA 259
     * }
     */
    public static int _ALPHA() {
        return (int)259L;
    }
    /**
     * {@snippet :
     * #define MAX_NATURAL_ALIGNMENT 8
     * }
     */
    public static long MAX_NATURAL_ALIGNMENT() {
        return 8L;
    }
    /**
     * {@snippet :
     * #define ADDRESS_TAG_BIT 4398046511104
     * }
     */
    public static long ADDRESS_TAG_BIT() {
        return 4398046511104L;
    }
    /**
     * {@snippet :
     * #define MAXUINT_PTR -1
     * }
     */
    public static long MAXUINT_PTR() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define MAXINT_PTR 9223372036854775807
     * }
     */
    public static long MAXINT_PTR() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define MININT_PTR -9223372036854775808
     * }
     */
    public static long MININT_PTR() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define MAXULONG_PTR -1
     * }
     */
    public static long MAXULONG_PTR() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define MAXLONG_PTR 9223372036854775807
     * }
     */
    public static long MAXLONG_PTR() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define MINLONG_PTR -9223372036854775808
     * }
     */
    public static long MINLONG_PTR() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define MAXUHALF_PTR 4294967295
     * }
     */
    public static int MAXUHALF_PTR() {
        return (int)4294967295L;
    }
    /**
     * {@snippet :
     * #define MAXHALF_PTR 2147483647
     * }
     */
    public static int MAXHALF_PTR() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define MINHALF_PTR -2147483648
     * }
     */
    public static int MINHALF_PTR() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet :
     * #define MAXUINT8 255
     * }
     */
    public static byte MAXUINT8() {
        return (byte)255L;
    }
    /**
     * {@snippet :
     * #define MAXINT8 127
     * }
     */
    public static byte MAXINT8() {
        return (byte)127L;
    }
    /**
     * {@snippet :
     * #define MININT8 -128
     * }
     */
    public static byte MININT8() {
        return (byte)-128L;
    }
    /**
     * {@snippet :
     * #define MAXUINT16 65535
     * }
     */
    public static short MAXUINT16() {
        return (short)65535L;
    }
    /**
     * {@snippet :
     * #define MAXINT16 32767
     * }
     */
    public static short MAXINT16() {
        return (short)32767L;
    }
    /**
     * {@snippet :
     * #define MININT16 -32768
     * }
     */
    public static short MININT16() {
        return (short)-32768L;
    }
    /**
     * {@snippet :
     * #define MAXUINT32 4294967295
     * }
     */
    public static int MAXUINT32() {
        return (int)4294967295L;
    }
    /**
     * {@snippet :
     * #define MAXINT32 2147483647
     * }
     */
    public static int MAXINT32() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define MININT32 -2147483648
     * }
     */
    public static int MININT32() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet :
     * #define MAXUINT64 -1
     * }
     */
    public static long MAXUINT64() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define MAXINT64 9223372036854775807
     * }
     */
    public static long MAXINT64() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define MININT64 -9223372036854775808
     * }
     */
    public static long MININT64() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define MAXULONG32 4294967295
     * }
     */
    public static int MAXULONG32() {
        return (int)4294967295L;
    }
    /**
     * {@snippet :
     * #define MAXLONG32 2147483647
     * }
     */
    public static int MAXLONG32() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define MINLONG32 -2147483648
     * }
     */
    public static int MINLONG32() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet :
     * #define MAXULONG64 -1
     * }
     */
    public static long MAXULONG64() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define MAXLONG64 9223372036854775807
     * }
     */
    public static long MAXLONG64() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define MINLONG64 -9223372036854775808
     * }
     */
    public static long MINLONG64() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define MAXULONGLONG -1
     * }
     */
    public static long MAXULONGLONG() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define MINLONGLONG -9223372036854775808
     * }
     */
    public static long MINLONGLONG() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define MAXSIZE_T -1
     * }
     */
    public static long MAXSIZE_T() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define MAXSSIZE_T 9223372036854775807
     * }
     */
    public static long MAXSSIZE_T() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define MINSSIZE_T -9223372036854775808
     * }
     */
    public static long MINSSIZE_T() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define MAXUINT 4294967295
     * }
     */
    public static int MAXUINT() {
        return (int)4294967295L;
    }
    /**
     * {@snippet :
     * #define MAXINT 2147483647
     * }
     */
    public static int MAXINT() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define MININT -2147483648
     * }
     */
    public static int MININT() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet :
     * #define MAXDWORD32 4294967295
     * }
     */
    public static int MAXDWORD32() {
        return (int)4294967295L;
    }
    /**
     * {@snippet :
     * #define MAXDWORD64 -1
     * }
     */
    public static long MAXDWORD64() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define SYSTEM_CACHE_ALIGNMENT_SIZE 64
     * }
     */
    public static int SYSTEM_CACHE_ALIGNMENT_SIZE() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define UCSCHAR_INVALID_CHARACTER 4294967295
     * }
     */
    public static int UCSCHAR_INVALID_CHARACTER() {
        return (int)4294967295L;
    }
    /**
     * {@snippet :
     * #define MIN_UCSCHAR 0
     * }
     */
    public static int MIN_UCSCHAR() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define MAX_UCSCHAR 1114111
     * }
     */
    public static int MAX_UCSCHAR() {
        return (int)1114111L;
    }
    /**
     * {@snippet :
     * #define MAXIMUM_PROCESSORS 64
     * }
     */
    public static int MAXIMUM_PROCESSORS() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define ERROR_SEVERITY_WARNING 2147483648
     * }
     */
    public static int ERROR_SEVERITY_WARNING() {
        return (int)2147483648L;
    }
    /**
     * {@snippet :
     * #define ERROR_SEVERITY_ERROR 3221225472
     * }
     */
    public static int ERROR_SEVERITY_ERROR() {
        return (int)3221225472L;
    }
    /**
     * {@snippet :
     * #define MAXLONGLONG 9223372036854775807
     * }
     */
    public static long MAXLONGLONG() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define ANSI_NULL 0
     * }
     */
    public static byte ANSI_NULL() {
        return (byte)0L;
    }
    /**
     * {@snippet :
     * #define UNICODE_NULL 0
     * }
     */
    public static short UNICODE_NULL() {
        return (short)0L;
    }
    /**
     * {@snippet :
     * #define UNICODE_STRING_MAX_BYTES 65534
     * }
     */
    public static short UNICODE_STRING_MAX_BYTES() {
        return (short)65534L;
    }
    /**
     * {@snippet :
     * #define UNICODE_STRING_MAX_CHARS 32767
     * }
     */
    public static int UNICODE_STRING_MAX_CHARS() {
        return (int)32767L;
    }
    /**
     * {@snippet :
     * #define EDEADLOCK 36
     * }
     */
    public static int EDEADLOCK() {
        return (int)36L;
    }
    /**
     * {@snippet :
     * #define _NLSCMPERROR 2147483647
     * }
     */
    public static int _NLSCMPERROR() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define MINLONG 2147483648
     * }
     */
    public static int MINLONG() {
        return (int)2147483648L;
    }
    /**
     * {@snippet :
     * #define MAXDWORD 4294967295
     * }
     */
    public static int MAXDWORD() {
        return (int)4294967295L;
    }
    /**
     * {@snippet :
     * #define VER_SERVER_NT 2147483648
     * }
     */
    public static int VER_SERVER_NT() {
        return (int)2147483648L;
    }
    /**
     * {@snippet :
     * #define PRODUCT_UNLICENSED 2882382797
     * }
     */
    public static int PRODUCT_UNLICENSED() {
        return (int)2882382797L;
    }
    /**
     * {@snippet :
     * #define LANG_SYSTEM_DEFAULT 2048
     * }
     */
    public static int LANG_SYSTEM_DEFAULT() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * #define LANG_USER_DEFAULT 1024
     * }
     */
    public static int LANG_USER_DEFAULT() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * #define LOCALE_SYSTEM_DEFAULT 2048
     * }
     */
    public static int LOCALE_SYSTEM_DEFAULT() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * #define LOCALE_USER_DEFAULT 1024
     * }
     */
    public static int LOCALE_USER_DEFAULT() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * #define LOCALE_CUSTOM_DEFAULT 3072
     * }
     */
    public static int LOCALE_CUSTOM_DEFAULT() {
        return (int)3072L;
    }
    /**
     * {@snippet :
     * #define LOCALE_CUSTOM_UNSPECIFIED 4096
     * }
     */
    public static int LOCALE_CUSTOM_UNSPECIFIED() {
        return (int)4096L;
    }
    /**
     * {@snippet :
     * #define LOCALE_CUSTOM_UI_DEFAULT 5120
     * }
     */
    public static int LOCALE_CUSTOM_UI_DEFAULT() {
        return (int)5120L;
    }
    /**
     * {@snippet :
     * #define LOCALE_NEUTRAL 0
     * }
     */
    public static int LOCALE_NEUTRAL() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define LOCALE_INVARIANT 127
     * }
     */
    public static int LOCALE_INVARIANT() {
        return (int)127L;
    }
    /**
     * {@snippet :
     * #define LOCALE_UNASSIGNED_LCID 4096
     * }
     */
    public static int LOCALE_UNASSIGNED_LCID() {
        return (int)4096L;
    }
    /**
     * {@snippet :
     * #define STATUS_WAIT_0 0
     * }
     */
    public static int STATUS_WAIT_0() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define STATUS_ABANDONED_WAIT_0 128
     * }
     */
    public static int STATUS_ABANDONED_WAIT_0() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * #define STATUS_USER_APC 192
     * }
     */
    public static int STATUS_USER_APC() {
        return (int)192L;
    }
    /**
     * {@snippet :
     * #define STATUS_TIMEOUT 258
     * }
     */
    public static int STATUS_TIMEOUT() {
        return (int)258L;
    }
    /**
     * {@snippet :
     * #define STATUS_PENDING 259
     * }
     */
    public static int STATUS_PENDING() {
        return (int)259L;
    }
    /**
     * {@snippet :
     * #define DBG_EXCEPTION_HANDLED 65537
     * }
     */
    public static int DBG_EXCEPTION_HANDLED() {
        return (int)65537L;
    }
    /**
     * {@snippet :
     * #define DBG_CONTINUE 65538
     * }
     */
    public static int DBG_CONTINUE() {
        return (int)65538L;
    }
    /**
     * {@snippet :
     * #define STATUS_SEGMENT_NOTIFICATION 1073741829
     * }
     */
    public static int STATUS_SEGMENT_NOTIFICATION() {
        return (int)1073741829L;
    }
    /**
     * {@snippet :
     * #define STATUS_FATAL_APP_EXIT 1073741845
     * }
     */
    public static int STATUS_FATAL_APP_EXIT() {
        return (int)1073741845L;
    }
    /**
     * {@snippet :
     * #define DBG_REPLY_LATER 1073807361
     * }
     */
    public static int DBG_REPLY_LATER() {
        return (int)1073807361L;
    }
    /**
     * {@snippet :
     * #define DBG_TERMINATE_THREAD 1073807363
     * }
     */
    public static int DBG_TERMINATE_THREAD() {
        return (int)1073807363L;
    }
    /**
     * {@snippet :
     * #define DBG_TERMINATE_PROCESS 1073807364
     * }
     */
    public static int DBG_TERMINATE_PROCESS() {
        return (int)1073807364L;
    }
    /**
     * {@snippet :
     * #define DBG_CONTROL_C 1073807365
     * }
     */
    public static int DBG_CONTROL_C() {
        return (int)1073807365L;
    }
    /**
     * {@snippet :
     * #define DBG_PRINTEXCEPTION_C 1073807366
     * }
     */
    public static int DBG_PRINTEXCEPTION_C() {
        return (int)1073807366L;
    }
    /**
     * {@snippet :
     * #define DBG_RIPEXCEPTION 1073807367
     * }
     */
    public static int DBG_RIPEXCEPTION() {
        return (int)1073807367L;
    }
    /**
     * {@snippet :
     * #define DBG_CONTROL_BREAK 1073807368
     * }
     */
    public static int DBG_CONTROL_BREAK() {
        return (int)1073807368L;
    }
    /**
     * {@snippet :
     * #define DBG_COMMAND_EXCEPTION 1073807369
     * }
     */
    public static int DBG_COMMAND_EXCEPTION() {
        return (int)1073807369L;
    }
    /**
     * {@snippet :
     * #define DBG_PRINTEXCEPTION_WIDE_C 1073807370
     * }
     */
    public static int DBG_PRINTEXCEPTION_WIDE_C() {
        return (int)1073807370L;
    }
    /**
     * {@snippet :
     * #define STATUS_GUARD_PAGE_VIOLATION 2147483649
     * }
     */
    public static int STATUS_GUARD_PAGE_VIOLATION() {
        return (int)2147483649L;
    }
    /**
     * {@snippet :
     * #define STATUS_DATATYPE_MISALIGNMENT 2147483650
     * }
     */
    public static int STATUS_DATATYPE_MISALIGNMENT() {
        return (int)2147483650L;
    }
    /**
     * {@snippet :
     * #define STATUS_BREAKPOINT 2147483651
     * }
     */
    public static int STATUS_BREAKPOINT() {
        return (int)2147483651L;
    }
    /**
     * {@snippet :
     * #define STATUS_SINGLE_STEP 2147483652
     * }
     */
    public static int STATUS_SINGLE_STEP() {
        return (int)2147483652L;
    }
    /**
     * {@snippet :
     * #define STATUS_LONGJUMP 2147483686
     * }
     */
    public static int STATUS_LONGJUMP() {
        return (int)2147483686L;
    }
    /**
     * {@snippet :
     * #define STATUS_UNWIND_CONSOLIDATE 2147483689
     * }
     */
    public static int STATUS_UNWIND_CONSOLIDATE() {
        return (int)2147483689L;
    }
    /**
     * {@snippet :
     * #define DBG_EXCEPTION_NOT_HANDLED 2147549185
     * }
     */
    public static int DBG_EXCEPTION_NOT_HANDLED() {
        return (int)2147549185L;
    }
    /**
     * {@snippet :
     * #define STATUS_ACCESS_VIOLATION 3221225477
     * }
     */
    public static int STATUS_ACCESS_VIOLATION() {
        return (int)3221225477L;
    }
    /**
     * {@snippet :
     * #define STATUS_IN_PAGE_ERROR 3221225478
     * }
     */
    public static int STATUS_IN_PAGE_ERROR() {
        return (int)3221225478L;
    }
    /**
     * {@snippet :
     * #define STATUS_INVALID_HANDLE 3221225480
     * }
     */
    public static int STATUS_INVALID_HANDLE() {
        return (int)3221225480L;
    }
    /**
     * {@snippet :
     * #define STATUS_INVALID_PARAMETER 3221225485
     * }
     */
    public static int STATUS_INVALID_PARAMETER() {
        return (int)3221225485L;
    }
    /**
     * {@snippet :
     * #define STATUS_NO_MEMORY 3221225495
     * }
     */
    public static int STATUS_NO_MEMORY() {
        return (int)3221225495L;
    }
    /**
     * {@snippet :
     * #define STATUS_ILLEGAL_INSTRUCTION 3221225501
     * }
     */
    public static int STATUS_ILLEGAL_INSTRUCTION() {
        return (int)3221225501L;
    }
    /**
     * {@snippet :
     * #define STATUS_NONCONTINUABLE_EXCEPTION 3221225509
     * }
     */
    public static int STATUS_NONCONTINUABLE_EXCEPTION() {
        return (int)3221225509L;
    }
    /**
     * {@snippet :
     * #define STATUS_INVALID_DISPOSITION 3221225510
     * }
     */
    public static int STATUS_INVALID_DISPOSITION() {
        return (int)3221225510L;
    }
    /**
     * {@snippet :
     * #define STATUS_ARRAY_BOUNDS_EXCEEDED 3221225612
     * }
     */
    public static int STATUS_ARRAY_BOUNDS_EXCEEDED() {
        return (int)3221225612L;
    }
    /**
     * {@snippet :
     * #define STATUS_FLOAT_DENORMAL_OPERAND 3221225613
     * }
     */
    public static int STATUS_FLOAT_DENORMAL_OPERAND() {
        return (int)3221225613L;
    }
    /**
     * {@snippet :
     * #define STATUS_FLOAT_DIVIDE_BY_ZERO 3221225614
     * }
     */
    public static int STATUS_FLOAT_DIVIDE_BY_ZERO() {
        return (int)3221225614L;
    }
    /**
     * {@snippet :
     * #define STATUS_FLOAT_INEXACT_RESULT 3221225615
     * }
     */
    public static int STATUS_FLOAT_INEXACT_RESULT() {
        return (int)3221225615L;
    }
    /**
     * {@snippet :
     * #define STATUS_FLOAT_INVALID_OPERATION 3221225616
     * }
     */
    public static int STATUS_FLOAT_INVALID_OPERATION() {
        return (int)3221225616L;
    }
    /**
     * {@snippet :
     * #define STATUS_FLOAT_OVERFLOW 3221225617
     * }
     */
    public static int STATUS_FLOAT_OVERFLOW() {
        return (int)3221225617L;
    }
    /**
     * {@snippet :
     * #define STATUS_FLOAT_STACK_CHECK 3221225618
     * }
     */
    public static int STATUS_FLOAT_STACK_CHECK() {
        return (int)3221225618L;
    }
    /**
     * {@snippet :
     * #define STATUS_FLOAT_UNDERFLOW 3221225619
     * }
     */
    public static int STATUS_FLOAT_UNDERFLOW() {
        return (int)3221225619L;
    }
    /**
     * {@snippet :
     * #define STATUS_INTEGER_DIVIDE_BY_ZERO 3221225620
     * }
     */
    public static int STATUS_INTEGER_DIVIDE_BY_ZERO() {
        return (int)3221225620L;
    }
    /**
     * {@snippet :
     * #define STATUS_INTEGER_OVERFLOW 3221225621
     * }
     */
    public static int STATUS_INTEGER_OVERFLOW() {
        return (int)3221225621L;
    }
    /**
     * {@snippet :
     * #define STATUS_PRIVILEGED_INSTRUCTION 3221225622
     * }
     */
    public static int STATUS_PRIVILEGED_INSTRUCTION() {
        return (int)3221225622L;
    }
    /**
     * {@snippet :
     * #define STATUS_STACK_OVERFLOW 3221225725
     * }
     */
    public static int STATUS_STACK_OVERFLOW() {
        return (int)3221225725L;
    }
    /**
     * {@snippet :
     * #define STATUS_DLL_NOT_FOUND 3221225781
     * }
     */
    public static int STATUS_DLL_NOT_FOUND() {
        return (int)3221225781L;
    }
    /**
     * {@snippet :
     * #define STATUS_ORDINAL_NOT_FOUND 3221225784
     * }
     */
    public static int STATUS_ORDINAL_NOT_FOUND() {
        return (int)3221225784L;
    }
    /**
     * {@snippet :
     * #define STATUS_ENTRYPOINT_NOT_FOUND 3221225785
     * }
     */
    public static int STATUS_ENTRYPOINT_NOT_FOUND() {
        return (int)3221225785L;
    }
    /**
     * {@snippet :
     * #define STATUS_CONTROL_C_EXIT 3221225786
     * }
     */
    public static int STATUS_CONTROL_C_EXIT() {
        return (int)3221225786L;
    }
    /**
     * {@snippet :
     * #define STATUS_DLL_INIT_FAILED 3221225794
     * }
     */
    public static int STATUS_DLL_INIT_FAILED() {
        return (int)3221225794L;
    }
    /**
     * {@snippet :
     * #define STATUS_CONTROL_STACK_VIOLATION 3221225906
     * }
     */
    public static int STATUS_CONTROL_STACK_VIOLATION() {
        return (int)3221225906L;
    }
    /**
     * {@snippet :
     * #define STATUS_FLOAT_MULTIPLE_FAULTS 3221226164
     * }
     */
    public static int STATUS_FLOAT_MULTIPLE_FAULTS() {
        return (int)3221226164L;
    }
    /**
     * {@snippet :
     * #define STATUS_FLOAT_MULTIPLE_TRAPS 3221226165
     * }
     */
    public static int STATUS_FLOAT_MULTIPLE_TRAPS() {
        return (int)3221226165L;
    }
    /**
     * {@snippet :
     * #define STATUS_REG_NAT_CONSUMPTION 3221226185
     * }
     */
    public static int STATUS_REG_NAT_CONSUMPTION() {
        return (int)3221226185L;
    }
    /**
     * {@snippet :
     * #define STATUS_HEAP_CORRUPTION 3221226356
     * }
     */
    public static int STATUS_HEAP_CORRUPTION() {
        return (int)3221226356L;
    }
    /**
     * {@snippet :
     * #define STATUS_STACK_BUFFER_OVERRUN 3221226505
     * }
     */
    public static int STATUS_STACK_BUFFER_OVERRUN() {
        return (int)3221226505L;
    }
    /**
     * {@snippet :
     * #define STATUS_INVALID_CRUNTIME_PARAMETER 3221226519
     * }
     */
    public static int STATUS_INVALID_CRUNTIME_PARAMETER() {
        return (int)3221226519L;
    }
    /**
     * {@snippet :
     * #define STATUS_ASSERTION_FAILURE 3221226528
     * }
     */
    public static int STATUS_ASSERTION_FAILURE() {
        return (int)3221226528L;
    }
    /**
     * {@snippet :
     * #define STATUS_ENCLAVE_VIOLATION 3221226658
     * }
     */
    public static int STATUS_ENCLAVE_VIOLATION() {
        return (int)3221226658L;
    }
    /**
     * {@snippet :
     * #define STATUS_INTERRUPTED 3221226773
     * }
     */
    public static int STATUS_INTERRUPTED() {
        return (int)3221226773L;
    }
    /**
     * {@snippet :
     * #define STATUS_THREAD_NOT_RUNNING 3221226774
     * }
     */
    public static int STATUS_THREAD_NOT_RUNNING() {
        return (int)3221226774L;
    }
    /**
     * {@snippet :
     * #define STATUS_ALREADY_REGISTERED 3221227288
     * }
     */
    public static int STATUS_ALREADY_REGISTERED() {
        return (int)3221227288L;
    }
    /**
     * {@snippet :
     * #define STATUS_SXS_EARLY_DEACTIVATION 3222601743
     * }
     */
    public static int STATUS_SXS_EARLY_DEACTIVATION() {
        return (int)3222601743L;
    }
    /**
     * {@snippet :
     * #define STATUS_SXS_INVALID_DEACTIVATION 3222601744
     * }
     */
    public static int STATUS_SXS_INVALID_DEACTIVATION() {
        return (int)3222601744L;
    }
    /**
     * {@snippet :
     * #define MAXIMUM_SUSPEND_COUNT 127
     * }
     */
    public static int MAXIMUM_SUSPEND_COUNT() {
        return (int)127L;
    }
    /**
     * {@snippet :
     * #define PF_TEMPORAL_LEVEL_1 1
     * }
     */
    public static int PF_TEMPORAL_LEVEL_1() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define PF_TEMPORAL_LEVEL_2 2
     * }
     */
    public static int PF_TEMPORAL_LEVEL_2() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define PF_TEMPORAL_LEVEL_3 3
     * }
     */
    public static int PF_TEMPORAL_LEVEL_3() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define PF_NON_TEMPORAL_LEVEL_ALL 0
     * }
     */
    public static int PF_NON_TEMPORAL_LEVEL_ALL() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define CONTEXT_AMD64 1048576
     * }
     */
    public static int CONTEXT_AMD64() {
        return (int)1048576L;
    }
    /**
     * {@snippet :
     * #define CONTEXT_CONTROL 1048577
     * }
     */
    public static int CONTEXT_CONTROL() {
        return (int)1048577L;
    }
    /**
     * {@snippet :
     * #define CONTEXT_INTEGER 1048578
     * }
     */
    public static int CONTEXT_INTEGER() {
        return (int)1048578L;
    }
    /**
     * {@snippet :
     * #define CONTEXT_SEGMENTS 1048580
     * }
     */
    public static int CONTEXT_SEGMENTS() {
        return (int)1048580L;
    }
    /**
     * {@snippet :
     * #define CONTEXT_FLOATING_POINT 1048584
     * }
     */
    public static int CONTEXT_FLOATING_POINT() {
        return (int)1048584L;
    }
    /**
     * {@snippet :
     * #define CONTEXT_DEBUG_REGISTERS 1048592
     * }
     */
    public static int CONTEXT_DEBUG_REGISTERS() {
        return (int)1048592L;
    }
    /**
     * {@snippet :
     * #define CONTEXT_FULL 1048587
     * }
     */
    public static int CONTEXT_FULL() {
        return (int)1048587L;
    }
    /**
     * {@snippet :
     * #define CONTEXT_ALL 1048607
     * }
     */
    public static int CONTEXT_ALL() {
        return (int)1048607L;
    }
    /**
     * {@snippet :
     * #define CONTEXT_XSTATE 1048640
     * }
     */
    public static int CONTEXT_XSTATE() {
        return (int)1048640L;
    }
    /**
     * {@snippet :
     * #define CONTEXT_KERNEL_CET 1048704
     * }
     */
    public static int CONTEXT_KERNEL_CET() {
        return (int)1048704L;
    }
    /**
     * {@snippet :
     * #define CONTEXT_EXCEPTION_ACTIVE 134217728
     * }
     */
    public static int CONTEXT_EXCEPTION_ACTIVE() {
        return (int)134217728L;
    }
    /**
     * {@snippet :
     * #define CONTEXT_SERVICE_ACTIVE 268435456
     * }
     */
    public static int CONTEXT_SERVICE_ACTIVE() {
        return (int)268435456L;
    }
    /**
     * {@snippet :
     * #define CONTEXT_EXCEPTION_REQUEST 1073741824
     * }
     */
    public static int CONTEXT_EXCEPTION_REQUEST() {
        return (int)1073741824L;
    }
    /**
     * {@snippet :
     * #define CONTEXT_EXCEPTION_REPORTING 2147483648
     * }
     */
    public static int CONTEXT_EXCEPTION_REPORTING() {
        return (int)2147483648L;
    }
    /**
     * {@snippet :
     * #define UNW_FLAG_NO_EPILOGUE 2147483648
     * }
     */
    public static int UNW_FLAG_NO_EPILOGUE() {
        return (int)2147483648L;
    }
    /**
     * {@snippet :
     * #define OUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK_EXPORT_NAME "OutOfProcessFunctionTableCallback"
     * }
     */
    public static MemorySegment OUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK_EXPORT_NAME() {
        return constants$1275.OUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK_EXPORT_NAME$SEGMENT;
    }
    /**
     * {@snippet :
     * #define CONTEXT_ARM64 4194304
     * }
     */
    public static int CONTEXT_ARM64() {
        return (int)4194304L;
    }
    /**
     * {@snippet :
     * #define CONTEXT_ARM64_CONTROL 4194305
     * }
     */
    public static int CONTEXT_ARM64_CONTROL() {
        return (int)4194305L;
    }
    /**
     * {@snippet :
     * #define CONTEXT_ARM64_INTEGER 4194306
     * }
     */
    public static int CONTEXT_ARM64_INTEGER() {
        return (int)4194306L;
    }
    /**
     * {@snippet :
     * #define CONTEXT_ARM64_FLOATING_POINT 4194308
     * }
     */
    public static int CONTEXT_ARM64_FLOATING_POINT() {
        return (int)4194308L;
    }
    /**
     * {@snippet :
     * #define CONTEXT_ARM64_DEBUG_REGISTERS 4194312
     * }
     */
    public static int CONTEXT_ARM64_DEBUG_REGISTERS() {
        return (int)4194312L;
    }
    /**
     * {@snippet :
     * #define CONTEXT_ARM64_X18 4194320
     * }
     */
    public static int CONTEXT_ARM64_X18() {
        return (int)4194320L;
    }
    /**
     * {@snippet :
     * #define CONTEXT_ARM64_FULL 4194311
     * }
     */
    public static int CONTEXT_ARM64_FULL() {
        return (int)4194311L;
    }
    /**
     * {@snippet :
     * #define CONTEXT_ARM64_ALL 4194335
     * }
     */
    public static int CONTEXT_ARM64_ALL() {
        return (int)4194335L;
    }
    /**
     * {@snippet :
     * #define NONVOL_INT_NUMREG_ARM64 11
     * }
     */
    public static int NONVOL_INT_NUMREG_ARM64() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * #define NONVOL_FP_NUMREG_ARM64 8
     * }
     */
    public static int NONVOL_FP_NUMREG_ARM64() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define NONVOL_INT_SIZE_ARM64 88
     * }
     */
    public static long NONVOL_INT_SIZE_ARM64() {
        return 88L;
    }
    /**
     * {@snippet :
     * #define NONVOL_FP_SIZE_ARM64 64
     * }
     */
    public static long NONVOL_FP_SIZE_ARM64() {
        return 64L;
    }
    /**
     * {@snippet :
     * #define WOW64_CONTEXT_CONTROL 65537
     * }
     */
    public static int WOW64_CONTEXT_CONTROL() {
        return (int)65537L;
    }
    /**
     * {@snippet :
     * #define WOW64_CONTEXT_INTEGER 65538
     * }
     */
    public static int WOW64_CONTEXT_INTEGER() {
        return (int)65538L;
    }
    /**
     * {@snippet :
     * #define WOW64_CONTEXT_SEGMENTS 65540
     * }
     */
    public static int WOW64_CONTEXT_SEGMENTS() {
        return (int)65540L;
    }
    /**
     * {@snippet :
     * #define WOW64_CONTEXT_FLOATING_POINT 65544
     * }
     */
    public static int WOW64_CONTEXT_FLOATING_POINT() {
        return (int)65544L;
    }
}


