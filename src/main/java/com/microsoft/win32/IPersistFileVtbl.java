// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IPersistFileVtbl {
 *     HRESULT (*QueryInterface)(IPersistFile*,const IID*,void**);
 *     ULONG (*AddRef)(IPersistFile*);
 *     ULONG (*Release)(IPersistFile*);
 *     HRESULT (*GetClassID)(IPersistFile*,CLSID*);
 *     HRESULT (*IsDirty)(IPersistFile*);
 *     HRESULT (*Load)(IPersistFile*,LPCOLESTR,DWORD);
 *     HRESULT (*Save)(IPersistFile*,LPCOLESTR,BOOL);
 *     HRESULT (*SaveCompleted)(IPersistFile*,LPCOLESTR);
 *     HRESULT (*GetCurFile)(IPersistFile*,LPOLESTR*);
 * };
 * }
 */
public class IPersistFileVtbl {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("GetClassID"),
        Constants$root.C_POINTER$LAYOUT.withName("IsDirty"),
        Constants$root.C_POINTER$LAYOUT.withName("Load"),
        Constants$root.C_POINTER$LAYOUT.withName("Save"),
        Constants$root.C_POINTER$LAYOUT.withName("SaveCompleted"),
        Constants$root.C_POINTER$LAYOUT.withName("GetCurFile")
    ).withName("IPersistFileVtbl");
    public static MemoryLayout $LAYOUT() {
        return IPersistFileVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor QueryInterface_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_UP$MH = RuntimeHelper.upcallHandle(QueryInterface.class, "apply", IPersistFileVtbl.QueryInterface_UP$FUNC);
    static final FunctionDescriptor QueryInterface_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_DOWN$MH = RuntimeHelper.downcallHandle(
        IPersistFileVtbl.QueryInterface_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(IPersistFile*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IPersistFileVtbl.QueryInterface_UP$MH, fi, IPersistFileVtbl.QueryInterface$FUNC, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IPersistFileVtbl.QueryInterface_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return IPersistFileVtbl.QueryInterface$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IPersistFile*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IPersistFileVtbl.QueryInterface$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IPersistFile*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        IPersistFileVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IPersistFileVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        IPersistFileVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, SegmentScope scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor AddRef_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_UP$MH = RuntimeHelper.upcallHandle(AddRef.class, "apply", IPersistFileVtbl.AddRef_UP$FUNC);
    static final FunctionDescriptor AddRef_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_DOWN$MH = RuntimeHelper.downcallHandle(
        IPersistFileVtbl.AddRef_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*AddRef)(IPersistFile*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IPersistFileVtbl.AddRef_UP$MH, fi, IPersistFileVtbl.AddRef$FUNC, scope);
        }
        static AddRef ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IPersistFileVtbl.AddRef_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return IPersistFileVtbl.AddRef$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(IPersistFile*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IPersistFileVtbl.AddRef$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(IPersistFile*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        IPersistFileVtbl.AddRef$VH.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IPersistFileVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        IPersistFileVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, SegmentScope scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Release_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_UP$MH = RuntimeHelper.upcallHandle(Release.class, "apply", IPersistFileVtbl.Release_UP$FUNC);
    static final FunctionDescriptor Release_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_DOWN$MH = RuntimeHelper.downcallHandle(
        IPersistFileVtbl.Release_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*Release)(IPersistFile*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IPersistFileVtbl.Release_UP$MH, fi, IPersistFileVtbl.Release$FUNC, scope);
        }
        static Release ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IPersistFileVtbl.Release_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return IPersistFileVtbl.Release$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(IPersistFile*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IPersistFileVtbl.Release$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(IPersistFile*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        IPersistFileVtbl.Release$VH.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IPersistFileVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        IPersistFileVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, SegmentScope scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    static final FunctionDescriptor GetClassID$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetClassID_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetClassID_UP$MH = RuntimeHelper.upcallHandle(GetClassID.class, "apply", IPersistFileVtbl.GetClassID_UP$FUNC);
    static final FunctionDescriptor GetClassID_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetClassID_DOWN$MH = RuntimeHelper.downcallHandle(
        IPersistFileVtbl.GetClassID_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetClassID)(IPersistFile*,CLSID*);
     * }
     */
    public interface GetClassID {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetClassID fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IPersistFileVtbl.GetClassID_UP$MH, fi, IPersistFileVtbl.GetClassID$FUNC, scope);
        }
        static GetClassID ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IPersistFileVtbl.GetClassID_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetClassID$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetClassID"));
    public static VarHandle GetClassID$VH() {
        return IPersistFileVtbl.GetClassID$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetClassID)(IPersistFile*,CLSID*);
     * }
     */
    public static MemorySegment GetClassID$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IPersistFileVtbl.GetClassID$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetClassID)(IPersistFile*,CLSID*);
     * }
     */
    public static void GetClassID$set(MemorySegment seg, MemorySegment x) {
        IPersistFileVtbl.GetClassID$VH.set(seg, x);
    }
    public static MemorySegment GetClassID$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IPersistFileVtbl.GetClassID$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetClassID$set(MemorySegment seg, long index, MemorySegment x) {
        IPersistFileVtbl.GetClassID$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetClassID GetClassID(MemorySegment segment, SegmentScope scope) {
        return GetClassID.ofAddress(GetClassID$get(segment), scope);
    }
    static final FunctionDescriptor IsDirty$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor IsDirty_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle IsDirty_UP$MH = RuntimeHelper.upcallHandle(IsDirty.class, "apply", IPersistFileVtbl.IsDirty_UP$FUNC);
    static final FunctionDescriptor IsDirty_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle IsDirty_DOWN$MH = RuntimeHelper.downcallHandle(
        IPersistFileVtbl.IsDirty_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*IsDirty)(IPersistFile*);
     * }
     */
    public interface IsDirty {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(IsDirty fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IPersistFileVtbl.IsDirty_UP$MH, fi, IPersistFileVtbl.IsDirty$FUNC, scope);
        }
        static IsDirty ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IPersistFileVtbl.IsDirty_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle IsDirty$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("IsDirty"));
    public static VarHandle IsDirty$VH() {
        return IPersistFileVtbl.IsDirty$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*IsDirty)(IPersistFile*);
     * }
     */
    public static MemorySegment IsDirty$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IPersistFileVtbl.IsDirty$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*IsDirty)(IPersistFile*);
     * }
     */
    public static void IsDirty$set(MemorySegment seg, MemorySegment x) {
        IPersistFileVtbl.IsDirty$VH.set(seg, x);
    }
    public static MemorySegment IsDirty$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IPersistFileVtbl.IsDirty$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void IsDirty$set(MemorySegment seg, long index, MemorySegment x) {
        IPersistFileVtbl.IsDirty$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static IsDirty IsDirty(MemorySegment segment, SegmentScope scope) {
        return IsDirty.ofAddress(IsDirty$get(segment), scope);
    }
    static final FunctionDescriptor Load$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor Load_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle Load_UP$MH = RuntimeHelper.upcallHandle(Load.class, "apply", IPersistFileVtbl.Load_UP$FUNC);
    static final FunctionDescriptor Load_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle Load_DOWN$MH = RuntimeHelper.downcallHandle(
        IPersistFileVtbl.Load_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*Load)(IPersistFile*,LPCOLESTR,DWORD);
     * }
     */
    public interface Load {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2);
        static MemorySegment allocate(Load fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IPersistFileVtbl.Load_UP$MH, fi, IPersistFileVtbl.Load$FUNC, scope);
        }
        static Load ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2) -> {
                try {
                    return (int)IPersistFileVtbl.Load_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Load$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Load"));
    public static VarHandle Load$VH() {
        return IPersistFileVtbl.Load$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Load)(IPersistFile*,LPCOLESTR,DWORD);
     * }
     */
    public static MemorySegment Load$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IPersistFileVtbl.Load$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Load)(IPersistFile*,LPCOLESTR,DWORD);
     * }
     */
    public static void Load$set(MemorySegment seg, MemorySegment x) {
        IPersistFileVtbl.Load$VH.set(seg, x);
    }
    public static MemorySegment Load$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IPersistFileVtbl.Load$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Load$set(MemorySegment seg, long index, MemorySegment x) {
        IPersistFileVtbl.Load$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Load Load(MemorySegment segment, SegmentScope scope) {
        return Load.ofAddress(Load$get(segment), scope);
    }
    static final FunctionDescriptor Save$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor Save_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle Save_UP$MH = RuntimeHelper.upcallHandle(Save.class, "apply", IPersistFileVtbl.Save_UP$FUNC);
    static final FunctionDescriptor Save_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle Save_DOWN$MH = RuntimeHelper.downcallHandle(
        IPersistFileVtbl.Save_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*Save)(IPersistFile*,LPCOLESTR,BOOL);
     * }
     */
    public interface Save {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2);
        static MemorySegment allocate(Save fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IPersistFileVtbl.Save_UP$MH, fi, IPersistFileVtbl.Save$FUNC, scope);
        }
        static Save ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2) -> {
                try {
                    return (int)IPersistFileVtbl.Save_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Save$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Save"));
    public static VarHandle Save$VH() {
        return IPersistFileVtbl.Save$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Save)(IPersistFile*,LPCOLESTR,BOOL);
     * }
     */
    public static MemorySegment Save$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IPersistFileVtbl.Save$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Save)(IPersistFile*,LPCOLESTR,BOOL);
     * }
     */
    public static void Save$set(MemorySegment seg, MemorySegment x) {
        IPersistFileVtbl.Save$VH.set(seg, x);
    }
    public static MemorySegment Save$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IPersistFileVtbl.Save$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Save$set(MemorySegment seg, long index, MemorySegment x) {
        IPersistFileVtbl.Save$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Save Save(MemorySegment segment, SegmentScope scope) {
        return Save.ofAddress(Save$get(segment), scope);
    }
    static final FunctionDescriptor SaveCompleted$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor SaveCompleted_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SaveCompleted_UP$MH = RuntimeHelper.upcallHandle(SaveCompleted.class, "apply", IPersistFileVtbl.SaveCompleted_UP$FUNC);
    static final FunctionDescriptor SaveCompleted_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SaveCompleted_DOWN$MH = RuntimeHelper.downcallHandle(
        IPersistFileVtbl.SaveCompleted_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SaveCompleted)(IPersistFile*,LPCOLESTR);
     * }
     */
    public interface SaveCompleted {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(SaveCompleted fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IPersistFileVtbl.SaveCompleted_UP$MH, fi, IPersistFileVtbl.SaveCompleted$FUNC, scope);
        }
        static SaveCompleted ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IPersistFileVtbl.SaveCompleted_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SaveCompleted$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SaveCompleted"));
    public static VarHandle SaveCompleted$VH() {
        return IPersistFileVtbl.SaveCompleted$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SaveCompleted)(IPersistFile*,LPCOLESTR);
     * }
     */
    public static MemorySegment SaveCompleted$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IPersistFileVtbl.SaveCompleted$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SaveCompleted)(IPersistFile*,LPCOLESTR);
     * }
     */
    public static void SaveCompleted$set(MemorySegment seg, MemorySegment x) {
        IPersistFileVtbl.SaveCompleted$VH.set(seg, x);
    }
    public static MemorySegment SaveCompleted$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IPersistFileVtbl.SaveCompleted$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SaveCompleted$set(MemorySegment seg, long index, MemorySegment x) {
        IPersistFileVtbl.SaveCompleted$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SaveCompleted SaveCompleted(MemorySegment segment, SegmentScope scope) {
        return SaveCompleted.ofAddress(SaveCompleted$get(segment), scope);
    }
    static final FunctionDescriptor GetCurFile$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetCurFile_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetCurFile_UP$MH = RuntimeHelper.upcallHandle(GetCurFile.class, "apply", IPersistFileVtbl.GetCurFile_UP$FUNC);
    static final FunctionDescriptor GetCurFile_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetCurFile_DOWN$MH = RuntimeHelper.downcallHandle(
        IPersistFileVtbl.GetCurFile_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetCurFile)(IPersistFile*,LPOLESTR*);
     * }
     */
    public interface GetCurFile {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetCurFile fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IPersistFileVtbl.GetCurFile_UP$MH, fi, IPersistFileVtbl.GetCurFile$FUNC, scope);
        }
        static GetCurFile ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IPersistFileVtbl.GetCurFile_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetCurFile$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetCurFile"));
    public static VarHandle GetCurFile$VH() {
        return IPersistFileVtbl.GetCurFile$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetCurFile)(IPersistFile*,LPOLESTR*);
     * }
     */
    public static MemorySegment GetCurFile$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IPersistFileVtbl.GetCurFile$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetCurFile)(IPersistFile*,LPOLESTR*);
     * }
     */
    public static void GetCurFile$set(MemorySegment seg, MemorySegment x) {
        IPersistFileVtbl.GetCurFile$VH.set(seg, x);
    }
    public static MemorySegment GetCurFile$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IPersistFileVtbl.GetCurFile$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetCurFile$set(MemorySegment seg, long index, MemorySegment x) {
        IPersistFileVtbl.GetCurFile$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetCurFile GetCurFile(MemorySegment segment, SegmentScope scope) {
        return GetCurFile.ofAddress(GetCurFile$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


