// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IOleInPlaceFrameVtbl {
 *     HRESULT (*QueryInterface)(IOleInPlaceFrame*,const IID*,void**);
 *     ULONG (*AddRef)(IOleInPlaceFrame*);
 *     ULONG (*Release)(IOleInPlaceFrame*);
 *     HRESULT (*GetWindow)(IOleInPlaceFrame*,HWND*);
 *     HRESULT (*ContextSensitiveHelp)(IOleInPlaceFrame*,BOOL);
 *     HRESULT (*GetBorder)(IOleInPlaceFrame*,LPRECT);
 *     HRESULT (*RequestBorderSpace)(IOleInPlaceFrame*,LPCBORDERWIDTHS);
 *     HRESULT (*SetBorderSpace)(IOleInPlaceFrame*,LPCBORDERWIDTHS);
 *     HRESULT (*SetActiveObject)(IOleInPlaceFrame*,IOleInPlaceActiveObject*,LPCOLESTR);
 *     HRESULT (*InsertMenus)(IOleInPlaceFrame*,HMENU,LPOLEMENUGROUPWIDTHS);
 *     HRESULT (*SetMenu)(IOleInPlaceFrame*,HMENU,HOLEMENU,HWND);
 *     HRESULT (*RemoveMenus)(IOleInPlaceFrame*,HMENU);
 *     HRESULT (*SetStatusText)(IOleInPlaceFrame*,LPCOLESTR);
 *     HRESULT (*EnableModeless)(IOleInPlaceFrame*,BOOL);
 *     HRESULT (*TranslateAcceleratorA)(IOleInPlaceFrame*,LPMSG,WORD);
 * };
 * }
 */
public class IOleInPlaceFrameVtbl {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("GetWindow"),
        Constants$root.C_POINTER$LAYOUT.withName("ContextSensitiveHelp"),
        Constants$root.C_POINTER$LAYOUT.withName("GetBorder"),
        Constants$root.C_POINTER$LAYOUT.withName("RequestBorderSpace"),
        Constants$root.C_POINTER$LAYOUT.withName("SetBorderSpace"),
        Constants$root.C_POINTER$LAYOUT.withName("SetActiveObject"),
        Constants$root.C_POINTER$LAYOUT.withName("InsertMenus"),
        Constants$root.C_POINTER$LAYOUT.withName("SetMenu"),
        Constants$root.C_POINTER$LAYOUT.withName("RemoveMenus"),
        Constants$root.C_POINTER$LAYOUT.withName("SetStatusText"),
        Constants$root.C_POINTER$LAYOUT.withName("EnableModeless"),
        Constants$root.C_POINTER$LAYOUT.withName("TranslateAcceleratorA")
    ).withName("IOleInPlaceFrameVtbl");
    public static MemoryLayout $LAYOUT() {
        return IOleInPlaceFrameVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor QueryInterface_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_UP$MH = RuntimeHelper.upcallHandle(QueryInterface.class, "apply", IOleInPlaceFrameVtbl.QueryInterface_UP$FUNC);
    static final FunctionDescriptor QueryInterface_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_DOWN$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceFrameVtbl.QueryInterface_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(IOleInPlaceFrame*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IOleInPlaceFrameVtbl.QueryInterface_UP$MH, fi, IOleInPlaceFrameVtbl.QueryInterface$FUNC, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IOleInPlaceFrameVtbl.QueryInterface_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return IOleInPlaceFrameVtbl.QueryInterface$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IOleInPlaceFrame*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceFrameVtbl.QueryInterface$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IOleInPlaceFrame*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        IOleInPlaceFrameVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceFrameVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        IOleInPlaceFrameVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, SegmentScope scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor AddRef_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_UP$MH = RuntimeHelper.upcallHandle(AddRef.class, "apply", IOleInPlaceFrameVtbl.AddRef_UP$FUNC);
    static final FunctionDescriptor AddRef_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_DOWN$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceFrameVtbl.AddRef_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*AddRef)(IOleInPlaceFrame*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IOleInPlaceFrameVtbl.AddRef_UP$MH, fi, IOleInPlaceFrameVtbl.AddRef$FUNC, scope);
        }
        static AddRef ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IOleInPlaceFrameVtbl.AddRef_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return IOleInPlaceFrameVtbl.AddRef$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(IOleInPlaceFrame*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceFrameVtbl.AddRef$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(IOleInPlaceFrame*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        IOleInPlaceFrameVtbl.AddRef$VH.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceFrameVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        IOleInPlaceFrameVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, SegmentScope scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Release_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_UP$MH = RuntimeHelper.upcallHandle(Release.class, "apply", IOleInPlaceFrameVtbl.Release_UP$FUNC);
    static final FunctionDescriptor Release_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_DOWN$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceFrameVtbl.Release_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*Release)(IOleInPlaceFrame*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IOleInPlaceFrameVtbl.Release_UP$MH, fi, IOleInPlaceFrameVtbl.Release$FUNC, scope);
        }
        static Release ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IOleInPlaceFrameVtbl.Release_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return IOleInPlaceFrameVtbl.Release$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(IOleInPlaceFrame*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceFrameVtbl.Release$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(IOleInPlaceFrame*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        IOleInPlaceFrameVtbl.Release$VH.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceFrameVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        IOleInPlaceFrameVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, SegmentScope scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    static final FunctionDescriptor GetWindow$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetWindow_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetWindow_UP$MH = RuntimeHelper.upcallHandle(GetWindow.class, "apply", IOleInPlaceFrameVtbl.GetWindow_UP$FUNC);
    static final FunctionDescriptor GetWindow_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetWindow_DOWN$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceFrameVtbl.GetWindow_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetWindow)(IOleInPlaceFrame*,HWND*);
     * }
     */
    public interface GetWindow {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetWindow fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IOleInPlaceFrameVtbl.GetWindow_UP$MH, fi, IOleInPlaceFrameVtbl.GetWindow$FUNC, scope);
        }
        static GetWindow ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IOleInPlaceFrameVtbl.GetWindow_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetWindow$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetWindow"));
    public static VarHandle GetWindow$VH() {
        return IOleInPlaceFrameVtbl.GetWindow$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetWindow)(IOleInPlaceFrame*,HWND*);
     * }
     */
    public static MemorySegment GetWindow$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceFrameVtbl.GetWindow$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetWindow)(IOleInPlaceFrame*,HWND*);
     * }
     */
    public static void GetWindow$set(MemorySegment seg, MemorySegment x) {
        IOleInPlaceFrameVtbl.GetWindow$VH.set(seg, x);
    }
    public static MemorySegment GetWindow$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceFrameVtbl.GetWindow$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetWindow$set(MemorySegment seg, long index, MemorySegment x) {
        IOleInPlaceFrameVtbl.GetWindow$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetWindow GetWindow(MemorySegment segment, SegmentScope scope) {
        return GetWindow.ofAddress(GetWindow$get(segment), scope);
    }
    static final FunctionDescriptor ContextSensitiveHelp$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor ContextSensitiveHelp_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle ContextSensitiveHelp_UP$MH = RuntimeHelper.upcallHandle(ContextSensitiveHelp.class, "apply", IOleInPlaceFrameVtbl.ContextSensitiveHelp_UP$FUNC);
    static final FunctionDescriptor ContextSensitiveHelp_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle ContextSensitiveHelp_DOWN$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceFrameVtbl.ContextSensitiveHelp_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*ContextSensitiveHelp)(IOleInPlaceFrame*,BOOL);
     * }
     */
    public interface ContextSensitiveHelp {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(ContextSensitiveHelp fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IOleInPlaceFrameVtbl.ContextSensitiveHelp_UP$MH, fi, IOleInPlaceFrameVtbl.ContextSensitiveHelp$FUNC, scope);
        }
        static ContextSensitiveHelp ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)IOleInPlaceFrameVtbl.ContextSensitiveHelp_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ContextSensitiveHelp$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ContextSensitiveHelp"));
    public static VarHandle ContextSensitiveHelp$VH() {
        return IOleInPlaceFrameVtbl.ContextSensitiveHelp$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*ContextSensitiveHelp)(IOleInPlaceFrame*,BOOL);
     * }
     */
    public static MemorySegment ContextSensitiveHelp$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceFrameVtbl.ContextSensitiveHelp$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*ContextSensitiveHelp)(IOleInPlaceFrame*,BOOL);
     * }
     */
    public static void ContextSensitiveHelp$set(MemorySegment seg, MemorySegment x) {
        IOleInPlaceFrameVtbl.ContextSensitiveHelp$VH.set(seg, x);
    }
    public static MemorySegment ContextSensitiveHelp$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceFrameVtbl.ContextSensitiveHelp$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ContextSensitiveHelp$set(MemorySegment seg, long index, MemorySegment x) {
        IOleInPlaceFrameVtbl.ContextSensitiveHelp$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ContextSensitiveHelp ContextSensitiveHelp(MemorySegment segment, SegmentScope scope) {
        return ContextSensitiveHelp.ofAddress(ContextSensitiveHelp$get(segment), scope);
    }
    static final FunctionDescriptor GetBorder$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetBorder_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetBorder_UP$MH = RuntimeHelper.upcallHandle(GetBorder.class, "apply", IOleInPlaceFrameVtbl.GetBorder_UP$FUNC);
    static final FunctionDescriptor GetBorder_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetBorder_DOWN$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceFrameVtbl.GetBorder_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetBorder)(IOleInPlaceFrame*,LPRECT);
     * }
     */
    public interface GetBorder {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetBorder fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IOleInPlaceFrameVtbl.GetBorder_UP$MH, fi, IOleInPlaceFrameVtbl.GetBorder$FUNC, scope);
        }
        static GetBorder ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IOleInPlaceFrameVtbl.GetBorder_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetBorder$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetBorder"));
    public static VarHandle GetBorder$VH() {
        return IOleInPlaceFrameVtbl.GetBorder$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetBorder)(IOleInPlaceFrame*,LPRECT);
     * }
     */
    public static MemorySegment GetBorder$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceFrameVtbl.GetBorder$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetBorder)(IOleInPlaceFrame*,LPRECT);
     * }
     */
    public static void GetBorder$set(MemorySegment seg, MemorySegment x) {
        IOleInPlaceFrameVtbl.GetBorder$VH.set(seg, x);
    }
    public static MemorySegment GetBorder$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceFrameVtbl.GetBorder$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetBorder$set(MemorySegment seg, long index, MemorySegment x) {
        IOleInPlaceFrameVtbl.GetBorder$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetBorder GetBorder(MemorySegment segment, SegmentScope scope) {
        return GetBorder.ofAddress(GetBorder$get(segment), scope);
    }
    static final FunctionDescriptor RequestBorderSpace$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor RequestBorderSpace_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle RequestBorderSpace_UP$MH = RuntimeHelper.upcallHandle(RequestBorderSpace.class, "apply", IOleInPlaceFrameVtbl.RequestBorderSpace_UP$FUNC);
    static final FunctionDescriptor RequestBorderSpace_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle RequestBorderSpace_DOWN$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceFrameVtbl.RequestBorderSpace_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*RequestBorderSpace)(IOleInPlaceFrame*,LPCBORDERWIDTHS);
     * }
     */
    public interface RequestBorderSpace {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(RequestBorderSpace fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IOleInPlaceFrameVtbl.RequestBorderSpace_UP$MH, fi, IOleInPlaceFrameVtbl.RequestBorderSpace$FUNC, scope);
        }
        static RequestBorderSpace ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IOleInPlaceFrameVtbl.RequestBorderSpace_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle RequestBorderSpace$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("RequestBorderSpace"));
    public static VarHandle RequestBorderSpace$VH() {
        return IOleInPlaceFrameVtbl.RequestBorderSpace$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*RequestBorderSpace)(IOleInPlaceFrame*,LPCBORDERWIDTHS);
     * }
     */
    public static MemorySegment RequestBorderSpace$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceFrameVtbl.RequestBorderSpace$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*RequestBorderSpace)(IOleInPlaceFrame*,LPCBORDERWIDTHS);
     * }
     */
    public static void RequestBorderSpace$set(MemorySegment seg, MemorySegment x) {
        IOleInPlaceFrameVtbl.RequestBorderSpace$VH.set(seg, x);
    }
    public static MemorySegment RequestBorderSpace$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceFrameVtbl.RequestBorderSpace$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void RequestBorderSpace$set(MemorySegment seg, long index, MemorySegment x) {
        IOleInPlaceFrameVtbl.RequestBorderSpace$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static RequestBorderSpace RequestBorderSpace(MemorySegment segment, SegmentScope scope) {
        return RequestBorderSpace.ofAddress(RequestBorderSpace$get(segment), scope);
    }
    static final FunctionDescriptor SetBorderSpace$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor SetBorderSpace_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetBorderSpace_UP$MH = RuntimeHelper.upcallHandle(SetBorderSpace.class, "apply", IOleInPlaceFrameVtbl.SetBorderSpace_UP$FUNC);
    static final FunctionDescriptor SetBorderSpace_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetBorderSpace_DOWN$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceFrameVtbl.SetBorderSpace_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetBorderSpace)(IOleInPlaceFrame*,LPCBORDERWIDTHS);
     * }
     */
    public interface SetBorderSpace {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(SetBorderSpace fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IOleInPlaceFrameVtbl.SetBorderSpace_UP$MH, fi, IOleInPlaceFrameVtbl.SetBorderSpace$FUNC, scope);
        }
        static SetBorderSpace ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IOleInPlaceFrameVtbl.SetBorderSpace_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetBorderSpace$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetBorderSpace"));
    public static VarHandle SetBorderSpace$VH() {
        return IOleInPlaceFrameVtbl.SetBorderSpace$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetBorderSpace)(IOleInPlaceFrame*,LPCBORDERWIDTHS);
     * }
     */
    public static MemorySegment SetBorderSpace$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceFrameVtbl.SetBorderSpace$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetBorderSpace)(IOleInPlaceFrame*,LPCBORDERWIDTHS);
     * }
     */
    public static void SetBorderSpace$set(MemorySegment seg, MemorySegment x) {
        IOleInPlaceFrameVtbl.SetBorderSpace$VH.set(seg, x);
    }
    public static MemorySegment SetBorderSpace$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceFrameVtbl.SetBorderSpace$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetBorderSpace$set(MemorySegment seg, long index, MemorySegment x) {
        IOleInPlaceFrameVtbl.SetBorderSpace$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetBorderSpace SetBorderSpace(MemorySegment segment, SegmentScope scope) {
        return SetBorderSpace.ofAddress(SetBorderSpace$get(segment), scope);
    }
    static final FunctionDescriptor SetActiveObject$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor SetActiveObject_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetActiveObject_UP$MH = RuntimeHelper.upcallHandle(SetActiveObject.class, "apply", IOleInPlaceFrameVtbl.SetActiveObject_UP$FUNC);
    static final FunctionDescriptor SetActiveObject_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetActiveObject_DOWN$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceFrameVtbl.SetActiveObject_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetActiveObject)(IOleInPlaceFrame*,IOleInPlaceActiveObject*,LPCOLESTR);
     * }
     */
    public interface SetActiveObject {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(SetActiveObject fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IOleInPlaceFrameVtbl.SetActiveObject_UP$MH, fi, IOleInPlaceFrameVtbl.SetActiveObject$FUNC, scope);
        }
        static SetActiveObject ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IOleInPlaceFrameVtbl.SetActiveObject_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetActiveObject$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetActiveObject"));
    public static VarHandle SetActiveObject$VH() {
        return IOleInPlaceFrameVtbl.SetActiveObject$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetActiveObject)(IOleInPlaceFrame*,IOleInPlaceActiveObject*,LPCOLESTR);
     * }
     */
    public static MemorySegment SetActiveObject$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceFrameVtbl.SetActiveObject$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetActiveObject)(IOleInPlaceFrame*,IOleInPlaceActiveObject*,LPCOLESTR);
     * }
     */
    public static void SetActiveObject$set(MemorySegment seg, MemorySegment x) {
        IOleInPlaceFrameVtbl.SetActiveObject$VH.set(seg, x);
    }
    public static MemorySegment SetActiveObject$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceFrameVtbl.SetActiveObject$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetActiveObject$set(MemorySegment seg, long index, MemorySegment x) {
        IOleInPlaceFrameVtbl.SetActiveObject$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetActiveObject SetActiveObject(MemorySegment segment, SegmentScope scope) {
        return SetActiveObject.ofAddress(SetActiveObject$get(segment), scope);
    }
    static final FunctionDescriptor InsertMenus$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor InsertMenus_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle InsertMenus_UP$MH = RuntimeHelper.upcallHandle(InsertMenus.class, "apply", IOleInPlaceFrameVtbl.InsertMenus_UP$FUNC);
    static final FunctionDescriptor InsertMenus_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle InsertMenus_DOWN$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceFrameVtbl.InsertMenus_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*InsertMenus)(IOleInPlaceFrame*,HMENU,LPOLEMENUGROUPWIDTHS);
     * }
     */
    public interface InsertMenus {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(InsertMenus fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IOleInPlaceFrameVtbl.InsertMenus_UP$MH, fi, IOleInPlaceFrameVtbl.InsertMenus$FUNC, scope);
        }
        static InsertMenus ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IOleInPlaceFrameVtbl.InsertMenus_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle InsertMenus$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("InsertMenus"));
    public static VarHandle InsertMenus$VH() {
        return IOleInPlaceFrameVtbl.InsertMenus$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*InsertMenus)(IOleInPlaceFrame*,HMENU,LPOLEMENUGROUPWIDTHS);
     * }
     */
    public static MemorySegment InsertMenus$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceFrameVtbl.InsertMenus$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*InsertMenus)(IOleInPlaceFrame*,HMENU,LPOLEMENUGROUPWIDTHS);
     * }
     */
    public static void InsertMenus$set(MemorySegment seg, MemorySegment x) {
        IOleInPlaceFrameVtbl.InsertMenus$VH.set(seg, x);
    }
    public static MemorySegment InsertMenus$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceFrameVtbl.InsertMenus$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void InsertMenus$set(MemorySegment seg, long index, MemorySegment x) {
        IOleInPlaceFrameVtbl.InsertMenus$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static InsertMenus InsertMenus(MemorySegment segment, SegmentScope scope) {
        return InsertMenus.ofAddress(InsertMenus$get(segment), scope);
    }
    static final FunctionDescriptor SetMenu$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor SetMenu_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetMenu_UP$MH = RuntimeHelper.upcallHandle(SetMenu.class, "apply", IOleInPlaceFrameVtbl.SetMenu_UP$FUNC);
    static final FunctionDescriptor SetMenu_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetMenu_DOWN$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceFrameVtbl.SetMenu_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetMenu)(IOleInPlaceFrame*,HMENU,HOLEMENU,HWND);
     * }
     */
    public interface SetMenu {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(SetMenu fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IOleInPlaceFrameVtbl.SetMenu_UP$MH, fi, IOleInPlaceFrameVtbl.SetMenu$FUNC, scope);
        }
        static SetMenu ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)IOleInPlaceFrameVtbl.SetMenu_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetMenu$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetMenu"));
    public static VarHandle SetMenu$VH() {
        return IOleInPlaceFrameVtbl.SetMenu$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetMenu)(IOleInPlaceFrame*,HMENU,HOLEMENU,HWND);
     * }
     */
    public static MemorySegment SetMenu$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceFrameVtbl.SetMenu$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetMenu)(IOleInPlaceFrame*,HMENU,HOLEMENU,HWND);
     * }
     */
    public static void SetMenu$set(MemorySegment seg, MemorySegment x) {
        IOleInPlaceFrameVtbl.SetMenu$VH.set(seg, x);
    }
    public static MemorySegment SetMenu$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceFrameVtbl.SetMenu$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetMenu$set(MemorySegment seg, long index, MemorySegment x) {
        IOleInPlaceFrameVtbl.SetMenu$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetMenu SetMenu(MemorySegment segment, SegmentScope scope) {
        return SetMenu.ofAddress(SetMenu$get(segment), scope);
    }
    static final FunctionDescriptor RemoveMenus$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor RemoveMenus_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle RemoveMenus_UP$MH = RuntimeHelper.upcallHandle(RemoveMenus.class, "apply", IOleInPlaceFrameVtbl.RemoveMenus_UP$FUNC);
    static final FunctionDescriptor RemoveMenus_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle RemoveMenus_DOWN$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceFrameVtbl.RemoveMenus_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*RemoveMenus)(IOleInPlaceFrame*,HMENU);
     * }
     */
    public interface RemoveMenus {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(RemoveMenus fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IOleInPlaceFrameVtbl.RemoveMenus_UP$MH, fi, IOleInPlaceFrameVtbl.RemoveMenus$FUNC, scope);
        }
        static RemoveMenus ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IOleInPlaceFrameVtbl.RemoveMenus_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle RemoveMenus$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("RemoveMenus"));
    public static VarHandle RemoveMenus$VH() {
        return IOleInPlaceFrameVtbl.RemoveMenus$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*RemoveMenus)(IOleInPlaceFrame*,HMENU);
     * }
     */
    public static MemorySegment RemoveMenus$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceFrameVtbl.RemoveMenus$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*RemoveMenus)(IOleInPlaceFrame*,HMENU);
     * }
     */
    public static void RemoveMenus$set(MemorySegment seg, MemorySegment x) {
        IOleInPlaceFrameVtbl.RemoveMenus$VH.set(seg, x);
    }
    public static MemorySegment RemoveMenus$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceFrameVtbl.RemoveMenus$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void RemoveMenus$set(MemorySegment seg, long index, MemorySegment x) {
        IOleInPlaceFrameVtbl.RemoveMenus$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static RemoveMenus RemoveMenus(MemorySegment segment, SegmentScope scope) {
        return RemoveMenus.ofAddress(RemoveMenus$get(segment), scope);
    }
    static final FunctionDescriptor SetStatusText$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor SetStatusText_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetStatusText_UP$MH = RuntimeHelper.upcallHandle(SetStatusText.class, "apply", IOleInPlaceFrameVtbl.SetStatusText_UP$FUNC);
    static final FunctionDescriptor SetStatusText_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetStatusText_DOWN$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceFrameVtbl.SetStatusText_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetStatusText)(IOleInPlaceFrame*,LPCOLESTR);
     * }
     */
    public interface SetStatusText {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(SetStatusText fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IOleInPlaceFrameVtbl.SetStatusText_UP$MH, fi, IOleInPlaceFrameVtbl.SetStatusText$FUNC, scope);
        }
        static SetStatusText ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IOleInPlaceFrameVtbl.SetStatusText_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetStatusText$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetStatusText"));
    public static VarHandle SetStatusText$VH() {
        return IOleInPlaceFrameVtbl.SetStatusText$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetStatusText)(IOleInPlaceFrame*,LPCOLESTR);
     * }
     */
    public static MemorySegment SetStatusText$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceFrameVtbl.SetStatusText$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetStatusText)(IOleInPlaceFrame*,LPCOLESTR);
     * }
     */
    public static void SetStatusText$set(MemorySegment seg, MemorySegment x) {
        IOleInPlaceFrameVtbl.SetStatusText$VH.set(seg, x);
    }
    public static MemorySegment SetStatusText$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceFrameVtbl.SetStatusText$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetStatusText$set(MemorySegment seg, long index, MemorySegment x) {
        IOleInPlaceFrameVtbl.SetStatusText$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetStatusText SetStatusText(MemorySegment segment, SegmentScope scope) {
        return SetStatusText.ofAddress(SetStatusText$get(segment), scope);
    }
    static final FunctionDescriptor EnableModeless$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor EnableModeless_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle EnableModeless_UP$MH = RuntimeHelper.upcallHandle(EnableModeless.class, "apply", IOleInPlaceFrameVtbl.EnableModeless_UP$FUNC);
    static final FunctionDescriptor EnableModeless_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle EnableModeless_DOWN$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceFrameVtbl.EnableModeless_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*EnableModeless)(IOleInPlaceFrame*,BOOL);
     * }
     */
    public interface EnableModeless {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(EnableModeless fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IOleInPlaceFrameVtbl.EnableModeless_UP$MH, fi, IOleInPlaceFrameVtbl.EnableModeless$FUNC, scope);
        }
        static EnableModeless ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)IOleInPlaceFrameVtbl.EnableModeless_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle EnableModeless$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("EnableModeless"));
    public static VarHandle EnableModeless$VH() {
        return IOleInPlaceFrameVtbl.EnableModeless$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*EnableModeless)(IOleInPlaceFrame*,BOOL);
     * }
     */
    public static MemorySegment EnableModeless$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceFrameVtbl.EnableModeless$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*EnableModeless)(IOleInPlaceFrame*,BOOL);
     * }
     */
    public static void EnableModeless$set(MemorySegment seg, MemorySegment x) {
        IOleInPlaceFrameVtbl.EnableModeless$VH.set(seg, x);
    }
    public static MemorySegment EnableModeless$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceFrameVtbl.EnableModeless$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void EnableModeless$set(MemorySegment seg, long index, MemorySegment x) {
        IOleInPlaceFrameVtbl.EnableModeless$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static EnableModeless EnableModeless(MemorySegment segment, SegmentScope scope) {
        return EnableModeless.ofAddress(EnableModeless$get(segment), scope);
    }
    static final FunctionDescriptor TranslateAcceleratorA$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_SHORT$LAYOUT
    );
    static final FunctionDescriptor TranslateAcceleratorA_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_SHORT$LAYOUT
    );
    static final MethodHandle TranslateAcceleratorA_UP$MH = RuntimeHelper.upcallHandle(TranslateAcceleratorA.class, "apply", IOleInPlaceFrameVtbl.TranslateAcceleratorA_UP$FUNC);
    static final FunctionDescriptor TranslateAcceleratorA_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_SHORT$LAYOUT
    );
    static final MethodHandle TranslateAcceleratorA_DOWN$MH = RuntimeHelper.downcallHandle(
        IOleInPlaceFrameVtbl.TranslateAcceleratorA_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*TranslateAcceleratorA)(IOleInPlaceFrame*,LPMSG,WORD);
     * }
     */
    public interface TranslateAcceleratorA {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, short _x2);
        static MemorySegment allocate(TranslateAcceleratorA fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IOleInPlaceFrameVtbl.TranslateAcceleratorA_UP$MH, fi, IOleInPlaceFrameVtbl.TranslateAcceleratorA$FUNC, scope);
        }
        static TranslateAcceleratorA ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, short __x2) -> {
                try {
                    return (int)IOleInPlaceFrameVtbl.TranslateAcceleratorA_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle TranslateAcceleratorA$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("TranslateAcceleratorA"));
    public static VarHandle TranslateAcceleratorA$VH() {
        return IOleInPlaceFrameVtbl.TranslateAcceleratorA$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*TranslateAcceleratorA)(IOleInPlaceFrame*,LPMSG,WORD);
     * }
     */
    public static MemorySegment TranslateAcceleratorA$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceFrameVtbl.TranslateAcceleratorA$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*TranslateAcceleratorA)(IOleInPlaceFrame*,LPMSG,WORD);
     * }
     */
    public static void TranslateAcceleratorA$set(MemorySegment seg, MemorySegment x) {
        IOleInPlaceFrameVtbl.TranslateAcceleratorA$VH.set(seg, x);
    }
    public static MemorySegment TranslateAcceleratorA$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOleInPlaceFrameVtbl.TranslateAcceleratorA$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void TranslateAcceleratorA$set(MemorySegment seg, long index, MemorySegment x) {
        IOleInPlaceFrameVtbl.TranslateAcceleratorA$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static TranslateAcceleratorA TranslateAcceleratorA(MemorySegment segment, SegmentScope scope) {
        return TranslateAcceleratorA.ofAddress(TranslateAcceleratorA$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


