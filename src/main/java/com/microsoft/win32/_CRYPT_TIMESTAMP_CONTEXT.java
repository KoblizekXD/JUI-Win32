// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _CRYPT_TIMESTAMP_CONTEXT {
 *     DWORD cbEncoded;
 *     BYTE* pbEncoded;
 *     PCRYPT_TIMESTAMP_INFO pTimeStamp;
 * };
 * }
 */
public class _CRYPT_TIMESTAMP_CONTEXT {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("cbEncoded"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("pbEncoded"),
        Constants$root.C_POINTER$LAYOUT.withName("pTimeStamp")
    ).withName("_CRYPT_TIMESTAMP_CONTEXT");
    public static MemoryLayout $LAYOUT() {
        return _CRYPT_TIMESTAMP_CONTEXT.$struct$LAYOUT;
    }
    static final VarHandle cbEncoded$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cbEncoded"));
    public static VarHandle cbEncoded$VH() {
        return _CRYPT_TIMESTAMP_CONTEXT.cbEncoded$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD cbEncoded;
     * }
     */
    public static int cbEncoded$get(MemorySegment seg) {
        return (int)_CRYPT_TIMESTAMP_CONTEXT.cbEncoded$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD cbEncoded;
     * }
     */
    public static void cbEncoded$set(MemorySegment seg, int x) {
        _CRYPT_TIMESTAMP_CONTEXT.cbEncoded$VH.set(seg, x);
    }
    public static int cbEncoded$get(MemorySegment seg, long index) {
        return (int)_CRYPT_TIMESTAMP_CONTEXT.cbEncoded$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cbEncoded$set(MemorySegment seg, long index, int x) {
        _CRYPT_TIMESTAMP_CONTEXT.cbEncoded$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pbEncoded$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pbEncoded"));
    public static VarHandle pbEncoded$VH() {
        return _CRYPT_TIMESTAMP_CONTEXT.pbEncoded$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE* pbEncoded;
     * }
     */
    public static MemorySegment pbEncoded$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_CRYPT_TIMESTAMP_CONTEXT.pbEncoded$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE* pbEncoded;
     * }
     */
    public static void pbEncoded$set(MemorySegment seg, MemorySegment x) {
        _CRYPT_TIMESTAMP_CONTEXT.pbEncoded$VH.set(seg, x);
    }
    public static MemorySegment pbEncoded$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_CRYPT_TIMESTAMP_CONTEXT.pbEncoded$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pbEncoded$set(MemorySegment seg, long index, MemorySegment x) {
        _CRYPT_TIMESTAMP_CONTEXT.pbEncoded$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pTimeStamp$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pTimeStamp"));
    public static VarHandle pTimeStamp$VH() {
        return _CRYPT_TIMESTAMP_CONTEXT.pTimeStamp$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PCRYPT_TIMESTAMP_INFO pTimeStamp;
     * }
     */
    public static MemorySegment pTimeStamp$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_CRYPT_TIMESTAMP_CONTEXT.pTimeStamp$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PCRYPT_TIMESTAMP_INFO pTimeStamp;
     * }
     */
    public static void pTimeStamp$set(MemorySegment seg, MemorySegment x) {
        _CRYPT_TIMESTAMP_CONTEXT.pTimeStamp$VH.set(seg, x);
    }
    public static MemorySegment pTimeStamp$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_CRYPT_TIMESTAMP_CONTEXT.pTimeStamp$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pTimeStamp$set(MemorySegment seg, long index, MemorySegment x) {
        _CRYPT_TIMESTAMP_CONTEXT.pTimeStamp$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


