// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct ISurrogateServiceVtbl {
 *     HRESULT (*QueryInterface)(ISurrogateService*,const IID*,void**);
 *     ULONG (*AddRef)(ISurrogateService*);
 *     ULONG (*Release)(ISurrogateService*);
 *     HRESULT (*Init)(ISurrogateService*,const GUID*,IProcessLock*,BOOL*);
 *     HRESULT (*ApplicationLaunch)(ISurrogateService*,const GUID*,ApplicationType);
 *     HRESULT (*ApplicationFree)(ISurrogateService*,const GUID*);
 *     HRESULT (*CatalogRefresh)(ISurrogateService*,ULONG);
 *     HRESULT (*ProcessShutdown)(ISurrogateService*,ShutdownType);
 * };
 * }
 */
public class ISurrogateServiceVtbl {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("Init"),
        Constants$root.C_POINTER$LAYOUT.withName("ApplicationLaunch"),
        Constants$root.C_POINTER$LAYOUT.withName("ApplicationFree"),
        Constants$root.C_POINTER$LAYOUT.withName("CatalogRefresh"),
        Constants$root.C_POINTER$LAYOUT.withName("ProcessShutdown")
    ).withName("ISurrogateServiceVtbl");
    public static MemoryLayout $LAYOUT() {
        return ISurrogateServiceVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor QueryInterface_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_UP$MH = RuntimeHelper.upcallHandle(QueryInterface.class, "apply", ISurrogateServiceVtbl.QueryInterface_UP$FUNC);
    static final FunctionDescriptor QueryInterface_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_DOWN$MH = RuntimeHelper.downcallHandle(
        ISurrogateServiceVtbl.QueryInterface_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(ISurrogateService*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ISurrogateServiceVtbl.QueryInterface_UP$MH, fi, ISurrogateServiceVtbl.QueryInterface$FUNC, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)ISurrogateServiceVtbl.QueryInterface_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return ISurrogateServiceVtbl.QueryInterface$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(ISurrogateService*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ISurrogateServiceVtbl.QueryInterface$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(ISurrogateService*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        ISurrogateServiceVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ISurrogateServiceVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        ISurrogateServiceVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, SegmentScope scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor AddRef_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_UP$MH = RuntimeHelper.upcallHandle(AddRef.class, "apply", ISurrogateServiceVtbl.AddRef_UP$FUNC);
    static final FunctionDescriptor AddRef_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_DOWN$MH = RuntimeHelper.downcallHandle(
        ISurrogateServiceVtbl.AddRef_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*AddRef)(ISurrogateService*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ISurrogateServiceVtbl.AddRef_UP$MH, fi, ISurrogateServiceVtbl.AddRef$FUNC, scope);
        }
        static AddRef ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)ISurrogateServiceVtbl.AddRef_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return ISurrogateServiceVtbl.AddRef$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(ISurrogateService*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ISurrogateServiceVtbl.AddRef$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(ISurrogateService*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        ISurrogateServiceVtbl.AddRef$VH.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ISurrogateServiceVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        ISurrogateServiceVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, SegmentScope scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Release_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_UP$MH = RuntimeHelper.upcallHandle(Release.class, "apply", ISurrogateServiceVtbl.Release_UP$FUNC);
    static final FunctionDescriptor Release_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_DOWN$MH = RuntimeHelper.downcallHandle(
        ISurrogateServiceVtbl.Release_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*Release)(ISurrogateService*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ISurrogateServiceVtbl.Release_UP$MH, fi, ISurrogateServiceVtbl.Release$FUNC, scope);
        }
        static Release ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)ISurrogateServiceVtbl.Release_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return ISurrogateServiceVtbl.Release$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(ISurrogateService*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ISurrogateServiceVtbl.Release$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(ISurrogateService*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        ISurrogateServiceVtbl.Release$VH.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ISurrogateServiceVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        ISurrogateServiceVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, SegmentScope scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    static final FunctionDescriptor Init$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Init_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Init_UP$MH = RuntimeHelper.upcallHandle(Init.class, "apply", ISurrogateServiceVtbl.Init_UP$FUNC);
    static final FunctionDescriptor Init_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Init_DOWN$MH = RuntimeHelper.downcallHandle(
        ISurrogateServiceVtbl.Init_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*Init)(ISurrogateService*,const GUID*,IProcessLock*,BOOL*);
     * }
     */
    public interface Init {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(Init fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ISurrogateServiceVtbl.Init_UP$MH, fi, ISurrogateServiceVtbl.Init$FUNC, scope);
        }
        static Init ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)ISurrogateServiceVtbl.Init_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Init$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Init"));
    public static VarHandle Init$VH() {
        return ISurrogateServiceVtbl.Init$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Init)(ISurrogateService*,const GUID*,IProcessLock*,BOOL*);
     * }
     */
    public static MemorySegment Init$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ISurrogateServiceVtbl.Init$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Init)(ISurrogateService*,const GUID*,IProcessLock*,BOOL*);
     * }
     */
    public static void Init$set(MemorySegment seg, MemorySegment x) {
        ISurrogateServiceVtbl.Init$VH.set(seg, x);
    }
    public static MemorySegment Init$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ISurrogateServiceVtbl.Init$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Init$set(MemorySegment seg, long index, MemorySegment x) {
        ISurrogateServiceVtbl.Init$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Init Init(MemorySegment segment, SegmentScope scope) {
        return Init.ofAddress(Init$get(segment), scope);
    }
    static final FunctionDescriptor ApplicationLaunch$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor ApplicationLaunch_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle ApplicationLaunch_UP$MH = RuntimeHelper.upcallHandle(ApplicationLaunch.class, "apply", ISurrogateServiceVtbl.ApplicationLaunch_UP$FUNC);
    static final FunctionDescriptor ApplicationLaunch_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle ApplicationLaunch_DOWN$MH = RuntimeHelper.downcallHandle(
        ISurrogateServiceVtbl.ApplicationLaunch_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*ApplicationLaunch)(ISurrogateService*,const GUID*,ApplicationType);
     * }
     */
    public interface ApplicationLaunch {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2);
        static MemorySegment allocate(ApplicationLaunch fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ISurrogateServiceVtbl.ApplicationLaunch_UP$MH, fi, ISurrogateServiceVtbl.ApplicationLaunch$FUNC, scope);
        }
        static ApplicationLaunch ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2) -> {
                try {
                    return (int)ISurrogateServiceVtbl.ApplicationLaunch_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ApplicationLaunch$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ApplicationLaunch"));
    public static VarHandle ApplicationLaunch$VH() {
        return ISurrogateServiceVtbl.ApplicationLaunch$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*ApplicationLaunch)(ISurrogateService*,const GUID*,ApplicationType);
     * }
     */
    public static MemorySegment ApplicationLaunch$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ISurrogateServiceVtbl.ApplicationLaunch$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*ApplicationLaunch)(ISurrogateService*,const GUID*,ApplicationType);
     * }
     */
    public static void ApplicationLaunch$set(MemorySegment seg, MemorySegment x) {
        ISurrogateServiceVtbl.ApplicationLaunch$VH.set(seg, x);
    }
    public static MemorySegment ApplicationLaunch$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ISurrogateServiceVtbl.ApplicationLaunch$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ApplicationLaunch$set(MemorySegment seg, long index, MemorySegment x) {
        ISurrogateServiceVtbl.ApplicationLaunch$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ApplicationLaunch ApplicationLaunch(MemorySegment segment, SegmentScope scope) {
        return ApplicationLaunch.ofAddress(ApplicationLaunch$get(segment), scope);
    }
    static final FunctionDescriptor ApplicationFree$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor ApplicationFree_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ApplicationFree_UP$MH = RuntimeHelper.upcallHandle(ApplicationFree.class, "apply", ISurrogateServiceVtbl.ApplicationFree_UP$FUNC);
    static final FunctionDescriptor ApplicationFree_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ApplicationFree_DOWN$MH = RuntimeHelper.downcallHandle(
        ISurrogateServiceVtbl.ApplicationFree_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*ApplicationFree)(ISurrogateService*,const GUID*);
     * }
     */
    public interface ApplicationFree {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(ApplicationFree fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ISurrogateServiceVtbl.ApplicationFree_UP$MH, fi, ISurrogateServiceVtbl.ApplicationFree$FUNC, scope);
        }
        static ApplicationFree ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)ISurrogateServiceVtbl.ApplicationFree_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ApplicationFree$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ApplicationFree"));
    public static VarHandle ApplicationFree$VH() {
        return ISurrogateServiceVtbl.ApplicationFree$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*ApplicationFree)(ISurrogateService*,const GUID*);
     * }
     */
    public static MemorySegment ApplicationFree$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ISurrogateServiceVtbl.ApplicationFree$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*ApplicationFree)(ISurrogateService*,const GUID*);
     * }
     */
    public static void ApplicationFree$set(MemorySegment seg, MemorySegment x) {
        ISurrogateServiceVtbl.ApplicationFree$VH.set(seg, x);
    }
    public static MemorySegment ApplicationFree$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ISurrogateServiceVtbl.ApplicationFree$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ApplicationFree$set(MemorySegment seg, long index, MemorySegment x) {
        ISurrogateServiceVtbl.ApplicationFree$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ApplicationFree ApplicationFree(MemorySegment segment, SegmentScope scope) {
        return ApplicationFree.ofAddress(ApplicationFree$get(segment), scope);
    }
    static final FunctionDescriptor CatalogRefresh$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor CatalogRefresh_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle CatalogRefresh_UP$MH = RuntimeHelper.upcallHandle(CatalogRefresh.class, "apply", ISurrogateServiceVtbl.CatalogRefresh_UP$FUNC);
    static final FunctionDescriptor CatalogRefresh_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle CatalogRefresh_DOWN$MH = RuntimeHelper.downcallHandle(
        ISurrogateServiceVtbl.CatalogRefresh_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*CatalogRefresh)(ISurrogateService*,ULONG);
     * }
     */
    public interface CatalogRefresh {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(CatalogRefresh fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ISurrogateServiceVtbl.CatalogRefresh_UP$MH, fi, ISurrogateServiceVtbl.CatalogRefresh$FUNC, scope);
        }
        static CatalogRefresh ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)ISurrogateServiceVtbl.CatalogRefresh_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle CatalogRefresh$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("CatalogRefresh"));
    public static VarHandle CatalogRefresh$VH() {
        return ISurrogateServiceVtbl.CatalogRefresh$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*CatalogRefresh)(ISurrogateService*,ULONG);
     * }
     */
    public static MemorySegment CatalogRefresh$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ISurrogateServiceVtbl.CatalogRefresh$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*CatalogRefresh)(ISurrogateService*,ULONG);
     * }
     */
    public static void CatalogRefresh$set(MemorySegment seg, MemorySegment x) {
        ISurrogateServiceVtbl.CatalogRefresh$VH.set(seg, x);
    }
    public static MemorySegment CatalogRefresh$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ISurrogateServiceVtbl.CatalogRefresh$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CatalogRefresh$set(MemorySegment seg, long index, MemorySegment x) {
        ISurrogateServiceVtbl.CatalogRefresh$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static CatalogRefresh CatalogRefresh(MemorySegment segment, SegmentScope scope) {
        return CatalogRefresh.ofAddress(CatalogRefresh$get(segment), scope);
    }
    static final FunctionDescriptor ProcessShutdown$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor ProcessShutdown_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle ProcessShutdown_UP$MH = RuntimeHelper.upcallHandle(ProcessShutdown.class, "apply", ISurrogateServiceVtbl.ProcessShutdown_UP$FUNC);
    static final FunctionDescriptor ProcessShutdown_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle ProcessShutdown_DOWN$MH = RuntimeHelper.downcallHandle(
        ISurrogateServiceVtbl.ProcessShutdown_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*ProcessShutdown)(ISurrogateService*,ShutdownType);
     * }
     */
    public interface ProcessShutdown {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(ProcessShutdown fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ISurrogateServiceVtbl.ProcessShutdown_UP$MH, fi, ISurrogateServiceVtbl.ProcessShutdown$FUNC, scope);
        }
        static ProcessShutdown ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)ISurrogateServiceVtbl.ProcessShutdown_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ProcessShutdown$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ProcessShutdown"));
    public static VarHandle ProcessShutdown$VH() {
        return ISurrogateServiceVtbl.ProcessShutdown$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*ProcessShutdown)(ISurrogateService*,ShutdownType);
     * }
     */
    public static MemorySegment ProcessShutdown$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ISurrogateServiceVtbl.ProcessShutdown$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*ProcessShutdown)(ISurrogateService*,ShutdownType);
     * }
     */
    public static void ProcessShutdown$set(MemorySegment seg, MemorySegment x) {
        ISurrogateServiceVtbl.ProcessShutdown$VH.set(seg, x);
    }
    public static MemorySegment ProcessShutdown$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ISurrogateServiceVtbl.ProcessShutdown$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ProcessShutdown$set(MemorySegment seg, long index, MemorySegment x) {
        ISurrogateServiceVtbl.ProcessShutdown$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ProcessShutdown ProcessShutdown(MemorySegment segment, SegmentScope scope) {
        return ProcessShutdown.ofAddress(ProcessShutdown$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


