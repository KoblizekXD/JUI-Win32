// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _SCM_BUS_RUNTIME_FW_ACTIVATION_INFO {
 *     DWORD Version;
 *     DWORD Size;
 *     BOOLEAN RuntimeFwActivationSupported;
 *     SCM_BUS_FIRMWARE_ACTIVATION_STATE FirmwareActivationState;
 *     struct  FirmwareActivationCapability;
 *     DWORDLONG EstimatedFirmwareActivationTimeInUSecs;
 *     DWORDLONG EstimatedProcessorAccessQuiesceTimeInUSecs;
 *     DWORDLONG EstimatedIOAccessQuiesceTimeInUSecs;
 *     DWORDLONG PlatformSupportedMaxIOAccessQuiesceTimeInUSecs;
 * };
 * }
 */
public class _SCM_BUS_RUNTIME_FW_ACTIVATION_INFO {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("Version"),
        Constants$root.C_LONG$LAYOUT.withName("Size"),
        Constants$root.C_CHAR$LAYOUT.withName("RuntimeFwActivationSupported"),
        MemoryLayout.paddingLayout(24),
        Constants$root.C_LONG$LAYOUT.withName("FirmwareActivationState"),
        MemoryLayout.structLayout(
            MemoryLayout.paddingLayout(32)
        ).withName("FirmwareActivationCapability"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_LONG_LONG$LAYOUT.withName("EstimatedFirmwareActivationTimeInUSecs"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("EstimatedProcessorAccessQuiesceTimeInUSecs"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("EstimatedIOAccessQuiesceTimeInUSecs"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("PlatformSupportedMaxIOAccessQuiesceTimeInUSecs")
    ).withName("_SCM_BUS_RUNTIME_FW_ACTIVATION_INFO");
    public static MemoryLayout $LAYOUT() {
        return _SCM_BUS_RUNTIME_FW_ACTIVATION_INFO.$struct$LAYOUT;
    }
    static final VarHandle Version$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Version"));
    public static VarHandle Version$VH() {
        return _SCM_BUS_RUNTIME_FW_ACTIVATION_INFO.Version$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Version;
     * }
     */
    public static int Version$get(MemorySegment seg) {
        return (int)_SCM_BUS_RUNTIME_FW_ACTIVATION_INFO.Version$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Version;
     * }
     */
    public static void Version$set(MemorySegment seg, int x) {
        _SCM_BUS_RUNTIME_FW_ACTIVATION_INFO.Version$VH.set(seg, x);
    }
    public static int Version$get(MemorySegment seg, long index) {
        return (int)_SCM_BUS_RUNTIME_FW_ACTIVATION_INFO.Version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Version$set(MemorySegment seg, long index, int x) {
        _SCM_BUS_RUNTIME_FW_ACTIVATION_INFO.Version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Size$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Size"));
    public static VarHandle Size$VH() {
        return _SCM_BUS_RUNTIME_FW_ACTIVATION_INFO.Size$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Size;
     * }
     */
    public static int Size$get(MemorySegment seg) {
        return (int)_SCM_BUS_RUNTIME_FW_ACTIVATION_INFO.Size$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Size;
     * }
     */
    public static void Size$set(MemorySegment seg, int x) {
        _SCM_BUS_RUNTIME_FW_ACTIVATION_INFO.Size$VH.set(seg, x);
    }
    public static int Size$get(MemorySegment seg, long index) {
        return (int)_SCM_BUS_RUNTIME_FW_ACTIVATION_INFO.Size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Size$set(MemorySegment seg, long index, int x) {
        _SCM_BUS_RUNTIME_FW_ACTIVATION_INFO.Size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle RuntimeFwActivationSupported$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("RuntimeFwActivationSupported"));
    public static VarHandle RuntimeFwActivationSupported$VH() {
        return _SCM_BUS_RUNTIME_FW_ACTIVATION_INFO.RuntimeFwActivationSupported$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BOOLEAN RuntimeFwActivationSupported;
     * }
     */
    public static byte RuntimeFwActivationSupported$get(MemorySegment seg) {
        return (byte)_SCM_BUS_RUNTIME_FW_ACTIVATION_INFO.RuntimeFwActivationSupported$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BOOLEAN RuntimeFwActivationSupported;
     * }
     */
    public static void RuntimeFwActivationSupported$set(MemorySegment seg, byte x) {
        _SCM_BUS_RUNTIME_FW_ACTIVATION_INFO.RuntimeFwActivationSupported$VH.set(seg, x);
    }
    public static byte RuntimeFwActivationSupported$get(MemorySegment seg, long index) {
        return (byte)_SCM_BUS_RUNTIME_FW_ACTIVATION_INFO.RuntimeFwActivationSupported$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void RuntimeFwActivationSupported$set(MemorySegment seg, long index, byte x) {
        _SCM_BUS_RUNTIME_FW_ACTIVATION_INFO.RuntimeFwActivationSupported$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle FirmwareActivationState$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("FirmwareActivationState"));
    public static VarHandle FirmwareActivationState$VH() {
        return _SCM_BUS_RUNTIME_FW_ACTIVATION_INFO.FirmwareActivationState$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * SCM_BUS_FIRMWARE_ACTIVATION_STATE FirmwareActivationState;
     * }
     */
    public static int FirmwareActivationState$get(MemorySegment seg) {
        return (int)_SCM_BUS_RUNTIME_FW_ACTIVATION_INFO.FirmwareActivationState$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * SCM_BUS_FIRMWARE_ACTIVATION_STATE FirmwareActivationState;
     * }
     */
    public static void FirmwareActivationState$set(MemorySegment seg, int x) {
        _SCM_BUS_RUNTIME_FW_ACTIVATION_INFO.FirmwareActivationState$VH.set(seg, x);
    }
    public static int FirmwareActivationState$get(MemorySegment seg, long index) {
        return (int)_SCM_BUS_RUNTIME_FW_ACTIVATION_INFO.FirmwareActivationState$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void FirmwareActivationState$set(MemorySegment seg, long index, int x) {
        _SCM_BUS_RUNTIME_FW_ACTIVATION_INFO.FirmwareActivationState$VH.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
     * struct {
     *          *     DWORD FwManagedIoQuiesceFwActivationSupported;
     *     DWORD OsManagedIoQuiesceFwActivationSupported;
     *     DWORD WarmResetBasedFwActivationSupported;
     *     DWORD Reserved;
     * };
     * }
     */
    public static final class FirmwareActivationCapability {

        // Suppresses default constructor, ensuring non-instantiability.
        private FirmwareActivationCapability() {}
        static final StructLayout FirmwareActivationCapability$struct$LAYOUT = MemoryLayout.structLayout(
            MemoryLayout.paddingLayout(32)
        );
        public static MemoryLayout $LAYOUT() {
            return FirmwareActivationCapability.FirmwareActivationCapability$struct$LAYOUT;
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
    }

    public static MemorySegment FirmwareActivationCapability$slice(MemorySegment seg) {
        return seg.asSlice(16, 4);
    }
    static final VarHandle EstimatedFirmwareActivationTimeInUSecs$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("EstimatedFirmwareActivationTimeInUSecs"));
    public static VarHandle EstimatedFirmwareActivationTimeInUSecs$VH() {
        return _SCM_BUS_RUNTIME_FW_ACTIVATION_INFO.EstimatedFirmwareActivationTimeInUSecs$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORDLONG EstimatedFirmwareActivationTimeInUSecs;
     * }
     */
    public static long EstimatedFirmwareActivationTimeInUSecs$get(MemorySegment seg) {
        return (long)_SCM_BUS_RUNTIME_FW_ACTIVATION_INFO.EstimatedFirmwareActivationTimeInUSecs$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORDLONG EstimatedFirmwareActivationTimeInUSecs;
     * }
     */
    public static void EstimatedFirmwareActivationTimeInUSecs$set(MemorySegment seg, long x) {
        _SCM_BUS_RUNTIME_FW_ACTIVATION_INFO.EstimatedFirmwareActivationTimeInUSecs$VH.set(seg, x);
    }
    public static long EstimatedFirmwareActivationTimeInUSecs$get(MemorySegment seg, long index) {
        return (long)_SCM_BUS_RUNTIME_FW_ACTIVATION_INFO.EstimatedFirmwareActivationTimeInUSecs$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void EstimatedFirmwareActivationTimeInUSecs$set(MemorySegment seg, long index, long x) {
        _SCM_BUS_RUNTIME_FW_ACTIVATION_INFO.EstimatedFirmwareActivationTimeInUSecs$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle EstimatedProcessorAccessQuiesceTimeInUSecs$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("EstimatedProcessorAccessQuiesceTimeInUSecs"));
    public static VarHandle EstimatedProcessorAccessQuiesceTimeInUSecs$VH() {
        return _SCM_BUS_RUNTIME_FW_ACTIVATION_INFO.EstimatedProcessorAccessQuiesceTimeInUSecs$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORDLONG EstimatedProcessorAccessQuiesceTimeInUSecs;
     * }
     */
    public static long EstimatedProcessorAccessQuiesceTimeInUSecs$get(MemorySegment seg) {
        return (long)_SCM_BUS_RUNTIME_FW_ACTIVATION_INFO.EstimatedProcessorAccessQuiesceTimeInUSecs$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORDLONG EstimatedProcessorAccessQuiesceTimeInUSecs;
     * }
     */
    public static void EstimatedProcessorAccessQuiesceTimeInUSecs$set(MemorySegment seg, long x) {
        _SCM_BUS_RUNTIME_FW_ACTIVATION_INFO.EstimatedProcessorAccessQuiesceTimeInUSecs$VH.set(seg, x);
    }
    public static long EstimatedProcessorAccessQuiesceTimeInUSecs$get(MemorySegment seg, long index) {
        return (long)_SCM_BUS_RUNTIME_FW_ACTIVATION_INFO.EstimatedProcessorAccessQuiesceTimeInUSecs$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void EstimatedProcessorAccessQuiesceTimeInUSecs$set(MemorySegment seg, long index, long x) {
        _SCM_BUS_RUNTIME_FW_ACTIVATION_INFO.EstimatedProcessorAccessQuiesceTimeInUSecs$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle EstimatedIOAccessQuiesceTimeInUSecs$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("EstimatedIOAccessQuiesceTimeInUSecs"));
    public static VarHandle EstimatedIOAccessQuiesceTimeInUSecs$VH() {
        return _SCM_BUS_RUNTIME_FW_ACTIVATION_INFO.EstimatedIOAccessQuiesceTimeInUSecs$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORDLONG EstimatedIOAccessQuiesceTimeInUSecs;
     * }
     */
    public static long EstimatedIOAccessQuiesceTimeInUSecs$get(MemorySegment seg) {
        return (long)_SCM_BUS_RUNTIME_FW_ACTIVATION_INFO.EstimatedIOAccessQuiesceTimeInUSecs$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORDLONG EstimatedIOAccessQuiesceTimeInUSecs;
     * }
     */
    public static void EstimatedIOAccessQuiesceTimeInUSecs$set(MemorySegment seg, long x) {
        _SCM_BUS_RUNTIME_FW_ACTIVATION_INFO.EstimatedIOAccessQuiesceTimeInUSecs$VH.set(seg, x);
    }
    public static long EstimatedIOAccessQuiesceTimeInUSecs$get(MemorySegment seg, long index) {
        return (long)_SCM_BUS_RUNTIME_FW_ACTIVATION_INFO.EstimatedIOAccessQuiesceTimeInUSecs$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void EstimatedIOAccessQuiesceTimeInUSecs$set(MemorySegment seg, long index, long x) {
        _SCM_BUS_RUNTIME_FW_ACTIVATION_INFO.EstimatedIOAccessQuiesceTimeInUSecs$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle PlatformSupportedMaxIOAccessQuiesceTimeInUSecs$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("PlatformSupportedMaxIOAccessQuiesceTimeInUSecs"));
    public static VarHandle PlatformSupportedMaxIOAccessQuiesceTimeInUSecs$VH() {
        return _SCM_BUS_RUNTIME_FW_ACTIVATION_INFO.PlatformSupportedMaxIOAccessQuiesceTimeInUSecs$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORDLONG PlatformSupportedMaxIOAccessQuiesceTimeInUSecs;
     * }
     */
    public static long PlatformSupportedMaxIOAccessQuiesceTimeInUSecs$get(MemorySegment seg) {
        return (long)_SCM_BUS_RUNTIME_FW_ACTIVATION_INFO.PlatformSupportedMaxIOAccessQuiesceTimeInUSecs$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORDLONG PlatformSupportedMaxIOAccessQuiesceTimeInUSecs;
     * }
     */
    public static void PlatformSupportedMaxIOAccessQuiesceTimeInUSecs$set(MemorySegment seg, long x) {
        _SCM_BUS_RUNTIME_FW_ACTIVATION_INFO.PlatformSupportedMaxIOAccessQuiesceTimeInUSecs$VH.set(seg, x);
    }
    public static long PlatformSupportedMaxIOAccessQuiesceTimeInUSecs$get(MemorySegment seg, long index) {
        return (long)_SCM_BUS_RUNTIME_FW_ACTIVATION_INFO.PlatformSupportedMaxIOAccessQuiesceTimeInUSecs$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void PlatformSupportedMaxIOAccessQuiesceTimeInUSecs$set(MemorySegment seg, long index, long x) {
        _SCM_BUS_RUNTIME_FW_ACTIVATION_INFO.PlatformSupportedMaxIOAccessQuiesceTimeInUSecs$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


