// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * union _STORAGE_PROTOCOL_DATA_SUBVALUE_GET_LOG_PAGE {
 *     struct {
 *          *         DWORD RetainAsynEvent;
 *         DWORD LogSpecificField;
 *         DWORD Reserved;
 *     };
 *     DWORD AsUlong;
 * };
 * }
 */
public class _STORAGE_PROTOCOL_DATA_SUBVALUE_GET_LOG_PAGE {

    static final UnionLayout $union$LAYOUT = MemoryLayout.unionLayout(
        MemoryLayout.structLayout(
            MemoryLayout.paddingLayout(32)
        ).withName("$anon$0"),
        Constants$root.C_LONG$LAYOUT.withName("AsUlong")
    ).withName("_STORAGE_PROTOCOL_DATA_SUBVALUE_GET_LOG_PAGE");
    public static MemoryLayout $LAYOUT() {
        return _STORAGE_PROTOCOL_DATA_SUBVALUE_GET_LOG_PAGE.$union$LAYOUT;
    }
    static final VarHandle AsUlong$VH = $union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AsUlong"));
    public static VarHandle AsUlong$VH() {
        return _STORAGE_PROTOCOL_DATA_SUBVALUE_GET_LOG_PAGE.AsUlong$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD AsUlong;
     * }
     */
    public static int AsUlong$get(MemorySegment seg) {
        return (int)_STORAGE_PROTOCOL_DATA_SUBVALUE_GET_LOG_PAGE.AsUlong$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD AsUlong;
     * }
     */
    public static void AsUlong$set(MemorySegment seg, int x) {
        _STORAGE_PROTOCOL_DATA_SUBVALUE_GET_LOG_PAGE.AsUlong$VH.set(seg, x);
    }
    public static int AsUlong$get(MemorySegment seg, long index) {
        return (int)_STORAGE_PROTOCOL_DATA_SUBVALUE_GET_LOG_PAGE.AsUlong$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AsUlong$set(MemorySegment seg, long index, int x) {
        _STORAGE_PROTOCOL_DATA_SUBVALUE_GET_LOG_PAGE.AsUlong$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


