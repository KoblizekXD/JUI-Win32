// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * void (*WINEVENTPROC)(struct HWINEVENTHOOK__* hWinEventHook,unsigned long event,struct HWND__* hwnd,long idObject,long idChild,unsigned long idEventThread,unsigned long dwmsEventTime);
 * }
 */
public interface WINEVENTPROC {

    void apply(java.lang.foreign.MemorySegment hWinEventHook, int event, java.lang.foreign.MemorySegment hwnd, int idObject, int idChild, int idEventThread, int dwmsEventTime);
    static MemorySegment allocate(WINEVENTPROC fi, SegmentScope scope) {
        return RuntimeHelper.upcallStub(constants$505.WINEVENTPROC_UP$MH, fi, constants$505.WINEVENTPROC$FUNC, scope);
    }
    static WINEVENTPROC ofAddress(MemorySegment addr, SegmentScope scope) {
        MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
        return (java.lang.foreign.MemorySegment _hWinEventHook, int _event, java.lang.foreign.MemorySegment _hwnd, int _idObject, int _idChild, int _idEventThread, int _dwmsEventTime) -> {
            try {
                constants$505.WINEVENTPROC_DOWN$MH.invokeExact(symbol, _hWinEventHook, _event, _hwnd, _idObject, _idChild, _idEventThread, _dwmsEventTime);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


