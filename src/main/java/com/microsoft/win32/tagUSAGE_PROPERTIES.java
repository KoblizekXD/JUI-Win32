// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct tagUSAGE_PROPERTIES {
 *     USHORT level;
 *     USHORT page;
 *     USHORT usage;
 *     INT32 logicalMinimum;
 *     INT32 logicalMaximum;
 *     USHORT unit;
 *     USHORT exponent;
 *     BYTE count;
 *     INT32 physicalMinimum;
 *     INT32 physicalMaximum;
 * };
 * }
 */
public class tagUSAGE_PROPERTIES {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_SHORT$LAYOUT.withName("level"),
        Constants$root.C_SHORT$LAYOUT.withName("page"),
        Constants$root.C_SHORT$LAYOUT.withName("usage"),
        MemoryLayout.paddingLayout(16),
        Constants$root.C_LONG$LAYOUT.withName("logicalMinimum"),
        Constants$root.C_LONG$LAYOUT.withName("logicalMaximum"),
        Constants$root.C_SHORT$LAYOUT.withName("unit"),
        Constants$root.C_SHORT$LAYOUT.withName("exponent"),
        Constants$root.C_CHAR$LAYOUT.withName("count"),
        MemoryLayout.paddingLayout(24),
        Constants$root.C_LONG$LAYOUT.withName("physicalMinimum"),
        Constants$root.C_LONG$LAYOUT.withName("physicalMaximum")
    ).withName("tagUSAGE_PROPERTIES");
    public static MemoryLayout $LAYOUT() {
        return tagUSAGE_PROPERTIES.$struct$LAYOUT;
    }
    static final VarHandle level$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("level"));
    public static VarHandle level$VH() {
        return tagUSAGE_PROPERTIES.level$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * USHORT level;
     * }
     */
    public static short level$get(MemorySegment seg) {
        return (short)tagUSAGE_PROPERTIES.level$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * USHORT level;
     * }
     */
    public static void level$set(MemorySegment seg, short x) {
        tagUSAGE_PROPERTIES.level$VH.set(seg, x);
    }
    public static short level$get(MemorySegment seg, long index) {
        return (short)tagUSAGE_PROPERTIES.level$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void level$set(MemorySegment seg, long index, short x) {
        tagUSAGE_PROPERTIES.level$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle page$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("page"));
    public static VarHandle page$VH() {
        return tagUSAGE_PROPERTIES.page$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * USHORT page;
     * }
     */
    public static short page$get(MemorySegment seg) {
        return (short)tagUSAGE_PROPERTIES.page$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * USHORT page;
     * }
     */
    public static void page$set(MemorySegment seg, short x) {
        tagUSAGE_PROPERTIES.page$VH.set(seg, x);
    }
    public static short page$get(MemorySegment seg, long index) {
        return (short)tagUSAGE_PROPERTIES.page$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void page$set(MemorySegment seg, long index, short x) {
        tagUSAGE_PROPERTIES.page$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle usage$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("usage"));
    public static VarHandle usage$VH() {
        return tagUSAGE_PROPERTIES.usage$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * USHORT usage;
     * }
     */
    public static short usage$get(MemorySegment seg) {
        return (short)tagUSAGE_PROPERTIES.usage$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * USHORT usage;
     * }
     */
    public static void usage$set(MemorySegment seg, short x) {
        tagUSAGE_PROPERTIES.usage$VH.set(seg, x);
    }
    public static short usage$get(MemorySegment seg, long index) {
        return (short)tagUSAGE_PROPERTIES.usage$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void usage$set(MemorySegment seg, long index, short x) {
        tagUSAGE_PROPERTIES.usage$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle logicalMinimum$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("logicalMinimum"));
    public static VarHandle logicalMinimum$VH() {
        return tagUSAGE_PROPERTIES.logicalMinimum$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * INT32 logicalMinimum;
     * }
     */
    public static int logicalMinimum$get(MemorySegment seg) {
        return (int)tagUSAGE_PROPERTIES.logicalMinimum$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * INT32 logicalMinimum;
     * }
     */
    public static void logicalMinimum$set(MemorySegment seg, int x) {
        tagUSAGE_PROPERTIES.logicalMinimum$VH.set(seg, x);
    }
    public static int logicalMinimum$get(MemorySegment seg, long index) {
        return (int)tagUSAGE_PROPERTIES.logicalMinimum$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void logicalMinimum$set(MemorySegment seg, long index, int x) {
        tagUSAGE_PROPERTIES.logicalMinimum$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle logicalMaximum$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("logicalMaximum"));
    public static VarHandle logicalMaximum$VH() {
        return tagUSAGE_PROPERTIES.logicalMaximum$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * INT32 logicalMaximum;
     * }
     */
    public static int logicalMaximum$get(MemorySegment seg) {
        return (int)tagUSAGE_PROPERTIES.logicalMaximum$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * INT32 logicalMaximum;
     * }
     */
    public static void logicalMaximum$set(MemorySegment seg, int x) {
        tagUSAGE_PROPERTIES.logicalMaximum$VH.set(seg, x);
    }
    public static int logicalMaximum$get(MemorySegment seg, long index) {
        return (int)tagUSAGE_PROPERTIES.logicalMaximum$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void logicalMaximum$set(MemorySegment seg, long index, int x) {
        tagUSAGE_PROPERTIES.logicalMaximum$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle unit$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("unit"));
    public static VarHandle unit$VH() {
        return tagUSAGE_PROPERTIES.unit$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * USHORT unit;
     * }
     */
    public static short unit$get(MemorySegment seg) {
        return (short)tagUSAGE_PROPERTIES.unit$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * USHORT unit;
     * }
     */
    public static void unit$set(MemorySegment seg, short x) {
        tagUSAGE_PROPERTIES.unit$VH.set(seg, x);
    }
    public static short unit$get(MemorySegment seg, long index) {
        return (short)tagUSAGE_PROPERTIES.unit$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void unit$set(MemorySegment seg, long index, short x) {
        tagUSAGE_PROPERTIES.unit$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle exponent$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("exponent"));
    public static VarHandle exponent$VH() {
        return tagUSAGE_PROPERTIES.exponent$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * USHORT exponent;
     * }
     */
    public static short exponent$get(MemorySegment seg) {
        return (short)tagUSAGE_PROPERTIES.exponent$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * USHORT exponent;
     * }
     */
    public static void exponent$set(MemorySegment seg, short x) {
        tagUSAGE_PROPERTIES.exponent$VH.set(seg, x);
    }
    public static short exponent$get(MemorySegment seg, long index) {
        return (short)tagUSAGE_PROPERTIES.exponent$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void exponent$set(MemorySegment seg, long index, short x) {
        tagUSAGE_PROPERTIES.exponent$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle count$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("count"));
    public static VarHandle count$VH() {
        return tagUSAGE_PROPERTIES.count$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE count;
     * }
     */
    public static byte count$get(MemorySegment seg) {
        return (byte)tagUSAGE_PROPERTIES.count$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE count;
     * }
     */
    public static void count$set(MemorySegment seg, byte x) {
        tagUSAGE_PROPERTIES.count$VH.set(seg, x);
    }
    public static byte count$get(MemorySegment seg, long index) {
        return (byte)tagUSAGE_PROPERTIES.count$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void count$set(MemorySegment seg, long index, byte x) {
        tagUSAGE_PROPERTIES.count$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle physicalMinimum$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("physicalMinimum"));
    public static VarHandle physicalMinimum$VH() {
        return tagUSAGE_PROPERTIES.physicalMinimum$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * INT32 physicalMinimum;
     * }
     */
    public static int physicalMinimum$get(MemorySegment seg) {
        return (int)tagUSAGE_PROPERTIES.physicalMinimum$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * INT32 physicalMinimum;
     * }
     */
    public static void physicalMinimum$set(MemorySegment seg, int x) {
        tagUSAGE_PROPERTIES.physicalMinimum$VH.set(seg, x);
    }
    public static int physicalMinimum$get(MemorySegment seg, long index) {
        return (int)tagUSAGE_PROPERTIES.physicalMinimum$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void physicalMinimum$set(MemorySegment seg, long index, int x) {
        tagUSAGE_PROPERTIES.physicalMinimum$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle physicalMaximum$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("physicalMaximum"));
    public static VarHandle physicalMaximum$VH() {
        return tagUSAGE_PROPERTIES.physicalMaximum$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * INT32 physicalMaximum;
     * }
     */
    public static int physicalMaximum$get(MemorySegment seg) {
        return (int)tagUSAGE_PROPERTIES.physicalMaximum$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * INT32 physicalMaximum;
     * }
     */
    public static void physicalMaximum$set(MemorySegment seg, int x) {
        tagUSAGE_PROPERTIES.physicalMaximum$VH.set(seg, x);
    }
    public static int physicalMaximum$get(MemorySegment seg, long index) {
        return (int)tagUSAGE_PROPERTIES.physicalMaximum$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void physicalMaximum$set(MemorySegment seg, long index, int x) {
        tagUSAGE_PROPERTIES.physicalMaximum$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


