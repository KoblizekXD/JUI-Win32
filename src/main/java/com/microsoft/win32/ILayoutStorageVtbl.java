// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct ILayoutStorageVtbl {
 *     HRESULT (*QueryInterface)(ILayoutStorage*,const IID*,void**);
 *     ULONG (*AddRef)(ILayoutStorage*);
 *     ULONG (*Release)(ILayoutStorage*);
 *     HRESULT (*LayoutScript)(ILayoutStorage*,StorageLayout*,DWORD,DWORD);
 *     HRESULT (*BeginMonitor)(ILayoutStorage*);
 *     HRESULT (*EndMonitor)(ILayoutStorage*);
 *     HRESULT (*ReLayoutDocfile)(ILayoutStorage*,OLECHAR*);
 *     HRESULT (*ReLayoutDocfileOnILockBytes)(ILayoutStorage*,ILockBytes*);
 * };
 * }
 */
public class ILayoutStorageVtbl {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("LayoutScript"),
        Constants$root.C_POINTER$LAYOUT.withName("BeginMonitor"),
        Constants$root.C_POINTER$LAYOUT.withName("EndMonitor"),
        Constants$root.C_POINTER$LAYOUT.withName("ReLayoutDocfile"),
        Constants$root.C_POINTER$LAYOUT.withName("ReLayoutDocfileOnILockBytes")
    ).withName("ILayoutStorageVtbl");
    public static MemoryLayout $LAYOUT() {
        return ILayoutStorageVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor QueryInterface_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_UP$MH = RuntimeHelper.upcallHandle(QueryInterface.class, "apply", ILayoutStorageVtbl.QueryInterface_UP$FUNC);
    static final FunctionDescriptor QueryInterface_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_DOWN$MH = RuntimeHelper.downcallHandle(
        ILayoutStorageVtbl.QueryInterface_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(ILayoutStorage*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ILayoutStorageVtbl.QueryInterface_UP$MH, fi, ILayoutStorageVtbl.QueryInterface$FUNC, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)ILayoutStorageVtbl.QueryInterface_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return ILayoutStorageVtbl.QueryInterface$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(ILayoutStorage*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ILayoutStorageVtbl.QueryInterface$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(ILayoutStorage*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        ILayoutStorageVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ILayoutStorageVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        ILayoutStorageVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, SegmentScope scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor AddRef_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_UP$MH = RuntimeHelper.upcallHandle(AddRef.class, "apply", ILayoutStorageVtbl.AddRef_UP$FUNC);
    static final FunctionDescriptor AddRef_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_DOWN$MH = RuntimeHelper.downcallHandle(
        ILayoutStorageVtbl.AddRef_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*AddRef)(ILayoutStorage*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ILayoutStorageVtbl.AddRef_UP$MH, fi, ILayoutStorageVtbl.AddRef$FUNC, scope);
        }
        static AddRef ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)ILayoutStorageVtbl.AddRef_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return ILayoutStorageVtbl.AddRef$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(ILayoutStorage*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ILayoutStorageVtbl.AddRef$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(ILayoutStorage*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        ILayoutStorageVtbl.AddRef$VH.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ILayoutStorageVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        ILayoutStorageVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, SegmentScope scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Release_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_UP$MH = RuntimeHelper.upcallHandle(Release.class, "apply", ILayoutStorageVtbl.Release_UP$FUNC);
    static final FunctionDescriptor Release_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_DOWN$MH = RuntimeHelper.downcallHandle(
        ILayoutStorageVtbl.Release_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*Release)(ILayoutStorage*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ILayoutStorageVtbl.Release_UP$MH, fi, ILayoutStorageVtbl.Release$FUNC, scope);
        }
        static Release ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)ILayoutStorageVtbl.Release_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return ILayoutStorageVtbl.Release$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(ILayoutStorage*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ILayoutStorageVtbl.Release$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(ILayoutStorage*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        ILayoutStorageVtbl.Release$VH.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ILayoutStorageVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        ILayoutStorageVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, SegmentScope scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    static final FunctionDescriptor LayoutScript$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor LayoutScript_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle LayoutScript_UP$MH = RuntimeHelper.upcallHandle(LayoutScript.class, "apply", ILayoutStorageVtbl.LayoutScript_UP$FUNC);
    static final FunctionDescriptor LayoutScript_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle LayoutScript_DOWN$MH = RuntimeHelper.downcallHandle(
        ILayoutStorageVtbl.LayoutScript_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*LayoutScript)(ILayoutStorage*,StorageLayout*,DWORD,DWORD);
     * }
     */
    public interface LayoutScript {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, int _x3);
        static MemorySegment allocate(LayoutScript fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ILayoutStorageVtbl.LayoutScript_UP$MH, fi, ILayoutStorageVtbl.LayoutScript$FUNC, scope);
        }
        static LayoutScript ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, int __x3) -> {
                try {
                    return (int)ILayoutStorageVtbl.LayoutScript_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle LayoutScript$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("LayoutScript"));
    public static VarHandle LayoutScript$VH() {
        return ILayoutStorageVtbl.LayoutScript$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*LayoutScript)(ILayoutStorage*,StorageLayout*,DWORD,DWORD);
     * }
     */
    public static MemorySegment LayoutScript$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ILayoutStorageVtbl.LayoutScript$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*LayoutScript)(ILayoutStorage*,StorageLayout*,DWORD,DWORD);
     * }
     */
    public static void LayoutScript$set(MemorySegment seg, MemorySegment x) {
        ILayoutStorageVtbl.LayoutScript$VH.set(seg, x);
    }
    public static MemorySegment LayoutScript$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ILayoutStorageVtbl.LayoutScript$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void LayoutScript$set(MemorySegment seg, long index, MemorySegment x) {
        ILayoutStorageVtbl.LayoutScript$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static LayoutScript LayoutScript(MemorySegment segment, SegmentScope scope) {
        return LayoutScript.ofAddress(LayoutScript$get(segment), scope);
    }
    static final FunctionDescriptor BeginMonitor$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor BeginMonitor_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle BeginMonitor_UP$MH = RuntimeHelper.upcallHandle(BeginMonitor.class, "apply", ILayoutStorageVtbl.BeginMonitor_UP$FUNC);
    static final FunctionDescriptor BeginMonitor_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle BeginMonitor_DOWN$MH = RuntimeHelper.downcallHandle(
        ILayoutStorageVtbl.BeginMonitor_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*BeginMonitor)(ILayoutStorage*);
     * }
     */
    public interface BeginMonitor {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(BeginMonitor fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ILayoutStorageVtbl.BeginMonitor_UP$MH, fi, ILayoutStorageVtbl.BeginMonitor$FUNC, scope);
        }
        static BeginMonitor ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)ILayoutStorageVtbl.BeginMonitor_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle BeginMonitor$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("BeginMonitor"));
    public static VarHandle BeginMonitor$VH() {
        return ILayoutStorageVtbl.BeginMonitor$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*BeginMonitor)(ILayoutStorage*);
     * }
     */
    public static MemorySegment BeginMonitor$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ILayoutStorageVtbl.BeginMonitor$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*BeginMonitor)(ILayoutStorage*);
     * }
     */
    public static void BeginMonitor$set(MemorySegment seg, MemorySegment x) {
        ILayoutStorageVtbl.BeginMonitor$VH.set(seg, x);
    }
    public static MemorySegment BeginMonitor$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ILayoutStorageVtbl.BeginMonitor$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void BeginMonitor$set(MemorySegment seg, long index, MemorySegment x) {
        ILayoutStorageVtbl.BeginMonitor$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static BeginMonitor BeginMonitor(MemorySegment segment, SegmentScope scope) {
        return BeginMonitor.ofAddress(BeginMonitor$get(segment), scope);
    }
    static final FunctionDescriptor EndMonitor$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor EndMonitor_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle EndMonitor_UP$MH = RuntimeHelper.upcallHandle(EndMonitor.class, "apply", ILayoutStorageVtbl.EndMonitor_UP$FUNC);
    static final FunctionDescriptor EndMonitor_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle EndMonitor_DOWN$MH = RuntimeHelper.downcallHandle(
        ILayoutStorageVtbl.EndMonitor_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*EndMonitor)(ILayoutStorage*);
     * }
     */
    public interface EndMonitor {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(EndMonitor fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ILayoutStorageVtbl.EndMonitor_UP$MH, fi, ILayoutStorageVtbl.EndMonitor$FUNC, scope);
        }
        static EndMonitor ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)ILayoutStorageVtbl.EndMonitor_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle EndMonitor$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("EndMonitor"));
    public static VarHandle EndMonitor$VH() {
        return ILayoutStorageVtbl.EndMonitor$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*EndMonitor)(ILayoutStorage*);
     * }
     */
    public static MemorySegment EndMonitor$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ILayoutStorageVtbl.EndMonitor$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*EndMonitor)(ILayoutStorage*);
     * }
     */
    public static void EndMonitor$set(MemorySegment seg, MemorySegment x) {
        ILayoutStorageVtbl.EndMonitor$VH.set(seg, x);
    }
    public static MemorySegment EndMonitor$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ILayoutStorageVtbl.EndMonitor$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void EndMonitor$set(MemorySegment seg, long index, MemorySegment x) {
        ILayoutStorageVtbl.EndMonitor$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static EndMonitor EndMonitor(MemorySegment segment, SegmentScope scope) {
        return EndMonitor.ofAddress(EndMonitor$get(segment), scope);
    }
    static final FunctionDescriptor ReLayoutDocfile$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor ReLayoutDocfile_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ReLayoutDocfile_UP$MH = RuntimeHelper.upcallHandle(ReLayoutDocfile.class, "apply", ILayoutStorageVtbl.ReLayoutDocfile_UP$FUNC);
    static final FunctionDescriptor ReLayoutDocfile_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ReLayoutDocfile_DOWN$MH = RuntimeHelper.downcallHandle(
        ILayoutStorageVtbl.ReLayoutDocfile_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*ReLayoutDocfile)(ILayoutStorage*,OLECHAR*);
     * }
     */
    public interface ReLayoutDocfile {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(ReLayoutDocfile fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ILayoutStorageVtbl.ReLayoutDocfile_UP$MH, fi, ILayoutStorageVtbl.ReLayoutDocfile$FUNC, scope);
        }
        static ReLayoutDocfile ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)ILayoutStorageVtbl.ReLayoutDocfile_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ReLayoutDocfile$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ReLayoutDocfile"));
    public static VarHandle ReLayoutDocfile$VH() {
        return ILayoutStorageVtbl.ReLayoutDocfile$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*ReLayoutDocfile)(ILayoutStorage*,OLECHAR*);
     * }
     */
    public static MemorySegment ReLayoutDocfile$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ILayoutStorageVtbl.ReLayoutDocfile$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*ReLayoutDocfile)(ILayoutStorage*,OLECHAR*);
     * }
     */
    public static void ReLayoutDocfile$set(MemorySegment seg, MemorySegment x) {
        ILayoutStorageVtbl.ReLayoutDocfile$VH.set(seg, x);
    }
    public static MemorySegment ReLayoutDocfile$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ILayoutStorageVtbl.ReLayoutDocfile$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ReLayoutDocfile$set(MemorySegment seg, long index, MemorySegment x) {
        ILayoutStorageVtbl.ReLayoutDocfile$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ReLayoutDocfile ReLayoutDocfile(MemorySegment segment, SegmentScope scope) {
        return ReLayoutDocfile.ofAddress(ReLayoutDocfile$get(segment), scope);
    }
    static final FunctionDescriptor ReLayoutDocfileOnILockBytes$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor ReLayoutDocfileOnILockBytes_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ReLayoutDocfileOnILockBytes_UP$MH = RuntimeHelper.upcallHandle(ReLayoutDocfileOnILockBytes.class, "apply", ILayoutStorageVtbl.ReLayoutDocfileOnILockBytes_UP$FUNC);
    static final FunctionDescriptor ReLayoutDocfileOnILockBytes_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ReLayoutDocfileOnILockBytes_DOWN$MH = RuntimeHelper.downcallHandle(
        ILayoutStorageVtbl.ReLayoutDocfileOnILockBytes_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*ReLayoutDocfileOnILockBytes)(ILayoutStorage*,ILockBytes*);
     * }
     */
    public interface ReLayoutDocfileOnILockBytes {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(ReLayoutDocfileOnILockBytes fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ILayoutStorageVtbl.ReLayoutDocfileOnILockBytes_UP$MH, fi, ILayoutStorageVtbl.ReLayoutDocfileOnILockBytes$FUNC, scope);
        }
        static ReLayoutDocfileOnILockBytes ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)ILayoutStorageVtbl.ReLayoutDocfileOnILockBytes_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ReLayoutDocfileOnILockBytes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ReLayoutDocfileOnILockBytes"));
    public static VarHandle ReLayoutDocfileOnILockBytes$VH() {
        return ILayoutStorageVtbl.ReLayoutDocfileOnILockBytes$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*ReLayoutDocfileOnILockBytes)(ILayoutStorage*,ILockBytes*);
     * }
     */
    public static MemorySegment ReLayoutDocfileOnILockBytes$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ILayoutStorageVtbl.ReLayoutDocfileOnILockBytes$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*ReLayoutDocfileOnILockBytes)(ILayoutStorage*,ILockBytes*);
     * }
     */
    public static void ReLayoutDocfileOnILockBytes$set(MemorySegment seg, MemorySegment x) {
        ILayoutStorageVtbl.ReLayoutDocfileOnILockBytes$VH.set(seg, x);
    }
    public static MemorySegment ReLayoutDocfileOnILockBytes$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ILayoutStorageVtbl.ReLayoutDocfileOnILockBytes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ReLayoutDocfileOnILockBytes$set(MemorySegment seg, long index, MemorySegment x) {
        ILayoutStorageVtbl.ReLayoutDocfileOnILockBytes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ReLayoutDocfileOnILockBytes ReLayoutDocfileOnILockBytes(MemorySegment segment, SegmentScope scope) {
        return ReLayoutDocfileOnILockBytes.ofAddress(ReLayoutDocfileOnILockBytes$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


