// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _NDR_CS_SIZE_CONVERT_ROUTINES {
 *     CS_TYPE_NET_SIZE_ROUTINE pfnNetSize;
 *     CS_TYPE_TO_NETCS_ROUTINE pfnToNetCs;
 *     CS_TYPE_LOCAL_SIZE_ROUTINE pfnLocalSize;
 *     CS_TYPE_FROM_NETCS_ROUTINE pfnFromNetCs;
 * };
 * }
 */
public class _NDR_CS_SIZE_CONVERT_ROUTINES {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("pfnNetSize"),
        Constants$root.C_POINTER$LAYOUT.withName("pfnToNetCs"),
        Constants$root.C_POINTER$LAYOUT.withName("pfnLocalSize"),
        Constants$root.C_POINTER$LAYOUT.withName("pfnFromNetCs")
    ).withName("_NDR_CS_SIZE_CONVERT_ROUTINES");
    public static MemoryLayout $LAYOUT() {
        return _NDR_CS_SIZE_CONVERT_ROUTINES.$struct$LAYOUT;
    }
    static final VarHandle pfnNetSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pfnNetSize"));
    public static VarHandle pfnNetSize$VH() {
        return _NDR_CS_SIZE_CONVERT_ROUTINES.pfnNetSize$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * CS_TYPE_NET_SIZE_ROUTINE pfnNetSize;
     * }
     */
    public static MemorySegment pfnNetSize$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_NDR_CS_SIZE_CONVERT_ROUTINES.pfnNetSize$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * CS_TYPE_NET_SIZE_ROUTINE pfnNetSize;
     * }
     */
    public static void pfnNetSize$set(MemorySegment seg, MemorySegment x) {
        _NDR_CS_SIZE_CONVERT_ROUTINES.pfnNetSize$VH.set(seg, x);
    }
    public static MemorySegment pfnNetSize$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_NDR_CS_SIZE_CONVERT_ROUTINES.pfnNetSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pfnNetSize$set(MemorySegment seg, long index, MemorySegment x) {
        _NDR_CS_SIZE_CONVERT_ROUTINES.pfnNetSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static CS_TYPE_NET_SIZE_ROUTINE pfnNetSize(MemorySegment segment, SegmentScope scope) {
        return CS_TYPE_NET_SIZE_ROUTINE.ofAddress(pfnNetSize$get(segment), scope);
    }
    static final VarHandle pfnToNetCs$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pfnToNetCs"));
    public static VarHandle pfnToNetCs$VH() {
        return _NDR_CS_SIZE_CONVERT_ROUTINES.pfnToNetCs$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * CS_TYPE_TO_NETCS_ROUTINE pfnToNetCs;
     * }
     */
    public static MemorySegment pfnToNetCs$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_NDR_CS_SIZE_CONVERT_ROUTINES.pfnToNetCs$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * CS_TYPE_TO_NETCS_ROUTINE pfnToNetCs;
     * }
     */
    public static void pfnToNetCs$set(MemorySegment seg, MemorySegment x) {
        _NDR_CS_SIZE_CONVERT_ROUTINES.pfnToNetCs$VH.set(seg, x);
    }
    public static MemorySegment pfnToNetCs$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_NDR_CS_SIZE_CONVERT_ROUTINES.pfnToNetCs$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pfnToNetCs$set(MemorySegment seg, long index, MemorySegment x) {
        _NDR_CS_SIZE_CONVERT_ROUTINES.pfnToNetCs$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static CS_TYPE_TO_NETCS_ROUTINE pfnToNetCs(MemorySegment segment, SegmentScope scope) {
        return CS_TYPE_TO_NETCS_ROUTINE.ofAddress(pfnToNetCs$get(segment), scope);
    }
    static final VarHandle pfnLocalSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pfnLocalSize"));
    public static VarHandle pfnLocalSize$VH() {
        return _NDR_CS_SIZE_CONVERT_ROUTINES.pfnLocalSize$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * CS_TYPE_LOCAL_SIZE_ROUTINE pfnLocalSize;
     * }
     */
    public static MemorySegment pfnLocalSize$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_NDR_CS_SIZE_CONVERT_ROUTINES.pfnLocalSize$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * CS_TYPE_LOCAL_SIZE_ROUTINE pfnLocalSize;
     * }
     */
    public static void pfnLocalSize$set(MemorySegment seg, MemorySegment x) {
        _NDR_CS_SIZE_CONVERT_ROUTINES.pfnLocalSize$VH.set(seg, x);
    }
    public static MemorySegment pfnLocalSize$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_NDR_CS_SIZE_CONVERT_ROUTINES.pfnLocalSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pfnLocalSize$set(MemorySegment seg, long index, MemorySegment x) {
        _NDR_CS_SIZE_CONVERT_ROUTINES.pfnLocalSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static CS_TYPE_LOCAL_SIZE_ROUTINE pfnLocalSize(MemorySegment segment, SegmentScope scope) {
        return CS_TYPE_LOCAL_SIZE_ROUTINE.ofAddress(pfnLocalSize$get(segment), scope);
    }
    static final VarHandle pfnFromNetCs$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pfnFromNetCs"));
    public static VarHandle pfnFromNetCs$VH() {
        return _NDR_CS_SIZE_CONVERT_ROUTINES.pfnFromNetCs$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * CS_TYPE_FROM_NETCS_ROUTINE pfnFromNetCs;
     * }
     */
    public static MemorySegment pfnFromNetCs$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_NDR_CS_SIZE_CONVERT_ROUTINES.pfnFromNetCs$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * CS_TYPE_FROM_NETCS_ROUTINE pfnFromNetCs;
     * }
     */
    public static void pfnFromNetCs$set(MemorySegment seg, MemorySegment x) {
        _NDR_CS_SIZE_CONVERT_ROUTINES.pfnFromNetCs$VH.set(seg, x);
    }
    public static MemorySegment pfnFromNetCs$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_NDR_CS_SIZE_CONVERT_ROUTINES.pfnFromNetCs$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pfnFromNetCs$set(MemorySegment seg, long index, MemorySegment x) {
        _NDR_CS_SIZE_CONVERT_ROUTINES.pfnFromNetCs$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static CS_TYPE_FROM_NETCS_ROUTINE pfnFromNetCs(MemorySegment segment, SegmentScope scope) {
        return CS_TYPE_FROM_NETCS_ROUTINE.ofAddress(pfnFromNetCs$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


