// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _TRANSMIT_FILE_BUFFERS {
 *     PVOID Head;
 *     DWORD HeadLength;
 *     PVOID Tail;
 *     DWORD TailLength;
 * };
 * }
 */
public class _TRANSMIT_FILE_BUFFERS {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("Head"),
        Constants$root.C_LONG$LAYOUT.withName("HeadLength"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("Tail"),
        Constants$root.C_LONG$LAYOUT.withName("TailLength"),
        MemoryLayout.paddingLayout(32)
    ).withName("_TRANSMIT_FILE_BUFFERS");
    public static MemoryLayout $LAYOUT() {
        return _TRANSMIT_FILE_BUFFERS.$struct$LAYOUT;
    }
    static final VarHandle Head$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Head"));
    public static VarHandle Head$VH() {
        return _TRANSMIT_FILE_BUFFERS.Head$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PVOID Head;
     * }
     */
    public static MemorySegment Head$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_TRANSMIT_FILE_BUFFERS.Head$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PVOID Head;
     * }
     */
    public static void Head$set(MemorySegment seg, MemorySegment x) {
        _TRANSMIT_FILE_BUFFERS.Head$VH.set(seg, x);
    }
    public static MemorySegment Head$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_TRANSMIT_FILE_BUFFERS.Head$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Head$set(MemorySegment seg, long index, MemorySegment x) {
        _TRANSMIT_FILE_BUFFERS.Head$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle HeadLength$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("HeadLength"));
    public static VarHandle HeadLength$VH() {
        return _TRANSMIT_FILE_BUFFERS.HeadLength$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD HeadLength;
     * }
     */
    public static int HeadLength$get(MemorySegment seg) {
        return (int)_TRANSMIT_FILE_BUFFERS.HeadLength$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD HeadLength;
     * }
     */
    public static void HeadLength$set(MemorySegment seg, int x) {
        _TRANSMIT_FILE_BUFFERS.HeadLength$VH.set(seg, x);
    }
    public static int HeadLength$get(MemorySegment seg, long index) {
        return (int)_TRANSMIT_FILE_BUFFERS.HeadLength$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void HeadLength$set(MemorySegment seg, long index, int x) {
        _TRANSMIT_FILE_BUFFERS.HeadLength$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Tail$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Tail"));
    public static VarHandle Tail$VH() {
        return _TRANSMIT_FILE_BUFFERS.Tail$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PVOID Tail;
     * }
     */
    public static MemorySegment Tail$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_TRANSMIT_FILE_BUFFERS.Tail$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PVOID Tail;
     * }
     */
    public static void Tail$set(MemorySegment seg, MemorySegment x) {
        _TRANSMIT_FILE_BUFFERS.Tail$VH.set(seg, x);
    }
    public static MemorySegment Tail$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_TRANSMIT_FILE_BUFFERS.Tail$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Tail$set(MemorySegment seg, long index, MemorySegment x) {
        _TRANSMIT_FILE_BUFFERS.Tail$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle TailLength$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("TailLength"));
    public static VarHandle TailLength$VH() {
        return _TRANSMIT_FILE_BUFFERS.TailLength$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD TailLength;
     * }
     */
    public static int TailLength$get(MemorySegment seg) {
        return (int)_TRANSMIT_FILE_BUFFERS.TailLength$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD TailLength;
     * }
     */
    public static void TailLength$set(MemorySegment seg, int x) {
        _TRANSMIT_FILE_BUFFERS.TailLength$VH.set(seg, x);
    }
    public static int TailLength$get(MemorySegment seg, long index) {
        return (int)_TRANSMIT_FILE_BUFFERS.TailLength$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void TailLength$set(MemorySegment seg, long index, int x) {
        _TRANSMIT_FILE_BUFFERS.TailLength$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


