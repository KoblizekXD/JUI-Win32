// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IServerSecurityVtbl {
 *     HRESULT (*QueryInterface)(IServerSecurity*,const IID*,void**);
 *     ULONG (*AddRef)(IServerSecurity*);
 *     ULONG (*Release)(IServerSecurity*);
 *     HRESULT (*QueryBlanket)(IServerSecurity*,DWORD*,DWORD*,OLECHAR**,DWORD*,DWORD*,void**,DWORD*);
 *     HRESULT (*ImpersonateClient)(IServerSecurity*);
 *     HRESULT (*RevertToSelf)(IServerSecurity*);
 *     BOOL (*IsImpersonating)(IServerSecurity*);
 * };
 * }
 */
public class IServerSecurityVtbl {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("QueryBlanket"),
        Constants$root.C_POINTER$LAYOUT.withName("ImpersonateClient"),
        Constants$root.C_POINTER$LAYOUT.withName("RevertToSelf"),
        Constants$root.C_POINTER$LAYOUT.withName("IsImpersonating")
    ).withName("IServerSecurityVtbl");
    public static MemoryLayout $LAYOUT() {
        return IServerSecurityVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor QueryInterface_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_UP$MH = RuntimeHelper.upcallHandle(QueryInterface.class, "apply", IServerSecurityVtbl.QueryInterface_UP$FUNC);
    static final FunctionDescriptor QueryInterface_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_DOWN$MH = RuntimeHelper.downcallHandle(
        IServerSecurityVtbl.QueryInterface_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(IServerSecurity*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IServerSecurityVtbl.QueryInterface_UP$MH, fi, IServerSecurityVtbl.QueryInterface$FUNC, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IServerSecurityVtbl.QueryInterface_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return IServerSecurityVtbl.QueryInterface$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IServerSecurity*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IServerSecurityVtbl.QueryInterface$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IServerSecurity*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        IServerSecurityVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IServerSecurityVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        IServerSecurityVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, SegmentScope scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor AddRef_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_UP$MH = RuntimeHelper.upcallHandle(AddRef.class, "apply", IServerSecurityVtbl.AddRef_UP$FUNC);
    static final FunctionDescriptor AddRef_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_DOWN$MH = RuntimeHelper.downcallHandle(
        IServerSecurityVtbl.AddRef_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*AddRef)(IServerSecurity*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IServerSecurityVtbl.AddRef_UP$MH, fi, IServerSecurityVtbl.AddRef$FUNC, scope);
        }
        static AddRef ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IServerSecurityVtbl.AddRef_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return IServerSecurityVtbl.AddRef$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(IServerSecurity*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IServerSecurityVtbl.AddRef$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(IServerSecurity*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        IServerSecurityVtbl.AddRef$VH.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IServerSecurityVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        IServerSecurityVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, SegmentScope scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Release_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_UP$MH = RuntimeHelper.upcallHandle(Release.class, "apply", IServerSecurityVtbl.Release_UP$FUNC);
    static final FunctionDescriptor Release_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_DOWN$MH = RuntimeHelper.downcallHandle(
        IServerSecurityVtbl.Release_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*Release)(IServerSecurity*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IServerSecurityVtbl.Release_UP$MH, fi, IServerSecurityVtbl.Release$FUNC, scope);
        }
        static Release ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IServerSecurityVtbl.Release_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return IServerSecurityVtbl.Release$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(IServerSecurity*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IServerSecurityVtbl.Release$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(IServerSecurity*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        IServerSecurityVtbl.Release$VH.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IServerSecurityVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        IServerSecurityVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, SegmentScope scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    static final FunctionDescriptor QueryBlanket$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor QueryBlanket_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryBlanket_UP$MH = RuntimeHelper.upcallHandle(QueryBlanket.class, "apply", IServerSecurityVtbl.QueryBlanket_UP$FUNC);
    static final FunctionDescriptor QueryBlanket_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryBlanket_DOWN$MH = RuntimeHelper.downcallHandle(
        IServerSecurityVtbl.QueryBlanket_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*QueryBlanket)(IServerSecurity*,DWORD*,DWORD*,OLECHAR**,DWORD*,DWORD*,void**,DWORD*);
     * }
     */
    public interface QueryBlanket {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5, java.lang.foreign.MemorySegment _x6, java.lang.foreign.MemorySegment _x7);
        static MemorySegment allocate(QueryBlanket fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IServerSecurityVtbl.QueryBlanket_UP$MH, fi, IServerSecurityVtbl.QueryBlanket$FUNC, scope);
        }
        static QueryBlanket ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5, java.lang.foreign.MemorySegment __x6, java.lang.foreign.MemorySegment __x7) -> {
                try {
                    return (int)IServerSecurityVtbl.QueryBlanket_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6, __x7);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryBlanket$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryBlanket"));
    public static VarHandle QueryBlanket$VH() {
        return IServerSecurityVtbl.QueryBlanket$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryBlanket)(IServerSecurity*,DWORD*,DWORD*,OLECHAR**,DWORD*,DWORD*,void**,DWORD*);
     * }
     */
    public static MemorySegment QueryBlanket$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IServerSecurityVtbl.QueryBlanket$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryBlanket)(IServerSecurity*,DWORD*,DWORD*,OLECHAR**,DWORD*,DWORD*,void**,DWORD*);
     * }
     */
    public static void QueryBlanket$set(MemorySegment seg, MemorySegment x) {
        IServerSecurityVtbl.QueryBlanket$VH.set(seg, x);
    }
    public static MemorySegment QueryBlanket$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IServerSecurityVtbl.QueryBlanket$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryBlanket$set(MemorySegment seg, long index, MemorySegment x) {
        IServerSecurityVtbl.QueryBlanket$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryBlanket QueryBlanket(MemorySegment segment, SegmentScope scope) {
        return QueryBlanket.ofAddress(QueryBlanket$get(segment), scope);
    }
    static final FunctionDescriptor ImpersonateClient$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor ImpersonateClient_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ImpersonateClient_UP$MH = RuntimeHelper.upcallHandle(ImpersonateClient.class, "apply", IServerSecurityVtbl.ImpersonateClient_UP$FUNC);
    static final FunctionDescriptor ImpersonateClient_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ImpersonateClient_DOWN$MH = RuntimeHelper.downcallHandle(
        IServerSecurityVtbl.ImpersonateClient_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*ImpersonateClient)(IServerSecurity*);
     * }
     */
    public interface ImpersonateClient {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(ImpersonateClient fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IServerSecurityVtbl.ImpersonateClient_UP$MH, fi, IServerSecurityVtbl.ImpersonateClient$FUNC, scope);
        }
        static ImpersonateClient ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IServerSecurityVtbl.ImpersonateClient_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ImpersonateClient$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ImpersonateClient"));
    public static VarHandle ImpersonateClient$VH() {
        return IServerSecurityVtbl.ImpersonateClient$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*ImpersonateClient)(IServerSecurity*);
     * }
     */
    public static MemorySegment ImpersonateClient$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IServerSecurityVtbl.ImpersonateClient$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*ImpersonateClient)(IServerSecurity*);
     * }
     */
    public static void ImpersonateClient$set(MemorySegment seg, MemorySegment x) {
        IServerSecurityVtbl.ImpersonateClient$VH.set(seg, x);
    }
    public static MemorySegment ImpersonateClient$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IServerSecurityVtbl.ImpersonateClient$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ImpersonateClient$set(MemorySegment seg, long index, MemorySegment x) {
        IServerSecurityVtbl.ImpersonateClient$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ImpersonateClient ImpersonateClient(MemorySegment segment, SegmentScope scope) {
        return ImpersonateClient.ofAddress(ImpersonateClient$get(segment), scope);
    }
    static final FunctionDescriptor RevertToSelf$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor RevertToSelf_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle RevertToSelf_UP$MH = RuntimeHelper.upcallHandle(RevertToSelf.class, "apply", IServerSecurityVtbl.RevertToSelf_UP$FUNC);
    static final FunctionDescriptor RevertToSelf_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle RevertToSelf_DOWN$MH = RuntimeHelper.downcallHandle(
        IServerSecurityVtbl.RevertToSelf_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*RevertToSelf)(IServerSecurity*);
     * }
     */
    public interface RevertToSelf {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(RevertToSelf fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IServerSecurityVtbl.RevertToSelf_UP$MH, fi, IServerSecurityVtbl.RevertToSelf$FUNC, scope);
        }
        static RevertToSelf ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IServerSecurityVtbl.RevertToSelf_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle RevertToSelf$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("RevertToSelf"));
    public static VarHandle RevertToSelf$VH() {
        return IServerSecurityVtbl.RevertToSelf$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*RevertToSelf)(IServerSecurity*);
     * }
     */
    public static MemorySegment RevertToSelf$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IServerSecurityVtbl.RevertToSelf$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*RevertToSelf)(IServerSecurity*);
     * }
     */
    public static void RevertToSelf$set(MemorySegment seg, MemorySegment x) {
        IServerSecurityVtbl.RevertToSelf$VH.set(seg, x);
    }
    public static MemorySegment RevertToSelf$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IServerSecurityVtbl.RevertToSelf$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void RevertToSelf$set(MemorySegment seg, long index, MemorySegment x) {
        IServerSecurityVtbl.RevertToSelf$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static RevertToSelf RevertToSelf(MemorySegment segment, SegmentScope scope) {
        return RevertToSelf.ofAddress(RevertToSelf$get(segment), scope);
    }
    static final FunctionDescriptor IsImpersonating$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor IsImpersonating_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle IsImpersonating_UP$MH = RuntimeHelper.upcallHandle(IsImpersonating.class, "apply", IServerSecurityVtbl.IsImpersonating_UP$FUNC);
    static final FunctionDescriptor IsImpersonating_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle IsImpersonating_DOWN$MH = RuntimeHelper.downcallHandle(
        IServerSecurityVtbl.IsImpersonating_DOWN$FUNC
    );
    /**
     * {@snippet :
 * BOOL (*IsImpersonating)(IServerSecurity*);
     * }
     */
    public interface IsImpersonating {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(IsImpersonating fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IServerSecurityVtbl.IsImpersonating_UP$MH, fi, IServerSecurityVtbl.IsImpersonating$FUNC, scope);
        }
        static IsImpersonating ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IServerSecurityVtbl.IsImpersonating_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle IsImpersonating$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("IsImpersonating"));
    public static VarHandle IsImpersonating$VH() {
        return IServerSecurityVtbl.IsImpersonating$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BOOL (*IsImpersonating)(IServerSecurity*);
     * }
     */
    public static MemorySegment IsImpersonating$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IServerSecurityVtbl.IsImpersonating$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BOOL (*IsImpersonating)(IServerSecurity*);
     * }
     */
    public static void IsImpersonating$set(MemorySegment seg, MemorySegment x) {
        IServerSecurityVtbl.IsImpersonating$VH.set(seg, x);
    }
    public static MemorySegment IsImpersonating$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IServerSecurityVtbl.IsImpersonating$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void IsImpersonating$set(MemorySegment seg, long index, MemorySegment x) {
        IServerSecurityVtbl.IsImpersonating$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static IsImpersonating IsImpersonating(MemorySegment segment, SegmentScope scope) {
        return IsImpersonating.ofAddress(IsImpersonating$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


