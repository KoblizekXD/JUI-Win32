// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * RPC_STATUS (*RPC_IF_CALLBACK_FN)(RPC_IF_HANDLE InterfaceUuid,void* Context);
 * }
 */
public interface RPC_IF_CALLBACK_FN {

    int apply(java.lang.foreign.MemorySegment InterfaceUuid, java.lang.foreign.MemorySegment Context);
    static MemorySegment allocate(RPC_IF_CALLBACK_FN fi, SegmentScope scope) {
        return RuntimeHelper.upcallStub(constants$631.RPC_IF_CALLBACK_FN_UP$MH, fi, constants$631.RPC_IF_CALLBACK_FN$FUNC, scope);
    }
    static RPC_IF_CALLBACK_FN ofAddress(MemorySegment addr, SegmentScope scope) {
        MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
        return (java.lang.foreign.MemorySegment _InterfaceUuid, java.lang.foreign.MemorySegment _Context) -> {
            try {
                return (int)constants$632.RPC_IF_CALLBACK_FN_DOWN$MH.invokeExact(symbol, _InterfaceUuid, _Context);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


