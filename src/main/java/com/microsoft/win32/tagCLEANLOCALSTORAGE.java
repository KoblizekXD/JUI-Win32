// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct tagCLEANLOCALSTORAGE {
 *     IUnknown* pInterface;
 *     PVOID pStorage;
 *     DWORD flags;
 * };
 * }
 */
public class tagCLEANLOCALSTORAGE {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("pInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("pStorage"),
        Constants$root.C_LONG$LAYOUT.withName("flags"),
        MemoryLayout.paddingLayout(32)
    ).withName("tagCLEANLOCALSTORAGE");
    public static MemoryLayout $LAYOUT() {
        return tagCLEANLOCALSTORAGE.$struct$LAYOUT;
    }
    static final VarHandle pInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pInterface"));
    public static VarHandle pInterface$VH() {
        return tagCLEANLOCALSTORAGE.pInterface$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * IUnknown* pInterface;
     * }
     */
    public static MemorySegment pInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)tagCLEANLOCALSTORAGE.pInterface$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * IUnknown* pInterface;
     * }
     */
    public static void pInterface$set(MemorySegment seg, MemorySegment x) {
        tagCLEANLOCALSTORAGE.pInterface$VH.set(seg, x);
    }
    public static MemorySegment pInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)tagCLEANLOCALSTORAGE.pInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pInterface$set(MemorySegment seg, long index, MemorySegment x) {
        tagCLEANLOCALSTORAGE.pInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pStorage$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pStorage"));
    public static VarHandle pStorage$VH() {
        return tagCLEANLOCALSTORAGE.pStorage$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PVOID pStorage;
     * }
     */
    public static MemorySegment pStorage$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)tagCLEANLOCALSTORAGE.pStorage$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PVOID pStorage;
     * }
     */
    public static void pStorage$set(MemorySegment seg, MemorySegment x) {
        tagCLEANLOCALSTORAGE.pStorage$VH.set(seg, x);
    }
    public static MemorySegment pStorage$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)tagCLEANLOCALSTORAGE.pStorage$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pStorage$set(MemorySegment seg, long index, MemorySegment x) {
        tagCLEANLOCALSTORAGE.pStorage$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("flags"));
    public static VarHandle flags$VH() {
        return tagCLEANLOCALSTORAGE.flags$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD flags;
     * }
     */
    public static int flags$get(MemorySegment seg) {
        return (int)tagCLEANLOCALSTORAGE.flags$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD flags;
     * }
     */
    public static void flags$set(MemorySegment seg, int x) {
        tagCLEANLOCALSTORAGE.flags$VH.set(seg, x);
    }
    public static int flags$get(MemorySegment seg, long index) {
        return (int)tagCLEANLOCALSTORAGE.flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void flags$set(MemorySegment seg, long index, int x) {
        tagCLEANLOCALSTORAGE.flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


