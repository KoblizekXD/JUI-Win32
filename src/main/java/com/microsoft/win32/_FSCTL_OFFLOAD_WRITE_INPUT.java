// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _FSCTL_OFFLOAD_WRITE_INPUT {
 *     DWORD Size;
 *     DWORD Flags;
 *     DWORDLONG FileOffset;
 *     DWORDLONG CopyLength;
 *     DWORDLONG TransferOffset;
 *     BYTE Token[512];
 * };
 * }
 */
public class _FSCTL_OFFLOAD_WRITE_INPUT {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("Size"),
        Constants$root.C_LONG$LAYOUT.withName("Flags"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("FileOffset"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("CopyLength"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("TransferOffset"),
        MemoryLayout.sequenceLayout(512, Constants$root.C_CHAR$LAYOUT).withName("Token")
    ).withName("_FSCTL_OFFLOAD_WRITE_INPUT");
    public static MemoryLayout $LAYOUT() {
        return _FSCTL_OFFLOAD_WRITE_INPUT.$struct$LAYOUT;
    }
    static final VarHandle Size$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Size"));
    public static VarHandle Size$VH() {
        return _FSCTL_OFFLOAD_WRITE_INPUT.Size$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Size;
     * }
     */
    public static int Size$get(MemorySegment seg) {
        return (int)_FSCTL_OFFLOAD_WRITE_INPUT.Size$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Size;
     * }
     */
    public static void Size$set(MemorySegment seg, int x) {
        _FSCTL_OFFLOAD_WRITE_INPUT.Size$VH.set(seg, x);
    }
    public static int Size$get(MemorySegment seg, long index) {
        return (int)_FSCTL_OFFLOAD_WRITE_INPUT.Size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Size$set(MemorySegment seg, long index, int x) {
        _FSCTL_OFFLOAD_WRITE_INPUT.Size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Flags"));
    public static VarHandle Flags$VH() {
        return _FSCTL_OFFLOAD_WRITE_INPUT.Flags$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Flags;
     * }
     */
    public static int Flags$get(MemorySegment seg) {
        return (int)_FSCTL_OFFLOAD_WRITE_INPUT.Flags$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Flags;
     * }
     */
    public static void Flags$set(MemorySegment seg, int x) {
        _FSCTL_OFFLOAD_WRITE_INPUT.Flags$VH.set(seg, x);
    }
    public static int Flags$get(MemorySegment seg, long index) {
        return (int)_FSCTL_OFFLOAD_WRITE_INPUT.Flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Flags$set(MemorySegment seg, long index, int x) {
        _FSCTL_OFFLOAD_WRITE_INPUT.Flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle FileOffset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("FileOffset"));
    public static VarHandle FileOffset$VH() {
        return _FSCTL_OFFLOAD_WRITE_INPUT.FileOffset$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORDLONG FileOffset;
     * }
     */
    public static long FileOffset$get(MemorySegment seg) {
        return (long)_FSCTL_OFFLOAD_WRITE_INPUT.FileOffset$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORDLONG FileOffset;
     * }
     */
    public static void FileOffset$set(MemorySegment seg, long x) {
        _FSCTL_OFFLOAD_WRITE_INPUT.FileOffset$VH.set(seg, x);
    }
    public static long FileOffset$get(MemorySegment seg, long index) {
        return (long)_FSCTL_OFFLOAD_WRITE_INPUT.FileOffset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void FileOffset$set(MemorySegment seg, long index, long x) {
        _FSCTL_OFFLOAD_WRITE_INPUT.FileOffset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle CopyLength$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("CopyLength"));
    public static VarHandle CopyLength$VH() {
        return _FSCTL_OFFLOAD_WRITE_INPUT.CopyLength$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORDLONG CopyLength;
     * }
     */
    public static long CopyLength$get(MemorySegment seg) {
        return (long)_FSCTL_OFFLOAD_WRITE_INPUT.CopyLength$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORDLONG CopyLength;
     * }
     */
    public static void CopyLength$set(MemorySegment seg, long x) {
        _FSCTL_OFFLOAD_WRITE_INPUT.CopyLength$VH.set(seg, x);
    }
    public static long CopyLength$get(MemorySegment seg, long index) {
        return (long)_FSCTL_OFFLOAD_WRITE_INPUT.CopyLength$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CopyLength$set(MemorySegment seg, long index, long x) {
        _FSCTL_OFFLOAD_WRITE_INPUT.CopyLength$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle TransferOffset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("TransferOffset"));
    public static VarHandle TransferOffset$VH() {
        return _FSCTL_OFFLOAD_WRITE_INPUT.TransferOffset$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORDLONG TransferOffset;
     * }
     */
    public static long TransferOffset$get(MemorySegment seg) {
        return (long)_FSCTL_OFFLOAD_WRITE_INPUT.TransferOffset$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORDLONG TransferOffset;
     * }
     */
    public static void TransferOffset$set(MemorySegment seg, long x) {
        _FSCTL_OFFLOAD_WRITE_INPUT.TransferOffset$VH.set(seg, x);
    }
    public static long TransferOffset$get(MemorySegment seg, long index) {
        return (long)_FSCTL_OFFLOAD_WRITE_INPUT.TransferOffset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void TransferOffset$set(MemorySegment seg, long index, long x) {
        _FSCTL_OFFLOAD_WRITE_INPUT.TransferOffset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Token$slice(MemorySegment seg) {
        return seg.asSlice(32, 512);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


