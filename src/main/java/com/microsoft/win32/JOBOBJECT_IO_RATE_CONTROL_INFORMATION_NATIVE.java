// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE {
 *     LONG64 MaxIops;
 *     LONG64 MaxBandwidth;
 *     LONG64 ReservationIops;
 *     PWSTR VolumeName;
 *     DWORD BaseIoSize;
 *     JOB_OBJECT_IO_RATE_CONTROL_FLAGS ControlFlags;
 *     WORD VolumeNameLength;
 * };
 * }
 */
public class JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG_LONG$LAYOUT.withName("MaxIops"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("MaxBandwidth"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("ReservationIops"),
        Constants$root.C_POINTER$LAYOUT.withName("VolumeName"),
        Constants$root.C_LONG$LAYOUT.withName("BaseIoSize"),
        Constants$root.C_LONG$LAYOUT.withName("ControlFlags"),
        Constants$root.C_SHORT$LAYOUT.withName("VolumeNameLength"),
        MemoryLayout.paddingLayout(48)
    ).withName("JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE");
    public static MemoryLayout $LAYOUT() {
        return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE.$struct$LAYOUT;
    }
    static final VarHandle MaxIops$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("MaxIops"));
    public static VarHandle MaxIops$VH() {
        return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE.MaxIops$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LONG64 MaxIops;
     * }
     */
    public static long MaxIops$get(MemorySegment seg) {
        return (long)JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE.MaxIops$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LONG64 MaxIops;
     * }
     */
    public static void MaxIops$set(MemorySegment seg, long x) {
        JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE.MaxIops$VH.set(seg, x);
    }
    public static long MaxIops$get(MemorySegment seg, long index) {
        return (long)JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE.MaxIops$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MaxIops$set(MemorySegment seg, long index, long x) {
        JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE.MaxIops$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MaxBandwidth$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("MaxBandwidth"));
    public static VarHandle MaxBandwidth$VH() {
        return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE.MaxBandwidth$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LONG64 MaxBandwidth;
     * }
     */
    public static long MaxBandwidth$get(MemorySegment seg) {
        return (long)JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE.MaxBandwidth$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LONG64 MaxBandwidth;
     * }
     */
    public static void MaxBandwidth$set(MemorySegment seg, long x) {
        JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE.MaxBandwidth$VH.set(seg, x);
    }
    public static long MaxBandwidth$get(MemorySegment seg, long index) {
        return (long)JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE.MaxBandwidth$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MaxBandwidth$set(MemorySegment seg, long index, long x) {
        JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE.MaxBandwidth$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ReservationIops$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ReservationIops"));
    public static VarHandle ReservationIops$VH() {
        return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE.ReservationIops$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LONG64 ReservationIops;
     * }
     */
    public static long ReservationIops$get(MemorySegment seg) {
        return (long)JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE.ReservationIops$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LONG64 ReservationIops;
     * }
     */
    public static void ReservationIops$set(MemorySegment seg, long x) {
        JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE.ReservationIops$VH.set(seg, x);
    }
    public static long ReservationIops$get(MemorySegment seg, long index) {
        return (long)JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE.ReservationIops$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ReservationIops$set(MemorySegment seg, long index, long x) {
        JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE.ReservationIops$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle VolumeName$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("VolumeName"));
    public static VarHandle VolumeName$VH() {
        return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE.VolumeName$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PWSTR VolumeName;
     * }
     */
    public static MemorySegment VolumeName$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE.VolumeName$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PWSTR VolumeName;
     * }
     */
    public static void VolumeName$set(MemorySegment seg, MemorySegment x) {
        JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE.VolumeName$VH.set(seg, x);
    }
    public static MemorySegment VolumeName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE.VolumeName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void VolumeName$set(MemorySegment seg, long index, MemorySegment x) {
        JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE.VolumeName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle BaseIoSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("BaseIoSize"));
    public static VarHandle BaseIoSize$VH() {
        return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE.BaseIoSize$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD BaseIoSize;
     * }
     */
    public static int BaseIoSize$get(MemorySegment seg) {
        return (int)JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE.BaseIoSize$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD BaseIoSize;
     * }
     */
    public static void BaseIoSize$set(MemorySegment seg, int x) {
        JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE.BaseIoSize$VH.set(seg, x);
    }
    public static int BaseIoSize$get(MemorySegment seg, long index) {
        return (int)JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE.BaseIoSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void BaseIoSize$set(MemorySegment seg, long index, int x) {
        JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE.BaseIoSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ControlFlags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ControlFlags"));
    public static VarHandle ControlFlags$VH() {
        return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE.ControlFlags$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * JOB_OBJECT_IO_RATE_CONTROL_FLAGS ControlFlags;
     * }
     */
    public static int ControlFlags$get(MemorySegment seg) {
        return (int)JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE.ControlFlags$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * JOB_OBJECT_IO_RATE_CONTROL_FLAGS ControlFlags;
     * }
     */
    public static void ControlFlags$set(MemorySegment seg, int x) {
        JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE.ControlFlags$VH.set(seg, x);
    }
    public static int ControlFlags$get(MemorySegment seg, long index) {
        return (int)JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE.ControlFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ControlFlags$set(MemorySegment seg, long index, int x) {
        JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE.ControlFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle VolumeNameLength$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("VolumeNameLength"));
    public static VarHandle VolumeNameLength$VH() {
        return JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE.VolumeNameLength$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD VolumeNameLength;
     * }
     */
    public static short VolumeNameLength$get(MemorySegment seg) {
        return (short)JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE.VolumeNameLength$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD VolumeNameLength;
     * }
     */
    public static void VolumeNameLength$set(MemorySegment seg, short x) {
        JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE.VolumeNameLength$VH.set(seg, x);
    }
    public static short VolumeNameLength$get(MemorySegment seg, long index) {
        return (short)JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE.VolumeNameLength$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void VolumeNameLength$set(MemorySegment seg, long index, short x) {
        JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE.VolumeNameLength$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


