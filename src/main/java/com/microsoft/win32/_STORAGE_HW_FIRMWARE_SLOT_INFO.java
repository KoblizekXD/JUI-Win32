// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _STORAGE_HW_FIRMWARE_SLOT_INFO {
 *     DWORD Version;
 *     DWORD Size;
 *     BYTE SlotNumber;
 *      *     BYTE ReadOnly;
 *     BYTE Reserved0;
 *     BYTE Reserved1[6];
 *     BYTE Revision[16];
 * };
 * }
 */
public class _STORAGE_HW_FIRMWARE_SLOT_INFO {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("Version"),
        Constants$root.C_LONG$LAYOUT.withName("Size"),
        Constants$root.C_CHAR$LAYOUT.withName("SlotNumber"),
        MemoryLayout.paddingLayout(8),
        MemoryLayout.sequenceLayout(6, Constants$root.C_CHAR$LAYOUT).withName("Reserved1"),
        MemoryLayout.sequenceLayout(16, Constants$root.C_CHAR$LAYOUT).withName("Revision")
    ).withName("_STORAGE_HW_FIRMWARE_SLOT_INFO");
    public static MemoryLayout $LAYOUT() {
        return _STORAGE_HW_FIRMWARE_SLOT_INFO.$struct$LAYOUT;
    }
    static final VarHandle Version$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Version"));
    public static VarHandle Version$VH() {
        return _STORAGE_HW_FIRMWARE_SLOT_INFO.Version$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Version;
     * }
     */
    public static int Version$get(MemorySegment seg) {
        return (int)_STORAGE_HW_FIRMWARE_SLOT_INFO.Version$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Version;
     * }
     */
    public static void Version$set(MemorySegment seg, int x) {
        _STORAGE_HW_FIRMWARE_SLOT_INFO.Version$VH.set(seg, x);
    }
    public static int Version$get(MemorySegment seg, long index) {
        return (int)_STORAGE_HW_FIRMWARE_SLOT_INFO.Version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Version$set(MemorySegment seg, long index, int x) {
        _STORAGE_HW_FIRMWARE_SLOT_INFO.Version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Size$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Size"));
    public static VarHandle Size$VH() {
        return _STORAGE_HW_FIRMWARE_SLOT_INFO.Size$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Size;
     * }
     */
    public static int Size$get(MemorySegment seg) {
        return (int)_STORAGE_HW_FIRMWARE_SLOT_INFO.Size$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Size;
     * }
     */
    public static void Size$set(MemorySegment seg, int x) {
        _STORAGE_HW_FIRMWARE_SLOT_INFO.Size$VH.set(seg, x);
    }
    public static int Size$get(MemorySegment seg, long index) {
        return (int)_STORAGE_HW_FIRMWARE_SLOT_INFO.Size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Size$set(MemorySegment seg, long index, int x) {
        _STORAGE_HW_FIRMWARE_SLOT_INFO.Size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle SlotNumber$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SlotNumber"));
    public static VarHandle SlotNumber$VH() {
        return _STORAGE_HW_FIRMWARE_SLOT_INFO.SlotNumber$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE SlotNumber;
     * }
     */
    public static byte SlotNumber$get(MemorySegment seg) {
        return (byte)_STORAGE_HW_FIRMWARE_SLOT_INFO.SlotNumber$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE SlotNumber;
     * }
     */
    public static void SlotNumber$set(MemorySegment seg, byte x) {
        _STORAGE_HW_FIRMWARE_SLOT_INFO.SlotNumber$VH.set(seg, x);
    }
    public static byte SlotNumber$get(MemorySegment seg, long index) {
        return (byte)_STORAGE_HW_FIRMWARE_SLOT_INFO.SlotNumber$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SlotNumber$set(MemorySegment seg, long index, byte x) {
        _STORAGE_HW_FIRMWARE_SLOT_INFO.SlotNumber$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Reserved1$slice(MemorySegment seg) {
        return seg.asSlice(10, 6);
    }
    public static MemorySegment Revision$slice(MemorySegment seg) {
        return seg.asSlice(16, 16);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


