// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IRunnableObjectVtbl {
 *     HRESULT (*QueryInterface)(IRunnableObject*,const IID*,void**);
 *     ULONG (*AddRef)(IRunnableObject*);
 *     ULONG (*Release)(IRunnableObject*);
 *     HRESULT (*GetRunningClass)(IRunnableObject*,LPCLSID);
 *     HRESULT (*Run)(IRunnableObject*,LPBINDCTX);
 *     BOOL (*IsRunning)(IRunnableObject*);
 *     HRESULT (*LockRunning)(IRunnableObject*,BOOL,BOOL);
 *     HRESULT (*SetContainedObject)(IRunnableObject*,BOOL);
 * };
 * }
 */
public class IRunnableObjectVtbl {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("GetRunningClass"),
        Constants$root.C_POINTER$LAYOUT.withName("Run"),
        Constants$root.C_POINTER$LAYOUT.withName("IsRunning"),
        Constants$root.C_POINTER$LAYOUT.withName("LockRunning"),
        Constants$root.C_POINTER$LAYOUT.withName("SetContainedObject")
    ).withName("IRunnableObjectVtbl");
    public static MemoryLayout $LAYOUT() {
        return IRunnableObjectVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor QueryInterface_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_UP$MH = RuntimeHelper.upcallHandle(QueryInterface.class, "apply", IRunnableObjectVtbl.QueryInterface_UP$FUNC);
    static final FunctionDescriptor QueryInterface_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_DOWN$MH = RuntimeHelper.downcallHandle(
        IRunnableObjectVtbl.QueryInterface_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(IRunnableObject*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IRunnableObjectVtbl.QueryInterface_UP$MH, fi, IRunnableObjectVtbl.QueryInterface$FUNC, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IRunnableObjectVtbl.QueryInterface_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return IRunnableObjectVtbl.QueryInterface$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IRunnableObject*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IRunnableObjectVtbl.QueryInterface$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IRunnableObject*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        IRunnableObjectVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IRunnableObjectVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        IRunnableObjectVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, SegmentScope scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor AddRef_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_UP$MH = RuntimeHelper.upcallHandle(AddRef.class, "apply", IRunnableObjectVtbl.AddRef_UP$FUNC);
    static final FunctionDescriptor AddRef_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_DOWN$MH = RuntimeHelper.downcallHandle(
        IRunnableObjectVtbl.AddRef_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*AddRef)(IRunnableObject*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IRunnableObjectVtbl.AddRef_UP$MH, fi, IRunnableObjectVtbl.AddRef$FUNC, scope);
        }
        static AddRef ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IRunnableObjectVtbl.AddRef_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return IRunnableObjectVtbl.AddRef$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(IRunnableObject*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IRunnableObjectVtbl.AddRef$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(IRunnableObject*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        IRunnableObjectVtbl.AddRef$VH.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IRunnableObjectVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        IRunnableObjectVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, SegmentScope scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Release_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_UP$MH = RuntimeHelper.upcallHandle(Release.class, "apply", IRunnableObjectVtbl.Release_UP$FUNC);
    static final FunctionDescriptor Release_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_DOWN$MH = RuntimeHelper.downcallHandle(
        IRunnableObjectVtbl.Release_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*Release)(IRunnableObject*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IRunnableObjectVtbl.Release_UP$MH, fi, IRunnableObjectVtbl.Release$FUNC, scope);
        }
        static Release ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IRunnableObjectVtbl.Release_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return IRunnableObjectVtbl.Release$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(IRunnableObject*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IRunnableObjectVtbl.Release$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(IRunnableObject*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        IRunnableObjectVtbl.Release$VH.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IRunnableObjectVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        IRunnableObjectVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, SegmentScope scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    static final FunctionDescriptor GetRunningClass$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetRunningClass_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetRunningClass_UP$MH = RuntimeHelper.upcallHandle(GetRunningClass.class, "apply", IRunnableObjectVtbl.GetRunningClass_UP$FUNC);
    static final FunctionDescriptor GetRunningClass_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetRunningClass_DOWN$MH = RuntimeHelper.downcallHandle(
        IRunnableObjectVtbl.GetRunningClass_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetRunningClass)(IRunnableObject*,LPCLSID);
     * }
     */
    public interface GetRunningClass {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetRunningClass fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IRunnableObjectVtbl.GetRunningClass_UP$MH, fi, IRunnableObjectVtbl.GetRunningClass$FUNC, scope);
        }
        static GetRunningClass ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IRunnableObjectVtbl.GetRunningClass_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetRunningClass$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetRunningClass"));
    public static VarHandle GetRunningClass$VH() {
        return IRunnableObjectVtbl.GetRunningClass$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetRunningClass)(IRunnableObject*,LPCLSID);
     * }
     */
    public static MemorySegment GetRunningClass$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IRunnableObjectVtbl.GetRunningClass$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetRunningClass)(IRunnableObject*,LPCLSID);
     * }
     */
    public static void GetRunningClass$set(MemorySegment seg, MemorySegment x) {
        IRunnableObjectVtbl.GetRunningClass$VH.set(seg, x);
    }
    public static MemorySegment GetRunningClass$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IRunnableObjectVtbl.GetRunningClass$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetRunningClass$set(MemorySegment seg, long index, MemorySegment x) {
        IRunnableObjectVtbl.GetRunningClass$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetRunningClass GetRunningClass(MemorySegment segment, SegmentScope scope) {
        return GetRunningClass.ofAddress(GetRunningClass$get(segment), scope);
    }
    static final FunctionDescriptor Run$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Run_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Run_UP$MH = RuntimeHelper.upcallHandle(Run.class, "apply", IRunnableObjectVtbl.Run_UP$FUNC);
    static final FunctionDescriptor Run_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Run_DOWN$MH = RuntimeHelper.downcallHandle(
        IRunnableObjectVtbl.Run_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*Run)(IRunnableObject*,LPBINDCTX);
     * }
     */
    public interface Run {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(Run fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IRunnableObjectVtbl.Run_UP$MH, fi, IRunnableObjectVtbl.Run$FUNC, scope);
        }
        static Run ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IRunnableObjectVtbl.Run_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Run$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Run"));
    public static VarHandle Run$VH() {
        return IRunnableObjectVtbl.Run$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Run)(IRunnableObject*,LPBINDCTX);
     * }
     */
    public static MemorySegment Run$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IRunnableObjectVtbl.Run$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Run)(IRunnableObject*,LPBINDCTX);
     * }
     */
    public static void Run$set(MemorySegment seg, MemorySegment x) {
        IRunnableObjectVtbl.Run$VH.set(seg, x);
    }
    public static MemorySegment Run$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IRunnableObjectVtbl.Run$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Run$set(MemorySegment seg, long index, MemorySegment x) {
        IRunnableObjectVtbl.Run$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Run Run(MemorySegment segment, SegmentScope scope) {
        return Run.ofAddress(Run$get(segment), scope);
    }
    static final FunctionDescriptor IsRunning$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor IsRunning_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle IsRunning_UP$MH = RuntimeHelper.upcallHandle(IsRunning.class, "apply", IRunnableObjectVtbl.IsRunning_UP$FUNC);
    static final FunctionDescriptor IsRunning_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle IsRunning_DOWN$MH = RuntimeHelper.downcallHandle(
        IRunnableObjectVtbl.IsRunning_DOWN$FUNC
    );
    /**
     * {@snippet :
 * BOOL (*IsRunning)(IRunnableObject*);
     * }
     */
    public interface IsRunning {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(IsRunning fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IRunnableObjectVtbl.IsRunning_UP$MH, fi, IRunnableObjectVtbl.IsRunning$FUNC, scope);
        }
        static IsRunning ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IRunnableObjectVtbl.IsRunning_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle IsRunning$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("IsRunning"));
    public static VarHandle IsRunning$VH() {
        return IRunnableObjectVtbl.IsRunning$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BOOL (*IsRunning)(IRunnableObject*);
     * }
     */
    public static MemorySegment IsRunning$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IRunnableObjectVtbl.IsRunning$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BOOL (*IsRunning)(IRunnableObject*);
     * }
     */
    public static void IsRunning$set(MemorySegment seg, MemorySegment x) {
        IRunnableObjectVtbl.IsRunning$VH.set(seg, x);
    }
    public static MemorySegment IsRunning$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IRunnableObjectVtbl.IsRunning$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void IsRunning$set(MemorySegment seg, long index, MemorySegment x) {
        IRunnableObjectVtbl.IsRunning$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static IsRunning IsRunning(MemorySegment segment, SegmentScope scope) {
        return IsRunning.ofAddress(IsRunning$get(segment), scope);
    }
    static final FunctionDescriptor LockRunning$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor LockRunning_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle LockRunning_UP$MH = RuntimeHelper.upcallHandle(LockRunning.class, "apply", IRunnableObjectVtbl.LockRunning_UP$FUNC);
    static final FunctionDescriptor LockRunning_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle LockRunning_DOWN$MH = RuntimeHelper.downcallHandle(
        IRunnableObjectVtbl.LockRunning_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*LockRunning)(IRunnableObject*,BOOL,BOOL);
     * }
     */
    public interface LockRunning {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2);
        static MemorySegment allocate(LockRunning fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IRunnableObjectVtbl.LockRunning_UP$MH, fi, IRunnableObjectVtbl.LockRunning$FUNC, scope);
        }
        static LockRunning ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2) -> {
                try {
                    return (int)IRunnableObjectVtbl.LockRunning_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle LockRunning$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("LockRunning"));
    public static VarHandle LockRunning$VH() {
        return IRunnableObjectVtbl.LockRunning$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*LockRunning)(IRunnableObject*,BOOL,BOOL);
     * }
     */
    public static MemorySegment LockRunning$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IRunnableObjectVtbl.LockRunning$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*LockRunning)(IRunnableObject*,BOOL,BOOL);
     * }
     */
    public static void LockRunning$set(MemorySegment seg, MemorySegment x) {
        IRunnableObjectVtbl.LockRunning$VH.set(seg, x);
    }
    public static MemorySegment LockRunning$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IRunnableObjectVtbl.LockRunning$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void LockRunning$set(MemorySegment seg, long index, MemorySegment x) {
        IRunnableObjectVtbl.LockRunning$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static LockRunning LockRunning(MemorySegment segment, SegmentScope scope) {
        return LockRunning.ofAddress(LockRunning$get(segment), scope);
    }
    static final FunctionDescriptor SetContainedObject$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor SetContainedObject_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle SetContainedObject_UP$MH = RuntimeHelper.upcallHandle(SetContainedObject.class, "apply", IRunnableObjectVtbl.SetContainedObject_UP$FUNC);
    static final FunctionDescriptor SetContainedObject_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle SetContainedObject_DOWN$MH = RuntimeHelper.downcallHandle(
        IRunnableObjectVtbl.SetContainedObject_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetContainedObject)(IRunnableObject*,BOOL);
     * }
     */
    public interface SetContainedObject {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(SetContainedObject fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IRunnableObjectVtbl.SetContainedObject_UP$MH, fi, IRunnableObjectVtbl.SetContainedObject$FUNC, scope);
        }
        static SetContainedObject ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)IRunnableObjectVtbl.SetContainedObject_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetContainedObject$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetContainedObject"));
    public static VarHandle SetContainedObject$VH() {
        return IRunnableObjectVtbl.SetContainedObject$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetContainedObject)(IRunnableObject*,BOOL);
     * }
     */
    public static MemorySegment SetContainedObject$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IRunnableObjectVtbl.SetContainedObject$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetContainedObject)(IRunnableObject*,BOOL);
     * }
     */
    public static void SetContainedObject$set(MemorySegment seg, MemorySegment x) {
        IRunnableObjectVtbl.SetContainedObject$VH.set(seg, x);
    }
    public static MemorySegment SetContainedObject$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IRunnableObjectVtbl.SetContainedObject$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetContainedObject$set(MemorySegment seg, long index, MemorySegment x) {
        IRunnableObjectVtbl.SetContainedObject$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetContainedObject SetContainedObject(MemorySegment segment, SegmentScope scope) {
        return SetContainedObject.ofAddress(SetContainedObject$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


