// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _CERT_CHAIN {
 *     DWORD cCerts;
 *     PCERT_BLOB certs;
 *     CRYPT_KEY_PROV_INFO keyLocatorInfo;
 * };
 * }
 */
public class _CERT_CHAIN {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("cCerts"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("certs"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("pwszContainerName"),
            Constants$root.C_POINTER$LAYOUT.withName("pwszProvName"),
            Constants$root.C_LONG$LAYOUT.withName("dwProvType"),
            Constants$root.C_LONG$LAYOUT.withName("dwFlags"),
            Constants$root.C_LONG$LAYOUT.withName("cProvParam"),
            MemoryLayout.paddingLayout(32),
            Constants$root.C_POINTER$LAYOUT.withName("rgProvParam"),
            Constants$root.C_LONG$LAYOUT.withName("dwKeySpec"),
            MemoryLayout.paddingLayout(32)
        ).withName("keyLocatorInfo")
    ).withName("_CERT_CHAIN");
    public static MemoryLayout $LAYOUT() {
        return _CERT_CHAIN.$struct$LAYOUT;
    }
    static final VarHandle cCerts$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cCerts"));
    public static VarHandle cCerts$VH() {
        return _CERT_CHAIN.cCerts$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD cCerts;
     * }
     */
    public static int cCerts$get(MemorySegment seg) {
        return (int)_CERT_CHAIN.cCerts$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD cCerts;
     * }
     */
    public static void cCerts$set(MemorySegment seg, int x) {
        _CERT_CHAIN.cCerts$VH.set(seg, x);
    }
    public static int cCerts$get(MemorySegment seg, long index) {
        return (int)_CERT_CHAIN.cCerts$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cCerts$set(MemorySegment seg, long index, int x) {
        _CERT_CHAIN.cCerts$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle certs$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("certs"));
    public static VarHandle certs$VH() {
        return _CERT_CHAIN.certs$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PCERT_BLOB certs;
     * }
     */
    public static MemorySegment certs$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_CERT_CHAIN.certs$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PCERT_BLOB certs;
     * }
     */
    public static void certs$set(MemorySegment seg, MemorySegment x) {
        _CERT_CHAIN.certs$VH.set(seg, x);
    }
    public static MemorySegment certs$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_CERT_CHAIN.certs$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void certs$set(MemorySegment seg, long index, MemorySegment x) {
        _CERT_CHAIN.certs$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment keyLocatorInfo$slice(MemorySegment seg) {
        return seg.asSlice(16, 48);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


