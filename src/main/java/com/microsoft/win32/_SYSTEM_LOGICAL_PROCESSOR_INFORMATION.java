// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION {
 *     ULONG_PTR ProcessorMask;
 *     LOGICAL_PROCESSOR_RELATIONSHIP Relationship;
 *     union {
 *         struct  ProcessorCore;
 *         struct  NumaNode;
 *         CACHE_DESCRIPTOR Cache;
 *         ULONGLONG Reserved[2];
 *     };
 * };
 * }
 */
public class _SYSTEM_LOGICAL_PROCESSOR_INFORMATION {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG_LONG$LAYOUT.withName("ProcessorMask"),
        Constants$root.C_LONG$LAYOUT.withName("Relationship"),
        MemoryLayout.paddingLayout(32),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_CHAR$LAYOUT.withName("Flags")
            ).withName("ProcessorCore"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("NodeNumber")
            ).withName("NumaNode"),
            MemoryLayout.structLayout(
                Constants$root.C_CHAR$LAYOUT.withName("Level"),
                Constants$root.C_CHAR$LAYOUT.withName("Associativity"),
                Constants$root.C_SHORT$LAYOUT.withName("LineSize"),
                Constants$root.C_LONG$LAYOUT.withName("Size"),
                Constants$root.C_LONG$LAYOUT.withName("Type")
            ).withName("Cache"),
            MemoryLayout.sequenceLayout(2, Constants$root.C_LONG_LONG$LAYOUT).withName("Reserved")
        ).withName("$anon$0")
    ).withName("_SYSTEM_LOGICAL_PROCESSOR_INFORMATION");
    public static MemoryLayout $LAYOUT() {
        return _SYSTEM_LOGICAL_PROCESSOR_INFORMATION.$struct$LAYOUT;
    }
    static final VarHandle ProcessorMask$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ProcessorMask"));
    public static VarHandle ProcessorMask$VH() {
        return _SYSTEM_LOGICAL_PROCESSOR_INFORMATION.ProcessorMask$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG_PTR ProcessorMask;
     * }
     */
    public static long ProcessorMask$get(MemorySegment seg) {
        return (long)_SYSTEM_LOGICAL_PROCESSOR_INFORMATION.ProcessorMask$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG_PTR ProcessorMask;
     * }
     */
    public static void ProcessorMask$set(MemorySegment seg, long x) {
        _SYSTEM_LOGICAL_PROCESSOR_INFORMATION.ProcessorMask$VH.set(seg, x);
    }
    public static long ProcessorMask$get(MemorySegment seg, long index) {
        return (long)_SYSTEM_LOGICAL_PROCESSOR_INFORMATION.ProcessorMask$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ProcessorMask$set(MemorySegment seg, long index, long x) {
        _SYSTEM_LOGICAL_PROCESSOR_INFORMATION.ProcessorMask$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Relationship$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Relationship"));
    public static VarHandle Relationship$VH() {
        return _SYSTEM_LOGICAL_PROCESSOR_INFORMATION.Relationship$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LOGICAL_PROCESSOR_RELATIONSHIP Relationship;
     * }
     */
    public static int Relationship$get(MemorySegment seg) {
        return (int)_SYSTEM_LOGICAL_PROCESSOR_INFORMATION.Relationship$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LOGICAL_PROCESSOR_RELATIONSHIP Relationship;
     * }
     */
    public static void Relationship$set(MemorySegment seg, int x) {
        _SYSTEM_LOGICAL_PROCESSOR_INFORMATION.Relationship$VH.set(seg, x);
    }
    public static int Relationship$get(MemorySegment seg, long index) {
        return (int)_SYSTEM_LOGICAL_PROCESSOR_INFORMATION.Relationship$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Relationship$set(MemorySegment seg, long index, int x) {
        _SYSTEM_LOGICAL_PROCESSOR_INFORMATION.Relationship$VH.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
     * struct {
     *     BYTE Flags;
     * };
     * }
     */
    public static final class ProcessorCore {

        // Suppresses default constructor, ensuring non-instantiability.
        private ProcessorCore() {}
        static final StructLayout ProcessorCore$struct$LAYOUT = MemoryLayout.structLayout(
            Constants$root.C_CHAR$LAYOUT.withName("Flags")
        );
        public static MemoryLayout $LAYOUT() {
            return ProcessorCore.ProcessorCore$struct$LAYOUT;
        }
        static final VarHandle Flags$VH = ProcessorCore$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Flags"));
        public static VarHandle Flags$VH() {
            return ProcessorCore.Flags$VH;
        }
        /**
         * Getter for field:
         * {@snippet :
         * BYTE Flags;
         * }
         */
        public static byte Flags$get(MemorySegment seg) {
            return (byte)ProcessorCore.Flags$VH.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * BYTE Flags;
         * }
         */
        public static void Flags$set(MemorySegment seg, byte x) {
            ProcessorCore.Flags$VH.set(seg, x);
        }
        public static byte Flags$get(MemorySegment seg, long index) {
            return (byte)ProcessorCore.Flags$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void Flags$set(MemorySegment seg, long index, byte x) {
            ProcessorCore.Flags$VH.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
    }

    public static MemorySegment ProcessorCore$slice(MemorySegment seg) {
        return seg.asSlice(16, 1);
    }
    /**
     * {@snippet :
     * struct {
     *     DWORD NodeNumber;
     * };
     * }
     */
    public static final class NumaNode {

        // Suppresses default constructor, ensuring non-instantiability.
        private NumaNode() {}
        static final StructLayout NumaNode$struct$LAYOUT = MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("NodeNumber")
        );
        public static MemoryLayout $LAYOUT() {
            return NumaNode.NumaNode$struct$LAYOUT;
        }
        static final VarHandle NodeNumber$VH = NumaNode$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("NodeNumber"));
        public static VarHandle NodeNumber$VH() {
            return NumaNode.NodeNumber$VH;
        }
        /**
         * Getter for field:
         * {@snippet :
         * DWORD NodeNumber;
         * }
         */
        public static int NodeNumber$get(MemorySegment seg) {
            return (int)NumaNode.NodeNumber$VH.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * DWORD NodeNumber;
         * }
         */
        public static void NodeNumber$set(MemorySegment seg, int x) {
            NumaNode.NodeNumber$VH.set(seg, x);
        }
        public static int NodeNumber$get(MemorySegment seg, long index) {
            return (int)NumaNode.NodeNumber$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void NodeNumber$set(MemorySegment seg, long index, int x) {
            NumaNode.NodeNumber$VH.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
    }

    public static MemorySegment NumaNode$slice(MemorySegment seg) {
        return seg.asSlice(16, 4);
    }
    public static MemorySegment Cache$slice(MemorySegment seg) {
        return seg.asSlice(16, 12);
    }
    public static MemorySegment Reserved$slice(MemorySegment seg) {
        return seg.asSlice(16, 16);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


