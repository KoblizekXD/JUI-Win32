// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * int (*LOCALE_ENUMPROCEX)(unsigned short*,unsigned long,long long);
 * }
 */
public interface LOCALE_ENUMPROCEX {

    int apply(java.lang.foreign.MemorySegment _x0, int _x1, long _x2);
    static MemorySegment allocate(LOCALE_ENUMPROCEX fi, SegmentScope scope) {
        return RuntimeHelper.upcallStub(constants$546.LOCALE_ENUMPROCEX_UP$MH, fi, constants$546.LOCALE_ENUMPROCEX$FUNC, scope);
    }
    static LOCALE_ENUMPROCEX ofAddress(MemorySegment addr, SegmentScope scope) {
        MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
        return (java.lang.foreign.MemorySegment __x0, int __x1, long __x2) -> {
            try {
                return (int)constants$547.LOCALE_ENUMPROCEX_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


