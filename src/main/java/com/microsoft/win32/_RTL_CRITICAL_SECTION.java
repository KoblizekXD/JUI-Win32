// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _RTL_CRITICAL_SECTION {
 *     PRTL_CRITICAL_SECTION_DEBUG DebugInfo;
 *     LONG LockCount;
 *     LONG RecursionCount;
 *     HANDLE OwningThread;
 *     HANDLE LockSemaphore;
 *     ULONG_PTR SpinCount;
 * };
 * }
 */
public class _RTL_CRITICAL_SECTION {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("DebugInfo"),
        Constants$root.C_LONG$LAYOUT.withName("LockCount"),
        Constants$root.C_LONG$LAYOUT.withName("RecursionCount"),
        Constants$root.C_POINTER$LAYOUT.withName("OwningThread"),
        Constants$root.C_POINTER$LAYOUT.withName("LockSemaphore"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("SpinCount")
    ).withName("_RTL_CRITICAL_SECTION");
    public static MemoryLayout $LAYOUT() {
        return _RTL_CRITICAL_SECTION.$struct$LAYOUT;
    }
    static final VarHandle DebugInfo$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("DebugInfo"));
    public static VarHandle DebugInfo$VH() {
        return _RTL_CRITICAL_SECTION.DebugInfo$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PRTL_CRITICAL_SECTION_DEBUG DebugInfo;
     * }
     */
    public static MemorySegment DebugInfo$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_RTL_CRITICAL_SECTION.DebugInfo$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PRTL_CRITICAL_SECTION_DEBUG DebugInfo;
     * }
     */
    public static void DebugInfo$set(MemorySegment seg, MemorySegment x) {
        _RTL_CRITICAL_SECTION.DebugInfo$VH.set(seg, x);
    }
    public static MemorySegment DebugInfo$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_RTL_CRITICAL_SECTION.DebugInfo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DebugInfo$set(MemorySegment seg, long index, MemorySegment x) {
        _RTL_CRITICAL_SECTION.DebugInfo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle LockCount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("LockCount"));
    public static VarHandle LockCount$VH() {
        return _RTL_CRITICAL_SECTION.LockCount$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LONG LockCount;
     * }
     */
    public static int LockCount$get(MemorySegment seg) {
        return (int)_RTL_CRITICAL_SECTION.LockCount$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LONG LockCount;
     * }
     */
    public static void LockCount$set(MemorySegment seg, int x) {
        _RTL_CRITICAL_SECTION.LockCount$VH.set(seg, x);
    }
    public static int LockCount$get(MemorySegment seg, long index) {
        return (int)_RTL_CRITICAL_SECTION.LockCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void LockCount$set(MemorySegment seg, long index, int x) {
        _RTL_CRITICAL_SECTION.LockCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle RecursionCount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("RecursionCount"));
    public static VarHandle RecursionCount$VH() {
        return _RTL_CRITICAL_SECTION.RecursionCount$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LONG RecursionCount;
     * }
     */
    public static int RecursionCount$get(MemorySegment seg) {
        return (int)_RTL_CRITICAL_SECTION.RecursionCount$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LONG RecursionCount;
     * }
     */
    public static void RecursionCount$set(MemorySegment seg, int x) {
        _RTL_CRITICAL_SECTION.RecursionCount$VH.set(seg, x);
    }
    public static int RecursionCount$get(MemorySegment seg, long index) {
        return (int)_RTL_CRITICAL_SECTION.RecursionCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void RecursionCount$set(MemorySegment seg, long index, int x) {
        _RTL_CRITICAL_SECTION.RecursionCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle OwningThread$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("OwningThread"));
    public static VarHandle OwningThread$VH() {
        return _RTL_CRITICAL_SECTION.OwningThread$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HANDLE OwningThread;
     * }
     */
    public static MemorySegment OwningThread$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_RTL_CRITICAL_SECTION.OwningThread$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HANDLE OwningThread;
     * }
     */
    public static void OwningThread$set(MemorySegment seg, MemorySegment x) {
        _RTL_CRITICAL_SECTION.OwningThread$VH.set(seg, x);
    }
    public static MemorySegment OwningThread$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_RTL_CRITICAL_SECTION.OwningThread$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void OwningThread$set(MemorySegment seg, long index, MemorySegment x) {
        _RTL_CRITICAL_SECTION.OwningThread$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle LockSemaphore$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("LockSemaphore"));
    public static VarHandle LockSemaphore$VH() {
        return _RTL_CRITICAL_SECTION.LockSemaphore$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HANDLE LockSemaphore;
     * }
     */
    public static MemorySegment LockSemaphore$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_RTL_CRITICAL_SECTION.LockSemaphore$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HANDLE LockSemaphore;
     * }
     */
    public static void LockSemaphore$set(MemorySegment seg, MemorySegment x) {
        _RTL_CRITICAL_SECTION.LockSemaphore$VH.set(seg, x);
    }
    public static MemorySegment LockSemaphore$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_RTL_CRITICAL_SECTION.LockSemaphore$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void LockSemaphore$set(MemorySegment seg, long index, MemorySegment x) {
        _RTL_CRITICAL_SECTION.LockSemaphore$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle SpinCount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SpinCount"));
    public static VarHandle SpinCount$VH() {
        return _RTL_CRITICAL_SECTION.SpinCount$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG_PTR SpinCount;
     * }
     */
    public static long SpinCount$get(MemorySegment seg) {
        return (long)_RTL_CRITICAL_SECTION.SpinCount$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG_PTR SpinCount;
     * }
     */
    public static void SpinCount$set(MemorySegment seg, long x) {
        _RTL_CRITICAL_SECTION.SpinCount$VH.set(seg, x);
    }
    public static long SpinCount$get(MemorySegment seg, long index) {
        return (long)_RTL_CRITICAL_SECTION.SpinCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SpinCount$set(MemorySegment seg, long index, long x) {
        _RTL_CRITICAL_SECTION.SpinCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


