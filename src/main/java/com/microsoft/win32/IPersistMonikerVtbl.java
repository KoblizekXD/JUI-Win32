// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IPersistMonikerVtbl {
 *     HRESULT (*QueryInterface)(IPersistMoniker*,const IID*,void**);
 *     ULONG (*AddRef)(IPersistMoniker*);
 *     ULONG (*Release)(IPersistMoniker*);
 *     HRESULT (*GetClassID)(IPersistMoniker*,CLSID*);
 *     HRESULT (*IsDirty)(IPersistMoniker*);
 *     HRESULT (*Load)(IPersistMoniker*,BOOL,IMoniker*,LPBC,DWORD);
 *     HRESULT (*Save)(IPersistMoniker*,IMoniker*,LPBC,BOOL);
 *     HRESULT (*SaveCompleted)(IPersistMoniker*,IMoniker*,LPBC);
 *     HRESULT (*GetCurMoniker)(IPersistMoniker*,IMoniker**);
 * };
 * }
 */
public class IPersistMonikerVtbl {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("GetClassID"),
        Constants$root.C_POINTER$LAYOUT.withName("IsDirty"),
        Constants$root.C_POINTER$LAYOUT.withName("Load"),
        Constants$root.C_POINTER$LAYOUT.withName("Save"),
        Constants$root.C_POINTER$LAYOUT.withName("SaveCompleted"),
        Constants$root.C_POINTER$LAYOUT.withName("GetCurMoniker")
    ).withName("IPersistMonikerVtbl");
    public static MemoryLayout $LAYOUT() {
        return IPersistMonikerVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor QueryInterface_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_UP$MH = RuntimeHelper.upcallHandle(QueryInterface.class, "apply", IPersistMonikerVtbl.QueryInterface_UP$FUNC);
    static final FunctionDescriptor QueryInterface_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_DOWN$MH = RuntimeHelper.downcallHandle(
        IPersistMonikerVtbl.QueryInterface_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(IPersistMoniker*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IPersistMonikerVtbl.QueryInterface_UP$MH, fi, IPersistMonikerVtbl.QueryInterface$FUNC, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IPersistMonikerVtbl.QueryInterface_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return IPersistMonikerVtbl.QueryInterface$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IPersistMoniker*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IPersistMonikerVtbl.QueryInterface$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IPersistMoniker*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        IPersistMonikerVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IPersistMonikerVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        IPersistMonikerVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, SegmentScope scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor AddRef_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_UP$MH = RuntimeHelper.upcallHandle(AddRef.class, "apply", IPersistMonikerVtbl.AddRef_UP$FUNC);
    static final FunctionDescriptor AddRef_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_DOWN$MH = RuntimeHelper.downcallHandle(
        IPersistMonikerVtbl.AddRef_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*AddRef)(IPersistMoniker*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IPersistMonikerVtbl.AddRef_UP$MH, fi, IPersistMonikerVtbl.AddRef$FUNC, scope);
        }
        static AddRef ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IPersistMonikerVtbl.AddRef_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return IPersistMonikerVtbl.AddRef$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(IPersistMoniker*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IPersistMonikerVtbl.AddRef$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(IPersistMoniker*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        IPersistMonikerVtbl.AddRef$VH.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IPersistMonikerVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        IPersistMonikerVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, SegmentScope scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Release_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_UP$MH = RuntimeHelper.upcallHandle(Release.class, "apply", IPersistMonikerVtbl.Release_UP$FUNC);
    static final FunctionDescriptor Release_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_DOWN$MH = RuntimeHelper.downcallHandle(
        IPersistMonikerVtbl.Release_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*Release)(IPersistMoniker*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IPersistMonikerVtbl.Release_UP$MH, fi, IPersistMonikerVtbl.Release$FUNC, scope);
        }
        static Release ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IPersistMonikerVtbl.Release_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return IPersistMonikerVtbl.Release$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(IPersistMoniker*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IPersistMonikerVtbl.Release$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(IPersistMoniker*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        IPersistMonikerVtbl.Release$VH.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IPersistMonikerVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        IPersistMonikerVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, SegmentScope scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    static final FunctionDescriptor GetClassID$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetClassID_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetClassID_UP$MH = RuntimeHelper.upcallHandle(GetClassID.class, "apply", IPersistMonikerVtbl.GetClassID_UP$FUNC);
    static final FunctionDescriptor GetClassID_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetClassID_DOWN$MH = RuntimeHelper.downcallHandle(
        IPersistMonikerVtbl.GetClassID_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetClassID)(IPersistMoniker*,CLSID*);
     * }
     */
    public interface GetClassID {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetClassID fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IPersistMonikerVtbl.GetClassID_UP$MH, fi, IPersistMonikerVtbl.GetClassID$FUNC, scope);
        }
        static GetClassID ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IPersistMonikerVtbl.GetClassID_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetClassID$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetClassID"));
    public static VarHandle GetClassID$VH() {
        return IPersistMonikerVtbl.GetClassID$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetClassID)(IPersistMoniker*,CLSID*);
     * }
     */
    public static MemorySegment GetClassID$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IPersistMonikerVtbl.GetClassID$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetClassID)(IPersistMoniker*,CLSID*);
     * }
     */
    public static void GetClassID$set(MemorySegment seg, MemorySegment x) {
        IPersistMonikerVtbl.GetClassID$VH.set(seg, x);
    }
    public static MemorySegment GetClassID$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IPersistMonikerVtbl.GetClassID$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetClassID$set(MemorySegment seg, long index, MemorySegment x) {
        IPersistMonikerVtbl.GetClassID$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetClassID GetClassID(MemorySegment segment, SegmentScope scope) {
        return GetClassID.ofAddress(GetClassID$get(segment), scope);
    }
    static final FunctionDescriptor IsDirty$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor IsDirty_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle IsDirty_UP$MH = RuntimeHelper.upcallHandle(IsDirty.class, "apply", IPersistMonikerVtbl.IsDirty_UP$FUNC);
    static final FunctionDescriptor IsDirty_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle IsDirty_DOWN$MH = RuntimeHelper.downcallHandle(
        IPersistMonikerVtbl.IsDirty_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*IsDirty)(IPersistMoniker*);
     * }
     */
    public interface IsDirty {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(IsDirty fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IPersistMonikerVtbl.IsDirty_UP$MH, fi, IPersistMonikerVtbl.IsDirty$FUNC, scope);
        }
        static IsDirty ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IPersistMonikerVtbl.IsDirty_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle IsDirty$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("IsDirty"));
    public static VarHandle IsDirty$VH() {
        return IPersistMonikerVtbl.IsDirty$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*IsDirty)(IPersistMoniker*);
     * }
     */
    public static MemorySegment IsDirty$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IPersistMonikerVtbl.IsDirty$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*IsDirty)(IPersistMoniker*);
     * }
     */
    public static void IsDirty$set(MemorySegment seg, MemorySegment x) {
        IPersistMonikerVtbl.IsDirty$VH.set(seg, x);
    }
    public static MemorySegment IsDirty$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IPersistMonikerVtbl.IsDirty$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void IsDirty$set(MemorySegment seg, long index, MemorySegment x) {
        IPersistMonikerVtbl.IsDirty$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static IsDirty IsDirty(MemorySegment segment, SegmentScope scope) {
        return IsDirty.ofAddress(IsDirty$get(segment), scope);
    }
    static final FunctionDescriptor Load$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor Load_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle Load_UP$MH = RuntimeHelper.upcallHandle(Load.class, "apply", IPersistMonikerVtbl.Load_UP$FUNC);
    static final FunctionDescriptor Load_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle Load_DOWN$MH = RuntimeHelper.downcallHandle(
        IPersistMonikerVtbl.Load_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*Load)(IPersistMoniker*,BOOL,IMoniker*,LPBC,DWORD);
     * }
     */
    public interface Load {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, int _x4);
        static MemorySegment allocate(Load fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IPersistMonikerVtbl.Load_UP$MH, fi, IPersistMonikerVtbl.Load$FUNC, scope);
        }
        static Load ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, int __x4) -> {
                try {
                    return (int)IPersistMonikerVtbl.Load_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Load$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Load"));
    public static VarHandle Load$VH() {
        return IPersistMonikerVtbl.Load$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Load)(IPersistMoniker*,BOOL,IMoniker*,LPBC,DWORD);
     * }
     */
    public static MemorySegment Load$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IPersistMonikerVtbl.Load$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Load)(IPersistMoniker*,BOOL,IMoniker*,LPBC,DWORD);
     * }
     */
    public static void Load$set(MemorySegment seg, MemorySegment x) {
        IPersistMonikerVtbl.Load$VH.set(seg, x);
    }
    public static MemorySegment Load$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IPersistMonikerVtbl.Load$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Load$set(MemorySegment seg, long index, MemorySegment x) {
        IPersistMonikerVtbl.Load$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Load Load(MemorySegment segment, SegmentScope scope) {
        return Load.ofAddress(Load$get(segment), scope);
    }
    static final FunctionDescriptor Save$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor Save_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle Save_UP$MH = RuntimeHelper.upcallHandle(Save.class, "apply", IPersistMonikerVtbl.Save_UP$FUNC);
    static final FunctionDescriptor Save_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle Save_DOWN$MH = RuntimeHelper.downcallHandle(
        IPersistMonikerVtbl.Save_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*Save)(IPersistMoniker*,IMoniker*,LPBC,BOOL);
     * }
     */
    public interface Save {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3);
        static MemorySegment allocate(Save fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IPersistMonikerVtbl.Save_UP$MH, fi, IPersistMonikerVtbl.Save$FUNC, scope);
        }
        static Save ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3) -> {
                try {
                    return (int)IPersistMonikerVtbl.Save_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Save$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Save"));
    public static VarHandle Save$VH() {
        return IPersistMonikerVtbl.Save$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Save)(IPersistMoniker*,IMoniker*,LPBC,BOOL);
     * }
     */
    public static MemorySegment Save$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IPersistMonikerVtbl.Save$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Save)(IPersistMoniker*,IMoniker*,LPBC,BOOL);
     * }
     */
    public static void Save$set(MemorySegment seg, MemorySegment x) {
        IPersistMonikerVtbl.Save$VH.set(seg, x);
    }
    public static MemorySegment Save$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IPersistMonikerVtbl.Save$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Save$set(MemorySegment seg, long index, MemorySegment x) {
        IPersistMonikerVtbl.Save$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Save Save(MemorySegment segment, SegmentScope scope) {
        return Save.ofAddress(Save$get(segment), scope);
    }
    static final FunctionDescriptor SaveCompleted$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor SaveCompleted_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SaveCompleted_UP$MH = RuntimeHelper.upcallHandle(SaveCompleted.class, "apply", IPersistMonikerVtbl.SaveCompleted_UP$FUNC);
    static final FunctionDescriptor SaveCompleted_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SaveCompleted_DOWN$MH = RuntimeHelper.downcallHandle(
        IPersistMonikerVtbl.SaveCompleted_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SaveCompleted)(IPersistMoniker*,IMoniker*,LPBC);
     * }
     */
    public interface SaveCompleted {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(SaveCompleted fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IPersistMonikerVtbl.SaveCompleted_UP$MH, fi, IPersistMonikerVtbl.SaveCompleted$FUNC, scope);
        }
        static SaveCompleted ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IPersistMonikerVtbl.SaveCompleted_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SaveCompleted$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SaveCompleted"));
    public static VarHandle SaveCompleted$VH() {
        return IPersistMonikerVtbl.SaveCompleted$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SaveCompleted)(IPersistMoniker*,IMoniker*,LPBC);
     * }
     */
    public static MemorySegment SaveCompleted$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IPersistMonikerVtbl.SaveCompleted$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SaveCompleted)(IPersistMoniker*,IMoniker*,LPBC);
     * }
     */
    public static void SaveCompleted$set(MemorySegment seg, MemorySegment x) {
        IPersistMonikerVtbl.SaveCompleted$VH.set(seg, x);
    }
    public static MemorySegment SaveCompleted$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IPersistMonikerVtbl.SaveCompleted$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SaveCompleted$set(MemorySegment seg, long index, MemorySegment x) {
        IPersistMonikerVtbl.SaveCompleted$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SaveCompleted SaveCompleted(MemorySegment segment, SegmentScope scope) {
        return SaveCompleted.ofAddress(SaveCompleted$get(segment), scope);
    }
    static final FunctionDescriptor GetCurMoniker$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetCurMoniker_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetCurMoniker_UP$MH = RuntimeHelper.upcallHandle(GetCurMoniker.class, "apply", IPersistMonikerVtbl.GetCurMoniker_UP$FUNC);
    static final FunctionDescriptor GetCurMoniker_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetCurMoniker_DOWN$MH = RuntimeHelper.downcallHandle(
        IPersistMonikerVtbl.GetCurMoniker_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetCurMoniker)(IPersistMoniker*,IMoniker**);
     * }
     */
    public interface GetCurMoniker {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetCurMoniker fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IPersistMonikerVtbl.GetCurMoniker_UP$MH, fi, IPersistMonikerVtbl.GetCurMoniker$FUNC, scope);
        }
        static GetCurMoniker ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IPersistMonikerVtbl.GetCurMoniker_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetCurMoniker$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetCurMoniker"));
    public static VarHandle GetCurMoniker$VH() {
        return IPersistMonikerVtbl.GetCurMoniker$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetCurMoniker)(IPersistMoniker*,IMoniker**);
     * }
     */
    public static MemorySegment GetCurMoniker$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IPersistMonikerVtbl.GetCurMoniker$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetCurMoniker)(IPersistMoniker*,IMoniker**);
     * }
     */
    public static void GetCurMoniker$set(MemorySegment seg, MemorySegment x) {
        IPersistMonikerVtbl.GetCurMoniker$VH.set(seg, x);
    }
    public static MemorySegment GetCurMoniker$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IPersistMonikerVtbl.GetCurMoniker$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetCurMoniker$set(MemorySegment seg, long index, MemorySegment x) {
        IPersistMonikerVtbl.GetCurMoniker$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetCurMoniker GetCurMoniker(MemorySegment segment, SegmentScope scope) {
        return GetCurMoniker.ofAddress(GetCurMoniker$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


