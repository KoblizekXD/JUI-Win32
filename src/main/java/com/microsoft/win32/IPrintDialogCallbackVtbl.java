// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IPrintDialogCallbackVtbl {
 *     HRESULT (*QueryInterface)(IPrintDialogCallback*,const IID*,void**);
 *     ULONG (*AddRef)(IPrintDialogCallback*);
 *     ULONG (*Release)(IPrintDialogCallback*);
 *     HRESULT (*InitDone)(IPrintDialogCallback*);
 *     HRESULT (*SelectionChange)(IPrintDialogCallback*);
 *     HRESULT (*HandleMessage)(IPrintDialogCallback*,HWND,UINT,WPARAM,LPARAM,LRESULT*);
 * };
 * }
 */
public class IPrintDialogCallbackVtbl {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("InitDone"),
        Constants$root.C_POINTER$LAYOUT.withName("SelectionChange"),
        Constants$root.C_POINTER$LAYOUT.withName("HandleMessage")
    ).withName("IPrintDialogCallbackVtbl");
    public static MemoryLayout $LAYOUT() {
        return IPrintDialogCallbackVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor QueryInterface_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_UP$MH = RuntimeHelper.upcallHandle(QueryInterface.class, "apply", IPrintDialogCallbackVtbl.QueryInterface_UP$FUNC);
    static final FunctionDescriptor QueryInterface_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_DOWN$MH = RuntimeHelper.downcallHandle(
        IPrintDialogCallbackVtbl.QueryInterface_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(IPrintDialogCallback*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IPrintDialogCallbackVtbl.QueryInterface_UP$MH, fi, IPrintDialogCallbackVtbl.QueryInterface$FUNC, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IPrintDialogCallbackVtbl.QueryInterface_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return IPrintDialogCallbackVtbl.QueryInterface$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IPrintDialogCallback*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IPrintDialogCallbackVtbl.QueryInterface$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IPrintDialogCallback*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        IPrintDialogCallbackVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IPrintDialogCallbackVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        IPrintDialogCallbackVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, SegmentScope scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor AddRef_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_UP$MH = RuntimeHelper.upcallHandle(AddRef.class, "apply", IPrintDialogCallbackVtbl.AddRef_UP$FUNC);
    static final FunctionDescriptor AddRef_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_DOWN$MH = RuntimeHelper.downcallHandle(
        IPrintDialogCallbackVtbl.AddRef_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*AddRef)(IPrintDialogCallback*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IPrintDialogCallbackVtbl.AddRef_UP$MH, fi, IPrintDialogCallbackVtbl.AddRef$FUNC, scope);
        }
        static AddRef ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IPrintDialogCallbackVtbl.AddRef_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return IPrintDialogCallbackVtbl.AddRef$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(IPrintDialogCallback*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IPrintDialogCallbackVtbl.AddRef$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(IPrintDialogCallback*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        IPrintDialogCallbackVtbl.AddRef$VH.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IPrintDialogCallbackVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        IPrintDialogCallbackVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, SegmentScope scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Release_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_UP$MH = RuntimeHelper.upcallHandle(Release.class, "apply", IPrintDialogCallbackVtbl.Release_UP$FUNC);
    static final FunctionDescriptor Release_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_DOWN$MH = RuntimeHelper.downcallHandle(
        IPrintDialogCallbackVtbl.Release_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*Release)(IPrintDialogCallback*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IPrintDialogCallbackVtbl.Release_UP$MH, fi, IPrintDialogCallbackVtbl.Release$FUNC, scope);
        }
        static Release ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IPrintDialogCallbackVtbl.Release_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return IPrintDialogCallbackVtbl.Release$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(IPrintDialogCallback*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IPrintDialogCallbackVtbl.Release$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(IPrintDialogCallback*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        IPrintDialogCallbackVtbl.Release$VH.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IPrintDialogCallbackVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        IPrintDialogCallbackVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, SegmentScope scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    static final FunctionDescriptor InitDone$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor InitDone_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle InitDone_UP$MH = RuntimeHelper.upcallHandle(InitDone.class, "apply", IPrintDialogCallbackVtbl.InitDone_UP$FUNC);
    static final FunctionDescriptor InitDone_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle InitDone_DOWN$MH = RuntimeHelper.downcallHandle(
        IPrintDialogCallbackVtbl.InitDone_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*InitDone)(IPrintDialogCallback*);
     * }
     */
    public interface InitDone {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(InitDone fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IPrintDialogCallbackVtbl.InitDone_UP$MH, fi, IPrintDialogCallbackVtbl.InitDone$FUNC, scope);
        }
        static InitDone ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IPrintDialogCallbackVtbl.InitDone_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle InitDone$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("InitDone"));
    public static VarHandle InitDone$VH() {
        return IPrintDialogCallbackVtbl.InitDone$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*InitDone)(IPrintDialogCallback*);
     * }
     */
    public static MemorySegment InitDone$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IPrintDialogCallbackVtbl.InitDone$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*InitDone)(IPrintDialogCallback*);
     * }
     */
    public static void InitDone$set(MemorySegment seg, MemorySegment x) {
        IPrintDialogCallbackVtbl.InitDone$VH.set(seg, x);
    }
    public static MemorySegment InitDone$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IPrintDialogCallbackVtbl.InitDone$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void InitDone$set(MemorySegment seg, long index, MemorySegment x) {
        IPrintDialogCallbackVtbl.InitDone$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static InitDone InitDone(MemorySegment segment, SegmentScope scope) {
        return InitDone.ofAddress(InitDone$get(segment), scope);
    }
    static final FunctionDescriptor SelectionChange$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor SelectionChange_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SelectionChange_UP$MH = RuntimeHelper.upcallHandle(SelectionChange.class, "apply", IPrintDialogCallbackVtbl.SelectionChange_UP$FUNC);
    static final FunctionDescriptor SelectionChange_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SelectionChange_DOWN$MH = RuntimeHelper.downcallHandle(
        IPrintDialogCallbackVtbl.SelectionChange_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SelectionChange)(IPrintDialogCallback*);
     * }
     */
    public interface SelectionChange {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(SelectionChange fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IPrintDialogCallbackVtbl.SelectionChange_UP$MH, fi, IPrintDialogCallbackVtbl.SelectionChange$FUNC, scope);
        }
        static SelectionChange ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IPrintDialogCallbackVtbl.SelectionChange_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SelectionChange$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SelectionChange"));
    public static VarHandle SelectionChange$VH() {
        return IPrintDialogCallbackVtbl.SelectionChange$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SelectionChange)(IPrintDialogCallback*);
     * }
     */
    public static MemorySegment SelectionChange$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IPrintDialogCallbackVtbl.SelectionChange$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SelectionChange)(IPrintDialogCallback*);
     * }
     */
    public static void SelectionChange$set(MemorySegment seg, MemorySegment x) {
        IPrintDialogCallbackVtbl.SelectionChange$VH.set(seg, x);
    }
    public static MemorySegment SelectionChange$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IPrintDialogCallbackVtbl.SelectionChange$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SelectionChange$set(MemorySegment seg, long index, MemorySegment x) {
        IPrintDialogCallbackVtbl.SelectionChange$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SelectionChange SelectionChange(MemorySegment segment, SegmentScope scope) {
        return SelectionChange.ofAddress(SelectionChange$get(segment), scope);
    }
    static final FunctionDescriptor HandleMessage$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor HandleMessage_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle HandleMessage_UP$MH = RuntimeHelper.upcallHandle(HandleMessage.class, "apply", IPrintDialogCallbackVtbl.HandleMessage_UP$FUNC);
    static final FunctionDescriptor HandleMessage_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle HandleMessage_DOWN$MH = RuntimeHelper.downcallHandle(
        IPrintDialogCallbackVtbl.HandleMessage_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*HandleMessage)(IPrintDialogCallback*,HWND,UINT,WPARAM,LPARAM,LRESULT*);
     * }
     */
    public interface HandleMessage {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, long _x3, long _x4, java.lang.foreign.MemorySegment _x5);
        static MemorySegment allocate(HandleMessage fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IPrintDialogCallbackVtbl.HandleMessage_UP$MH, fi, IPrintDialogCallbackVtbl.HandleMessage$FUNC, scope);
        }
        static HandleMessage ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, long __x3, long __x4, java.lang.foreign.MemorySegment __x5) -> {
                try {
                    return (int)IPrintDialogCallbackVtbl.HandleMessage_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle HandleMessage$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("HandleMessage"));
    public static VarHandle HandleMessage$VH() {
        return IPrintDialogCallbackVtbl.HandleMessage$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*HandleMessage)(IPrintDialogCallback*,HWND,UINT,WPARAM,LPARAM,LRESULT*);
     * }
     */
    public static MemorySegment HandleMessage$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IPrintDialogCallbackVtbl.HandleMessage$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*HandleMessage)(IPrintDialogCallback*,HWND,UINT,WPARAM,LPARAM,LRESULT*);
     * }
     */
    public static void HandleMessage$set(MemorySegment seg, MemorySegment x) {
        IPrintDialogCallbackVtbl.HandleMessage$VH.set(seg, x);
    }
    public static MemorySegment HandleMessage$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IPrintDialogCallbackVtbl.HandleMessage$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void HandleMessage$set(MemorySegment seg, long index, MemorySegment x) {
        IPrintDialogCallbackVtbl.HandleMessage$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static HandleMessage HandleMessage(MemorySegment segment, SegmentScope scope) {
        return HandleMessage.ofAddress(HandleMessage$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


