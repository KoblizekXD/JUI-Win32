// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _DISCDLGSTRUCTW {
 *     DWORD cbStructure;
 *     HWND hwndOwner;
 *     LPWSTR lpLocalName;
 *     LPWSTR lpRemoteName;
 *     DWORD dwFlags;
 * };
 * }
 */
public class _DISCDLGSTRUCTW {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("cbStructure"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("hwndOwner"),
        Constants$root.C_POINTER$LAYOUT.withName("lpLocalName"),
        Constants$root.C_POINTER$LAYOUT.withName("lpRemoteName"),
        Constants$root.C_LONG$LAYOUT.withName("dwFlags"),
        MemoryLayout.paddingLayout(32)
    ).withName("_DISCDLGSTRUCTW");
    public static MemoryLayout $LAYOUT() {
        return _DISCDLGSTRUCTW.$struct$LAYOUT;
    }
    static final VarHandle cbStructure$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cbStructure"));
    public static VarHandle cbStructure$VH() {
        return _DISCDLGSTRUCTW.cbStructure$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD cbStructure;
     * }
     */
    public static int cbStructure$get(MemorySegment seg) {
        return (int)_DISCDLGSTRUCTW.cbStructure$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD cbStructure;
     * }
     */
    public static void cbStructure$set(MemorySegment seg, int x) {
        _DISCDLGSTRUCTW.cbStructure$VH.set(seg, x);
    }
    public static int cbStructure$get(MemorySegment seg, long index) {
        return (int)_DISCDLGSTRUCTW.cbStructure$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cbStructure$set(MemorySegment seg, long index, int x) {
        _DISCDLGSTRUCTW.cbStructure$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hwndOwner$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hwndOwner"));
    public static VarHandle hwndOwner$VH() {
        return _DISCDLGSTRUCTW.hwndOwner$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HWND hwndOwner;
     * }
     */
    public static MemorySegment hwndOwner$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_DISCDLGSTRUCTW.hwndOwner$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HWND hwndOwner;
     * }
     */
    public static void hwndOwner$set(MemorySegment seg, MemorySegment x) {
        _DISCDLGSTRUCTW.hwndOwner$VH.set(seg, x);
    }
    public static MemorySegment hwndOwner$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_DISCDLGSTRUCTW.hwndOwner$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hwndOwner$set(MemorySegment seg, long index, MemorySegment x) {
        _DISCDLGSTRUCTW.hwndOwner$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lpLocalName$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lpLocalName"));
    public static VarHandle lpLocalName$VH() {
        return _DISCDLGSTRUCTW.lpLocalName$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPWSTR lpLocalName;
     * }
     */
    public static MemorySegment lpLocalName$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_DISCDLGSTRUCTW.lpLocalName$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPWSTR lpLocalName;
     * }
     */
    public static void lpLocalName$set(MemorySegment seg, MemorySegment x) {
        _DISCDLGSTRUCTW.lpLocalName$VH.set(seg, x);
    }
    public static MemorySegment lpLocalName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_DISCDLGSTRUCTW.lpLocalName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpLocalName$set(MemorySegment seg, long index, MemorySegment x) {
        _DISCDLGSTRUCTW.lpLocalName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lpRemoteName$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lpRemoteName"));
    public static VarHandle lpRemoteName$VH() {
        return _DISCDLGSTRUCTW.lpRemoteName$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPWSTR lpRemoteName;
     * }
     */
    public static MemorySegment lpRemoteName$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_DISCDLGSTRUCTW.lpRemoteName$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPWSTR lpRemoteName;
     * }
     */
    public static void lpRemoteName$set(MemorySegment seg, MemorySegment x) {
        _DISCDLGSTRUCTW.lpRemoteName$VH.set(seg, x);
    }
    public static MemorySegment lpRemoteName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_DISCDLGSTRUCTW.lpRemoteName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpRemoteName$set(MemorySegment seg, long index, MemorySegment x) {
        _DISCDLGSTRUCTW.lpRemoteName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwFlags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwFlags"));
    public static VarHandle dwFlags$VH() {
        return _DISCDLGSTRUCTW.dwFlags$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwFlags;
     * }
     */
    public static int dwFlags$get(MemorySegment seg) {
        return (int)_DISCDLGSTRUCTW.dwFlags$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwFlags;
     * }
     */
    public static void dwFlags$set(MemorySegment seg, int x) {
        _DISCDLGSTRUCTW.dwFlags$VH.set(seg, x);
    }
    public static int dwFlags$get(MemorySegment seg, long index) {
        return (int)_DISCDLGSTRUCTW.dwFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwFlags$set(MemorySegment seg, long index, int x) {
        _DISCDLGSTRUCTW.dwFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


