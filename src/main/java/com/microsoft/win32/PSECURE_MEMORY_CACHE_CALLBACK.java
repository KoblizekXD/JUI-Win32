// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * unsigned char (*PSECURE_MEMORY_CACHE_CALLBACK)(void* Addr,unsigned long long Range);
 * }
 */
public interface PSECURE_MEMORY_CACHE_CALLBACK {

    byte apply(java.lang.foreign.MemorySegment Addr, long Range);
    static MemorySegment allocate(PSECURE_MEMORY_CACHE_CALLBACK fi, SegmentScope scope) {
        return RuntimeHelper.upcallStub(constants$107.PSECURE_MEMORY_CACHE_CALLBACK_UP$MH, fi, constants$107.PSECURE_MEMORY_CACHE_CALLBACK$FUNC, scope);
    }
    static PSECURE_MEMORY_CACHE_CALLBACK ofAddress(MemorySegment addr, SegmentScope scope) {
        MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
        return (java.lang.foreign.MemorySegment _Addr, long _Range) -> {
            try {
                return (byte)constants$107.PSECURE_MEMORY_CACHE_CALLBACK_DOWN$MH.invokeExact(symbol, _Addr, _Range);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


