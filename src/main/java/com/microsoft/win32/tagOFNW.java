// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct tagOFNW {
 *     DWORD lStructSize;
 *     HWND hwndOwner;
 *     HINSTANCE hInstance;
 *     LPCWSTR lpstrFilter;
 *     LPWSTR lpstrCustomFilter;
 *     DWORD nMaxCustFilter;
 *     DWORD nFilterIndex;
 *     LPWSTR lpstrFile;
 *     DWORD nMaxFile;
 *     LPWSTR lpstrFileTitle;
 *     DWORD nMaxFileTitle;
 *     LPCWSTR lpstrInitialDir;
 *     LPCWSTR lpstrTitle;
 *     DWORD Flags;
 *     WORD nFileOffset;
 *     WORD nFileExtension;
 *     LPCWSTR lpstrDefExt;
 *     LPARAM lCustData;
 *     LPOFNHOOKPROC lpfnHook;
 *     LPCWSTR lpTemplateName;
 *     void* pvReserved;
 *     DWORD dwReserved;
 *     DWORD FlagsEx;
 * };
 * }
 */
public class tagOFNW {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("lStructSize"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("hwndOwner"),
        Constants$root.C_POINTER$LAYOUT.withName("hInstance"),
        Constants$root.C_POINTER$LAYOUT.withName("lpstrFilter"),
        Constants$root.C_POINTER$LAYOUT.withName("lpstrCustomFilter"),
        Constants$root.C_LONG$LAYOUT.withName("nMaxCustFilter"),
        Constants$root.C_LONG$LAYOUT.withName("nFilterIndex"),
        Constants$root.C_POINTER$LAYOUT.withName("lpstrFile"),
        Constants$root.C_LONG$LAYOUT.withName("nMaxFile"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("lpstrFileTitle"),
        Constants$root.C_LONG$LAYOUT.withName("nMaxFileTitle"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("lpstrInitialDir"),
        Constants$root.C_POINTER$LAYOUT.withName("lpstrTitle"),
        Constants$root.C_LONG$LAYOUT.withName("Flags"),
        Constants$root.C_SHORT$LAYOUT.withName("nFileOffset"),
        Constants$root.C_SHORT$LAYOUT.withName("nFileExtension"),
        Constants$root.C_POINTER$LAYOUT.withName("lpstrDefExt"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("lCustData"),
        Constants$root.C_POINTER$LAYOUT.withName("lpfnHook"),
        Constants$root.C_POINTER$LAYOUT.withName("lpTemplateName"),
        Constants$root.C_POINTER$LAYOUT.withName("pvReserved"),
        Constants$root.C_LONG$LAYOUT.withName("dwReserved"),
        Constants$root.C_LONG$LAYOUT.withName("FlagsEx")
    ).withName("tagOFNW");
    public static MemoryLayout $LAYOUT() {
        return tagOFNW.$struct$LAYOUT;
    }
    static final VarHandle lStructSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lStructSize"));
    public static VarHandle lStructSize$VH() {
        return tagOFNW.lStructSize$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD lStructSize;
     * }
     */
    public static int lStructSize$get(MemorySegment seg) {
        return (int)tagOFNW.lStructSize$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD lStructSize;
     * }
     */
    public static void lStructSize$set(MemorySegment seg, int x) {
        tagOFNW.lStructSize$VH.set(seg, x);
    }
    public static int lStructSize$get(MemorySegment seg, long index) {
        return (int)tagOFNW.lStructSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lStructSize$set(MemorySegment seg, long index, int x) {
        tagOFNW.lStructSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hwndOwner$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hwndOwner"));
    public static VarHandle hwndOwner$VH() {
        return tagOFNW.hwndOwner$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HWND hwndOwner;
     * }
     */
    public static MemorySegment hwndOwner$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)tagOFNW.hwndOwner$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HWND hwndOwner;
     * }
     */
    public static void hwndOwner$set(MemorySegment seg, MemorySegment x) {
        tagOFNW.hwndOwner$VH.set(seg, x);
    }
    public static MemorySegment hwndOwner$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)tagOFNW.hwndOwner$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hwndOwner$set(MemorySegment seg, long index, MemorySegment x) {
        tagOFNW.hwndOwner$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hInstance$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hInstance"));
    public static VarHandle hInstance$VH() {
        return tagOFNW.hInstance$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HINSTANCE hInstance;
     * }
     */
    public static MemorySegment hInstance$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)tagOFNW.hInstance$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HINSTANCE hInstance;
     * }
     */
    public static void hInstance$set(MemorySegment seg, MemorySegment x) {
        tagOFNW.hInstance$VH.set(seg, x);
    }
    public static MemorySegment hInstance$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)tagOFNW.hInstance$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hInstance$set(MemorySegment seg, long index, MemorySegment x) {
        tagOFNW.hInstance$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lpstrFilter$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lpstrFilter"));
    public static VarHandle lpstrFilter$VH() {
        return tagOFNW.lpstrFilter$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPCWSTR lpstrFilter;
     * }
     */
    public static MemorySegment lpstrFilter$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)tagOFNW.lpstrFilter$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPCWSTR lpstrFilter;
     * }
     */
    public static void lpstrFilter$set(MemorySegment seg, MemorySegment x) {
        tagOFNW.lpstrFilter$VH.set(seg, x);
    }
    public static MemorySegment lpstrFilter$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)tagOFNW.lpstrFilter$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpstrFilter$set(MemorySegment seg, long index, MemorySegment x) {
        tagOFNW.lpstrFilter$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lpstrCustomFilter$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lpstrCustomFilter"));
    public static VarHandle lpstrCustomFilter$VH() {
        return tagOFNW.lpstrCustomFilter$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPWSTR lpstrCustomFilter;
     * }
     */
    public static MemorySegment lpstrCustomFilter$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)tagOFNW.lpstrCustomFilter$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPWSTR lpstrCustomFilter;
     * }
     */
    public static void lpstrCustomFilter$set(MemorySegment seg, MemorySegment x) {
        tagOFNW.lpstrCustomFilter$VH.set(seg, x);
    }
    public static MemorySegment lpstrCustomFilter$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)tagOFNW.lpstrCustomFilter$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpstrCustomFilter$set(MemorySegment seg, long index, MemorySegment x) {
        tagOFNW.lpstrCustomFilter$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle nMaxCustFilter$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("nMaxCustFilter"));
    public static VarHandle nMaxCustFilter$VH() {
        return tagOFNW.nMaxCustFilter$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD nMaxCustFilter;
     * }
     */
    public static int nMaxCustFilter$get(MemorySegment seg) {
        return (int)tagOFNW.nMaxCustFilter$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD nMaxCustFilter;
     * }
     */
    public static void nMaxCustFilter$set(MemorySegment seg, int x) {
        tagOFNW.nMaxCustFilter$VH.set(seg, x);
    }
    public static int nMaxCustFilter$get(MemorySegment seg, long index) {
        return (int)tagOFNW.nMaxCustFilter$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nMaxCustFilter$set(MemorySegment seg, long index, int x) {
        tagOFNW.nMaxCustFilter$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle nFilterIndex$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("nFilterIndex"));
    public static VarHandle nFilterIndex$VH() {
        return tagOFNW.nFilterIndex$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD nFilterIndex;
     * }
     */
    public static int nFilterIndex$get(MemorySegment seg) {
        return (int)tagOFNW.nFilterIndex$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD nFilterIndex;
     * }
     */
    public static void nFilterIndex$set(MemorySegment seg, int x) {
        tagOFNW.nFilterIndex$VH.set(seg, x);
    }
    public static int nFilterIndex$get(MemorySegment seg, long index) {
        return (int)tagOFNW.nFilterIndex$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nFilterIndex$set(MemorySegment seg, long index, int x) {
        tagOFNW.nFilterIndex$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lpstrFile$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lpstrFile"));
    public static VarHandle lpstrFile$VH() {
        return tagOFNW.lpstrFile$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPWSTR lpstrFile;
     * }
     */
    public static MemorySegment lpstrFile$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)tagOFNW.lpstrFile$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPWSTR lpstrFile;
     * }
     */
    public static void lpstrFile$set(MemorySegment seg, MemorySegment x) {
        tagOFNW.lpstrFile$VH.set(seg, x);
    }
    public static MemorySegment lpstrFile$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)tagOFNW.lpstrFile$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpstrFile$set(MemorySegment seg, long index, MemorySegment x) {
        tagOFNW.lpstrFile$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle nMaxFile$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("nMaxFile"));
    public static VarHandle nMaxFile$VH() {
        return tagOFNW.nMaxFile$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD nMaxFile;
     * }
     */
    public static int nMaxFile$get(MemorySegment seg) {
        return (int)tagOFNW.nMaxFile$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD nMaxFile;
     * }
     */
    public static void nMaxFile$set(MemorySegment seg, int x) {
        tagOFNW.nMaxFile$VH.set(seg, x);
    }
    public static int nMaxFile$get(MemorySegment seg, long index) {
        return (int)tagOFNW.nMaxFile$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nMaxFile$set(MemorySegment seg, long index, int x) {
        tagOFNW.nMaxFile$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lpstrFileTitle$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lpstrFileTitle"));
    public static VarHandle lpstrFileTitle$VH() {
        return tagOFNW.lpstrFileTitle$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPWSTR lpstrFileTitle;
     * }
     */
    public static MemorySegment lpstrFileTitle$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)tagOFNW.lpstrFileTitle$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPWSTR lpstrFileTitle;
     * }
     */
    public static void lpstrFileTitle$set(MemorySegment seg, MemorySegment x) {
        tagOFNW.lpstrFileTitle$VH.set(seg, x);
    }
    public static MemorySegment lpstrFileTitle$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)tagOFNW.lpstrFileTitle$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpstrFileTitle$set(MemorySegment seg, long index, MemorySegment x) {
        tagOFNW.lpstrFileTitle$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle nMaxFileTitle$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("nMaxFileTitle"));
    public static VarHandle nMaxFileTitle$VH() {
        return tagOFNW.nMaxFileTitle$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD nMaxFileTitle;
     * }
     */
    public static int nMaxFileTitle$get(MemorySegment seg) {
        return (int)tagOFNW.nMaxFileTitle$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD nMaxFileTitle;
     * }
     */
    public static void nMaxFileTitle$set(MemorySegment seg, int x) {
        tagOFNW.nMaxFileTitle$VH.set(seg, x);
    }
    public static int nMaxFileTitle$get(MemorySegment seg, long index) {
        return (int)tagOFNW.nMaxFileTitle$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nMaxFileTitle$set(MemorySegment seg, long index, int x) {
        tagOFNW.nMaxFileTitle$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lpstrInitialDir$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lpstrInitialDir"));
    public static VarHandle lpstrInitialDir$VH() {
        return tagOFNW.lpstrInitialDir$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPCWSTR lpstrInitialDir;
     * }
     */
    public static MemorySegment lpstrInitialDir$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)tagOFNW.lpstrInitialDir$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPCWSTR lpstrInitialDir;
     * }
     */
    public static void lpstrInitialDir$set(MemorySegment seg, MemorySegment x) {
        tagOFNW.lpstrInitialDir$VH.set(seg, x);
    }
    public static MemorySegment lpstrInitialDir$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)tagOFNW.lpstrInitialDir$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpstrInitialDir$set(MemorySegment seg, long index, MemorySegment x) {
        tagOFNW.lpstrInitialDir$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lpstrTitle$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lpstrTitle"));
    public static VarHandle lpstrTitle$VH() {
        return tagOFNW.lpstrTitle$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPCWSTR lpstrTitle;
     * }
     */
    public static MemorySegment lpstrTitle$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)tagOFNW.lpstrTitle$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPCWSTR lpstrTitle;
     * }
     */
    public static void lpstrTitle$set(MemorySegment seg, MemorySegment x) {
        tagOFNW.lpstrTitle$VH.set(seg, x);
    }
    public static MemorySegment lpstrTitle$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)tagOFNW.lpstrTitle$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpstrTitle$set(MemorySegment seg, long index, MemorySegment x) {
        tagOFNW.lpstrTitle$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Flags"));
    public static VarHandle Flags$VH() {
        return tagOFNW.Flags$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Flags;
     * }
     */
    public static int Flags$get(MemorySegment seg) {
        return (int)tagOFNW.Flags$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Flags;
     * }
     */
    public static void Flags$set(MemorySegment seg, int x) {
        tagOFNW.Flags$VH.set(seg, x);
    }
    public static int Flags$get(MemorySegment seg, long index) {
        return (int)tagOFNW.Flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Flags$set(MemorySegment seg, long index, int x) {
        tagOFNW.Flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle nFileOffset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("nFileOffset"));
    public static VarHandle nFileOffset$VH() {
        return tagOFNW.nFileOffset$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD nFileOffset;
     * }
     */
    public static short nFileOffset$get(MemorySegment seg) {
        return (short)tagOFNW.nFileOffset$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD nFileOffset;
     * }
     */
    public static void nFileOffset$set(MemorySegment seg, short x) {
        tagOFNW.nFileOffset$VH.set(seg, x);
    }
    public static short nFileOffset$get(MemorySegment seg, long index) {
        return (short)tagOFNW.nFileOffset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nFileOffset$set(MemorySegment seg, long index, short x) {
        tagOFNW.nFileOffset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle nFileExtension$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("nFileExtension"));
    public static VarHandle nFileExtension$VH() {
        return tagOFNW.nFileExtension$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD nFileExtension;
     * }
     */
    public static short nFileExtension$get(MemorySegment seg) {
        return (short)tagOFNW.nFileExtension$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD nFileExtension;
     * }
     */
    public static void nFileExtension$set(MemorySegment seg, short x) {
        tagOFNW.nFileExtension$VH.set(seg, x);
    }
    public static short nFileExtension$get(MemorySegment seg, long index) {
        return (short)tagOFNW.nFileExtension$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nFileExtension$set(MemorySegment seg, long index, short x) {
        tagOFNW.nFileExtension$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lpstrDefExt$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lpstrDefExt"));
    public static VarHandle lpstrDefExt$VH() {
        return tagOFNW.lpstrDefExt$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPCWSTR lpstrDefExt;
     * }
     */
    public static MemorySegment lpstrDefExt$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)tagOFNW.lpstrDefExt$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPCWSTR lpstrDefExt;
     * }
     */
    public static void lpstrDefExt$set(MemorySegment seg, MemorySegment x) {
        tagOFNW.lpstrDefExt$VH.set(seg, x);
    }
    public static MemorySegment lpstrDefExt$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)tagOFNW.lpstrDefExt$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpstrDefExt$set(MemorySegment seg, long index, MemorySegment x) {
        tagOFNW.lpstrDefExt$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lCustData$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lCustData"));
    public static VarHandle lCustData$VH() {
        return tagOFNW.lCustData$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPARAM lCustData;
     * }
     */
    public static long lCustData$get(MemorySegment seg) {
        return (long)tagOFNW.lCustData$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPARAM lCustData;
     * }
     */
    public static void lCustData$set(MemorySegment seg, long x) {
        tagOFNW.lCustData$VH.set(seg, x);
    }
    public static long lCustData$get(MemorySegment seg, long index) {
        return (long)tagOFNW.lCustData$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lCustData$set(MemorySegment seg, long index, long x) {
        tagOFNW.lCustData$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lpfnHook$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lpfnHook"));
    public static VarHandle lpfnHook$VH() {
        return tagOFNW.lpfnHook$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPOFNHOOKPROC lpfnHook;
     * }
     */
    public static MemorySegment lpfnHook$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)tagOFNW.lpfnHook$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPOFNHOOKPROC lpfnHook;
     * }
     */
    public static void lpfnHook$set(MemorySegment seg, MemorySegment x) {
        tagOFNW.lpfnHook$VH.set(seg, x);
    }
    public static MemorySegment lpfnHook$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)tagOFNW.lpfnHook$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpfnHook$set(MemorySegment seg, long index, MemorySegment x) {
        tagOFNW.lpfnHook$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static LPOFNHOOKPROC lpfnHook(MemorySegment segment, SegmentScope scope) {
        return LPOFNHOOKPROC.ofAddress(lpfnHook$get(segment), scope);
    }
    static final VarHandle lpTemplateName$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lpTemplateName"));
    public static VarHandle lpTemplateName$VH() {
        return tagOFNW.lpTemplateName$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPCWSTR lpTemplateName;
     * }
     */
    public static MemorySegment lpTemplateName$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)tagOFNW.lpTemplateName$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPCWSTR lpTemplateName;
     * }
     */
    public static void lpTemplateName$set(MemorySegment seg, MemorySegment x) {
        tagOFNW.lpTemplateName$VH.set(seg, x);
    }
    public static MemorySegment lpTemplateName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)tagOFNW.lpTemplateName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpTemplateName$set(MemorySegment seg, long index, MemorySegment x) {
        tagOFNW.lpTemplateName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pvReserved$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pvReserved"));
    public static VarHandle pvReserved$VH() {
        return tagOFNW.pvReserved$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* pvReserved;
     * }
     */
    public static MemorySegment pvReserved$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)tagOFNW.pvReserved$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* pvReserved;
     * }
     */
    public static void pvReserved$set(MemorySegment seg, MemorySegment x) {
        tagOFNW.pvReserved$VH.set(seg, x);
    }
    public static MemorySegment pvReserved$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)tagOFNW.pvReserved$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pvReserved$set(MemorySegment seg, long index, MemorySegment x) {
        tagOFNW.pvReserved$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwReserved$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwReserved"));
    public static VarHandle dwReserved$VH() {
        return tagOFNW.dwReserved$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwReserved;
     * }
     */
    public static int dwReserved$get(MemorySegment seg) {
        return (int)tagOFNW.dwReserved$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwReserved;
     * }
     */
    public static void dwReserved$set(MemorySegment seg, int x) {
        tagOFNW.dwReserved$VH.set(seg, x);
    }
    public static int dwReserved$get(MemorySegment seg, long index) {
        return (int)tagOFNW.dwReserved$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwReserved$set(MemorySegment seg, long index, int x) {
        tagOFNW.dwReserved$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle FlagsEx$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("FlagsEx"));
    public static VarHandle FlagsEx$VH() {
        return tagOFNW.FlagsEx$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD FlagsEx;
     * }
     */
    public static int FlagsEx$get(MemorySegment seg) {
        return (int)tagOFNW.FlagsEx$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD FlagsEx;
     * }
     */
    public static void FlagsEx$set(MemorySegment seg, int x) {
        tagOFNW.FlagsEx$VH.set(seg, x);
    }
    public static int FlagsEx$get(MemorySegment seg, long index) {
        return (int)tagOFNW.FlagsEx$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void FlagsEx$set(MemorySegment seg, long index, int x) {
        tagOFNW.FlagsEx$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


