// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * int (*PFN_EXPORT_PRIV_KEY_FUNC)(unsigned long long hCryptProv,unsigned long dwKeySpec,char* pszPrivateKeyObjId,unsigned long dwFlags,void* pvAuxInfo,struct _CRYPT_PRIVATE_KEY_INFO* pPrivateKeyInfo,unsigned long* pcbPrivateKeyInfo);
 * }
 */
public interface PFN_EXPORT_PRIV_KEY_FUNC {

    int apply(long hCryptProv, int dwKeySpec, java.lang.foreign.MemorySegment pszPrivateKeyObjId, int dwFlags, java.lang.foreign.MemorySegment pvAuxInfo, java.lang.foreign.MemorySegment pPrivateKeyInfo, java.lang.foreign.MemorySegment pcbPrivateKeyInfo);
    static MemorySegment allocate(PFN_EXPORT_PRIV_KEY_FUNC fi, SegmentScope scope) {
        return RuntimeHelper.upcallStub(constants$781.PFN_EXPORT_PRIV_KEY_FUNC_UP$MH, fi, constants$781.PFN_EXPORT_PRIV_KEY_FUNC$FUNC, scope);
    }
    static PFN_EXPORT_PRIV_KEY_FUNC ofAddress(MemorySegment addr, SegmentScope scope) {
        MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
        return (long _hCryptProv, int _dwKeySpec, java.lang.foreign.MemorySegment _pszPrivateKeyObjId, int _dwFlags, java.lang.foreign.MemorySegment _pvAuxInfo, java.lang.foreign.MemorySegment _pPrivateKeyInfo, java.lang.foreign.MemorySegment _pcbPrivateKeyInfo) -> {
            try {
                return (int)constants$782.PFN_EXPORT_PRIV_KEY_FUNC_DOWN$MH.invokeExact(symbol, _hCryptProv, _dwKeySpec, _pszPrivateKeyObjId, _dwFlags, _pvAuxInfo, _pPrivateKeyInfo, _pcbPrivateKeyInfo);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


