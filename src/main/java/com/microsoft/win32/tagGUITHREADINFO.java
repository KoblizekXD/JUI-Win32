// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct tagGUITHREADINFO {
 *     DWORD cbSize;
 *     DWORD flags;
 *     HWND hwndActive;
 *     HWND hwndFocus;
 *     HWND hwndCapture;
 *     HWND hwndMenuOwner;
 *     HWND hwndMoveSize;
 *     HWND hwndCaret;
 *     RECT rcCaret;
 * };
 * }
 */
public class tagGUITHREADINFO {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("cbSize"),
        Constants$root.C_LONG$LAYOUT.withName("flags"),
        Constants$root.C_POINTER$LAYOUT.withName("hwndActive"),
        Constants$root.C_POINTER$LAYOUT.withName("hwndFocus"),
        Constants$root.C_POINTER$LAYOUT.withName("hwndCapture"),
        Constants$root.C_POINTER$LAYOUT.withName("hwndMenuOwner"),
        Constants$root.C_POINTER$LAYOUT.withName("hwndMoveSize"),
        Constants$root.C_POINTER$LAYOUT.withName("hwndCaret"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("left"),
            Constants$root.C_LONG$LAYOUT.withName("top"),
            Constants$root.C_LONG$LAYOUT.withName("right"),
            Constants$root.C_LONG$LAYOUT.withName("bottom")
        ).withName("rcCaret")
    ).withName("tagGUITHREADINFO");
    public static MemoryLayout $LAYOUT() {
        return tagGUITHREADINFO.$struct$LAYOUT;
    }
    static final VarHandle cbSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cbSize"));
    public static VarHandle cbSize$VH() {
        return tagGUITHREADINFO.cbSize$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD cbSize;
     * }
     */
    public static int cbSize$get(MemorySegment seg) {
        return (int)tagGUITHREADINFO.cbSize$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD cbSize;
     * }
     */
    public static void cbSize$set(MemorySegment seg, int x) {
        tagGUITHREADINFO.cbSize$VH.set(seg, x);
    }
    public static int cbSize$get(MemorySegment seg, long index) {
        return (int)tagGUITHREADINFO.cbSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cbSize$set(MemorySegment seg, long index, int x) {
        tagGUITHREADINFO.cbSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("flags"));
    public static VarHandle flags$VH() {
        return tagGUITHREADINFO.flags$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD flags;
     * }
     */
    public static int flags$get(MemorySegment seg) {
        return (int)tagGUITHREADINFO.flags$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD flags;
     * }
     */
    public static void flags$set(MemorySegment seg, int x) {
        tagGUITHREADINFO.flags$VH.set(seg, x);
    }
    public static int flags$get(MemorySegment seg, long index) {
        return (int)tagGUITHREADINFO.flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void flags$set(MemorySegment seg, long index, int x) {
        tagGUITHREADINFO.flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hwndActive$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hwndActive"));
    public static VarHandle hwndActive$VH() {
        return tagGUITHREADINFO.hwndActive$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HWND hwndActive;
     * }
     */
    public static MemorySegment hwndActive$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)tagGUITHREADINFO.hwndActive$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HWND hwndActive;
     * }
     */
    public static void hwndActive$set(MemorySegment seg, MemorySegment x) {
        tagGUITHREADINFO.hwndActive$VH.set(seg, x);
    }
    public static MemorySegment hwndActive$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)tagGUITHREADINFO.hwndActive$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hwndActive$set(MemorySegment seg, long index, MemorySegment x) {
        tagGUITHREADINFO.hwndActive$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hwndFocus$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hwndFocus"));
    public static VarHandle hwndFocus$VH() {
        return tagGUITHREADINFO.hwndFocus$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HWND hwndFocus;
     * }
     */
    public static MemorySegment hwndFocus$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)tagGUITHREADINFO.hwndFocus$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HWND hwndFocus;
     * }
     */
    public static void hwndFocus$set(MemorySegment seg, MemorySegment x) {
        tagGUITHREADINFO.hwndFocus$VH.set(seg, x);
    }
    public static MemorySegment hwndFocus$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)tagGUITHREADINFO.hwndFocus$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hwndFocus$set(MemorySegment seg, long index, MemorySegment x) {
        tagGUITHREADINFO.hwndFocus$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hwndCapture$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hwndCapture"));
    public static VarHandle hwndCapture$VH() {
        return tagGUITHREADINFO.hwndCapture$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HWND hwndCapture;
     * }
     */
    public static MemorySegment hwndCapture$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)tagGUITHREADINFO.hwndCapture$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HWND hwndCapture;
     * }
     */
    public static void hwndCapture$set(MemorySegment seg, MemorySegment x) {
        tagGUITHREADINFO.hwndCapture$VH.set(seg, x);
    }
    public static MemorySegment hwndCapture$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)tagGUITHREADINFO.hwndCapture$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hwndCapture$set(MemorySegment seg, long index, MemorySegment x) {
        tagGUITHREADINFO.hwndCapture$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hwndMenuOwner$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hwndMenuOwner"));
    public static VarHandle hwndMenuOwner$VH() {
        return tagGUITHREADINFO.hwndMenuOwner$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HWND hwndMenuOwner;
     * }
     */
    public static MemorySegment hwndMenuOwner$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)tagGUITHREADINFO.hwndMenuOwner$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HWND hwndMenuOwner;
     * }
     */
    public static void hwndMenuOwner$set(MemorySegment seg, MemorySegment x) {
        tagGUITHREADINFO.hwndMenuOwner$VH.set(seg, x);
    }
    public static MemorySegment hwndMenuOwner$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)tagGUITHREADINFO.hwndMenuOwner$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hwndMenuOwner$set(MemorySegment seg, long index, MemorySegment x) {
        tagGUITHREADINFO.hwndMenuOwner$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hwndMoveSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hwndMoveSize"));
    public static VarHandle hwndMoveSize$VH() {
        return tagGUITHREADINFO.hwndMoveSize$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HWND hwndMoveSize;
     * }
     */
    public static MemorySegment hwndMoveSize$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)tagGUITHREADINFO.hwndMoveSize$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HWND hwndMoveSize;
     * }
     */
    public static void hwndMoveSize$set(MemorySegment seg, MemorySegment x) {
        tagGUITHREADINFO.hwndMoveSize$VH.set(seg, x);
    }
    public static MemorySegment hwndMoveSize$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)tagGUITHREADINFO.hwndMoveSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hwndMoveSize$set(MemorySegment seg, long index, MemorySegment x) {
        tagGUITHREADINFO.hwndMoveSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hwndCaret$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hwndCaret"));
    public static VarHandle hwndCaret$VH() {
        return tagGUITHREADINFO.hwndCaret$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HWND hwndCaret;
     * }
     */
    public static MemorySegment hwndCaret$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)tagGUITHREADINFO.hwndCaret$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HWND hwndCaret;
     * }
     */
    public static void hwndCaret$set(MemorySegment seg, MemorySegment x) {
        tagGUITHREADINFO.hwndCaret$VH.set(seg, x);
    }
    public static MemorySegment hwndCaret$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)tagGUITHREADINFO.hwndCaret$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hwndCaret$set(MemorySegment seg, long index, MemorySegment x) {
        tagGUITHREADINFO.hwndCaret$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment rcCaret$slice(MemorySegment seg) {
        return seg.asSlice(56, 16);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


