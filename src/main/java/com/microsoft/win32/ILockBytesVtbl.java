// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct ILockBytesVtbl {
 *     HRESULT (*QueryInterface)(ILockBytes*,const IID*,void**);
 *     ULONG (*AddRef)(ILockBytes*);
 *     ULONG (*Release)(ILockBytes*);
 *     HRESULT (*ReadAt)(ILockBytes*,ULARGE_INTEGER,void*,ULONG,ULONG*);
 *     HRESULT (*WriteAt)(ILockBytes*,ULARGE_INTEGER,void*,ULONG,ULONG*);
 *     HRESULT (*Flush)(ILockBytes*);
 *     HRESULT (*SetSize)(ILockBytes*,ULARGE_INTEGER);
 *     HRESULT (*LockRegion)(ILockBytes*,ULARGE_INTEGER,ULARGE_INTEGER,DWORD);
 *     HRESULT (*UnlockRegion)(ILockBytes*,ULARGE_INTEGER,ULARGE_INTEGER,DWORD);
 *     HRESULT (*Stat)(ILockBytes*,STATSTG*,DWORD);
 * };
 * }
 */
public class ILockBytesVtbl {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("ReadAt"),
        Constants$root.C_POINTER$LAYOUT.withName("WriteAt"),
        Constants$root.C_POINTER$LAYOUT.withName("Flush"),
        Constants$root.C_POINTER$LAYOUT.withName("SetSize"),
        Constants$root.C_POINTER$LAYOUT.withName("LockRegion"),
        Constants$root.C_POINTER$LAYOUT.withName("UnlockRegion"),
        Constants$root.C_POINTER$LAYOUT.withName("Stat")
    ).withName("ILockBytesVtbl");
    public static MemoryLayout $LAYOUT() {
        return ILockBytesVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor QueryInterface_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_UP$MH = RuntimeHelper.upcallHandle(QueryInterface.class, "apply", ILockBytesVtbl.QueryInterface_UP$FUNC);
    static final FunctionDescriptor QueryInterface_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_DOWN$MH = RuntimeHelper.downcallHandle(
        ILockBytesVtbl.QueryInterface_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(ILockBytes*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ILockBytesVtbl.QueryInterface_UP$MH, fi, ILockBytesVtbl.QueryInterface$FUNC, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)ILockBytesVtbl.QueryInterface_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return ILockBytesVtbl.QueryInterface$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(ILockBytes*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ILockBytesVtbl.QueryInterface$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(ILockBytes*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        ILockBytesVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ILockBytesVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        ILockBytesVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, SegmentScope scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor AddRef_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_UP$MH = RuntimeHelper.upcallHandle(AddRef.class, "apply", ILockBytesVtbl.AddRef_UP$FUNC);
    static final FunctionDescriptor AddRef_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_DOWN$MH = RuntimeHelper.downcallHandle(
        ILockBytesVtbl.AddRef_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*AddRef)(ILockBytes*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ILockBytesVtbl.AddRef_UP$MH, fi, ILockBytesVtbl.AddRef$FUNC, scope);
        }
        static AddRef ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)ILockBytesVtbl.AddRef_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return ILockBytesVtbl.AddRef$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(ILockBytes*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ILockBytesVtbl.AddRef$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(ILockBytes*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        ILockBytesVtbl.AddRef$VH.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ILockBytesVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        ILockBytesVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, SegmentScope scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Release_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_UP$MH = RuntimeHelper.upcallHandle(Release.class, "apply", ILockBytesVtbl.Release_UP$FUNC);
    static final FunctionDescriptor Release_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_DOWN$MH = RuntimeHelper.downcallHandle(
        ILockBytesVtbl.Release_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*Release)(ILockBytes*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ILockBytesVtbl.Release_UP$MH, fi, ILockBytesVtbl.Release$FUNC, scope);
        }
        static Release ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)ILockBytesVtbl.Release_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return ILockBytesVtbl.Release$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(ILockBytes*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ILockBytesVtbl.Release$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(ILockBytes*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        ILockBytesVtbl.Release$VH.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ILockBytesVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        ILockBytesVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, SegmentScope scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    static final FunctionDescriptor ReadAt$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("_ULARGE_INTEGER"),
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor ReadAt_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("_ULARGE_INTEGER"),
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ReadAt_UP$MH = RuntimeHelper.upcallHandle(ReadAt.class, "apply", ILockBytesVtbl.ReadAt_UP$FUNC);
    static final FunctionDescriptor ReadAt_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("_ULARGE_INTEGER"),
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ReadAt_DOWN$MH = RuntimeHelper.downcallHandle(
        ILockBytesVtbl.ReadAt_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*ReadAt)(ILockBytes*,ULARGE_INTEGER,void*,ULONG,ULONG*);
     * }
     */
    public interface ReadAt {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(ReadAt fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ILockBytesVtbl.ReadAt_UP$MH, fi, ILockBytesVtbl.ReadAt$FUNC, scope);
        }
        static ReadAt ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (int)ILockBytesVtbl.ReadAt_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ReadAt$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ReadAt"));
    public static VarHandle ReadAt$VH() {
        return ILockBytesVtbl.ReadAt$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*ReadAt)(ILockBytes*,ULARGE_INTEGER,void*,ULONG,ULONG*);
     * }
     */
    public static MemorySegment ReadAt$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ILockBytesVtbl.ReadAt$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*ReadAt)(ILockBytes*,ULARGE_INTEGER,void*,ULONG,ULONG*);
     * }
     */
    public static void ReadAt$set(MemorySegment seg, MemorySegment x) {
        ILockBytesVtbl.ReadAt$VH.set(seg, x);
    }
    public static MemorySegment ReadAt$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ILockBytesVtbl.ReadAt$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ReadAt$set(MemorySegment seg, long index, MemorySegment x) {
        ILockBytesVtbl.ReadAt$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ReadAt ReadAt(MemorySegment segment, SegmentScope scope) {
        return ReadAt.ofAddress(ReadAt$get(segment), scope);
    }
    static final FunctionDescriptor WriteAt$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("_ULARGE_INTEGER"),
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor WriteAt_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("_ULARGE_INTEGER"),
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle WriteAt_UP$MH = RuntimeHelper.upcallHandle(WriteAt.class, "apply", ILockBytesVtbl.WriteAt_UP$FUNC);
    static final FunctionDescriptor WriteAt_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("_ULARGE_INTEGER"),
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle WriteAt_DOWN$MH = RuntimeHelper.downcallHandle(
        ILockBytesVtbl.WriteAt_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*WriteAt)(ILockBytes*,ULARGE_INTEGER,void*,ULONG,ULONG*);
     * }
     */
    public interface WriteAt {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(WriteAt fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ILockBytesVtbl.WriteAt_UP$MH, fi, ILockBytesVtbl.WriteAt$FUNC, scope);
        }
        static WriteAt ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (int)ILockBytesVtbl.WriteAt_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle WriteAt$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("WriteAt"));
    public static VarHandle WriteAt$VH() {
        return ILockBytesVtbl.WriteAt$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*WriteAt)(ILockBytes*,ULARGE_INTEGER,void*,ULONG,ULONG*);
     * }
     */
    public static MemorySegment WriteAt$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ILockBytesVtbl.WriteAt$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*WriteAt)(ILockBytes*,ULARGE_INTEGER,void*,ULONG,ULONG*);
     * }
     */
    public static void WriteAt$set(MemorySegment seg, MemorySegment x) {
        ILockBytesVtbl.WriteAt$VH.set(seg, x);
    }
    public static MemorySegment WriteAt$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ILockBytesVtbl.WriteAt$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void WriteAt$set(MemorySegment seg, long index, MemorySegment x) {
        ILockBytesVtbl.WriteAt$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static WriteAt WriteAt(MemorySegment segment, SegmentScope scope) {
        return WriteAt.ofAddress(WriteAt$get(segment), scope);
    }
    static final FunctionDescriptor Flush$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Flush_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Flush_UP$MH = RuntimeHelper.upcallHandle(Flush.class, "apply", ILockBytesVtbl.Flush_UP$FUNC);
    static final FunctionDescriptor Flush_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Flush_DOWN$MH = RuntimeHelper.downcallHandle(
        ILockBytesVtbl.Flush_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*Flush)(ILockBytes*);
     * }
     */
    public interface Flush {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Flush fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ILockBytesVtbl.Flush_UP$MH, fi, ILockBytesVtbl.Flush$FUNC, scope);
        }
        static Flush ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)ILockBytesVtbl.Flush_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Flush$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Flush"));
    public static VarHandle Flush$VH() {
        return ILockBytesVtbl.Flush$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Flush)(ILockBytes*);
     * }
     */
    public static MemorySegment Flush$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ILockBytesVtbl.Flush$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Flush)(ILockBytes*);
     * }
     */
    public static void Flush$set(MemorySegment seg, MemorySegment x) {
        ILockBytesVtbl.Flush$VH.set(seg, x);
    }
    public static MemorySegment Flush$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ILockBytesVtbl.Flush$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Flush$set(MemorySegment seg, long index, MemorySegment x) {
        ILockBytesVtbl.Flush$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Flush Flush(MemorySegment segment, SegmentScope scope) {
        return Flush.ofAddress(Flush$get(segment), scope);
    }
    static final FunctionDescriptor SetSize$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("_ULARGE_INTEGER")
    );
    static final FunctionDescriptor SetSize_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("_ULARGE_INTEGER")
    );
    static final MethodHandle SetSize_UP$MH = RuntimeHelper.upcallHandle(SetSize.class, "apply", ILockBytesVtbl.SetSize_UP$FUNC);
    static final FunctionDescriptor SetSize_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("_ULARGE_INTEGER")
    );
    static final MethodHandle SetSize_DOWN$MH = RuntimeHelper.downcallHandle(
        ILockBytesVtbl.SetSize_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetSize)(ILockBytes*,ULARGE_INTEGER);
     * }
     */
    public interface SetSize {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(SetSize fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ILockBytesVtbl.SetSize_UP$MH, fi, ILockBytesVtbl.SetSize$FUNC, scope);
        }
        static SetSize ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)ILockBytesVtbl.SetSize_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetSize"));
    public static VarHandle SetSize$VH() {
        return ILockBytesVtbl.SetSize$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetSize)(ILockBytes*,ULARGE_INTEGER);
     * }
     */
    public static MemorySegment SetSize$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ILockBytesVtbl.SetSize$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetSize)(ILockBytes*,ULARGE_INTEGER);
     * }
     */
    public static void SetSize$set(MemorySegment seg, MemorySegment x) {
        ILockBytesVtbl.SetSize$VH.set(seg, x);
    }
    public static MemorySegment SetSize$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ILockBytesVtbl.SetSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetSize$set(MemorySegment seg, long index, MemorySegment x) {
        ILockBytesVtbl.SetSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetSize SetSize(MemorySegment segment, SegmentScope scope) {
        return SetSize.ofAddress(SetSize$get(segment), scope);
    }
    static final FunctionDescriptor LockRegion$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("_ULARGE_INTEGER"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("_ULARGE_INTEGER"),
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor LockRegion_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("_ULARGE_INTEGER"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("_ULARGE_INTEGER"),
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle LockRegion_UP$MH = RuntimeHelper.upcallHandle(LockRegion.class, "apply", ILockBytesVtbl.LockRegion_UP$FUNC);
    static final FunctionDescriptor LockRegion_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("_ULARGE_INTEGER"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("_ULARGE_INTEGER"),
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle LockRegion_DOWN$MH = RuntimeHelper.downcallHandle(
        ILockBytesVtbl.LockRegion_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*LockRegion)(ILockBytes*,ULARGE_INTEGER,ULARGE_INTEGER,DWORD);
     * }
     */
    public interface LockRegion {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3);
        static MemorySegment allocate(LockRegion fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ILockBytesVtbl.LockRegion_UP$MH, fi, ILockBytesVtbl.LockRegion$FUNC, scope);
        }
        static LockRegion ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3) -> {
                try {
                    return (int)ILockBytesVtbl.LockRegion_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle LockRegion$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("LockRegion"));
    public static VarHandle LockRegion$VH() {
        return ILockBytesVtbl.LockRegion$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*LockRegion)(ILockBytes*,ULARGE_INTEGER,ULARGE_INTEGER,DWORD);
     * }
     */
    public static MemorySegment LockRegion$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ILockBytesVtbl.LockRegion$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*LockRegion)(ILockBytes*,ULARGE_INTEGER,ULARGE_INTEGER,DWORD);
     * }
     */
    public static void LockRegion$set(MemorySegment seg, MemorySegment x) {
        ILockBytesVtbl.LockRegion$VH.set(seg, x);
    }
    public static MemorySegment LockRegion$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ILockBytesVtbl.LockRegion$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void LockRegion$set(MemorySegment seg, long index, MemorySegment x) {
        ILockBytesVtbl.LockRegion$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static LockRegion LockRegion(MemorySegment segment, SegmentScope scope) {
        return LockRegion.ofAddress(LockRegion$get(segment), scope);
    }
    static final FunctionDescriptor UnlockRegion$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("_ULARGE_INTEGER"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("_ULARGE_INTEGER"),
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor UnlockRegion_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("_ULARGE_INTEGER"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("_ULARGE_INTEGER"),
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle UnlockRegion_UP$MH = RuntimeHelper.upcallHandle(UnlockRegion.class, "apply", ILockBytesVtbl.UnlockRegion_UP$FUNC);
    static final FunctionDescriptor UnlockRegion_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("_ULARGE_INTEGER"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("_ULARGE_INTEGER"),
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle UnlockRegion_DOWN$MH = RuntimeHelper.downcallHandle(
        ILockBytesVtbl.UnlockRegion_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*UnlockRegion)(ILockBytes*,ULARGE_INTEGER,ULARGE_INTEGER,DWORD);
     * }
     */
    public interface UnlockRegion {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3);
        static MemorySegment allocate(UnlockRegion fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ILockBytesVtbl.UnlockRegion_UP$MH, fi, ILockBytesVtbl.UnlockRegion$FUNC, scope);
        }
        static UnlockRegion ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3) -> {
                try {
                    return (int)ILockBytesVtbl.UnlockRegion_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle UnlockRegion$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("UnlockRegion"));
    public static VarHandle UnlockRegion$VH() {
        return ILockBytesVtbl.UnlockRegion$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*UnlockRegion)(ILockBytes*,ULARGE_INTEGER,ULARGE_INTEGER,DWORD);
     * }
     */
    public static MemorySegment UnlockRegion$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ILockBytesVtbl.UnlockRegion$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*UnlockRegion)(ILockBytes*,ULARGE_INTEGER,ULARGE_INTEGER,DWORD);
     * }
     */
    public static void UnlockRegion$set(MemorySegment seg, MemorySegment x) {
        ILockBytesVtbl.UnlockRegion$VH.set(seg, x);
    }
    public static MemorySegment UnlockRegion$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ILockBytesVtbl.UnlockRegion$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void UnlockRegion$set(MemorySegment seg, long index, MemorySegment x) {
        ILockBytesVtbl.UnlockRegion$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static UnlockRegion UnlockRegion(MemorySegment segment, SegmentScope scope) {
        return UnlockRegion.ofAddress(UnlockRegion$get(segment), scope);
    }
    static final FunctionDescriptor Stat$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor Stat_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle Stat_UP$MH = RuntimeHelper.upcallHandle(Stat.class, "apply", ILockBytesVtbl.Stat_UP$FUNC);
    static final FunctionDescriptor Stat_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle Stat_DOWN$MH = RuntimeHelper.downcallHandle(
        ILockBytesVtbl.Stat_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*Stat)(ILockBytes*,STATSTG*,DWORD);
     * }
     */
    public interface Stat {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2);
        static MemorySegment allocate(Stat fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(ILockBytesVtbl.Stat_UP$MH, fi, ILockBytesVtbl.Stat$FUNC, scope);
        }
        static Stat ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2) -> {
                try {
                    return (int)ILockBytesVtbl.Stat_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Stat$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Stat"));
    public static VarHandle Stat$VH() {
        return ILockBytesVtbl.Stat$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Stat)(ILockBytes*,STATSTG*,DWORD);
     * }
     */
    public static MemorySegment Stat$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)ILockBytesVtbl.Stat$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Stat)(ILockBytes*,STATSTG*,DWORD);
     * }
     */
    public static void Stat$set(MemorySegment seg, MemorySegment x) {
        ILockBytesVtbl.Stat$VH.set(seg, x);
    }
    public static MemorySegment Stat$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)ILockBytesVtbl.Stat$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Stat$set(MemorySegment seg, long index, MemorySegment x) {
        ILockBytesVtbl.Stat$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Stat Stat(MemorySegment segment, SegmentScope scope) {
        return Stat.ofAddress(Stat$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


