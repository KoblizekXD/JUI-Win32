// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _IMAGE_FUNCTION_ENTRY {
 *     DWORD StartingAddress;
 *     DWORD EndingAddress;
 *     DWORD EndOfPrologue;
 * };
 * }
 */
public class _IMAGE_FUNCTION_ENTRY {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("StartingAddress"),
        Constants$root.C_LONG$LAYOUT.withName("EndingAddress"),
        Constants$root.C_LONG$LAYOUT.withName("EndOfPrologue")
    ).withName("_IMAGE_FUNCTION_ENTRY");
    public static MemoryLayout $LAYOUT() {
        return _IMAGE_FUNCTION_ENTRY.$struct$LAYOUT;
    }
    static final VarHandle StartingAddress$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("StartingAddress"));
    public static VarHandle StartingAddress$VH() {
        return _IMAGE_FUNCTION_ENTRY.StartingAddress$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD StartingAddress;
     * }
     */
    public static int StartingAddress$get(MemorySegment seg) {
        return (int)_IMAGE_FUNCTION_ENTRY.StartingAddress$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD StartingAddress;
     * }
     */
    public static void StartingAddress$set(MemorySegment seg, int x) {
        _IMAGE_FUNCTION_ENTRY.StartingAddress$VH.set(seg, x);
    }
    public static int StartingAddress$get(MemorySegment seg, long index) {
        return (int)_IMAGE_FUNCTION_ENTRY.StartingAddress$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void StartingAddress$set(MemorySegment seg, long index, int x) {
        _IMAGE_FUNCTION_ENTRY.StartingAddress$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle EndingAddress$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("EndingAddress"));
    public static VarHandle EndingAddress$VH() {
        return _IMAGE_FUNCTION_ENTRY.EndingAddress$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD EndingAddress;
     * }
     */
    public static int EndingAddress$get(MemorySegment seg) {
        return (int)_IMAGE_FUNCTION_ENTRY.EndingAddress$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD EndingAddress;
     * }
     */
    public static void EndingAddress$set(MemorySegment seg, int x) {
        _IMAGE_FUNCTION_ENTRY.EndingAddress$VH.set(seg, x);
    }
    public static int EndingAddress$get(MemorySegment seg, long index) {
        return (int)_IMAGE_FUNCTION_ENTRY.EndingAddress$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void EndingAddress$set(MemorySegment seg, long index, int x) {
        _IMAGE_FUNCTION_ENTRY.EndingAddress$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle EndOfPrologue$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("EndOfPrologue"));
    public static VarHandle EndOfPrologue$VH() {
        return _IMAGE_FUNCTION_ENTRY.EndOfPrologue$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD EndOfPrologue;
     * }
     */
    public static int EndOfPrologue$get(MemorySegment seg) {
        return (int)_IMAGE_FUNCTION_ENTRY.EndOfPrologue$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD EndOfPrologue;
     * }
     */
    public static void EndOfPrologue$set(MemorySegment seg, int x) {
        _IMAGE_FUNCTION_ENTRY.EndOfPrologue$VH.set(seg, x);
    }
    public static int EndOfPrologue$get(MemorySegment seg, long index) {
        return (int)_IMAGE_FUNCTION_ENTRY.EndOfPrologue$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void EndOfPrologue$set(MemorySegment seg, long index, int x) {
        _IMAGE_FUNCTION_ENTRY.EndOfPrologue$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


