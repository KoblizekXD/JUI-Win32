// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER {
 *     DWORD OptimalWriteSize;
 *     DWORD StreamGranularitySize;
 *     DWORD StreamIdMin;
 *     DWORD StreamIdMax;
 * };
 * }
 */
public class _STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("OptimalWriteSize"),
        Constants$root.C_LONG$LAYOUT.withName("StreamGranularitySize"),
        Constants$root.C_LONG$LAYOUT.withName("StreamIdMin"),
        Constants$root.C_LONG$LAYOUT.withName("StreamIdMax")
    ).withName("_STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER");
    public static MemoryLayout $LAYOUT() {
        return _STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER.$struct$LAYOUT;
    }
    static final VarHandle OptimalWriteSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("OptimalWriteSize"));
    public static VarHandle OptimalWriteSize$VH() {
        return _STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER.OptimalWriteSize$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD OptimalWriteSize;
     * }
     */
    public static int OptimalWriteSize$get(MemorySegment seg) {
        return (int)_STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER.OptimalWriteSize$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD OptimalWriteSize;
     * }
     */
    public static void OptimalWriteSize$set(MemorySegment seg, int x) {
        _STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER.OptimalWriteSize$VH.set(seg, x);
    }
    public static int OptimalWriteSize$get(MemorySegment seg, long index) {
        return (int)_STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER.OptimalWriteSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void OptimalWriteSize$set(MemorySegment seg, long index, int x) {
        _STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER.OptimalWriteSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle StreamGranularitySize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("StreamGranularitySize"));
    public static VarHandle StreamGranularitySize$VH() {
        return _STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER.StreamGranularitySize$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD StreamGranularitySize;
     * }
     */
    public static int StreamGranularitySize$get(MemorySegment seg) {
        return (int)_STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER.StreamGranularitySize$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD StreamGranularitySize;
     * }
     */
    public static void StreamGranularitySize$set(MemorySegment seg, int x) {
        _STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER.StreamGranularitySize$VH.set(seg, x);
    }
    public static int StreamGranularitySize$get(MemorySegment seg, long index) {
        return (int)_STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER.StreamGranularitySize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void StreamGranularitySize$set(MemorySegment seg, long index, int x) {
        _STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER.StreamGranularitySize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle StreamIdMin$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("StreamIdMin"));
    public static VarHandle StreamIdMin$VH() {
        return _STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER.StreamIdMin$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD StreamIdMin;
     * }
     */
    public static int StreamIdMin$get(MemorySegment seg) {
        return (int)_STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER.StreamIdMin$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD StreamIdMin;
     * }
     */
    public static void StreamIdMin$set(MemorySegment seg, int x) {
        _STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER.StreamIdMin$VH.set(seg, x);
    }
    public static int StreamIdMin$get(MemorySegment seg, long index) {
        return (int)_STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER.StreamIdMin$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void StreamIdMin$set(MemorySegment seg, long index, int x) {
        _STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER.StreamIdMin$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle StreamIdMax$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("StreamIdMax"));
    public static VarHandle StreamIdMax$VH() {
        return _STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER.StreamIdMax$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD StreamIdMax;
     * }
     */
    public static int StreamIdMax$get(MemorySegment seg) {
        return (int)_STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER.StreamIdMax$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD StreamIdMax;
     * }
     */
    public static void StreamIdMax$set(MemorySegment seg, int x) {
        _STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER.StreamIdMax$VH.set(seg, x);
    }
    public static int StreamIdMax$get(MemorySegment seg, long index) {
        return (int)_STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER.StreamIdMax$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void StreamIdMax$set(MemorySegment seg, long index, int x) {
        _STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER.StreamIdMax$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


