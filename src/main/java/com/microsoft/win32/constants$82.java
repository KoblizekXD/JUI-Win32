// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
final class constants$82 {

    // Suppresses default constructor, ensuring non-instantiability.
    private constants$82() {}
    static final StructLayout GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("Data1"),
        Constants$root.C_SHORT$LAYOUT.withName("Data2"),
        Constants$root.C_SHORT$LAYOUT.withName("Data3"),
        MemoryLayout.sequenceLayout(8, Constants$root.C_CHAR$LAYOUT).withName("Data4")
    ).withName("_GUID");
    static final MemorySegment GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD$SEGMENT = RuntimeHelper.lookupGlobalVariable("GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD", constants$82.GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD$LAYOUT);
    static final StructLayout GUID_PROCESSOR_PARKING_CORE_OVERRIDE$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("Data1"),
        Constants$root.C_SHORT$LAYOUT.withName("Data2"),
        Constants$root.C_SHORT$LAYOUT.withName("Data3"),
        MemoryLayout.sequenceLayout(8, Constants$root.C_CHAR$LAYOUT).withName("Data4")
    ).withName("_GUID");
    static final MemorySegment GUID_PROCESSOR_PARKING_CORE_OVERRIDE$SEGMENT = RuntimeHelper.lookupGlobalVariable("GUID_PROCESSOR_PARKING_CORE_OVERRIDE", constants$82.GUID_PROCESSOR_PARKING_CORE_OVERRIDE$LAYOUT);
    static final StructLayout GUID_PROCESSOR_PARKING_PERF_STATE$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("Data1"),
        Constants$root.C_SHORT$LAYOUT.withName("Data2"),
        Constants$root.C_SHORT$LAYOUT.withName("Data3"),
        MemoryLayout.sequenceLayout(8, Constants$root.C_CHAR$LAYOUT).withName("Data4")
    ).withName("_GUID");
    static final MemorySegment GUID_PROCESSOR_PARKING_PERF_STATE$SEGMENT = RuntimeHelper.lookupGlobalVariable("GUID_PROCESSOR_PARKING_PERF_STATE", constants$82.GUID_PROCESSOR_PARKING_PERF_STATE$LAYOUT);
    static final StructLayout GUID_PROCESSOR_PARKING_PERF_STATE_1$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("Data1"),
        Constants$root.C_SHORT$LAYOUT.withName("Data2"),
        Constants$root.C_SHORT$LAYOUT.withName("Data3"),
        MemoryLayout.sequenceLayout(8, Constants$root.C_CHAR$LAYOUT).withName("Data4")
    ).withName("_GUID");
    static final MemorySegment GUID_PROCESSOR_PARKING_PERF_STATE_1$SEGMENT = RuntimeHelper.lookupGlobalVariable("GUID_PROCESSOR_PARKING_PERF_STATE_1", constants$82.GUID_PROCESSOR_PARKING_PERF_STATE_1$LAYOUT);
    static final StructLayout GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("Data1"),
        Constants$root.C_SHORT$LAYOUT.withName("Data2"),
        Constants$root.C_SHORT$LAYOUT.withName("Data3"),
        MemoryLayout.sequenceLayout(8, Constants$root.C_CHAR$LAYOUT).withName("Data4")
    ).withName("_GUID");
    static final MemorySegment GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD$SEGMENT = RuntimeHelper.lookupGlobalVariable("GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD", constants$82.GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD$LAYOUT);
    static final StructLayout GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("Data1"),
        Constants$root.C_SHORT$LAYOUT.withName("Data2"),
        Constants$root.C_SHORT$LAYOUT.withName("Data3"),
        MemoryLayout.sequenceLayout(8, Constants$root.C_CHAR$LAYOUT).withName("Data4")
    ).withName("_GUID");
    static final MemorySegment GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD$SEGMENT = RuntimeHelper.lookupGlobalVariable("GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD", constants$82.GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD$LAYOUT);
}


