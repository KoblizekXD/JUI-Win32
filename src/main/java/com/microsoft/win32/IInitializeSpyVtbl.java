// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IInitializeSpyVtbl {
 *     HRESULT (*QueryInterface)(IInitializeSpy*,const IID*,void**);
 *     ULONG (*AddRef)(IInitializeSpy*);
 *     ULONG (*Release)(IInitializeSpy*);
 *     HRESULT (*PreInitialize)(IInitializeSpy*,DWORD,DWORD);
 *     HRESULT (*PostInitialize)(IInitializeSpy*,HRESULT,DWORD,DWORD);
 *     HRESULT (*PreUninitialize)(IInitializeSpy*,DWORD);
 *     HRESULT (*PostUninitialize)(IInitializeSpy*,DWORD);
 * };
 * }
 */
public class IInitializeSpyVtbl {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("PreInitialize"),
        Constants$root.C_POINTER$LAYOUT.withName("PostInitialize"),
        Constants$root.C_POINTER$LAYOUT.withName("PreUninitialize"),
        Constants$root.C_POINTER$LAYOUT.withName("PostUninitialize")
    ).withName("IInitializeSpyVtbl");
    public static MemoryLayout $LAYOUT() {
        return IInitializeSpyVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor QueryInterface_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_UP$MH = RuntimeHelper.upcallHandle(QueryInterface.class, "apply", IInitializeSpyVtbl.QueryInterface_UP$FUNC);
    static final FunctionDescriptor QueryInterface_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_DOWN$MH = RuntimeHelper.downcallHandle(
        IInitializeSpyVtbl.QueryInterface_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(IInitializeSpy*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IInitializeSpyVtbl.QueryInterface_UP$MH, fi, IInitializeSpyVtbl.QueryInterface$FUNC, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IInitializeSpyVtbl.QueryInterface_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return IInitializeSpyVtbl.QueryInterface$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IInitializeSpy*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IInitializeSpyVtbl.QueryInterface$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IInitializeSpy*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        IInitializeSpyVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IInitializeSpyVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        IInitializeSpyVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, SegmentScope scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor AddRef_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_UP$MH = RuntimeHelper.upcallHandle(AddRef.class, "apply", IInitializeSpyVtbl.AddRef_UP$FUNC);
    static final FunctionDescriptor AddRef_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_DOWN$MH = RuntimeHelper.downcallHandle(
        IInitializeSpyVtbl.AddRef_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*AddRef)(IInitializeSpy*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IInitializeSpyVtbl.AddRef_UP$MH, fi, IInitializeSpyVtbl.AddRef$FUNC, scope);
        }
        static AddRef ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IInitializeSpyVtbl.AddRef_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return IInitializeSpyVtbl.AddRef$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(IInitializeSpy*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IInitializeSpyVtbl.AddRef$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(IInitializeSpy*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        IInitializeSpyVtbl.AddRef$VH.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IInitializeSpyVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        IInitializeSpyVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, SegmentScope scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Release_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_UP$MH = RuntimeHelper.upcallHandle(Release.class, "apply", IInitializeSpyVtbl.Release_UP$FUNC);
    static final FunctionDescriptor Release_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_DOWN$MH = RuntimeHelper.downcallHandle(
        IInitializeSpyVtbl.Release_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*Release)(IInitializeSpy*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IInitializeSpyVtbl.Release_UP$MH, fi, IInitializeSpyVtbl.Release$FUNC, scope);
        }
        static Release ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IInitializeSpyVtbl.Release_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return IInitializeSpyVtbl.Release$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(IInitializeSpy*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IInitializeSpyVtbl.Release$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(IInitializeSpy*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        IInitializeSpyVtbl.Release$VH.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IInitializeSpyVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        IInitializeSpyVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, SegmentScope scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    static final FunctionDescriptor PreInitialize$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor PreInitialize_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle PreInitialize_UP$MH = RuntimeHelper.upcallHandle(PreInitialize.class, "apply", IInitializeSpyVtbl.PreInitialize_UP$FUNC);
    static final FunctionDescriptor PreInitialize_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle PreInitialize_DOWN$MH = RuntimeHelper.downcallHandle(
        IInitializeSpyVtbl.PreInitialize_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*PreInitialize)(IInitializeSpy*,DWORD,DWORD);
     * }
     */
    public interface PreInitialize {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2);
        static MemorySegment allocate(PreInitialize fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IInitializeSpyVtbl.PreInitialize_UP$MH, fi, IInitializeSpyVtbl.PreInitialize$FUNC, scope);
        }
        static PreInitialize ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2) -> {
                try {
                    return (int)IInitializeSpyVtbl.PreInitialize_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle PreInitialize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("PreInitialize"));
    public static VarHandle PreInitialize$VH() {
        return IInitializeSpyVtbl.PreInitialize$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*PreInitialize)(IInitializeSpy*,DWORD,DWORD);
     * }
     */
    public static MemorySegment PreInitialize$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IInitializeSpyVtbl.PreInitialize$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*PreInitialize)(IInitializeSpy*,DWORD,DWORD);
     * }
     */
    public static void PreInitialize$set(MemorySegment seg, MemorySegment x) {
        IInitializeSpyVtbl.PreInitialize$VH.set(seg, x);
    }
    public static MemorySegment PreInitialize$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IInitializeSpyVtbl.PreInitialize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void PreInitialize$set(MemorySegment seg, long index, MemorySegment x) {
        IInitializeSpyVtbl.PreInitialize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static PreInitialize PreInitialize(MemorySegment segment, SegmentScope scope) {
        return PreInitialize.ofAddress(PreInitialize$get(segment), scope);
    }
    static final FunctionDescriptor PostInitialize$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor PostInitialize_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle PostInitialize_UP$MH = RuntimeHelper.upcallHandle(PostInitialize.class, "apply", IInitializeSpyVtbl.PostInitialize_UP$FUNC);
    static final FunctionDescriptor PostInitialize_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle PostInitialize_DOWN$MH = RuntimeHelper.downcallHandle(
        IInitializeSpyVtbl.PostInitialize_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*PostInitialize)(IInitializeSpy*,HRESULT,DWORD,DWORD);
     * }
     */
    public interface PostInitialize {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, int _x3);
        static MemorySegment allocate(PostInitialize fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IInitializeSpyVtbl.PostInitialize_UP$MH, fi, IInitializeSpyVtbl.PostInitialize$FUNC, scope);
        }
        static PostInitialize ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, int __x3) -> {
                try {
                    return (int)IInitializeSpyVtbl.PostInitialize_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle PostInitialize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("PostInitialize"));
    public static VarHandle PostInitialize$VH() {
        return IInitializeSpyVtbl.PostInitialize$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*PostInitialize)(IInitializeSpy*,HRESULT,DWORD,DWORD);
     * }
     */
    public static MemorySegment PostInitialize$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IInitializeSpyVtbl.PostInitialize$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*PostInitialize)(IInitializeSpy*,HRESULT,DWORD,DWORD);
     * }
     */
    public static void PostInitialize$set(MemorySegment seg, MemorySegment x) {
        IInitializeSpyVtbl.PostInitialize$VH.set(seg, x);
    }
    public static MemorySegment PostInitialize$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IInitializeSpyVtbl.PostInitialize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void PostInitialize$set(MemorySegment seg, long index, MemorySegment x) {
        IInitializeSpyVtbl.PostInitialize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static PostInitialize PostInitialize(MemorySegment segment, SegmentScope scope) {
        return PostInitialize.ofAddress(PostInitialize$get(segment), scope);
    }
    static final FunctionDescriptor PreUninitialize$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor PreUninitialize_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle PreUninitialize_UP$MH = RuntimeHelper.upcallHandle(PreUninitialize.class, "apply", IInitializeSpyVtbl.PreUninitialize_UP$FUNC);
    static final FunctionDescriptor PreUninitialize_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle PreUninitialize_DOWN$MH = RuntimeHelper.downcallHandle(
        IInitializeSpyVtbl.PreUninitialize_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*PreUninitialize)(IInitializeSpy*,DWORD);
     * }
     */
    public interface PreUninitialize {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(PreUninitialize fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IInitializeSpyVtbl.PreUninitialize_UP$MH, fi, IInitializeSpyVtbl.PreUninitialize$FUNC, scope);
        }
        static PreUninitialize ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)IInitializeSpyVtbl.PreUninitialize_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle PreUninitialize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("PreUninitialize"));
    public static VarHandle PreUninitialize$VH() {
        return IInitializeSpyVtbl.PreUninitialize$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*PreUninitialize)(IInitializeSpy*,DWORD);
     * }
     */
    public static MemorySegment PreUninitialize$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IInitializeSpyVtbl.PreUninitialize$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*PreUninitialize)(IInitializeSpy*,DWORD);
     * }
     */
    public static void PreUninitialize$set(MemorySegment seg, MemorySegment x) {
        IInitializeSpyVtbl.PreUninitialize$VH.set(seg, x);
    }
    public static MemorySegment PreUninitialize$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IInitializeSpyVtbl.PreUninitialize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void PreUninitialize$set(MemorySegment seg, long index, MemorySegment x) {
        IInitializeSpyVtbl.PreUninitialize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static PreUninitialize PreUninitialize(MemorySegment segment, SegmentScope scope) {
        return PreUninitialize.ofAddress(PreUninitialize$get(segment), scope);
    }
    static final FunctionDescriptor PostUninitialize$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor PostUninitialize_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle PostUninitialize_UP$MH = RuntimeHelper.upcallHandle(PostUninitialize.class, "apply", IInitializeSpyVtbl.PostUninitialize_UP$FUNC);
    static final FunctionDescriptor PostUninitialize_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle PostUninitialize_DOWN$MH = RuntimeHelper.downcallHandle(
        IInitializeSpyVtbl.PostUninitialize_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*PostUninitialize)(IInitializeSpy*,DWORD);
     * }
     */
    public interface PostUninitialize {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(PostUninitialize fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IInitializeSpyVtbl.PostUninitialize_UP$MH, fi, IInitializeSpyVtbl.PostUninitialize$FUNC, scope);
        }
        static PostUninitialize ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)IInitializeSpyVtbl.PostUninitialize_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle PostUninitialize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("PostUninitialize"));
    public static VarHandle PostUninitialize$VH() {
        return IInitializeSpyVtbl.PostUninitialize$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*PostUninitialize)(IInitializeSpy*,DWORD);
     * }
     */
    public static MemorySegment PostUninitialize$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IInitializeSpyVtbl.PostUninitialize$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*PostUninitialize)(IInitializeSpy*,DWORD);
     * }
     */
    public static void PostUninitialize$set(MemorySegment seg, MemorySegment x) {
        IInitializeSpyVtbl.PostUninitialize$VH.set(seg, x);
    }
    public static MemorySegment PostUninitialize$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IInitializeSpyVtbl.PostUninitialize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void PostUninitialize$set(MemorySegment seg, long index, MemorySegment x) {
        IInitializeSpyVtbl.PostUninitialize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static PostUninitialize PostUninitialize(MemorySegment segment, SegmentScope scope) {
        return PostUninitialize.ofAddress(PostUninitialize$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


