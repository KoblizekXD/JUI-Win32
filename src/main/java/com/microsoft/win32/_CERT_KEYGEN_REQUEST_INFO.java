// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _CERT_KEYGEN_REQUEST_INFO {
 *     DWORD dwVersion;
 *     CERT_PUBLIC_KEY_INFO SubjectPublicKeyInfo;
 *     LPWSTR pwszChallengeString;
 * };
 * }
 */
public class _CERT_KEYGEN_REQUEST_INFO {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("dwVersion"),
        MemoryLayout.paddingLayout(32),
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_POINTER$LAYOUT.withName("pszObjId"),
                MemoryLayout.structLayout(
                    Constants$root.C_LONG$LAYOUT.withName("cbData"),
                    MemoryLayout.paddingLayout(32),
                    Constants$root.C_POINTER$LAYOUT.withName("pbData")
                ).withName("Parameters")
            ).withName("Algorithm"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("cbData"),
                MemoryLayout.paddingLayout(32),
                Constants$root.C_POINTER$LAYOUT.withName("pbData"),
                Constants$root.C_LONG$LAYOUT.withName("cUnusedBits"),
                MemoryLayout.paddingLayout(32)
            ).withName("PublicKey")
        ).withName("SubjectPublicKeyInfo"),
        Constants$root.C_POINTER$LAYOUT.withName("pwszChallengeString")
    ).withName("_CERT_KEYGEN_REQUEST_INFO");
    public static MemoryLayout $LAYOUT() {
        return _CERT_KEYGEN_REQUEST_INFO.$struct$LAYOUT;
    }
    static final VarHandle dwVersion$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwVersion"));
    public static VarHandle dwVersion$VH() {
        return _CERT_KEYGEN_REQUEST_INFO.dwVersion$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwVersion;
     * }
     */
    public static int dwVersion$get(MemorySegment seg) {
        return (int)_CERT_KEYGEN_REQUEST_INFO.dwVersion$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwVersion;
     * }
     */
    public static void dwVersion$set(MemorySegment seg, int x) {
        _CERT_KEYGEN_REQUEST_INFO.dwVersion$VH.set(seg, x);
    }
    public static int dwVersion$get(MemorySegment seg, long index) {
        return (int)_CERT_KEYGEN_REQUEST_INFO.dwVersion$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwVersion$set(MemorySegment seg, long index, int x) {
        _CERT_KEYGEN_REQUEST_INFO.dwVersion$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment SubjectPublicKeyInfo$slice(MemorySegment seg) {
        return seg.asSlice(8, 48);
    }
    static final VarHandle pwszChallengeString$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pwszChallengeString"));
    public static VarHandle pwszChallengeString$VH() {
        return _CERT_KEYGEN_REQUEST_INFO.pwszChallengeString$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * LPWSTR pwszChallengeString;
     * }
     */
    public static MemorySegment pwszChallengeString$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_CERT_KEYGEN_REQUEST_INFO.pwszChallengeString$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * LPWSTR pwszChallengeString;
     * }
     */
    public static void pwszChallengeString$set(MemorySegment seg, MemorySegment x) {
        _CERT_KEYGEN_REQUEST_INFO.pwszChallengeString$VH.set(seg, x);
    }
    public static MemorySegment pwszChallengeString$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_CERT_KEYGEN_REQUEST_INFO.pwszChallengeString$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pwszChallengeString$set(MemorySegment seg, long index, MemorySegment x) {
        _CERT_KEYGEN_REQUEST_INFO.pwszChallengeString$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


