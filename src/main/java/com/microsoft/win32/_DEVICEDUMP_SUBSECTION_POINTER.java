// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _DEVICEDUMP_SUBSECTION_POINTER {
 *     DWORD dwSize;
 *     DWORD dwFlags;
 *     DWORD dwOffset;
 * };
 * }
 */
public class _DEVICEDUMP_SUBSECTION_POINTER {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("dwSize"),
        Constants$root.C_LONG$LAYOUT.withName("dwFlags"),
        Constants$root.C_LONG$LAYOUT.withName("dwOffset")
    ).withName("_DEVICEDUMP_SUBSECTION_POINTER");
    public static MemoryLayout $LAYOUT() {
        return _DEVICEDUMP_SUBSECTION_POINTER.$struct$LAYOUT;
    }
    static final VarHandle dwSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwSize"));
    public static VarHandle dwSize$VH() {
        return _DEVICEDUMP_SUBSECTION_POINTER.dwSize$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwSize;
     * }
     */
    public static int dwSize$get(MemorySegment seg) {
        return (int)_DEVICEDUMP_SUBSECTION_POINTER.dwSize$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwSize;
     * }
     */
    public static void dwSize$set(MemorySegment seg, int x) {
        _DEVICEDUMP_SUBSECTION_POINTER.dwSize$VH.set(seg, x);
    }
    public static int dwSize$get(MemorySegment seg, long index) {
        return (int)_DEVICEDUMP_SUBSECTION_POINTER.dwSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwSize$set(MemorySegment seg, long index, int x) {
        _DEVICEDUMP_SUBSECTION_POINTER.dwSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwFlags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwFlags"));
    public static VarHandle dwFlags$VH() {
        return _DEVICEDUMP_SUBSECTION_POINTER.dwFlags$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwFlags;
     * }
     */
    public static int dwFlags$get(MemorySegment seg) {
        return (int)_DEVICEDUMP_SUBSECTION_POINTER.dwFlags$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwFlags;
     * }
     */
    public static void dwFlags$set(MemorySegment seg, int x) {
        _DEVICEDUMP_SUBSECTION_POINTER.dwFlags$VH.set(seg, x);
    }
    public static int dwFlags$get(MemorySegment seg, long index) {
        return (int)_DEVICEDUMP_SUBSECTION_POINTER.dwFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwFlags$set(MemorySegment seg, long index, int x) {
        _DEVICEDUMP_SUBSECTION_POINTER.dwFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwOffset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwOffset"));
    public static VarHandle dwOffset$VH() {
        return _DEVICEDUMP_SUBSECTION_POINTER.dwOffset$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD dwOffset;
     * }
     */
    public static int dwOffset$get(MemorySegment seg) {
        return (int)_DEVICEDUMP_SUBSECTION_POINTER.dwOffset$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD dwOffset;
     * }
     */
    public static void dwOffset$set(MemorySegment seg, int x) {
        _DEVICEDUMP_SUBSECTION_POINTER.dwOffset$VH.set(seg, x);
    }
    public static int dwOffset$get(MemorySegment seg, long index) {
        return (int)_DEVICEDUMP_SUBSECTION_POINTER.dwOffset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwOffset$set(MemorySegment seg, long index, int x) {
        _DEVICEDUMP_SUBSECTION_POINTER.dwOffset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


