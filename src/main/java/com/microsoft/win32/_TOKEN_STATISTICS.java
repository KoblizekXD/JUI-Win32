// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _TOKEN_STATISTICS {
 *     LUID TokenId;
 *     LUID AuthenticationId;
 *     LARGE_INTEGER ExpirationTime;
 *     TOKEN_TYPE TokenType;
 *     SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
 *     DWORD DynamicCharged;
 *     DWORD DynamicAvailable;
 *     DWORD GroupCount;
 *     DWORD PrivilegeCount;
 *     LUID ModifiedId;
 * };
 * }
 */
public class _TOKEN_STATISTICS {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("LowPart"),
            Constants$root.C_LONG$LAYOUT.withName("HighPart")
        ).withName("TokenId"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("LowPart"),
            Constants$root.C_LONG$LAYOUT.withName("HighPart")
        ).withName("AuthenticationId"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("ExpirationTime"),
        Constants$root.C_LONG$LAYOUT.withName("TokenType"),
        Constants$root.C_LONG$LAYOUT.withName("ImpersonationLevel"),
        Constants$root.C_LONG$LAYOUT.withName("DynamicCharged"),
        Constants$root.C_LONG$LAYOUT.withName("DynamicAvailable"),
        Constants$root.C_LONG$LAYOUT.withName("GroupCount"),
        Constants$root.C_LONG$LAYOUT.withName("PrivilegeCount"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("LowPart"),
            Constants$root.C_LONG$LAYOUT.withName("HighPart")
        ).withName("ModifiedId")
    ).withName("_TOKEN_STATISTICS");
    public static MemoryLayout $LAYOUT() {
        return _TOKEN_STATISTICS.$struct$LAYOUT;
    }
    public static MemorySegment TokenId$slice(MemorySegment seg) {
        return seg.asSlice(0, 8);
    }
    public static MemorySegment AuthenticationId$slice(MemorySegment seg) {
        return seg.asSlice(8, 8);
    }
    public static MemorySegment ExpirationTime$slice(MemorySegment seg) {
        return seg.asSlice(16, 8);
    }
    static final VarHandle TokenType$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("TokenType"));
    public static VarHandle TokenType$VH() {
        return _TOKEN_STATISTICS.TokenType$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * TOKEN_TYPE TokenType;
     * }
     */
    public static int TokenType$get(MemorySegment seg) {
        return (int)_TOKEN_STATISTICS.TokenType$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * TOKEN_TYPE TokenType;
     * }
     */
    public static void TokenType$set(MemorySegment seg, int x) {
        _TOKEN_STATISTICS.TokenType$VH.set(seg, x);
    }
    public static int TokenType$get(MemorySegment seg, long index) {
        return (int)_TOKEN_STATISTICS.TokenType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void TokenType$set(MemorySegment seg, long index, int x) {
        _TOKEN_STATISTICS.TokenType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ImpersonationLevel$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ImpersonationLevel"));
    public static VarHandle ImpersonationLevel$VH() {
        return _TOKEN_STATISTICS.ImpersonationLevel$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
     * }
     */
    public static int ImpersonationLevel$get(MemorySegment seg) {
        return (int)_TOKEN_STATISTICS.ImpersonationLevel$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
     * }
     */
    public static void ImpersonationLevel$set(MemorySegment seg, int x) {
        _TOKEN_STATISTICS.ImpersonationLevel$VH.set(seg, x);
    }
    public static int ImpersonationLevel$get(MemorySegment seg, long index) {
        return (int)_TOKEN_STATISTICS.ImpersonationLevel$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ImpersonationLevel$set(MemorySegment seg, long index, int x) {
        _TOKEN_STATISTICS.ImpersonationLevel$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle DynamicCharged$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("DynamicCharged"));
    public static VarHandle DynamicCharged$VH() {
        return _TOKEN_STATISTICS.DynamicCharged$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD DynamicCharged;
     * }
     */
    public static int DynamicCharged$get(MemorySegment seg) {
        return (int)_TOKEN_STATISTICS.DynamicCharged$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD DynamicCharged;
     * }
     */
    public static void DynamicCharged$set(MemorySegment seg, int x) {
        _TOKEN_STATISTICS.DynamicCharged$VH.set(seg, x);
    }
    public static int DynamicCharged$get(MemorySegment seg, long index) {
        return (int)_TOKEN_STATISTICS.DynamicCharged$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DynamicCharged$set(MemorySegment seg, long index, int x) {
        _TOKEN_STATISTICS.DynamicCharged$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle DynamicAvailable$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("DynamicAvailable"));
    public static VarHandle DynamicAvailable$VH() {
        return _TOKEN_STATISTICS.DynamicAvailable$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD DynamicAvailable;
     * }
     */
    public static int DynamicAvailable$get(MemorySegment seg) {
        return (int)_TOKEN_STATISTICS.DynamicAvailable$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD DynamicAvailable;
     * }
     */
    public static void DynamicAvailable$set(MemorySegment seg, int x) {
        _TOKEN_STATISTICS.DynamicAvailable$VH.set(seg, x);
    }
    public static int DynamicAvailable$get(MemorySegment seg, long index) {
        return (int)_TOKEN_STATISTICS.DynamicAvailable$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DynamicAvailable$set(MemorySegment seg, long index, int x) {
        _TOKEN_STATISTICS.DynamicAvailable$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle GroupCount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GroupCount"));
    public static VarHandle GroupCount$VH() {
        return _TOKEN_STATISTICS.GroupCount$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD GroupCount;
     * }
     */
    public static int GroupCount$get(MemorySegment seg) {
        return (int)_TOKEN_STATISTICS.GroupCount$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD GroupCount;
     * }
     */
    public static void GroupCount$set(MemorySegment seg, int x) {
        _TOKEN_STATISTICS.GroupCount$VH.set(seg, x);
    }
    public static int GroupCount$get(MemorySegment seg, long index) {
        return (int)_TOKEN_STATISTICS.GroupCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GroupCount$set(MemorySegment seg, long index, int x) {
        _TOKEN_STATISTICS.GroupCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle PrivilegeCount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("PrivilegeCount"));
    public static VarHandle PrivilegeCount$VH() {
        return _TOKEN_STATISTICS.PrivilegeCount$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD PrivilegeCount;
     * }
     */
    public static int PrivilegeCount$get(MemorySegment seg) {
        return (int)_TOKEN_STATISTICS.PrivilegeCount$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD PrivilegeCount;
     * }
     */
    public static void PrivilegeCount$set(MemorySegment seg, int x) {
        _TOKEN_STATISTICS.PrivilegeCount$VH.set(seg, x);
    }
    public static int PrivilegeCount$get(MemorySegment seg, long index) {
        return (int)_TOKEN_STATISTICS.PrivilegeCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void PrivilegeCount$set(MemorySegment seg, long index, int x) {
        _TOKEN_STATISTICS.PrivilegeCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment ModifiedId$slice(MemorySegment seg) {
        return seg.asSlice(48, 8);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


