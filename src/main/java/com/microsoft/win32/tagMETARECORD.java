// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct tagMETARECORD {
 *     DWORD rdSize;
 *     WORD rdFunction;
 *     WORD rdParm[1];
 * };
 * }
 */
public class tagMETARECORD {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("rdSize"),
        Constants$root.C_SHORT$LAYOUT.withName("rdFunction"),
        MemoryLayout.sequenceLayout(1, Constants$root.C_SHORT$LAYOUT).withName("rdParm")
    ).withName("tagMETARECORD");
    public static MemoryLayout $LAYOUT() {
        return tagMETARECORD.$struct$LAYOUT;
    }
    static final VarHandle rdSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("rdSize"));
    public static VarHandle rdSize$VH() {
        return tagMETARECORD.rdSize$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD rdSize;
     * }
     */
    public static int rdSize$get(MemorySegment seg) {
        return (int)tagMETARECORD.rdSize$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD rdSize;
     * }
     */
    public static void rdSize$set(MemorySegment seg, int x) {
        tagMETARECORD.rdSize$VH.set(seg, x);
    }
    public static int rdSize$get(MemorySegment seg, long index) {
        return (int)tagMETARECORD.rdSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void rdSize$set(MemorySegment seg, long index, int x) {
        tagMETARECORD.rdSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle rdFunction$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("rdFunction"));
    public static VarHandle rdFunction$VH() {
        return tagMETARECORD.rdFunction$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD rdFunction;
     * }
     */
    public static short rdFunction$get(MemorySegment seg) {
        return (short)tagMETARECORD.rdFunction$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD rdFunction;
     * }
     */
    public static void rdFunction$set(MemorySegment seg, short x) {
        tagMETARECORD.rdFunction$VH.set(seg, x);
    }
    public static short rdFunction$get(MemorySegment seg, long index) {
        return (short)tagMETARECORD.rdFunction$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void rdFunction$set(MemorySegment seg, long index, short x) {
        tagMETARECORD.rdFunction$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment rdParm$slice(MemorySegment seg) {
        return seg.asSlice(6, 2);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


