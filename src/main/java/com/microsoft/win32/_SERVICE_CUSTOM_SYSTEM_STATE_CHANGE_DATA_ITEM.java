// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM {
 *     union  u;
 * };
 * }
 */
public class _SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                MemoryLayout.sequenceLayout(2, Constants$root.C_LONG$LAYOUT).withName("Data")
            ).withName("CustomStateId"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("DataOffset"),
                MemoryLayout.sequenceLayout(1, Constants$root.C_CHAR$LAYOUT).withName("Data"),
                MemoryLayout.paddingLayout(24)
            ).withName("s")
        ).withName("u")
    ).withName("_SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM");
    public static MemoryLayout $LAYOUT() {
        return _SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM.$struct$LAYOUT;
    }
    /**
     * {@snippet :
     * union {
     *     SERVICE_TRIGGER_CUSTOM_STATE_ID CustomStateId;
     *     struct  s;
     * };
     * }
     */
    public static final class u {

        // Suppresses default constructor, ensuring non-instantiability.
        private u() {}
        static final UnionLayout u$union$LAYOUT = MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                MemoryLayout.sequenceLayout(2, Constants$root.C_LONG$LAYOUT).withName("Data")
            ).withName("CustomStateId"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("DataOffset"),
                MemoryLayout.sequenceLayout(1, Constants$root.C_CHAR$LAYOUT).withName("Data"),
                MemoryLayout.paddingLayout(24)
            ).withName("s")
        );
        public static MemoryLayout $LAYOUT() {
            return u.u$union$LAYOUT;
        }
        public static MemorySegment CustomStateId$slice(MemorySegment seg) {
            return seg.asSlice(0, 8);
        }
        /**
         * {@snippet :
         * struct {
         *     DWORD DataOffset;
         *     BYTE Data[1];
         * };
         * }
         */
        public static final class s {

            // Suppresses default constructor, ensuring non-instantiability.
            private s() {}
            static final StructLayout u$s$struct$LAYOUT = MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("DataOffset"),
                MemoryLayout.sequenceLayout(1, Constants$root.C_CHAR$LAYOUT).withName("Data"),
                MemoryLayout.paddingLayout(24)
            );
            public static MemoryLayout $LAYOUT() {
                return s.u$s$struct$LAYOUT;
            }
            static final VarHandle DataOffset$VH = u$s$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("DataOffset"));
            public static VarHandle DataOffset$VH() {
                return s.DataOffset$VH;
            }
            /**
             * Getter for field:
             * {@snippet :
             * DWORD DataOffset;
             * }
             */
            public static int DataOffset$get(MemorySegment seg) {
                return (int)s.DataOffset$VH.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * DWORD DataOffset;
             * }
             */
            public static void DataOffset$set(MemorySegment seg, int x) {
                s.DataOffset$VH.set(seg, x);
            }
            public static int DataOffset$get(MemorySegment seg, long index) {
                return (int)s.DataOffset$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void DataOffset$set(MemorySegment seg, long index, int x) {
                s.DataOffset$VH.set(seg.asSlice(index*sizeof()), x);
            }
            public static MemorySegment Data$slice(MemorySegment seg) {
                return seg.asSlice(4, 1);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
            public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
            }
            public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
        }

        public static MemorySegment s$slice(MemorySegment seg) {
            return seg.asSlice(0, 8);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
    }

    public static MemorySegment u$slice(MemorySegment seg) {
        return seg.asSlice(0, 8);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


