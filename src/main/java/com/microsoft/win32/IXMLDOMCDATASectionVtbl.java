// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IXMLDOMCDATASectionVtbl {
 *     HRESULT (*QueryInterface)(IXMLDOMCDATASection*,const IID*,void**);
 *     ULONG (*AddRef)(IXMLDOMCDATASection*);
 *     ULONG (*Release)(IXMLDOMCDATASection*);
 *     HRESULT (*GetTypeInfoCount)(IXMLDOMCDATASection*,UINT*);
 *     HRESULT (*GetTypeInfo)(IXMLDOMCDATASection*,UINT,LCID,ITypeInfo**);
 *     HRESULT (*GetIDsOfNames)(IXMLDOMCDATASection*,const IID*,LPOLESTR*,UINT,LCID,DISPID*);
 *     HRESULT (*Invoke)(IXMLDOMCDATASection*,DISPID,const IID*,LCID,WORD,DISPPARAMS*,VARIANT*,EXCEPINFO*,UINT*);
 *     HRESULT (*get_nodeName)(IXMLDOMCDATASection*,BSTR*);
 *     HRESULT (*get_nodeValue)(IXMLDOMCDATASection*,VARIANT*);
 *     HRESULT (*put_nodeValue)(IXMLDOMCDATASection*,VARIANT);
 *     HRESULT (*get_nodeType)(IXMLDOMCDATASection*,DOMNodeType*);
 *     HRESULT (*get_parentNode)(IXMLDOMCDATASection*,IXMLDOMNode**);
 *     HRESULT (*get_childNodes)(IXMLDOMCDATASection*,IXMLDOMNodeList**);
 *     HRESULT (*get_firstChild)(IXMLDOMCDATASection*,IXMLDOMNode**);
 *     HRESULT (*get_lastChild)(IXMLDOMCDATASection*,IXMLDOMNode**);
 *     HRESULT (*get_previousSibling)(IXMLDOMCDATASection*,IXMLDOMNode**);
 *     HRESULT (*get_nextSibling)(IXMLDOMCDATASection*,IXMLDOMNode**);
 *     HRESULT (*get_attributes)(IXMLDOMCDATASection*,IXMLDOMNamedNodeMap**);
 *     HRESULT (*insertBefore)(IXMLDOMCDATASection*,IXMLDOMNode*,VARIANT,IXMLDOMNode**);
 *     HRESULT (*replaceChild)(IXMLDOMCDATASection*,IXMLDOMNode*,IXMLDOMNode*,IXMLDOMNode**);
 *     HRESULT (*removeChild)(IXMLDOMCDATASection*,IXMLDOMNode*,IXMLDOMNode**);
 *     HRESULT (*appendChild)(IXMLDOMCDATASection*,IXMLDOMNode*,IXMLDOMNode**);
 *     HRESULT (*hasChildNodes)(IXMLDOMCDATASection*,VARIANT_BOOL*);
 *     HRESULT (*get_ownerDocument)(IXMLDOMCDATASection*,IXMLDOMDocument**);
 *     HRESULT (*cloneNode)(IXMLDOMCDATASection*,VARIANT_BOOL,IXMLDOMNode**);
 *     HRESULT (*get_nodeTypeString)(IXMLDOMCDATASection*,BSTR*);
 *     HRESULT (*get_text)(IXMLDOMCDATASection*,BSTR*);
 *     HRESULT (*put_text)(IXMLDOMCDATASection*,BSTR);
 *     HRESULT (*get_specified)(IXMLDOMCDATASection*,VARIANT_BOOL*);
 *     HRESULT (*get_definition)(IXMLDOMCDATASection*,IXMLDOMNode**);
 *     HRESULT (*get_nodeTypedValue)(IXMLDOMCDATASection*,VARIANT*);
 *     HRESULT (*put_nodeTypedValue)(IXMLDOMCDATASection*,VARIANT);
 *     HRESULT (*get_dataType)(IXMLDOMCDATASection*,VARIANT*);
 *     HRESULT (*put_dataType)(IXMLDOMCDATASection*,BSTR);
 *     HRESULT (*get_xml)(IXMLDOMCDATASection*,BSTR*);
 *     HRESULT (*transformNode)(IXMLDOMCDATASection*,IXMLDOMNode*,BSTR*);
 *     HRESULT (*selectNodes)(IXMLDOMCDATASection*,BSTR,IXMLDOMNodeList**);
 *     HRESULT (*selectSingleNode)(IXMLDOMCDATASection*,BSTR,IXMLDOMNode**);
 *     HRESULT (*get_parsed)(IXMLDOMCDATASection*,VARIANT_BOOL*);
 *     HRESULT (*get_namespaceURI)(IXMLDOMCDATASection*,BSTR*);
 *     HRESULT (*get_prefix)(IXMLDOMCDATASection*,BSTR*);
 *     HRESULT (*get_baseName)(IXMLDOMCDATASection*,BSTR*);
 *     HRESULT (*transformNodeToObject)(IXMLDOMCDATASection*,IXMLDOMNode*,VARIANT);
 *     HRESULT (*get_data)(IXMLDOMCDATASection*,BSTR*);
 *     HRESULT (*put_data)(IXMLDOMCDATASection*,BSTR);
 *     HRESULT (*get_length)(IXMLDOMCDATASection*,long*);
 *     HRESULT (*substringData)(IXMLDOMCDATASection*,long,long,BSTR*);
 *     HRESULT (*appendData)(IXMLDOMCDATASection*,BSTR);
 *     HRESULT (*insertData)(IXMLDOMCDATASection*,long,BSTR);
 *     HRESULT (*deleteData)(IXMLDOMCDATASection*,long,long);
 *     HRESULT (*replaceData)(IXMLDOMCDATASection*,long,long,BSTR);
 *     HRESULT (*splitText)(IXMLDOMCDATASection*,long,IXMLDOMText**);
 * };
 * }
 */
public class IXMLDOMCDATASectionVtbl {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("GetTypeInfoCount"),
        Constants$root.C_POINTER$LAYOUT.withName("GetTypeInfo"),
        Constants$root.C_POINTER$LAYOUT.withName("GetIDsOfNames"),
        Constants$root.C_POINTER$LAYOUT.withName("Invoke"),
        Constants$root.C_POINTER$LAYOUT.withName("get_nodeName"),
        Constants$root.C_POINTER$LAYOUT.withName("get_nodeValue"),
        Constants$root.C_POINTER$LAYOUT.withName("put_nodeValue"),
        Constants$root.C_POINTER$LAYOUT.withName("get_nodeType"),
        Constants$root.C_POINTER$LAYOUT.withName("get_parentNode"),
        Constants$root.C_POINTER$LAYOUT.withName("get_childNodes"),
        Constants$root.C_POINTER$LAYOUT.withName("get_firstChild"),
        Constants$root.C_POINTER$LAYOUT.withName("get_lastChild"),
        Constants$root.C_POINTER$LAYOUT.withName("get_previousSibling"),
        Constants$root.C_POINTER$LAYOUT.withName("get_nextSibling"),
        Constants$root.C_POINTER$LAYOUT.withName("get_attributes"),
        Constants$root.C_POINTER$LAYOUT.withName("insertBefore"),
        Constants$root.C_POINTER$LAYOUT.withName("replaceChild"),
        Constants$root.C_POINTER$LAYOUT.withName("removeChild"),
        Constants$root.C_POINTER$LAYOUT.withName("appendChild"),
        Constants$root.C_POINTER$LAYOUT.withName("hasChildNodes"),
        Constants$root.C_POINTER$LAYOUT.withName("get_ownerDocument"),
        Constants$root.C_POINTER$LAYOUT.withName("cloneNode"),
        Constants$root.C_POINTER$LAYOUT.withName("get_nodeTypeString"),
        Constants$root.C_POINTER$LAYOUT.withName("get_text"),
        Constants$root.C_POINTER$LAYOUT.withName("put_text"),
        Constants$root.C_POINTER$LAYOUT.withName("get_specified"),
        Constants$root.C_POINTER$LAYOUT.withName("get_definition"),
        Constants$root.C_POINTER$LAYOUT.withName("get_nodeTypedValue"),
        Constants$root.C_POINTER$LAYOUT.withName("put_nodeTypedValue"),
        Constants$root.C_POINTER$LAYOUT.withName("get_dataType"),
        Constants$root.C_POINTER$LAYOUT.withName("put_dataType"),
        Constants$root.C_POINTER$LAYOUT.withName("get_xml"),
        Constants$root.C_POINTER$LAYOUT.withName("transformNode"),
        Constants$root.C_POINTER$LAYOUT.withName("selectNodes"),
        Constants$root.C_POINTER$LAYOUT.withName("selectSingleNode"),
        Constants$root.C_POINTER$LAYOUT.withName("get_parsed"),
        Constants$root.C_POINTER$LAYOUT.withName("get_namespaceURI"),
        Constants$root.C_POINTER$LAYOUT.withName("get_prefix"),
        Constants$root.C_POINTER$LAYOUT.withName("get_baseName"),
        Constants$root.C_POINTER$LAYOUT.withName("transformNodeToObject"),
        Constants$root.C_POINTER$LAYOUT.withName("get_data"),
        Constants$root.C_POINTER$LAYOUT.withName("put_data"),
        Constants$root.C_POINTER$LAYOUT.withName("get_length"),
        Constants$root.C_POINTER$LAYOUT.withName("substringData"),
        Constants$root.C_POINTER$LAYOUT.withName("appendData"),
        Constants$root.C_POINTER$LAYOUT.withName("insertData"),
        Constants$root.C_POINTER$LAYOUT.withName("deleteData"),
        Constants$root.C_POINTER$LAYOUT.withName("replaceData"),
        Constants$root.C_POINTER$LAYOUT.withName("splitText")
    ).withName("IXMLDOMCDATASectionVtbl");
    public static MemoryLayout $LAYOUT() {
        return IXMLDOMCDATASectionVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor QueryInterface_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_UP$MH = RuntimeHelper.upcallHandle(QueryInterface.class, "apply", IXMLDOMCDATASectionVtbl.QueryInterface_UP$FUNC);
    static final FunctionDescriptor QueryInterface_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDOMCDATASectionVtbl.QueryInterface_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(IXMLDOMCDATASection*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDOMCDATASectionVtbl.QueryInterface_UP$MH, fi, IXMLDOMCDATASectionVtbl.QueryInterface$FUNC, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IXMLDOMCDATASectionVtbl.QueryInterface_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return IXMLDOMCDATASectionVtbl.QueryInterface$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IXMLDOMCDATASection*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.QueryInterface$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IXMLDOMCDATASection*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, SegmentScope scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor AddRef_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_UP$MH = RuntimeHelper.upcallHandle(AddRef.class, "apply", IXMLDOMCDATASectionVtbl.AddRef_UP$FUNC);
    static final FunctionDescriptor AddRef_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDOMCDATASectionVtbl.AddRef_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*AddRef)(IXMLDOMCDATASection*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDOMCDATASectionVtbl.AddRef_UP$MH, fi, IXMLDOMCDATASectionVtbl.AddRef$FUNC, scope);
        }
        static AddRef ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IXMLDOMCDATASectionVtbl.AddRef_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return IXMLDOMCDATASectionVtbl.AddRef$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(IXMLDOMCDATASection*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.AddRef$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(IXMLDOMCDATASection*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.AddRef$VH.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, SegmentScope scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Release_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_UP$MH = RuntimeHelper.upcallHandle(Release.class, "apply", IXMLDOMCDATASectionVtbl.Release_UP$FUNC);
    static final FunctionDescriptor Release_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDOMCDATASectionVtbl.Release_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*Release)(IXMLDOMCDATASection*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDOMCDATASectionVtbl.Release_UP$MH, fi, IXMLDOMCDATASectionVtbl.Release$FUNC, scope);
        }
        static Release ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IXMLDOMCDATASectionVtbl.Release_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return IXMLDOMCDATASectionVtbl.Release$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(IXMLDOMCDATASection*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.Release$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(IXMLDOMCDATASection*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.Release$VH.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, SegmentScope scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    static final FunctionDescriptor GetTypeInfoCount$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetTypeInfoCount_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetTypeInfoCount_UP$MH = RuntimeHelper.upcallHandle(GetTypeInfoCount.class, "apply", IXMLDOMCDATASectionVtbl.GetTypeInfoCount_UP$FUNC);
    static final FunctionDescriptor GetTypeInfoCount_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetTypeInfoCount_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDOMCDATASectionVtbl.GetTypeInfoCount_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetTypeInfoCount)(IXMLDOMCDATASection*,UINT*);
     * }
     */
    public interface GetTypeInfoCount {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetTypeInfoCount fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDOMCDATASectionVtbl.GetTypeInfoCount_UP$MH, fi, IXMLDOMCDATASectionVtbl.GetTypeInfoCount$FUNC, scope);
        }
        static GetTypeInfoCount ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IXMLDOMCDATASectionVtbl.GetTypeInfoCount_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetTypeInfoCount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetTypeInfoCount"));
    public static VarHandle GetTypeInfoCount$VH() {
        return IXMLDOMCDATASectionVtbl.GetTypeInfoCount$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetTypeInfoCount)(IXMLDOMCDATASection*,UINT*);
     * }
     */
    public static MemorySegment GetTypeInfoCount$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.GetTypeInfoCount$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetTypeInfoCount)(IXMLDOMCDATASection*,UINT*);
     * }
     */
    public static void GetTypeInfoCount$set(MemorySegment seg, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.GetTypeInfoCount$VH.set(seg, x);
    }
    public static MemorySegment GetTypeInfoCount$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.GetTypeInfoCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTypeInfoCount$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.GetTypeInfoCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTypeInfoCount GetTypeInfoCount(MemorySegment segment, SegmentScope scope) {
        return GetTypeInfoCount.ofAddress(GetTypeInfoCount$get(segment), scope);
    }
    static final FunctionDescriptor GetTypeInfo$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetTypeInfo_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetTypeInfo_UP$MH = RuntimeHelper.upcallHandle(GetTypeInfo.class, "apply", IXMLDOMCDATASectionVtbl.GetTypeInfo_UP$FUNC);
    static final FunctionDescriptor GetTypeInfo_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetTypeInfo_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDOMCDATASectionVtbl.GetTypeInfo_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetTypeInfo)(IXMLDOMCDATASection*,UINT,LCID,ITypeInfo**);
     * }
     */
    public interface GetTypeInfo {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(GetTypeInfo fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDOMCDATASectionVtbl.GetTypeInfo_UP$MH, fi, IXMLDOMCDATASectionVtbl.GetTypeInfo$FUNC, scope);
        }
        static GetTypeInfo ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)IXMLDOMCDATASectionVtbl.GetTypeInfo_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetTypeInfo$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetTypeInfo"));
    public static VarHandle GetTypeInfo$VH() {
        return IXMLDOMCDATASectionVtbl.GetTypeInfo$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetTypeInfo)(IXMLDOMCDATASection*,UINT,LCID,ITypeInfo**);
     * }
     */
    public static MemorySegment GetTypeInfo$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.GetTypeInfo$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetTypeInfo)(IXMLDOMCDATASection*,UINT,LCID,ITypeInfo**);
     * }
     */
    public static void GetTypeInfo$set(MemorySegment seg, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.GetTypeInfo$VH.set(seg, x);
    }
    public static MemorySegment GetTypeInfo$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.GetTypeInfo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTypeInfo$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.GetTypeInfo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTypeInfo GetTypeInfo(MemorySegment segment, SegmentScope scope) {
        return GetTypeInfo.ofAddress(GetTypeInfo$get(segment), scope);
    }
    static final FunctionDescriptor GetIDsOfNames$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor GetIDsOfNames_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetIDsOfNames_UP$MH = RuntimeHelper.upcallHandle(GetIDsOfNames.class, "apply", IXMLDOMCDATASectionVtbl.GetIDsOfNames_UP$FUNC);
    static final FunctionDescriptor GetIDsOfNames_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetIDsOfNames_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDOMCDATASectionVtbl.GetIDsOfNames_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*GetIDsOfNames)(IXMLDOMCDATASection*,const IID*,LPOLESTR*,UINT,LCID,DISPID*);
     * }
     */
    public interface GetIDsOfNames {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3, int _x4, java.lang.foreign.MemorySegment _x5);
        static MemorySegment allocate(GetIDsOfNames fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDOMCDATASectionVtbl.GetIDsOfNames_UP$MH, fi, IXMLDOMCDATASectionVtbl.GetIDsOfNames$FUNC, scope);
        }
        static GetIDsOfNames ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3, int __x4, java.lang.foreign.MemorySegment __x5) -> {
                try {
                    return (int)IXMLDOMCDATASectionVtbl.GetIDsOfNames_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetIDsOfNames$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetIDsOfNames"));
    public static VarHandle GetIDsOfNames$VH() {
        return IXMLDOMCDATASectionVtbl.GetIDsOfNames$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*GetIDsOfNames)(IXMLDOMCDATASection*,const IID*,LPOLESTR*,UINT,LCID,DISPID*);
     * }
     */
    public static MemorySegment GetIDsOfNames$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.GetIDsOfNames$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*GetIDsOfNames)(IXMLDOMCDATASection*,const IID*,LPOLESTR*,UINT,LCID,DISPID*);
     * }
     */
    public static void GetIDsOfNames$set(MemorySegment seg, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.GetIDsOfNames$VH.set(seg, x);
    }
    public static MemorySegment GetIDsOfNames$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.GetIDsOfNames$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetIDsOfNames$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.GetIDsOfNames$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetIDsOfNames GetIDsOfNames(MemorySegment segment, SegmentScope scope) {
        return GetIDsOfNames.ofAddress(GetIDsOfNames$get(segment), scope);
    }
    static final FunctionDescriptor Invoke$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_SHORT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Invoke_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_SHORT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Invoke_UP$MH = RuntimeHelper.upcallHandle(Invoke.class, "apply", IXMLDOMCDATASectionVtbl.Invoke_UP$FUNC);
    static final FunctionDescriptor Invoke_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_SHORT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Invoke_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDOMCDATASectionVtbl.Invoke_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*Invoke)(IXMLDOMCDATASection*,DISPID,const IID*,LCID,WORD,DISPPARAMS*,VARIANT*,EXCEPINFO*,UINT*);
     * }
     */
    public interface Invoke {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, int _x3, short _x4, java.lang.foreign.MemorySegment _x5, java.lang.foreign.MemorySegment _x6, java.lang.foreign.MemorySegment _x7, java.lang.foreign.MemorySegment _x8);
        static MemorySegment allocate(Invoke fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDOMCDATASectionVtbl.Invoke_UP$MH, fi, IXMLDOMCDATASectionVtbl.Invoke$FUNC, scope);
        }
        static Invoke ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, int __x3, short __x4, java.lang.foreign.MemorySegment __x5, java.lang.foreign.MemorySegment __x6, java.lang.foreign.MemorySegment __x7, java.lang.foreign.MemorySegment __x8) -> {
                try {
                    return (int)IXMLDOMCDATASectionVtbl.Invoke_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6, __x7, __x8);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Invoke$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Invoke"));
    public static VarHandle Invoke$VH() {
        return IXMLDOMCDATASectionVtbl.Invoke$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Invoke)(IXMLDOMCDATASection*,DISPID,const IID*,LCID,WORD,DISPPARAMS*,VARIANT*,EXCEPINFO*,UINT*);
     * }
     */
    public static MemorySegment Invoke$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.Invoke$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Invoke)(IXMLDOMCDATASection*,DISPID,const IID*,LCID,WORD,DISPPARAMS*,VARIANT*,EXCEPINFO*,UINT*);
     * }
     */
    public static void Invoke$set(MemorySegment seg, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.Invoke$VH.set(seg, x);
    }
    public static MemorySegment Invoke$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.Invoke$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Invoke$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.Invoke$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Invoke Invoke(MemorySegment segment, SegmentScope scope) {
        return Invoke.ofAddress(Invoke$get(segment), scope);
    }
    static final FunctionDescriptor get_nodeName$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_nodeName_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_nodeName_UP$MH = RuntimeHelper.upcallHandle(get_nodeName.class, "apply", IXMLDOMCDATASectionVtbl.get_nodeName_UP$FUNC);
    static final FunctionDescriptor get_nodeName_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_nodeName_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDOMCDATASectionVtbl.get_nodeName_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*get_nodeName)(IXMLDOMCDATASection*,BSTR*);
     * }
     */
    public interface get_nodeName {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_nodeName fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDOMCDATASectionVtbl.get_nodeName_UP$MH, fi, IXMLDOMCDATASectionVtbl.get_nodeName$FUNC, scope);
        }
        static get_nodeName ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IXMLDOMCDATASectionVtbl.get_nodeName_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_nodeName$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_nodeName"));
    public static VarHandle get_nodeName$VH() {
        return IXMLDOMCDATASectionVtbl.get_nodeName$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_nodeName)(IXMLDOMCDATASection*,BSTR*);
     * }
     */
    public static MemorySegment get_nodeName$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.get_nodeName$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_nodeName)(IXMLDOMCDATASection*,BSTR*);
     * }
     */
    public static void get_nodeName$set(MemorySegment seg, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.get_nodeName$VH.set(seg, x);
    }
    public static MemorySegment get_nodeName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.get_nodeName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_nodeName$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.get_nodeName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_nodeName get_nodeName(MemorySegment segment, SegmentScope scope) {
        return get_nodeName.ofAddress(get_nodeName$get(segment), scope);
    }
    static final FunctionDescriptor get_nodeValue$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_nodeValue_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_nodeValue_UP$MH = RuntimeHelper.upcallHandle(get_nodeValue.class, "apply", IXMLDOMCDATASectionVtbl.get_nodeValue_UP$FUNC);
    static final FunctionDescriptor get_nodeValue_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_nodeValue_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDOMCDATASectionVtbl.get_nodeValue_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*get_nodeValue)(IXMLDOMCDATASection*,VARIANT*);
     * }
     */
    public interface get_nodeValue {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_nodeValue fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDOMCDATASectionVtbl.get_nodeValue_UP$MH, fi, IXMLDOMCDATASectionVtbl.get_nodeValue$FUNC, scope);
        }
        static get_nodeValue ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IXMLDOMCDATASectionVtbl.get_nodeValue_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_nodeValue$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_nodeValue"));
    public static VarHandle get_nodeValue$VH() {
        return IXMLDOMCDATASectionVtbl.get_nodeValue$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_nodeValue)(IXMLDOMCDATASection*,VARIANT*);
     * }
     */
    public static MemorySegment get_nodeValue$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.get_nodeValue$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_nodeValue)(IXMLDOMCDATASection*,VARIANT*);
     * }
     */
    public static void get_nodeValue$set(MemorySegment seg, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.get_nodeValue$VH.set(seg, x);
    }
    public static MemorySegment get_nodeValue$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.get_nodeValue$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_nodeValue$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.get_nodeValue$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_nodeValue get_nodeValue(MemorySegment segment, SegmentScope scope) {
        return get_nodeValue.ofAddress(get_nodeValue$get(segment), scope);
    }
    static final FunctionDescriptor put_nodeValue$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        MemoryLayout.structLayout(
            MemoryLayout.unionLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_SHORT$LAYOUT.withName("vt"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved1"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved2"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved3"),
                    MemoryLayout.unionLayout(
                        Constants$root.C_LONG_LONG$LAYOUT.withName("llVal"),
                        Constants$root.C_LONG$LAYOUT.withName("lVal"),
                        Constants$root.C_CHAR$LAYOUT.withName("bVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("iVal"),
                        Constants$root.C_FLOAT$LAYOUT.withName("fltVal"),
                        Constants$root.C_DOUBLE$LAYOUT.withName("dblVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("boolVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("__OBSOLETE__VARIANT_BOOL"),
                        Constants$root.C_LONG$LAYOUT.withName("scode"),
                        MemoryLayout.unionLayout(
                            MemoryLayout.structLayout(
                                Constants$root.C_LONG$LAYOUT.withName("Lo"),
                                Constants$root.C_LONG$LAYOUT.withName("Hi")
                            ).withName("$anon$0"),
                            Constants$root.C_LONG_LONG$LAYOUT.withName("int64")
                        ).withName("cyVal"),
                        Constants$root.C_DOUBLE$LAYOUT.withName("date"),
                        Constants$root.C_POINTER$LAYOUT.withName("bstrVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("punkVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdispVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("parray"),
                        Constants$root.C_POINTER$LAYOUT.withName("pbVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("piVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("plVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pllVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pfltVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdblVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pboolVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("__OBSOLETE__VARIANT_PBOOL"),
                        Constants$root.C_POINTER$LAYOUT.withName("pscode"),
                        Constants$root.C_POINTER$LAYOUT.withName("pcyVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdate"),
                        Constants$root.C_POINTER$LAYOUT.withName("pbstrVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("ppunkVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("ppdispVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pparray"),
                        Constants$root.C_POINTER$LAYOUT.withName("pvarVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("byref"),
                        Constants$root.C_CHAR$LAYOUT.withName("cVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("uiVal"),
                        Constants$root.C_LONG$LAYOUT.withName("ulVal"),
                        Constants$root.C_LONG_LONG$LAYOUT.withName("ullVal"),
                        Constants$root.C_LONG$LAYOUT.withName("intVal"),
                        Constants$root.C_LONG$LAYOUT.withName("uintVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdecVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pcVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("puiVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pulVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pullVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pintVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("puintVal"),
                        MemoryLayout.structLayout(
                            Constants$root.C_POINTER$LAYOUT.withName("pvRecord"),
                            Constants$root.C_POINTER$LAYOUT.withName("pRecInfo")
                        ).withName("$anon$0")
                    ).withName("$anon$0")
                ).withName("$anon$0"),
                MemoryLayout.structLayout(
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            Constants$root.C_CHAR$LAYOUT.withName("scale"),
                            Constants$root.C_CHAR$LAYOUT.withName("sign")
                        ).withName("$anon$0"),
                        Constants$root.C_SHORT$LAYOUT.withName("signscale")
                    ).withName("$anon$0"),
                    Constants$root.C_LONG$LAYOUT.withName("Hi32"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            Constants$root.C_LONG$LAYOUT.withName("Lo32"),
                            Constants$root.C_LONG$LAYOUT.withName("Mid32")
                        ).withName("$anon$0"),
                        Constants$root.C_LONG_LONG$LAYOUT.withName("Lo64")
                    ).withName("$anon$1")
                ).withName("decVal")
            ).withName("$anon$0")
        ).withName("tagVARIANT")
    );
    static final FunctionDescriptor put_nodeValue_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        MemoryLayout.structLayout(
            MemoryLayout.unionLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_SHORT$LAYOUT.withName("vt"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved1"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved2"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved3"),
                    MemoryLayout.unionLayout(
                        Constants$root.C_LONG_LONG$LAYOUT.withName("llVal"),
                        Constants$root.C_LONG$LAYOUT.withName("lVal"),
                        Constants$root.C_CHAR$LAYOUT.withName("bVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("iVal"),
                        Constants$root.C_FLOAT$LAYOUT.withName("fltVal"),
                        Constants$root.C_DOUBLE$LAYOUT.withName("dblVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("boolVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("__OBSOLETE__VARIANT_BOOL"),
                        Constants$root.C_LONG$LAYOUT.withName("scode"),
                        MemoryLayout.unionLayout(
                            MemoryLayout.structLayout(
                                Constants$root.C_LONG$LAYOUT.withName("Lo"),
                                Constants$root.C_LONG$LAYOUT.withName("Hi")
                            ).withName("$anon$0"),
                            Constants$root.C_LONG_LONG$LAYOUT.withName("int64")
                        ).withName("cyVal"),
                        Constants$root.C_DOUBLE$LAYOUT.withName("date"),
                        Constants$root.C_POINTER$LAYOUT.withName("bstrVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("punkVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdispVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("parray"),
                        Constants$root.C_POINTER$LAYOUT.withName("pbVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("piVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("plVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pllVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pfltVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdblVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pboolVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("__OBSOLETE__VARIANT_PBOOL"),
                        Constants$root.C_POINTER$LAYOUT.withName("pscode"),
                        Constants$root.C_POINTER$LAYOUT.withName("pcyVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdate"),
                        Constants$root.C_POINTER$LAYOUT.withName("pbstrVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("ppunkVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("ppdispVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pparray"),
                        Constants$root.C_POINTER$LAYOUT.withName("pvarVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("byref"),
                        Constants$root.C_CHAR$LAYOUT.withName("cVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("uiVal"),
                        Constants$root.C_LONG$LAYOUT.withName("ulVal"),
                        Constants$root.C_LONG_LONG$LAYOUT.withName("ullVal"),
                        Constants$root.C_LONG$LAYOUT.withName("intVal"),
                        Constants$root.C_LONG$LAYOUT.withName("uintVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdecVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pcVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("puiVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pulVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pullVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pintVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("puintVal"),
                        MemoryLayout.structLayout(
                            Constants$root.C_POINTER$LAYOUT.withName("pvRecord"),
                            Constants$root.C_POINTER$LAYOUT.withName("pRecInfo")
                        ).withName("$anon$0")
                    ).withName("$anon$0")
                ).withName("$anon$0"),
                MemoryLayout.structLayout(
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            Constants$root.C_CHAR$LAYOUT.withName("scale"),
                            Constants$root.C_CHAR$LAYOUT.withName("sign")
                        ).withName("$anon$0"),
                        Constants$root.C_SHORT$LAYOUT.withName("signscale")
                    ).withName("$anon$0"),
                    Constants$root.C_LONG$LAYOUT.withName("Hi32"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            Constants$root.C_LONG$LAYOUT.withName("Lo32"),
                            Constants$root.C_LONG$LAYOUT.withName("Mid32")
                        ).withName("$anon$0"),
                        Constants$root.C_LONG_LONG$LAYOUT.withName("Lo64")
                    ).withName("$anon$1")
                ).withName("decVal")
            ).withName("$anon$0")
        ).withName("tagVARIANT")
    );
    static final MethodHandle put_nodeValue_UP$MH = RuntimeHelper.upcallHandle(put_nodeValue.class, "apply", IXMLDOMCDATASectionVtbl.put_nodeValue_UP$FUNC);
    static final FunctionDescriptor put_nodeValue_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        MemoryLayout.structLayout(
            MemoryLayout.unionLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_SHORT$LAYOUT.withName("vt"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved1"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved2"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved3"),
                    MemoryLayout.unionLayout(
                        Constants$root.C_LONG_LONG$LAYOUT.withName("llVal"),
                        Constants$root.C_LONG$LAYOUT.withName("lVal"),
                        Constants$root.C_CHAR$LAYOUT.withName("bVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("iVal"),
                        Constants$root.C_FLOAT$LAYOUT.withName("fltVal"),
                        Constants$root.C_DOUBLE$LAYOUT.withName("dblVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("boolVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("__OBSOLETE__VARIANT_BOOL"),
                        Constants$root.C_LONG$LAYOUT.withName("scode"),
                        MemoryLayout.unionLayout(
                            MemoryLayout.structLayout(
                                Constants$root.C_LONG$LAYOUT.withName("Lo"),
                                Constants$root.C_LONG$LAYOUT.withName("Hi")
                            ).withName("$anon$0"),
                            Constants$root.C_LONG_LONG$LAYOUT.withName("int64")
                        ).withName("cyVal"),
                        Constants$root.C_DOUBLE$LAYOUT.withName("date"),
                        Constants$root.C_POINTER$LAYOUT.withName("bstrVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("punkVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdispVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("parray"),
                        Constants$root.C_POINTER$LAYOUT.withName("pbVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("piVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("plVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pllVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pfltVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdblVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pboolVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("__OBSOLETE__VARIANT_PBOOL"),
                        Constants$root.C_POINTER$LAYOUT.withName("pscode"),
                        Constants$root.C_POINTER$LAYOUT.withName("pcyVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdate"),
                        Constants$root.C_POINTER$LAYOUT.withName("pbstrVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("ppunkVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("ppdispVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pparray"),
                        Constants$root.C_POINTER$LAYOUT.withName("pvarVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("byref"),
                        Constants$root.C_CHAR$LAYOUT.withName("cVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("uiVal"),
                        Constants$root.C_LONG$LAYOUT.withName("ulVal"),
                        Constants$root.C_LONG_LONG$LAYOUT.withName("ullVal"),
                        Constants$root.C_LONG$LAYOUT.withName("intVal"),
                        Constants$root.C_LONG$LAYOUT.withName("uintVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdecVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pcVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("puiVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pulVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pullVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pintVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("puintVal"),
                        MemoryLayout.structLayout(
                            Constants$root.C_POINTER$LAYOUT.withName("pvRecord"),
                            Constants$root.C_POINTER$LAYOUT.withName("pRecInfo")
                        ).withName("$anon$0")
                    ).withName("$anon$0")
                ).withName("$anon$0"),
                MemoryLayout.structLayout(
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            Constants$root.C_CHAR$LAYOUT.withName("scale"),
                            Constants$root.C_CHAR$LAYOUT.withName("sign")
                        ).withName("$anon$0"),
                        Constants$root.C_SHORT$LAYOUT.withName("signscale")
                    ).withName("$anon$0"),
                    Constants$root.C_LONG$LAYOUT.withName("Hi32"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            Constants$root.C_LONG$LAYOUT.withName("Lo32"),
                            Constants$root.C_LONG$LAYOUT.withName("Mid32")
                        ).withName("$anon$0"),
                        Constants$root.C_LONG_LONG$LAYOUT.withName("Lo64")
                    ).withName("$anon$1")
                ).withName("decVal")
            ).withName("$anon$0")
        ).withName("tagVARIANT")
    );
    static final MethodHandle put_nodeValue_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDOMCDATASectionVtbl.put_nodeValue_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*put_nodeValue)(IXMLDOMCDATASection*,VARIANT);
     * }
     */
    public interface put_nodeValue {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(put_nodeValue fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDOMCDATASectionVtbl.put_nodeValue_UP$MH, fi, IXMLDOMCDATASectionVtbl.put_nodeValue$FUNC, scope);
        }
        static put_nodeValue ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IXMLDOMCDATASectionVtbl.put_nodeValue_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle put_nodeValue$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("put_nodeValue"));
    public static VarHandle put_nodeValue$VH() {
        return IXMLDOMCDATASectionVtbl.put_nodeValue$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*put_nodeValue)(IXMLDOMCDATASection*,VARIANT);
     * }
     */
    public static MemorySegment put_nodeValue$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.put_nodeValue$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*put_nodeValue)(IXMLDOMCDATASection*,VARIANT);
     * }
     */
    public static void put_nodeValue$set(MemorySegment seg, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.put_nodeValue$VH.set(seg, x);
    }
    public static MemorySegment put_nodeValue$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.put_nodeValue$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void put_nodeValue$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.put_nodeValue$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static put_nodeValue put_nodeValue(MemorySegment segment, SegmentScope scope) {
        return put_nodeValue.ofAddress(put_nodeValue$get(segment), scope);
    }
    static final FunctionDescriptor get_nodeType$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_nodeType_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_nodeType_UP$MH = RuntimeHelper.upcallHandle(get_nodeType.class, "apply", IXMLDOMCDATASectionVtbl.get_nodeType_UP$FUNC);
    static final FunctionDescriptor get_nodeType_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_nodeType_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDOMCDATASectionVtbl.get_nodeType_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*get_nodeType)(IXMLDOMCDATASection*,DOMNodeType*);
     * }
     */
    public interface get_nodeType {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_nodeType fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDOMCDATASectionVtbl.get_nodeType_UP$MH, fi, IXMLDOMCDATASectionVtbl.get_nodeType$FUNC, scope);
        }
        static get_nodeType ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IXMLDOMCDATASectionVtbl.get_nodeType_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_nodeType$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_nodeType"));
    public static VarHandle get_nodeType$VH() {
        return IXMLDOMCDATASectionVtbl.get_nodeType$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_nodeType)(IXMLDOMCDATASection*,DOMNodeType*);
     * }
     */
    public static MemorySegment get_nodeType$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.get_nodeType$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_nodeType)(IXMLDOMCDATASection*,DOMNodeType*);
     * }
     */
    public static void get_nodeType$set(MemorySegment seg, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.get_nodeType$VH.set(seg, x);
    }
    public static MemorySegment get_nodeType$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.get_nodeType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_nodeType$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.get_nodeType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_nodeType get_nodeType(MemorySegment segment, SegmentScope scope) {
        return get_nodeType.ofAddress(get_nodeType$get(segment), scope);
    }
    static final FunctionDescriptor get_parentNode$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_parentNode_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_parentNode_UP$MH = RuntimeHelper.upcallHandle(get_parentNode.class, "apply", IXMLDOMCDATASectionVtbl.get_parentNode_UP$FUNC);
    static final FunctionDescriptor get_parentNode_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_parentNode_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDOMCDATASectionVtbl.get_parentNode_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*get_parentNode)(IXMLDOMCDATASection*,IXMLDOMNode**);
     * }
     */
    public interface get_parentNode {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_parentNode fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDOMCDATASectionVtbl.get_parentNode_UP$MH, fi, IXMLDOMCDATASectionVtbl.get_parentNode$FUNC, scope);
        }
        static get_parentNode ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IXMLDOMCDATASectionVtbl.get_parentNode_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_parentNode$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_parentNode"));
    public static VarHandle get_parentNode$VH() {
        return IXMLDOMCDATASectionVtbl.get_parentNode$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_parentNode)(IXMLDOMCDATASection*,IXMLDOMNode**);
     * }
     */
    public static MemorySegment get_parentNode$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.get_parentNode$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_parentNode)(IXMLDOMCDATASection*,IXMLDOMNode**);
     * }
     */
    public static void get_parentNode$set(MemorySegment seg, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.get_parentNode$VH.set(seg, x);
    }
    public static MemorySegment get_parentNode$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.get_parentNode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_parentNode$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.get_parentNode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_parentNode get_parentNode(MemorySegment segment, SegmentScope scope) {
        return get_parentNode.ofAddress(get_parentNode$get(segment), scope);
    }
    static final FunctionDescriptor get_childNodes$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_childNodes_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_childNodes_UP$MH = RuntimeHelper.upcallHandle(get_childNodes.class, "apply", IXMLDOMCDATASectionVtbl.get_childNodes_UP$FUNC);
    static final FunctionDescriptor get_childNodes_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_childNodes_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDOMCDATASectionVtbl.get_childNodes_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*get_childNodes)(IXMLDOMCDATASection*,IXMLDOMNodeList**);
     * }
     */
    public interface get_childNodes {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_childNodes fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDOMCDATASectionVtbl.get_childNodes_UP$MH, fi, IXMLDOMCDATASectionVtbl.get_childNodes$FUNC, scope);
        }
        static get_childNodes ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IXMLDOMCDATASectionVtbl.get_childNodes_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_childNodes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_childNodes"));
    public static VarHandle get_childNodes$VH() {
        return IXMLDOMCDATASectionVtbl.get_childNodes$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_childNodes)(IXMLDOMCDATASection*,IXMLDOMNodeList**);
     * }
     */
    public static MemorySegment get_childNodes$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.get_childNodes$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_childNodes)(IXMLDOMCDATASection*,IXMLDOMNodeList**);
     * }
     */
    public static void get_childNodes$set(MemorySegment seg, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.get_childNodes$VH.set(seg, x);
    }
    public static MemorySegment get_childNodes$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.get_childNodes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_childNodes$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.get_childNodes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_childNodes get_childNodes(MemorySegment segment, SegmentScope scope) {
        return get_childNodes.ofAddress(get_childNodes$get(segment), scope);
    }
    static final FunctionDescriptor get_firstChild$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_firstChild_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_firstChild_UP$MH = RuntimeHelper.upcallHandle(get_firstChild.class, "apply", IXMLDOMCDATASectionVtbl.get_firstChild_UP$FUNC);
    static final FunctionDescriptor get_firstChild_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_firstChild_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDOMCDATASectionVtbl.get_firstChild_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*get_firstChild)(IXMLDOMCDATASection*,IXMLDOMNode**);
     * }
     */
    public interface get_firstChild {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_firstChild fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDOMCDATASectionVtbl.get_firstChild_UP$MH, fi, IXMLDOMCDATASectionVtbl.get_firstChild$FUNC, scope);
        }
        static get_firstChild ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IXMLDOMCDATASectionVtbl.get_firstChild_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_firstChild$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_firstChild"));
    public static VarHandle get_firstChild$VH() {
        return IXMLDOMCDATASectionVtbl.get_firstChild$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_firstChild)(IXMLDOMCDATASection*,IXMLDOMNode**);
     * }
     */
    public static MemorySegment get_firstChild$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.get_firstChild$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_firstChild)(IXMLDOMCDATASection*,IXMLDOMNode**);
     * }
     */
    public static void get_firstChild$set(MemorySegment seg, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.get_firstChild$VH.set(seg, x);
    }
    public static MemorySegment get_firstChild$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.get_firstChild$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_firstChild$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.get_firstChild$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_firstChild get_firstChild(MemorySegment segment, SegmentScope scope) {
        return get_firstChild.ofAddress(get_firstChild$get(segment), scope);
    }
    static final FunctionDescriptor get_lastChild$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_lastChild_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_lastChild_UP$MH = RuntimeHelper.upcallHandle(get_lastChild.class, "apply", IXMLDOMCDATASectionVtbl.get_lastChild_UP$FUNC);
    static final FunctionDescriptor get_lastChild_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_lastChild_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDOMCDATASectionVtbl.get_lastChild_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*get_lastChild)(IXMLDOMCDATASection*,IXMLDOMNode**);
     * }
     */
    public interface get_lastChild {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_lastChild fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDOMCDATASectionVtbl.get_lastChild_UP$MH, fi, IXMLDOMCDATASectionVtbl.get_lastChild$FUNC, scope);
        }
        static get_lastChild ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IXMLDOMCDATASectionVtbl.get_lastChild_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_lastChild$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_lastChild"));
    public static VarHandle get_lastChild$VH() {
        return IXMLDOMCDATASectionVtbl.get_lastChild$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_lastChild)(IXMLDOMCDATASection*,IXMLDOMNode**);
     * }
     */
    public static MemorySegment get_lastChild$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.get_lastChild$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_lastChild)(IXMLDOMCDATASection*,IXMLDOMNode**);
     * }
     */
    public static void get_lastChild$set(MemorySegment seg, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.get_lastChild$VH.set(seg, x);
    }
    public static MemorySegment get_lastChild$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.get_lastChild$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_lastChild$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.get_lastChild$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_lastChild get_lastChild(MemorySegment segment, SegmentScope scope) {
        return get_lastChild.ofAddress(get_lastChild$get(segment), scope);
    }
    static final FunctionDescriptor get_previousSibling$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_previousSibling_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_previousSibling_UP$MH = RuntimeHelper.upcallHandle(get_previousSibling.class, "apply", IXMLDOMCDATASectionVtbl.get_previousSibling_UP$FUNC);
    static final FunctionDescriptor get_previousSibling_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_previousSibling_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDOMCDATASectionVtbl.get_previousSibling_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*get_previousSibling)(IXMLDOMCDATASection*,IXMLDOMNode**);
     * }
     */
    public interface get_previousSibling {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_previousSibling fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDOMCDATASectionVtbl.get_previousSibling_UP$MH, fi, IXMLDOMCDATASectionVtbl.get_previousSibling$FUNC, scope);
        }
        static get_previousSibling ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IXMLDOMCDATASectionVtbl.get_previousSibling_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_previousSibling$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_previousSibling"));
    public static VarHandle get_previousSibling$VH() {
        return IXMLDOMCDATASectionVtbl.get_previousSibling$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_previousSibling)(IXMLDOMCDATASection*,IXMLDOMNode**);
     * }
     */
    public static MemorySegment get_previousSibling$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.get_previousSibling$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_previousSibling)(IXMLDOMCDATASection*,IXMLDOMNode**);
     * }
     */
    public static void get_previousSibling$set(MemorySegment seg, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.get_previousSibling$VH.set(seg, x);
    }
    public static MemorySegment get_previousSibling$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.get_previousSibling$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_previousSibling$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.get_previousSibling$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_previousSibling get_previousSibling(MemorySegment segment, SegmentScope scope) {
        return get_previousSibling.ofAddress(get_previousSibling$get(segment), scope);
    }
    static final FunctionDescriptor get_nextSibling$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_nextSibling_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_nextSibling_UP$MH = RuntimeHelper.upcallHandle(get_nextSibling.class, "apply", IXMLDOMCDATASectionVtbl.get_nextSibling_UP$FUNC);
    static final FunctionDescriptor get_nextSibling_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_nextSibling_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDOMCDATASectionVtbl.get_nextSibling_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*get_nextSibling)(IXMLDOMCDATASection*,IXMLDOMNode**);
     * }
     */
    public interface get_nextSibling {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_nextSibling fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDOMCDATASectionVtbl.get_nextSibling_UP$MH, fi, IXMLDOMCDATASectionVtbl.get_nextSibling$FUNC, scope);
        }
        static get_nextSibling ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IXMLDOMCDATASectionVtbl.get_nextSibling_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_nextSibling$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_nextSibling"));
    public static VarHandle get_nextSibling$VH() {
        return IXMLDOMCDATASectionVtbl.get_nextSibling$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_nextSibling)(IXMLDOMCDATASection*,IXMLDOMNode**);
     * }
     */
    public static MemorySegment get_nextSibling$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.get_nextSibling$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_nextSibling)(IXMLDOMCDATASection*,IXMLDOMNode**);
     * }
     */
    public static void get_nextSibling$set(MemorySegment seg, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.get_nextSibling$VH.set(seg, x);
    }
    public static MemorySegment get_nextSibling$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.get_nextSibling$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_nextSibling$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.get_nextSibling$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_nextSibling get_nextSibling(MemorySegment segment, SegmentScope scope) {
        return get_nextSibling.ofAddress(get_nextSibling$get(segment), scope);
    }
    static final FunctionDescriptor get_attributes$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_attributes_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_attributes_UP$MH = RuntimeHelper.upcallHandle(get_attributes.class, "apply", IXMLDOMCDATASectionVtbl.get_attributes_UP$FUNC);
    static final FunctionDescriptor get_attributes_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_attributes_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDOMCDATASectionVtbl.get_attributes_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*get_attributes)(IXMLDOMCDATASection*,IXMLDOMNamedNodeMap**);
     * }
     */
    public interface get_attributes {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_attributes fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDOMCDATASectionVtbl.get_attributes_UP$MH, fi, IXMLDOMCDATASectionVtbl.get_attributes$FUNC, scope);
        }
        static get_attributes ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IXMLDOMCDATASectionVtbl.get_attributes_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_attributes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_attributes"));
    public static VarHandle get_attributes$VH() {
        return IXMLDOMCDATASectionVtbl.get_attributes$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_attributes)(IXMLDOMCDATASection*,IXMLDOMNamedNodeMap**);
     * }
     */
    public static MemorySegment get_attributes$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.get_attributes$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_attributes)(IXMLDOMCDATASection*,IXMLDOMNamedNodeMap**);
     * }
     */
    public static void get_attributes$set(MemorySegment seg, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.get_attributes$VH.set(seg, x);
    }
    public static MemorySegment get_attributes$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.get_attributes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_attributes$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.get_attributes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_attributes get_attributes(MemorySegment segment, SegmentScope scope) {
        return get_attributes.ofAddress(get_attributes$get(segment), scope);
    }
    static final FunctionDescriptor insertBefore$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        MemoryLayout.structLayout(
            MemoryLayout.unionLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_SHORT$LAYOUT.withName("vt"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved1"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved2"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved3"),
                    MemoryLayout.unionLayout(
                        Constants$root.C_LONG_LONG$LAYOUT.withName("llVal"),
                        Constants$root.C_LONG$LAYOUT.withName("lVal"),
                        Constants$root.C_CHAR$LAYOUT.withName("bVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("iVal"),
                        Constants$root.C_FLOAT$LAYOUT.withName("fltVal"),
                        Constants$root.C_DOUBLE$LAYOUT.withName("dblVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("boolVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("__OBSOLETE__VARIANT_BOOL"),
                        Constants$root.C_LONG$LAYOUT.withName("scode"),
                        MemoryLayout.unionLayout(
                            MemoryLayout.structLayout(
                                Constants$root.C_LONG$LAYOUT.withName("Lo"),
                                Constants$root.C_LONG$LAYOUT.withName("Hi")
                            ).withName("$anon$0"),
                            Constants$root.C_LONG_LONG$LAYOUT.withName("int64")
                        ).withName("cyVal"),
                        Constants$root.C_DOUBLE$LAYOUT.withName("date"),
                        Constants$root.C_POINTER$LAYOUT.withName("bstrVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("punkVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdispVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("parray"),
                        Constants$root.C_POINTER$LAYOUT.withName("pbVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("piVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("plVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pllVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pfltVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdblVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pboolVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("__OBSOLETE__VARIANT_PBOOL"),
                        Constants$root.C_POINTER$LAYOUT.withName("pscode"),
                        Constants$root.C_POINTER$LAYOUT.withName("pcyVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdate"),
                        Constants$root.C_POINTER$LAYOUT.withName("pbstrVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("ppunkVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("ppdispVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pparray"),
                        Constants$root.C_POINTER$LAYOUT.withName("pvarVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("byref"),
                        Constants$root.C_CHAR$LAYOUT.withName("cVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("uiVal"),
                        Constants$root.C_LONG$LAYOUT.withName("ulVal"),
                        Constants$root.C_LONG_LONG$LAYOUT.withName("ullVal"),
                        Constants$root.C_LONG$LAYOUT.withName("intVal"),
                        Constants$root.C_LONG$LAYOUT.withName("uintVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdecVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pcVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("puiVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pulVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pullVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pintVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("puintVal"),
                        MemoryLayout.structLayout(
                            Constants$root.C_POINTER$LAYOUT.withName("pvRecord"),
                            Constants$root.C_POINTER$LAYOUT.withName("pRecInfo")
                        ).withName("$anon$0")
                    ).withName("$anon$0")
                ).withName("$anon$0"),
                MemoryLayout.structLayout(
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            Constants$root.C_CHAR$LAYOUT.withName("scale"),
                            Constants$root.C_CHAR$LAYOUT.withName("sign")
                        ).withName("$anon$0"),
                        Constants$root.C_SHORT$LAYOUT.withName("signscale")
                    ).withName("$anon$0"),
                    Constants$root.C_LONG$LAYOUT.withName("Hi32"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            Constants$root.C_LONG$LAYOUT.withName("Lo32"),
                            Constants$root.C_LONG$LAYOUT.withName("Mid32")
                        ).withName("$anon$0"),
                        Constants$root.C_LONG_LONG$LAYOUT.withName("Lo64")
                    ).withName("$anon$1")
                ).withName("decVal")
            ).withName("$anon$0")
        ).withName("tagVARIANT"),
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor insertBefore_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        MemoryLayout.structLayout(
            MemoryLayout.unionLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_SHORT$LAYOUT.withName("vt"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved1"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved2"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved3"),
                    MemoryLayout.unionLayout(
                        Constants$root.C_LONG_LONG$LAYOUT.withName("llVal"),
                        Constants$root.C_LONG$LAYOUT.withName("lVal"),
                        Constants$root.C_CHAR$LAYOUT.withName("bVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("iVal"),
                        Constants$root.C_FLOAT$LAYOUT.withName("fltVal"),
                        Constants$root.C_DOUBLE$LAYOUT.withName("dblVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("boolVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("__OBSOLETE__VARIANT_BOOL"),
                        Constants$root.C_LONG$LAYOUT.withName("scode"),
                        MemoryLayout.unionLayout(
                            MemoryLayout.structLayout(
                                Constants$root.C_LONG$LAYOUT.withName("Lo"),
                                Constants$root.C_LONG$LAYOUT.withName("Hi")
                            ).withName("$anon$0"),
                            Constants$root.C_LONG_LONG$LAYOUT.withName("int64")
                        ).withName("cyVal"),
                        Constants$root.C_DOUBLE$LAYOUT.withName("date"),
                        Constants$root.C_POINTER$LAYOUT.withName("bstrVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("punkVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdispVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("parray"),
                        Constants$root.C_POINTER$LAYOUT.withName("pbVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("piVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("plVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pllVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pfltVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdblVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pboolVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("__OBSOLETE__VARIANT_PBOOL"),
                        Constants$root.C_POINTER$LAYOUT.withName("pscode"),
                        Constants$root.C_POINTER$LAYOUT.withName("pcyVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdate"),
                        Constants$root.C_POINTER$LAYOUT.withName("pbstrVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("ppunkVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("ppdispVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pparray"),
                        Constants$root.C_POINTER$LAYOUT.withName("pvarVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("byref"),
                        Constants$root.C_CHAR$LAYOUT.withName("cVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("uiVal"),
                        Constants$root.C_LONG$LAYOUT.withName("ulVal"),
                        Constants$root.C_LONG_LONG$LAYOUT.withName("ullVal"),
                        Constants$root.C_LONG$LAYOUT.withName("intVal"),
                        Constants$root.C_LONG$LAYOUT.withName("uintVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdecVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pcVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("puiVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pulVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pullVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pintVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("puintVal"),
                        MemoryLayout.structLayout(
                            Constants$root.C_POINTER$LAYOUT.withName("pvRecord"),
                            Constants$root.C_POINTER$LAYOUT.withName("pRecInfo")
                        ).withName("$anon$0")
                    ).withName("$anon$0")
                ).withName("$anon$0"),
                MemoryLayout.structLayout(
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            Constants$root.C_CHAR$LAYOUT.withName("scale"),
                            Constants$root.C_CHAR$LAYOUT.withName("sign")
                        ).withName("$anon$0"),
                        Constants$root.C_SHORT$LAYOUT.withName("signscale")
                    ).withName("$anon$0"),
                    Constants$root.C_LONG$LAYOUT.withName("Hi32"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            Constants$root.C_LONG$LAYOUT.withName("Lo32"),
                            Constants$root.C_LONG$LAYOUT.withName("Mid32")
                        ).withName("$anon$0"),
                        Constants$root.C_LONG_LONG$LAYOUT.withName("Lo64")
                    ).withName("$anon$1")
                ).withName("decVal")
            ).withName("$anon$0")
        ).withName("tagVARIANT"),
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle insertBefore_UP$MH = RuntimeHelper.upcallHandle(insertBefore.class, "apply", IXMLDOMCDATASectionVtbl.insertBefore_UP$FUNC);
    static final FunctionDescriptor insertBefore_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        MemoryLayout.structLayout(
            MemoryLayout.unionLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_SHORT$LAYOUT.withName("vt"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved1"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved2"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved3"),
                    MemoryLayout.unionLayout(
                        Constants$root.C_LONG_LONG$LAYOUT.withName("llVal"),
                        Constants$root.C_LONG$LAYOUT.withName("lVal"),
                        Constants$root.C_CHAR$LAYOUT.withName("bVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("iVal"),
                        Constants$root.C_FLOAT$LAYOUT.withName("fltVal"),
                        Constants$root.C_DOUBLE$LAYOUT.withName("dblVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("boolVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("__OBSOLETE__VARIANT_BOOL"),
                        Constants$root.C_LONG$LAYOUT.withName("scode"),
                        MemoryLayout.unionLayout(
                            MemoryLayout.structLayout(
                                Constants$root.C_LONG$LAYOUT.withName("Lo"),
                                Constants$root.C_LONG$LAYOUT.withName("Hi")
                            ).withName("$anon$0"),
                            Constants$root.C_LONG_LONG$LAYOUT.withName("int64")
                        ).withName("cyVal"),
                        Constants$root.C_DOUBLE$LAYOUT.withName("date"),
                        Constants$root.C_POINTER$LAYOUT.withName("bstrVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("punkVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdispVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("parray"),
                        Constants$root.C_POINTER$LAYOUT.withName("pbVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("piVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("plVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pllVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pfltVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdblVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pboolVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("__OBSOLETE__VARIANT_PBOOL"),
                        Constants$root.C_POINTER$LAYOUT.withName("pscode"),
                        Constants$root.C_POINTER$LAYOUT.withName("pcyVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdate"),
                        Constants$root.C_POINTER$LAYOUT.withName("pbstrVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("ppunkVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("ppdispVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pparray"),
                        Constants$root.C_POINTER$LAYOUT.withName("pvarVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("byref"),
                        Constants$root.C_CHAR$LAYOUT.withName("cVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("uiVal"),
                        Constants$root.C_LONG$LAYOUT.withName("ulVal"),
                        Constants$root.C_LONG_LONG$LAYOUT.withName("ullVal"),
                        Constants$root.C_LONG$LAYOUT.withName("intVal"),
                        Constants$root.C_LONG$LAYOUT.withName("uintVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdecVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pcVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("puiVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pulVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pullVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pintVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("puintVal"),
                        MemoryLayout.structLayout(
                            Constants$root.C_POINTER$LAYOUT.withName("pvRecord"),
                            Constants$root.C_POINTER$LAYOUT.withName("pRecInfo")
                        ).withName("$anon$0")
                    ).withName("$anon$0")
                ).withName("$anon$0"),
                MemoryLayout.structLayout(
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            Constants$root.C_CHAR$LAYOUT.withName("scale"),
                            Constants$root.C_CHAR$LAYOUT.withName("sign")
                        ).withName("$anon$0"),
                        Constants$root.C_SHORT$LAYOUT.withName("signscale")
                    ).withName("$anon$0"),
                    Constants$root.C_LONG$LAYOUT.withName("Hi32"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            Constants$root.C_LONG$LAYOUT.withName("Lo32"),
                            Constants$root.C_LONG$LAYOUT.withName("Mid32")
                        ).withName("$anon$0"),
                        Constants$root.C_LONG_LONG$LAYOUT.withName("Lo64")
                    ).withName("$anon$1")
                ).withName("decVal")
            ).withName("$anon$0")
        ).withName("tagVARIANT"),
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle insertBefore_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDOMCDATASectionVtbl.insertBefore_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*insertBefore)(IXMLDOMCDATASection*,IXMLDOMNode*,VARIANT,IXMLDOMNode**);
     * }
     */
    public interface insertBefore {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(insertBefore fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDOMCDATASectionVtbl.insertBefore_UP$MH, fi, IXMLDOMCDATASectionVtbl.insertBefore$FUNC, scope);
        }
        static insertBefore ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)IXMLDOMCDATASectionVtbl.insertBefore_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle insertBefore$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("insertBefore"));
    public static VarHandle insertBefore$VH() {
        return IXMLDOMCDATASectionVtbl.insertBefore$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*insertBefore)(IXMLDOMCDATASection*,IXMLDOMNode*,VARIANT,IXMLDOMNode**);
     * }
     */
    public static MemorySegment insertBefore$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.insertBefore$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*insertBefore)(IXMLDOMCDATASection*,IXMLDOMNode*,VARIANT,IXMLDOMNode**);
     * }
     */
    public static void insertBefore$set(MemorySegment seg, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.insertBefore$VH.set(seg, x);
    }
    public static MemorySegment insertBefore$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.insertBefore$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void insertBefore$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.insertBefore$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static insertBefore insertBefore(MemorySegment segment, SegmentScope scope) {
        return insertBefore.ofAddress(insertBefore$get(segment), scope);
    }
    static final FunctionDescriptor replaceChild$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor replaceChild_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle replaceChild_UP$MH = RuntimeHelper.upcallHandle(replaceChild.class, "apply", IXMLDOMCDATASectionVtbl.replaceChild_UP$FUNC);
    static final FunctionDescriptor replaceChild_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle replaceChild_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDOMCDATASectionVtbl.replaceChild_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*replaceChild)(IXMLDOMCDATASection*,IXMLDOMNode*,IXMLDOMNode*,IXMLDOMNode**);
     * }
     */
    public interface replaceChild {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(replaceChild fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDOMCDATASectionVtbl.replaceChild_UP$MH, fi, IXMLDOMCDATASectionVtbl.replaceChild$FUNC, scope);
        }
        static replaceChild ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)IXMLDOMCDATASectionVtbl.replaceChild_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle replaceChild$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("replaceChild"));
    public static VarHandle replaceChild$VH() {
        return IXMLDOMCDATASectionVtbl.replaceChild$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*replaceChild)(IXMLDOMCDATASection*,IXMLDOMNode*,IXMLDOMNode*,IXMLDOMNode**);
     * }
     */
    public static MemorySegment replaceChild$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.replaceChild$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*replaceChild)(IXMLDOMCDATASection*,IXMLDOMNode*,IXMLDOMNode*,IXMLDOMNode**);
     * }
     */
    public static void replaceChild$set(MemorySegment seg, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.replaceChild$VH.set(seg, x);
    }
    public static MemorySegment replaceChild$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.replaceChild$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void replaceChild$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.replaceChild$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static replaceChild replaceChild(MemorySegment segment, SegmentScope scope) {
        return replaceChild.ofAddress(replaceChild$get(segment), scope);
    }
    static final FunctionDescriptor removeChild$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor removeChild_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle removeChild_UP$MH = RuntimeHelper.upcallHandle(removeChild.class, "apply", IXMLDOMCDATASectionVtbl.removeChild_UP$FUNC);
    static final FunctionDescriptor removeChild_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle removeChild_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDOMCDATASectionVtbl.removeChild_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*removeChild)(IXMLDOMCDATASection*,IXMLDOMNode*,IXMLDOMNode**);
     * }
     */
    public interface removeChild {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(removeChild fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDOMCDATASectionVtbl.removeChild_UP$MH, fi, IXMLDOMCDATASectionVtbl.removeChild$FUNC, scope);
        }
        static removeChild ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IXMLDOMCDATASectionVtbl.removeChild_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle removeChild$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("removeChild"));
    public static VarHandle removeChild$VH() {
        return IXMLDOMCDATASectionVtbl.removeChild$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*removeChild)(IXMLDOMCDATASection*,IXMLDOMNode*,IXMLDOMNode**);
     * }
     */
    public static MemorySegment removeChild$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.removeChild$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*removeChild)(IXMLDOMCDATASection*,IXMLDOMNode*,IXMLDOMNode**);
     * }
     */
    public static void removeChild$set(MemorySegment seg, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.removeChild$VH.set(seg, x);
    }
    public static MemorySegment removeChild$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.removeChild$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void removeChild$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.removeChild$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static removeChild removeChild(MemorySegment segment, SegmentScope scope) {
        return removeChild.ofAddress(removeChild$get(segment), scope);
    }
    static final FunctionDescriptor appendChild$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor appendChild_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle appendChild_UP$MH = RuntimeHelper.upcallHandle(appendChild.class, "apply", IXMLDOMCDATASectionVtbl.appendChild_UP$FUNC);
    static final FunctionDescriptor appendChild_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle appendChild_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDOMCDATASectionVtbl.appendChild_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*appendChild)(IXMLDOMCDATASection*,IXMLDOMNode*,IXMLDOMNode**);
     * }
     */
    public interface appendChild {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(appendChild fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDOMCDATASectionVtbl.appendChild_UP$MH, fi, IXMLDOMCDATASectionVtbl.appendChild$FUNC, scope);
        }
        static appendChild ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IXMLDOMCDATASectionVtbl.appendChild_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle appendChild$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("appendChild"));
    public static VarHandle appendChild$VH() {
        return IXMLDOMCDATASectionVtbl.appendChild$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*appendChild)(IXMLDOMCDATASection*,IXMLDOMNode*,IXMLDOMNode**);
     * }
     */
    public static MemorySegment appendChild$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.appendChild$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*appendChild)(IXMLDOMCDATASection*,IXMLDOMNode*,IXMLDOMNode**);
     * }
     */
    public static void appendChild$set(MemorySegment seg, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.appendChild$VH.set(seg, x);
    }
    public static MemorySegment appendChild$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.appendChild$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void appendChild$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.appendChild$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static appendChild appendChild(MemorySegment segment, SegmentScope scope) {
        return appendChild.ofAddress(appendChild$get(segment), scope);
    }
    static final FunctionDescriptor hasChildNodes$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor hasChildNodes_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle hasChildNodes_UP$MH = RuntimeHelper.upcallHandle(hasChildNodes.class, "apply", IXMLDOMCDATASectionVtbl.hasChildNodes_UP$FUNC);
    static final FunctionDescriptor hasChildNodes_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle hasChildNodes_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDOMCDATASectionVtbl.hasChildNodes_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*hasChildNodes)(IXMLDOMCDATASection*,VARIANT_BOOL*);
     * }
     */
    public interface hasChildNodes {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(hasChildNodes fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDOMCDATASectionVtbl.hasChildNodes_UP$MH, fi, IXMLDOMCDATASectionVtbl.hasChildNodes$FUNC, scope);
        }
        static hasChildNodes ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IXMLDOMCDATASectionVtbl.hasChildNodes_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle hasChildNodes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hasChildNodes"));
    public static VarHandle hasChildNodes$VH() {
        return IXMLDOMCDATASectionVtbl.hasChildNodes$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*hasChildNodes)(IXMLDOMCDATASection*,VARIANT_BOOL*);
     * }
     */
    public static MemorySegment hasChildNodes$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.hasChildNodes$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*hasChildNodes)(IXMLDOMCDATASection*,VARIANT_BOOL*);
     * }
     */
    public static void hasChildNodes$set(MemorySegment seg, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.hasChildNodes$VH.set(seg, x);
    }
    public static MemorySegment hasChildNodes$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.hasChildNodes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hasChildNodes$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.hasChildNodes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static hasChildNodes hasChildNodes(MemorySegment segment, SegmentScope scope) {
        return hasChildNodes.ofAddress(hasChildNodes$get(segment), scope);
    }
    static final FunctionDescriptor get_ownerDocument$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_ownerDocument_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_ownerDocument_UP$MH = RuntimeHelper.upcallHandle(get_ownerDocument.class, "apply", IXMLDOMCDATASectionVtbl.get_ownerDocument_UP$FUNC);
    static final FunctionDescriptor get_ownerDocument_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_ownerDocument_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDOMCDATASectionVtbl.get_ownerDocument_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*get_ownerDocument)(IXMLDOMCDATASection*,IXMLDOMDocument**);
     * }
     */
    public interface get_ownerDocument {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_ownerDocument fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDOMCDATASectionVtbl.get_ownerDocument_UP$MH, fi, IXMLDOMCDATASectionVtbl.get_ownerDocument$FUNC, scope);
        }
        static get_ownerDocument ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IXMLDOMCDATASectionVtbl.get_ownerDocument_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_ownerDocument$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_ownerDocument"));
    public static VarHandle get_ownerDocument$VH() {
        return IXMLDOMCDATASectionVtbl.get_ownerDocument$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_ownerDocument)(IXMLDOMCDATASection*,IXMLDOMDocument**);
     * }
     */
    public static MemorySegment get_ownerDocument$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.get_ownerDocument$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_ownerDocument)(IXMLDOMCDATASection*,IXMLDOMDocument**);
     * }
     */
    public static void get_ownerDocument$set(MemorySegment seg, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.get_ownerDocument$VH.set(seg, x);
    }
    public static MemorySegment get_ownerDocument$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.get_ownerDocument$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_ownerDocument$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.get_ownerDocument$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_ownerDocument get_ownerDocument(MemorySegment segment, SegmentScope scope) {
        return get_ownerDocument.ofAddress(get_ownerDocument$get(segment), scope);
    }
    static final FunctionDescriptor cloneNode$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_SHORT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor cloneNode_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_SHORT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle cloneNode_UP$MH = RuntimeHelper.upcallHandle(cloneNode.class, "apply", IXMLDOMCDATASectionVtbl.cloneNode_UP$FUNC);
    static final FunctionDescriptor cloneNode_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_SHORT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle cloneNode_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDOMCDATASectionVtbl.cloneNode_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*cloneNode)(IXMLDOMCDATASection*,VARIANT_BOOL,IXMLDOMNode**);
     * }
     */
    public interface cloneNode {

        int apply(java.lang.foreign.MemorySegment _x0, short _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(cloneNode fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDOMCDATASectionVtbl.cloneNode_UP$MH, fi, IXMLDOMCDATASectionVtbl.cloneNode$FUNC, scope);
        }
        static cloneNode ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, short __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IXMLDOMCDATASectionVtbl.cloneNode_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle cloneNode$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cloneNode"));
    public static VarHandle cloneNode$VH() {
        return IXMLDOMCDATASectionVtbl.cloneNode$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*cloneNode)(IXMLDOMCDATASection*,VARIANT_BOOL,IXMLDOMNode**);
     * }
     */
    public static MemorySegment cloneNode$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.cloneNode$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*cloneNode)(IXMLDOMCDATASection*,VARIANT_BOOL,IXMLDOMNode**);
     * }
     */
    public static void cloneNode$set(MemorySegment seg, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.cloneNode$VH.set(seg, x);
    }
    public static MemorySegment cloneNode$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.cloneNode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cloneNode$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.cloneNode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static cloneNode cloneNode(MemorySegment segment, SegmentScope scope) {
        return cloneNode.ofAddress(cloneNode$get(segment), scope);
    }
    static final FunctionDescriptor get_nodeTypeString$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_nodeTypeString_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_nodeTypeString_UP$MH = RuntimeHelper.upcallHandle(get_nodeTypeString.class, "apply", IXMLDOMCDATASectionVtbl.get_nodeTypeString_UP$FUNC);
    static final FunctionDescriptor get_nodeTypeString_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_nodeTypeString_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDOMCDATASectionVtbl.get_nodeTypeString_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*get_nodeTypeString)(IXMLDOMCDATASection*,BSTR*);
     * }
     */
    public interface get_nodeTypeString {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_nodeTypeString fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDOMCDATASectionVtbl.get_nodeTypeString_UP$MH, fi, IXMLDOMCDATASectionVtbl.get_nodeTypeString$FUNC, scope);
        }
        static get_nodeTypeString ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IXMLDOMCDATASectionVtbl.get_nodeTypeString_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_nodeTypeString$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_nodeTypeString"));
    public static VarHandle get_nodeTypeString$VH() {
        return IXMLDOMCDATASectionVtbl.get_nodeTypeString$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_nodeTypeString)(IXMLDOMCDATASection*,BSTR*);
     * }
     */
    public static MemorySegment get_nodeTypeString$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.get_nodeTypeString$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_nodeTypeString)(IXMLDOMCDATASection*,BSTR*);
     * }
     */
    public static void get_nodeTypeString$set(MemorySegment seg, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.get_nodeTypeString$VH.set(seg, x);
    }
    public static MemorySegment get_nodeTypeString$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.get_nodeTypeString$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_nodeTypeString$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.get_nodeTypeString$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_nodeTypeString get_nodeTypeString(MemorySegment segment, SegmentScope scope) {
        return get_nodeTypeString.ofAddress(get_nodeTypeString$get(segment), scope);
    }
    static final FunctionDescriptor get_text$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_text_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_text_UP$MH = RuntimeHelper.upcallHandle(get_text.class, "apply", IXMLDOMCDATASectionVtbl.get_text_UP$FUNC);
    static final FunctionDescriptor get_text_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_text_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDOMCDATASectionVtbl.get_text_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*get_text)(IXMLDOMCDATASection*,BSTR*);
     * }
     */
    public interface get_text {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_text fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDOMCDATASectionVtbl.get_text_UP$MH, fi, IXMLDOMCDATASectionVtbl.get_text$FUNC, scope);
        }
        static get_text ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IXMLDOMCDATASectionVtbl.get_text_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_text$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_text"));
    public static VarHandle get_text$VH() {
        return IXMLDOMCDATASectionVtbl.get_text$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_text)(IXMLDOMCDATASection*,BSTR*);
     * }
     */
    public static MemorySegment get_text$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.get_text$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_text)(IXMLDOMCDATASection*,BSTR*);
     * }
     */
    public static void get_text$set(MemorySegment seg, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.get_text$VH.set(seg, x);
    }
    public static MemorySegment get_text$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.get_text$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_text$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.get_text$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_text get_text(MemorySegment segment, SegmentScope scope) {
        return get_text.ofAddress(get_text$get(segment), scope);
    }
    static final FunctionDescriptor put_text$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor put_text_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle put_text_UP$MH = RuntimeHelper.upcallHandle(put_text.class, "apply", IXMLDOMCDATASectionVtbl.put_text_UP$FUNC);
    static final FunctionDescriptor put_text_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle put_text_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDOMCDATASectionVtbl.put_text_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*put_text)(IXMLDOMCDATASection*,BSTR);
     * }
     */
    public interface put_text {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(put_text fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDOMCDATASectionVtbl.put_text_UP$MH, fi, IXMLDOMCDATASectionVtbl.put_text$FUNC, scope);
        }
        static put_text ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IXMLDOMCDATASectionVtbl.put_text_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle put_text$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("put_text"));
    public static VarHandle put_text$VH() {
        return IXMLDOMCDATASectionVtbl.put_text$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*put_text)(IXMLDOMCDATASection*,BSTR);
     * }
     */
    public static MemorySegment put_text$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.put_text$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*put_text)(IXMLDOMCDATASection*,BSTR);
     * }
     */
    public static void put_text$set(MemorySegment seg, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.put_text$VH.set(seg, x);
    }
    public static MemorySegment put_text$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.put_text$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void put_text$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.put_text$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static put_text put_text(MemorySegment segment, SegmentScope scope) {
        return put_text.ofAddress(put_text$get(segment), scope);
    }
    static final FunctionDescriptor get_specified$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_specified_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_specified_UP$MH = RuntimeHelper.upcallHandle(get_specified.class, "apply", IXMLDOMCDATASectionVtbl.get_specified_UP$FUNC);
    static final FunctionDescriptor get_specified_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_specified_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDOMCDATASectionVtbl.get_specified_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*get_specified)(IXMLDOMCDATASection*,VARIANT_BOOL*);
     * }
     */
    public interface get_specified {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_specified fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDOMCDATASectionVtbl.get_specified_UP$MH, fi, IXMLDOMCDATASectionVtbl.get_specified$FUNC, scope);
        }
        static get_specified ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IXMLDOMCDATASectionVtbl.get_specified_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_specified$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_specified"));
    public static VarHandle get_specified$VH() {
        return IXMLDOMCDATASectionVtbl.get_specified$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_specified)(IXMLDOMCDATASection*,VARIANT_BOOL*);
     * }
     */
    public static MemorySegment get_specified$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.get_specified$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_specified)(IXMLDOMCDATASection*,VARIANT_BOOL*);
     * }
     */
    public static void get_specified$set(MemorySegment seg, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.get_specified$VH.set(seg, x);
    }
    public static MemorySegment get_specified$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.get_specified$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_specified$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.get_specified$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_specified get_specified(MemorySegment segment, SegmentScope scope) {
        return get_specified.ofAddress(get_specified$get(segment), scope);
    }
    static final FunctionDescriptor get_definition$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_definition_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_definition_UP$MH = RuntimeHelper.upcallHandle(get_definition.class, "apply", IXMLDOMCDATASectionVtbl.get_definition_UP$FUNC);
    static final FunctionDescriptor get_definition_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_definition_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDOMCDATASectionVtbl.get_definition_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*get_definition)(IXMLDOMCDATASection*,IXMLDOMNode**);
     * }
     */
    public interface get_definition {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_definition fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDOMCDATASectionVtbl.get_definition_UP$MH, fi, IXMLDOMCDATASectionVtbl.get_definition$FUNC, scope);
        }
        static get_definition ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IXMLDOMCDATASectionVtbl.get_definition_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_definition$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_definition"));
    public static VarHandle get_definition$VH() {
        return IXMLDOMCDATASectionVtbl.get_definition$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_definition)(IXMLDOMCDATASection*,IXMLDOMNode**);
     * }
     */
    public static MemorySegment get_definition$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.get_definition$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_definition)(IXMLDOMCDATASection*,IXMLDOMNode**);
     * }
     */
    public static void get_definition$set(MemorySegment seg, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.get_definition$VH.set(seg, x);
    }
    public static MemorySegment get_definition$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.get_definition$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_definition$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.get_definition$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_definition get_definition(MemorySegment segment, SegmentScope scope) {
        return get_definition.ofAddress(get_definition$get(segment), scope);
    }
    static final FunctionDescriptor get_nodeTypedValue$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_nodeTypedValue_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_nodeTypedValue_UP$MH = RuntimeHelper.upcallHandle(get_nodeTypedValue.class, "apply", IXMLDOMCDATASectionVtbl.get_nodeTypedValue_UP$FUNC);
    static final FunctionDescriptor get_nodeTypedValue_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_nodeTypedValue_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDOMCDATASectionVtbl.get_nodeTypedValue_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*get_nodeTypedValue)(IXMLDOMCDATASection*,VARIANT*);
     * }
     */
    public interface get_nodeTypedValue {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_nodeTypedValue fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDOMCDATASectionVtbl.get_nodeTypedValue_UP$MH, fi, IXMLDOMCDATASectionVtbl.get_nodeTypedValue$FUNC, scope);
        }
        static get_nodeTypedValue ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IXMLDOMCDATASectionVtbl.get_nodeTypedValue_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_nodeTypedValue$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_nodeTypedValue"));
    public static VarHandle get_nodeTypedValue$VH() {
        return IXMLDOMCDATASectionVtbl.get_nodeTypedValue$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_nodeTypedValue)(IXMLDOMCDATASection*,VARIANT*);
     * }
     */
    public static MemorySegment get_nodeTypedValue$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.get_nodeTypedValue$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_nodeTypedValue)(IXMLDOMCDATASection*,VARIANT*);
     * }
     */
    public static void get_nodeTypedValue$set(MemorySegment seg, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.get_nodeTypedValue$VH.set(seg, x);
    }
    public static MemorySegment get_nodeTypedValue$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.get_nodeTypedValue$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_nodeTypedValue$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.get_nodeTypedValue$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_nodeTypedValue get_nodeTypedValue(MemorySegment segment, SegmentScope scope) {
        return get_nodeTypedValue.ofAddress(get_nodeTypedValue$get(segment), scope);
    }
    static final FunctionDescriptor put_nodeTypedValue$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        MemoryLayout.structLayout(
            MemoryLayout.unionLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_SHORT$LAYOUT.withName("vt"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved1"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved2"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved3"),
                    MemoryLayout.unionLayout(
                        Constants$root.C_LONG_LONG$LAYOUT.withName("llVal"),
                        Constants$root.C_LONG$LAYOUT.withName("lVal"),
                        Constants$root.C_CHAR$LAYOUT.withName("bVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("iVal"),
                        Constants$root.C_FLOAT$LAYOUT.withName("fltVal"),
                        Constants$root.C_DOUBLE$LAYOUT.withName("dblVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("boolVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("__OBSOLETE__VARIANT_BOOL"),
                        Constants$root.C_LONG$LAYOUT.withName("scode"),
                        MemoryLayout.unionLayout(
                            MemoryLayout.structLayout(
                                Constants$root.C_LONG$LAYOUT.withName("Lo"),
                                Constants$root.C_LONG$LAYOUT.withName("Hi")
                            ).withName("$anon$0"),
                            Constants$root.C_LONG_LONG$LAYOUT.withName("int64")
                        ).withName("cyVal"),
                        Constants$root.C_DOUBLE$LAYOUT.withName("date"),
                        Constants$root.C_POINTER$LAYOUT.withName("bstrVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("punkVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdispVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("parray"),
                        Constants$root.C_POINTER$LAYOUT.withName("pbVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("piVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("plVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pllVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pfltVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdblVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pboolVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("__OBSOLETE__VARIANT_PBOOL"),
                        Constants$root.C_POINTER$LAYOUT.withName("pscode"),
                        Constants$root.C_POINTER$LAYOUT.withName("pcyVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdate"),
                        Constants$root.C_POINTER$LAYOUT.withName("pbstrVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("ppunkVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("ppdispVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pparray"),
                        Constants$root.C_POINTER$LAYOUT.withName("pvarVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("byref"),
                        Constants$root.C_CHAR$LAYOUT.withName("cVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("uiVal"),
                        Constants$root.C_LONG$LAYOUT.withName("ulVal"),
                        Constants$root.C_LONG_LONG$LAYOUT.withName("ullVal"),
                        Constants$root.C_LONG$LAYOUT.withName("intVal"),
                        Constants$root.C_LONG$LAYOUT.withName("uintVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdecVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pcVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("puiVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pulVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pullVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pintVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("puintVal"),
                        MemoryLayout.structLayout(
                            Constants$root.C_POINTER$LAYOUT.withName("pvRecord"),
                            Constants$root.C_POINTER$LAYOUT.withName("pRecInfo")
                        ).withName("$anon$0")
                    ).withName("$anon$0")
                ).withName("$anon$0"),
                MemoryLayout.structLayout(
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            Constants$root.C_CHAR$LAYOUT.withName("scale"),
                            Constants$root.C_CHAR$LAYOUT.withName("sign")
                        ).withName("$anon$0"),
                        Constants$root.C_SHORT$LAYOUT.withName("signscale")
                    ).withName("$anon$0"),
                    Constants$root.C_LONG$LAYOUT.withName("Hi32"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            Constants$root.C_LONG$LAYOUT.withName("Lo32"),
                            Constants$root.C_LONG$LAYOUT.withName("Mid32")
                        ).withName("$anon$0"),
                        Constants$root.C_LONG_LONG$LAYOUT.withName("Lo64")
                    ).withName("$anon$1")
                ).withName("decVal")
            ).withName("$anon$0")
        ).withName("tagVARIANT")
    );
    static final FunctionDescriptor put_nodeTypedValue_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        MemoryLayout.structLayout(
            MemoryLayout.unionLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_SHORT$LAYOUT.withName("vt"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved1"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved2"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved3"),
                    MemoryLayout.unionLayout(
                        Constants$root.C_LONG_LONG$LAYOUT.withName("llVal"),
                        Constants$root.C_LONG$LAYOUT.withName("lVal"),
                        Constants$root.C_CHAR$LAYOUT.withName("bVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("iVal"),
                        Constants$root.C_FLOAT$LAYOUT.withName("fltVal"),
                        Constants$root.C_DOUBLE$LAYOUT.withName("dblVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("boolVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("__OBSOLETE__VARIANT_BOOL"),
                        Constants$root.C_LONG$LAYOUT.withName("scode"),
                        MemoryLayout.unionLayout(
                            MemoryLayout.structLayout(
                                Constants$root.C_LONG$LAYOUT.withName("Lo"),
                                Constants$root.C_LONG$LAYOUT.withName("Hi")
                            ).withName("$anon$0"),
                            Constants$root.C_LONG_LONG$LAYOUT.withName("int64")
                        ).withName("cyVal"),
                        Constants$root.C_DOUBLE$LAYOUT.withName("date"),
                        Constants$root.C_POINTER$LAYOUT.withName("bstrVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("punkVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdispVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("parray"),
                        Constants$root.C_POINTER$LAYOUT.withName("pbVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("piVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("plVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pllVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pfltVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdblVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pboolVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("__OBSOLETE__VARIANT_PBOOL"),
                        Constants$root.C_POINTER$LAYOUT.withName("pscode"),
                        Constants$root.C_POINTER$LAYOUT.withName("pcyVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdate"),
                        Constants$root.C_POINTER$LAYOUT.withName("pbstrVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("ppunkVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("ppdispVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pparray"),
                        Constants$root.C_POINTER$LAYOUT.withName("pvarVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("byref"),
                        Constants$root.C_CHAR$LAYOUT.withName("cVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("uiVal"),
                        Constants$root.C_LONG$LAYOUT.withName("ulVal"),
                        Constants$root.C_LONG_LONG$LAYOUT.withName("ullVal"),
                        Constants$root.C_LONG$LAYOUT.withName("intVal"),
                        Constants$root.C_LONG$LAYOUT.withName("uintVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdecVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pcVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("puiVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pulVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pullVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pintVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("puintVal"),
                        MemoryLayout.structLayout(
                            Constants$root.C_POINTER$LAYOUT.withName("pvRecord"),
                            Constants$root.C_POINTER$LAYOUT.withName("pRecInfo")
                        ).withName("$anon$0")
                    ).withName("$anon$0")
                ).withName("$anon$0"),
                MemoryLayout.structLayout(
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            Constants$root.C_CHAR$LAYOUT.withName("scale"),
                            Constants$root.C_CHAR$LAYOUT.withName("sign")
                        ).withName("$anon$0"),
                        Constants$root.C_SHORT$LAYOUT.withName("signscale")
                    ).withName("$anon$0"),
                    Constants$root.C_LONG$LAYOUT.withName("Hi32"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            Constants$root.C_LONG$LAYOUT.withName("Lo32"),
                            Constants$root.C_LONG$LAYOUT.withName("Mid32")
                        ).withName("$anon$0"),
                        Constants$root.C_LONG_LONG$LAYOUT.withName("Lo64")
                    ).withName("$anon$1")
                ).withName("decVal")
            ).withName("$anon$0")
        ).withName("tagVARIANT")
    );
    static final MethodHandle put_nodeTypedValue_UP$MH = RuntimeHelper.upcallHandle(put_nodeTypedValue.class, "apply", IXMLDOMCDATASectionVtbl.put_nodeTypedValue_UP$FUNC);
    static final FunctionDescriptor put_nodeTypedValue_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        MemoryLayout.structLayout(
            MemoryLayout.unionLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_SHORT$LAYOUT.withName("vt"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved1"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved2"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved3"),
                    MemoryLayout.unionLayout(
                        Constants$root.C_LONG_LONG$LAYOUT.withName("llVal"),
                        Constants$root.C_LONG$LAYOUT.withName("lVal"),
                        Constants$root.C_CHAR$LAYOUT.withName("bVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("iVal"),
                        Constants$root.C_FLOAT$LAYOUT.withName("fltVal"),
                        Constants$root.C_DOUBLE$LAYOUT.withName("dblVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("boolVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("__OBSOLETE__VARIANT_BOOL"),
                        Constants$root.C_LONG$LAYOUT.withName("scode"),
                        MemoryLayout.unionLayout(
                            MemoryLayout.structLayout(
                                Constants$root.C_LONG$LAYOUT.withName("Lo"),
                                Constants$root.C_LONG$LAYOUT.withName("Hi")
                            ).withName("$anon$0"),
                            Constants$root.C_LONG_LONG$LAYOUT.withName("int64")
                        ).withName("cyVal"),
                        Constants$root.C_DOUBLE$LAYOUT.withName("date"),
                        Constants$root.C_POINTER$LAYOUT.withName("bstrVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("punkVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdispVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("parray"),
                        Constants$root.C_POINTER$LAYOUT.withName("pbVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("piVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("plVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pllVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pfltVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdblVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pboolVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("__OBSOLETE__VARIANT_PBOOL"),
                        Constants$root.C_POINTER$LAYOUT.withName("pscode"),
                        Constants$root.C_POINTER$LAYOUT.withName("pcyVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdate"),
                        Constants$root.C_POINTER$LAYOUT.withName("pbstrVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("ppunkVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("ppdispVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pparray"),
                        Constants$root.C_POINTER$LAYOUT.withName("pvarVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("byref"),
                        Constants$root.C_CHAR$LAYOUT.withName("cVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("uiVal"),
                        Constants$root.C_LONG$LAYOUT.withName("ulVal"),
                        Constants$root.C_LONG_LONG$LAYOUT.withName("ullVal"),
                        Constants$root.C_LONG$LAYOUT.withName("intVal"),
                        Constants$root.C_LONG$LAYOUT.withName("uintVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdecVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pcVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("puiVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pulVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pullVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pintVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("puintVal"),
                        MemoryLayout.structLayout(
                            Constants$root.C_POINTER$LAYOUT.withName("pvRecord"),
                            Constants$root.C_POINTER$LAYOUT.withName("pRecInfo")
                        ).withName("$anon$0")
                    ).withName("$anon$0")
                ).withName("$anon$0"),
                MemoryLayout.structLayout(
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            Constants$root.C_CHAR$LAYOUT.withName("scale"),
                            Constants$root.C_CHAR$LAYOUT.withName("sign")
                        ).withName("$anon$0"),
                        Constants$root.C_SHORT$LAYOUT.withName("signscale")
                    ).withName("$anon$0"),
                    Constants$root.C_LONG$LAYOUT.withName("Hi32"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            Constants$root.C_LONG$LAYOUT.withName("Lo32"),
                            Constants$root.C_LONG$LAYOUT.withName("Mid32")
                        ).withName("$anon$0"),
                        Constants$root.C_LONG_LONG$LAYOUT.withName("Lo64")
                    ).withName("$anon$1")
                ).withName("decVal")
            ).withName("$anon$0")
        ).withName("tagVARIANT")
    );
    static final MethodHandle put_nodeTypedValue_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDOMCDATASectionVtbl.put_nodeTypedValue_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*put_nodeTypedValue)(IXMLDOMCDATASection*,VARIANT);
     * }
     */
    public interface put_nodeTypedValue {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(put_nodeTypedValue fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDOMCDATASectionVtbl.put_nodeTypedValue_UP$MH, fi, IXMLDOMCDATASectionVtbl.put_nodeTypedValue$FUNC, scope);
        }
        static put_nodeTypedValue ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IXMLDOMCDATASectionVtbl.put_nodeTypedValue_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle put_nodeTypedValue$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("put_nodeTypedValue"));
    public static VarHandle put_nodeTypedValue$VH() {
        return IXMLDOMCDATASectionVtbl.put_nodeTypedValue$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*put_nodeTypedValue)(IXMLDOMCDATASection*,VARIANT);
     * }
     */
    public static MemorySegment put_nodeTypedValue$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.put_nodeTypedValue$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*put_nodeTypedValue)(IXMLDOMCDATASection*,VARIANT);
     * }
     */
    public static void put_nodeTypedValue$set(MemorySegment seg, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.put_nodeTypedValue$VH.set(seg, x);
    }
    public static MemorySegment put_nodeTypedValue$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.put_nodeTypedValue$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void put_nodeTypedValue$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.put_nodeTypedValue$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static put_nodeTypedValue put_nodeTypedValue(MemorySegment segment, SegmentScope scope) {
        return put_nodeTypedValue.ofAddress(put_nodeTypedValue$get(segment), scope);
    }
    static final FunctionDescriptor get_dataType$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_dataType_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_dataType_UP$MH = RuntimeHelper.upcallHandle(get_dataType.class, "apply", IXMLDOMCDATASectionVtbl.get_dataType_UP$FUNC);
    static final FunctionDescriptor get_dataType_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_dataType_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDOMCDATASectionVtbl.get_dataType_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*get_dataType)(IXMLDOMCDATASection*,VARIANT*);
     * }
     */
    public interface get_dataType {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_dataType fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDOMCDATASectionVtbl.get_dataType_UP$MH, fi, IXMLDOMCDATASectionVtbl.get_dataType$FUNC, scope);
        }
        static get_dataType ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IXMLDOMCDATASectionVtbl.get_dataType_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_dataType$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_dataType"));
    public static VarHandle get_dataType$VH() {
        return IXMLDOMCDATASectionVtbl.get_dataType$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_dataType)(IXMLDOMCDATASection*,VARIANT*);
     * }
     */
    public static MemorySegment get_dataType$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.get_dataType$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_dataType)(IXMLDOMCDATASection*,VARIANT*);
     * }
     */
    public static void get_dataType$set(MemorySegment seg, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.get_dataType$VH.set(seg, x);
    }
    public static MemorySegment get_dataType$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.get_dataType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_dataType$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.get_dataType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_dataType get_dataType(MemorySegment segment, SegmentScope scope) {
        return get_dataType.ofAddress(get_dataType$get(segment), scope);
    }
    static final FunctionDescriptor put_dataType$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor put_dataType_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle put_dataType_UP$MH = RuntimeHelper.upcallHandle(put_dataType.class, "apply", IXMLDOMCDATASectionVtbl.put_dataType_UP$FUNC);
    static final FunctionDescriptor put_dataType_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle put_dataType_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDOMCDATASectionVtbl.put_dataType_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*put_dataType)(IXMLDOMCDATASection*,BSTR);
     * }
     */
    public interface put_dataType {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(put_dataType fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDOMCDATASectionVtbl.put_dataType_UP$MH, fi, IXMLDOMCDATASectionVtbl.put_dataType$FUNC, scope);
        }
        static put_dataType ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IXMLDOMCDATASectionVtbl.put_dataType_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle put_dataType$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("put_dataType"));
    public static VarHandle put_dataType$VH() {
        return IXMLDOMCDATASectionVtbl.put_dataType$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*put_dataType)(IXMLDOMCDATASection*,BSTR);
     * }
     */
    public static MemorySegment put_dataType$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.put_dataType$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*put_dataType)(IXMLDOMCDATASection*,BSTR);
     * }
     */
    public static void put_dataType$set(MemorySegment seg, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.put_dataType$VH.set(seg, x);
    }
    public static MemorySegment put_dataType$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.put_dataType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void put_dataType$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.put_dataType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static put_dataType put_dataType(MemorySegment segment, SegmentScope scope) {
        return put_dataType.ofAddress(put_dataType$get(segment), scope);
    }
    static final FunctionDescriptor get_xml$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_xml_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_xml_UP$MH = RuntimeHelper.upcallHandle(get_xml.class, "apply", IXMLDOMCDATASectionVtbl.get_xml_UP$FUNC);
    static final FunctionDescriptor get_xml_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_xml_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDOMCDATASectionVtbl.get_xml_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*get_xml)(IXMLDOMCDATASection*,BSTR*);
     * }
     */
    public interface get_xml {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_xml fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDOMCDATASectionVtbl.get_xml_UP$MH, fi, IXMLDOMCDATASectionVtbl.get_xml$FUNC, scope);
        }
        static get_xml ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IXMLDOMCDATASectionVtbl.get_xml_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_xml$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_xml"));
    public static VarHandle get_xml$VH() {
        return IXMLDOMCDATASectionVtbl.get_xml$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_xml)(IXMLDOMCDATASection*,BSTR*);
     * }
     */
    public static MemorySegment get_xml$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.get_xml$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_xml)(IXMLDOMCDATASection*,BSTR*);
     * }
     */
    public static void get_xml$set(MemorySegment seg, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.get_xml$VH.set(seg, x);
    }
    public static MemorySegment get_xml$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.get_xml$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_xml$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.get_xml$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_xml get_xml(MemorySegment segment, SegmentScope scope) {
        return get_xml.ofAddress(get_xml$get(segment), scope);
    }
    static final FunctionDescriptor transformNode$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor transformNode_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle transformNode_UP$MH = RuntimeHelper.upcallHandle(transformNode.class, "apply", IXMLDOMCDATASectionVtbl.transformNode_UP$FUNC);
    static final FunctionDescriptor transformNode_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle transformNode_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDOMCDATASectionVtbl.transformNode_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*transformNode)(IXMLDOMCDATASection*,IXMLDOMNode*,BSTR*);
     * }
     */
    public interface transformNode {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(transformNode fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDOMCDATASectionVtbl.transformNode_UP$MH, fi, IXMLDOMCDATASectionVtbl.transformNode$FUNC, scope);
        }
        static transformNode ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IXMLDOMCDATASectionVtbl.transformNode_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle transformNode$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("transformNode"));
    public static VarHandle transformNode$VH() {
        return IXMLDOMCDATASectionVtbl.transformNode$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*transformNode)(IXMLDOMCDATASection*,IXMLDOMNode*,BSTR*);
     * }
     */
    public static MemorySegment transformNode$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.transformNode$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*transformNode)(IXMLDOMCDATASection*,IXMLDOMNode*,BSTR*);
     * }
     */
    public static void transformNode$set(MemorySegment seg, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.transformNode$VH.set(seg, x);
    }
    public static MemorySegment transformNode$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.transformNode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void transformNode$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.transformNode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static transformNode transformNode(MemorySegment segment, SegmentScope scope) {
        return transformNode.ofAddress(transformNode$get(segment), scope);
    }
    static final FunctionDescriptor selectNodes$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor selectNodes_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle selectNodes_UP$MH = RuntimeHelper.upcallHandle(selectNodes.class, "apply", IXMLDOMCDATASectionVtbl.selectNodes_UP$FUNC);
    static final FunctionDescriptor selectNodes_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle selectNodes_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDOMCDATASectionVtbl.selectNodes_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*selectNodes)(IXMLDOMCDATASection*,BSTR,IXMLDOMNodeList**);
     * }
     */
    public interface selectNodes {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(selectNodes fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDOMCDATASectionVtbl.selectNodes_UP$MH, fi, IXMLDOMCDATASectionVtbl.selectNodes$FUNC, scope);
        }
        static selectNodes ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IXMLDOMCDATASectionVtbl.selectNodes_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle selectNodes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("selectNodes"));
    public static VarHandle selectNodes$VH() {
        return IXMLDOMCDATASectionVtbl.selectNodes$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*selectNodes)(IXMLDOMCDATASection*,BSTR,IXMLDOMNodeList**);
     * }
     */
    public static MemorySegment selectNodes$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.selectNodes$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*selectNodes)(IXMLDOMCDATASection*,BSTR,IXMLDOMNodeList**);
     * }
     */
    public static void selectNodes$set(MemorySegment seg, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.selectNodes$VH.set(seg, x);
    }
    public static MemorySegment selectNodes$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.selectNodes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void selectNodes$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.selectNodes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static selectNodes selectNodes(MemorySegment segment, SegmentScope scope) {
        return selectNodes.ofAddress(selectNodes$get(segment), scope);
    }
    static final FunctionDescriptor selectSingleNode$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor selectSingleNode_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle selectSingleNode_UP$MH = RuntimeHelper.upcallHandle(selectSingleNode.class, "apply", IXMLDOMCDATASectionVtbl.selectSingleNode_UP$FUNC);
    static final FunctionDescriptor selectSingleNode_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle selectSingleNode_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDOMCDATASectionVtbl.selectSingleNode_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*selectSingleNode)(IXMLDOMCDATASection*,BSTR,IXMLDOMNode**);
     * }
     */
    public interface selectSingleNode {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(selectSingleNode fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDOMCDATASectionVtbl.selectSingleNode_UP$MH, fi, IXMLDOMCDATASectionVtbl.selectSingleNode$FUNC, scope);
        }
        static selectSingleNode ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IXMLDOMCDATASectionVtbl.selectSingleNode_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle selectSingleNode$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("selectSingleNode"));
    public static VarHandle selectSingleNode$VH() {
        return IXMLDOMCDATASectionVtbl.selectSingleNode$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*selectSingleNode)(IXMLDOMCDATASection*,BSTR,IXMLDOMNode**);
     * }
     */
    public static MemorySegment selectSingleNode$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.selectSingleNode$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*selectSingleNode)(IXMLDOMCDATASection*,BSTR,IXMLDOMNode**);
     * }
     */
    public static void selectSingleNode$set(MemorySegment seg, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.selectSingleNode$VH.set(seg, x);
    }
    public static MemorySegment selectSingleNode$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.selectSingleNode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void selectSingleNode$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.selectSingleNode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static selectSingleNode selectSingleNode(MemorySegment segment, SegmentScope scope) {
        return selectSingleNode.ofAddress(selectSingleNode$get(segment), scope);
    }
    static final FunctionDescriptor get_parsed$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_parsed_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_parsed_UP$MH = RuntimeHelper.upcallHandle(get_parsed.class, "apply", IXMLDOMCDATASectionVtbl.get_parsed_UP$FUNC);
    static final FunctionDescriptor get_parsed_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_parsed_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDOMCDATASectionVtbl.get_parsed_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*get_parsed)(IXMLDOMCDATASection*,VARIANT_BOOL*);
     * }
     */
    public interface get_parsed {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_parsed fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDOMCDATASectionVtbl.get_parsed_UP$MH, fi, IXMLDOMCDATASectionVtbl.get_parsed$FUNC, scope);
        }
        static get_parsed ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IXMLDOMCDATASectionVtbl.get_parsed_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_parsed$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_parsed"));
    public static VarHandle get_parsed$VH() {
        return IXMLDOMCDATASectionVtbl.get_parsed$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_parsed)(IXMLDOMCDATASection*,VARIANT_BOOL*);
     * }
     */
    public static MemorySegment get_parsed$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.get_parsed$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_parsed)(IXMLDOMCDATASection*,VARIANT_BOOL*);
     * }
     */
    public static void get_parsed$set(MemorySegment seg, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.get_parsed$VH.set(seg, x);
    }
    public static MemorySegment get_parsed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.get_parsed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_parsed$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.get_parsed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_parsed get_parsed(MemorySegment segment, SegmentScope scope) {
        return get_parsed.ofAddress(get_parsed$get(segment), scope);
    }
    static final FunctionDescriptor get_namespaceURI$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_namespaceURI_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_namespaceURI_UP$MH = RuntimeHelper.upcallHandle(get_namespaceURI.class, "apply", IXMLDOMCDATASectionVtbl.get_namespaceURI_UP$FUNC);
    static final FunctionDescriptor get_namespaceURI_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_namespaceURI_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDOMCDATASectionVtbl.get_namespaceURI_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*get_namespaceURI)(IXMLDOMCDATASection*,BSTR*);
     * }
     */
    public interface get_namespaceURI {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_namespaceURI fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDOMCDATASectionVtbl.get_namespaceURI_UP$MH, fi, IXMLDOMCDATASectionVtbl.get_namespaceURI$FUNC, scope);
        }
        static get_namespaceURI ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IXMLDOMCDATASectionVtbl.get_namespaceURI_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_namespaceURI$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_namespaceURI"));
    public static VarHandle get_namespaceURI$VH() {
        return IXMLDOMCDATASectionVtbl.get_namespaceURI$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_namespaceURI)(IXMLDOMCDATASection*,BSTR*);
     * }
     */
    public static MemorySegment get_namespaceURI$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.get_namespaceURI$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_namespaceURI)(IXMLDOMCDATASection*,BSTR*);
     * }
     */
    public static void get_namespaceURI$set(MemorySegment seg, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.get_namespaceURI$VH.set(seg, x);
    }
    public static MemorySegment get_namespaceURI$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.get_namespaceURI$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_namespaceURI$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.get_namespaceURI$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_namespaceURI get_namespaceURI(MemorySegment segment, SegmentScope scope) {
        return get_namespaceURI.ofAddress(get_namespaceURI$get(segment), scope);
    }
    static final FunctionDescriptor get_prefix$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_prefix_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_prefix_UP$MH = RuntimeHelper.upcallHandle(get_prefix.class, "apply", IXMLDOMCDATASectionVtbl.get_prefix_UP$FUNC);
    static final FunctionDescriptor get_prefix_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_prefix_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDOMCDATASectionVtbl.get_prefix_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*get_prefix)(IXMLDOMCDATASection*,BSTR*);
     * }
     */
    public interface get_prefix {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_prefix fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDOMCDATASectionVtbl.get_prefix_UP$MH, fi, IXMLDOMCDATASectionVtbl.get_prefix$FUNC, scope);
        }
        static get_prefix ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IXMLDOMCDATASectionVtbl.get_prefix_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_prefix$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_prefix"));
    public static VarHandle get_prefix$VH() {
        return IXMLDOMCDATASectionVtbl.get_prefix$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_prefix)(IXMLDOMCDATASection*,BSTR*);
     * }
     */
    public static MemorySegment get_prefix$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.get_prefix$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_prefix)(IXMLDOMCDATASection*,BSTR*);
     * }
     */
    public static void get_prefix$set(MemorySegment seg, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.get_prefix$VH.set(seg, x);
    }
    public static MemorySegment get_prefix$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.get_prefix$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_prefix$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.get_prefix$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_prefix get_prefix(MemorySegment segment, SegmentScope scope) {
        return get_prefix.ofAddress(get_prefix$get(segment), scope);
    }
    static final FunctionDescriptor get_baseName$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_baseName_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_baseName_UP$MH = RuntimeHelper.upcallHandle(get_baseName.class, "apply", IXMLDOMCDATASectionVtbl.get_baseName_UP$FUNC);
    static final FunctionDescriptor get_baseName_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_baseName_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDOMCDATASectionVtbl.get_baseName_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*get_baseName)(IXMLDOMCDATASection*,BSTR*);
     * }
     */
    public interface get_baseName {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_baseName fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDOMCDATASectionVtbl.get_baseName_UP$MH, fi, IXMLDOMCDATASectionVtbl.get_baseName$FUNC, scope);
        }
        static get_baseName ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IXMLDOMCDATASectionVtbl.get_baseName_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_baseName$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_baseName"));
    public static VarHandle get_baseName$VH() {
        return IXMLDOMCDATASectionVtbl.get_baseName$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_baseName)(IXMLDOMCDATASection*,BSTR*);
     * }
     */
    public static MemorySegment get_baseName$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.get_baseName$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_baseName)(IXMLDOMCDATASection*,BSTR*);
     * }
     */
    public static void get_baseName$set(MemorySegment seg, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.get_baseName$VH.set(seg, x);
    }
    public static MemorySegment get_baseName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.get_baseName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_baseName$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.get_baseName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_baseName get_baseName(MemorySegment segment, SegmentScope scope) {
        return get_baseName.ofAddress(get_baseName$get(segment), scope);
    }
    static final FunctionDescriptor transformNodeToObject$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        MemoryLayout.structLayout(
            MemoryLayout.unionLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_SHORT$LAYOUT.withName("vt"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved1"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved2"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved3"),
                    MemoryLayout.unionLayout(
                        Constants$root.C_LONG_LONG$LAYOUT.withName("llVal"),
                        Constants$root.C_LONG$LAYOUT.withName("lVal"),
                        Constants$root.C_CHAR$LAYOUT.withName("bVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("iVal"),
                        Constants$root.C_FLOAT$LAYOUT.withName("fltVal"),
                        Constants$root.C_DOUBLE$LAYOUT.withName("dblVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("boolVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("__OBSOLETE__VARIANT_BOOL"),
                        Constants$root.C_LONG$LAYOUT.withName("scode"),
                        MemoryLayout.unionLayout(
                            MemoryLayout.structLayout(
                                Constants$root.C_LONG$LAYOUT.withName("Lo"),
                                Constants$root.C_LONG$LAYOUT.withName("Hi")
                            ).withName("$anon$0"),
                            Constants$root.C_LONG_LONG$LAYOUT.withName("int64")
                        ).withName("cyVal"),
                        Constants$root.C_DOUBLE$LAYOUT.withName("date"),
                        Constants$root.C_POINTER$LAYOUT.withName("bstrVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("punkVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdispVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("parray"),
                        Constants$root.C_POINTER$LAYOUT.withName("pbVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("piVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("plVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pllVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pfltVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdblVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pboolVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("__OBSOLETE__VARIANT_PBOOL"),
                        Constants$root.C_POINTER$LAYOUT.withName("pscode"),
                        Constants$root.C_POINTER$LAYOUT.withName("pcyVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdate"),
                        Constants$root.C_POINTER$LAYOUT.withName("pbstrVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("ppunkVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("ppdispVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pparray"),
                        Constants$root.C_POINTER$LAYOUT.withName("pvarVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("byref"),
                        Constants$root.C_CHAR$LAYOUT.withName("cVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("uiVal"),
                        Constants$root.C_LONG$LAYOUT.withName("ulVal"),
                        Constants$root.C_LONG_LONG$LAYOUT.withName("ullVal"),
                        Constants$root.C_LONG$LAYOUT.withName("intVal"),
                        Constants$root.C_LONG$LAYOUT.withName("uintVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdecVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pcVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("puiVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pulVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pullVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pintVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("puintVal"),
                        MemoryLayout.structLayout(
                            Constants$root.C_POINTER$LAYOUT.withName("pvRecord"),
                            Constants$root.C_POINTER$LAYOUT.withName("pRecInfo")
                        ).withName("$anon$0")
                    ).withName("$anon$0")
                ).withName("$anon$0"),
                MemoryLayout.structLayout(
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            Constants$root.C_CHAR$LAYOUT.withName("scale"),
                            Constants$root.C_CHAR$LAYOUT.withName("sign")
                        ).withName("$anon$0"),
                        Constants$root.C_SHORT$LAYOUT.withName("signscale")
                    ).withName("$anon$0"),
                    Constants$root.C_LONG$LAYOUT.withName("Hi32"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            Constants$root.C_LONG$LAYOUT.withName("Lo32"),
                            Constants$root.C_LONG$LAYOUT.withName("Mid32")
                        ).withName("$anon$0"),
                        Constants$root.C_LONG_LONG$LAYOUT.withName("Lo64")
                    ).withName("$anon$1")
                ).withName("decVal")
            ).withName("$anon$0")
        ).withName("tagVARIANT")
    );
    static final FunctionDescriptor transformNodeToObject_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        MemoryLayout.structLayout(
            MemoryLayout.unionLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_SHORT$LAYOUT.withName("vt"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved1"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved2"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved3"),
                    MemoryLayout.unionLayout(
                        Constants$root.C_LONG_LONG$LAYOUT.withName("llVal"),
                        Constants$root.C_LONG$LAYOUT.withName("lVal"),
                        Constants$root.C_CHAR$LAYOUT.withName("bVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("iVal"),
                        Constants$root.C_FLOAT$LAYOUT.withName("fltVal"),
                        Constants$root.C_DOUBLE$LAYOUT.withName("dblVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("boolVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("__OBSOLETE__VARIANT_BOOL"),
                        Constants$root.C_LONG$LAYOUT.withName("scode"),
                        MemoryLayout.unionLayout(
                            MemoryLayout.structLayout(
                                Constants$root.C_LONG$LAYOUT.withName("Lo"),
                                Constants$root.C_LONG$LAYOUT.withName("Hi")
                            ).withName("$anon$0"),
                            Constants$root.C_LONG_LONG$LAYOUT.withName("int64")
                        ).withName("cyVal"),
                        Constants$root.C_DOUBLE$LAYOUT.withName("date"),
                        Constants$root.C_POINTER$LAYOUT.withName("bstrVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("punkVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdispVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("parray"),
                        Constants$root.C_POINTER$LAYOUT.withName("pbVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("piVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("plVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pllVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pfltVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdblVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pboolVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("__OBSOLETE__VARIANT_PBOOL"),
                        Constants$root.C_POINTER$LAYOUT.withName("pscode"),
                        Constants$root.C_POINTER$LAYOUT.withName("pcyVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdate"),
                        Constants$root.C_POINTER$LAYOUT.withName("pbstrVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("ppunkVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("ppdispVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pparray"),
                        Constants$root.C_POINTER$LAYOUT.withName("pvarVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("byref"),
                        Constants$root.C_CHAR$LAYOUT.withName("cVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("uiVal"),
                        Constants$root.C_LONG$LAYOUT.withName("ulVal"),
                        Constants$root.C_LONG_LONG$LAYOUT.withName("ullVal"),
                        Constants$root.C_LONG$LAYOUT.withName("intVal"),
                        Constants$root.C_LONG$LAYOUT.withName("uintVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdecVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pcVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("puiVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pulVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pullVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pintVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("puintVal"),
                        MemoryLayout.structLayout(
                            Constants$root.C_POINTER$LAYOUT.withName("pvRecord"),
                            Constants$root.C_POINTER$LAYOUT.withName("pRecInfo")
                        ).withName("$anon$0")
                    ).withName("$anon$0")
                ).withName("$anon$0"),
                MemoryLayout.structLayout(
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            Constants$root.C_CHAR$LAYOUT.withName("scale"),
                            Constants$root.C_CHAR$LAYOUT.withName("sign")
                        ).withName("$anon$0"),
                        Constants$root.C_SHORT$LAYOUT.withName("signscale")
                    ).withName("$anon$0"),
                    Constants$root.C_LONG$LAYOUT.withName("Hi32"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            Constants$root.C_LONG$LAYOUT.withName("Lo32"),
                            Constants$root.C_LONG$LAYOUT.withName("Mid32")
                        ).withName("$anon$0"),
                        Constants$root.C_LONG_LONG$LAYOUT.withName("Lo64")
                    ).withName("$anon$1")
                ).withName("decVal")
            ).withName("$anon$0")
        ).withName("tagVARIANT")
    );
    static final MethodHandle transformNodeToObject_UP$MH = RuntimeHelper.upcallHandle(transformNodeToObject.class, "apply", IXMLDOMCDATASectionVtbl.transformNodeToObject_UP$FUNC);
    static final FunctionDescriptor transformNodeToObject_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        MemoryLayout.structLayout(
            MemoryLayout.unionLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_SHORT$LAYOUT.withName("vt"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved1"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved2"),
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved3"),
                    MemoryLayout.unionLayout(
                        Constants$root.C_LONG_LONG$LAYOUT.withName("llVal"),
                        Constants$root.C_LONG$LAYOUT.withName("lVal"),
                        Constants$root.C_CHAR$LAYOUT.withName("bVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("iVal"),
                        Constants$root.C_FLOAT$LAYOUT.withName("fltVal"),
                        Constants$root.C_DOUBLE$LAYOUT.withName("dblVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("boolVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("__OBSOLETE__VARIANT_BOOL"),
                        Constants$root.C_LONG$LAYOUT.withName("scode"),
                        MemoryLayout.unionLayout(
                            MemoryLayout.structLayout(
                                Constants$root.C_LONG$LAYOUT.withName("Lo"),
                                Constants$root.C_LONG$LAYOUT.withName("Hi")
                            ).withName("$anon$0"),
                            Constants$root.C_LONG_LONG$LAYOUT.withName("int64")
                        ).withName("cyVal"),
                        Constants$root.C_DOUBLE$LAYOUT.withName("date"),
                        Constants$root.C_POINTER$LAYOUT.withName("bstrVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("punkVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdispVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("parray"),
                        Constants$root.C_POINTER$LAYOUT.withName("pbVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("piVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("plVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pllVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pfltVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdblVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pboolVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("__OBSOLETE__VARIANT_PBOOL"),
                        Constants$root.C_POINTER$LAYOUT.withName("pscode"),
                        Constants$root.C_POINTER$LAYOUT.withName("pcyVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdate"),
                        Constants$root.C_POINTER$LAYOUT.withName("pbstrVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("ppunkVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("ppdispVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pparray"),
                        Constants$root.C_POINTER$LAYOUT.withName("pvarVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("byref"),
                        Constants$root.C_CHAR$LAYOUT.withName("cVal"),
                        Constants$root.C_SHORT$LAYOUT.withName("uiVal"),
                        Constants$root.C_LONG$LAYOUT.withName("ulVal"),
                        Constants$root.C_LONG_LONG$LAYOUT.withName("ullVal"),
                        Constants$root.C_LONG$LAYOUT.withName("intVal"),
                        Constants$root.C_LONG$LAYOUT.withName("uintVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pdecVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pcVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("puiVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pulVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pullVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("pintVal"),
                        Constants$root.C_POINTER$LAYOUT.withName("puintVal"),
                        MemoryLayout.structLayout(
                            Constants$root.C_POINTER$LAYOUT.withName("pvRecord"),
                            Constants$root.C_POINTER$LAYOUT.withName("pRecInfo")
                        ).withName("$anon$0")
                    ).withName("$anon$0")
                ).withName("$anon$0"),
                MemoryLayout.structLayout(
                    Constants$root.C_SHORT$LAYOUT.withName("wReserved"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            Constants$root.C_CHAR$LAYOUT.withName("scale"),
                            Constants$root.C_CHAR$LAYOUT.withName("sign")
                        ).withName("$anon$0"),
                        Constants$root.C_SHORT$LAYOUT.withName("signscale")
                    ).withName("$anon$0"),
                    Constants$root.C_LONG$LAYOUT.withName("Hi32"),
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            Constants$root.C_LONG$LAYOUT.withName("Lo32"),
                            Constants$root.C_LONG$LAYOUT.withName("Mid32")
                        ).withName("$anon$0"),
                        Constants$root.C_LONG_LONG$LAYOUT.withName("Lo64")
                    ).withName("$anon$1")
                ).withName("decVal")
            ).withName("$anon$0")
        ).withName("tagVARIANT")
    );
    static final MethodHandle transformNodeToObject_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDOMCDATASectionVtbl.transformNodeToObject_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*transformNodeToObject)(IXMLDOMCDATASection*,IXMLDOMNode*,VARIANT);
     * }
     */
    public interface transformNodeToObject {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(transformNodeToObject fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDOMCDATASectionVtbl.transformNodeToObject_UP$MH, fi, IXMLDOMCDATASectionVtbl.transformNodeToObject$FUNC, scope);
        }
        static transformNodeToObject ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IXMLDOMCDATASectionVtbl.transformNodeToObject_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle transformNodeToObject$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("transformNodeToObject"));
    public static VarHandle transformNodeToObject$VH() {
        return IXMLDOMCDATASectionVtbl.transformNodeToObject$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*transformNodeToObject)(IXMLDOMCDATASection*,IXMLDOMNode*,VARIANT);
     * }
     */
    public static MemorySegment transformNodeToObject$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.transformNodeToObject$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*transformNodeToObject)(IXMLDOMCDATASection*,IXMLDOMNode*,VARIANT);
     * }
     */
    public static void transformNodeToObject$set(MemorySegment seg, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.transformNodeToObject$VH.set(seg, x);
    }
    public static MemorySegment transformNodeToObject$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.transformNodeToObject$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void transformNodeToObject$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.transformNodeToObject$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static transformNodeToObject transformNodeToObject(MemorySegment segment, SegmentScope scope) {
        return transformNodeToObject.ofAddress(transformNodeToObject$get(segment), scope);
    }
    static final FunctionDescriptor get_data$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_data_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_data_UP$MH = RuntimeHelper.upcallHandle(get_data.class, "apply", IXMLDOMCDATASectionVtbl.get_data_UP$FUNC);
    static final FunctionDescriptor get_data_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_data_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDOMCDATASectionVtbl.get_data_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*get_data)(IXMLDOMCDATASection*,BSTR*);
     * }
     */
    public interface get_data {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_data fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDOMCDATASectionVtbl.get_data_UP$MH, fi, IXMLDOMCDATASectionVtbl.get_data$FUNC, scope);
        }
        static get_data ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IXMLDOMCDATASectionVtbl.get_data_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_data$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_data"));
    public static VarHandle get_data$VH() {
        return IXMLDOMCDATASectionVtbl.get_data$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_data)(IXMLDOMCDATASection*,BSTR*);
     * }
     */
    public static MemorySegment get_data$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.get_data$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_data)(IXMLDOMCDATASection*,BSTR*);
     * }
     */
    public static void get_data$set(MemorySegment seg, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.get_data$VH.set(seg, x);
    }
    public static MemorySegment get_data$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.get_data$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_data$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.get_data$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_data get_data(MemorySegment segment, SegmentScope scope) {
        return get_data.ofAddress(get_data$get(segment), scope);
    }
    static final FunctionDescriptor put_data$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor put_data_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle put_data_UP$MH = RuntimeHelper.upcallHandle(put_data.class, "apply", IXMLDOMCDATASectionVtbl.put_data_UP$FUNC);
    static final FunctionDescriptor put_data_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle put_data_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDOMCDATASectionVtbl.put_data_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*put_data)(IXMLDOMCDATASection*,BSTR);
     * }
     */
    public interface put_data {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(put_data fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDOMCDATASectionVtbl.put_data_UP$MH, fi, IXMLDOMCDATASectionVtbl.put_data$FUNC, scope);
        }
        static put_data ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IXMLDOMCDATASectionVtbl.put_data_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle put_data$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("put_data"));
    public static VarHandle put_data$VH() {
        return IXMLDOMCDATASectionVtbl.put_data$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*put_data)(IXMLDOMCDATASection*,BSTR);
     * }
     */
    public static MemorySegment put_data$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.put_data$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*put_data)(IXMLDOMCDATASection*,BSTR);
     * }
     */
    public static void put_data$set(MemorySegment seg, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.put_data$VH.set(seg, x);
    }
    public static MemorySegment put_data$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.put_data$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void put_data$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.put_data$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static put_data put_data(MemorySegment segment, SegmentScope scope) {
        return put_data.ofAddress(put_data$get(segment), scope);
    }
    static final FunctionDescriptor get_length$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_length_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_length_UP$MH = RuntimeHelper.upcallHandle(get_length.class, "apply", IXMLDOMCDATASectionVtbl.get_length_UP$FUNC);
    static final FunctionDescriptor get_length_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_length_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDOMCDATASectionVtbl.get_length_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*get_length)(IXMLDOMCDATASection*,long*);
     * }
     */
    public interface get_length {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_length fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDOMCDATASectionVtbl.get_length_UP$MH, fi, IXMLDOMCDATASectionVtbl.get_length$FUNC, scope);
        }
        static get_length ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IXMLDOMCDATASectionVtbl.get_length_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_length$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_length"));
    public static VarHandle get_length$VH() {
        return IXMLDOMCDATASectionVtbl.get_length$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*get_length)(IXMLDOMCDATASection*,long*);
     * }
     */
    public static MemorySegment get_length$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.get_length$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*get_length)(IXMLDOMCDATASection*,long*);
     * }
     */
    public static void get_length$set(MemorySegment seg, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.get_length$VH.set(seg, x);
    }
    public static MemorySegment get_length$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.get_length$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_length$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.get_length$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_length get_length(MemorySegment segment, SegmentScope scope) {
        return get_length.ofAddress(get_length$get(segment), scope);
    }
    static final FunctionDescriptor substringData$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor substringData_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle substringData_UP$MH = RuntimeHelper.upcallHandle(substringData.class, "apply", IXMLDOMCDATASectionVtbl.substringData_UP$FUNC);
    static final FunctionDescriptor substringData_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle substringData_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDOMCDATASectionVtbl.substringData_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*substringData)(IXMLDOMCDATASection*,long,long,BSTR*);
     * }
     */
    public interface substringData {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(substringData fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDOMCDATASectionVtbl.substringData_UP$MH, fi, IXMLDOMCDATASectionVtbl.substringData$FUNC, scope);
        }
        static substringData ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)IXMLDOMCDATASectionVtbl.substringData_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle substringData$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("substringData"));
    public static VarHandle substringData$VH() {
        return IXMLDOMCDATASectionVtbl.substringData$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*substringData)(IXMLDOMCDATASection*,long,long,BSTR*);
     * }
     */
    public static MemorySegment substringData$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.substringData$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*substringData)(IXMLDOMCDATASection*,long,long,BSTR*);
     * }
     */
    public static void substringData$set(MemorySegment seg, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.substringData$VH.set(seg, x);
    }
    public static MemorySegment substringData$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.substringData$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void substringData$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.substringData$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static substringData substringData(MemorySegment segment, SegmentScope scope) {
        return substringData.ofAddress(substringData$get(segment), scope);
    }
    static final FunctionDescriptor appendData$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor appendData_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle appendData_UP$MH = RuntimeHelper.upcallHandle(appendData.class, "apply", IXMLDOMCDATASectionVtbl.appendData_UP$FUNC);
    static final FunctionDescriptor appendData_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle appendData_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDOMCDATASectionVtbl.appendData_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*appendData)(IXMLDOMCDATASection*,BSTR);
     * }
     */
    public interface appendData {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(appendData fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDOMCDATASectionVtbl.appendData_UP$MH, fi, IXMLDOMCDATASectionVtbl.appendData$FUNC, scope);
        }
        static appendData ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IXMLDOMCDATASectionVtbl.appendData_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle appendData$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("appendData"));
    public static VarHandle appendData$VH() {
        return IXMLDOMCDATASectionVtbl.appendData$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*appendData)(IXMLDOMCDATASection*,BSTR);
     * }
     */
    public static MemorySegment appendData$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.appendData$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*appendData)(IXMLDOMCDATASection*,BSTR);
     * }
     */
    public static void appendData$set(MemorySegment seg, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.appendData$VH.set(seg, x);
    }
    public static MemorySegment appendData$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.appendData$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void appendData$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.appendData$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static appendData appendData(MemorySegment segment, SegmentScope scope) {
        return appendData.ofAddress(appendData$get(segment), scope);
    }
    static final FunctionDescriptor insertData$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor insertData_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle insertData_UP$MH = RuntimeHelper.upcallHandle(insertData.class, "apply", IXMLDOMCDATASectionVtbl.insertData_UP$FUNC);
    static final FunctionDescriptor insertData_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle insertData_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDOMCDATASectionVtbl.insertData_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*insertData)(IXMLDOMCDATASection*,long,BSTR);
     * }
     */
    public interface insertData {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(insertData fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDOMCDATASectionVtbl.insertData_UP$MH, fi, IXMLDOMCDATASectionVtbl.insertData$FUNC, scope);
        }
        static insertData ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IXMLDOMCDATASectionVtbl.insertData_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle insertData$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("insertData"));
    public static VarHandle insertData$VH() {
        return IXMLDOMCDATASectionVtbl.insertData$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*insertData)(IXMLDOMCDATASection*,long,BSTR);
     * }
     */
    public static MemorySegment insertData$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.insertData$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*insertData)(IXMLDOMCDATASection*,long,BSTR);
     * }
     */
    public static void insertData$set(MemorySegment seg, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.insertData$VH.set(seg, x);
    }
    public static MemorySegment insertData$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.insertData$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void insertData$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.insertData$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static insertData insertData(MemorySegment segment, SegmentScope scope) {
        return insertData.ofAddress(insertData$get(segment), scope);
    }
    static final FunctionDescriptor deleteData$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor deleteData_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle deleteData_UP$MH = RuntimeHelper.upcallHandle(deleteData.class, "apply", IXMLDOMCDATASectionVtbl.deleteData_UP$FUNC);
    static final FunctionDescriptor deleteData_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle deleteData_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDOMCDATASectionVtbl.deleteData_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*deleteData)(IXMLDOMCDATASection*,long,long);
     * }
     */
    public interface deleteData {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2);
        static MemorySegment allocate(deleteData fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDOMCDATASectionVtbl.deleteData_UP$MH, fi, IXMLDOMCDATASectionVtbl.deleteData$FUNC, scope);
        }
        static deleteData ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2) -> {
                try {
                    return (int)IXMLDOMCDATASectionVtbl.deleteData_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle deleteData$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("deleteData"));
    public static VarHandle deleteData$VH() {
        return IXMLDOMCDATASectionVtbl.deleteData$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*deleteData)(IXMLDOMCDATASection*,long,long);
     * }
     */
    public static MemorySegment deleteData$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.deleteData$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*deleteData)(IXMLDOMCDATASection*,long,long);
     * }
     */
    public static void deleteData$set(MemorySegment seg, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.deleteData$VH.set(seg, x);
    }
    public static MemorySegment deleteData$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.deleteData$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void deleteData$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.deleteData$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static deleteData deleteData(MemorySegment segment, SegmentScope scope) {
        return deleteData.ofAddress(deleteData$get(segment), scope);
    }
    static final FunctionDescriptor replaceData$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor replaceData_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle replaceData_UP$MH = RuntimeHelper.upcallHandle(replaceData.class, "apply", IXMLDOMCDATASectionVtbl.replaceData_UP$FUNC);
    static final FunctionDescriptor replaceData_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle replaceData_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDOMCDATASectionVtbl.replaceData_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*replaceData)(IXMLDOMCDATASection*,long,long,BSTR);
     * }
     */
    public interface replaceData {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(replaceData fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDOMCDATASectionVtbl.replaceData_UP$MH, fi, IXMLDOMCDATASectionVtbl.replaceData$FUNC, scope);
        }
        static replaceData ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)IXMLDOMCDATASectionVtbl.replaceData_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle replaceData$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("replaceData"));
    public static VarHandle replaceData$VH() {
        return IXMLDOMCDATASectionVtbl.replaceData$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*replaceData)(IXMLDOMCDATASection*,long,long,BSTR);
     * }
     */
    public static MemorySegment replaceData$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.replaceData$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*replaceData)(IXMLDOMCDATASection*,long,long,BSTR);
     * }
     */
    public static void replaceData$set(MemorySegment seg, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.replaceData$VH.set(seg, x);
    }
    public static MemorySegment replaceData$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.replaceData$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void replaceData$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.replaceData$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static replaceData replaceData(MemorySegment segment, SegmentScope scope) {
        return replaceData.ofAddress(replaceData$get(segment), scope);
    }
    static final FunctionDescriptor splitText$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor splitText_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle splitText_UP$MH = RuntimeHelper.upcallHandle(splitText.class, "apply", IXMLDOMCDATASectionVtbl.splitText_UP$FUNC);
    static final FunctionDescriptor splitText_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle splitText_DOWN$MH = RuntimeHelper.downcallHandle(
        IXMLDOMCDATASectionVtbl.splitText_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*splitText)(IXMLDOMCDATASection*,long,IXMLDOMText**);
     * }
     */
    public interface splitText {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(splitText fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IXMLDOMCDATASectionVtbl.splitText_UP$MH, fi, IXMLDOMCDATASectionVtbl.splitText$FUNC, scope);
        }
        static splitText ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IXMLDOMCDATASectionVtbl.splitText_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle splitText$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("splitText"));
    public static VarHandle splitText$VH() {
        return IXMLDOMCDATASectionVtbl.splitText$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*splitText)(IXMLDOMCDATASection*,long,IXMLDOMText**);
     * }
     */
    public static MemorySegment splitText$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.splitText$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*splitText)(IXMLDOMCDATASection*,long,IXMLDOMText**);
     * }
     */
    public static void splitText$set(MemorySegment seg, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.splitText$VH.set(seg, x);
    }
    public static MemorySegment splitText$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IXMLDOMCDATASectionVtbl.splitText$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void splitText$set(MemorySegment seg, long index, MemorySegment x) {
        IXMLDOMCDATASectionVtbl.splitText$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static splitText splitText(MemorySegment segment, SegmentScope scope) {
        return splitText.ofAddress(splitText$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


