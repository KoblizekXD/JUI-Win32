// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct IOleCacheVtbl {
 *     HRESULT (*QueryInterface)(IOleCache*,const IID*,void**);
 *     ULONG (*AddRef)(IOleCache*);
 *     ULONG (*Release)(IOleCache*);
 *     HRESULT (*Cache)(IOleCache*,FORMATETC*,DWORD,DWORD*);
 *     HRESULT (*Uncache)(IOleCache*,DWORD);
 *     HRESULT (*EnumCache)(IOleCache*,IEnumSTATDATA**);
 *     HRESULT (*InitCache)(IOleCache*,IDataObject*);
 *     HRESULT (*SetData)(IOleCache*,FORMATETC*,STGMEDIUM*,BOOL);
 * };
 * }
 */
public class IOleCacheVtbl {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("Cache"),
        Constants$root.C_POINTER$LAYOUT.withName("Uncache"),
        Constants$root.C_POINTER$LAYOUT.withName("EnumCache"),
        Constants$root.C_POINTER$LAYOUT.withName("InitCache"),
        Constants$root.C_POINTER$LAYOUT.withName("SetData")
    ).withName("IOleCacheVtbl");
    public static MemoryLayout $LAYOUT() {
        return IOleCacheVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor QueryInterface_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_UP$MH = RuntimeHelper.upcallHandle(QueryInterface.class, "apply", IOleCacheVtbl.QueryInterface_UP$FUNC);
    static final FunctionDescriptor QueryInterface_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface_DOWN$MH = RuntimeHelper.downcallHandle(
        IOleCacheVtbl.QueryInterface_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*QueryInterface)(IOleCache*,const IID*,void**);
     * }
     */
    public interface QueryInterface {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(QueryInterface fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IOleCacheVtbl.QueryInterface_UP$MH, fi, IOleCacheVtbl.QueryInterface$FUNC, scope);
        }
        static QueryInterface ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)IOleCacheVtbl.QueryInterface_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return IOleCacheVtbl.QueryInterface$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IOleCache*,const IID*,void**);
     * }
     */
    public static MemorySegment QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOleCacheVtbl.QueryInterface$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*QueryInterface)(IOleCache*,const IID*,void**);
     * }
     */
    public static void QueryInterface$set(MemorySegment seg, MemorySegment x) {
        IOleCacheVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemorySegment QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOleCacheVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemorySegment x) {
        IOleCacheVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface(MemorySegment segment, SegmentScope scope) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), scope);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor AddRef_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_UP$MH = RuntimeHelper.upcallHandle(AddRef.class, "apply", IOleCacheVtbl.AddRef_UP$FUNC);
    static final FunctionDescriptor AddRef_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef_DOWN$MH = RuntimeHelper.downcallHandle(
        IOleCacheVtbl.AddRef_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*AddRef)(IOleCache*);
     * }
     */
    public interface AddRef {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(AddRef fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IOleCacheVtbl.AddRef_UP$MH, fi, IOleCacheVtbl.AddRef$FUNC, scope);
        }
        static AddRef ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IOleCacheVtbl.AddRef_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return IOleCacheVtbl.AddRef$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*AddRef)(IOleCache*);
     * }
     */
    public static MemorySegment AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOleCacheVtbl.AddRef$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*AddRef)(IOleCache*);
     * }
     */
    public static void AddRef$set(MemorySegment seg, MemorySegment x) {
        IOleCacheVtbl.AddRef$VH.set(seg, x);
    }
    public static MemorySegment AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOleCacheVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemorySegment x) {
        IOleCacheVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef(MemorySegment segment, SegmentScope scope) {
        return AddRef.ofAddress(AddRef$get(segment), scope);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Release_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_UP$MH = RuntimeHelper.upcallHandle(Release.class, "apply", IOleCacheVtbl.Release_UP$FUNC);
    static final FunctionDescriptor Release_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release_DOWN$MH = RuntimeHelper.downcallHandle(
        IOleCacheVtbl.Release_DOWN$FUNC
    );
    /**
     * {@snippet :
 * ULONG (*Release)(IOleCache*);
     * }
     */
    public interface Release {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Release fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IOleCacheVtbl.Release_UP$MH, fi, IOleCacheVtbl.Release$FUNC, scope);
        }
        static Release ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)IOleCacheVtbl.Release_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return IOleCacheVtbl.Release$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ULONG (*Release)(IOleCache*);
     * }
     */
    public static MemorySegment Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOleCacheVtbl.Release$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ULONG (*Release)(IOleCache*);
     * }
     */
    public static void Release$set(MemorySegment seg, MemorySegment x) {
        IOleCacheVtbl.Release$VH.set(seg, x);
    }
    public static MemorySegment Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOleCacheVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemorySegment x) {
        IOleCacheVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release(MemorySegment segment, SegmentScope scope) {
        return Release.ofAddress(Release$get(segment), scope);
    }
    static final FunctionDescriptor Cache$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor Cache_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Cache_UP$MH = RuntimeHelper.upcallHandle(Cache.class, "apply", IOleCacheVtbl.Cache_UP$FUNC);
    static final FunctionDescriptor Cache_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Cache_DOWN$MH = RuntimeHelper.downcallHandle(
        IOleCacheVtbl.Cache_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*Cache)(IOleCache*,FORMATETC*,DWORD,DWORD*);
     * }
     */
    public interface Cache {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(Cache fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IOleCacheVtbl.Cache_UP$MH, fi, IOleCacheVtbl.Cache$FUNC, scope);
        }
        static Cache ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)IOleCacheVtbl.Cache_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Cache$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Cache"));
    public static VarHandle Cache$VH() {
        return IOleCacheVtbl.Cache$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Cache)(IOleCache*,FORMATETC*,DWORD,DWORD*);
     * }
     */
    public static MemorySegment Cache$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOleCacheVtbl.Cache$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Cache)(IOleCache*,FORMATETC*,DWORD,DWORD*);
     * }
     */
    public static void Cache$set(MemorySegment seg, MemorySegment x) {
        IOleCacheVtbl.Cache$VH.set(seg, x);
    }
    public static MemorySegment Cache$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOleCacheVtbl.Cache$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Cache$set(MemorySegment seg, long index, MemorySegment x) {
        IOleCacheVtbl.Cache$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Cache Cache(MemorySegment segment, SegmentScope scope) {
        return Cache.ofAddress(Cache$get(segment), scope);
    }
    static final FunctionDescriptor Uncache$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor Uncache_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle Uncache_UP$MH = RuntimeHelper.upcallHandle(Uncache.class, "apply", IOleCacheVtbl.Uncache_UP$FUNC);
    static final FunctionDescriptor Uncache_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle Uncache_DOWN$MH = RuntimeHelper.downcallHandle(
        IOleCacheVtbl.Uncache_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*Uncache)(IOleCache*,DWORD);
     * }
     */
    public interface Uncache {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(Uncache fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IOleCacheVtbl.Uncache_UP$MH, fi, IOleCacheVtbl.Uncache$FUNC, scope);
        }
        static Uncache ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)IOleCacheVtbl.Uncache_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Uncache$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Uncache"));
    public static VarHandle Uncache$VH() {
        return IOleCacheVtbl.Uncache$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*Uncache)(IOleCache*,DWORD);
     * }
     */
    public static MemorySegment Uncache$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOleCacheVtbl.Uncache$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*Uncache)(IOleCache*,DWORD);
     * }
     */
    public static void Uncache$set(MemorySegment seg, MemorySegment x) {
        IOleCacheVtbl.Uncache$VH.set(seg, x);
    }
    public static MemorySegment Uncache$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOleCacheVtbl.Uncache$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Uncache$set(MemorySegment seg, long index, MemorySegment x) {
        IOleCacheVtbl.Uncache$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Uncache Uncache(MemorySegment segment, SegmentScope scope) {
        return Uncache.ofAddress(Uncache$get(segment), scope);
    }
    static final FunctionDescriptor EnumCache$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor EnumCache_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle EnumCache_UP$MH = RuntimeHelper.upcallHandle(EnumCache.class, "apply", IOleCacheVtbl.EnumCache_UP$FUNC);
    static final FunctionDescriptor EnumCache_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle EnumCache_DOWN$MH = RuntimeHelper.downcallHandle(
        IOleCacheVtbl.EnumCache_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*EnumCache)(IOleCache*,IEnumSTATDATA**);
     * }
     */
    public interface EnumCache {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(EnumCache fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IOleCacheVtbl.EnumCache_UP$MH, fi, IOleCacheVtbl.EnumCache$FUNC, scope);
        }
        static EnumCache ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IOleCacheVtbl.EnumCache_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle EnumCache$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("EnumCache"));
    public static VarHandle EnumCache$VH() {
        return IOleCacheVtbl.EnumCache$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*EnumCache)(IOleCache*,IEnumSTATDATA**);
     * }
     */
    public static MemorySegment EnumCache$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOleCacheVtbl.EnumCache$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*EnumCache)(IOleCache*,IEnumSTATDATA**);
     * }
     */
    public static void EnumCache$set(MemorySegment seg, MemorySegment x) {
        IOleCacheVtbl.EnumCache$VH.set(seg, x);
    }
    public static MemorySegment EnumCache$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOleCacheVtbl.EnumCache$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void EnumCache$set(MemorySegment seg, long index, MemorySegment x) {
        IOleCacheVtbl.EnumCache$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static EnumCache EnumCache(MemorySegment segment, SegmentScope scope) {
        return EnumCache.ofAddress(EnumCache$get(segment), scope);
    }
    static final FunctionDescriptor InitCache$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor InitCache_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle InitCache_UP$MH = RuntimeHelper.upcallHandle(InitCache.class, "apply", IOleCacheVtbl.InitCache_UP$FUNC);
    static final FunctionDescriptor InitCache_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle InitCache_DOWN$MH = RuntimeHelper.downcallHandle(
        IOleCacheVtbl.InitCache_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*InitCache)(IOleCache*,IDataObject*);
     * }
     */
    public interface InitCache {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(InitCache fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IOleCacheVtbl.InitCache_UP$MH, fi, IOleCacheVtbl.InitCache$FUNC, scope);
        }
        static InitCache ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)IOleCacheVtbl.InitCache_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle InitCache$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("InitCache"));
    public static VarHandle InitCache$VH() {
        return IOleCacheVtbl.InitCache$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*InitCache)(IOleCache*,IDataObject*);
     * }
     */
    public static MemorySegment InitCache$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOleCacheVtbl.InitCache$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*InitCache)(IOleCache*,IDataObject*);
     * }
     */
    public static void InitCache$set(MemorySegment seg, MemorySegment x) {
        IOleCacheVtbl.InitCache$VH.set(seg, x);
    }
    public static MemorySegment InitCache$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOleCacheVtbl.InitCache$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void InitCache$set(MemorySegment seg, long index, MemorySegment x) {
        IOleCacheVtbl.InitCache$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static InitCache InitCache(MemorySegment segment, SegmentScope scope) {
        return InitCache.ofAddress(InitCache$get(segment), scope);
    }
    static final FunctionDescriptor SetData$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final FunctionDescriptor SetData_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle SetData_UP$MH = RuntimeHelper.upcallHandle(SetData.class, "apply", IOleCacheVtbl.SetData_UP$FUNC);
    static final FunctionDescriptor SetData_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle SetData_DOWN$MH = RuntimeHelper.downcallHandle(
        IOleCacheVtbl.SetData_DOWN$FUNC
    );
    /**
     * {@snippet :
 * HRESULT (*SetData)(IOleCache*,FORMATETC*,STGMEDIUM*,BOOL);
     * }
     */
    public interface SetData {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3);
        static MemorySegment allocate(SetData fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(IOleCacheVtbl.SetData_UP$MH, fi, IOleCacheVtbl.SetData$FUNC, scope);
        }
        static SetData ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3) -> {
                try {
                    return (int)IOleCacheVtbl.SetData_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SetData$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SetData"));
    public static VarHandle SetData$VH() {
        return IOleCacheVtbl.SetData$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * HRESULT (*SetData)(IOleCache*,FORMATETC*,STGMEDIUM*,BOOL);
     * }
     */
    public static MemorySegment SetData$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)IOleCacheVtbl.SetData$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * HRESULT (*SetData)(IOleCache*,FORMATETC*,STGMEDIUM*,BOOL);
     * }
     */
    public static void SetData$set(MemorySegment seg, MemorySegment x) {
        IOleCacheVtbl.SetData$VH.set(seg, x);
    }
    public static MemorySegment SetData$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)IOleCacheVtbl.SetData$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SetData$set(MemorySegment seg, long index, MemorySegment x) {
        IOleCacheVtbl.SetData$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetData SetData(MemorySegment segment, SegmentScope scope) {
        return SetData.ofAddress(SetData$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


