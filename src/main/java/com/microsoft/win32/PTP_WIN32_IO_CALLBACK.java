// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * void (*PTP_WIN32_IO_CALLBACK)(struct _TP_CALLBACK_INSTANCE* Instance,void* Context,void* Overlapped,unsigned long IoResult,unsigned long long NumberOfBytesTransferred,struct _TP_IO* Io);
 * }
 */
public interface PTP_WIN32_IO_CALLBACK {

    void apply(java.lang.foreign.MemorySegment Instance, java.lang.foreign.MemorySegment Context, java.lang.foreign.MemorySegment Overlapped, int IoResult, long NumberOfBytesTransferred, java.lang.foreign.MemorySegment Io);
    static MemorySegment allocate(PTP_WIN32_IO_CALLBACK fi, SegmentScope scope) {
        return RuntimeHelper.upcallStub(constants$198.PTP_WIN32_IO_CALLBACK_UP$MH, fi, constants$198.PTP_WIN32_IO_CALLBACK$FUNC, scope);
    }
    static PTP_WIN32_IO_CALLBACK ofAddress(MemorySegment addr, SegmentScope scope) {
        MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
        return (java.lang.foreign.MemorySegment _Instance, java.lang.foreign.MemorySegment _Context, java.lang.foreign.MemorySegment _Overlapped, int _IoResult, long _NumberOfBytesTransferred, java.lang.foreign.MemorySegment _Io) -> {
            try {
                constants$198.PTP_WIN32_IO_CALLBACK_DOWN$MH.invokeExact(symbol, _Instance, _Context, _Overlapped, _IoResult, _NumberOfBytesTransferred, _Io);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


