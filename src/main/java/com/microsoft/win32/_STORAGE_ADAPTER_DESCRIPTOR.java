// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _STORAGE_ADAPTER_DESCRIPTOR {
 *     DWORD Version;
 *     DWORD Size;
 *     DWORD MaximumTransferLength;
 *     DWORD MaximumPhysicalPages;
 *     DWORD AlignmentMask;
 *     BOOLEAN AdapterUsesPio;
 *     BOOLEAN AdapterScansDown;
 *     BOOLEAN CommandQueueing;
 *     BOOLEAN AcceleratedTransfer;
 *     BYTE BusType;
 *     WORD BusMajorVersion;
 *     WORD BusMinorVersion;
 *     BYTE SrbType;
 *     BYTE AddressType;
 * };
 * }
 */
public class _STORAGE_ADAPTER_DESCRIPTOR {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("Version"),
        Constants$root.C_LONG$LAYOUT.withName("Size"),
        Constants$root.C_LONG$LAYOUT.withName("MaximumTransferLength"),
        Constants$root.C_LONG$LAYOUT.withName("MaximumPhysicalPages"),
        Constants$root.C_LONG$LAYOUT.withName("AlignmentMask"),
        Constants$root.C_CHAR$LAYOUT.withName("AdapterUsesPio"),
        Constants$root.C_CHAR$LAYOUT.withName("AdapterScansDown"),
        Constants$root.C_CHAR$LAYOUT.withName("CommandQueueing"),
        Constants$root.C_CHAR$LAYOUT.withName("AcceleratedTransfer"),
        Constants$root.C_CHAR$LAYOUT.withName("BusType"),
        MemoryLayout.paddingLayout(8),
        Constants$root.C_SHORT$LAYOUT.withName("BusMajorVersion"),
        Constants$root.C_SHORT$LAYOUT.withName("BusMinorVersion"),
        Constants$root.C_CHAR$LAYOUT.withName("SrbType"),
        Constants$root.C_CHAR$LAYOUT.withName("AddressType")
    ).withName("_STORAGE_ADAPTER_DESCRIPTOR");
    public static MemoryLayout $LAYOUT() {
        return _STORAGE_ADAPTER_DESCRIPTOR.$struct$LAYOUT;
    }
    static final VarHandle Version$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Version"));
    public static VarHandle Version$VH() {
        return _STORAGE_ADAPTER_DESCRIPTOR.Version$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Version;
     * }
     */
    public static int Version$get(MemorySegment seg) {
        return (int)_STORAGE_ADAPTER_DESCRIPTOR.Version$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Version;
     * }
     */
    public static void Version$set(MemorySegment seg, int x) {
        _STORAGE_ADAPTER_DESCRIPTOR.Version$VH.set(seg, x);
    }
    public static int Version$get(MemorySegment seg, long index) {
        return (int)_STORAGE_ADAPTER_DESCRIPTOR.Version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Version$set(MemorySegment seg, long index, int x) {
        _STORAGE_ADAPTER_DESCRIPTOR.Version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Size$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Size"));
    public static VarHandle Size$VH() {
        return _STORAGE_ADAPTER_DESCRIPTOR.Size$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Size;
     * }
     */
    public static int Size$get(MemorySegment seg) {
        return (int)_STORAGE_ADAPTER_DESCRIPTOR.Size$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Size;
     * }
     */
    public static void Size$set(MemorySegment seg, int x) {
        _STORAGE_ADAPTER_DESCRIPTOR.Size$VH.set(seg, x);
    }
    public static int Size$get(MemorySegment seg, long index) {
        return (int)_STORAGE_ADAPTER_DESCRIPTOR.Size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Size$set(MemorySegment seg, long index, int x) {
        _STORAGE_ADAPTER_DESCRIPTOR.Size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MaximumTransferLength$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("MaximumTransferLength"));
    public static VarHandle MaximumTransferLength$VH() {
        return _STORAGE_ADAPTER_DESCRIPTOR.MaximumTransferLength$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD MaximumTransferLength;
     * }
     */
    public static int MaximumTransferLength$get(MemorySegment seg) {
        return (int)_STORAGE_ADAPTER_DESCRIPTOR.MaximumTransferLength$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD MaximumTransferLength;
     * }
     */
    public static void MaximumTransferLength$set(MemorySegment seg, int x) {
        _STORAGE_ADAPTER_DESCRIPTOR.MaximumTransferLength$VH.set(seg, x);
    }
    public static int MaximumTransferLength$get(MemorySegment seg, long index) {
        return (int)_STORAGE_ADAPTER_DESCRIPTOR.MaximumTransferLength$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MaximumTransferLength$set(MemorySegment seg, long index, int x) {
        _STORAGE_ADAPTER_DESCRIPTOR.MaximumTransferLength$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MaximumPhysicalPages$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("MaximumPhysicalPages"));
    public static VarHandle MaximumPhysicalPages$VH() {
        return _STORAGE_ADAPTER_DESCRIPTOR.MaximumPhysicalPages$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD MaximumPhysicalPages;
     * }
     */
    public static int MaximumPhysicalPages$get(MemorySegment seg) {
        return (int)_STORAGE_ADAPTER_DESCRIPTOR.MaximumPhysicalPages$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD MaximumPhysicalPages;
     * }
     */
    public static void MaximumPhysicalPages$set(MemorySegment seg, int x) {
        _STORAGE_ADAPTER_DESCRIPTOR.MaximumPhysicalPages$VH.set(seg, x);
    }
    public static int MaximumPhysicalPages$get(MemorySegment seg, long index) {
        return (int)_STORAGE_ADAPTER_DESCRIPTOR.MaximumPhysicalPages$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MaximumPhysicalPages$set(MemorySegment seg, long index, int x) {
        _STORAGE_ADAPTER_DESCRIPTOR.MaximumPhysicalPages$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle AlignmentMask$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AlignmentMask"));
    public static VarHandle AlignmentMask$VH() {
        return _STORAGE_ADAPTER_DESCRIPTOR.AlignmentMask$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD AlignmentMask;
     * }
     */
    public static int AlignmentMask$get(MemorySegment seg) {
        return (int)_STORAGE_ADAPTER_DESCRIPTOR.AlignmentMask$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD AlignmentMask;
     * }
     */
    public static void AlignmentMask$set(MemorySegment seg, int x) {
        _STORAGE_ADAPTER_DESCRIPTOR.AlignmentMask$VH.set(seg, x);
    }
    public static int AlignmentMask$get(MemorySegment seg, long index) {
        return (int)_STORAGE_ADAPTER_DESCRIPTOR.AlignmentMask$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AlignmentMask$set(MemorySegment seg, long index, int x) {
        _STORAGE_ADAPTER_DESCRIPTOR.AlignmentMask$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle AdapterUsesPio$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AdapterUsesPio"));
    public static VarHandle AdapterUsesPio$VH() {
        return _STORAGE_ADAPTER_DESCRIPTOR.AdapterUsesPio$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BOOLEAN AdapterUsesPio;
     * }
     */
    public static byte AdapterUsesPio$get(MemorySegment seg) {
        return (byte)_STORAGE_ADAPTER_DESCRIPTOR.AdapterUsesPio$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BOOLEAN AdapterUsesPio;
     * }
     */
    public static void AdapterUsesPio$set(MemorySegment seg, byte x) {
        _STORAGE_ADAPTER_DESCRIPTOR.AdapterUsesPio$VH.set(seg, x);
    }
    public static byte AdapterUsesPio$get(MemorySegment seg, long index) {
        return (byte)_STORAGE_ADAPTER_DESCRIPTOR.AdapterUsesPio$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AdapterUsesPio$set(MemorySegment seg, long index, byte x) {
        _STORAGE_ADAPTER_DESCRIPTOR.AdapterUsesPio$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle AdapterScansDown$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AdapterScansDown"));
    public static VarHandle AdapterScansDown$VH() {
        return _STORAGE_ADAPTER_DESCRIPTOR.AdapterScansDown$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BOOLEAN AdapterScansDown;
     * }
     */
    public static byte AdapterScansDown$get(MemorySegment seg) {
        return (byte)_STORAGE_ADAPTER_DESCRIPTOR.AdapterScansDown$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BOOLEAN AdapterScansDown;
     * }
     */
    public static void AdapterScansDown$set(MemorySegment seg, byte x) {
        _STORAGE_ADAPTER_DESCRIPTOR.AdapterScansDown$VH.set(seg, x);
    }
    public static byte AdapterScansDown$get(MemorySegment seg, long index) {
        return (byte)_STORAGE_ADAPTER_DESCRIPTOR.AdapterScansDown$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AdapterScansDown$set(MemorySegment seg, long index, byte x) {
        _STORAGE_ADAPTER_DESCRIPTOR.AdapterScansDown$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle CommandQueueing$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("CommandQueueing"));
    public static VarHandle CommandQueueing$VH() {
        return _STORAGE_ADAPTER_DESCRIPTOR.CommandQueueing$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BOOLEAN CommandQueueing;
     * }
     */
    public static byte CommandQueueing$get(MemorySegment seg) {
        return (byte)_STORAGE_ADAPTER_DESCRIPTOR.CommandQueueing$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BOOLEAN CommandQueueing;
     * }
     */
    public static void CommandQueueing$set(MemorySegment seg, byte x) {
        _STORAGE_ADAPTER_DESCRIPTOR.CommandQueueing$VH.set(seg, x);
    }
    public static byte CommandQueueing$get(MemorySegment seg, long index) {
        return (byte)_STORAGE_ADAPTER_DESCRIPTOR.CommandQueueing$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CommandQueueing$set(MemorySegment seg, long index, byte x) {
        _STORAGE_ADAPTER_DESCRIPTOR.CommandQueueing$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle AcceleratedTransfer$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AcceleratedTransfer"));
    public static VarHandle AcceleratedTransfer$VH() {
        return _STORAGE_ADAPTER_DESCRIPTOR.AcceleratedTransfer$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BOOLEAN AcceleratedTransfer;
     * }
     */
    public static byte AcceleratedTransfer$get(MemorySegment seg) {
        return (byte)_STORAGE_ADAPTER_DESCRIPTOR.AcceleratedTransfer$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BOOLEAN AcceleratedTransfer;
     * }
     */
    public static void AcceleratedTransfer$set(MemorySegment seg, byte x) {
        _STORAGE_ADAPTER_DESCRIPTOR.AcceleratedTransfer$VH.set(seg, x);
    }
    public static byte AcceleratedTransfer$get(MemorySegment seg, long index) {
        return (byte)_STORAGE_ADAPTER_DESCRIPTOR.AcceleratedTransfer$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AcceleratedTransfer$set(MemorySegment seg, long index, byte x) {
        _STORAGE_ADAPTER_DESCRIPTOR.AcceleratedTransfer$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle BusType$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("BusType"));
    public static VarHandle BusType$VH() {
        return _STORAGE_ADAPTER_DESCRIPTOR.BusType$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE BusType;
     * }
     */
    public static byte BusType$get(MemorySegment seg) {
        return (byte)_STORAGE_ADAPTER_DESCRIPTOR.BusType$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE BusType;
     * }
     */
    public static void BusType$set(MemorySegment seg, byte x) {
        _STORAGE_ADAPTER_DESCRIPTOR.BusType$VH.set(seg, x);
    }
    public static byte BusType$get(MemorySegment seg, long index) {
        return (byte)_STORAGE_ADAPTER_DESCRIPTOR.BusType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void BusType$set(MemorySegment seg, long index, byte x) {
        _STORAGE_ADAPTER_DESCRIPTOR.BusType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle BusMajorVersion$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("BusMajorVersion"));
    public static VarHandle BusMajorVersion$VH() {
        return _STORAGE_ADAPTER_DESCRIPTOR.BusMajorVersion$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD BusMajorVersion;
     * }
     */
    public static short BusMajorVersion$get(MemorySegment seg) {
        return (short)_STORAGE_ADAPTER_DESCRIPTOR.BusMajorVersion$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD BusMajorVersion;
     * }
     */
    public static void BusMajorVersion$set(MemorySegment seg, short x) {
        _STORAGE_ADAPTER_DESCRIPTOR.BusMajorVersion$VH.set(seg, x);
    }
    public static short BusMajorVersion$get(MemorySegment seg, long index) {
        return (short)_STORAGE_ADAPTER_DESCRIPTOR.BusMajorVersion$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void BusMajorVersion$set(MemorySegment seg, long index, short x) {
        _STORAGE_ADAPTER_DESCRIPTOR.BusMajorVersion$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle BusMinorVersion$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("BusMinorVersion"));
    public static VarHandle BusMinorVersion$VH() {
        return _STORAGE_ADAPTER_DESCRIPTOR.BusMinorVersion$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * WORD BusMinorVersion;
     * }
     */
    public static short BusMinorVersion$get(MemorySegment seg) {
        return (short)_STORAGE_ADAPTER_DESCRIPTOR.BusMinorVersion$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * WORD BusMinorVersion;
     * }
     */
    public static void BusMinorVersion$set(MemorySegment seg, short x) {
        _STORAGE_ADAPTER_DESCRIPTOR.BusMinorVersion$VH.set(seg, x);
    }
    public static short BusMinorVersion$get(MemorySegment seg, long index) {
        return (short)_STORAGE_ADAPTER_DESCRIPTOR.BusMinorVersion$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void BusMinorVersion$set(MemorySegment seg, long index, short x) {
        _STORAGE_ADAPTER_DESCRIPTOR.BusMinorVersion$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle SrbType$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SrbType"));
    public static VarHandle SrbType$VH() {
        return _STORAGE_ADAPTER_DESCRIPTOR.SrbType$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE SrbType;
     * }
     */
    public static byte SrbType$get(MemorySegment seg) {
        return (byte)_STORAGE_ADAPTER_DESCRIPTOR.SrbType$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE SrbType;
     * }
     */
    public static void SrbType$set(MemorySegment seg, byte x) {
        _STORAGE_ADAPTER_DESCRIPTOR.SrbType$VH.set(seg, x);
    }
    public static byte SrbType$get(MemorySegment seg, long index) {
        return (byte)_STORAGE_ADAPTER_DESCRIPTOR.SrbType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SrbType$set(MemorySegment seg, long index, byte x) {
        _STORAGE_ADAPTER_DESCRIPTOR.SrbType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle AddressType$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddressType"));
    public static VarHandle AddressType$VH() {
        return _STORAGE_ADAPTER_DESCRIPTOR.AddressType$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE AddressType;
     * }
     */
    public static byte AddressType$get(MemorySegment seg) {
        return (byte)_STORAGE_ADAPTER_DESCRIPTOR.AddressType$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE AddressType;
     * }
     */
    public static void AddressType$set(MemorySegment seg, byte x) {
        _STORAGE_ADAPTER_DESCRIPTOR.AddressType$VH.set(seg, x);
    }
    public static byte AddressType$get(MemorySegment seg, long index) {
        return (byte)_STORAGE_ADAPTER_DESCRIPTOR.AddressType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddressType$set(MemorySegment seg, long index, byte x) {
        _STORAGE_ADAPTER_DESCRIPTOR.AddressType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


