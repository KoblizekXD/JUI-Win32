// Generated by jextract

package com.microsoft.win32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _TAPE_STATISTICS {
 *     DWORD Version;
 *     DWORD Flags;
 *     LARGE_INTEGER RecoveredWrites;
 *     LARGE_INTEGER UnrecoveredWrites;
 *     LARGE_INTEGER RecoveredReads;
 *     LARGE_INTEGER UnrecoveredReads;
 *     BYTE CompressionRatioReads;
 *     BYTE CompressionRatioWrites;
 * };
 * }
 */
public class _TAPE_STATISTICS {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("Version"),
        Constants$root.C_LONG$LAYOUT.withName("Flags"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("RecoveredWrites"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("UnrecoveredWrites"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("RecoveredReads"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("UnrecoveredReads"),
        Constants$root.C_CHAR$LAYOUT.withName("CompressionRatioReads"),
        Constants$root.C_CHAR$LAYOUT.withName("CompressionRatioWrites"),
        MemoryLayout.paddingLayout(48)
    ).withName("_TAPE_STATISTICS");
    public static MemoryLayout $LAYOUT() {
        return _TAPE_STATISTICS.$struct$LAYOUT;
    }
    static final VarHandle Version$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Version"));
    public static VarHandle Version$VH() {
        return _TAPE_STATISTICS.Version$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Version;
     * }
     */
    public static int Version$get(MemorySegment seg) {
        return (int)_TAPE_STATISTICS.Version$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Version;
     * }
     */
    public static void Version$set(MemorySegment seg, int x) {
        _TAPE_STATISTICS.Version$VH.set(seg, x);
    }
    public static int Version$get(MemorySegment seg, long index) {
        return (int)_TAPE_STATISTICS.Version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Version$set(MemorySegment seg, long index, int x) {
        _TAPE_STATISTICS.Version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Flags"));
    public static VarHandle Flags$VH() {
        return _TAPE_STATISTICS.Flags$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * DWORD Flags;
     * }
     */
    public static int Flags$get(MemorySegment seg) {
        return (int)_TAPE_STATISTICS.Flags$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * DWORD Flags;
     * }
     */
    public static void Flags$set(MemorySegment seg, int x) {
        _TAPE_STATISTICS.Flags$VH.set(seg, x);
    }
    public static int Flags$get(MemorySegment seg, long index) {
        return (int)_TAPE_STATISTICS.Flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Flags$set(MemorySegment seg, long index, int x) {
        _TAPE_STATISTICS.Flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment RecoveredWrites$slice(MemorySegment seg) {
        return seg.asSlice(8, 8);
    }
    public static MemorySegment UnrecoveredWrites$slice(MemorySegment seg) {
        return seg.asSlice(16, 8);
    }
    public static MemorySegment RecoveredReads$slice(MemorySegment seg) {
        return seg.asSlice(24, 8);
    }
    public static MemorySegment UnrecoveredReads$slice(MemorySegment seg) {
        return seg.asSlice(32, 8);
    }
    static final VarHandle CompressionRatioReads$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("CompressionRatioReads"));
    public static VarHandle CompressionRatioReads$VH() {
        return _TAPE_STATISTICS.CompressionRatioReads$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE CompressionRatioReads;
     * }
     */
    public static byte CompressionRatioReads$get(MemorySegment seg) {
        return (byte)_TAPE_STATISTICS.CompressionRatioReads$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE CompressionRatioReads;
     * }
     */
    public static void CompressionRatioReads$set(MemorySegment seg, byte x) {
        _TAPE_STATISTICS.CompressionRatioReads$VH.set(seg, x);
    }
    public static byte CompressionRatioReads$get(MemorySegment seg, long index) {
        return (byte)_TAPE_STATISTICS.CompressionRatioReads$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CompressionRatioReads$set(MemorySegment seg, long index, byte x) {
        _TAPE_STATISTICS.CompressionRatioReads$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle CompressionRatioWrites$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("CompressionRatioWrites"));
    public static VarHandle CompressionRatioWrites$VH() {
        return _TAPE_STATISTICS.CompressionRatioWrites$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * BYTE CompressionRatioWrites;
     * }
     */
    public static byte CompressionRatioWrites$get(MemorySegment seg) {
        return (byte)_TAPE_STATISTICS.CompressionRatioWrites$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * BYTE CompressionRatioWrites;
     * }
     */
    public static void CompressionRatioWrites$set(MemorySegment seg, byte x) {
        _TAPE_STATISTICS.CompressionRatioWrites$VH.set(seg, x);
    }
    public static byte CompressionRatioWrites$get(MemorySegment seg, long index) {
        return (byte)_TAPE_STATISTICS.CompressionRatioWrites$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CompressionRatioWrites$set(MemorySegment seg, long index, byte x) {
        _TAPE_STATISTICS.CompressionRatioWrites$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


